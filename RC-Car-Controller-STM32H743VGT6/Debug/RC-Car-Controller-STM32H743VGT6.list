
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001751c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  080177bc  080177bc  000187bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017e14  08017e14  00018e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017e1c  08017e1c  00018e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017e20  08017e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08017e24  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000283d8  24000158  08017f7c  00019158  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24028530  08017f7c  00019530  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019158  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bd69  00000000  00000000  00019186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005303  00000000  00000000  00044eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f18  00000000  00000000  0004a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000180b  00000000  00000000  0004c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dbb8  00000000  00000000  0004d91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d397  00000000  00000000  0008b4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178604  00000000  00000000  000b886a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00230e6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a18  00000000  00000000  00230eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  002398cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080177a4 	.word	0x080177a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	080177a4 	.word	0x080177a4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09c      	sub	sp, #112	@ 0x70
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 fe11 	bl	80012e8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fd6b 	bl	80021a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f967 	bl	800099c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 f9df 	bl	8000a90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fc5b 	bl	8000f8c <MX_GPIO_Init>
  MX_MDMA_Init();
 80006d6:	f000 fc39 	bl	8000f4c <MX_MDMA_Init>
  MX_DMA_Init();
 80006da:	f000 fbe7 	bl	8000eac <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006de:	f000 fb97 	bl	8000e10 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006e2:	f015 fe6f 	bl	80163c4 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 80006e6:	f000 fb29 	bl	8000d3c <MX_JPEG_Init>
  MX_I2C1_Init();
 80006ea:	f000 faa7 	bl	8000c3c <MX_I2C1_Init>
  MX_SPI4_Init();
 80006ee:	f000 fb39 	bl	8000d64 <MX_SPI4_Init>
  MX_ADC1_Init();
 80006f2:	f000 fa17 	bl	8000b24 <MX_ADC1_Init>
  MX_I2C2_Init();
 80006f6:	f000 fae1 	bl	8000cbc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // ------------------------------------------------------------ SETUP ADC DMA -- //

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	4992      	ldr	r1, [pc, #584]	@ (8000948 <main+0x28c>)
 80006fe:	4893      	ldr	r0, [pc, #588]	@ (800094c <main+0x290>)
 8000700:	f002 f9cc 	bl	8002a9c <HAL_ADC_Start_DMA>

  // ------------------------------------------------------------ SETUP SSD1306 -- //

  uint8_t init_result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

  hssd1.i2c_handle = &hi2c2;
 800070a:	4b91      	ldr	r3, [pc, #580]	@ (8000950 <main+0x294>)
 800070c:	4a91      	ldr	r2, [pc, #580]	@ (8000954 <main+0x298>)
 800070e:	601a      	str	r2, [r3, #0]
  hssd1.address = OLED_ADDR;
 8000710:	4b8f      	ldr	r3, [pc, #572]	@ (8000950 <main+0x294>)
 8000712:	223c      	movs	r2, #60	@ 0x3c
 8000714:	711a      	strb	r2, [r3, #4]
  hssd1.vram_full = ssd1_vram;
 8000716:	4b8e      	ldr	r3, [pc, #568]	@ (8000950 <main+0x294>)
 8000718:	4a8f      	ldr	r2, [pc, #572]	@ (8000958 <main+0x29c>)
 800071a:	609a      	str	r2, [r3, #8]
  init_result = SSD1306_Init(&hssd1);
 800071c:	488c      	ldr	r0, [pc, #560]	@ (8000950 <main+0x294>)
 800071e:	f001 fbbd 	bl	8001e9c <SSD1306_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (init_result) {
 8000728:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800072c:	2b00      	cmp	r3, #0
 800072e:	d014      	beq.n	800075a <main+0x9e>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 8000730:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000734:	461a      	mov	r2, r3
 8000736:	4989      	ldr	r1, [pc, #548]	@ (800095c <main+0x2a0>)
 8000738:	4889      	ldr	r0, [pc, #548]	@ (8000960 <main+0x2a4>)
 800073a:	f016 fb93 	bl	8016e64 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800073e:	4888      	ldr	r0, [pc, #544]	@ (8000960 <main+0x2a4>)
 8000740:	f7ff fdce 	bl	80002e0 <strlen>
 8000744:	4603      	mov	r3, r0
 8000746:	4619      	mov	r1, r3
 8000748:	4885      	ldr	r0, [pc, #532]	@ (8000960 <main+0x2a4>)
 800074a:	f015 ff0b 	bl	8016564 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 800074e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000752:	f001 fdb7 	bl	80022c4 <HAL_Delay>
	  while (1) {
 8000756:	bf00      	nop
 8000758:	e7ea      	b.n	8000730 <main+0x74>
	  }
  }

  hssd2.i2c_handle = &hi2c1;
 800075a:	4b82      	ldr	r3, [pc, #520]	@ (8000964 <main+0x2a8>)
 800075c:	4a82      	ldr	r2, [pc, #520]	@ (8000968 <main+0x2ac>)
 800075e:	601a      	str	r2, [r3, #0]
  hssd2.address = OLED_ADDR;
 8000760:	4b80      	ldr	r3, [pc, #512]	@ (8000964 <main+0x2a8>)
 8000762:	223c      	movs	r2, #60	@ 0x3c
 8000764:	711a      	strb	r2, [r3, #4]
  hssd2.vram_full = ssd2_vram;
 8000766:	4b7f      	ldr	r3, [pc, #508]	@ (8000964 <main+0x2a8>)
 8000768:	4a80      	ldr	r2, [pc, #512]	@ (800096c <main+0x2b0>)
 800076a:	609a      	str	r2, [r3, #8]
  init_result = SSD1306_Init(&hssd2);
 800076c:	487d      	ldr	r0, [pc, #500]	@ (8000964 <main+0x2a8>)
 800076e:	f001 fb95 	bl	8001e9c <SSD1306_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (init_result) {
 8000778:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800077c:	2b00      	cmp	r3, #0
 800077e:	d014      	beq.n	80007aa <main+0xee>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 8000780:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000784:	461a      	mov	r2, r3
 8000786:	497a      	ldr	r1, [pc, #488]	@ (8000970 <main+0x2b4>)
 8000788:	4875      	ldr	r0, [pc, #468]	@ (8000960 <main+0x2a4>)
 800078a:	f016 fb6b 	bl	8016e64 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800078e:	4874      	ldr	r0, [pc, #464]	@ (8000960 <main+0x2a4>)
 8000790:	f7ff fda6 	bl	80002e0 <strlen>
 8000794:	4603      	mov	r3, r0
 8000796:	4619      	mov	r1, r3
 8000798:	4871      	ldr	r0, [pc, #452]	@ (8000960 <main+0x2a4>)
 800079a:	f015 fee3 	bl	8016564 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 800079e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007a2:	f001 fd8f 	bl	80022c4 <HAL_Delay>
	  while (1) {
 80007a6:	bf00      	nop
 80007a8:	e7ea      	b.n	8000780 <main+0xc4>
	  }
  }

  // ------------------------------------------------------------ SETUP ST7789 -- //
  hst7789.spi_handle = &hspi4;
 80007aa:	4b72      	ldr	r3, [pc, #456]	@ (8000974 <main+0x2b8>)
 80007ac:	4a72      	ldr	r2, [pc, #456]	@ (8000978 <main+0x2bc>)
 80007ae:	601a      	str	r2, [r3, #0]
  hst7789.spi_ready = 1;
 80007b0:	4b70      	ldr	r3, [pc, #448]	@ (8000974 <main+0x2b8>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	711a      	strb	r2, [r3, #4]
  hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007b6:	4b6f      	ldr	r3, [pc, #444]	@ (8000974 <main+0x2b8>)
 80007b8:	4a70      	ldr	r2, [pc, #448]	@ (800097c <main+0x2c0>)
 80007ba:	609a      	str	r2, [r3, #8]
  hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000974 <main+0x2b8>)
 80007be:	2220      	movs	r2, #32
 80007c0:	819a      	strh	r2, [r3, #12]
  hst7789.vram = st7789_vram;
 80007c2:	4b6c      	ldr	r3, [pc, #432]	@ (8000974 <main+0x2b8>)
 80007c4:	4a6e      	ldr	r2, [pc, #440]	@ (8000980 <main+0x2c4>)
 80007c6:	611a      	str	r2, [r3, #16]
  init_result = ST7789_Init(&hst7789);
 80007c8:	486a      	ldr	r0, [pc, #424]	@ (8000974 <main+0x2b8>)
 80007ca:	f001 fc8b 	bl	80020e4 <ST7789_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (init_result) {
 80007d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d014      	beq.n	8000806 <main+0x14a>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80007e0:	461a      	mov	r2, r3
 80007e2:	4968      	ldr	r1, [pc, #416]	@ (8000984 <main+0x2c8>)
 80007e4:	485e      	ldr	r0, [pc, #376]	@ (8000960 <main+0x2a4>)
 80007e6:	f016 fb3d 	bl	8016e64 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007ea:	485d      	ldr	r0, [pc, #372]	@ (8000960 <main+0x2a4>)
 80007ec:	f7ff fd78 	bl	80002e0 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4619      	mov	r1, r3
 80007f4:	485a      	ldr	r0, [pc, #360]	@ (8000960 <main+0x2a4>)
 80007f6:	f015 feb5 	bl	8016564 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 80007fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fe:	f001 fd61 	bl	80022c4 <HAL_Delay>
	  while (1) {
 8000802:	bf00      	nop
 8000804:	e7ea      	b.n	80007dc <main+0x120>
	  }
  }

  // ------------------------------------------------------------ PROGRAM THE XBEE -- //
  uint8_t at_buffer[100] = {0};	// Reserve 20 bytes for writing AT commands
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2264      	movs	r2, #100	@ 0x64
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f016 fb4a 	bl	8016ea8 <memset>

  // Enter command mode
  HAL_Delay(2000);
 8000814:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000818:	f001 fd54 	bl	80022c4 <HAL_Delay>
  sprintf(at_buffer, "+++");
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4959      	ldr	r1, [pc, #356]	@ (8000988 <main+0x2cc>)
 8000822:	4618      	mov	r0, r3
 8000824:	f016 fb1e 	bl	8016e64 <siprintf>
  HAL_UART_Transmit(&huart1, at_buffer, strlen(at_buffer), 1000);
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fd57 	bl	80002e0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f107 0108 	add.w	r1, r7, #8
 800083a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800083e:	4853      	ldr	r0, [pc, #332]	@ (800098c <main+0x2d0>)
 8000840:	f010 fcff 	bl	8011242 <HAL_UART_Transmit>
  WriteDebug(at_buffer, strlen(at_buffer));
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fd49 	bl	80002e0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b2da      	uxtb	r2, r3
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fd1f 	bl	800129c <WriteDebug>
  HAL_Delay(1500);
 800085e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000862:	f001 fd2f 	bl	80022c4 <HAL_Delay>
//  sprintf(at_buffer, "ATBD 7\r");
//  HAL_UART_Transmit(&huart1, at_buffer, strlen(at_buffer), 1000);
//  WriteDebug(at_buffer, strlen(at_buffer));
//  HAL_Delay(1500);

  sprintf(at_buffer, "ATNI ROVERTIME_CON\r");
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4949      	ldr	r1, [pc, #292]	@ (8000990 <main+0x2d4>)
 800086c:	4618      	mov	r0, r3
 800086e:	f016 faf9 	bl	8016e64 <siprintf>
  HAL_UART_Transmit(&huart1, at_buffer, strlen(at_buffer), 1000);
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fd32 	bl	80002e0 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f107 0108 	add.w	r1, r7, #8
 8000884:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000888:	4840      	ldr	r0, [pc, #256]	@ (800098c <main+0x2d0>)
 800088a:	f010 fcda 	bl	8011242 <HAL_UART_Transmit>
  WriteDebug(at_buffer, strlen(at_buffer));
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fd24 	bl	80002e0 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	b2da      	uxtb	r2, r3
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fcfa 	bl	800129c <WriteDebug>
  HAL_Delay(1500);
 80008a8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80008ac:	f001 fd0a 	bl	80022c4 <HAL_Delay>


  // Write changes
  sprintf(at_buffer, "ATWR\r");
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4937      	ldr	r1, [pc, #220]	@ (8000994 <main+0x2d8>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f016 fad4 	bl	8016e64 <siprintf>
  HAL_UART_Transmit(&huart1, at_buffer, strlen(at_buffer), 1000);
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fd0d 	bl	80002e0 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f107 0108 	add.w	r1, r7, #8
 80008ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d2:	482e      	ldr	r0, [pc, #184]	@ (800098c <main+0x2d0>)
 80008d4:	f010 fcb5 	bl	8011242 <HAL_UART_Transmit>
  WriteDebug(at_buffer, strlen(at_buffer));
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fcff 	bl	80002e0 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fcd5 	bl	800129c <WriteDebug>
  HAL_Delay(1500);
 80008f2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80008f6:	f001 fce5 	bl	80022c4 <HAL_Delay>

  // Exit CMD mode
  sprintf(at_buffer, "ATCN\r");
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4926      	ldr	r1, [pc, #152]	@ (8000998 <main+0x2dc>)
 8000900:	4618      	mov	r0, r3
 8000902:	f016 faaf 	bl	8016e64 <siprintf>
  HAL_UART_Transmit(&huart1, at_buffer, strlen(at_buffer), 1000);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fce8 	bl	80002e0 <strlen>
 8000910:	4603      	mov	r3, r0
 8000912:	b29a      	uxth	r2, r3
 8000914:	f107 0108 	add.w	r1, r7, #8
 8000918:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091c:	481b      	ldr	r0, [pc, #108]	@ (800098c <main+0x2d0>)
 800091e:	f010 fc90 	bl	8011242 <HAL_UART_Transmit>
  WriteDebug(at_buffer, strlen(at_buffer));
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fcda 	bl	80002e0 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	b2da      	uxtb	r2, r3
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fcb0 	bl	800129c <WriteDebug>
  HAL_Delay(1500);
 800093c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000940:	f001 fcc0 	bl	80022c4 <HAL_Delay>

  // Hang
  while (1) {}
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <main+0x288>
 8000948:	240267c4 	.word	0x240267c4
 800094c:	24000174 	.word	0x24000174
 8000950:	24000724 	.word	0x24000724
 8000954:	240002a4 	.word	0x240002a4
 8000958:	2400074c 	.word	0x2400074c
 800095c:	080177bc 	.word	0x080177bc
 8000960:	24000f4c 	.word	0x24000f4c
 8000964:	24000738 	.word	0x24000738
 8000968:	24000250 	.word	0x24000250
 800096c:	24000b4c 	.word	0x24000b4c
 8000970:	080177d8 	.word	0x080177d8
 8000974:	24000fb0 	.word	0x24000fb0
 8000978:	24000518 	.word	0x24000518
 800097c:	58021000 	.word	0x58021000
 8000980:	24000fc4 	.word	0x24000fc4
 8000984:	080177f4 	.word	0x080177f4
 8000988:	08017810 	.word	0x08017810
 800098c:	24000618 	.word	0x24000618
 8000990:	08017814 	.word	0x08017814
 8000994:	08017828 	.word	0x08017828
 8000998:	08017830 	.word	0x08017830

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b09c      	sub	sp, #112	@ 0x70
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a6:	224c      	movs	r2, #76	@ 0x4c
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f016 fa7c 	bl	8016ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2220      	movs	r2, #32
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f016 fa76 	bl	8016ea8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009bc:	2002      	movs	r0, #2
 80009be:	f00b ff17 	bl	800c7f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b30      	ldr	r3, [pc, #192]	@ (8000a88 <SystemClock_Config+0xec>)
 80009c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000a88 <SystemClock_Config+0xec>)
 80009cc:	f023 0301 	bic.w	r3, r3, #1
 80009d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a88 <SystemClock_Config+0xec>)
 80009d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <SystemClock_Config+0xf0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a8c <SystemClock_Config+0xf0>)
 80009e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <SystemClock_Config+0xf0>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f4:	bf00      	nop
 80009f6:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <SystemClock_Config+0xf0>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a02:	d1f8      	bne.n	80009f6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a12:	2302      	movs	r3, #2
 8000a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a1a:	2318      	movs	r3, #24
 8000a1c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000a22:	2306      	movs	r3, #6
 8000a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00b ff22 	bl	800c884 <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a46:	f000 fc7b 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	233f      	movs	r3, #63	@ 0x3f
 8000a4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a5a:	2340      	movs	r3, #64	@ 0x40
 8000a5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a5e:	2340      	movs	r3, #64	@ 0x40
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a68:	2340      	movs	r3, #64	@ 0x40
 8000a6a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2102      	movs	r1, #2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f00c fb61 	bl	800d138 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a7c:	f000 fc60 	bl	8001340 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3770      	adds	r7, #112	@ 0x70
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58000400 	.word	0x58000400
 8000a8c:	58024800 	.word	0x58024800

08000a90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0b0      	sub	sp, #192	@ 0xc0
 8000a94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	22c0      	movs	r2, #192	@ 0xc0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f016 fa03 	bl	8016ea8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C2
 8000aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b20 <PeriphCommonClock_Config+0x90>)
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000aac:	2310      	movs	r3, #16
 8000aae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 20;
 8000ab4:	2314      	movs	r3, #20
 8000ab6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000adc:	2303      	movs	r3, #3
 8000ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ae0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aea:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000af0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af4:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00c fea2 	bl	800d850 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <PeriphCommonClock_Config+0x86>
  {
    Error_Handler();
 8000b12:	f000 fc15 	bl	8001340 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	37c0      	adds	r7, #192	@ 0xc0
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	00082008 	.word	0x00082008

08000b24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	@ 0x28
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b48:	4b38      	ldr	r3, [pc, #224]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b4a:	4a39      	ldr	r2, [pc, #228]	@ (8000c30 <MX_ADC1_Init+0x10c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000b4e:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b50:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b56:	4b35      	ldr	r3, [pc, #212]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b5c:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b62:	4b32      	ldr	r3, [pc, #200]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b64:	2208      	movs	r2, #8
 8000b66:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b68:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000b74:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b80:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b86:	4b29      	ldr	r3, [pc, #164]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b8e:	2203      	movs	r2, #3
 8000b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b92:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b98:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b9e:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bac:	481f      	ldr	r0, [pc, #124]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000bae:	f001 fdd3 	bl	8002758 <HAL_ADC_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bb8:	f000 fbc2 	bl	8001340 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4819      	ldr	r0, [pc, #100]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000bc8:	f002 fd80 	bl	80036cc <HAL_ADCEx_MultiModeConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000bd2:	f000 fbb5 	bl	8001340 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_ADC1_Init+0x110>)
 8000bd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000bde:	2307      	movs	r3, #7
 8000be0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000be6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be8:	2304      	movs	r3, #4
 8000bea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000bfa:	f002 f827 	bl	8002c4c <HAL_ADC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c04:	f000 fb9c 	bl	8001340 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_ADC1_Init+0x114>)
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000c16:	f002 f819 	bl	8002c4c <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000c20:	f000 fb8e 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24000174 	.word	0x24000174
 8000c30:	40022000 	.word	0x40022000
 8000c34:	0c900008 	.word	0x0c900008
 8000c38:	10c00010 	.word	0x10c00010

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb4 <MX_I2C1_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <MX_I2C1_Init+0x7c>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c76:	480e      	ldr	r0, [pc, #56]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c78:	f005 ffae 	bl	8006bd8 <HAL_I2C_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c82:	f000 fb5d 	bl	8001340 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c8a:	f008 fbdf 	bl	800944c <HAL_I2CEx_ConfigAnalogFilter>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c94:	f000 fb54 	bl	8001340 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_I2C1_Init+0x74>)
 8000c9c:	f008 fc21 	bl	80094e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 fb4b 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000250 	.word	0x24000250
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	00401959 	.word	0x00401959

08000cbc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d34 <MX_I2C2_Init+0x78>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d38 <MX_I2C2_Init+0x7c>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cde:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cf6:	480e      	ldr	r0, [pc, #56]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000cf8:	f005 ff6e 	bl	8006bd8 <HAL_I2C_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d02:	f000 fb1d 	bl	8001340 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000d0a:	f008 fb9f 	bl	800944c <HAL_I2CEx_ConfigAnalogFilter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d14:	f000 fb14 	bl	8001340 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_I2C2_Init+0x74>)
 8000d1c:	f008 fbe1 	bl	80094e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f000 fb0b 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	240002a4 	.word	0x240002a4
 8000d34:	40005800 	.word	0x40005800
 8000d38:	00401959 	.word	0x00401959

08000d3c <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_JPEG_Init+0x20>)
 8000d42:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <MX_JPEG_Init+0x24>)
 8000d44:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_JPEG_Init+0x20>)
 8000d48:	f008 fc18 	bl	800957c <HAL_JPEG_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000d52:	f000 faf5 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	240003e8 	.word	0x240003e8
 8000d60:	52003000 	.word	0x52003000

08000d64 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d68:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000d6a:	4a28      	ldr	r2, [pc, #160]	@ (8000e0c <MX_SPI4_Init+0xa8>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000d70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d74:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000d76:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000d78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d7c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7e:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d84:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000d92:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d96:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000db8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_SPI4_Init+0xa4>)
 8000df6:	f00f fa29 	bl	801024c <HAL_SPI_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000e00:	f000 fa9e 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	24000518 	.word	0x24000518
 8000e0c:	40013400 	.word	0x40013400

08000e10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e14:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e16:	4a23      	ldr	r2, [pc, #140]	@ (8000ea4 <MX_USART1_UART_Init+0x94>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ea8 <MX_USART1_UART_Init+0x98>)
 8000e1e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e34:	220c      	movs	r2, #12
 8000e36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e56:	4812      	ldr	r0, [pc, #72]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e58:	f010 f9a3 	bl	80111a2 <HAL_UART_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000e62:	f000 fa6d 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e6a:	f011 fe8d 	bl	8012b88 <HAL_UARTEx_SetTxFifoThreshold>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000e74:	f000 fa64 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e7c:	f011 fec2 	bl	8012c04 <HAL_UARTEx_SetRxFifoThreshold>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000e86:	f000 fa5b 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_USART1_UART_Init+0x90>)
 8000e8c:	f011 fe41 	bl	8012b12 <HAL_UARTEx_EnableFifoMode>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000e96:	f000 fa53 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	24000618 	.word	0x24000618
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	0001b207 	.word	0x0001b207

08000eac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <MX_DMA_Init+0x9c>)
 8000eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eb8:	4a23      	ldr	r2, [pc, #140]	@ (8000f48 <MX_DMA_Init+0x9c>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MX_DMA_Init+0x9c>)
 8000ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_DMA_Init+0x9c>)
 8000ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f48 <MX_DMA_Init+0x9c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_DMA_Init+0x9c>)
 8000ee2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200b      	movs	r0, #11
 8000ef4:	f002 fda3 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ef8:	200b      	movs	r0, #11
 8000efa:	f002 fdba 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	200c      	movs	r0, #12
 8000f04:	f002 fd9b 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f08:	200c      	movs	r0, #12
 8000f0a:	f002 fdb2 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	200d      	movs	r0, #13
 8000f14:	f002 fd93 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f18:	200d      	movs	r0, #13
 8000f1a:	f002 fdaa 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200e      	movs	r0, #14
 8000f24:	f002 fd8b 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f28:	200e      	movs	r0, #14
 8000f2a:	f002 fda2 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2038      	movs	r0, #56	@ 0x38
 8000f34:	f002 fd83 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f38:	2038      	movs	r0, #56	@ 0x38
 8000f3a:	f002 fd9a 	bl	8003a72 <HAL_NVIC_EnableIRQ>

}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58024400 	.word	0x58024400

08000f4c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <MX_MDMA_Init+0x3c>)
 8000f54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f58:	4a0b      	ldr	r2, [pc, #44]	@ (8000f88 <MX_MDMA_Init+0x3c>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_MDMA_Init+0x3c>)
 8000f64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	207a      	movs	r0, #122	@ 0x7a
 8000f76:	f002 fd62 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000f7a:	207a      	movs	r0, #122	@ 0x7a
 8000f7c:	f002 fd79 	bl	8003a72 <HAL_NVIC_EnableIRQ>

}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	58024400 	.word	0x58024400

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa2:	4b47      	ldr	r3, [pc, #284]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	4a45      	ldr	r2, [pc, #276]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb2:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	4a36      	ldr	r2, [pc, #216]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fee:	4b34      	ldr	r3, [pc, #208]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001002:	4a2f      	ldr	r2, [pc, #188]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100c:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_GPIO_Init+0x134>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <MX_GPIO_Init+0x134>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001020:	4a27      	ldr	r2, [pc, #156]	@ (80010c0 <MX_GPIO_Init+0x134>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102a:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <MX_GPIO_Init+0x134>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2120      	movs	r1, #32
 800103c:	4821      	ldr	r0, [pc, #132]	@ (80010c4 <MX_GPIO_Init+0x138>)
 800103e:	f005 fdb1 	bl	8006ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001048:	481f      	ldr	r0, [pc, #124]	@ (80010c8 <MX_GPIO_Init+0x13c>)
 800104a:	f005 fdab 	bl	8006ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 800104e:	2320      	movs	r3, #32
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4817      	ldr	r0, [pc, #92]	@ (80010c4 <MX_GPIO_Init+0x138>)
 8001066:	f005 fbed 	bl	8006844 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_L_Pin */
  GPIO_InitStruct.Pin = BTN_L_Pin;
 800106a:	2320      	movs	r3, #32
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4813      	ldr	r0, [pc, #76]	@ (80010cc <MX_GPIO_Init+0x140>)
 800107e:	f005 fbe1 	bl	8006844 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 8001082:	2320      	movs	r3, #32
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <MX_GPIO_Init+0x13c>)
 8001096:	f005 fbd5 	bl	8006844 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 800109a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_GPIO_Init+0x13c>)
 80010b4:	f005 fbc6 	bl	8006844 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	@ 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58021000 	.word	0x58021000
 80010c8:	58020800 	.word	0x58020800
 80010cc:	58020000 	.word	0x58020000

080010d0 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <HAL_SPI_TxCpltCallback+0x18>)
 80010da:	f001 f853 	bl	8002184 <ST7789_DMATransmitCplt>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	24000fb0 	.word	0x24000fb0
 80010ec:	00000000 	.word	0x00000000

080010f0 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	//adc_average[0] = 0;
	//adc_average[1] = 0;
	uint16_t adc_newavg[2] = {0, 0};
 80010f8:	2300      	movs	r3, #0
 80010fa:	81bb      	strh	r3, [r7, #12]
 80010fc:	2300      	movs	r3, #0
 80010fe:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	e01f      	b.n	8001146 <HAL_ADC_ConvCpltCallback+0x56>
		// Accumulate the samples
		// Have to pre-divide so the result fits in a uint16
		adc_newavg[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	bfb8      	it	lt
 8001110:	425b      	neglt	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	0053      	lsls	r3, r2, #1
 8001116:	3318      	adds	r3, #24
 8001118:	443b      	add	r3, r7
 800111a:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 800111e:	4858      	ldr	r0, [pc, #352]	@ (8001280 <HAL_ADC_ConvCpltCallback+0x190>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001126:	4857      	ldr	r0, [pc, #348]	@ (8001284 <HAL_ADC_ConvCpltCallback+0x194>)
 8001128:	fba0 0303 	umull	r0, r3, r0, r3
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	b29b      	uxth	r3, r3
 8001130:	440b      	add	r3, r1
 8001132:	b299      	uxth	r1, r3
 8001134:	0053      	lsls	r3, r2, #1
 8001136:	3318      	adds	r3, #24
 8001138:	443b      	add	r3, r7
 800113a:	460a      	mov	r2, r1
 800113c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (int i = 0; i < 20; i++) {
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b13      	cmp	r3, #19
 800114a:	dddc      	ble.n	8001106 <HAL_ADC_ConvCpltCallback+0x16>
	}

	for (int i = 0; i < 2; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	e081      	b.n	8001256 <HAL_ADC_ConvCpltCallback+0x166>
		// Interpolate for smoother control
		adc_average[i] *= 0.4;
 8001152:	4a4d      	ldr	r2, [pc, #308]	@ (8001288 <HAL_ADC_ConvCpltCallback+0x198>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001162:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8001270 <HAL_ADC_ConvCpltCallback+0x180>
 8001166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800116a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800116e:	ee17 3a90 	vmov	r3, s15
 8001172:	b299      	uxth	r1, r3
 8001174:	4a44      	ldr	r2, [pc, #272]	@ (8001288 <HAL_ADC_ConvCpltCallback+0x198>)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_average[i] += adc_newavg[i]*0.6;
 800117c:	4a42      	ldr	r2, [pc, #264]	@ (8001288 <HAL_ADC_ConvCpltCallback+0x198>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	3318      	adds	r3, #24
 8001192:	443b      	add	r3, r7
 8001194:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011a0:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8001278 <HAL_ADC_ConvCpltCallback+0x188>
 80011a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011b0:	ee17 3a90 	vmov	r3, s15
 80011b4:	b299      	uxth	r1, r3
 80011b6:	4a34      	ldr	r2, [pc, #208]	@ (8001288 <HAL_ADC_ConvCpltCallback+0x198>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 80011be:	4a32      	ldr	r2, [pc, #200]	@ (8001288 <HAL_ADC_ConvCpltCallback+0x198>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	0bdb      	lsrs	r3, r3, #15
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4619      	mov	r1, r3
 80011d2:	4a2e      	ldr	r2, [pc, #184]	@ (800128c <HAL_ADC_ConvCpltCallback+0x19c>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4413      	add	r3, r2
 80011d8:	460a      	mov	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 80011dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001288 <HAL_ADC_ConvCpltCallback+0x198>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e4:	09db      	lsrs	r3, r3, #7
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b2d9      	uxtb	r1, r3
 80011ea:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4413      	add	r3, r2
 80011f0:	460a      	mov	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 80011f4:	4a25      	ldr	r2, [pc, #148]	@ (800128c <HAL_ADC_ConvCpltCallback+0x19c>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00a      	beq.n	8001216 <HAL_ADC_ConvCpltCallback+0x126>
 8001200:	4a23      	ldr	r2, [pc, #140]	@ (8001290 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	43db      	mvns	r3, r3
 800120a:	b2d9      	uxtb	r1, r3
 800120c:	4a20      	ldr	r2, [pc, #128]	@ (8001290 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4413      	add	r3, r2
 8001212:	460a      	mov	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 8001216:	4a1e      	ldr	r2, [pc, #120]	@ (8001290 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4413      	add	r3, r2
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d204      	bcs.n	8001230 <HAL_ADC_ConvCpltCallback+0x140>
			slider_magnitude[i] = 0;
 8001226:	4a1a      	ldr	r2, [pc, #104]	@ (8001290 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4413      	add	r3, r2
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001230:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001242:	429a      	cmp	r2, r3
 8001244:	dd04      	ble.n	8001250 <HAL_ADC_ConvCpltCallback+0x160>
				slider_magnitude[i] = 0xFF;
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4413      	add	r3, r2
 800124c:	22ff      	movs	r2, #255	@ 0xff
 800124e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	3301      	adds	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b01      	cmp	r3, #1
 800125a:	f77f af7a 	ble.w	8001152 <HAL_ADC_ConvCpltCallback+0x62>

	}
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	f3af 8000 	nop.w
 8001270:	9999999a 	.word	0x9999999a
 8001274:	3fd99999 	.word	0x3fd99999
 8001278:	33333333 	.word	0x33333333
 800127c:	3fe33333 	.word	0x3fe33333
 8001280:	240267c4 	.word	0x240267c4
 8001284:	cccccccd 	.word	0xcccccccd
 8001288:	240267ec 	.word	0x240267ec
 800128c:	240267f4 	.word	0x240267f4
 8001290:	240267f0 	.word	0x240267f0
 8001294:	24000000 	.word	0x24000000
 8001298:	24000001 	.word	0x24000001

0800129c <WriteDebug>:
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
	}
}

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
	  SSD1306_Clear(&hssd1);
 80012a8:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <WriteDebug+0x44>)
 80012aa:	f000 fe41 	bl	8001f30 <SSD1306_Clear>
	  SSD1306_Clear(&hssd2);
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <WriteDebug+0x48>)
 80012b0:	f000 fe3e 	bl	8001f30 <SSD1306_Clear>
	  SSD1306_DrawString(&hssd1, str_ptr, str_len);
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	461a      	mov	r2, r3
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4809      	ldr	r0, [pc, #36]	@ (80012e0 <WriteDebug+0x44>)
 80012bc:	f000 feaa 	bl	8002014 <SSD1306_DrawString>
	  SSD1306_DrawString(&hssd2, str_ptr, str_len);
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	461a      	mov	r2, r3
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4807      	ldr	r0, [pc, #28]	@ (80012e4 <WriteDebug+0x48>)
 80012c8:	f000 fea4 	bl	8002014 <SSD1306_DrawString>
	  SSD1306_Update(&hssd1);
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <WriteDebug+0x44>)
 80012ce:	f000 fe43 	bl	8001f58 <SSD1306_Update>
	  SSD1306_Update(&hssd2);
 80012d2:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <WriteDebug+0x48>)
 80012d4:	f000 fe40 	bl	8001f58 <SSD1306_Update>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	24000724 	.word	0x24000724
 80012e4:	24000738 	.word	0x24000738

080012e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80012fa:	f002 fbd5 	bl	8003aa8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012fe:	2301      	movs	r3, #1
 8001300:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001302:	2300      	movs	r3, #0
 8001304:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800130a:	231f      	movs	r3, #31
 800130c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800130e:	2387      	movs	r3, #135	@ 0x87
 8001310:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001312:	2300      	movs	r3, #0
 8001314:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001316:	2300      	movs	r3, #0
 8001318:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800131a:	2301      	movs	r3, #1
 800131c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800131e:	2301      	movs	r3, #1
 8001320:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800132a:	463b      	mov	r3, r7
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fbf3 	bl	8003b18 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001332:	2004      	movs	r0, #4
 8001334:	f002 fbd0 	bl	8003ad8 <HAL_MPU_Enable>

}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_MspInit+0x30>)
 8001354:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001358:	4a08      	ldr	r2, [pc, #32]	@ (800137c <HAL_MspInit+0x30>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_MspInit+0x30>)
 8001364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	58024400 	.word	0x58024400

08001380 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a3e      	ldr	r2, [pc, #248]	@ (8001498 <HAL_ADC_MspInit+0x118>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d175      	bne.n	800148e <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013a2:	4b3e      	ldr	r3, [pc, #248]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013a8:	4a3c      	ldr	r2, [pc, #240]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013aa:	f043 0320 	orr.w	r3, r3, #32
 80013ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80013b2:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013b8:	f003 0320 	and.w	r3, r3, #32
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b36      	ldr	r3, [pc, #216]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c6:	4a35      	ldr	r2, [pc, #212]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d0:	4b32      	ldr	r3, [pc, #200]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e4:	4a2d      	ldr	r2, [pc, #180]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ee:	4b2b      	ldr	r3, [pc, #172]	@ (800149c <HAL_ADC_MspInit+0x11c>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 80013fc:	2340      	movs	r3, #64	@ 0x40
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001400:	2303      	movs	r3, #3
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4824      	ldr	r0, [pc, #144]	@ (80014a0 <HAL_ADC_MspInit+0x120>)
 8001410:	f005 fa18 	bl	8006844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001414:	2310      	movs	r3, #16
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001418:	2303      	movs	r3, #3
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	481f      	ldr	r0, [pc, #124]	@ (80014a4 <HAL_ADC_MspInit+0x124>)
 8001428:	f005 fa0c 	bl	8006844 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800142c:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 800142e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ac <HAL_ADC_MspInit+0x12c>)
 8001430:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 8001434:	2209      	movs	r2, #9
 8001436:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800143e:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 8001446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800144a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 800144e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001452:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 8001456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800145a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 800145e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001462:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 8001466:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800146a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 8001474:	f002 fb90 	bl	8003b98 <HAL_DMA_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800147e:	f7ff ff5f 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 8001486:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_ADC_MspInit+0x128>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	@ 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40022000 	.word	0x40022000
 800149c:	58024400 	.word	0x58024400
 80014a0:	58020000 	.word	0x58020000
 80014a4:	58020800 	.word	0x58020800
 80014a8:	240001d8 	.word	0x240001d8
 80014ac:	40020410 	.word	0x40020410

080014b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	@ 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a73      	ldr	r2, [pc, #460]	@ (800169c <HAL_I2C_MspInit+0x1ec>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d16d      	bne.n	80015ae <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b73      	ldr	r3, [pc, #460]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d8:	4a71      	ldr	r2, [pc, #452]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e2:	4b6f      	ldr	r3, [pc, #444]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80014f0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f6:	2312      	movs	r3, #18
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001502:	2304      	movs	r3, #4
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	4865      	ldr	r0, [pc, #404]	@ (80016a4 <HAL_I2C_MspInit+0x1f4>)
 800150e:	f005 f999 	bl	8006844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001512:	4b63      	ldr	r3, [pc, #396]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 8001514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001518:	4a61      	ldr	r2, [pc, #388]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 800151a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800151e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001522:	4b5f      	ldr	r3, [pc, #380]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 8001524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001530:	4b5d      	ldr	r3, [pc, #372]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001532:	4a5e      	ldr	r2, [pc, #376]	@ (80016ac <HAL_I2C_MspInit+0x1fc>)
 8001534:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001536:	4b5c      	ldr	r3, [pc, #368]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001538:	2222      	movs	r2, #34	@ 0x22
 800153a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800153c:	4b5a      	ldr	r3, [pc, #360]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 800153e:	2240      	movs	r2, #64	@ 0x40
 8001540:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001542:	4b59      	ldr	r3, [pc, #356]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001548:	4b57      	ldr	r3, [pc, #348]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 800154a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800154e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001550:	4b55      	ldr	r3, [pc, #340]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001556:	4b54      	ldr	r3, [pc, #336]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800155c:	4b52      	ldr	r3, [pc, #328]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001562:	4b51      	ldr	r3, [pc, #324]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001564:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001568:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156a:	4b4f      	ldr	r3, [pc, #316]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001570:	484d      	ldr	r0, [pc, #308]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001572:	f002 fb11 	bl	8003b98 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 800157c:	f7ff fee0 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a49      	ldr	r2, [pc, #292]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001584:	639a      	str	r2, [r3, #56]	@ 0x38
 8001586:	4a48      	ldr	r2, [pc, #288]	@ (80016a8 <HAL_I2C_MspInit+0x1f8>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	201f      	movs	r0, #31
 8001592:	f002 fa54 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001596:	201f      	movs	r0, #31
 8001598:	f002 fa6b 	bl	8003a72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2020      	movs	r0, #32
 80015a2:	f002 fa4c 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015a6:	2020      	movs	r0, #32
 80015a8:	f002 fa63 	bl	8003a72 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015ac:	e071      	b.n	8001692 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a3f      	ldr	r2, [pc, #252]	@ (80016b0 <HAL_I2C_MspInit+0x200>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d16c      	bne.n	8001692 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b39      	ldr	r3, [pc, #228]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015be:	4a38      	ldr	r2, [pc, #224]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c8:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015dc:	2312      	movs	r3, #18
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015e8:	2304      	movs	r3, #4
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	482c      	ldr	r0, [pc, #176]	@ (80016a4 <HAL_I2C_MspInit+0x1f4>)
 80015f4:	f005 f926 	bl	8006844 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015f8:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 80015fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015fe:	4a28      	ldr	r2, [pc, #160]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 8001600:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001604:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <HAL_I2C_MspInit+0x1f0>)
 800160a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 8001618:	4a27      	ldr	r2, [pc, #156]	@ (80016b8 <HAL_I2C_MspInit+0x208>)
 800161a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 800161e:	2224      	movs	r2, #36	@ 0x24
 8001620:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 8001624:	2240      	movs	r2, #64	@ 0x40
 8001626:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 8001630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001634:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 800164a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800164e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001656:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 8001658:	f002 fa9e 	bl	8003b98 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8001662:	f7ff fe6d 	bl	8001340 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 800166a:	639a      	str	r2, [r3, #56]	@ 0x38
 800166c:	4a11      	ldr	r2, [pc, #68]	@ (80016b4 <HAL_I2C_MspInit+0x204>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2021      	movs	r0, #33	@ 0x21
 8001678:	f002 f9e1 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800167c:	2021      	movs	r0, #33	@ 0x21
 800167e:	f002 f9f8 	bl	8003a72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2022      	movs	r0, #34	@ 0x22
 8001688:	f002 f9d9 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800168c:	2022      	movs	r0, #34	@ 0x22
 800168e:	f002 f9f0 	bl	8003a72 <HAL_NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	@ 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40005400 	.word	0x40005400
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58020400 	.word	0x58020400
 80016a8:	240002f8 	.word	0x240002f8
 80016ac:	40020040 	.word	0x40020040
 80016b0:	40005800 	.word	0x40005800
 80016b4:	24000370 	.word	0x24000370
 80016b8:	40020028 	.word	0x40020028

080016bc <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a55      	ldr	r2, [pc, #340]	@ (8001820 <HAL_JPEG_MspInit+0x164>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 80a3 	bne.w	8001816 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80016d0:	4b54      	ldr	r3, [pc, #336]	@ (8001824 <HAL_JPEG_MspInit+0x168>)
 80016d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016d6:	4a53      	ldr	r2, [pc, #332]	@ (8001824 <HAL_JPEG_MspInit+0x168>)
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80016e0:	4b50      	ldr	r3, [pc, #320]	@ (8001824 <HAL_JPEG_MspInit+0x168>)
 80016e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 80016ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 80016f0:	4a4e      	ldr	r2, [pc, #312]	@ (800182c <HAL_JPEG_MspInit+0x170>)
 80016f2:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 80016f6:	2211      	movs	r2, #17
 80016f8:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80016fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001700:	4b49      	ldr	r3, [pc, #292]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001702:	2240      	movs	r2, #64	@ 0x40
 8001704:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001706:	4b48      	ldr	r3, [pc, #288]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800170c:	4b46      	ldr	r3, [pc, #280]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 800170e:	2202      	movs	r2, #2
 8001710:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001712:	4b45      	ldr	r3, [pc, #276]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001718:	4b43      	ldr	r3, [pc, #268]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800171e:	4b42      	ldr	r3, [pc, #264]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001724:	4b40      	ldr	r3, [pc, #256]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001726:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800172c:	4b3e      	ldr	r3, [pc, #248]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 800172e:	2220      	movs	r2, #32
 8001730:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001732:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001734:	2200      	movs	r2, #0
 8001736:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001738:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 800173a:	2200      	movs	r2, #0
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 800173e:	4b3a      	ldr	r3, [pc, #232]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001740:	2200      	movs	r2, #0
 8001742:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001744:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001746:	2200      	movs	r2, #0
 8001748:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800174a:	4837      	ldr	r0, [pc, #220]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 800174c:	f009 fafe 	bl	800ad4c <HAL_MDMA_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001756:	f7ff fdf3 	bl	8001340 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	4832      	ldr	r0, [pc, #200]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001760:	f009 fb40 	bl	800ade4 <HAL_MDMA_ConfigPostRequestMask>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 800176a:	f7ff fde9 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a2d      	ldr	r2, [pc, #180]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001772:	631a      	str	r2, [r3, #48]	@ 0x30
 8001774:	4a2c      	ldr	r2, [pc, #176]	@ (8001828 <HAL_JPEG_MspInit+0x16c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 800177a:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 800177c:	4a2d      	ldr	r2, [pc, #180]	@ (8001834 <HAL_JPEG_MspInit+0x178>)
 800177e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 8001782:	2214      	movs	r2, #20
 8001784:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 800178c:	4b28      	ldr	r3, [pc, #160]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 800178e:	2240      	movs	r2, #64	@ 0x40
 8001790:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001798:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017a0:	2208      	movs	r2, #8
 80017a2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80017a4:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017a6:	2220      	movs	r2, #32
 80017a8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017ba:	2204      	movs	r2, #4
 80017bc:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 80017d6:	4816      	ldr	r0, [pc, #88]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017d8:	f009 fab8 	bl	800ad4c <HAL_MDMA_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 80017e2:	f7ff fdad 	bl	8001340 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	4811      	ldr	r0, [pc, #68]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017ec:	f009 fafa 	bl	800ade4 <HAL_MDMA_ConfigPostRequestMask>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 80017f6:	f7ff fda3 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 80017fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_JPEG_MspInit+0x174>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2079      	movs	r0, #121	@ 0x79
 800180c:	f002 f917 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001810:	2079      	movs	r0, #121	@ 0x79
 8001812:	f002 f92e 	bl	8003a72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	52003000 	.word	0x52003000
 8001824:	58024400 	.word	0x58024400
 8001828:	24000440 	.word	0x24000440
 800182c:	52000040 	.word	0x52000040
 8001830:	240004ac 	.word	0x240004ac
 8001834:	52000080 	.word	0x52000080

08001838 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a3d      	ldr	r2, [pc, #244]	@ (800194c <HAL_SPI_MspInit+0x114>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d173      	bne.n	8001942 <HAL_SPI_MspInit+0x10a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800185a:	4b3d      	ldr	r3, [pc, #244]	@ (8001950 <HAL_SPI_MspInit+0x118>)
 800185c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001860:	4a3b      	ldr	r2, [pc, #236]	@ (8001950 <HAL_SPI_MspInit+0x118>)
 8001862:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001866:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800186a:	4b39      	ldr	r3, [pc, #228]	@ (8001950 <HAL_SPI_MspInit+0x118>)
 800186c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001878:	4b35      	ldr	r3, [pc, #212]	@ (8001950 <HAL_SPI_MspInit+0x118>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187e:	4a34      	ldr	r2, [pc, #208]	@ (8001950 <HAL_SPI_MspInit+0x118>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001888:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <HAL_SPI_MspInit+0x118>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001896:	2344      	movs	r3, #68	@ 0x44
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80018a6:	2305      	movs	r3, #5
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4828      	ldr	r0, [pc, #160]	@ (8001954 <HAL_SPI_MspInit+0x11c>)
 80018b2:	f004 ffc7 	bl	8006844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018b6:	2310      	movs	r3, #16
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80018c6:	2305      	movs	r3, #5
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4820      	ldr	r0, [pc, #128]	@ (8001954 <HAL_SPI_MspInit+0x11c>)
 80018d2:	f004 ffb7 	bl	8006844 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 80018d8:	4a20      	ldr	r2, [pc, #128]	@ (800195c <HAL_SPI_MspInit+0x124>)
 80018da:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 80018de:	2254      	movs	r2, #84	@ 0x54
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 80018e4:	2240      	movs	r2, #64	@ 0x40
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 80018f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f4:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 800190a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800190e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001916:	4810      	ldr	r0, [pc, #64]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 8001918:	f002 f93e 	bl	8003b98 <HAL_DMA_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8001922:	f7ff fd0d 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 800192a:	679a      	str	r2, [r3, #120]	@ 0x78
 800192c:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <HAL_SPI_MspInit+0x120>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2054      	movs	r0, #84	@ 0x54
 8001938:	f002 f881 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800193c:	2054      	movs	r0, #84	@ 0x54
 800193e:	f002 f898 	bl	8003a72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40013400 	.word	0x40013400
 8001950:	58024400 	.word	0x58024400
 8001954:	58021000 	.word	0x58021000
 8001958:	240005a0 	.word	0x240005a0
 800195c:	40020010 	.word	0x40020010

08001960 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0ba      	sub	sp, #232	@ 0xe8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	22c0      	movs	r2, #192	@ 0xc0
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f015 fa91 	bl	8016ea8 <memset>
  if(huart->Instance==USART1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a42      	ldr	r2, [pc, #264]	@ (8001a94 <HAL_UART_MspInit+0x134>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d17d      	bne.n	8001a8c <HAL_UART_MspInit+0x12c>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001990:	f04f 0201 	mov.w	r2, #1
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4618      	mov	r0, r3
 80019a8:	f00b ff52 	bl	800d850 <HAL_RCCEx_PeriphCLKConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80019b2:	f7ff fcc5 	bl	8001340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b6:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <HAL_UART_MspInit+0x138>)
 80019b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019bc:	4a36      	ldr	r2, [pc, #216]	@ (8001a98 <HAL_UART_MspInit+0x138>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80019c6:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <HAL_UART_MspInit+0x138>)
 80019c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <HAL_UART_MspInit+0x138>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019da:	4a2f      	ldr	r2, [pc, #188]	@ (8001a98 <HAL_UART_MspInit+0x138>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <HAL_UART_MspInit+0x138>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4820      	ldr	r0, [pc, #128]	@ (8001a9c <HAL_UART_MspInit+0x13c>)
 8001a1a:	f004 ff13 	bl	8006844 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a20:	4a20      	ldr	r2, [pc, #128]	@ (8001aa4 <HAL_UART_MspInit+0x144>)
 8001a22:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a24:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a26:	2229      	movs	r2, #41	@ 0x29
 8001a28:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a44:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a56:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a5e:	4810      	ldr	r0, [pc, #64]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a60:	f002 f89a 	bl	8003b98 <HAL_DMA_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001a6a:	f7ff fc69 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <HAL_UART_MspInit+0x140>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2025      	movs	r0, #37	@ 0x25
 8001a82:	f001 ffdc 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a86:	2025      	movs	r0, #37	@ 0x25
 8001a88:	f001 fff3 	bl	8003a72 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a8c:	bf00      	nop
 8001a8e:	37e8      	adds	r7, #232	@ 0xe8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40011000 	.word	0x40011000
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58020400 	.word	0x58020400
 8001aa0:	240006ac 	.word	0x240006ac
 8001aa4:	40020058 	.word	0x40020058

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <NMI_Handler+0x4>

08001ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <MemManage_Handler+0x4>

08001ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <UsageFault_Handler+0x4>

08001ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afe:	f000 fbc1 	bl	8002284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <DMA1_Stream0_IRQHandler+0x10>)
 8001b0e:	f003 fb6d 	bl	80051ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	240005a0 	.word	0x240005a0

08001b1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <DMA1_Stream1_IRQHandler+0x10>)
 8001b22:	f003 fb63 	bl	80051ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	24000370 	.word	0x24000370

08001b30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <DMA1_Stream2_IRQHandler+0x10>)
 8001b36:	f003 fb59 	bl	80051ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	240002f8 	.word	0x240002f8

08001b44 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <DMA1_Stream3_IRQHandler+0x10>)
 8001b4a:	f003 fb4f 	bl	80051ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	240006ac 	.word	0x240006ac

08001b58 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <I2C1_EV_IRQHandler+0x10>)
 8001b5e:	f005 fb03 	bl	8007168 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	24000250 	.word	0x24000250

08001b6c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <I2C1_ER_IRQHandler+0x10>)
 8001b72:	f005 fb13 	bl	800719c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24000250 	.word	0x24000250

08001b80 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b84:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <I2C2_EV_IRQHandler+0x10>)
 8001b86:	f005 faef 	bl	8007168 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	240002a4 	.word	0x240002a4

08001b94 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <I2C2_ER_IRQHandler+0x10>)
 8001b9a:	f005 faff 	bl	800719c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	240002a4 	.word	0x240002a4

08001ba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <USART1_IRQHandler+0x10>)
 8001bae:	f00f fbd7 	bl	8011360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	24000618 	.word	0x24000618

08001bbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <DMA2_Stream0_IRQHandler+0x10>)
 8001bc2:	f003 fb13 	bl	80051ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	240001d8 	.word	0x240001d8

08001bd0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <SPI4_IRQHandler+0x10>)
 8001bd6:	f00e ff8d 	bl	8010af4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	24000518 	.word	0x24000518

08001be4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <OTG_FS_IRQHandler+0x10>)
 8001bea:	f009 fca2 	bl	800b532 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	24027ce4 	.word	0x24027ce4

08001bf8 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <JPEG_IRQHandler+0x10>)
 8001bfe:	f007 fe62 	bl	80098c6 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	240003e8 	.word	0x240003e8

08001c0c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <MDMA_IRQHandler+0x14>)
 8001c12:	f009 f961 	bl	800aed8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8001c16:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <MDMA_IRQHandler+0x18>)
 8001c18:	f009 f95e 	bl	800aed8 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	24000440 	.word	0x24000440
 8001c24:	240004ac 	.word	0x240004ac

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f015 f92e 	bl	8016eb8 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	24080000 	.word	0x24080000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	240267f8 	.word	0x240267f8
 8001c90:	24028530 	.word	0x24028530

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c98:	4b43      	ldr	r3, [pc, #268]	@ (8001da8 <SystemInit+0x114>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a42      	ldr	r2, [pc, #264]	@ (8001da8 <SystemInit+0x114>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ca8:	4b40      	ldr	r3, [pc, #256]	@ (8001dac <SystemInit+0x118>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	2b06      	cmp	r3, #6
 8001cb2:	d807      	bhi.n	8001cc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dac <SystemInit+0x118>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 030f 	bic.w	r3, r3, #15
 8001cbc:	4a3b      	ldr	r2, [pc, #236]	@ (8001dac <SystemInit+0x118>)
 8001cbe:	f043 0307 	orr.w	r3, r3, #7
 8001cc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001db0 <SystemInit+0x11c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a39      	ldr	r2, [pc, #228]	@ (8001db0 <SystemInit+0x11c>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cd0:	4b37      	ldr	r3, [pc, #220]	@ (8001db0 <SystemInit+0x11c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cd6:	4b36      	ldr	r3, [pc, #216]	@ (8001db0 <SystemInit+0x11c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4935      	ldr	r1, [pc, #212]	@ (8001db0 <SystemInit+0x11c>)
 8001cdc:	4b35      	ldr	r3, [pc, #212]	@ (8001db4 <SystemInit+0x120>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce2:	4b32      	ldr	r3, [pc, #200]	@ (8001dac <SystemInit+0x118>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cee:	4b2f      	ldr	r3, [pc, #188]	@ (8001dac <SystemInit+0x118>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 030f 	bic.w	r3, r3, #15
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8001dac <SystemInit+0x118>)
 8001cf8:	f043 0307 	orr.w	r3, r3, #7
 8001cfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001db0 <SystemInit+0x11c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d04:	4b2a      	ldr	r3, [pc, #168]	@ (8001db0 <SystemInit+0x11c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d0a:	4b29      	ldr	r3, [pc, #164]	@ (8001db0 <SystemInit+0x11c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <SystemInit+0x11c>)
 8001d12:	4a29      	ldr	r2, [pc, #164]	@ (8001db8 <SystemInit+0x124>)
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d16:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <SystemInit+0x11c>)
 8001d18:	4a28      	ldr	r2, [pc, #160]	@ (8001dbc <SystemInit+0x128>)
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d1c:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <SystemInit+0x11c>)
 8001d1e:	4a28      	ldr	r2, [pc, #160]	@ (8001dc0 <SystemInit+0x12c>)
 8001d20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d22:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <SystemInit+0x11c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d28:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <SystemInit+0x11c>)
 8001d2a:	4a25      	ldr	r2, [pc, #148]	@ (8001dc0 <SystemInit+0x12c>)
 8001d2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <SystemInit+0x11c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d34:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <SystemInit+0x11c>)
 8001d36:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <SystemInit+0x12c>)
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <SystemInit+0x11c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <SystemInit+0x11c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1a      	ldr	r2, [pc, #104]	@ (8001db0 <SystemInit+0x11c>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	@ (8001db0 <SystemInit+0x11c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d52:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <SystemInit+0x130>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <SystemInit+0x134>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d5e:	d202      	bcs.n	8001d66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <SystemInit+0x138>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <SystemInit+0x11c>)
 8001d68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d113      	bne.n	8001d9c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d74:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <SystemInit+0x11c>)
 8001d76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <SystemInit+0x11c>)
 8001d7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d80:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <SystemInit+0x13c>)
 8001d86:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <SystemInit+0x11c>)
 8001d8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001d92:	4a07      	ldr	r2, [pc, #28]	@ (8001db0 <SystemInit+0x11c>)
 8001d94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d98:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00
 8001dac:	52002000 	.word	0x52002000
 8001db0:	58024400 	.word	0x58024400
 8001db4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001db8:	02020200 	.word	0x02020200
 8001dbc:	01ff0000 	.word	0x01ff0000
 8001dc0:	01010280 	.word	0x01010280
 8001dc4:	5c001000 	.word	0x5c001000
 8001dc8:	ffff0000 	.word	0xffff0000
 8001dcc:	51008108 	.word	0x51008108
 8001dd0:	52004000 	.word	0x52004000

08001dd4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <ExitRun0Mode+0x2c>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <ExitRun0Mode+0x2c>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001de4:	bf00      	nop
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <ExitRun0Mode+0x2c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f9      	beq.n	8001de6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001df2:	bf00      	nop
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	58024800 	.word	0x58024800

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001e40 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e08:	f7ff ffe4 	bl	8001dd4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e0c:	f7ff ff42 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e10:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e12:	490d      	ldr	r1, [pc, #52]	@ (8001e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e18:	e002      	b.n	8001e20 <LoopCopyDataInit>

08001e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1e:	3304      	adds	r3, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e24:	d3f9      	bcc.n	8001e1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e28:	4c0a      	ldr	r4, [pc, #40]	@ (8001e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e2c:	e001      	b.n	8001e32 <LoopFillZerobss>

08001e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e30:	3204      	adds	r2, #4

08001e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e34:	d3fb      	bcc.n	8001e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e36:	f015 f845 	bl	8016ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7fe fc3f 	bl	80006bc <main>
  bx  lr
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e48:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8001e4c:	08017e24 	.word	0x08017e24
  ldr r2, =_sbss
 8001e50:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8001e54:	24028530 	.word	0x24028530

08001e58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC3_IRQHandler>

08001e5a <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af02      	add	r7, sp, #8
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	733b      	strb	r3, [r7, #12]
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	791b      	ldrb	r3, [r3, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	f107 020c 	add.w	r2, r7, #12
 8001e7e:	2364      	movs	r3, #100	@ 0x64
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2302      	movs	r3, #2
 8001e84:	f004 ff44 	bl	8006d10 <HAL_I2C_Master_Transmit>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <SSD1306_SendCommand+0x38>
		return ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8001eb4:	2312      	movs	r3, #18
 8001eb6:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8001ebc:	e02c      	b.n	8001f18 <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f2c <SSD1306_Init+0x90>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8001ec6:	897b      	ldrh	r3, [r7, #10]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001ecc:	897b      	ldrh	r3, [r7, #10]
 8001ece:	4a17      	ldr	r2, [pc, #92]	@ (8001f2c <SSD1306_Init+0x90>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffc0 	bl	8001e5a <SSD1306_SendCommand>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <SSD1306_Init+0x4a>
 8001ee0:	897b      	ldrh	r3, [r7, #10]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	e01e      	b.n	8001f24 <SSD1306_Init+0x88>
	        cmd_idx++;
 8001ee6:	897b      	ldrh	r3, [r7, #10]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8001eec:	e00f      	b.n	8001f0e <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001eee:	897b      	ldrh	r3, [r7, #10]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8001f2c <SSD1306_Init+0x90>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffaf 	bl	8001e5a <SSD1306_SendCommand>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <SSD1306_Init+0x6c>
 8001f02:	897b      	ldrh	r3, [r7, #10]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	e00d      	b.n	8001f24 <SSD1306_Init+0x88>
	            cmd_idx++;
 8001f08:	897b      	ldrh	r3, [r7, #10]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8001f0e:	89bb      	ldrh	r3, [r7, #12]
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	81ba      	strh	r2, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ea      	bne.n	8001eee <SSD1306_Init+0x52>
	while (n_commands--) {
 8001f18:	89fb      	ldrh	r3, [r7, #14]
 8001f1a:	1e5a      	subs	r2, r3, #1
 8001f1c:	81fa      	strh	r2, [r7, #14]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1cd      	bne.n	8001ebe <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	08017898 	.word	0x08017898

08001f30 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f014 ffad 	bl	8016ea8 <memset>
	return 0;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2240      	movs	r2, #64	@ 0x40
 8001f66:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	791b      	ldrb	r3, [r3, #4]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	b299      	uxth	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	f240 4301 	movw	r3, #1025	@ 0x401
 8001f7c:	f004 ffe0 	bl	8006f40 <HAL_I2C_Master_Transmit_DMA>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	70fb      	strb	r3, [r7, #3]
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	2b1f      	cmp	r3, #31
 8001f9c:	d902      	bls.n	8001fa4 <SSD1306_DrawChar+0x18>
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	2b7e      	cmp	r3, #126	@ 0x7e
 8001fa2:	d901      	bls.n	8001fa8 <SSD1306_DrawChar+0x1c>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e02e      	b.n	8002006 <SSD1306_DrawChar+0x7a>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	3b20      	subs	r3, #32
 8001fac:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	2b60      	cmp	r3, #96	@ 0x60
 8001fb2:	d906      	bls.n	8001fc2 <SSD1306_DrawChar+0x36>
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	2b7a      	cmp	r3, #122	@ 0x7a
 8001fb8:	d803      	bhi.n	8001fc2 <SSD1306_DrawChar+0x36>
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	3b20      	subs	r3, #32
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e005      	b.n	8001fce <SSD1306_DrawChar+0x42>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	2b7a      	cmp	r3, #122	@ 0x7a
 8001fc6:	d902      	bls.n	8001fce <SSD1306_DrawChar+0x42>
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	3b1a      	subs	r3, #26
 8001fcc:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8002010 <SSD1306_DrawChar+0x84>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	8a12      	ldrh	r2, [r2, #16]
 8001fe0:	1898      	adds	r0, r3, r2
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a09      	ldr	r2, [pc, #36]	@ (8002010 <SSD1306_DrawChar+0x84>)
 8001fea:	4413      	add	r3, r2
 8001fec:	7bba      	ldrb	r2, [r7, #14]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f014 ff8e 	bl	8016f10 <memcpy>
	hssd->str_cursor += len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	8a1a      	ldrh	r2, [r3, #16]
 8001ff8:	7bbb      	ldrb	r3, [r7, #14]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	080178cc 	.word	0x080178cc

08002014 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	4613      	mov	r3, r2
 8002020:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
 8002026:	e013      	b.n	8002050 <SSD1306_DrawString+0x3c>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ffaa 	bl	8001f8c <SSD1306_DrawChar>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <SSD1306_DrawString+0x36>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8a1b      	ldrh	r3, [r3, #16]
 8002042:	3306      	adds	r3, #6
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	3301      	adds	r3, #1
 800204e:	75fb      	strb	r3, [r7, #23]
 8002050:	7dfa      	ldrb	r2, [r7, #23]
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	429a      	cmp	r2, r3
 8002056:	d3e7      	bcc.n	8002028 <SSD1306_DrawString+0x14>
	}

	return SUCCESS;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6898      	ldr	r0, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	899b      	ldrh	r3, [r3, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	f004 fd93 	bl	8006ba4 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	1cf9      	adds	r1, r7, #3
 8002084:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002088:	2201      	movs	r2, #1
 800208a:	f00e fa03 	bl	8010494 <HAL_SPI_Transmit>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <ST7789_SendByte_Command+0x36>
		return ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6898      	ldr	r0, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	899b      	ldrh	r3, [r3, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4619      	mov	r1, r3
 80020ba:	f004 fd73 	bl	8006ba4 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	1cf9      	adds	r1, r7, #3
 80020c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80020c8:	2201      	movs	r2, #1
 80020ca:	f00e f9e3 	bl	8010494 <HAL_SPI_Transmit>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <ST7789_SendByte_Data+0x36>
		return ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 80020ec:	2300      	movs	r3, #0
 80020ee:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f107 0109 	add.w	r1, r7, #9
 80020f8:	2201      	movs	r2, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00e fbb8 	bl	8010870 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 8002100:	200a      	movs	r0, #10
 8002102:	f000 f8df 	bl	80022c4 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 8002106:	2313      	movs	r3, #19
 8002108:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 800210e:	e02c      	b.n	800216a <ST7789_Init+0x86>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <ST7789_Init+0x9c>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 8002118:	897b      	ldrh	r3, [r7, #10]
 800211a:	3301      	adds	r3, #1
 800211c:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 800211e:	897b      	ldrh	r3, [r7, #10]
 8002120:	4a17      	ldr	r2, [pc, #92]	@ (8002180 <ST7789_Init+0x9c>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	4619      	mov	r1, r3
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff9b 	bl	8002062 <ST7789_SendByte_Command>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <ST7789_Init+0x54>
 8002132:	897b      	ldrh	r3, [r7, #10]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e01e      	b.n	8002176 <ST7789_Init+0x92>
	    cmd_idx++;
 8002138:	897b      	ldrh	r3, [r7, #10]
 800213a:	3301      	adds	r3, #1
 800213c:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 800213e:	e00f      	b.n	8002160 <ST7789_Init+0x7c>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8002140:	897b      	ldrh	r3, [r7, #10]
 8002142:	4a0f      	ldr	r2, [pc, #60]	@ (8002180 <ST7789_Init+0x9c>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ffaa 	bl	80020a2 <ST7789_SendByte_Data>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <ST7789_Init+0x76>
 8002154:	897b      	ldrh	r3, [r7, #10]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	e00d      	b.n	8002176 <ST7789_Init+0x92>
				cmd_idx++;
 800215a:	897b      	ldrh	r3, [r7, #10]
 800215c:	3301      	adds	r3, #1
 800215e:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 8002160:	89bb      	ldrh	r3, [r7, #12]
 8002162:	1e5a      	subs	r2, r3, #1
 8002164:	81ba      	strh	r2, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ea      	bne.n	8002140 <ST7789_Init+0x5c>
	while (n_commands--) {
 800216a:	89fb      	ldrh	r3, [r7, #14]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	81fa      	strh	r2, [r7, #14]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1cd      	bne.n	8002110 <ST7789_Init+0x2c>
	    }
	}
	return SUCCESS;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	08017af4 	.word	0x08017af4

08002184 <ST7789_DMATransmitCplt>:
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
}

void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	hst7789->spi_ready = 1;	// Flag ready
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	711a      	strb	r2, [r3, #4]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a6:	2003      	movs	r0, #3
 80021a8:	f001 fc3e 	bl	8003a28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021ac:	f00b f97a 	bl	800d4a4 <HAL_RCC_GetSysClockFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <HAL_Init+0x68>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	4913      	ldr	r1, [pc, #76]	@ (800220c <HAL_Init+0x6c>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <HAL_Init+0x68>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4a0e      	ldr	r2, [pc, #56]	@ (800220c <HAL_Init+0x6c>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <HAL_Init+0x70>)
 80021e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002214 <HAL_Init+0x74>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ea:	200f      	movs	r0, #15
 80021ec:	f000 f814 	bl	8002218 <HAL_InitTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e002      	b.n	8002200 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021fa:	f7ff f8a7 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	58024400 	.word	0x58024400
 800220c:	08017888 	.word	0x08017888
 8002210:	24000008 	.word	0x24000008
 8002214:	24000004 	.word	0x24000004

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002220:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <HAL_InitTick+0x60>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e021      	b.n	8002270 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800222c:	4b13      	ldr	r3, [pc, #76]	@ (800227c <HAL_InitTick+0x64>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <HAL_InitTick+0x60>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223a:	fbb3 f3f1 	udiv	r3, r3, r1
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f001 fc23 	bl	8003a8e <HAL_SYSTICK_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e00e      	b.n	8002270 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d80a      	bhi.n	800226e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f001 fbed 	bl	8003a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002264:	4a06      	ldr	r2, [pc, #24]	@ (8002280 <HAL_InitTick+0x68>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	24000010 	.word	0x24000010
 800227c:	24000004 	.word	0x24000004
 8002280:	2400000c 	.word	0x2400000c

08002284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	24000010 	.word	0x24000010
 80022a8:	240267fc 	.word	0x240267fc

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	240267fc 	.word	0x240267fc

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff ffee 	bl	80022ac <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d005      	beq.n	80022ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_Delay+0x44>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ea:	bf00      	nop
 80022ec:	f7ff ffde 	bl	80022ac <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d8f7      	bhi.n	80022ec <HAL_Delay+0x28>
  {
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	24000010 	.word	0x24000010

0800230c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002310:	4b03      	ldr	r3, [pc, #12]	@ (8002320 <HAL_GetREVID+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0c1b      	lsrs	r3, r3, #16
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	5c001000 	.word	0x5c001000

08002324 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	609a      	str	r2, [r3, #8]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <LL_ADC_SetChannelPreselection+0x24>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	0e9b      	lsrs	r3, r3, #26
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2201      	movs	r2, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	e015      	b.n	80023dc <LL_ADC_SetChannelPreselection+0x50>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80023c6:	2320      	movs	r3, #32
 80023c8:	e003      	b.n	80023d2 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2201      	movs	r2, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	69d2      	ldr	r2, [r2, #28]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3360      	adds	r3, #96	@ 0x60
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	430b      	orrs	r3, r1
 8002420:	431a      	orrs	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	431a      	orrs	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	611a      	str	r2, [r3, #16]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3360      	adds	r3, #96	@ 0x60
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	431a      	orrs	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	601a      	str	r2, [r3, #0]
  }
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3330      	adds	r3, #48	@ 0x30
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	4413      	add	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	211f      	movs	r1, #31
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 011f 	and.w	r1, r3, #31
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	431a      	orrs	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f023 0203 	bic.w	r2, r3, #3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60da      	str	r2, [r3, #12]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3314      	adds	r3, #20
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	0e5b      	lsrs	r3, r3, #25
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	0d1b      	lsrs	r3, r3, #20
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2107      	movs	r1, #7
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	0d1b      	lsrs	r3, r3, #20
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	431a      	orrs	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0318 	and.w	r3, r3, #24
 80025b6:	4908      	ldr	r1, [pc, #32]	@ (80025d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025b8:	40d9      	lsrs	r1, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	400b      	ands	r3, r1
 80025be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	000fffff 	.word	0x000fffff

080025dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 031f 	and.w	r3, r3, #31
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002606:	4013      	ands	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6093      	str	r3, [r2, #8]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	5fffffc0 	.word	0x5fffffc0

0800261c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800262c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002630:	d101      	bne.n	8002636 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <LL_ADC_EnableInternalRegulator+0x24>)
 8002652:	4013      	ands	r3, r2
 8002654:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	6fffffc0 	.word	0x6fffffc0

0800266c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002680:	d101      	bne.n	8002686 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <LL_ADC_Enable+0x24>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	7fffffc0 	.word	0x7fffffc0

080026bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <LL_ADC_IsEnabled+0x18>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_ADC_IsEnabled+0x1a>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <LL_ADC_REG_StartConversion+0x24>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	7fffffc0 	.word	0x7fffffc0

0800270c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d101      	bne.n	8002724 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d101      	bne.n	800274a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e18f      	b.n	8002a92 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7fe fdfd 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff3f 	bl	800261c <LL_ADC_IsDeepPowerDownEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff25 	bl	80025f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff5a 	bl	800266c <LL_ADC_IsInternalRegulatorEnabled>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d114      	bne.n	80027e8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff3e 	bl	8002644 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c8:	4b87      	ldr	r3, [pc, #540]	@ (80029e8 <HAL_ADC_Init+0x290>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	4a87      	ldr	r2, [pc, #540]	@ (80029ec <HAL_ADC_Init+0x294>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	3301      	adds	r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027da:	e002      	b.n	80027e2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff3d 	bl	800266c <LL_ADC_IsInternalRegulatorEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff77 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 800281e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 8129 	bne.w	8002a80 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 8125 	bne.w	8002a80 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff36 	bl	80026bc <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d136      	bne.n	80028c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a65      	ldr	r2, [pc, #404]	@ (80029f0 <HAL_ADC_Init+0x298>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_ADC_Init+0x112>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a63      	ldr	r2, [pc, #396]	@ (80029f4 <HAL_ADC_Init+0x29c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10e      	bne.n	8002888 <HAL_ADC_Init+0x130>
 800286a:	4861      	ldr	r0, [pc, #388]	@ (80029f0 <HAL_ADC_Init+0x298>)
 800286c:	f7ff ff26 	bl	80026bc <LL_ADC_IsEnabled>
 8002870:	4604      	mov	r4, r0
 8002872:	4860      	ldr	r0, [pc, #384]	@ (80029f4 <HAL_ADC_Init+0x29c>)
 8002874:	f7ff ff22 	bl	80026bc <LL_ADC_IsEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	4323      	orrs	r3, r4
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e008      	b.n	800289a <HAL_ADC_Init+0x142>
 8002888:	485b      	ldr	r0, [pc, #364]	@ (80029f8 <HAL_ADC_Init+0x2a0>)
 800288a:	f7ff ff17 	bl	80026bc <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a53      	ldr	r2, [pc, #332]	@ (80029f0 <HAL_ADC_Init+0x298>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_ADC_Init+0x15a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a51      	ldr	r2, [pc, #324]	@ (80029f4 <HAL_ADC_Init+0x29c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_Init+0x15e>
 80028b2:	4a52      	ldr	r2, [pc, #328]	@ (80029fc <HAL_ADC_Init+0x2a4>)
 80028b4:	e000      	b.n	80028b8 <HAL_ADC_Init+0x160>
 80028b6:	4a52      	ldr	r2, [pc, #328]	@ (8002a00 <HAL_ADC_Init+0x2a8>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f7ff fd30 	bl	8002324 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028c4:	f7ff fd22 	bl	800230c <HAL_GetREVID>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d914      	bls.n	80028fc <HAL_ADC_Init+0x1a4>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d110      	bne.n	80028fc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7d5b      	ldrb	r3, [r3, #21]
 80028de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7f1b      	ldrb	r3, [r3, #28]
 80028f0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028f2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028f4:	f043 030c 	orr.w	r3, r3, #12
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e00d      	b.n	8002918 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7d5b      	ldrb	r3, [r3, #21]
 8002900:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002906:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800290c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7f1b      	ldrb	r3, [r3, #28]
 8002912:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7f1b      	ldrb	r3, [r3, #28]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d106      	bne.n	800292e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	3b01      	subs	r3, #1
 8002926:	045b      	lsls	r3, r3, #17
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002942:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	4b2c      	ldr	r3, [pc, #176]	@ (8002a04 <HAL_ADC_Init+0x2ac>)
 8002952:	4013      	ands	r3, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	69b9      	ldr	r1, [r7, #24]
 800295a:	430b      	orrs	r3, r1
 800295c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fed2 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002968:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fedf 	bl	8002732 <LL_ADC_INJ_IsConversionOngoing>
 8002974:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d15f      	bne.n	8002a3c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d15c      	bne.n	8002a3c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7d1b      	ldrb	r3, [r3, #20]
 8002986:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <HAL_ADC_Init+0x2b0>)
 8002998:	4013      	ands	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d130      	bne.n	8002a10 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_ADC_Init+0x2b4>)
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029c2:	3a01      	subs	r2, #1
 80029c4:	0411      	lsls	r1, r2, #16
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029d6:	430a      	orrs	r2, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	611a      	str	r2, [r3, #16]
 80029e4:	e01c      	b.n	8002a20 <HAL_ADC_Init+0x2c8>
 80029e6:	bf00      	nop
 80029e8:	24000004 	.word	0x24000004
 80029ec:	053e2d63 	.word	0x053e2d63
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40022100 	.word	0x40022100
 80029f8:	58026000 	.word	0x58026000
 80029fc:	40022300 	.word	0x40022300
 8002a00:	58026300 	.word	0x58026300
 8002a04:	fff0c003 	.word	0xfff0c003
 8002a08:	ffffbffc 	.word	0xffffbffc
 8002a0c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fd16 	bl	8003468 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10c      	bne.n	8002a5e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f023 010f 	bic.w	r1, r3, #15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a5c:	e007      	b.n	8002a6e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 020f 	bic.w	r2, r2, #15
 8002a6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a7e:	e007      	b.n	8002a90 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	f043 0210 	orr.w	r2, r3, #16
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop

08002a9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a55      	ldr	r2, [pc, #340]	@ (8002c04 <HAL_ADC_Start_DMA+0x168>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_ADC_Start_DMA+0x20>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a54      	ldr	r2, [pc, #336]	@ (8002c08 <HAL_ADC_Start_DMA+0x16c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_Start_DMA+0x24>
 8002abc:	4b53      	ldr	r3, [pc, #332]	@ (8002c0c <HAL_ADC_Start_DMA+0x170>)
 8002abe:	e000      	b.n	8002ac2 <HAL_ADC_Start_DMA+0x26>
 8002ac0:	4b53      	ldr	r3, [pc, #332]	@ (8002c10 <HAL_ADC_Start_DMA+0x174>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fd8a 	bl	80025dc <LL_ADC_GetMultimode>
 8002ac8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fe1c 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 808c 	bne.w	8002bf4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Start_DMA+0x4e>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e087      	b.n	8002bfa <HAL_ADC_Start_DMA+0x15e>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d002      	beq.n	8002b04 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d170      	bne.n	8002be6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fb91 	bl	800322c <ADC_Enable>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d163      	bne.n	8002bdc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b18:	4b3e      	ldr	r3, [pc, #248]	@ (8002c14 <HAL_ADC_Start_DMA+0x178>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a37      	ldr	r2, [pc, #220]	@ (8002c08 <HAL_ADC_Start_DMA+0x16c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d002      	beq.n	8002b34 <HAL_ADC_Start_DMA+0x98>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e000      	b.n	8002b36 <HAL_ADC_Start_DMA+0x9a>
 8002b34:	4b33      	ldr	r3, [pc, #204]	@ (8002c04 <HAL_ADC_Start_DMA+0x168>)
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d002      	beq.n	8002b44 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	f023 0206 	bic.w	r2, r3, #6
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b74:	4a28      	ldr	r2, [pc, #160]	@ (8002c18 <HAL_ADC_Start_DMA+0x17c>)
 8002b76:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7c:	4a27      	ldr	r2, [pc, #156]	@ (8002c1c <HAL_ADC_Start_DMA+0x180>)
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b84:	4a26      	ldr	r2, [pc, #152]	@ (8002c20 <HAL_ADC_Start_DMA+0x184>)
 8002b86:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	221c      	movs	r2, #28
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0210 	orr.w	r2, r2, #16
 8002ba6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7ff fcb0 	bl	8002518 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3340      	adds	r3, #64	@ 0x40
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f001 fb42 	bl	8004250 <HAL_DMA_Start_IT>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fd85 	bl	80026e4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002bda:	e00d      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002be4:	e008      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002bf2:	e001      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40022100 	.word	0x40022100
 8002c0c:	40022300 	.word	0x40022300
 8002c10:	58026300 	.word	0x58026300
 8002c14:	fffff0fe 	.word	0xfffff0fe
 8002c18:	08003341 	.word	0x08003341
 8002c1c:	08003419 	.word	0x08003419
 8002c20:	08003435 	.word	0x08003435

08002c24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b08d      	sub	sp, #52	@ 0x34
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a65      	ldr	r2, [pc, #404]	@ (8002dfc <HAL_ADC_ConfigChannel+0x1b0>)
 8002c66:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x2a>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e2c7      	b.n	8003206 <HAL_ADC_ConfigChannel+0x5ba>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fd42 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 82ac 	bne.w	80031e8 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	db2c      	blt.n	8002cf2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d108      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x6a>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2201      	movs	r2, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	e016      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x98>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	613b      	str	r3, [r7, #16]
  return result;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e003      	b.n	8002cda <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2201      	movs	r2, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	69d1      	ldr	r1, [r2, #28]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff fbde 	bl	80024c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fcff 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002d0e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fd0c 	bl	8002732 <LL_ADC_INJ_IsConversionOngoing>
 8002d1a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f040 80b8 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 80b4 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f7ff fc00 	bl	800253e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d3e:	4b30      	ldr	r3, [pc, #192]	@ (8002e00 <HAL_ADC_ConfigChannel+0x1b4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x118>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	e01d      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x154>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10b      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x13e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	089b      	lsrs	r3, r3, #2
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	e00a      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x154>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d02c      	beq.n	8002e04 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6919      	ldr	r1, [r3, #16]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	f7ff fb1b 	bl	80023f2 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6919      	ldr	r1, [r3, #16]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	7e5b      	ldrb	r3, [r3, #25]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d102      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x186>
 8002dcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002dd0:	e000      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x188>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f7ff fb45 	bl	8002464 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6919      	ldr	r1, [r3, #16]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	7e1b      	ldrb	r3, [r3, #24]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x1a4>
 8002dea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dee:	e000      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x1a6>
 8002df0:	2300      	movs	r3, #0
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7ff fb1d 	bl	8002432 <LL_ADC_SetDataRightShift>
 8002df8:	e04c      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x248>
 8002dfa:	bf00      	nop
 8002dfc:	47ff0000 	.word	0x47ff0000
 8002e00:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	069b      	lsls	r3, r3, #26
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e26:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	069b      	lsls	r3, r3, #26
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d107      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e4a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	069b      	lsls	r3, r3, #26
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d107      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e6e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	069b      	lsls	r3, r3, #26
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d107      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e92:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fc0f 	bl	80026bc <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 81aa 	bne.w	80031fa <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f7ff fb6e 	bl	8002594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a87      	ldr	r2, [pc, #540]	@ (80030dc <HAL_ADC_ConfigChannel+0x490>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	f040 809a 	bne.w	8002ff8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4984      	ldr	r1, [pc, #528]	@ (80030e0 <HAL_ADC_ConfigChannel+0x494>)
 8002ece:	428b      	cmp	r3, r1
 8002ed0:	d147      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x316>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4983      	ldr	r1, [pc, #524]	@ (80030e4 <HAL_ADC_ConfigChannel+0x498>)
 8002ed8:	428b      	cmp	r3, r1
 8002eda:	d040      	beq.n	8002f5e <HAL_ADC_ConfigChannel+0x312>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4981      	ldr	r1, [pc, #516]	@ (80030e8 <HAL_ADC_ConfigChannel+0x49c>)
 8002ee2:	428b      	cmp	r3, r1
 8002ee4:	d039      	beq.n	8002f5a <HAL_ADC_ConfigChannel+0x30e>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4980      	ldr	r1, [pc, #512]	@ (80030ec <HAL_ADC_ConfigChannel+0x4a0>)
 8002eec:	428b      	cmp	r3, r1
 8002eee:	d032      	beq.n	8002f56 <HAL_ADC_ConfigChannel+0x30a>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	497e      	ldr	r1, [pc, #504]	@ (80030f0 <HAL_ADC_ConfigChannel+0x4a4>)
 8002ef6:	428b      	cmp	r3, r1
 8002ef8:	d02b      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x306>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	497d      	ldr	r1, [pc, #500]	@ (80030f4 <HAL_ADC_ConfigChannel+0x4a8>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d024      	beq.n	8002f4e <HAL_ADC_ConfigChannel+0x302>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	497b      	ldr	r1, [pc, #492]	@ (80030f8 <HAL_ADC_ConfigChannel+0x4ac>)
 8002f0a:	428b      	cmp	r3, r1
 8002f0c:	d01d      	beq.n	8002f4a <HAL_ADC_ConfigChannel+0x2fe>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	497a      	ldr	r1, [pc, #488]	@ (80030fc <HAL_ADC_ConfigChannel+0x4b0>)
 8002f14:	428b      	cmp	r3, r1
 8002f16:	d016      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x2fa>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4978      	ldr	r1, [pc, #480]	@ (8003100 <HAL_ADC_ConfigChannel+0x4b4>)
 8002f1e:	428b      	cmp	r3, r1
 8002f20:	d00f      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x2f6>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4977      	ldr	r1, [pc, #476]	@ (8003104 <HAL_ADC_ConfigChannel+0x4b8>)
 8002f28:	428b      	cmp	r3, r1
 8002f2a:	d008      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x2f2>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4975      	ldr	r1, [pc, #468]	@ (8003108 <HAL_ADC_ConfigChannel+0x4bc>)
 8002f32:	428b      	cmp	r3, r1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x2ee>
 8002f36:	4b75      	ldr	r3, [pc, #468]	@ (800310c <HAL_ADC_ConfigChannel+0x4c0>)
 8002f38:	e05a      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e058      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f3e:	4b74      	ldr	r3, [pc, #464]	@ (8003110 <HAL_ADC_ConfigChannel+0x4c4>)
 8002f40:	e056      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f42:	4b74      	ldr	r3, [pc, #464]	@ (8003114 <HAL_ADC_ConfigChannel+0x4c8>)
 8002f44:	e054      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f46:	4b6e      	ldr	r3, [pc, #440]	@ (8003100 <HAL_ADC_ConfigChannel+0x4b4>)
 8002f48:	e052      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80030fc <HAL_ADC_ConfigChannel+0x4b0>)
 8002f4c:	e050      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f4e:	4b72      	ldr	r3, [pc, #456]	@ (8003118 <HAL_ADC_ConfigChannel+0x4cc>)
 8002f50:	e04e      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f52:	4b72      	ldr	r3, [pc, #456]	@ (800311c <HAL_ADC_ConfigChannel+0x4d0>)
 8002f54:	e04c      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f56:	4b72      	ldr	r3, [pc, #456]	@ (8003120 <HAL_ADC_ConfigChannel+0x4d4>)
 8002f58:	e04a      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f5a:	4b72      	ldr	r3, [pc, #456]	@ (8003124 <HAL_ADC_ConfigChannel+0x4d8>)
 8002f5c:	e048      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e046      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4970      	ldr	r1, [pc, #448]	@ (8003128 <HAL_ADC_ConfigChannel+0x4dc>)
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d140      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x3a2>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	495c      	ldr	r1, [pc, #368]	@ (80030e4 <HAL_ADC_ConfigChannel+0x498>)
 8002f72:	428b      	cmp	r3, r1
 8002f74:	d039      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x39e>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	495b      	ldr	r1, [pc, #364]	@ (80030e8 <HAL_ADC_ConfigChannel+0x49c>)
 8002f7c:	428b      	cmp	r3, r1
 8002f7e:	d032      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x39a>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4959      	ldr	r1, [pc, #356]	@ (80030ec <HAL_ADC_ConfigChannel+0x4a0>)
 8002f86:	428b      	cmp	r3, r1
 8002f88:	d02b      	beq.n	8002fe2 <HAL_ADC_ConfigChannel+0x396>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4958      	ldr	r1, [pc, #352]	@ (80030f0 <HAL_ADC_ConfigChannel+0x4a4>)
 8002f90:	428b      	cmp	r3, r1
 8002f92:	d024      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x392>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4956      	ldr	r1, [pc, #344]	@ (80030f4 <HAL_ADC_ConfigChannel+0x4a8>)
 8002f9a:	428b      	cmp	r3, r1
 8002f9c:	d01d      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x38e>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4955      	ldr	r1, [pc, #340]	@ (80030f8 <HAL_ADC_ConfigChannel+0x4ac>)
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	d016      	beq.n	8002fd6 <HAL_ADC_ConfigChannel+0x38a>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4953      	ldr	r1, [pc, #332]	@ (80030fc <HAL_ADC_ConfigChannel+0x4b0>)
 8002fae:	428b      	cmp	r3, r1
 8002fb0:	d00f      	beq.n	8002fd2 <HAL_ADC_ConfigChannel+0x386>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4952      	ldr	r1, [pc, #328]	@ (8003100 <HAL_ADC_ConfigChannel+0x4b4>)
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d008      	beq.n	8002fce <HAL_ADC_ConfigChannel+0x382>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4951      	ldr	r1, [pc, #324]	@ (8003108 <HAL_ADC_ConfigChannel+0x4bc>)
 8002fc2:	428b      	cmp	r3, r1
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x37e>
 8002fc6:	4b51      	ldr	r3, [pc, #324]	@ (800310c <HAL_ADC_ConfigChannel+0x4c0>)
 8002fc8:	e012      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e010      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fce:	4b51      	ldr	r3, [pc, #324]	@ (8003114 <HAL_ADC_ConfigChannel+0x4c8>)
 8002fd0:	e00e      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8003100 <HAL_ADC_ConfigChannel+0x4b4>)
 8002fd4:	e00c      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fd6:	4b49      	ldr	r3, [pc, #292]	@ (80030fc <HAL_ADC_ConfigChannel+0x4b0>)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fda:	4b4f      	ldr	r3, [pc, #316]	@ (8003118 <HAL_ADC_ConfigChannel+0x4cc>)
 8002fdc:	e008      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fde:	4b4f      	ldr	r3, [pc, #316]	@ (800311c <HAL_ADC_ConfigChannel+0x4d0>)
 8002fe0:	e006      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8003120 <HAL_ADC_ConfigChannel+0x4d4>)
 8002fe4:	e004      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8003124 <HAL_ADC_ConfigChannel+0x4d8>)
 8002fe8:	e002      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3a4>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f7ff f9ca 	bl	800238c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f280 80fc 	bge.w	80031fa <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a36      	ldr	r2, [pc, #216]	@ (80030e0 <HAL_ADC_ConfigChannel+0x494>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_ADC_ConfigChannel+0x3ca>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a45      	ldr	r2, [pc, #276]	@ (8003128 <HAL_ADC_ConfigChannel+0x4dc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x3ce>
 8003016:	4b45      	ldr	r3, [pc, #276]	@ (800312c <HAL_ADC_ConfigChannel+0x4e0>)
 8003018:	e000      	b.n	800301c <HAL_ADC_ConfigChannel+0x3d0>
 800301a:	4b45      	ldr	r3, [pc, #276]	@ (8003130 <HAL_ADC_ConfigChannel+0x4e4>)
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f9a7 	bl	8002370 <LL_ADC_GetCommonPathInternalCh>
 8003022:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2d      	ldr	r2, [pc, #180]	@ (80030e0 <HAL_ADC_ConfigChannel+0x494>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x3ec>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3d      	ldr	r2, [pc, #244]	@ (8003128 <HAL_ADC_ConfigChannel+0x4dc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d10e      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x40a>
 8003038:	4829      	ldr	r0, [pc, #164]	@ (80030e0 <HAL_ADC_ConfigChannel+0x494>)
 800303a:	f7ff fb3f 	bl	80026bc <LL_ADC_IsEnabled>
 800303e:	4604      	mov	r4, r0
 8003040:	4839      	ldr	r0, [pc, #228]	@ (8003128 <HAL_ADC_ConfigChannel+0x4dc>)
 8003042:	f7ff fb3b 	bl	80026bc <LL_ADC_IsEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	4323      	orrs	r3, r4
 800304a:	2b00      	cmp	r3, #0
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e008      	b.n	8003068 <HAL_ADC_ConfigChannel+0x41c>
 8003056:	4837      	ldr	r0, [pc, #220]	@ (8003134 <HAL_ADC_ConfigChannel+0x4e8>)
 8003058:	f7ff fb30 	bl	80026bc <LL_ADC_IsEnabled>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80b3 	beq.w	80031d4 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a31      	ldr	r2, [pc, #196]	@ (8003138 <HAL_ADC_ConfigChannel+0x4ec>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d165      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x4f8>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d160      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2b      	ldr	r2, [pc, #172]	@ (8003134 <HAL_ADC_ConfigChannel+0x4e8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	f040 80b6 	bne.w	80031fa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a13      	ldr	r2, [pc, #76]	@ (80030e0 <HAL_ADC_ConfigChannel+0x494>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d004      	beq.n	80030a2 <HAL_ADC_ConfigChannel+0x456>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a22      	ldr	r2, [pc, #136]	@ (8003128 <HAL_ADC_ConfigChannel+0x4dc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x45a>
 80030a2:	4a22      	ldr	r2, [pc, #136]	@ (800312c <HAL_ADC_ConfigChannel+0x4e0>)
 80030a4:	e000      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x45c>
 80030a6:	4a22      	ldr	r2, [pc, #136]	@ (8003130 <HAL_ADC_ConfigChannel+0x4e4>)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f7ff f94a 	bl	800234a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030b6:	4b21      	ldr	r3, [pc, #132]	@ (800313c <HAL_ADC_ConfigChannel+0x4f0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	4a20      	ldr	r2, [pc, #128]	@ (8003140 <HAL_ADC_ConfigChannel+0x4f4>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	099b      	lsrs	r3, r3, #6
 80030c4:	3301      	adds	r3, #1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80030ca:	e002      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f9      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d8:	e08f      	b.n	80031fa <HAL_ADC_ConfigChannel+0x5ae>
 80030da:	bf00      	nop
 80030dc:	47ff0000 	.word	0x47ff0000
 80030e0:	40022000 	.word	0x40022000
 80030e4:	04300002 	.word	0x04300002
 80030e8:	08600004 	.word	0x08600004
 80030ec:	0c900008 	.word	0x0c900008
 80030f0:	10c00010 	.word	0x10c00010
 80030f4:	14f00020 	.word	0x14f00020
 80030f8:	2a000400 	.word	0x2a000400
 80030fc:	2e300800 	.word	0x2e300800
 8003100:	32601000 	.word	0x32601000
 8003104:	43210000 	.word	0x43210000
 8003108:	4b840000 	.word	0x4b840000
 800310c:	4fb80000 	.word	0x4fb80000
 8003110:	47520000 	.word	0x47520000
 8003114:	36902000 	.word	0x36902000
 8003118:	25b00200 	.word	0x25b00200
 800311c:	21800100 	.word	0x21800100
 8003120:	1d500080 	.word	0x1d500080
 8003124:	19200040 	.word	0x19200040
 8003128:	40022100 	.word	0x40022100
 800312c:	40022300 	.word	0x40022300
 8003130:	58026300 	.word	0x58026300
 8003134:	58026000 	.word	0x58026000
 8003138:	cb840000 	.word	0xcb840000
 800313c:	24000004 	.word	0x24000004
 8003140:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a31      	ldr	r2, [pc, #196]	@ (8003210 <HAL_ADC_ConfigChannel+0x5c4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d11e      	bne.n	800318c <HAL_ADC_ConfigChannel+0x540>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d119      	bne.n	800318c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2d      	ldr	r2, [pc, #180]	@ (8003214 <HAL_ADC_ConfigChannel+0x5c8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d14b      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2c      	ldr	r2, [pc, #176]	@ (8003218 <HAL_ADC_ConfigChannel+0x5cc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_ADC_ConfigChannel+0x52a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_ADC_ConfigChannel+0x5d0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x52e>
 8003176:	4a2a      	ldr	r2, [pc, #168]	@ (8003220 <HAL_ADC_ConfigChannel+0x5d4>)
 8003178:	e000      	b.n	800317c <HAL_ADC_ConfigChannel+0x530>
 800317a:	4a2a      	ldr	r2, [pc, #168]	@ (8003224 <HAL_ADC_ConfigChannel+0x5d8>)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f7ff f8e0 	bl	800234a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800318a:	e036      	b.n	80031fa <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a25      	ldr	r2, [pc, #148]	@ (8003228 <HAL_ADC_ConfigChannel+0x5dc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d131      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x5ae>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d12c      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003214 <HAL_ADC_ConfigChannel+0x5c8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d127      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003218 <HAL_ADC_ConfigChannel+0x5cc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d004      	beq.n	80031be <HAL_ADC_ConfigChannel+0x572>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a18      	ldr	r2, [pc, #96]	@ (800321c <HAL_ADC_ConfigChannel+0x5d0>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x576>
 80031be:	4a18      	ldr	r2, [pc, #96]	@ (8003220 <HAL_ADC_ConfigChannel+0x5d4>)
 80031c0:	e000      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x578>
 80031c2:	4a18      	ldr	r2, [pc, #96]	@ (8003224 <HAL_ADC_ConfigChannel+0x5d8>)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f7ff f8bc 	bl	800234a <LL_ADC_SetCommonPathInternalCh>
 80031d2:	e012      	b.n	80031fa <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80031e6:	e008      	b.n	80031fa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003202:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003206:	4618      	mov	r0, r3
 8003208:	3734      	adds	r7, #52	@ 0x34
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	c7520000 	.word	0xc7520000
 8003214:	58026000 	.word	0x58026000
 8003218:	40022000 	.word	0x40022000
 800321c:	40022100 	.word	0x40022100
 8003220:	40022300 	.word	0x40022300
 8003224:	58026300 	.word	0x58026300
 8003228:	cfb80000 	.word	0xcfb80000

0800322c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fa3f 	bl	80026bc <LL_ADC_IsEnabled>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d16e      	bne.n	8003322 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b38      	ldr	r3, [pc, #224]	@ (800332c <ADC_Enable+0x100>)
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e05a      	b.n	8003324 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fa0e 	bl	8002694 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003278:	f7ff f818 	bl	80022ac <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <ADC_Enable+0x104>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <ADC_Enable+0x66>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a29      	ldr	r2, [pc, #164]	@ (8003334 <ADC_Enable+0x108>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <ADC_Enable+0x6a>
 8003292:	4b29      	ldr	r3, [pc, #164]	@ (8003338 <ADC_Enable+0x10c>)
 8003294:	e000      	b.n	8003298 <ADC_Enable+0x6c>
 8003296:	4b29      	ldr	r3, [pc, #164]	@ (800333c <ADC_Enable+0x110>)
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff f99f 	bl	80025dc <LL_ADC_GetMultimode>
 800329e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a23      	ldr	r2, [pc, #140]	@ (8003334 <ADC_Enable+0x108>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d002      	beq.n	80032b0 <ADC_Enable+0x84>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e000      	b.n	80032b2 <ADC_Enable+0x86>
 80032b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <ADC_Enable+0x104>)
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d02c      	beq.n	8003314 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d130      	bne.n	8003322 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c0:	e028      	b.n	8003314 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f9f8 	bl	80026bc <LL_ADC_IsEnabled>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff f9dc 	bl	8002694 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032dc:	f7fe ffe6 	bl	80022ac <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d914      	bls.n	8003314 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d00d      	beq.n	8003314 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	f043 0210 	orr.w	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e007      	b.n	8003324 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d1cf      	bne.n	80032c2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	8000003f 	.word	0x8000003f
 8003330:	40022000 	.word	0x40022000
 8003334:	40022100 	.word	0x40022100
 8003338:	40022300 	.word	0x40022300
 800333c:	58026300 	.word	0x58026300

08003340 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003352:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003356:	2b00      	cmp	r3, #0
 8003358:	d14b      	bne.n	80033f2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d021      	beq.n	80033b8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f88e 	bl	800249a <LL_ADC_REG_IsTriggerSourceSWStart>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d032      	beq.n	80033ea <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d12b      	bne.n	80033ea <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003396:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11f      	bne.n	80033ea <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80033b6:	e018      	b.n	80033ea <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d111      	bne.n	80033ea <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d105      	bne.n	80033ea <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7fd fe80 	bl	80010f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033f0:	e00e      	b.n	8003410 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff fc1a 	bl	8002c38 <HAL_ADC_ErrorCallback>
}
 8003404:	e004      	b.n	8003410 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff fbfc 	bl	8002c24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	f043 0204 	orr.w	r2, r3, #4
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff fbec 	bl	8002c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7a      	ldr	r2, [pc, #488]	@ (8003660 <ADC_ConfigureBoostMode+0x1f8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <ADC_ConfigureBoostMode+0x1c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a79      	ldr	r2, [pc, #484]	@ (8003664 <ADC_ConfigureBoostMode+0x1fc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d109      	bne.n	8003498 <ADC_ConfigureBoostMode+0x30>
 8003484:	4b78      	ldr	r3, [pc, #480]	@ (8003668 <ADC_ConfigureBoostMode+0x200>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf14      	ite	ne
 8003490:	2301      	movne	r3, #1
 8003492:	2300      	moveq	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e008      	b.n	80034aa <ADC_ConfigureBoostMode+0x42>
 8003498:	4b74      	ldr	r3, [pc, #464]	@ (800366c <ADC_ConfigureBoostMode+0x204>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01c      	beq.n	80034e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80034ae:	f00a f973 	bl	800d798 <HAL_RCC_GetHCLKFreq>
 80034b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034bc:	d010      	beq.n	80034e0 <ADC_ConfigureBoostMode+0x78>
 80034be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034c2:	d873      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x144>
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c8:	d002      	beq.n	80034d0 <ADC_ConfigureBoostMode+0x68>
 80034ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034ce:	d16d      	bne.n	80035ac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	60fb      	str	r3, [r7, #12]
        break;
 80034de:	e068      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	60fb      	str	r3, [r7, #12]
        break;
 80034e6:	e064      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80034e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80034ec:	f04f 0100 	mov.w	r1, #0
 80034f0:	f00b fbb8 	bl	800ec64 <HAL_RCCEx_GetPeriphCLKFreq>
 80034f4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80034fe:	d051      	beq.n	80035a4 <ADC_ConfigureBoostMode+0x13c>
 8003500:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003504:	d854      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 8003506:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800350a:	d047      	beq.n	800359c <ADC_ConfigureBoostMode+0x134>
 800350c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003510:	d84e      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 8003512:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003516:	d03d      	beq.n	8003594 <ADC_ConfigureBoostMode+0x12c>
 8003518:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800351c:	d848      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 800351e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003522:	d033      	beq.n	800358c <ADC_ConfigureBoostMode+0x124>
 8003524:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003528:	d842      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 800352a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800352e:	d029      	beq.n	8003584 <ADC_ConfigureBoostMode+0x11c>
 8003530:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003534:	d83c      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 8003536:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800353a:	d01a      	beq.n	8003572 <ADC_ConfigureBoostMode+0x10a>
 800353c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003540:	d836      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 8003542:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003546:	d014      	beq.n	8003572 <ADC_ConfigureBoostMode+0x10a>
 8003548:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800354c:	d830      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 800354e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003552:	d00e      	beq.n	8003572 <ADC_ConfigureBoostMode+0x10a>
 8003554:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003558:	d82a      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 800355a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800355e:	d008      	beq.n	8003572 <ADC_ConfigureBoostMode+0x10a>
 8003560:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003564:	d824      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x148>
 8003566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800356a:	d002      	beq.n	8003572 <ADC_ConfigureBoostMode+0x10a>
 800356c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003570:	d11e      	bne.n	80035b0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0c9b      	lsrs	r3, r3, #18
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	60fb      	str	r3, [r7, #12]
        break;
 8003582:	e016      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
        break;
 800358a:	e012      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	60fb      	str	r3, [r7, #12]
        break;
 8003592:	e00e      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	60fb      	str	r3, [r7, #12]
        break;
 800359a:	e00a      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	09db      	lsrs	r3, r3, #7
 80035a0:	60fb      	str	r3, [r7, #12]
        break;
 80035a2:	e006      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	60fb      	str	r3, [r7, #12]
        break;
 80035aa:	e002      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80035b0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80035b2:	f7fe feab 	bl	800230c <HAL_GetREVID>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80035bc:	4293      	cmp	r3, r2
 80035be:	d815      	bhi.n	80035ec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003670 <ADC_ConfigureBoostMode+0x208>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d908      	bls.n	80035da <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80035d8:	e03e      	b.n	8003658 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035e8:	609a      	str	r2, [r3, #8]
}
 80035ea:	e035      	b.n	8003658 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003674 <ADC_ConfigureBoostMode+0x20c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d808      	bhi.n	800360c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	e025      	b.n	8003658 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a1a      	ldr	r2, [pc, #104]	@ (8003678 <ADC_ConfigureBoostMode+0x210>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d80a      	bhi.n	800362a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	e016      	b.n	8003658 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a13      	ldr	r2, [pc, #76]	@ (800367c <ADC_ConfigureBoostMode+0x214>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d80a      	bhi.n	8003648 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	e007      	b.n	8003658 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003656:	609a      	str	r2, [r3, #8]
}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40022000 	.word	0x40022000
 8003664:	40022100 	.word	0x40022100
 8003668:	40022300 	.word	0x40022300
 800366c:	58026300 	.word	0x58026300
 8003670:	01312d00 	.word	0x01312d00
 8003674:	005f5e10 	.word	0x005f5e10
 8003678:	00bebc20 	.word	0x00bebc20
 800367c:	017d7840 	.word	0x017d7840

08003680 <LL_ADC_IsEnabled>:
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <LL_ADC_IsEnabled+0x18>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <LL_ADC_IsEnabled+0x1a>
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d101      	bne.n	80036be <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b09f      	sub	sp, #124	@ 0x7c
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e0be      	b.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d102      	bne.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003704:	4b5b      	ldr	r3, [pc, #364]	@ (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	e001      	b.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e09d      	b.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ffb9 	bl	80036a6 <LL_ADC_REG_IsConversionOngoing>
 8003734:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff ffb3 	bl	80036a6 <LL_ADC_REG_IsConversionOngoing>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d17f      	bne.n	8003846 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003746:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003748:	2b00      	cmp	r3, #0
 800374a:	d17c      	bne.n	8003846 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a47      	ldr	r2, [pc, #284]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a46      	ldr	r2, [pc, #280]	@ (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003760:	4b45      	ldr	r3, [pc, #276]	@ (8003878 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003762:	e000      	b.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003764:	4b45      	ldr	r3, [pc, #276]	@ (800387c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003766:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d039      	beq.n	80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	431a      	orrs	r2, r3
 800377e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003780:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a3a      	ldr	r2, [pc, #232]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a38      	ldr	r2, [pc, #224]	@ (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d10e      	bne.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003796:	4836      	ldr	r0, [pc, #216]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003798:	f7ff ff72 	bl	8003680 <LL_ADC_IsEnabled>
 800379c:	4604      	mov	r4, r0
 800379e:	4835      	ldr	r0, [pc, #212]	@ (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037a0:	f7ff ff6e 	bl	8003680 <LL_ADC_IsEnabled>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4323      	orrs	r3, r4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e008      	b.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80037b4:	4832      	ldr	r0, [pc, #200]	@ (8003880 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037b6:	f7ff ff63 	bl	8003680 <LL_ADC_IsEnabled>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d047      	beq.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	6811      	ldr	r1, [r2, #0]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	6892      	ldr	r2, [r2, #8]
 80037da:	430a      	orrs	r2, r1
 80037dc:	431a      	orrs	r2, r3
 80037de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037e2:	e03a      	b.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80037e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10e      	bne.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003804:	481a      	ldr	r0, [pc, #104]	@ (8003870 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003806:	f7ff ff3b 	bl	8003680 <LL_ADC_IsEnabled>
 800380a:	4604      	mov	r4, r0
 800380c:	4819      	ldr	r0, [pc, #100]	@ (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800380e:	f7ff ff37 	bl	8003680 <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	4323      	orrs	r3, r4
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	e008      	b.n	8003834 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003822:	4817      	ldr	r0, [pc, #92]	@ (8003880 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003824:	f7ff ff2c 	bl	8003680 <LL_ADC_IsEnabled>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d010      	beq.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800383e:	4013      	ands	r3, r2
 8003840:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003842:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003844:	e009      	b.n	800385a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384a:	f043 0220 	orr.w	r2, r3, #32
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003858:	e000      	b.n	800385c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800385a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003864:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003868:	4618      	mov	r0, r3
 800386a:	377c      	adds	r7, #124	@ 0x7c
 800386c:	46bd      	mov	sp, r7
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	40022000 	.word	0x40022000
 8003874:	40022100 	.word	0x40022100
 8003878:	40022300 	.word	0x40022300
 800387c:	58026300 	.word	0x58026300
 8003880:	58026000 	.word	0x58026000
 8003884:	fffff0e0 	.word	0xfffff0e0

08003888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <__NVIC_SetPriorityGrouping+0x40>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038a4:	4013      	ands	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <__NVIC_SetPriorityGrouping+0x44>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b6:	4a04      	ldr	r2, [pc, #16]	@ (80038c8 <__NVIC_SetPriorityGrouping+0x40>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	60d3      	str	r3, [r2, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000ed00 	.word	0xe000ed00
 80038cc:	05fa0000 	.word	0x05fa0000

080038d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <__NVIC_GetPriorityGrouping+0x18>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	f003 0307 	and.w	r3, r3, #7
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	db0b      	blt.n	8003916 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	4907      	ldr	r1, [pc, #28]	@ (8003924 <__NVIC_EnableIRQ+0x38>)
 8003906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2001      	movs	r0, #1
 800390e:	fa00 f202 	lsl.w	r2, r0, r2
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003938:	2b00      	cmp	r3, #0
 800393a:	db0a      	blt.n	8003952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	490c      	ldr	r1, [pc, #48]	@ (8003974 <__NVIC_SetPriority+0x4c>)
 8003942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	440b      	add	r3, r1
 800394c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003950:	e00a      	b.n	8003968 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4908      	ldr	r1, [pc, #32]	@ (8003978 <__NVIC_SetPriority+0x50>)
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3b04      	subs	r3, #4
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	440b      	add	r3, r1
 8003966:	761a      	strb	r2, [r3, #24]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000e100 	.word	0xe000e100
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	@ 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f1c3 0307 	rsb	r3, r3, #7
 8003996:	2b04      	cmp	r3, #4
 8003998:	bf28      	it	cs
 800399a:	2304      	movcs	r3, #4
 800399c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d902      	bls.n	80039ac <NVIC_EncodePriority+0x30>
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3b03      	subs	r3, #3
 80039aa:	e000      	b.n	80039ae <NVIC_EncodePriority+0x32>
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	401a      	ands	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c4:	f04f 31ff 	mov.w	r1, #4294967295
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	43d9      	mvns	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	4313      	orrs	r3, r2
         );
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3724      	adds	r7, #36	@ 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039f4:	d301      	bcc.n	80039fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f6:	2301      	movs	r3, #1
 80039f8:	e00f      	b.n	8003a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003a24 <SysTick_Config+0x40>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a02:	210f      	movs	r1, #15
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	f7ff ff8e 	bl	8003928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <SysTick_Config+0x40>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a12:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <SysTick_Config+0x40>)
 8003a14:	2207      	movs	r2, #7
 8003a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	e000e010 	.word	0xe000e010

08003a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff29 	bl	8003888 <__NVIC_SetPriorityGrouping>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	4603      	mov	r3, r0
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a4c:	f7ff ff40 	bl	80038d0 <__NVIC_GetPriorityGrouping>
 8003a50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6978      	ldr	r0, [r7, #20]
 8003a58:	f7ff ff90 	bl	800397c <NVIC_EncodePriority>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff5f 	bl	8003928 <__NVIC_SetPriority>
}
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff33 	bl	80038ec <__NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ffa4 	bl	80039e4 <SysTick_Config>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003aac:	f3bf 8f5f 	dmb	sy
}
 8003ab0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003ab2:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <HAL_MPU_Disable+0x28>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	4a06      	ldr	r2, [pc, #24]	@ (8003ad0 <HAL_MPU_Disable+0x28>)
 8003ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003abc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003abe:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_MPU_Disable+0x2c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	605a      	str	r2, [r3, #4]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000ed00 	.word	0xe000ed00
 8003ad4:	e000ed90 	.word	0xe000ed90

08003ad8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b10 <HAL_MPU_Enable+0x38>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <HAL_MPU_Enable+0x3c>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	4a09      	ldr	r2, [pc, #36]	@ (8003b14 <HAL_MPU_Enable+0x3c>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003af6:	f3bf 8f4f 	dsb	sy
}
 8003afa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003afc:	f3bf 8f6f 	isb	sy
}
 8003b00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000ed90 	.word	0xe000ed90
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	785a      	ldrb	r2, [r3, #1]
 8003b24:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_MPU_ConfigRegion+0x7c>)
 8003b26:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003b28:	4b1a      	ldr	r3, [pc, #104]	@ (8003b94 <HAL_MPU_ConfigRegion+0x7c>)
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	4a19      	ldr	r2, [pc, #100]	@ (8003b94 <HAL_MPU_ConfigRegion+0x7c>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003b34:	4a17      	ldr	r2, [pc, #92]	@ (8003b94 <HAL_MPU_ConfigRegion+0x7c>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	7b1b      	ldrb	r3, [r3, #12]
 8003b40:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7adb      	ldrb	r3, [r3, #11]
 8003b46:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7a9b      	ldrb	r3, [r3, #10]
 8003b4e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7b5b      	ldrb	r3, [r3, #13]
 8003b56:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	7b9b      	ldrb	r3, [r3, #14]
 8003b5e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7bdb      	ldrb	r3, [r3, #15]
 8003b66:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	7a5b      	ldrb	r3, [r3, #9]
 8003b6e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	7a1b      	ldrb	r3, [r3, #8]
 8003b76:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b78:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b80:	4a04      	ldr	r2, [pc, #16]	@ (8003b94 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b82:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b84:	6113      	str	r3, [r2, #16]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000ed90 	.word	0xe000ed90

08003b98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003ba0:	f7fe fb84 	bl	80022ac <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e316      	b.n	80041de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a66      	ldr	r2, [pc, #408]	@ (8003d50 <HAL_DMA_Init+0x1b8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d04a      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a65      	ldr	r2, [pc, #404]	@ (8003d54 <HAL_DMA_Init+0x1bc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d045      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a63      	ldr	r2, [pc, #396]	@ (8003d58 <HAL_DMA_Init+0x1c0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d040      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a62      	ldr	r2, [pc, #392]	@ (8003d5c <HAL_DMA_Init+0x1c4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d03b      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a60      	ldr	r2, [pc, #384]	@ (8003d60 <HAL_DMA_Init+0x1c8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d036      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a5f      	ldr	r2, [pc, #380]	@ (8003d64 <HAL_DMA_Init+0x1cc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d031      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8003d68 <HAL_DMA_Init+0x1d0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d02c      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a5c      	ldr	r2, [pc, #368]	@ (8003d6c <HAL_DMA_Init+0x1d4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d027      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a5a      	ldr	r2, [pc, #360]	@ (8003d70 <HAL_DMA_Init+0x1d8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d022      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a59      	ldr	r2, [pc, #356]	@ (8003d74 <HAL_DMA_Init+0x1dc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d01d      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a57      	ldr	r2, [pc, #348]	@ (8003d78 <HAL_DMA_Init+0x1e0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d018      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a56      	ldr	r2, [pc, #344]	@ (8003d7c <HAL_DMA_Init+0x1e4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d013      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a54      	ldr	r2, [pc, #336]	@ (8003d80 <HAL_DMA_Init+0x1e8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00e      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a53      	ldr	r2, [pc, #332]	@ (8003d84 <HAL_DMA_Init+0x1ec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d009      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a51      	ldr	r2, [pc, #324]	@ (8003d88 <HAL_DMA_Init+0x1f0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_DMA_Init+0xb8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a50      	ldr	r2, [pc, #320]	@ (8003d8c <HAL_DMA_Init+0x1f4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_DMA_Init+0xbc>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <HAL_DMA_Init+0xbe>
 8003c54:	2300      	movs	r3, #0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 813b 	beq.w	8003ed2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a37      	ldr	r2, [pc, #220]	@ (8003d50 <HAL_DMA_Init+0x1b8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d04a      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a36      	ldr	r2, [pc, #216]	@ (8003d54 <HAL_DMA_Init+0x1bc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d045      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a34      	ldr	r2, [pc, #208]	@ (8003d58 <HAL_DMA_Init+0x1c0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d040      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a33      	ldr	r2, [pc, #204]	@ (8003d5c <HAL_DMA_Init+0x1c4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d03b      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a31      	ldr	r2, [pc, #196]	@ (8003d60 <HAL_DMA_Init+0x1c8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d036      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a30      	ldr	r2, [pc, #192]	@ (8003d64 <HAL_DMA_Init+0x1cc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d031      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2e      	ldr	r2, [pc, #184]	@ (8003d68 <HAL_DMA_Init+0x1d0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02c      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8003d6c <HAL_DMA_Init+0x1d4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d027      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d70 <HAL_DMA_Init+0x1d8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d022      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2a      	ldr	r2, [pc, #168]	@ (8003d74 <HAL_DMA_Init+0x1dc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01d      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a28      	ldr	r2, [pc, #160]	@ (8003d78 <HAL_DMA_Init+0x1e0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d018      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a27      	ldr	r2, [pc, #156]	@ (8003d7c <HAL_DMA_Init+0x1e4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <HAL_DMA_Init+0x1e8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a24      	ldr	r2, [pc, #144]	@ (8003d84 <HAL_DMA_Init+0x1ec>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	@ (8003d88 <HAL_DMA_Init+0x1f0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_DMA_Init+0x174>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a21      	ldr	r2, [pc, #132]	@ (8003d8c <HAL_DMA_Init+0x1f4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <HAL_DMA_Init+0x186>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e007      	b.n	8003d2e <HAL_DMA_Init+0x196>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d2e:	e02f      	b.n	8003d90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d30:	f7fe fabc 	bl	80022ac <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d928      	bls.n	8003d90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2203      	movs	r2, #3
 8003d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e246      	b.n	80041de <HAL_DMA_Init+0x646>
 8003d50:	40020010 	.word	0x40020010
 8003d54:	40020028 	.word	0x40020028
 8003d58:	40020040 	.word	0x40020040
 8003d5c:	40020058 	.word	0x40020058
 8003d60:	40020070 	.word	0x40020070
 8003d64:	40020088 	.word	0x40020088
 8003d68:	400200a0 	.word	0x400200a0
 8003d6c:	400200b8 	.word	0x400200b8
 8003d70:	40020410 	.word	0x40020410
 8003d74:	40020428 	.word	0x40020428
 8003d78:	40020440 	.word	0x40020440
 8003d7c:	40020458 	.word	0x40020458
 8003d80:	40020470 	.word	0x40020470
 8003d84:	40020488 	.word	0x40020488
 8003d88:	400204a0 	.word	0x400204a0
 8003d8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1c8      	bne.n	8003d30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4b83      	ldr	r3, [pc, #524]	@ (8003fb8 <HAL_DMA_Init+0x420>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003db6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d107      	bne.n	8003df4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	4313      	orrs	r3, r2
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003df4:	4b71      	ldr	r3, [pc, #452]	@ (8003fbc <HAL_DMA_Init+0x424>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b71      	ldr	r3, [pc, #452]	@ (8003fc0 <HAL_DMA_Init+0x428>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e00:	d328      	bcc.n	8003e54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b28      	cmp	r3, #40	@ 0x28
 8003e08:	d903      	bls.n	8003e12 <HAL_DMA_Init+0x27a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e10:	d917      	bls.n	8003e42 <HAL_DMA_Init+0x2aa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e18:	d903      	bls.n	8003e22 <HAL_DMA_Init+0x28a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b42      	cmp	r3, #66	@ 0x42
 8003e20:	d90f      	bls.n	8003e42 <HAL_DMA_Init+0x2aa>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b46      	cmp	r3, #70	@ 0x46
 8003e28:	d903      	bls.n	8003e32 <HAL_DMA_Init+0x29a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b48      	cmp	r3, #72	@ 0x48
 8003e30:	d907      	bls.n	8003e42 <HAL_DMA_Init+0x2aa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b4e      	cmp	r3, #78	@ 0x4e
 8003e38:	d905      	bls.n	8003e46 <HAL_DMA_Init+0x2ae>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b52      	cmp	r3, #82	@ 0x52
 8003e40:	d801      	bhi.n	8003e46 <HAL_DMA_Init+0x2ae>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <HAL_DMA_Init+0x2b0>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0307 	bic.w	r3, r3, #7
 8003e6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d117      	bne.n	8003eae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00e      	beq.n	8003eae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f002 fb4d 	bl	8006530 <DMA_CheckFifoParam>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2240      	movs	r2, #64	@ 0x40
 8003ea0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e197      	b.n	80041de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f002 fa88 	bl	80063cc <DMA_CalcBaseAndBitshift>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	223f      	movs	r2, #63	@ 0x3f
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	e0cd      	b.n	800406e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc4 <HAL_DMA_Init+0x42c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_DMA_Init+0x38a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a39      	ldr	r2, [pc, #228]	@ (8003fc8 <HAL_DMA_Init+0x430>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01d      	beq.n	8003f22 <HAL_DMA_Init+0x38a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a38      	ldr	r2, [pc, #224]	@ (8003fcc <HAL_DMA_Init+0x434>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_DMA_Init+0x38a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a36      	ldr	r2, [pc, #216]	@ (8003fd0 <HAL_DMA_Init+0x438>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_DMA_Init+0x38a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a35      	ldr	r2, [pc, #212]	@ (8003fd4 <HAL_DMA_Init+0x43c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_Init+0x38a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a33      	ldr	r2, [pc, #204]	@ (8003fd8 <HAL_DMA_Init+0x440>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_DMA_Init+0x38a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a32      	ldr	r2, [pc, #200]	@ (8003fdc <HAL_DMA_Init+0x444>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_Init+0x38a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a30      	ldr	r2, [pc, #192]	@ (8003fe0 <HAL_DMA_Init+0x448>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_DMA_Init+0x38e>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_DMA_Init+0x390>
 8003f26:	2300      	movs	r3, #0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8097 	beq.w	800405c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a24      	ldr	r2, [pc, #144]	@ (8003fc4 <HAL_DMA_Init+0x42c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d021      	beq.n	8003f7c <HAL_DMA_Init+0x3e4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <HAL_DMA_Init+0x430>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01c      	beq.n	8003f7c <HAL_DMA_Init+0x3e4>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a21      	ldr	r2, [pc, #132]	@ (8003fcc <HAL_DMA_Init+0x434>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d017      	beq.n	8003f7c <HAL_DMA_Init+0x3e4>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd0 <HAL_DMA_Init+0x438>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d012      	beq.n	8003f7c <HAL_DMA_Init+0x3e4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd4 <HAL_DMA_Init+0x43c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00d      	beq.n	8003f7c <HAL_DMA_Init+0x3e4>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd8 <HAL_DMA_Init+0x440>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d008      	beq.n	8003f7c <HAL_DMA_Init+0x3e4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fdc <HAL_DMA_Init+0x444>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <HAL_DMA_Init+0x3e4>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a19      	ldr	r2, [pc, #100]	@ (8003fe0 <HAL_DMA_Init+0x448>)
 8003f7a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4b13      	ldr	r3, [pc, #76]	@ (8003fe4 <HAL_DMA_Init+0x44c>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d021      	beq.n	8003fe8 <HAL_DMA_Init+0x450>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b80      	cmp	r3, #128	@ 0x80
 8003faa:	d102      	bne.n	8003fb2 <HAL_DMA_Init+0x41a>
 8003fac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fb0:	e01b      	b.n	8003fea <HAL_DMA_Init+0x452>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e019      	b.n	8003fea <HAL_DMA_Init+0x452>
 8003fb6:	bf00      	nop
 8003fb8:	fe10803f 	.word	0xfe10803f
 8003fbc:	5c001000 	.word	0x5c001000
 8003fc0:	ffff0000 	.word	0xffff0000
 8003fc4:	58025408 	.word	0x58025408
 8003fc8:	5802541c 	.word	0x5802541c
 8003fcc:	58025430 	.word	0x58025430
 8003fd0:	58025444 	.word	0x58025444
 8003fd4:	58025458 	.word	0x58025458
 8003fd8:	5802546c 	.word	0x5802546c
 8003fdc:	58025480 	.word	0x58025480
 8003fe0:	58025494 	.word	0x58025494
 8003fe4:	fffe000f 	.word	0xfffe000f
 8003fe8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ff0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004018:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	4b6e      	ldr	r3, [pc, #440]	@ (80041e8 <HAL_DMA_Init+0x650>)
 8004030:	4413      	add	r3, r2
 8004032:	4a6e      	ldr	r2, [pc, #440]	@ (80041ec <HAL_DMA_Init+0x654>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	009a      	lsls	r2, r3, #2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f002 f9c3 	bl	80063cc <DMA_CalcBaseAndBitshift>
 8004046:	4603      	mov	r3, r0
 8004048:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	2201      	movs	r2, #1
 8004054:	409a      	lsls	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	e008      	b.n	800406e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2240      	movs	r2, #64	@ 0x40
 8004060:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2203      	movs	r2, #3
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0b7      	b.n	80041de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a5f      	ldr	r2, [pc, #380]	@ (80041f0 <HAL_DMA_Init+0x658>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d072      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5d      	ldr	r2, [pc, #372]	@ (80041f4 <HAL_DMA_Init+0x65c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d06d      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a5c      	ldr	r2, [pc, #368]	@ (80041f8 <HAL_DMA_Init+0x660>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d068      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5a      	ldr	r2, [pc, #360]	@ (80041fc <HAL_DMA_Init+0x664>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d063      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a59      	ldr	r2, [pc, #356]	@ (8004200 <HAL_DMA_Init+0x668>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d05e      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a57      	ldr	r2, [pc, #348]	@ (8004204 <HAL_DMA_Init+0x66c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d059      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a56      	ldr	r2, [pc, #344]	@ (8004208 <HAL_DMA_Init+0x670>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d054      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a54      	ldr	r2, [pc, #336]	@ (800420c <HAL_DMA_Init+0x674>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d04f      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a53      	ldr	r2, [pc, #332]	@ (8004210 <HAL_DMA_Init+0x678>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d04a      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a51      	ldr	r2, [pc, #324]	@ (8004214 <HAL_DMA_Init+0x67c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d045      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a50      	ldr	r2, [pc, #320]	@ (8004218 <HAL_DMA_Init+0x680>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d040      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a4e      	ldr	r2, [pc, #312]	@ (800421c <HAL_DMA_Init+0x684>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d03b      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004220 <HAL_DMA_Init+0x688>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d036      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004224 <HAL_DMA_Init+0x68c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d031      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004228 <HAL_DMA_Init+0x690>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d02c      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a48      	ldr	r2, [pc, #288]	@ (800422c <HAL_DMA_Init+0x694>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d027      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a47      	ldr	r2, [pc, #284]	@ (8004230 <HAL_DMA_Init+0x698>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a45      	ldr	r2, [pc, #276]	@ (8004234 <HAL_DMA_Init+0x69c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01d      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a44      	ldr	r2, [pc, #272]	@ (8004238 <HAL_DMA_Init+0x6a0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d018      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a42      	ldr	r2, [pc, #264]	@ (800423c <HAL_DMA_Init+0x6a4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a41      	ldr	r2, [pc, #260]	@ (8004240 <HAL_DMA_Init+0x6a8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a3f      	ldr	r2, [pc, #252]	@ (8004244 <HAL_DMA_Init+0x6ac>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a3e      	ldr	r2, [pc, #248]	@ (8004248 <HAL_DMA_Init+0x6b0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_DMA_Init+0x5c6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a3c      	ldr	r2, [pc, #240]	@ (800424c <HAL_DMA_Init+0x6b4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d101      	bne.n	8004162 <HAL_DMA_Init+0x5ca>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <HAL_DMA_Init+0x5cc>
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d032      	beq.n	80041ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f002 fa5d 	bl	8006628 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b80      	cmp	r3, #128	@ 0x80
 8004174:	d102      	bne.n	800417c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004190:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d010      	beq.n	80041bc <HAL_DMA_Init+0x624>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d80c      	bhi.n	80041bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f002 fada 	bl	800675c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	e008      	b.n	80041ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	a7fdabf8 	.word	0xa7fdabf8
 80041ec:	cccccccd 	.word	0xcccccccd
 80041f0:	40020010 	.word	0x40020010
 80041f4:	40020028 	.word	0x40020028
 80041f8:	40020040 	.word	0x40020040
 80041fc:	40020058 	.word	0x40020058
 8004200:	40020070 	.word	0x40020070
 8004204:	40020088 	.word	0x40020088
 8004208:	400200a0 	.word	0x400200a0
 800420c:	400200b8 	.word	0x400200b8
 8004210:	40020410 	.word	0x40020410
 8004214:	40020428 	.word	0x40020428
 8004218:	40020440 	.word	0x40020440
 800421c:	40020458 	.word	0x40020458
 8004220:	40020470 	.word	0x40020470
 8004224:	40020488 	.word	0x40020488
 8004228:	400204a0 	.word	0x400204a0
 800422c:	400204b8 	.word	0x400204b8
 8004230:	58025408 	.word	0x58025408
 8004234:	5802541c 	.word	0x5802541c
 8004238:	58025430 	.word	0x58025430
 800423c:	58025444 	.word	0x58025444
 8004240:	58025458 	.word	0x58025458
 8004244:	5802546c 	.word	0x5802546c
 8004248:	58025480 	.word	0x58025480
 800424c:	58025494 	.word	0x58025494

08004250 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e226      	b.n	80046ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_DMA_Start_IT+0x2a>
 8004276:	2302      	movs	r3, #2
 8004278:	e21f      	b.n	80046ba <HAL_DMA_Start_IT+0x46a>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	f040 820a 	bne.w	80046a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a68      	ldr	r2, [pc, #416]	@ (8004444 <HAL_DMA_Start_IT+0x1f4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d04a      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a66      	ldr	r2, [pc, #408]	@ (8004448 <HAL_DMA_Start_IT+0x1f8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d045      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a65      	ldr	r2, [pc, #404]	@ (800444c <HAL_DMA_Start_IT+0x1fc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d040      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a63      	ldr	r2, [pc, #396]	@ (8004450 <HAL_DMA_Start_IT+0x200>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d03b      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a62      	ldr	r2, [pc, #392]	@ (8004454 <HAL_DMA_Start_IT+0x204>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d036      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a60      	ldr	r2, [pc, #384]	@ (8004458 <HAL_DMA_Start_IT+0x208>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d031      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a5f      	ldr	r2, [pc, #380]	@ (800445c <HAL_DMA_Start_IT+0x20c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d02c      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004460 <HAL_DMA_Start_IT+0x210>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d027      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004464 <HAL_DMA_Start_IT+0x214>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d022      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004468 <HAL_DMA_Start_IT+0x218>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01d      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a59      	ldr	r2, [pc, #356]	@ (800446c <HAL_DMA_Start_IT+0x21c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a57      	ldr	r2, [pc, #348]	@ (8004470 <HAL_DMA_Start_IT+0x220>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a56      	ldr	r2, [pc, #344]	@ (8004474 <HAL_DMA_Start_IT+0x224>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a54      	ldr	r2, [pc, #336]	@ (8004478 <HAL_DMA_Start_IT+0x228>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a53      	ldr	r2, [pc, #332]	@ (800447c <HAL_DMA_Start_IT+0x22c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_DMA_Start_IT+0xee>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a51      	ldr	r2, [pc, #324]	@ (8004480 <HAL_DMA_Start_IT+0x230>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d108      	bne.n	8004350 <HAL_DMA_Start_IT+0x100>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e007      	b.n	8004360 <HAL_DMA_Start_IT+0x110>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f001 fe84 	bl	8006074 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a34      	ldr	r2, [pc, #208]	@ (8004444 <HAL_DMA_Start_IT+0x1f4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d04a      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a33      	ldr	r2, [pc, #204]	@ (8004448 <HAL_DMA_Start_IT+0x1f8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d045      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a31      	ldr	r2, [pc, #196]	@ (800444c <HAL_DMA_Start_IT+0x1fc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d040      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a30      	ldr	r2, [pc, #192]	@ (8004450 <HAL_DMA_Start_IT+0x200>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d03b      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2e      	ldr	r2, [pc, #184]	@ (8004454 <HAL_DMA_Start_IT+0x204>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d036      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004458 <HAL_DMA_Start_IT+0x208>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d031      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2b      	ldr	r2, [pc, #172]	@ (800445c <HAL_DMA_Start_IT+0x20c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d02c      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004460 <HAL_DMA_Start_IT+0x210>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d027      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a28      	ldr	r2, [pc, #160]	@ (8004464 <HAL_DMA_Start_IT+0x214>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d022      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a27      	ldr	r2, [pc, #156]	@ (8004468 <HAL_DMA_Start_IT+0x218>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d01d      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a25      	ldr	r2, [pc, #148]	@ (800446c <HAL_DMA_Start_IT+0x21c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d018      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a24      	ldr	r2, [pc, #144]	@ (8004470 <HAL_DMA_Start_IT+0x220>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d013      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a22      	ldr	r2, [pc, #136]	@ (8004474 <HAL_DMA_Start_IT+0x224>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a21      	ldr	r2, [pc, #132]	@ (8004478 <HAL_DMA_Start_IT+0x228>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d009      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <HAL_DMA_Start_IT+0x22c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_DMA_Start_IT+0x1bc>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <HAL_DMA_Start_IT+0x230>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <HAL_DMA_Start_IT+0x1c0>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_DMA_Start_IT+0x1c2>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d036      	beq.n	8004484 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 021e 	bic.w	r2, r3, #30
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0216 	orr.w	r2, r2, #22
 8004428:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d03e      	beq.n	80044b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0208 	orr.w	r2, r2, #8
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e035      	b.n	80044b0 <HAL_DMA_Start_IT+0x260>
 8004444:	40020010 	.word	0x40020010
 8004448:	40020028 	.word	0x40020028
 800444c:	40020040 	.word	0x40020040
 8004450:	40020058 	.word	0x40020058
 8004454:	40020070 	.word	0x40020070
 8004458:	40020088 	.word	0x40020088
 800445c:	400200a0 	.word	0x400200a0
 8004460:	400200b8 	.word	0x400200b8
 8004464:	40020410 	.word	0x40020410
 8004468:	40020428 	.word	0x40020428
 800446c:	40020440 	.word	0x40020440
 8004470:	40020458 	.word	0x40020458
 8004474:	40020470 	.word	0x40020470
 8004478:	40020488 	.word	0x40020488
 800447c:	400204a0 	.word	0x400204a0
 8004480:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 020e 	bic.w	r2, r3, #14
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 020a 	orr.w	r2, r2, #10
 8004496:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0204 	orr.w	r2, r2, #4
 80044ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a83      	ldr	r2, [pc, #524]	@ (80046c4 <HAL_DMA_Start_IT+0x474>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d072      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a82      	ldr	r2, [pc, #520]	@ (80046c8 <HAL_DMA_Start_IT+0x478>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d06d      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a80      	ldr	r2, [pc, #512]	@ (80046cc <HAL_DMA_Start_IT+0x47c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d068      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a7f      	ldr	r2, [pc, #508]	@ (80046d0 <HAL_DMA_Start_IT+0x480>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d063      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a7d      	ldr	r2, [pc, #500]	@ (80046d4 <HAL_DMA_Start_IT+0x484>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d05e      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7c      	ldr	r2, [pc, #496]	@ (80046d8 <HAL_DMA_Start_IT+0x488>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d059      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a7a      	ldr	r2, [pc, #488]	@ (80046dc <HAL_DMA_Start_IT+0x48c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d054      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a79      	ldr	r2, [pc, #484]	@ (80046e0 <HAL_DMA_Start_IT+0x490>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d04f      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a77      	ldr	r2, [pc, #476]	@ (80046e4 <HAL_DMA_Start_IT+0x494>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d04a      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a76      	ldr	r2, [pc, #472]	@ (80046e8 <HAL_DMA_Start_IT+0x498>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d045      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a74      	ldr	r2, [pc, #464]	@ (80046ec <HAL_DMA_Start_IT+0x49c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d040      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a73      	ldr	r2, [pc, #460]	@ (80046f0 <HAL_DMA_Start_IT+0x4a0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d03b      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a71      	ldr	r2, [pc, #452]	@ (80046f4 <HAL_DMA_Start_IT+0x4a4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d036      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a70      	ldr	r2, [pc, #448]	@ (80046f8 <HAL_DMA_Start_IT+0x4a8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d031      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a6e      	ldr	r2, [pc, #440]	@ (80046fc <HAL_DMA_Start_IT+0x4ac>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d02c      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a6d      	ldr	r2, [pc, #436]	@ (8004700 <HAL_DMA_Start_IT+0x4b0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d027      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a6b      	ldr	r2, [pc, #428]	@ (8004704 <HAL_DMA_Start_IT+0x4b4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a6a      	ldr	r2, [pc, #424]	@ (8004708 <HAL_DMA_Start_IT+0x4b8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d01d      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a68      	ldr	r2, [pc, #416]	@ (800470c <HAL_DMA_Start_IT+0x4bc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a67      	ldr	r2, [pc, #412]	@ (8004710 <HAL_DMA_Start_IT+0x4c0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a65      	ldr	r2, [pc, #404]	@ (8004714 <HAL_DMA_Start_IT+0x4c4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a64      	ldr	r2, [pc, #400]	@ (8004718 <HAL_DMA_Start_IT+0x4c8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a62      	ldr	r2, [pc, #392]	@ (800471c <HAL_DMA_Start_IT+0x4cc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_DMA_Start_IT+0x350>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a61      	ldr	r2, [pc, #388]	@ (8004720 <HAL_DMA_Start_IT+0x4d0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d101      	bne.n	80045a4 <HAL_DMA_Start_IT+0x354>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_DMA_Start_IT+0x356>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01a      	beq.n	80045e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a37      	ldr	r2, [pc, #220]	@ (80046c4 <HAL_DMA_Start_IT+0x474>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d04a      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a36      	ldr	r2, [pc, #216]	@ (80046c8 <HAL_DMA_Start_IT+0x478>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d045      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a34      	ldr	r2, [pc, #208]	@ (80046cc <HAL_DMA_Start_IT+0x47c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d040      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a33      	ldr	r2, [pc, #204]	@ (80046d0 <HAL_DMA_Start_IT+0x480>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d03b      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a31      	ldr	r2, [pc, #196]	@ (80046d4 <HAL_DMA_Start_IT+0x484>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d036      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a30      	ldr	r2, [pc, #192]	@ (80046d8 <HAL_DMA_Start_IT+0x488>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d031      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2e      	ldr	r2, [pc, #184]	@ (80046dc <HAL_DMA_Start_IT+0x48c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d02c      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2d      	ldr	r2, [pc, #180]	@ (80046e0 <HAL_DMA_Start_IT+0x490>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d027      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2b      	ldr	r2, [pc, #172]	@ (80046e4 <HAL_DMA_Start_IT+0x494>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d022      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2a      	ldr	r2, [pc, #168]	@ (80046e8 <HAL_DMA_Start_IT+0x498>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d01d      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a28      	ldr	r2, [pc, #160]	@ (80046ec <HAL_DMA_Start_IT+0x49c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d018      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a27      	ldr	r2, [pc, #156]	@ (80046f0 <HAL_DMA_Start_IT+0x4a0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a25      	ldr	r2, [pc, #148]	@ (80046f4 <HAL_DMA_Start_IT+0x4a4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a24      	ldr	r2, [pc, #144]	@ (80046f8 <HAL_DMA_Start_IT+0x4a8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a22      	ldr	r2, [pc, #136]	@ (80046fc <HAL_DMA_Start_IT+0x4ac>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_DMA_Start_IT+0x430>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a21      	ldr	r2, [pc, #132]	@ (8004700 <HAL_DMA_Start_IT+0x4b0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d108      	bne.n	8004692 <HAL_DMA_Start_IT+0x442>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e012      	b.n	80046b8 <HAL_DMA_Start_IT+0x468>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	e009      	b.n	80046b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40020010 	.word	0x40020010
 80046c8:	40020028 	.word	0x40020028
 80046cc:	40020040 	.word	0x40020040
 80046d0:	40020058 	.word	0x40020058
 80046d4:	40020070 	.word	0x40020070
 80046d8:	40020088 	.word	0x40020088
 80046dc:	400200a0 	.word	0x400200a0
 80046e0:	400200b8 	.word	0x400200b8
 80046e4:	40020410 	.word	0x40020410
 80046e8:	40020428 	.word	0x40020428
 80046ec:	40020440 	.word	0x40020440
 80046f0:	40020458 	.word	0x40020458
 80046f4:	40020470 	.word	0x40020470
 80046f8:	40020488 	.word	0x40020488
 80046fc:	400204a0 	.word	0x400204a0
 8004700:	400204b8 	.word	0x400204b8
 8004704:	58025408 	.word	0x58025408
 8004708:	5802541c 	.word	0x5802541c
 800470c:	58025430 	.word	0x58025430
 8004710:	58025444 	.word	0x58025444
 8004714:	58025458 	.word	0x58025458
 8004718:	5802546c 	.word	0x5802546c
 800471c:	58025480 	.word	0x58025480
 8004720:	58025494 	.word	0x58025494

08004724 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800472c:	f7fd fdbe 	bl	80022ac <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e2dc      	b.n	8004cf6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d008      	beq.n	800475a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2280      	movs	r2, #128	@ 0x80
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e2cd      	b.n	8004cf6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a76      	ldr	r2, [pc, #472]	@ (8004938 <HAL_DMA_Abort+0x214>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d04a      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a74      	ldr	r2, [pc, #464]	@ (800493c <HAL_DMA_Abort+0x218>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d045      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a73      	ldr	r2, [pc, #460]	@ (8004940 <HAL_DMA_Abort+0x21c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d040      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a71      	ldr	r2, [pc, #452]	@ (8004944 <HAL_DMA_Abort+0x220>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d03b      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a70      	ldr	r2, [pc, #448]	@ (8004948 <HAL_DMA_Abort+0x224>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d036      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6e      	ldr	r2, [pc, #440]	@ (800494c <HAL_DMA_Abort+0x228>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d031      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6d      	ldr	r2, [pc, #436]	@ (8004950 <HAL_DMA_Abort+0x22c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d02c      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004954 <HAL_DMA_Abort+0x230>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d027      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004958 <HAL_DMA_Abort+0x234>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d022      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	@ (800495c <HAL_DMA_Abort+0x238>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01d      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a67      	ldr	r2, [pc, #412]	@ (8004960 <HAL_DMA_Abort+0x23c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d018      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a65      	ldr	r2, [pc, #404]	@ (8004964 <HAL_DMA_Abort+0x240>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a64      	ldr	r2, [pc, #400]	@ (8004968 <HAL_DMA_Abort+0x244>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a62      	ldr	r2, [pc, #392]	@ (800496c <HAL_DMA_Abort+0x248>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a61      	ldr	r2, [pc, #388]	@ (8004970 <HAL_DMA_Abort+0x24c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_DMA_Abort+0xd6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004974 <HAL_DMA_Abort+0x250>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d101      	bne.n	80047fe <HAL_DMA_Abort+0xda>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_DMA_Abort+0xdc>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 021e 	bic.w	r2, r2, #30
 8004812:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004822:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e00a      	b.n	8004842 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 020e 	bic.w	r2, r2, #14
 800483a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a3c      	ldr	r2, [pc, #240]	@ (8004938 <HAL_DMA_Abort+0x214>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d072      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a3a      	ldr	r2, [pc, #232]	@ (800493c <HAL_DMA_Abort+0x218>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d06d      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a39      	ldr	r2, [pc, #228]	@ (8004940 <HAL_DMA_Abort+0x21c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d068      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a37      	ldr	r2, [pc, #220]	@ (8004944 <HAL_DMA_Abort+0x220>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d063      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a36      	ldr	r2, [pc, #216]	@ (8004948 <HAL_DMA_Abort+0x224>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d05e      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a34      	ldr	r2, [pc, #208]	@ (800494c <HAL_DMA_Abort+0x228>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d059      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a33      	ldr	r2, [pc, #204]	@ (8004950 <HAL_DMA_Abort+0x22c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d054      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a31      	ldr	r2, [pc, #196]	@ (8004954 <HAL_DMA_Abort+0x230>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d04f      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a30      	ldr	r2, [pc, #192]	@ (8004958 <HAL_DMA_Abort+0x234>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d04a      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2e      	ldr	r2, [pc, #184]	@ (800495c <HAL_DMA_Abort+0x238>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d045      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004960 <HAL_DMA_Abort+0x23c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d040      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004964 <HAL_DMA_Abort+0x240>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d03b      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a2a      	ldr	r2, [pc, #168]	@ (8004968 <HAL_DMA_Abort+0x244>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d036      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a28      	ldr	r2, [pc, #160]	@ (800496c <HAL_DMA_Abort+0x248>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d031      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a27      	ldr	r2, [pc, #156]	@ (8004970 <HAL_DMA_Abort+0x24c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d02c      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a25      	ldr	r2, [pc, #148]	@ (8004974 <HAL_DMA_Abort+0x250>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d027      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a24      	ldr	r2, [pc, #144]	@ (8004978 <HAL_DMA_Abort+0x254>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d022      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a22      	ldr	r2, [pc, #136]	@ (800497c <HAL_DMA_Abort+0x258>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01d      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a21      	ldr	r2, [pc, #132]	@ (8004980 <HAL_DMA_Abort+0x25c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d018      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_DMA_Abort+0x260>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <HAL_DMA_Abort+0x264>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1c      	ldr	r2, [pc, #112]	@ (800498c <HAL_DMA_Abort+0x268>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d009      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <HAL_DMA_Abort+0x26c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_DMA_Abort+0x20e>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <HAL_DMA_Abort+0x270>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d132      	bne.n	8004998 <HAL_DMA_Abort+0x274>
 8004932:	2301      	movs	r3, #1
 8004934:	e031      	b.n	800499a <HAL_DMA_Abort+0x276>
 8004936:	bf00      	nop
 8004938:	40020010 	.word	0x40020010
 800493c:	40020028 	.word	0x40020028
 8004940:	40020040 	.word	0x40020040
 8004944:	40020058 	.word	0x40020058
 8004948:	40020070 	.word	0x40020070
 800494c:	40020088 	.word	0x40020088
 8004950:	400200a0 	.word	0x400200a0
 8004954:	400200b8 	.word	0x400200b8
 8004958:	40020410 	.word	0x40020410
 800495c:	40020428 	.word	0x40020428
 8004960:	40020440 	.word	0x40020440
 8004964:	40020458 	.word	0x40020458
 8004968:	40020470 	.word	0x40020470
 800496c:	40020488 	.word	0x40020488
 8004970:	400204a0 	.word	0x400204a0
 8004974:	400204b8 	.word	0x400204b8
 8004978:	58025408 	.word	0x58025408
 800497c:	5802541c 	.word	0x5802541c
 8004980:	58025430 	.word	0x58025430
 8004984:	58025444 	.word	0x58025444
 8004988:	58025458 	.word	0x58025458
 800498c:	5802546c 	.word	0x5802546c
 8004990:	58025480 	.word	0x58025480
 8004994:	58025494 	.word	0x58025494
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004b68 <HAL_DMA_Abort+0x444>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d04a      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a6b      	ldr	r2, [pc, #428]	@ (8004b6c <HAL_DMA_Abort+0x448>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d045      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a6a      	ldr	r2, [pc, #424]	@ (8004b70 <HAL_DMA_Abort+0x44c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d040      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a68      	ldr	r2, [pc, #416]	@ (8004b74 <HAL_DMA_Abort+0x450>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d03b      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a67      	ldr	r2, [pc, #412]	@ (8004b78 <HAL_DMA_Abort+0x454>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d036      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a65      	ldr	r2, [pc, #404]	@ (8004b7c <HAL_DMA_Abort+0x458>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d031      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a64      	ldr	r2, [pc, #400]	@ (8004b80 <HAL_DMA_Abort+0x45c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d02c      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a62      	ldr	r2, [pc, #392]	@ (8004b84 <HAL_DMA_Abort+0x460>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d027      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a61      	ldr	r2, [pc, #388]	@ (8004b88 <HAL_DMA_Abort+0x464>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004b8c <HAL_DMA_Abort+0x468>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01d      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a5e      	ldr	r2, [pc, #376]	@ (8004b90 <HAL_DMA_Abort+0x46c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a5c      	ldr	r2, [pc, #368]	@ (8004b94 <HAL_DMA_Abort+0x470>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004b98 <HAL_DMA_Abort+0x474>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a59      	ldr	r2, [pc, #356]	@ (8004b9c <HAL_DMA_Abort+0x478>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a58      	ldr	r2, [pc, #352]	@ (8004ba0 <HAL_DMA_Abort+0x47c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_DMA_Abort+0x32a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a56      	ldr	r2, [pc, #344]	@ (8004ba4 <HAL_DMA_Abort+0x480>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <HAL_DMA_Abort+0x33c>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e007      	b.n	8004a70 <HAL_DMA_Abort+0x34c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004a70:	e013      	b.n	8004a9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a72:	f7fd fc1b 	bl	80022ac <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d90c      	bls.n	8004a9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2203      	movs	r2, #3
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e12d      	b.n	8004cf6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e5      	bne.n	8004a72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8004b68 <HAL_DMA_Abort+0x444>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d04a      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b6c <HAL_DMA_Abort+0x448>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d045      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2c      	ldr	r2, [pc, #176]	@ (8004b70 <HAL_DMA_Abort+0x44c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d040      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b74 <HAL_DMA_Abort+0x450>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d03b      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a29      	ldr	r2, [pc, #164]	@ (8004b78 <HAL_DMA_Abort+0x454>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d036      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a27      	ldr	r2, [pc, #156]	@ (8004b7c <HAL_DMA_Abort+0x458>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d031      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a26      	ldr	r2, [pc, #152]	@ (8004b80 <HAL_DMA_Abort+0x45c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d02c      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a24      	ldr	r2, [pc, #144]	@ (8004b84 <HAL_DMA_Abort+0x460>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d027      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a23      	ldr	r2, [pc, #140]	@ (8004b88 <HAL_DMA_Abort+0x464>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d022      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a21      	ldr	r2, [pc, #132]	@ (8004b8c <HAL_DMA_Abort+0x468>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d01d      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a20      	ldr	r2, [pc, #128]	@ (8004b90 <HAL_DMA_Abort+0x46c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d018      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1e      	ldr	r2, [pc, #120]	@ (8004b94 <HAL_DMA_Abort+0x470>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <HAL_DMA_Abort+0x474>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00e      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <HAL_DMA_Abort+0x478>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d009      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba0 <HAL_DMA_Abort+0x47c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_DMA_Abort+0x422>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a18      	ldr	r2, [pc, #96]	@ (8004ba4 <HAL_DMA_Abort+0x480>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d101      	bne.n	8004b4a <HAL_DMA_Abort+0x426>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_DMA_Abort+0x428>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02b      	beq.n	8004ba8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	223f      	movs	r2, #63	@ 0x3f
 8004b60:	409a      	lsls	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	e02a      	b.n	8004bbe <HAL_DMA_Abort+0x49a>
 8004b68:	40020010 	.word	0x40020010
 8004b6c:	40020028 	.word	0x40020028
 8004b70:	40020040 	.word	0x40020040
 8004b74:	40020058 	.word	0x40020058
 8004b78:	40020070 	.word	0x40020070
 8004b7c:	40020088 	.word	0x40020088
 8004b80:	400200a0 	.word	0x400200a0
 8004b84:	400200b8 	.word	0x400200b8
 8004b88:	40020410 	.word	0x40020410
 8004b8c:	40020428 	.word	0x40020428
 8004b90:	40020440 	.word	0x40020440
 8004b94:	40020458 	.word	0x40020458
 8004b98:	40020470 	.word	0x40020470
 8004b9c:	40020488 	.word	0x40020488
 8004ba0:	400204a0 	.word	0x400204a0
 8004ba4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a4f      	ldr	r2, [pc, #316]	@ (8004d00 <HAL_DMA_Abort+0x5dc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d072      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a4d      	ldr	r2, [pc, #308]	@ (8004d04 <HAL_DMA_Abort+0x5e0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d06d      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4c      	ldr	r2, [pc, #304]	@ (8004d08 <HAL_DMA_Abort+0x5e4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d068      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a4a      	ldr	r2, [pc, #296]	@ (8004d0c <HAL_DMA_Abort+0x5e8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d063      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a49      	ldr	r2, [pc, #292]	@ (8004d10 <HAL_DMA_Abort+0x5ec>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d05e      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a47      	ldr	r2, [pc, #284]	@ (8004d14 <HAL_DMA_Abort+0x5f0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d059      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a46      	ldr	r2, [pc, #280]	@ (8004d18 <HAL_DMA_Abort+0x5f4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d054      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a44      	ldr	r2, [pc, #272]	@ (8004d1c <HAL_DMA_Abort+0x5f8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d04f      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a43      	ldr	r2, [pc, #268]	@ (8004d20 <HAL_DMA_Abort+0x5fc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d04a      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a41      	ldr	r2, [pc, #260]	@ (8004d24 <HAL_DMA_Abort+0x600>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d045      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a40      	ldr	r2, [pc, #256]	@ (8004d28 <HAL_DMA_Abort+0x604>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d040      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a3e      	ldr	r2, [pc, #248]	@ (8004d2c <HAL_DMA_Abort+0x608>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d03b      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d30 <HAL_DMA_Abort+0x60c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d036      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3b      	ldr	r2, [pc, #236]	@ (8004d34 <HAL_DMA_Abort+0x610>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d031      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3a      	ldr	r2, [pc, #232]	@ (8004d38 <HAL_DMA_Abort+0x614>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d02c      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a38      	ldr	r2, [pc, #224]	@ (8004d3c <HAL_DMA_Abort+0x618>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d027      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a37      	ldr	r2, [pc, #220]	@ (8004d40 <HAL_DMA_Abort+0x61c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d022      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a35      	ldr	r2, [pc, #212]	@ (8004d44 <HAL_DMA_Abort+0x620>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01d      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a34      	ldr	r2, [pc, #208]	@ (8004d48 <HAL_DMA_Abort+0x624>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d018      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a32      	ldr	r2, [pc, #200]	@ (8004d4c <HAL_DMA_Abort+0x628>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a31      	ldr	r2, [pc, #196]	@ (8004d50 <HAL_DMA_Abort+0x62c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00e      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a2f      	ldr	r2, [pc, #188]	@ (8004d54 <HAL_DMA_Abort+0x630>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d009      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d58 <HAL_DMA_Abort+0x634>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_DMA_Abort+0x58a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8004d5c <HAL_DMA_Abort+0x638>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <HAL_DMA_Abort+0x58e>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_DMA_Abort+0x590>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cc0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00c      	beq.n	8004ce4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004ce2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40020010 	.word	0x40020010
 8004d04:	40020028 	.word	0x40020028
 8004d08:	40020040 	.word	0x40020040
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	40020070 	.word	0x40020070
 8004d14:	40020088 	.word	0x40020088
 8004d18:	400200a0 	.word	0x400200a0
 8004d1c:	400200b8 	.word	0x400200b8
 8004d20:	40020410 	.word	0x40020410
 8004d24:	40020428 	.word	0x40020428
 8004d28:	40020440 	.word	0x40020440
 8004d2c:	40020458 	.word	0x40020458
 8004d30:	40020470 	.word	0x40020470
 8004d34:	40020488 	.word	0x40020488
 8004d38:	400204a0 	.word	0x400204a0
 8004d3c:	400204b8 	.word	0x400204b8
 8004d40:	58025408 	.word	0x58025408
 8004d44:	5802541c 	.word	0x5802541c
 8004d48:	58025430 	.word	0x58025430
 8004d4c:	58025444 	.word	0x58025444
 8004d50:	58025458 	.word	0x58025458
 8004d54:	5802546c 	.word	0x5802546c
 8004d58:	58025480 	.word	0x58025480
 8004d5c:	58025494 	.word	0x58025494

08004d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e237      	b.n	80051e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d004      	beq.n	8004d88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2280      	movs	r2, #128	@ 0x80
 8004d82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e22c      	b.n	80051e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8004f00 <HAL_DMA_Abort_IT+0x1a0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d04a      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a5b      	ldr	r2, [pc, #364]	@ (8004f04 <HAL_DMA_Abort_IT+0x1a4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d045      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a59      	ldr	r2, [pc, #356]	@ (8004f08 <HAL_DMA_Abort_IT+0x1a8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d040      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a58      	ldr	r2, [pc, #352]	@ (8004f0c <HAL_DMA_Abort_IT+0x1ac>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d03b      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a56      	ldr	r2, [pc, #344]	@ (8004f10 <HAL_DMA_Abort_IT+0x1b0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d036      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a55      	ldr	r2, [pc, #340]	@ (8004f14 <HAL_DMA_Abort_IT+0x1b4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d031      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a53      	ldr	r2, [pc, #332]	@ (8004f18 <HAL_DMA_Abort_IT+0x1b8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02c      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a52      	ldr	r2, [pc, #328]	@ (8004f1c <HAL_DMA_Abort_IT+0x1bc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d027      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a50      	ldr	r2, [pc, #320]	@ (8004f20 <HAL_DMA_Abort_IT+0x1c0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d022      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a4f      	ldr	r2, [pc, #316]	@ (8004f24 <HAL_DMA_Abort_IT+0x1c4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01d      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a4d      	ldr	r2, [pc, #308]	@ (8004f28 <HAL_DMA_Abort_IT+0x1c8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d018      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a4c      	ldr	r2, [pc, #304]	@ (8004f2c <HAL_DMA_Abort_IT+0x1cc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a4a      	ldr	r2, [pc, #296]	@ (8004f30 <HAL_DMA_Abort_IT+0x1d0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00e      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a49      	ldr	r2, [pc, #292]	@ (8004f34 <HAL_DMA_Abort_IT+0x1d4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a47      	ldr	r2, [pc, #284]	@ (8004f38 <HAL_DMA_Abort_IT+0x1d8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_DMA_Abort_IT+0xc8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a46      	ldr	r2, [pc, #280]	@ (8004f3c <HAL_DMA_Abort_IT+0x1dc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d101      	bne.n	8004e2c <HAL_DMA_Abort_IT+0xcc>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <HAL_DMA_Abort_IT+0xce>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8086 	beq.w	8004f40 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2204      	movs	r2, #4
 8004e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2f      	ldr	r2, [pc, #188]	@ (8004f00 <HAL_DMA_Abort_IT+0x1a0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d04a      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f04 <HAL_DMA_Abort_IT+0x1a4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d045      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2c      	ldr	r2, [pc, #176]	@ (8004f08 <HAL_DMA_Abort_IT+0x1a8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d040      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8004f0c <HAL_DMA_Abort_IT+0x1ac>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d03b      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a29      	ldr	r2, [pc, #164]	@ (8004f10 <HAL_DMA_Abort_IT+0x1b0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d036      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a28      	ldr	r2, [pc, #160]	@ (8004f14 <HAL_DMA_Abort_IT+0x1b4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d031      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a26      	ldr	r2, [pc, #152]	@ (8004f18 <HAL_DMA_Abort_IT+0x1b8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02c      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a25      	ldr	r2, [pc, #148]	@ (8004f1c <HAL_DMA_Abort_IT+0x1bc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d027      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a23      	ldr	r2, [pc, #140]	@ (8004f20 <HAL_DMA_Abort_IT+0x1c0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d022      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a22      	ldr	r2, [pc, #136]	@ (8004f24 <HAL_DMA_Abort_IT+0x1c4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d01d      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a20      	ldr	r2, [pc, #128]	@ (8004f28 <HAL_DMA_Abort_IT+0x1c8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d018      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1f      	ldr	r2, [pc, #124]	@ (8004f2c <HAL_DMA_Abort_IT+0x1cc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d013      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <HAL_DMA_Abort_IT+0x1d0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00e      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f34 <HAL_DMA_Abort_IT+0x1d4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d009      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8004f38 <HAL_DMA_Abort_IT+0x1d8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_DMA_Abort_IT+0x17c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a19      	ldr	r2, [pc, #100]	@ (8004f3c <HAL_DMA_Abort_IT+0x1dc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d108      	bne.n	8004eee <HAL_DMA_Abort_IT+0x18e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e178      	b.n	80051e0 <HAL_DMA_Abort_IT+0x480>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e16f      	b.n	80051e0 <HAL_DMA_Abort_IT+0x480>
 8004f00:	40020010 	.word	0x40020010
 8004f04:	40020028 	.word	0x40020028
 8004f08:	40020040 	.word	0x40020040
 8004f0c:	40020058 	.word	0x40020058
 8004f10:	40020070 	.word	0x40020070
 8004f14:	40020088 	.word	0x40020088
 8004f18:	400200a0 	.word	0x400200a0
 8004f1c:	400200b8 	.word	0x400200b8
 8004f20:	40020410 	.word	0x40020410
 8004f24:	40020428 	.word	0x40020428
 8004f28:	40020440 	.word	0x40020440
 8004f2c:	40020458 	.word	0x40020458
 8004f30:	40020470 	.word	0x40020470
 8004f34:	40020488 	.word	0x40020488
 8004f38:	400204a0 	.word	0x400204a0
 8004f3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 020e 	bic.w	r2, r2, #14
 8004f4e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a6c      	ldr	r2, [pc, #432]	@ (8005108 <HAL_DMA_Abort_IT+0x3a8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d04a      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800510c <HAL_DMA_Abort_IT+0x3ac>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d045      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a69      	ldr	r2, [pc, #420]	@ (8005110 <HAL_DMA_Abort_IT+0x3b0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d040      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a68      	ldr	r2, [pc, #416]	@ (8005114 <HAL_DMA_Abort_IT+0x3b4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d03b      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a66      	ldr	r2, [pc, #408]	@ (8005118 <HAL_DMA_Abort_IT+0x3b8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d036      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a65      	ldr	r2, [pc, #404]	@ (800511c <HAL_DMA_Abort_IT+0x3bc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d031      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a63      	ldr	r2, [pc, #396]	@ (8005120 <HAL_DMA_Abort_IT+0x3c0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02c      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a62      	ldr	r2, [pc, #392]	@ (8005124 <HAL_DMA_Abort_IT+0x3c4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d027      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a60      	ldr	r2, [pc, #384]	@ (8005128 <HAL_DMA_Abort_IT+0x3c8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d022      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a5f      	ldr	r2, [pc, #380]	@ (800512c <HAL_DMA_Abort_IT+0x3cc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d01d      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8005130 <HAL_DMA_Abort_IT+0x3d0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d018      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5c      	ldr	r2, [pc, #368]	@ (8005134 <HAL_DMA_Abort_IT+0x3d4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8005138 <HAL_DMA_Abort_IT+0x3d8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a59      	ldr	r2, [pc, #356]	@ (800513c <HAL_DMA_Abort_IT+0x3dc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a57      	ldr	r2, [pc, #348]	@ (8005140 <HAL_DMA_Abort_IT+0x3e0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x290>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a56      	ldr	r2, [pc, #344]	@ (8005144 <HAL_DMA_Abort_IT+0x3e4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <HAL_DMA_Abort_IT+0x2a2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e007      	b.n	8005012 <HAL_DMA_Abort_IT+0x2b2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a3c      	ldr	r2, [pc, #240]	@ (8005108 <HAL_DMA_Abort_IT+0x3a8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d072      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a3a      	ldr	r2, [pc, #232]	@ (800510c <HAL_DMA_Abort_IT+0x3ac>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d06d      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a39      	ldr	r2, [pc, #228]	@ (8005110 <HAL_DMA_Abort_IT+0x3b0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d068      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a37      	ldr	r2, [pc, #220]	@ (8005114 <HAL_DMA_Abort_IT+0x3b4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d063      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a36      	ldr	r2, [pc, #216]	@ (8005118 <HAL_DMA_Abort_IT+0x3b8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d05e      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a34      	ldr	r2, [pc, #208]	@ (800511c <HAL_DMA_Abort_IT+0x3bc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d059      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a33      	ldr	r2, [pc, #204]	@ (8005120 <HAL_DMA_Abort_IT+0x3c0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d054      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a31      	ldr	r2, [pc, #196]	@ (8005124 <HAL_DMA_Abort_IT+0x3c4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d04f      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a30      	ldr	r2, [pc, #192]	@ (8005128 <HAL_DMA_Abort_IT+0x3c8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d04a      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a2e      	ldr	r2, [pc, #184]	@ (800512c <HAL_DMA_Abort_IT+0x3cc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d045      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2d      	ldr	r2, [pc, #180]	@ (8005130 <HAL_DMA_Abort_IT+0x3d0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d040      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2b      	ldr	r2, [pc, #172]	@ (8005134 <HAL_DMA_Abort_IT+0x3d4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d03b      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2a      	ldr	r2, [pc, #168]	@ (8005138 <HAL_DMA_Abort_IT+0x3d8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d036      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a28      	ldr	r2, [pc, #160]	@ (800513c <HAL_DMA_Abort_IT+0x3dc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d031      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a27      	ldr	r2, [pc, #156]	@ (8005140 <HAL_DMA_Abort_IT+0x3e0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d02c      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a25      	ldr	r2, [pc, #148]	@ (8005144 <HAL_DMA_Abort_IT+0x3e4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d027      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a24      	ldr	r2, [pc, #144]	@ (8005148 <HAL_DMA_Abort_IT+0x3e8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d022      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a22      	ldr	r2, [pc, #136]	@ (800514c <HAL_DMA_Abort_IT+0x3ec>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01d      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a21      	ldr	r2, [pc, #132]	@ (8005150 <HAL_DMA_Abort_IT+0x3f0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d018      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005154 <HAL_DMA_Abort_IT+0x3f4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1e      	ldr	r2, [pc, #120]	@ (8005158 <HAL_DMA_Abort_IT+0x3f8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <HAL_DMA_Abort_IT+0x3fc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <HAL_DMA_Abort_IT+0x400>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_DMA_Abort_IT+0x3a2>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <HAL_DMA_Abort_IT+0x404>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d132      	bne.n	8005168 <HAL_DMA_Abort_IT+0x408>
 8005102:	2301      	movs	r3, #1
 8005104:	e031      	b.n	800516a <HAL_DMA_Abort_IT+0x40a>
 8005106:	bf00      	nop
 8005108:	40020010 	.word	0x40020010
 800510c:	40020028 	.word	0x40020028
 8005110:	40020040 	.word	0x40020040
 8005114:	40020058 	.word	0x40020058
 8005118:	40020070 	.word	0x40020070
 800511c:	40020088 	.word	0x40020088
 8005120:	400200a0 	.word	0x400200a0
 8005124:	400200b8 	.word	0x400200b8
 8005128:	40020410 	.word	0x40020410
 800512c:	40020428 	.word	0x40020428
 8005130:	40020440 	.word	0x40020440
 8005134:	40020458 	.word	0x40020458
 8005138:	40020470 	.word	0x40020470
 800513c:	40020488 	.word	0x40020488
 8005140:	400204a0 	.word	0x400204a0
 8005144:	400204b8 	.word	0x400204b8
 8005148:	58025408 	.word	0x58025408
 800514c:	5802541c 	.word	0x5802541c
 8005150:	58025430 	.word	0x58025430
 8005154:	58025444 	.word	0x58025444
 8005158:	58025458 	.word	0x58025458
 800515c:	5802546c 	.word	0x5802546c
 8005160:	58025480 	.word	0x58025480
 8005164:	58025494 	.word	0x58025494
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d028      	beq.n	80051c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800517c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005182:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800519c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	@ 0x28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051f8:	4b67      	ldr	r3, [pc, #412]	@ (8005398 <HAL_DMA_IRQHandler+0x1ac>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a67      	ldr	r2, [pc, #412]	@ (800539c <HAL_DMA_IRQHandler+0x1b0>)
 80051fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005202:	0a9b      	lsrs	r3, r3, #10
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005210:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a5f      	ldr	r2, [pc, #380]	@ (80053a0 <HAL_DMA_IRQHandler+0x1b4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d04a      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a5d      	ldr	r2, [pc, #372]	@ (80053a4 <HAL_DMA_IRQHandler+0x1b8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d045      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a5c      	ldr	r2, [pc, #368]	@ (80053a8 <HAL_DMA_IRQHandler+0x1bc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d040      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a5a      	ldr	r2, [pc, #360]	@ (80053ac <HAL_DMA_IRQHandler+0x1c0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d03b      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a59      	ldr	r2, [pc, #356]	@ (80053b0 <HAL_DMA_IRQHandler+0x1c4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d036      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a57      	ldr	r2, [pc, #348]	@ (80053b4 <HAL_DMA_IRQHandler+0x1c8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d031      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a56      	ldr	r2, [pc, #344]	@ (80053b8 <HAL_DMA_IRQHandler+0x1cc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d02c      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a54      	ldr	r2, [pc, #336]	@ (80053bc <HAL_DMA_IRQHandler+0x1d0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d027      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a53      	ldr	r2, [pc, #332]	@ (80053c0 <HAL_DMA_IRQHandler+0x1d4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d022      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a51      	ldr	r2, [pc, #324]	@ (80053c4 <HAL_DMA_IRQHandler+0x1d8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01d      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a50      	ldr	r2, [pc, #320]	@ (80053c8 <HAL_DMA_IRQHandler+0x1dc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a4e      	ldr	r2, [pc, #312]	@ (80053cc <HAL_DMA_IRQHandler+0x1e0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a4d      	ldr	r2, [pc, #308]	@ (80053d0 <HAL_DMA_IRQHandler+0x1e4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a4b      	ldr	r2, [pc, #300]	@ (80053d4 <HAL_DMA_IRQHandler+0x1e8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4a      	ldr	r2, [pc, #296]	@ (80053d8 <HAL_DMA_IRQHandler+0x1ec>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_DMA_IRQHandler+0xd2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a48      	ldr	r2, [pc, #288]	@ (80053dc <HAL_DMA_IRQHandler+0x1f0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d101      	bne.n	80052c2 <HAL_DMA_IRQHandler+0xd6>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_DMA_IRQHandler+0xd8>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 842b 	beq.w	8005b20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	2208      	movs	r2, #8
 80052d4:	409a      	lsls	r2, r3
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80a2 	beq.w	8005424 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2e      	ldr	r2, [pc, #184]	@ (80053a0 <HAL_DMA_IRQHandler+0x1b4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d04a      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2d      	ldr	r2, [pc, #180]	@ (80053a4 <HAL_DMA_IRQHandler+0x1b8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d045      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2b      	ldr	r2, [pc, #172]	@ (80053a8 <HAL_DMA_IRQHandler+0x1bc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d040      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2a      	ldr	r2, [pc, #168]	@ (80053ac <HAL_DMA_IRQHandler+0x1c0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d03b      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a28      	ldr	r2, [pc, #160]	@ (80053b0 <HAL_DMA_IRQHandler+0x1c4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d036      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a27      	ldr	r2, [pc, #156]	@ (80053b4 <HAL_DMA_IRQHandler+0x1c8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d031      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a25      	ldr	r2, [pc, #148]	@ (80053b8 <HAL_DMA_IRQHandler+0x1cc>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02c      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a24      	ldr	r2, [pc, #144]	@ (80053bc <HAL_DMA_IRQHandler+0x1d0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d027      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a22      	ldr	r2, [pc, #136]	@ (80053c0 <HAL_DMA_IRQHandler+0x1d4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d022      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a21      	ldr	r2, [pc, #132]	@ (80053c4 <HAL_DMA_IRQHandler+0x1d8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01d      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1f      	ldr	r2, [pc, #124]	@ (80053c8 <HAL_DMA_IRQHandler+0x1dc>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1e      	ldr	r2, [pc, #120]	@ (80053cc <HAL_DMA_IRQHandler+0x1e0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1c      	ldr	r2, [pc, #112]	@ (80053d0 <HAL_DMA_IRQHandler+0x1e4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1b      	ldr	r2, [pc, #108]	@ (80053d4 <HAL_DMA_IRQHandler+0x1e8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a19      	ldr	r2, [pc, #100]	@ (80053d8 <HAL_DMA_IRQHandler+0x1ec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_DMA_IRQHandler+0x194>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a18      	ldr	r2, [pc, #96]	@ (80053dc <HAL_DMA_IRQHandler+0x1f0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d12f      	bne.n	80053e0 <HAL_DMA_IRQHandler+0x1f4>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf14      	ite	ne
 800538e:	2301      	movne	r3, #1
 8005390:	2300      	moveq	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	e02e      	b.n	80053f4 <HAL_DMA_IRQHandler+0x208>
 8005396:	bf00      	nop
 8005398:	24000004 	.word	0x24000004
 800539c:	1b4e81b5 	.word	0x1b4e81b5
 80053a0:	40020010 	.word	0x40020010
 80053a4:	40020028 	.word	0x40020028
 80053a8:	40020040 	.word	0x40020040
 80053ac:	40020058 	.word	0x40020058
 80053b0:	40020070 	.word	0x40020070
 80053b4:	40020088 	.word	0x40020088
 80053b8:	400200a0 	.word	0x400200a0
 80053bc:	400200b8 	.word	0x400200b8
 80053c0:	40020410 	.word	0x40020410
 80053c4:	40020428 	.word	0x40020428
 80053c8:	40020440 	.word	0x40020440
 80053cc:	40020458 	.word	0x40020458
 80053d0:	40020470 	.word	0x40020470
 80053d4:	40020488 	.word	0x40020488
 80053d8:	400204a0 	.word	0x400204a0
 80053dc:	400204b8 	.word	0x400204b8
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d015      	beq.n	8005424 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0204 	bic.w	r2, r2, #4
 8005406:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540c:	f003 031f 	and.w	r3, r3, #31
 8005410:	2208      	movs	r2, #8
 8005412:	409a      	lsls	r2, r3
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541c:	f043 0201 	orr.w	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d06e      	beq.n	8005518 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a69      	ldr	r2, [pc, #420]	@ (80055e4 <HAL_DMA_IRQHandler+0x3f8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d04a      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a67      	ldr	r2, [pc, #412]	@ (80055e8 <HAL_DMA_IRQHandler+0x3fc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d045      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a66      	ldr	r2, [pc, #408]	@ (80055ec <HAL_DMA_IRQHandler+0x400>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d040      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a64      	ldr	r2, [pc, #400]	@ (80055f0 <HAL_DMA_IRQHandler+0x404>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d03b      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a63      	ldr	r2, [pc, #396]	@ (80055f4 <HAL_DMA_IRQHandler+0x408>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d036      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a61      	ldr	r2, [pc, #388]	@ (80055f8 <HAL_DMA_IRQHandler+0x40c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d031      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a60      	ldr	r2, [pc, #384]	@ (80055fc <HAL_DMA_IRQHandler+0x410>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d02c      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a5e      	ldr	r2, [pc, #376]	@ (8005600 <HAL_DMA_IRQHandler+0x414>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d027      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a5d      	ldr	r2, [pc, #372]	@ (8005604 <HAL_DMA_IRQHandler+0x418>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d022      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a5b      	ldr	r2, [pc, #364]	@ (8005608 <HAL_DMA_IRQHandler+0x41c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01d      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a5a      	ldr	r2, [pc, #360]	@ (800560c <HAL_DMA_IRQHandler+0x420>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d018      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a58      	ldr	r2, [pc, #352]	@ (8005610 <HAL_DMA_IRQHandler+0x424>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a57      	ldr	r2, [pc, #348]	@ (8005614 <HAL_DMA_IRQHandler+0x428>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00e      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a55      	ldr	r2, [pc, #340]	@ (8005618 <HAL_DMA_IRQHandler+0x42c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d009      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a54      	ldr	r2, [pc, #336]	@ (800561c <HAL_DMA_IRQHandler+0x430>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d004      	beq.n	80054da <HAL_DMA_IRQHandler+0x2ee>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a52      	ldr	r2, [pc, #328]	@ (8005620 <HAL_DMA_IRQHandler+0x434>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d10a      	bne.n	80054f0 <HAL_DMA_IRQHandler+0x304>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e003      	b.n	80054f8 <HAL_DMA_IRQHandler+0x30c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2201      	movs	r2, #1
 8005506:	409a      	lsls	r2, r3
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005510:	f043 0202 	orr.w	r2, r3, #2
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2204      	movs	r2, #4
 8005522:	409a      	lsls	r2, r3
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 808f 	beq.w	800564c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2c      	ldr	r2, [pc, #176]	@ (80055e4 <HAL_DMA_IRQHandler+0x3f8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d04a      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a2a      	ldr	r2, [pc, #168]	@ (80055e8 <HAL_DMA_IRQHandler+0x3fc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d045      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a29      	ldr	r2, [pc, #164]	@ (80055ec <HAL_DMA_IRQHandler+0x400>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d040      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a27      	ldr	r2, [pc, #156]	@ (80055f0 <HAL_DMA_IRQHandler+0x404>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d03b      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a26      	ldr	r2, [pc, #152]	@ (80055f4 <HAL_DMA_IRQHandler+0x408>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d036      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a24      	ldr	r2, [pc, #144]	@ (80055f8 <HAL_DMA_IRQHandler+0x40c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d031      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a23      	ldr	r2, [pc, #140]	@ (80055fc <HAL_DMA_IRQHandler+0x410>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d02c      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a21      	ldr	r2, [pc, #132]	@ (8005600 <HAL_DMA_IRQHandler+0x414>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d027      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a20      	ldr	r2, [pc, #128]	@ (8005604 <HAL_DMA_IRQHandler+0x418>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1e      	ldr	r2, [pc, #120]	@ (8005608 <HAL_DMA_IRQHandler+0x41c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01d      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1d      	ldr	r2, [pc, #116]	@ (800560c <HAL_DMA_IRQHandler+0x420>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005610 <HAL_DMA_IRQHandler+0x424>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <HAL_DMA_IRQHandler+0x428>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	@ (8005618 <HAL_DMA_IRQHandler+0x42c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a17      	ldr	r2, [pc, #92]	@ (800561c <HAL_DMA_IRQHandler+0x430>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_DMA_IRQHandler+0x3e2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a15      	ldr	r2, [pc, #84]	@ (8005620 <HAL_DMA_IRQHandler+0x434>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d12a      	bne.n	8005624 <HAL_DMA_IRQHandler+0x438>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf14      	ite	ne
 80055dc:	2301      	movne	r3, #1
 80055de:	2300      	moveq	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e023      	b.n	800562c <HAL_DMA_IRQHandler+0x440>
 80055e4:	40020010 	.word	0x40020010
 80055e8:	40020028 	.word	0x40020028
 80055ec:	40020040 	.word	0x40020040
 80055f0:	40020058 	.word	0x40020058
 80055f4:	40020070 	.word	0x40020070
 80055f8:	40020088 	.word	0x40020088
 80055fc:	400200a0 	.word	0x400200a0
 8005600:	400200b8 	.word	0x400200b8
 8005604:	40020410 	.word	0x40020410
 8005608:	40020428 	.word	0x40020428
 800560c:	40020440 	.word	0x40020440
 8005610:	40020458 	.word	0x40020458
 8005614:	40020470 	.word	0x40020470
 8005618:	40020488 	.word	0x40020488
 800561c:	400204a0 	.word	0x400204a0
 8005620:	400204b8 	.word	0x400204b8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00d      	beq.n	800564c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2204      	movs	r2, #4
 800563a:	409a      	lsls	r2, r3
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	f043 0204 	orr.w	r2, r3, #4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	2210      	movs	r2, #16
 8005656:	409a      	lsls	r2, r3
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	4013      	ands	r3, r2
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80a6 	beq.w	80057ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a85      	ldr	r2, [pc, #532]	@ (800587c <HAL_DMA_IRQHandler+0x690>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d04a      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a83      	ldr	r2, [pc, #524]	@ (8005880 <HAL_DMA_IRQHandler+0x694>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d045      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a82      	ldr	r2, [pc, #520]	@ (8005884 <HAL_DMA_IRQHandler+0x698>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d040      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a80      	ldr	r2, [pc, #512]	@ (8005888 <HAL_DMA_IRQHandler+0x69c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d03b      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a7f      	ldr	r2, [pc, #508]	@ (800588c <HAL_DMA_IRQHandler+0x6a0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d036      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a7d      	ldr	r2, [pc, #500]	@ (8005890 <HAL_DMA_IRQHandler+0x6a4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d031      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005894 <HAL_DMA_IRQHandler+0x6a8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d02c      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a7a      	ldr	r2, [pc, #488]	@ (8005898 <HAL_DMA_IRQHandler+0x6ac>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d027      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a79      	ldr	r2, [pc, #484]	@ (800589c <HAL_DMA_IRQHandler+0x6b0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d022      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a77      	ldr	r2, [pc, #476]	@ (80058a0 <HAL_DMA_IRQHandler+0x6b4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a76      	ldr	r2, [pc, #472]	@ (80058a4 <HAL_DMA_IRQHandler+0x6b8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d018      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a74      	ldr	r2, [pc, #464]	@ (80058a8 <HAL_DMA_IRQHandler+0x6bc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a73      	ldr	r2, [pc, #460]	@ (80058ac <HAL_DMA_IRQHandler+0x6c0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a71      	ldr	r2, [pc, #452]	@ (80058b0 <HAL_DMA_IRQHandler+0x6c4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a70      	ldr	r2, [pc, #448]	@ (80058b4 <HAL_DMA_IRQHandler+0x6c8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_DMA_IRQHandler+0x516>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6e      	ldr	r2, [pc, #440]	@ (80058b8 <HAL_DMA_IRQHandler+0x6cc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d10a      	bne.n	8005718 <HAL_DMA_IRQHandler+0x52c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	bf14      	ite	ne
 8005710:	2301      	movne	r3, #1
 8005712:	2300      	moveq	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	e009      	b.n	800572c <HAL_DMA_IRQHandler+0x540>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d03e      	beq.n	80057ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2210      	movs	r2, #16
 800573a:	409a      	lsls	r2, r3
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d018      	beq.n	8005780 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d108      	bne.n	800576e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d024      	beq.n	80057ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4798      	blx	r3
 800576c:	e01f      	b.n	80057ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01b      	beq.n	80057ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
 800577e:	e016      	b.n	80057ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d107      	bne.n	800579e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0208 	bic.w	r2, r2, #8
 800579c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2220      	movs	r2, #32
 80057b8:	409a      	lsls	r2, r3
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 8110 	beq.w	80059e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2c      	ldr	r2, [pc, #176]	@ (800587c <HAL_DMA_IRQHandler+0x690>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d04a      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005880 <HAL_DMA_IRQHandler+0x694>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d045      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a29      	ldr	r2, [pc, #164]	@ (8005884 <HAL_DMA_IRQHandler+0x698>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d040      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a28      	ldr	r2, [pc, #160]	@ (8005888 <HAL_DMA_IRQHandler+0x69c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d03b      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a26      	ldr	r2, [pc, #152]	@ (800588c <HAL_DMA_IRQHandler+0x6a0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d036      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a25      	ldr	r2, [pc, #148]	@ (8005890 <HAL_DMA_IRQHandler+0x6a4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d031      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a23      	ldr	r2, [pc, #140]	@ (8005894 <HAL_DMA_IRQHandler+0x6a8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d02c      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a22      	ldr	r2, [pc, #136]	@ (8005898 <HAL_DMA_IRQHandler+0x6ac>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d027      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a20      	ldr	r2, [pc, #128]	@ (800589c <HAL_DMA_IRQHandler+0x6b0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d022      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <HAL_DMA_IRQHandler+0x6b4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d01d      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1d      	ldr	r2, [pc, #116]	@ (80058a4 <HAL_DMA_IRQHandler+0x6b8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d018      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <HAL_DMA_IRQHandler+0x6bc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d013      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1a      	ldr	r2, [pc, #104]	@ (80058ac <HAL_DMA_IRQHandler+0x6c0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00e      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a19      	ldr	r2, [pc, #100]	@ (80058b0 <HAL_DMA_IRQHandler+0x6c4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d009      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a17      	ldr	r2, [pc, #92]	@ (80058b4 <HAL_DMA_IRQHandler+0x6c8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_DMA_IRQHandler+0x678>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a16      	ldr	r2, [pc, #88]	@ (80058b8 <HAL_DMA_IRQHandler+0x6cc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d12b      	bne.n	80058bc <HAL_DMA_IRQHandler+0x6d0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	bf14      	ite	ne
 8005872:	2301      	movne	r3, #1
 8005874:	2300      	moveq	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e02a      	b.n	80058d0 <HAL_DMA_IRQHandler+0x6e4>
 800587a:	bf00      	nop
 800587c:	40020010 	.word	0x40020010
 8005880:	40020028 	.word	0x40020028
 8005884:	40020040 	.word	0x40020040
 8005888:	40020058 	.word	0x40020058
 800588c:	40020070 	.word	0x40020070
 8005890:	40020088 	.word	0x40020088
 8005894:	400200a0 	.word	0x400200a0
 8005898:	400200b8 	.word	0x400200b8
 800589c:	40020410 	.word	0x40020410
 80058a0:	40020428 	.word	0x40020428
 80058a4:	40020440 	.word	0x40020440
 80058a8:	40020458 	.word	0x40020458
 80058ac:	40020470 	.word	0x40020470
 80058b0:	40020488 	.word	0x40020488
 80058b4:	400204a0 	.word	0x400204a0
 80058b8:	400204b8 	.word	0x400204b8
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8087 	beq.w	80059e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	2220      	movs	r2, #32
 80058e0:	409a      	lsls	r2, r3
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d139      	bne.n	8005966 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0216 	bic.w	r2, r2, #22
 8005900:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695a      	ldr	r2, [r3, #20]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005910:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <HAL_DMA_IRQHandler+0x736>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0208 	bic.w	r2, r2, #8
 8005930:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	223f      	movs	r2, #63	@ 0x3f
 800593c:	409a      	lsls	r2, r3
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 834a 	beq.w	8005ff0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
          }
          return;
 8005964:	e344      	b.n	8005ff0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d018      	beq.n	80059a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d108      	bne.n	8005994 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005986:	2b00      	cmp	r3, #0
 8005988:	d02c      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
 8005992:	e027      	b.n	80059e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d023      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
 80059a4:	e01e      	b.n	80059e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10f      	bne.n	80059d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0210 	bic.w	r2, r2, #16
 80059c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8306 	beq.w	8005ffa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8088 	beq.w	8005b0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2204      	movs	r2, #4
 8005a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a7a      	ldr	r2, [pc, #488]	@ (8005bf4 <HAL_DMA_IRQHandler+0xa08>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d04a      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a79      	ldr	r2, [pc, #484]	@ (8005bf8 <HAL_DMA_IRQHandler+0xa0c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d045      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a77      	ldr	r2, [pc, #476]	@ (8005bfc <HAL_DMA_IRQHandler+0xa10>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d040      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a76      	ldr	r2, [pc, #472]	@ (8005c00 <HAL_DMA_IRQHandler+0xa14>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d03b      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a74      	ldr	r2, [pc, #464]	@ (8005c04 <HAL_DMA_IRQHandler+0xa18>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d036      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a73      	ldr	r2, [pc, #460]	@ (8005c08 <HAL_DMA_IRQHandler+0xa1c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d031      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a71      	ldr	r2, [pc, #452]	@ (8005c0c <HAL_DMA_IRQHandler+0xa20>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02c      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a70      	ldr	r2, [pc, #448]	@ (8005c10 <HAL_DMA_IRQHandler+0xa24>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d027      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a6e      	ldr	r2, [pc, #440]	@ (8005c14 <HAL_DMA_IRQHandler+0xa28>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d022      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a6d      	ldr	r2, [pc, #436]	@ (8005c18 <HAL_DMA_IRQHandler+0xa2c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d01d      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a6b      	ldr	r2, [pc, #428]	@ (8005c1c <HAL_DMA_IRQHandler+0xa30>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a6a      	ldr	r2, [pc, #424]	@ (8005c20 <HAL_DMA_IRQHandler+0xa34>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a68      	ldr	r2, [pc, #416]	@ (8005c24 <HAL_DMA_IRQHandler+0xa38>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a67      	ldr	r2, [pc, #412]	@ (8005c28 <HAL_DMA_IRQHandler+0xa3c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a65      	ldr	r2, [pc, #404]	@ (8005c2c <HAL_DMA_IRQHandler+0xa40>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_DMA_IRQHandler+0x8b8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a64      	ldr	r2, [pc, #400]	@ (8005c30 <HAL_DMA_IRQHandler+0xa44>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d108      	bne.n	8005ab6 <HAL_DMA_IRQHandler+0x8ca>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e007      	b.n	8005ac6 <HAL_DMA_IRQHandler+0x8da>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d307      	bcc.n	8005ae2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f2      	bne.n	8005ac6 <HAL_DMA_IRQHandler+0x8da>
 8005ae0:	e000      	b.n	8005ae4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ae2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2203      	movs	r2, #3
 8005af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005afa:	e003      	b.n	8005b04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8272 	beq.w	8005ffa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	4798      	blx	r3
 8005b1e:	e26c      	b.n	8005ffa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a43      	ldr	r2, [pc, #268]	@ (8005c34 <HAL_DMA_IRQHandler+0xa48>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d022      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x984>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a42      	ldr	r2, [pc, #264]	@ (8005c38 <HAL_DMA_IRQHandler+0xa4c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d01d      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x984>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a40      	ldr	r2, [pc, #256]	@ (8005c3c <HAL_DMA_IRQHandler+0xa50>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d018      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x984>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a3f      	ldr	r2, [pc, #252]	@ (8005c40 <HAL_DMA_IRQHandler+0xa54>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x984>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3d      	ldr	r2, [pc, #244]	@ (8005c44 <HAL_DMA_IRQHandler+0xa58>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00e      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x984>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a3c      	ldr	r2, [pc, #240]	@ (8005c48 <HAL_DMA_IRQHandler+0xa5c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d009      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x984>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a3a      	ldr	r2, [pc, #232]	@ (8005c4c <HAL_DMA_IRQHandler+0xa60>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d004      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x984>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a39      	ldr	r2, [pc, #228]	@ (8005c50 <HAL_DMA_IRQHandler+0xa64>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d101      	bne.n	8005b74 <HAL_DMA_IRQHandler+0x988>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <HAL_DMA_IRQHandler+0x98a>
 8005b74:	2300      	movs	r3, #0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 823f 	beq.w	8005ffa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80cd 	beq.w	8005d34 <HAL_DMA_IRQHandler+0xb48>
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80c7 	beq.w	8005d34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2204      	movs	r2, #4
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d049      	beq.n	8005c54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8210 	beq.w	8005ff4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bdc:	e20a      	b.n	8005ff4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8206 	beq.w	8005ff4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bf0:	e200      	b.n	8005ff4 <HAL_DMA_IRQHandler+0xe08>
 8005bf2:	bf00      	nop
 8005bf4:	40020010 	.word	0x40020010
 8005bf8:	40020028 	.word	0x40020028
 8005bfc:	40020040 	.word	0x40020040
 8005c00:	40020058 	.word	0x40020058
 8005c04:	40020070 	.word	0x40020070
 8005c08:	40020088 	.word	0x40020088
 8005c0c:	400200a0 	.word	0x400200a0
 8005c10:	400200b8 	.word	0x400200b8
 8005c14:	40020410 	.word	0x40020410
 8005c18:	40020428 	.word	0x40020428
 8005c1c:	40020440 	.word	0x40020440
 8005c20:	40020458 	.word	0x40020458
 8005c24:	40020470 	.word	0x40020470
 8005c28:	40020488 	.word	0x40020488
 8005c2c:	400204a0 	.word	0x400204a0
 8005c30:	400204b8 	.word	0x400204b8
 8005c34:	58025408 	.word	0x58025408
 8005c38:	5802541c 	.word	0x5802541c
 8005c3c:	58025430 	.word	0x58025430
 8005c40:	58025444 	.word	0x58025444
 8005c44:	58025458 	.word	0x58025458
 8005c48:	5802546c 	.word	0x5802546c
 8005c4c:	58025480 	.word	0x58025480
 8005c50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d160      	bne.n	8005d20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a7f      	ldr	r2, [pc, #508]	@ (8005e60 <HAL_DMA_IRQHandler+0xc74>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d04a      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a7d      	ldr	r2, [pc, #500]	@ (8005e64 <HAL_DMA_IRQHandler+0xc78>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d045      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a7c      	ldr	r2, [pc, #496]	@ (8005e68 <HAL_DMA_IRQHandler+0xc7c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d040      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a7a      	ldr	r2, [pc, #488]	@ (8005e6c <HAL_DMA_IRQHandler+0xc80>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d03b      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a79      	ldr	r2, [pc, #484]	@ (8005e70 <HAL_DMA_IRQHandler+0xc84>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d036      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a77      	ldr	r2, [pc, #476]	@ (8005e74 <HAL_DMA_IRQHandler+0xc88>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d031      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a76      	ldr	r2, [pc, #472]	@ (8005e78 <HAL_DMA_IRQHandler+0xc8c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d02c      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a74      	ldr	r2, [pc, #464]	@ (8005e7c <HAL_DMA_IRQHandler+0xc90>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d027      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a73      	ldr	r2, [pc, #460]	@ (8005e80 <HAL_DMA_IRQHandler+0xc94>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d022      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a71      	ldr	r2, [pc, #452]	@ (8005e84 <HAL_DMA_IRQHandler+0xc98>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a70      	ldr	r2, [pc, #448]	@ (8005e88 <HAL_DMA_IRQHandler+0xc9c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d018      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e8c <HAL_DMA_IRQHandler+0xca0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a6d      	ldr	r2, [pc, #436]	@ (8005e90 <HAL_DMA_IRQHandler+0xca4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a6b      	ldr	r2, [pc, #428]	@ (8005e94 <HAL_DMA_IRQHandler+0xca8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a6a      	ldr	r2, [pc, #424]	@ (8005e98 <HAL_DMA_IRQHandler+0xcac>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xb12>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a68      	ldr	r2, [pc, #416]	@ (8005e9c <HAL_DMA_IRQHandler+0xcb0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d108      	bne.n	8005d10 <HAL_DMA_IRQHandler+0xb24>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0208 	bic.w	r2, r2, #8
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e007      	b.n	8005d20 <HAL_DMA_IRQHandler+0xb34>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0204 	bic.w	r2, r2, #4
 8005d1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8165 	beq.w	8005ff4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d32:	e15f      	b.n	8005ff4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	409a      	lsls	r2, r3
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80c5 	beq.w	8005ed4 <HAL_DMA_IRQHandler+0xce8>
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 80bf 	beq.w	8005ed4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	2202      	movs	r2, #2
 8005d60:	409a      	lsls	r2, r3
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d018      	beq.n	8005da2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 813a 	beq.w	8005ff8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d8c:	e134      	b.n	8005ff8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8130 	beq.w	8005ff8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005da0:	e12a      	b.n	8005ff8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f040 8089 	bne.w	8005ec0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2b      	ldr	r2, [pc, #172]	@ (8005e60 <HAL_DMA_IRQHandler+0xc74>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d04a      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a29      	ldr	r2, [pc, #164]	@ (8005e64 <HAL_DMA_IRQHandler+0xc78>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d045      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a28      	ldr	r2, [pc, #160]	@ (8005e68 <HAL_DMA_IRQHandler+0xc7c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d040      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a26      	ldr	r2, [pc, #152]	@ (8005e6c <HAL_DMA_IRQHandler+0xc80>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d03b      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a25      	ldr	r2, [pc, #148]	@ (8005e70 <HAL_DMA_IRQHandler+0xc84>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d036      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a23      	ldr	r2, [pc, #140]	@ (8005e74 <HAL_DMA_IRQHandler+0xc88>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d031      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a22      	ldr	r2, [pc, #136]	@ (8005e78 <HAL_DMA_IRQHandler+0xc8c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d02c      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a20      	ldr	r2, [pc, #128]	@ (8005e7c <HAL_DMA_IRQHandler+0xc90>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d027      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1f      	ldr	r2, [pc, #124]	@ (8005e80 <HAL_DMA_IRQHandler+0xc94>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d022      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e84 <HAL_DMA_IRQHandler+0xc98>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01d      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1c      	ldr	r2, [pc, #112]	@ (8005e88 <HAL_DMA_IRQHandler+0xc9c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d018      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1a      	ldr	r2, [pc, #104]	@ (8005e8c <HAL_DMA_IRQHandler+0xca0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a19      	ldr	r2, [pc, #100]	@ (8005e90 <HAL_DMA_IRQHandler+0xca4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00e      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a17      	ldr	r2, [pc, #92]	@ (8005e94 <HAL_DMA_IRQHandler+0xca8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a16      	ldr	r2, [pc, #88]	@ (8005e98 <HAL_DMA_IRQHandler+0xcac>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_DMA_IRQHandler+0xc62>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a14      	ldr	r2, [pc, #80]	@ (8005e9c <HAL_DMA_IRQHandler+0xcb0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d128      	bne.n	8005ea0 <HAL_DMA_IRQHandler+0xcb4>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0214 	bic.w	r2, r2, #20
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e027      	b.n	8005eb0 <HAL_DMA_IRQHandler+0xcc4>
 8005e60:	40020010 	.word	0x40020010
 8005e64:	40020028 	.word	0x40020028
 8005e68:	40020040 	.word	0x40020040
 8005e6c:	40020058 	.word	0x40020058
 8005e70:	40020070 	.word	0x40020070
 8005e74:	40020088 	.word	0x40020088
 8005e78:	400200a0 	.word	0x400200a0
 8005e7c:	400200b8 	.word	0x400200b8
 8005e80:	40020410 	.word	0x40020410
 8005e84:	40020428 	.word	0x40020428
 8005e88:	40020440 	.word	0x40020440
 8005e8c:	40020458 	.word	0x40020458
 8005e90:	40020470 	.word	0x40020470
 8005e94:	40020488 	.word	0x40020488
 8005e98:	400204a0 	.word	0x400204a0
 8005e9c:	400204b8 	.word	0x400204b8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 020a 	bic.w	r2, r2, #10
 8005eae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8097 	beq.w	8005ff8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ed2:	e091      	b.n	8005ff8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	2208      	movs	r2, #8
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8088 	beq.w	8005ffa <HAL_DMA_IRQHandler+0xe0e>
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8082 	beq.w	8005ffa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a41      	ldr	r2, [pc, #260]	@ (8006000 <HAL_DMA_IRQHandler+0xe14>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d04a      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a3f      	ldr	r2, [pc, #252]	@ (8006004 <HAL_DMA_IRQHandler+0xe18>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d045      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8006008 <HAL_DMA_IRQHandler+0xe1c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d040      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3c      	ldr	r2, [pc, #240]	@ (800600c <HAL_DMA_IRQHandler+0xe20>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d03b      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a3b      	ldr	r2, [pc, #236]	@ (8006010 <HAL_DMA_IRQHandler+0xe24>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d036      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a39      	ldr	r2, [pc, #228]	@ (8006014 <HAL_DMA_IRQHandler+0xe28>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d031      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a38      	ldr	r2, [pc, #224]	@ (8006018 <HAL_DMA_IRQHandler+0xe2c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d02c      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a36      	ldr	r2, [pc, #216]	@ (800601c <HAL_DMA_IRQHandler+0xe30>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d027      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a35      	ldr	r2, [pc, #212]	@ (8006020 <HAL_DMA_IRQHandler+0xe34>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a33      	ldr	r2, [pc, #204]	@ (8006024 <HAL_DMA_IRQHandler+0xe38>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a32      	ldr	r2, [pc, #200]	@ (8006028 <HAL_DMA_IRQHandler+0xe3c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a30      	ldr	r2, [pc, #192]	@ (800602c <HAL_DMA_IRQHandler+0xe40>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2f      	ldr	r2, [pc, #188]	@ (8006030 <HAL_DMA_IRQHandler+0xe44>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8006034 <HAL_DMA_IRQHandler+0xe48>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a2c      	ldr	r2, [pc, #176]	@ (8006038 <HAL_DMA_IRQHandler+0xe4c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xdaa>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2a      	ldr	r2, [pc, #168]	@ (800603c <HAL_DMA_IRQHandler+0xe50>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d108      	bne.n	8005fa8 <HAL_DMA_IRQHandler+0xdbc>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 021c 	bic.w	r2, r2, #28
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e007      	b.n	8005fb8 <HAL_DMA_IRQHandler+0xdcc>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 020e 	bic.w	r2, r2, #14
 8005fb6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3
 8005fee:	e004      	b.n	8005ffa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005ff0:	bf00      	nop
 8005ff2:	e002      	b.n	8005ffa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ff4:	bf00      	nop
 8005ff6:	e000      	b.n	8005ffa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ff8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ffa:	3728      	adds	r7, #40	@ 0x28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40020010 	.word	0x40020010
 8006004:	40020028 	.word	0x40020028
 8006008:	40020040 	.word	0x40020040
 800600c:	40020058 	.word	0x40020058
 8006010:	40020070 	.word	0x40020070
 8006014:	40020088 	.word	0x40020088
 8006018:	400200a0 	.word	0x400200a0
 800601c:	400200b8 	.word	0x400200b8
 8006020:	40020410 	.word	0x40020410
 8006024:	40020428 	.word	0x40020428
 8006028:	40020440 	.word	0x40020440
 800602c:	40020458 	.word	0x40020458
 8006030:	40020470 	.word	0x40020470
 8006034:	40020488 	.word	0x40020488
 8006038:	400204a0 	.word	0x400204a0
 800603c:	400204b8 	.word	0x400204b8

08006040 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800604e:	b2db      	uxtb	r3, r3
}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006086:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a7f      	ldr	r2, [pc, #508]	@ (8006290 <DMA_SetConfig+0x21c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d072      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a7d      	ldr	r2, [pc, #500]	@ (8006294 <DMA_SetConfig+0x220>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d06d      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a7c      	ldr	r2, [pc, #496]	@ (8006298 <DMA_SetConfig+0x224>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d068      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a7a      	ldr	r2, [pc, #488]	@ (800629c <DMA_SetConfig+0x228>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d063      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a79      	ldr	r2, [pc, #484]	@ (80062a0 <DMA_SetConfig+0x22c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d05e      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a77      	ldr	r2, [pc, #476]	@ (80062a4 <DMA_SetConfig+0x230>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d059      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a76      	ldr	r2, [pc, #472]	@ (80062a8 <DMA_SetConfig+0x234>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d054      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a74      	ldr	r2, [pc, #464]	@ (80062ac <DMA_SetConfig+0x238>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d04f      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a73      	ldr	r2, [pc, #460]	@ (80062b0 <DMA_SetConfig+0x23c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d04a      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a71      	ldr	r2, [pc, #452]	@ (80062b4 <DMA_SetConfig+0x240>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d045      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a70      	ldr	r2, [pc, #448]	@ (80062b8 <DMA_SetConfig+0x244>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d040      	beq.n	800617e <DMA_SetConfig+0x10a>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a6e      	ldr	r2, [pc, #440]	@ (80062bc <DMA_SetConfig+0x248>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d03b      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a6d      	ldr	r2, [pc, #436]	@ (80062c0 <DMA_SetConfig+0x24c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d036      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a6b      	ldr	r2, [pc, #428]	@ (80062c4 <DMA_SetConfig+0x250>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d031      	beq.n	800617e <DMA_SetConfig+0x10a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a6a      	ldr	r2, [pc, #424]	@ (80062c8 <DMA_SetConfig+0x254>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d02c      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a68      	ldr	r2, [pc, #416]	@ (80062cc <DMA_SetConfig+0x258>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d027      	beq.n	800617e <DMA_SetConfig+0x10a>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a67      	ldr	r2, [pc, #412]	@ (80062d0 <DMA_SetConfig+0x25c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d022      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a65      	ldr	r2, [pc, #404]	@ (80062d4 <DMA_SetConfig+0x260>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01d      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a64      	ldr	r2, [pc, #400]	@ (80062d8 <DMA_SetConfig+0x264>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d018      	beq.n	800617e <DMA_SetConfig+0x10a>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a62      	ldr	r2, [pc, #392]	@ (80062dc <DMA_SetConfig+0x268>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d013      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a61      	ldr	r2, [pc, #388]	@ (80062e0 <DMA_SetConfig+0x26c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00e      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a5f      	ldr	r2, [pc, #380]	@ (80062e4 <DMA_SetConfig+0x270>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d009      	beq.n	800617e <DMA_SetConfig+0x10a>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a5e      	ldr	r2, [pc, #376]	@ (80062e8 <DMA_SetConfig+0x274>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <DMA_SetConfig+0x10a>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a5c      	ldr	r2, [pc, #368]	@ (80062ec <DMA_SetConfig+0x278>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d101      	bne.n	8006182 <DMA_SetConfig+0x10e>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <DMA_SetConfig+0x110>
 8006182:	2300      	movs	r3, #0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00d      	beq.n	80061a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006190:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a39      	ldr	r2, [pc, #228]	@ (8006290 <DMA_SetConfig+0x21c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d04a      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a38      	ldr	r2, [pc, #224]	@ (8006294 <DMA_SetConfig+0x220>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d045      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a36      	ldr	r2, [pc, #216]	@ (8006298 <DMA_SetConfig+0x224>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d040      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a35      	ldr	r2, [pc, #212]	@ (800629c <DMA_SetConfig+0x228>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d03b      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a33      	ldr	r2, [pc, #204]	@ (80062a0 <DMA_SetConfig+0x22c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d036      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a32      	ldr	r2, [pc, #200]	@ (80062a4 <DMA_SetConfig+0x230>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d031      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a30      	ldr	r2, [pc, #192]	@ (80062a8 <DMA_SetConfig+0x234>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d02c      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2f      	ldr	r2, [pc, #188]	@ (80062ac <DMA_SetConfig+0x238>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d027      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a2d      	ldr	r2, [pc, #180]	@ (80062b0 <DMA_SetConfig+0x23c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d022      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a2c      	ldr	r2, [pc, #176]	@ (80062b4 <DMA_SetConfig+0x240>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d01d      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a2a      	ldr	r2, [pc, #168]	@ (80062b8 <DMA_SetConfig+0x244>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a29      	ldr	r2, [pc, #164]	@ (80062bc <DMA_SetConfig+0x248>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a27      	ldr	r2, [pc, #156]	@ (80062c0 <DMA_SetConfig+0x24c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a26      	ldr	r2, [pc, #152]	@ (80062c4 <DMA_SetConfig+0x250>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a24      	ldr	r2, [pc, #144]	@ (80062c8 <DMA_SetConfig+0x254>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <DMA_SetConfig+0x1d0>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a23      	ldr	r2, [pc, #140]	@ (80062cc <DMA_SetConfig+0x258>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d101      	bne.n	8006248 <DMA_SetConfig+0x1d4>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <DMA_SetConfig+0x1d6>
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d059      	beq.n	8006302 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	223f      	movs	r2, #63	@ 0x3f
 8006258:	409a      	lsls	r2, r3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800626c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b40      	cmp	r3, #64	@ 0x40
 800627c:	d138      	bne.n	80062f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800628e:	e086      	b.n	800639e <DMA_SetConfig+0x32a>
 8006290:	40020010 	.word	0x40020010
 8006294:	40020028 	.word	0x40020028
 8006298:	40020040 	.word	0x40020040
 800629c:	40020058 	.word	0x40020058
 80062a0:	40020070 	.word	0x40020070
 80062a4:	40020088 	.word	0x40020088
 80062a8:	400200a0 	.word	0x400200a0
 80062ac:	400200b8 	.word	0x400200b8
 80062b0:	40020410 	.word	0x40020410
 80062b4:	40020428 	.word	0x40020428
 80062b8:	40020440 	.word	0x40020440
 80062bc:	40020458 	.word	0x40020458
 80062c0:	40020470 	.word	0x40020470
 80062c4:	40020488 	.word	0x40020488
 80062c8:	400204a0 	.word	0x400204a0
 80062cc:	400204b8 	.word	0x400204b8
 80062d0:	58025408 	.word	0x58025408
 80062d4:	5802541c 	.word	0x5802541c
 80062d8:	58025430 	.word	0x58025430
 80062dc:	58025444 	.word	0x58025444
 80062e0:	58025458 	.word	0x58025458
 80062e4:	5802546c 	.word	0x5802546c
 80062e8:	58025480 	.word	0x58025480
 80062ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	60da      	str	r2, [r3, #12]
}
 8006300:	e04d      	b.n	800639e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a29      	ldr	r2, [pc, #164]	@ (80063ac <DMA_SetConfig+0x338>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d022      	beq.n	8006352 <DMA_SetConfig+0x2de>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a27      	ldr	r2, [pc, #156]	@ (80063b0 <DMA_SetConfig+0x33c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d01d      	beq.n	8006352 <DMA_SetConfig+0x2de>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a26      	ldr	r2, [pc, #152]	@ (80063b4 <DMA_SetConfig+0x340>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d018      	beq.n	8006352 <DMA_SetConfig+0x2de>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a24      	ldr	r2, [pc, #144]	@ (80063b8 <DMA_SetConfig+0x344>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <DMA_SetConfig+0x2de>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a23      	ldr	r2, [pc, #140]	@ (80063bc <DMA_SetConfig+0x348>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00e      	beq.n	8006352 <DMA_SetConfig+0x2de>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a21      	ldr	r2, [pc, #132]	@ (80063c0 <DMA_SetConfig+0x34c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d009      	beq.n	8006352 <DMA_SetConfig+0x2de>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a20      	ldr	r2, [pc, #128]	@ (80063c4 <DMA_SetConfig+0x350>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d004      	beq.n	8006352 <DMA_SetConfig+0x2de>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1e      	ldr	r2, [pc, #120]	@ (80063c8 <DMA_SetConfig+0x354>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d101      	bne.n	8006356 <DMA_SetConfig+0x2e2>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <DMA_SetConfig+0x2e4>
 8006356:	2300      	movs	r3, #0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d020      	beq.n	800639e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006360:	f003 031f 	and.w	r3, r3, #31
 8006364:	2201      	movs	r2, #1
 8006366:	409a      	lsls	r2, r3
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d108      	bne.n	800638e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	60da      	str	r2, [r3, #12]
}
 800638c:	e007      	b.n	800639e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	58025408 	.word	0x58025408
 80063b0:	5802541c 	.word	0x5802541c
 80063b4:	58025430 	.word	0x58025430
 80063b8:	58025444 	.word	0x58025444
 80063bc:	58025458 	.word	0x58025458
 80063c0:	5802546c 	.word	0x5802546c
 80063c4:	58025480 	.word	0x58025480
 80063c8:	58025494 	.word	0x58025494

080063cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a42      	ldr	r2, [pc, #264]	@ (80064e4 <DMA_CalcBaseAndBitshift+0x118>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d04a      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a41      	ldr	r2, [pc, #260]	@ (80064e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d045      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a3f      	ldr	r2, [pc, #252]	@ (80064ec <DMA_CalcBaseAndBitshift+0x120>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d040      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a3e      	ldr	r2, [pc, #248]	@ (80064f0 <DMA_CalcBaseAndBitshift+0x124>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d03b      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a3c      	ldr	r2, [pc, #240]	@ (80064f4 <DMA_CalcBaseAndBitshift+0x128>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d036      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a3b      	ldr	r2, [pc, #236]	@ (80064f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d031      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a39      	ldr	r2, [pc, #228]	@ (80064fc <DMA_CalcBaseAndBitshift+0x130>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d02c      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a38      	ldr	r2, [pc, #224]	@ (8006500 <DMA_CalcBaseAndBitshift+0x134>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d027      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a36      	ldr	r2, [pc, #216]	@ (8006504 <DMA_CalcBaseAndBitshift+0x138>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d022      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a35      	ldr	r2, [pc, #212]	@ (8006508 <DMA_CalcBaseAndBitshift+0x13c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d01d      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a33      	ldr	r2, [pc, #204]	@ (800650c <DMA_CalcBaseAndBitshift+0x140>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d018      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a32      	ldr	r2, [pc, #200]	@ (8006510 <DMA_CalcBaseAndBitshift+0x144>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a30      	ldr	r2, [pc, #192]	@ (8006514 <DMA_CalcBaseAndBitshift+0x148>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00e      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2f      	ldr	r2, [pc, #188]	@ (8006518 <DMA_CalcBaseAndBitshift+0x14c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d009      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a2d      	ldr	r2, [pc, #180]	@ (800651c <DMA_CalcBaseAndBitshift+0x150>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <DMA_CalcBaseAndBitshift+0xa8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2c      	ldr	r2, [pc, #176]	@ (8006520 <DMA_CalcBaseAndBitshift+0x154>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d101      	bne.n	8006478 <DMA_CalcBaseAndBitshift+0xac>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <DMA_CalcBaseAndBitshift+0xae>
 8006478:	2300      	movs	r3, #0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d024      	beq.n	80064c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	3b10      	subs	r3, #16
 8006486:	4a27      	ldr	r2, [pc, #156]	@ (8006524 <DMA_CalcBaseAndBitshift+0x158>)
 8006488:	fba2 2303 	umull	r2, r3, r2, r3
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	4a24      	ldr	r2, [pc, #144]	@ (8006528 <DMA_CalcBaseAndBitshift+0x15c>)
 8006498:	5cd3      	ldrb	r3, [r2, r3]
 800649a:	461a      	mov	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d908      	bls.n	80064b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	4b1f      	ldr	r3, [pc, #124]	@ (800652c <DMA_CalcBaseAndBitshift+0x160>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80064b6:	e00d      	b.n	80064d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	4b1b      	ldr	r3, [pc, #108]	@ (800652c <DMA_CalcBaseAndBitshift+0x160>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80064c6:	e005      	b.n	80064d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	40020010 	.word	0x40020010
 80064e8:	40020028 	.word	0x40020028
 80064ec:	40020040 	.word	0x40020040
 80064f0:	40020058 	.word	0x40020058
 80064f4:	40020070 	.word	0x40020070
 80064f8:	40020088 	.word	0x40020088
 80064fc:	400200a0 	.word	0x400200a0
 8006500:	400200b8 	.word	0x400200b8
 8006504:	40020410 	.word	0x40020410
 8006508:	40020428 	.word	0x40020428
 800650c:	40020440 	.word	0x40020440
 8006510:	40020458 	.word	0x40020458
 8006514:	40020470 	.word	0x40020470
 8006518:	40020488 	.word	0x40020488
 800651c:	400204a0 	.word	0x400204a0
 8006520:	400204b8 	.word	0x400204b8
 8006524:	aaaaaaab 	.word	0xaaaaaaab
 8006528:	08017b50 	.word	0x08017b50
 800652c:	fffffc00 	.word	0xfffffc00

08006530 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d120      	bne.n	8006586 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	2b03      	cmp	r3, #3
 800654a:	d858      	bhi.n	80065fe <DMA_CheckFifoParam+0xce>
 800654c:	a201      	add	r2, pc, #4	@ (adr r2, 8006554 <DMA_CheckFifoParam+0x24>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	08006565 	.word	0x08006565
 8006558:	08006577 	.word	0x08006577
 800655c:	08006565 	.word	0x08006565
 8006560:	080065ff 	.word	0x080065ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d048      	beq.n	8006602 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006574:	e045      	b.n	8006602 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800657e:	d142      	bne.n	8006606 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006584:	e03f      	b.n	8006606 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800658e:	d123      	bne.n	80065d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	2b03      	cmp	r3, #3
 8006596:	d838      	bhi.n	800660a <DMA_CheckFifoParam+0xda>
 8006598:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <DMA_CheckFifoParam+0x70>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065b1 	.word	0x080065b1
 80065a4:	080065b7 	.word	0x080065b7
 80065a8:	080065b1 	.word	0x080065b1
 80065ac:	080065c9 	.word	0x080065c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
        break;
 80065b4:	e030      	b.n	8006618 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d025      	beq.n	800660e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065c6:	e022      	b.n	800660e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80065d0:	d11f      	bne.n	8006612 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065d6:	e01c      	b.n	8006612 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d902      	bls.n	80065e6 <DMA_CheckFifoParam+0xb6>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d003      	beq.n	80065ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80065e4:	e018      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
        break;
 80065ea:	e015      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
    break;
 80065fc:	e00b      	b.n	8006616 <DMA_CheckFifoParam+0xe6>
        break;
 80065fe:	bf00      	nop
 8006600:	e00a      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 8006602:	bf00      	nop
 8006604:	e008      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 8006606:	bf00      	nop
 8006608:	e006      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 800660a:	bf00      	nop
 800660c:	e004      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 800660e:	bf00      	nop
 8006610:	e002      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
        break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <DMA_CheckFifoParam+0xe8>
    break;
 8006616:	bf00      	nop
    }
  }

  return status;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop

08006628 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a38      	ldr	r2, [pc, #224]	@ (800671c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d022      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a36      	ldr	r2, [pc, #216]	@ (8006720 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a35      	ldr	r2, [pc, #212]	@ (8006724 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a33      	ldr	r2, [pc, #204]	@ (8006728 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a32      	ldr	r2, [pc, #200]	@ (800672c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a30      	ldr	r2, [pc, #192]	@ (8006730 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a2f      	ldr	r2, [pc, #188]	@ (8006734 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a2d      	ldr	r2, [pc, #180]	@ (8006738 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d101      	bne.n	800668a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	3b08      	subs	r3, #8
 8006698:	4a28      	ldr	r2, [pc, #160]	@ (800673c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	091b      	lsrs	r3, r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4b26      	ldr	r3, [pc, #152]	@ (8006740 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	461a      	mov	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a24      	ldr	r2, [pc, #144]	@ (8006744 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80066b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2201      	movs	r2, #1
 80066be:	409a      	lsls	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80066c4:	e024      	b.n	8006710 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	3b10      	subs	r3, #16
 80066ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006748 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80066d0:	fba2 2303 	umull	r2, r3, r2, r3
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4a1c      	ldr	r2, [pc, #112]	@ (800674c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d806      	bhi.n	80066ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006750 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d902      	bls.n	80066ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3308      	adds	r3, #8
 80066ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4b18      	ldr	r3, [pc, #96]	@ (8006754 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a16      	ldr	r2, [pc, #88]	@ (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006700:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2201      	movs	r2, #1
 800670a:	409a      	lsls	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	58025408 	.word	0x58025408
 8006720:	5802541c 	.word	0x5802541c
 8006724:	58025430 	.word	0x58025430
 8006728:	58025444 	.word	0x58025444
 800672c:	58025458 	.word	0x58025458
 8006730:	5802546c 	.word	0x5802546c
 8006734:	58025480 	.word	0x58025480
 8006738:	58025494 	.word	0x58025494
 800673c:	cccccccd 	.word	0xcccccccd
 8006740:	16009600 	.word	0x16009600
 8006744:	58025880 	.word	0x58025880
 8006748:	aaaaaaab 	.word	0xaaaaaaab
 800674c:	400204b8 	.word	0x400204b8
 8006750:	4002040f 	.word	0x4002040f
 8006754:	10008200 	.word	0x10008200
 8006758:	40020880 	.word	0x40020880

0800675c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d04a      	beq.n	8006808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b08      	cmp	r3, #8
 8006776:	d847      	bhi.n	8006808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a25      	ldr	r2, [pc, #148]	@ (8006814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d022      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a24      	ldr	r2, [pc, #144]	@ (8006818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d01d      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a22      	ldr	r2, [pc, #136]	@ (800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d018      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a21      	ldr	r2, [pc, #132]	@ (8006820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d013      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00e      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d009      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	@ (800682c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d101      	bne.n	80067cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80067cc:	2300      	movs	r3, #0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4b17      	ldr	r3, [pc, #92]	@ (8006834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	461a      	mov	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a15      	ldr	r2, [pc, #84]	@ (8006838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80067e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80067e6:	e009      	b.n	80067fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4b14      	ldr	r3, [pc, #80]	@ (800683c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	461a      	mov	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a11      	ldr	r2, [pc, #68]	@ (8006840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80067fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3b01      	subs	r3, #1
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	58025408 	.word	0x58025408
 8006818:	5802541c 	.word	0x5802541c
 800681c:	58025430 	.word	0x58025430
 8006820:	58025444 	.word	0x58025444
 8006824:	58025458 	.word	0x58025458
 8006828:	5802546c 	.word	0x5802546c
 800682c:	58025480 	.word	0x58025480
 8006830:	58025494 	.word	0x58025494
 8006834:	1600963f 	.word	0x1600963f
 8006838:	58025940 	.word	0x58025940
 800683c:	1000823f 	.word	0x1000823f
 8006840:	40020940 	.word	0x40020940

08006844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006844:	b480      	push	{r7}
 8006846:	b089      	sub	sp, #36	@ 0x24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006852:	4b89      	ldr	r3, [pc, #548]	@ (8006a78 <HAL_GPIO_Init+0x234>)
 8006854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006856:	e194      	b.n	8006b82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	2101      	movs	r1, #1
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	fa01 f303 	lsl.w	r3, r1, r3
 8006864:	4013      	ands	r3, r2
 8006866:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8186 	beq.w	8006b7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	2b01      	cmp	r3, #1
 800687a:	d005      	beq.n	8006888 <HAL_GPIO_Init+0x44>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d130      	bne.n	80068ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	2203      	movs	r2, #3
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	43db      	mvns	r3, r3
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068be:	2201      	movs	r2, #1
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	fa02 f303 	lsl.w	r3, r2, r3
 80068c6:	43db      	mvns	r3, r3
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4013      	ands	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	f003 0201 	and.w	r2, r3, #1
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d017      	beq.n	8006926 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	2203      	movs	r2, #3
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	43db      	mvns	r3, r3
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	4013      	ands	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	4313      	orrs	r3, r2
 800691e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d123      	bne.n	800697a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	08da      	lsrs	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3208      	adds	r2, #8
 800693a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	220f      	movs	r2, #15
 800694a:	fa02 f303 	lsl.w	r3, r2, r3
 800694e:	43db      	mvns	r3, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4013      	ands	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	fa02 f303 	lsl.w	r3, r2, r3
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	4313      	orrs	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	08da      	lsrs	r2, r3, #3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3208      	adds	r2, #8
 8006974:	69b9      	ldr	r1, [r7, #24]
 8006976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	2203      	movs	r2, #3
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	4013      	ands	r3, r2
 8006990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 0203 	and.w	r2, r3, #3
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80e0 	beq.w	8006b7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069bc:	4b2f      	ldr	r3, [pc, #188]	@ (8006a7c <HAL_GPIO_Init+0x238>)
 80069be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069c2:	4a2e      	ldr	r2, [pc, #184]	@ (8006a7c <HAL_GPIO_Init+0x238>)
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80069cc:	4b2b      	ldr	r3, [pc, #172]	@ (8006a7c <HAL_GPIO_Init+0x238>)
 80069ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069da:	4a29      	ldr	r2, [pc, #164]	@ (8006a80 <HAL_GPIO_Init+0x23c>)
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	089b      	lsrs	r3, r3, #2
 80069e0:	3302      	adds	r3, #2
 80069e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	220f      	movs	r2, #15
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	43db      	mvns	r3, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4013      	ands	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a20      	ldr	r2, [pc, #128]	@ (8006a84 <HAL_GPIO_Init+0x240>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d052      	beq.n	8006aac <HAL_GPIO_Init+0x268>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1f      	ldr	r2, [pc, #124]	@ (8006a88 <HAL_GPIO_Init+0x244>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d031      	beq.n	8006a72 <HAL_GPIO_Init+0x22e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a1e      	ldr	r2, [pc, #120]	@ (8006a8c <HAL_GPIO_Init+0x248>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d02b      	beq.n	8006a6e <HAL_GPIO_Init+0x22a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a1d      	ldr	r2, [pc, #116]	@ (8006a90 <HAL_GPIO_Init+0x24c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d025      	beq.n	8006a6a <HAL_GPIO_Init+0x226>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1c      	ldr	r2, [pc, #112]	@ (8006a94 <HAL_GPIO_Init+0x250>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01f      	beq.n	8006a66 <HAL_GPIO_Init+0x222>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1b      	ldr	r2, [pc, #108]	@ (8006a98 <HAL_GPIO_Init+0x254>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d019      	beq.n	8006a62 <HAL_GPIO_Init+0x21e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a1a      	ldr	r2, [pc, #104]	@ (8006a9c <HAL_GPIO_Init+0x258>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <HAL_GPIO_Init+0x21a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a19      	ldr	r2, [pc, #100]	@ (8006aa0 <HAL_GPIO_Init+0x25c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00d      	beq.n	8006a5a <HAL_GPIO_Init+0x216>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a18      	ldr	r2, [pc, #96]	@ (8006aa4 <HAL_GPIO_Init+0x260>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d007      	beq.n	8006a56 <HAL_GPIO_Init+0x212>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a17      	ldr	r2, [pc, #92]	@ (8006aa8 <HAL_GPIO_Init+0x264>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d101      	bne.n	8006a52 <HAL_GPIO_Init+0x20e>
 8006a4e:	2309      	movs	r3, #9
 8006a50:	e02d      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a52:	230a      	movs	r3, #10
 8006a54:	e02b      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a56:	2308      	movs	r3, #8
 8006a58:	e029      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a5a:	2307      	movs	r3, #7
 8006a5c:	e027      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a5e:	2306      	movs	r3, #6
 8006a60:	e025      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a62:	2305      	movs	r3, #5
 8006a64:	e023      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a66:	2304      	movs	r3, #4
 8006a68:	e021      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e01f      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e01d      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e01b      	b.n	8006aae <HAL_GPIO_Init+0x26a>
 8006a76:	bf00      	nop
 8006a78:	58000080 	.word	0x58000080
 8006a7c:	58024400 	.word	0x58024400
 8006a80:	58000400 	.word	0x58000400
 8006a84:	58020000 	.word	0x58020000
 8006a88:	58020400 	.word	0x58020400
 8006a8c:	58020800 	.word	0x58020800
 8006a90:	58020c00 	.word	0x58020c00
 8006a94:	58021000 	.word	0x58021000
 8006a98:	58021400 	.word	0x58021400
 8006a9c:	58021800 	.word	0x58021800
 8006aa0:	58021c00 	.word	0x58021c00
 8006aa4:	58022000 	.word	0x58022000
 8006aa8:	58022400 	.word	0x58022400
 8006aac:	2300      	movs	r3, #0
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	f002 0203 	and.w	r2, r2, #3
 8006ab4:	0092      	lsls	r2, r2, #2
 8006ab6:	4093      	lsls	r3, r2
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006abe:	4938      	ldr	r1, [pc, #224]	@ (8006ba0 <HAL_GPIO_Init+0x35c>)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	089b      	lsrs	r3, r3, #2
 8006ac4:	3302      	adds	r3, #2
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	4013      	ands	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006af2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006b20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4013      	ands	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f47f ae63 	bne.w	8006858 <HAL_GPIO_Init+0x14>
  }
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	3724      	adds	r7, #36	@ 0x24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	58000400 	.word	0x58000400

08006ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	807b      	strh	r3, [r7, #2]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bb4:	787b      	ldrb	r3, [r7, #1]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bba:	887a      	ldrh	r2, [r7, #2]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006bc0:	e003      	b.n	8006bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006bc2:	887b      	ldrh	r3, [r7, #2]
 8006bc4:	041a      	lsls	r2, r3, #16
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	619a      	str	r2, [r3, #24]
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e08b      	b.n	8006d02 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fa fc56 	bl	80014b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2224      	movs	r2, #36	@ 0x24
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006c28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d107      	bne.n	8006c52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c4e:	609a      	str	r2, [r3, #8]
 8006c50:	e006      	b.n	8006c60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006c5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d108      	bne.n	8006c7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c76:	605a      	str	r2, [r3, #4]
 8006c78:	e007      	b.n	8006c8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6859      	ldr	r1, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b1d      	ldr	r3, [pc, #116]	@ (8006d0c <HAL_I2C_Init+0x134>)
 8006c96:	430b      	orrs	r3, r1
 8006c98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ca8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691a      	ldr	r2, [r3, #16]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1a      	ldr	r2, [r3, #32]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	02008000 	.word	0x02008000

08006d10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	817b      	strh	r3, [r7, #10]
 8006d20:	4613      	mov	r3, r2
 8006d22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	f040 80fd 	bne.w	8006f2c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_I2C_Master_Transmit+0x30>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e0f6      	b.n	8006f2e <HAL_I2C_Master_Transmit+0x21e>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d48:	f7fb fab0 	bl	80022ac <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	2319      	movs	r3, #25
 8006d54:	2201      	movs	r2, #1
 8006d56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f002 f89e 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e0e1      	b.n	8006f2e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2221      	movs	r2, #33	@ 0x21
 8006d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2210      	movs	r2, #16
 8006d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	893a      	ldrh	r2, [r7, #8]
 8006d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2bff      	cmp	r3, #255	@ 0xff
 8006d9a:	d906      	bls.n	8006daa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	22ff      	movs	r2, #255	@ 0xff
 8006da0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006da2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e007      	b.n	8006dba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006db4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006db8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d024      	beq.n	8006e0c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	781a      	ldrb	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	3301      	adds	r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	8979      	ldrh	r1, [r7, #10]
 8006dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8006f38 <HAL_I2C_Master_Transmit+0x228>)
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f002 fa0d 	bl	8009224 <I2C_TransferConfig>
 8006e0a:	e066      	b.n	8006eda <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	8979      	ldrh	r1, [r7, #10]
 8006e14:	4b48      	ldr	r3, [pc, #288]	@ (8006f38 <HAL_I2C_Master_Transmit+0x228>)
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f002 fa02 	bl	8009224 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006e20:	e05b      	b.n	8006eda <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	6a39      	ldr	r1, [r7, #32]
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f002 f891 	bl	8008f4e <I2C_WaitOnTXISFlagUntilTimeout>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e07b      	b.n	8006f2e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d034      	beq.n	8006eda <HAL_I2C_Master_Transmit+0x1ca>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d130      	bne.n	8006eda <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2180      	movs	r1, #128	@ 0x80
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f002 f80a 	bl	8008e9c <I2C_WaitOnFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e04d      	b.n	8006f2e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2bff      	cmp	r3, #255	@ 0xff
 8006e9a:	d90e      	bls.n	8006eba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	22ff      	movs	r2, #255	@ 0xff
 8006ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	8979      	ldrh	r1, [r7, #10]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f002 f9b6 	bl	8009224 <I2C_TransferConfig>
 8006eb8:	e00f      	b.n	8006eda <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	8979      	ldrh	r1, [r7, #10]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f002 f9a5 	bl	8009224 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d19e      	bne.n	8006e22 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	6a39      	ldr	r1, [r7, #32]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f002 f877 	bl	8008fdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e01a      	b.n	8006f2e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2220      	movs	r2, #32
 8006efe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <HAL_I2C_Master_Transmit+0x22c>)
 8006f0c:	400b      	ands	r3, r1
 8006f0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e000      	b.n	8006f2e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006f2c:	2302      	movs	r3, #2
  }
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	80002000 	.word	0x80002000
 8006f3c:	fe00e800 	.word	0xfe00e800

08006f40 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	@ 0x28
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	607a      	str	r2, [r7, #4]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	817b      	strh	r3, [r7, #10]
 8006f50:	4613      	mov	r3, r2
 8006f52:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	f040 80ef 	bne.w	8007144 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f74:	d101      	bne.n	8006f7a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8006f76:	2302      	movs	r3, #2
 8006f78:	e0e5      	b.n	8007146 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_I2C_Master_Transmit_DMA+0x48>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e0de      	b.n	8007146 <HAL_I2C_Master_Transmit_DMA+0x206>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2221      	movs	r2, #33	@ 0x21
 8006f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2210      	movs	r2, #16
 8006f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	893a      	ldrh	r2, [r7, #8]
 8006fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a66      	ldr	r2, [pc, #408]	@ (8007150 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4a66      	ldr	r2, [pc, #408]	@ (8007154 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006fbc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2bff      	cmp	r3, #255	@ 0xff
 8006fc6:	d906      	bls.n	8006fd6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	22ff      	movs	r2, #255	@ 0xff
 8006fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006fce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fd2:	61fb      	str	r3, [r7, #28]
 8006fd4:	e007      	b.n	8006fe6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006fe0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006fe4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d01a      	beq.n	8007024 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff2:	781a      	ldrb	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007008:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007028:	2b00      	cmp	r3, #0
 800702a:	d074      	beq.n	8007116 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007030:	2b00      	cmp	r3, #0
 8007032:	d022      	beq.n	800707a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	4a47      	ldr	r2, [pc, #284]	@ (8007158 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800703a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007040:	4a46      	ldr	r2, [pc, #280]	@ (800715c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007042:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007048:	2200      	movs	r2, #0
 800704a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	2200      	movs	r2, #0
 8007052:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007064:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800706a:	f7fd f8f1 	bl	8004250 <HAL_DMA_Start_IT>
 800706e:	4603      	mov	r3, r0
 8007070:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d13a      	bne.n	80070ee <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007078:	e013      	b.n	80070a2 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2220      	movs	r2, #32
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e051      	b.n	8007146 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	3301      	adds	r3, #1
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	8979      	ldrh	r1, [r7, #10]
 80070ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007160 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f002 f8b5 	bl	8009224 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80070d4:	2110      	movs	r1, #16
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f002 f8d6 	bl	8009288 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e028      	b.n	8007140 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007102:	f043 0210 	orr.w	r2, r3, #16
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e017      	b.n	8007146 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4a12      	ldr	r2, [pc, #72]	@ (8007164 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800711a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	8979      	ldrh	r1, [r7, #10]
 8007122:	4b0f      	ldr	r3, [pc, #60]	@ (8007160 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f002 f87a 	bl	8009224 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007138:	2101      	movs	r1, #1
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f002 f8a4 	bl	8009288 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	ffff0000 	.word	0xffff0000
 8007154:	0800779f 	.word	0x0800779f
 8007158:	08008b57 	.word	0x08008b57
 800715c:	08008bed 	.word	0x08008bed
 8007160:	80002000 	.word	0x80002000
 8007164:	0800732f 	.word	0x0800732f

08007168 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	68f9      	ldr	r1, [r7, #12]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
  }
}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d010      	beq.n	80071e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d0:	f043 0201 	orr.w	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	0a9b      	lsrs	r3, r3, #10
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d010      	beq.n	8007210 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	09db      	lsrs	r3, r3, #7
 80071f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	f043 0208 	orr.w	r2, r3, #8
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800720e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	0a5b      	lsrs	r3, r3, #9
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d010      	beq.n	800723e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	09db      	lsrs	r3, r3, #7
 8007220:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722c:	f043 0202 	orr.w	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800723c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007242:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 030b 	and.w	r3, r3, #11
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fb45 	bl	80088e0 <I2C_ITError>
  }
}
 8007256:	bf00      	nop
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	460b      	mov	r3, r1
 80072b8:	70fb      	strb	r3, [r7, #3]
 80072ba:	4613      	mov	r3, r2
 80072bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80072be:	bf00      	nop
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b088      	sub	sp, #32
 8007332:	af02      	add	r7, sp, #8
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <I2C_Master_ISR_IT+0x1e>
 8007348:	2302      	movs	r3, #2
 800734a:	e120      	b.n	800758e <I2C_Master_ISR_IT+0x260>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	091b      	lsrs	r3, r3, #4
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d013      	beq.n	8007388 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	091b      	lsrs	r3, r3, #4
 8007364:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00d      	beq.n	8007388 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2210      	movs	r2, #16
 8007372:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007378:	f043 0204 	orr.w	r2, r3, #4
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f001 fbc4 	bl	8008b0e <I2C_Flush_TXDR>
 8007386:	e0ed      	b.n	8007564 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d023      	beq.n	80073dc <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	089b      	lsrs	r3, r3, #2
 8007398:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01d      	beq.n	80073dc <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0304 	bic.w	r3, r3, #4
 80073a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073da:	e0c3      	b.n	8007564 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	099b      	lsrs	r3, r3, #6
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d12a      	bne.n	800743e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	085b      	lsrs	r3, r3, #1
 80073ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d024      	beq.n	800743e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01e      	beq.n	800743e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80ac 	beq.w	8007564 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800743c:	e092      	b.n	8007564 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	09db      	lsrs	r3, r3, #7
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d05d      	beq.n	8007506 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	099b      	lsrs	r3, r3, #6
 800744e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007452:	2b00      	cmp	r3, #0
 8007454:	d057      	beq.n	8007506 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d040      	beq.n	80074e2 <I2C_Master_ISR_IT+0x1b4>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007464:	2b00      	cmp	r3, #0
 8007466:	d13c      	bne.n	80074e2 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	b29b      	uxth	r3, r3
 8007470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007474:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800747a:	b29b      	uxth	r3, r3
 800747c:	2bff      	cmp	r3, #255	@ 0xff
 800747e:	d90e      	bls.n	800749e <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	22ff      	movs	r2, #255	@ 0xff
 8007484:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800748a:	b2da      	uxtb	r2, r3
 800748c:	8a79      	ldrh	r1, [r7, #18]
 800748e:	2300      	movs	r3, #0
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f001 fec4 	bl	8009224 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800749c:	e032      	b.n	8007504 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074b0:	d00b      	beq.n	80074ca <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074b6:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80074bc:	8a79      	ldrh	r1, [r7, #18]
 80074be:	2000      	movs	r0, #0
 80074c0:	9000      	str	r0, [sp, #0]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f001 feae 	bl	8009224 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074c8:	e01c      	b.n	8007504 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	8a79      	ldrh	r1, [r7, #18]
 80074d2:	2300      	movs	r3, #0
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 fea2 	bl	8009224 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074e0:	e010      	b.n	8007504 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074f0:	d003      	beq.n	80074fa <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fdde 	bl	80080b4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074f8:	e034      	b.n	8007564 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80074fa:	2140      	movs	r1, #64	@ 0x40
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f001 f9ef 	bl	80088e0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007502:	e02f      	b.n	8007564 <I2C_Master_ISR_IT+0x236>
 8007504:	e02e      	b.n	8007564 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	099b      	lsrs	r3, r3, #6
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d028      	beq.n	8007564 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	099b      	lsrs	r3, r3, #6
 8007516:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800751a:	2b00      	cmp	r3, #0
 800751c:	d022      	beq.n	8007564 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d119      	bne.n	800755c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007532:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007536:	d015      	beq.n	8007564 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007540:	d108      	bne.n	8007554 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	e007      	b.n	8007564 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fdad 	bl	80080b4 <I2C_ITMasterSeqCplt>
 800755a:	e003      	b.n	8007564 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800755c:	2140      	movs	r1, #64	@ 0x40
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f001 f9be 	bl	80088e0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fe34 	bl	80081ec <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b086      	sub	sp, #24
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <I2C_Slave_ISR_IT+0x24>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e0ed      	b.n	8007796 <I2C_Slave_ISR_IT+0x200>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80075da:	6939      	ldr	r1, [r7, #16]
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 fecf 	bl	8008380 <I2C_ITSlaveCplt>
 80075e2:	e0d3      	b.n	800778c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d04d      	beq.n	800768c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	091b      	lsrs	r3, r3, #4
 80075f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d047      	beq.n	800768c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d128      	bne.n	8007658 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b28      	cmp	r3, #40	@ 0x28
 8007610:	d108      	bne.n	8007624 <I2C_Slave_ISR_IT+0x8e>
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007618:	d104      	bne.n	8007624 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800761a:	6939      	ldr	r1, [r7, #16]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f001 f909 	bl	8008834 <I2C_ITListenCplt>
 8007622:	e032      	b.n	800768a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b29      	cmp	r3, #41	@ 0x29
 800762e:	d10e      	bne.n	800764e <I2C_Slave_ISR_IT+0xb8>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007636:	d00a      	beq.n	800764e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2210      	movs	r2, #16
 800763e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f001 fa64 	bl	8008b0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fd71 	bl	800812e <I2C_ITSlaveSeqCplt>
 800764c:	e01d      	b.n	800768a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2210      	movs	r2, #16
 8007654:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007656:	e096      	b.n	8007786 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2210      	movs	r2, #16
 800765e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007664:	f043 0204 	orr.w	r2, r3, #4
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <I2C_Slave_ISR_IT+0xe6>
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007678:	f040 8085 	bne.w	8007786 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007680:	4619      	mov	r1, r3
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f001 f92c 	bl	80088e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007688:	e07d      	b.n	8007786 <I2C_Slave_ISR_IT+0x1f0>
 800768a:	e07c      	b.n	8007786 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d030      	beq.n	80076fa <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	089b      	lsrs	r3, r3, #2
 800769c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02a      	beq.n	80076fa <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d018      	beq.n	80076e0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d14f      	bne.n	800778a <I2C_Slave_ISR_IT+0x1f4>
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076f0:	d04b      	beq.n	800778a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fd1b 	bl	800812e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80076f8:	e047      	b.n	800778a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	08db      	lsrs	r3, r3, #3
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007712:	6939      	ldr	r1, [r7, #16]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fc49 	bl	8007fac <I2C_ITAddrCplt>
 800771a:	e037      	b.n	800778c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	085b      	lsrs	r3, r3, #1
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d031      	beq.n	800778c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007730:	2b00      	cmp	r3, #0
 8007732:	d02b      	beq.n	800778c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d018      	beq.n	8007770 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007742:	781a      	ldrb	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800776e:	e00d      	b.n	800778c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007776:	d002      	beq.n	800777e <I2C_Slave_ISR_IT+0x1e8>
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d106      	bne.n	800778c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 fcd5 	bl	800812e <I2C_ITSlaveSeqCplt>
 8007784:	e002      	b.n	800778c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8007786:	bf00      	nop
 8007788:	e000      	b.n	800778c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800778a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b088      	sub	sp, #32
 80077a2:	af02      	add	r7, sp, #8
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <I2C_Master_ISR_DMA+0x1a>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e0e1      	b.n	800797c <I2C_Master_ISR_DMA+0x1de>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	091b      	lsrs	r3, r3, #4
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d017      	beq.n	80077fc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	091b      	lsrs	r3, r3, #4
 80077d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d011      	beq.n	80077fc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2210      	movs	r2, #16
 80077de:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e4:	f043 0204 	orr.w	r2, r3, #4
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80077ec:	2120      	movs	r1, #32
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f001 fd4a 	bl	8009288 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f001 f98a 	bl	8008b0e <I2C_Flush_TXDR>
 80077fa:	e0ba      	b.n	8007972 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	09db      	lsrs	r3, r3, #7
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d072      	beq.n	80078ee <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	099b      	lsrs	r3, r3, #6
 800780c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007810:	2b00      	cmp	r3, #0
 8007812:	d06c      	beq.n	80078ee <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007822:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d04e      	beq.n	80078cc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800783a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	2bff      	cmp	r3, #255	@ 0xff
 8007844:	d906      	bls.n	8007854 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	22ff      	movs	r2, #255	@ 0xff
 800784a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800784c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	e010      	b.n	8007876 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007862:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007866:	d003      	beq.n	8007870 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786c:	617b      	str	r3, [r7, #20]
 800786e:	e002      	b.n	8007876 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007870:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007874:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800787a:	b2da      	uxtb	r2, r3
 800787c:	8a79      	ldrh	r1, [r7, #18]
 800787e:	2300      	movs	r3, #0
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f001 fccd 	bl	8009224 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b22      	cmp	r3, #34	@ 0x22
 80078a6:	d108      	bne.n	80078ba <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80078b8:	e05b      	b.n	8007972 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80078ca:	e052      	b.n	8007972 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078da:	d003      	beq.n	80078e4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fbe9 	bl	80080b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80078e2:	e046      	b.n	8007972 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80078e4:	2140      	movs	r1, #64	@ 0x40
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 fffa 	bl	80088e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80078ec:	e041      	b.n	8007972 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	099b      	lsrs	r3, r3, #6
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d029      	beq.n	800794e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	099b      	lsrs	r3, r3, #6
 80078fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007902:	2b00      	cmp	r3, #0
 8007904:	d023      	beq.n	800794e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d119      	bne.n	8007944 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800791a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800791e:	d027      	beq.n	8007970 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007924:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007928:	d108      	bne.n	800793c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007938:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800793a:	e019      	b.n	8007970 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fbb9 	bl	80080b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007942:	e015      	b.n	8007970 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007944:	2140      	movs	r1, #64	@ 0x40
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 ffca 	bl	80088e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800794c:	e010      	b.n	8007970 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fc3f 	bl	80081ec <I2C_ITMasterCplt>
 800796e:	e000      	b.n	8007972 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007970:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007990:	4b92      	ldr	r3, [pc, #584]	@ (8007bdc <I2C_Mem_ISR_DMA+0x258>)
 8007992:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <I2C_Mem_ISR_DMA+0x1e>
 800799e:	2302      	movs	r3, #2
 80079a0:	e118      	b.n	8007bd4 <I2C_Mem_ISR_DMA+0x250>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	091b      	lsrs	r3, r3, #4
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d017      	beq.n	80079e6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	091b      	lsrs	r3, r3, #4
 80079ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d011      	beq.n	80079e6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2210      	movs	r2, #16
 80079c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ce:	f043 0204 	orr.w	r2, r3, #4
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80079d6:	2120      	movs	r1, #32
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 fc55 	bl	8009288 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f001 f895 	bl	8008b0e <I2C_Flush_TXDR>
 80079e4:	e0f1      	b.n	8007bca <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00f      	beq.n	8007a12 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a10:	e0db      	b.n	8007bca <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	09db      	lsrs	r3, r3, #7
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d060      	beq.n	8007ae0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	099b      	lsrs	r3, r3, #6
 8007a22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d05a      	beq.n	8007ae0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f001 fcaf 	bl	8009390 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007a32:	2110      	movs	r1, #16
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f001 fc27 	bl	8009288 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d048      	beq.n	8007ad6 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2bff      	cmp	r3, #255	@ 0xff
 8007a4c:	d910      	bls.n	8007a70 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	22ff      	movs	r2, #255	@ 0xff
 8007a52:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a58:	b299      	uxth	r1, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	2300      	movs	r3, #0
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f001 fbdb 	bl	8009224 <I2C_TransferConfig>
 8007a6e:	e011      	b.n	8007a94 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a7e:	b299      	uxth	r1, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	2300      	movs	r3, #0
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f001 fbc8 	bl	8009224 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b22      	cmp	r3, #34	@ 0x22
 8007ab0:	d108      	bne.n	8007ac4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ac0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007ac2:	e082      	b.n	8007bca <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ad2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007ad4:	e079      	b.n	8007bca <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ad6:	2140      	movs	r1, #64	@ 0x40
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 ff01 	bl	80088e0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007ade:	e074      	b.n	8007bca <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	099b      	lsrs	r3, r3, #6
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d05e      	beq.n	8007baa <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	099b      	lsrs	r3, r3, #6
 8007af0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d058      	beq.n	8007baa <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007af8:	2101      	movs	r1, #1
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f001 fc48 	bl	8009390 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007b00:	2110      	movs	r1, #16
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f001 fbc0 	bl	8009288 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b22      	cmp	r3, #34	@ 0x22
 8007b12:	d101      	bne.n	8007b18 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8007b14:	4b32      	ldr	r3, [pc, #200]	@ (8007be0 <I2C_Mem_ISR_DMA+0x25c>)
 8007b16:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2bff      	cmp	r3, #255	@ 0xff
 8007b20:	d910      	bls.n	8007b44 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	22ff      	movs	r2, #255	@ 0xff
 8007b26:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2c:	b299      	uxth	r1, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f001 fb71 	bl	8009224 <I2C_TransferConfig>
 8007b42:	e011      	b.n	8007b68 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b52:	b299      	uxth	r1, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f001 fb5e 	bl	8009224 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b22      	cmp	r3, #34	@ 0x22
 8007b84:	d108      	bne.n	8007b98 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b94:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b96:	e018      	b.n	8007bca <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ba6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ba8:	e00f      	b.n	8007bca <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	095b      	lsrs	r3, r3, #5
 8007bba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fb11 	bl	80081ec <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	80002000 	.word	0x80002000
 8007be0:	80002400 	.word	0x80002400

08007be4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d101      	bne.n	8007c08 <I2C_Slave_ISR_DMA+0x24>
 8007c04:	2302      	movs	r3, #2
 8007c06:	e1cc      	b.n	8007fa2 <I2C_Slave_ISR_DMA+0x3be>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	f003 0301 	and.w	r3, r3, #1
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	095b      	lsrs	r3, r3, #5
 8007c20:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fba8 	bl	8008380 <I2C_ITSlaveCplt>
 8007c30:	e1b2      	b.n	8007f98 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	091b      	lsrs	r3, r3, #4
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 819c 	beq.w	8007f78 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	091b      	lsrs	r3, r3, #4
 8007c44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8195 	beq.w	8007f78 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	0b9b      	lsrs	r3, r3, #14
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	0bdb      	lsrs	r3, r3, #15
 8007c5e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8181 	beq.w	8007f6a <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d07c      	beq.n	8007d6a <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	0bdb      	lsrs	r3, r3, #15
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d076      	beq.n	8007d6a <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a75      	ldr	r2, [pc, #468]	@ (8007e58 <I2C_Slave_ISR_DMA+0x274>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d059      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a73      	ldr	r2, [pc, #460]	@ (8007e5c <I2C_Slave_ISR_DMA+0x278>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d053      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a71      	ldr	r2, [pc, #452]	@ (8007e60 <I2C_Slave_ISR_DMA+0x27c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d04d      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a6f      	ldr	r2, [pc, #444]	@ (8007e64 <I2C_Slave_ISR_DMA+0x280>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d047      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8007e68 <I2C_Slave_ISR_DMA+0x284>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d041      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8007e6c <I2C_Slave_ISR_DMA+0x288>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d03b      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a69      	ldr	r2, [pc, #420]	@ (8007e70 <I2C_Slave_ISR_DMA+0x28c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d035      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a67      	ldr	r2, [pc, #412]	@ (8007e74 <I2C_Slave_ISR_DMA+0x290>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d02f      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a65      	ldr	r2, [pc, #404]	@ (8007e78 <I2C_Slave_ISR_DMA+0x294>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d029      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a63      	ldr	r2, [pc, #396]	@ (8007e7c <I2C_Slave_ISR_DMA+0x298>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d023      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a61      	ldr	r2, [pc, #388]	@ (8007e80 <I2C_Slave_ISR_DMA+0x29c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d01d      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a5f      	ldr	r2, [pc, #380]	@ (8007e84 <I2C_Slave_ISR_DMA+0x2a0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d017      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a5d      	ldr	r2, [pc, #372]	@ (8007e88 <I2C_Slave_ISR_DMA+0x2a4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d011      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8007e8c <I2C_Slave_ISR_DMA+0x2a8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00b      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a59      	ldr	r2, [pc, #356]	@ (8007e90 <I2C_Slave_ISR_DMA+0x2ac>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d005      	beq.n	8007d3c <I2C_Slave_ISR_DMA+0x158>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a57      	ldr	r2, [pc, #348]	@ (8007e94 <I2C_Slave_ISR_DMA+0x2b0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d109      	bne.n	8007d50 <I2C_Slave_ISR_DMA+0x16c>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	e008      	b.n	8007d62 <I2C_Slave_ISR_DMA+0x17e>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bf0c      	ite	eq
 8007d5c:	2301      	moveq	r3, #1
 8007d5e:	2300      	movne	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8007d66:	2301      	movs	r3, #1
 8007d68:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 809f 	beq.w	8007eb2 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	0b9b      	lsrs	r3, r3, #14
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 8098 	beq.w	8007eb2 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a33      	ldr	r2, [pc, #204]	@ (8007e58 <I2C_Slave_ISR_DMA+0x274>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d059      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a31      	ldr	r2, [pc, #196]	@ (8007e5c <I2C_Slave_ISR_DMA+0x278>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d053      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a2f      	ldr	r2, [pc, #188]	@ (8007e60 <I2C_Slave_ISR_DMA+0x27c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d04d      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2d      	ldr	r2, [pc, #180]	@ (8007e64 <I2C_Slave_ISR_DMA+0x280>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d047      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a2b      	ldr	r2, [pc, #172]	@ (8007e68 <I2C_Slave_ISR_DMA+0x284>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d041      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a29      	ldr	r2, [pc, #164]	@ (8007e6c <I2C_Slave_ISR_DMA+0x288>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d03b      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a27      	ldr	r2, [pc, #156]	@ (8007e70 <I2C_Slave_ISR_DMA+0x28c>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d035      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a25      	ldr	r2, [pc, #148]	@ (8007e74 <I2C_Slave_ISR_DMA+0x290>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d02f      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a23      	ldr	r2, [pc, #140]	@ (8007e78 <I2C_Slave_ISR_DMA+0x294>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d029      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a21      	ldr	r2, [pc, #132]	@ (8007e7c <I2C_Slave_ISR_DMA+0x298>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d023      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a1f      	ldr	r2, [pc, #124]	@ (8007e80 <I2C_Slave_ISR_DMA+0x29c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d01d      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e84 <I2C_Slave_ISR_DMA+0x2a0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d017      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a1b      	ldr	r2, [pc, #108]	@ (8007e88 <I2C_Slave_ISR_DMA+0x2a4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d011      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a19      	ldr	r2, [pc, #100]	@ (8007e8c <I2C_Slave_ISR_DMA+0x2a8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00b      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a17      	ldr	r2, [pc, #92]	@ (8007e90 <I2C_Slave_ISR_DMA+0x2ac>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d005      	beq.n	8007e42 <I2C_Slave_ISR_DMA+0x25e>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a15      	ldr	r2, [pc, #84]	@ (8007e94 <I2C_Slave_ISR_DMA+0x2b0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d12a      	bne.n	8007e98 <I2C_Slave_ISR_DMA+0x2b4>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bf0c      	ite	eq
 8007e4e:	2301      	moveq	r3, #1
 8007e50:	2300      	movne	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	e029      	b.n	8007eaa <I2C_Slave_ISR_DMA+0x2c6>
 8007e56:	bf00      	nop
 8007e58:	40020010 	.word	0x40020010
 8007e5c:	40020028 	.word	0x40020028
 8007e60:	40020040 	.word	0x40020040
 8007e64:	40020058 	.word	0x40020058
 8007e68:	40020070 	.word	0x40020070
 8007e6c:	40020088 	.word	0x40020088
 8007e70:	400200a0 	.word	0x400200a0
 8007e74:	400200b8 	.word	0x400200b8
 8007e78:	40020410 	.word	0x40020410
 8007e7c:	40020428 	.word	0x40020428
 8007e80:	40020440 	.word	0x40020440
 8007e84:	40020458 	.word	0x40020458
 8007e88:	40020470 	.word	0x40020470
 8007e8c:	40020488 	.word	0x40020488
 8007e90:	400204a0 	.word	0x400204a0
 8007e94:	400204b8 	.word	0x400204b8
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2301      	moveq	r3, #1
 8007ea6:	2300      	movne	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d128      	bne.n	8007f0a <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b28      	cmp	r3, #40	@ 0x28
 8007ec2:	d108      	bne.n	8007ed6 <I2C_Slave_ISR_DMA+0x2f2>
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eca:	d104      	bne.n	8007ed6 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fcb0 	bl	8008834 <I2C_ITListenCplt>
 8007ed4:	e048      	b.n	8007f68 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b29      	cmp	r3, #41	@ 0x29
 8007ee0:	d10e      	bne.n	8007f00 <I2C_Slave_ISR_DMA+0x31c>
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ee8:	d00a      	beq.n	8007f00 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2210      	movs	r2, #16
 8007ef0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 fe0b 	bl	8008b0e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f918 	bl	800812e <I2C_ITSlaveSeqCplt>
 8007efe:	e033      	b.n	8007f68 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2210      	movs	r2, #16
 8007f06:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f08:	e034      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2210      	movs	r2, #16
 8007f10:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f16:	f043 0204 	orr.w	r2, r3, #4
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f24:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <I2C_Slave_ISR_DMA+0x350>
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f32:	d11f      	bne.n	8007f74 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b21      	cmp	r3, #33	@ 0x21
 8007f38:	d002      	beq.n	8007f40 <I2C_Slave_ISR_DMA+0x35c>
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	2b29      	cmp	r3, #41	@ 0x29
 8007f3e:	d103      	bne.n	8007f48 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2221      	movs	r2, #33	@ 0x21
 8007f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f46:	e008      	b.n	8007f5a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b22      	cmp	r3, #34	@ 0x22
 8007f4c:	d002      	beq.n	8007f54 <I2C_Slave_ISR_DMA+0x370>
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f52:	d102      	bne.n	8007f5a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2222      	movs	r2, #34	@ 0x22
 8007f58:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fcbd 	bl	80088e0 <I2C_ITError>
      if (treatdmanack == 1U)
 8007f66:	e005      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x390>
 8007f68:	e004      	b.n	8007f74 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2210      	movs	r2, #16
 8007f70:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f72:	e011      	b.n	8007f98 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8007f74:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f76:	e00f      	b.n	8007f98 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	08db      	lsrs	r3, r3, #3
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d009      	beq.n	8007f98 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	08db      	lsrs	r3, r3, #3
 8007f88:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f80a 	bl	8007fac <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3720      	adds	r7, #32
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop

08007fac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fc2:	2b28      	cmp	r3, #40	@ 0x28
 8007fc4:	d16a      	bne.n	800809c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	0c1b      	lsrs	r3, r3, #16
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	0c1b      	lsrs	r3, r3, #16
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007fe4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ff2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008000:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d138      	bne.n	800807c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800800a:	897b      	ldrh	r3, [r7, #10]
 800800c:	09db      	lsrs	r3, r3, #7
 800800e:	b29a      	uxth	r2, r3
 8008010:	89bb      	ldrh	r3, [r7, #12]
 8008012:	4053      	eors	r3, r2
 8008014:	b29b      	uxth	r3, r3
 8008016:	f003 0306 	and.w	r3, r3, #6
 800801a:	2b00      	cmp	r3, #0
 800801c:	d11c      	bne.n	8008058 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800801e:	897b      	ldrh	r3, [r7, #10]
 8008020:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008030:	2b02      	cmp	r3, #2
 8008032:	d13b      	bne.n	80080ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2208      	movs	r2, #8
 8008040:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800804a:	89ba      	ldrh	r2, [r7, #12]
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff f92c 	bl	80072ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008056:	e029      	b.n	80080ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008058:	893b      	ldrh	r3, [r7, #8]
 800805a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800805c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 f995 	bl	8009390 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800806e:	89ba      	ldrh	r2, [r7, #12]
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff f91a 	bl	80072ae <HAL_I2C_AddrCallback>
}
 800807a:	e017      	b.n	80080ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800807c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f985 	bl	8009390 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800808e:	89ba      	ldrh	r2, [r7, #12]
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff f90a 	bl	80072ae <HAL_I2C_AddrCallback>
}
 800809a:	e007      	b.n	80080ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2208      	movs	r2, #8
 80080a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80080ac:	bf00      	nop
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b21      	cmp	r3, #33	@ 0x21
 80080ce:	d115      	bne.n	80080fc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2211      	movs	r2, #17
 80080dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80080e4:	2101      	movs	r1, #1
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 f952 	bl	8009390 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff f8b2 	bl	800725e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080fa:	e014      	b.n	8008126 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2212      	movs	r2, #18
 8008108:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008110:	2102      	movs	r1, #2
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 f93c 	bl	8009390 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff f8a6 	bl	8007272 <HAL_I2C_MasterRxCpltCallback>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	0b9b      	lsrs	r3, r3, #14
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d008      	beq.n	8008164 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e00d      	b.n	8008180 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	0bdb      	lsrs	r3, r3, #15
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800817e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b29      	cmp	r3, #41	@ 0x29
 800818a:	d112      	bne.n	80081b2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2228      	movs	r2, #40	@ 0x28
 8008190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2221      	movs	r2, #33	@ 0x21
 8008198:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800819a:	2101      	movs	r1, #1
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 f8f7 	bl	8009390 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7ff f86b 	bl	8007286 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80081b0:	e017      	b.n	80081e2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80081bc:	d111      	bne.n	80081e2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2228      	movs	r2, #40	@ 0x28
 80081c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2222      	movs	r2, #34	@ 0x22
 80081ca:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081cc:	2102      	movs	r1, #2
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 f8de 	bl	8009390 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff f85c 	bl	800729a <HAL_I2C_SlaveRxCpltCallback>
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2220      	movs	r2, #32
 8008200:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b21      	cmp	r3, #33	@ 0x21
 800820c:	d107      	bne.n	800821e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800820e:	2101      	movs	r1, #1
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 f8bd 	bl	8009390 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2211      	movs	r2, #17
 800821a:	631a      	str	r2, [r3, #48]	@ 0x30
 800821c:	e00c      	b.n	8008238 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b22      	cmp	r3, #34	@ 0x22
 8008228:	d106      	bne.n	8008238 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800822a:	2102      	movs	r1, #2
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f8af 	bl	8009390 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2212      	movs	r2, #18
 8008236:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6859      	ldr	r1, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	4b4d      	ldr	r3, [pc, #308]	@ (8008378 <I2C_ITMasterCplt+0x18c>)
 8008244:	400b      	ands	r3, r1
 8008246:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a4a      	ldr	r2, [pc, #296]	@ (800837c <I2C_ITMasterCplt+0x190>)
 8008252:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	091b      	lsrs	r3, r3, #4
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d009      	beq.n	8008274 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2210      	movs	r2, #16
 8008266:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800826c:	f043 0204 	orr.w	r2, r3, #4
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b60      	cmp	r3, #96	@ 0x60
 800827e:	d10b      	bne.n	8008298 <I2C_ITMasterCplt+0xac>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	089b      	lsrs	r3, r3, #2
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008292:	b2db      	uxtb	r3, r3
 8008294:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008296:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fc38 	bl	8008b0e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b60      	cmp	r3, #96	@ 0x60
 80082ae:	d002      	beq.n	80082b6 <I2C_ITMasterCplt+0xca>
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d006      	beq.n	80082c4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fb0f 	bl	80088e0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082c2:	e054      	b.n	800836e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b21      	cmp	r3, #33	@ 0x21
 80082ce:	d124      	bne.n	800831a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b40      	cmp	r3, #64	@ 0x40
 80082e8:	d10b      	bne.n	8008302 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7fe ffef 	bl	80072de <HAL_I2C_MemTxCpltCallback>
}
 8008300:	e035      	b.n	800836e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fe ffa3 	bl	800725e <HAL_I2C_MasterTxCpltCallback>
}
 8008318:	e029      	b.n	800836e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b22      	cmp	r3, #34	@ 0x22
 8008324:	d123      	bne.n	800836e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b40      	cmp	r3, #64	@ 0x40
 800833e:	d10b      	bne.n	8008358 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fe ffce 	bl	80072f2 <HAL_I2C_MemRxCpltCallback>
}
 8008356:	e00a      	b.n	800836e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7fe ff82 	bl	8007272 <HAL_I2C_MasterRxCpltCallback>
}
 800836e:	bf00      	nop
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	fe00e800 	.word	0xfe00e800
 800837c:	ffff0000 	.word	0xffff0000

08008380 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083a2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2220      	movs	r2, #32
 80083aa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80083ac:	7afb      	ldrb	r3, [r7, #11]
 80083ae:	2b21      	cmp	r3, #33	@ 0x21
 80083b0:	d002      	beq.n	80083b8 <I2C_ITSlaveCplt+0x38>
 80083b2:	7afb      	ldrb	r3, [r7, #11]
 80083b4:	2b29      	cmp	r3, #41	@ 0x29
 80083b6:	d108      	bne.n	80083ca <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80083b8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 ffe7 	bl	8009390 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2221      	movs	r2, #33	@ 0x21
 80083c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80083c8:	e019      	b.n	80083fe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	2b22      	cmp	r3, #34	@ 0x22
 80083ce:	d002      	beq.n	80083d6 <I2C_ITSlaveCplt+0x56>
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d4:	d108      	bne.n	80083e8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80083d6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 ffd8 	bl	8009390 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2222      	movs	r2, #34	@ 0x22
 80083e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80083e6:	e00a      	b.n	80083fe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	2b28      	cmp	r3, #40	@ 0x28
 80083ec:	d107      	bne.n	80083fe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80083ee:	f248 0103 	movw	r1, #32771	@ 0x8003
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 ffcc 	bl	8009390 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800840c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6859      	ldr	r1, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	4b80      	ldr	r3, [pc, #512]	@ (800861c <I2C_ITSlaveCplt+0x29c>)
 800841a:	400b      	ands	r3, r1
 800841c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fb75 	bl	8008b0e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	0b9b      	lsrs	r3, r3, #14
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d07a      	beq.n	8008526 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800843e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8112 	beq.w	800866e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a73      	ldr	r2, [pc, #460]	@ (8008620 <I2C_ITSlaveCplt+0x2a0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d059      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a71      	ldr	r2, [pc, #452]	@ (8008624 <I2C_ITSlaveCplt+0x2a4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d053      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a6f      	ldr	r2, [pc, #444]	@ (8008628 <I2C_ITSlaveCplt+0x2a8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d04d      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a6d      	ldr	r2, [pc, #436]	@ (800862c <I2C_ITSlaveCplt+0x2ac>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d047      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a6b      	ldr	r2, [pc, #428]	@ (8008630 <I2C_ITSlaveCplt+0x2b0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d041      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a69      	ldr	r2, [pc, #420]	@ (8008634 <I2C_ITSlaveCplt+0x2b4>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d03b      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a67      	ldr	r2, [pc, #412]	@ (8008638 <I2C_ITSlaveCplt+0x2b8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d035      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a65      	ldr	r2, [pc, #404]	@ (800863c <I2C_ITSlaveCplt+0x2bc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d02f      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a63      	ldr	r2, [pc, #396]	@ (8008640 <I2C_ITSlaveCplt+0x2c0>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d029      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a61      	ldr	r2, [pc, #388]	@ (8008644 <I2C_ITSlaveCplt+0x2c4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d023      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a5f      	ldr	r2, [pc, #380]	@ (8008648 <I2C_ITSlaveCplt+0x2c8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d01d      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a5d      	ldr	r2, [pc, #372]	@ (800864c <I2C_ITSlaveCplt+0x2cc>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d017      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a5b      	ldr	r2, [pc, #364]	@ (8008650 <I2C_ITSlaveCplt+0x2d0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d011      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a59      	ldr	r2, [pc, #356]	@ (8008654 <I2C_ITSlaveCplt+0x2d4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00b      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a57      	ldr	r2, [pc, #348]	@ (8008658 <I2C_ITSlaveCplt+0x2d8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d005      	beq.n	800850a <I2C_ITSlaveCplt+0x18a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a55      	ldr	r2, [pc, #340]	@ (800865c <I2C_ITSlaveCplt+0x2dc>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d105      	bne.n	8008516 <I2C_ITSlaveCplt+0x196>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	b29b      	uxth	r3, r3
 8008514:	e004      	b.n	8008520 <I2C_ITSlaveCplt+0x1a0>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	b29b      	uxth	r3, r3
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008524:	e0a3      	b.n	800866e <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	0bdb      	lsrs	r3, r3, #15
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 809d 	beq.w	800866e <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008542:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 8090 	beq.w	800866e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a32      	ldr	r2, [pc, #200]	@ (8008620 <I2C_ITSlaveCplt+0x2a0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d059      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a30      	ldr	r2, [pc, #192]	@ (8008624 <I2C_ITSlaveCplt+0x2a4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d053      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a2e      	ldr	r2, [pc, #184]	@ (8008628 <I2C_ITSlaveCplt+0x2a8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d04d      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a2c      	ldr	r2, [pc, #176]	@ (800862c <I2C_ITSlaveCplt+0x2ac>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d047      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2a      	ldr	r2, [pc, #168]	@ (8008630 <I2C_ITSlaveCplt+0x2b0>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d041      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a28      	ldr	r2, [pc, #160]	@ (8008634 <I2C_ITSlaveCplt+0x2b4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d03b      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a26      	ldr	r2, [pc, #152]	@ (8008638 <I2C_ITSlaveCplt+0x2b8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d035      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a24      	ldr	r2, [pc, #144]	@ (800863c <I2C_ITSlaveCplt+0x2bc>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d02f      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a22      	ldr	r2, [pc, #136]	@ (8008640 <I2C_ITSlaveCplt+0x2c0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d029      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a20      	ldr	r2, [pc, #128]	@ (8008644 <I2C_ITSlaveCplt+0x2c4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d023      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a1e      	ldr	r2, [pc, #120]	@ (8008648 <I2C_ITSlaveCplt+0x2c8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d01d      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1c      	ldr	r2, [pc, #112]	@ (800864c <I2C_ITSlaveCplt+0x2cc>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d017      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008650 <I2C_ITSlaveCplt+0x2d0>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d011      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a18      	ldr	r2, [pc, #96]	@ (8008654 <I2C_ITSlaveCplt+0x2d4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00b      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a16      	ldr	r2, [pc, #88]	@ (8008658 <I2C_ITSlaveCplt+0x2d8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d005      	beq.n	800860e <I2C_ITSlaveCplt+0x28e>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a14      	ldr	r2, [pc, #80]	@ (800865c <I2C_ITSlaveCplt+0x2dc>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d128      	bne.n	8008660 <I2C_ITSlaveCplt+0x2e0>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	b29b      	uxth	r3, r3
 8008618:	e027      	b.n	800866a <I2C_ITSlaveCplt+0x2ea>
 800861a:	bf00      	nop
 800861c:	fe00e800 	.word	0xfe00e800
 8008620:	40020010 	.word	0x40020010
 8008624:	40020028 	.word	0x40020028
 8008628:	40020040 	.word	0x40020040
 800862c:	40020058 	.word	0x40020058
 8008630:	40020070 	.word	0x40020070
 8008634:	40020088 	.word	0x40020088
 8008638:	400200a0 	.word	0x400200a0
 800863c:	400200b8 	.word	0x400200b8
 8008640:	40020410 	.word	0x40020410
 8008644:	40020428 	.word	0x40020428
 8008648:	40020440 	.word	0x40020440
 800864c:	40020458 	.word	0x40020458
 8008650:	40020470 	.word	0x40020470
 8008654:	40020488 	.word	0x40020488
 8008658:	400204a0 	.word	0x400204a0
 800865c:	400204b8 	.word	0x400204b8
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	b29b      	uxth	r3, r3
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	089b      	lsrs	r3, r3, #2
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d020      	beq.n	80086bc <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f023 0304 	bic.w	r3, r3, #4
 8008680:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00c      	beq.n	80086bc <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ca:	f043 0204 	orr.w	r2, r3, #4
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	091b      	lsrs	r3, r3, #4
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d04a      	beq.n	8008774 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	091b      	lsrs	r3, r3, #4
 80086e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d044      	beq.n	8008774 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d128      	bne.n	8008746 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b28      	cmp	r3, #40	@ 0x28
 80086fe:	d108      	bne.n	8008712 <I2C_ITSlaveCplt+0x392>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008706:	d104      	bne.n	8008712 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008708:	6979      	ldr	r1, [r7, #20]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f892 	bl	8008834 <I2C_ITListenCplt>
 8008710:	e030      	b.n	8008774 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b29      	cmp	r3, #41	@ 0x29
 800871c:	d10e      	bne.n	800873c <I2C_ITSlaveCplt+0x3bc>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008724:	d00a      	beq.n	800873c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2210      	movs	r2, #16
 800872c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f9ed 	bl	8008b0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff fcfa 	bl	800812e <I2C_ITSlaveSeqCplt>
 800873a:	e01b      	b.n	8008774 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2210      	movs	r2, #16
 8008742:	61da      	str	r2, [r3, #28]
 8008744:	e016      	b.n	8008774 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2210      	movs	r2, #16
 800874c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	f043 0204 	orr.w	r2, r3, #4
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <I2C_ITSlaveCplt+0x3e8>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008766:	d105      	bne.n	8008774 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8b6 	bl	80088e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f8a5 	bl	80088e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b28      	cmp	r3, #40	@ 0x28
 80087a0:	d141      	bne.n	8008826 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80087a2:	6979      	ldr	r1, [r7, #20]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f845 	bl	8008834 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087aa:	e03c      	b.n	8008826 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087b4:	d014      	beq.n	80087e0 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7ff fcb9 	bl	800812e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a1c      	ldr	r2, [pc, #112]	@ (8008830 <I2C_ITSlaveCplt+0x4b0>)
 80087c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7fe fd76 	bl	80072ca <HAL_I2C_ListenCpltCallback>
}
 80087de:	e022      	b.n	8008826 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b22      	cmp	r3, #34	@ 0x22
 80087ea:	d10e      	bne.n	800880a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fe fd49 	bl	800729a <HAL_I2C_SlaveRxCpltCallback>
}
 8008808:	e00d      	b.n	8008826 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fe fd30 	bl	8007286 <HAL_I2C_SlaveTxCpltCallback>
}
 8008826:	bf00      	nop
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	ffff0000 	.word	0xffff0000

08008834 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a26      	ldr	r2, [pc, #152]	@ (80088dc <I2C_ITListenCplt+0xa8>)
 8008842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	089b      	lsrs	r3, r3, #2
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d022      	beq.n	80088b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008888:	2b00      	cmp	r3, #0
 800888a:	d012      	beq.n	80088b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088aa:	f043 0204 	orr.w	r2, r3, #4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80088b2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fd6a 	bl	8009390 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2210      	movs	r2, #16
 80088c2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7fe fcfc 	bl	80072ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	ffff0000 	.word	0xffff0000

080088e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a6d      	ldr	r2, [pc, #436]	@ (8008ab4 <I2C_ITError+0x1d4>)
 80088fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b28      	cmp	r3, #40	@ 0x28
 8008916:	d005      	beq.n	8008924 <I2C_ITError+0x44>
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	2b29      	cmp	r3, #41	@ 0x29
 800891c:	d002      	beq.n	8008924 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	2b2a      	cmp	r3, #42	@ 0x2a
 8008922:	d10b      	bne.n	800893c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008924:	2103      	movs	r1, #3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fd32 	bl	8009390 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2228      	movs	r2, #40	@ 0x28
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a60      	ldr	r2, [pc, #384]	@ (8008ab8 <I2C_ITError+0x1d8>)
 8008938:	635a      	str	r2, [r3, #52]	@ 0x34
 800893a:	e030      	b.n	800899e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800893c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fd25 	bl	8009390 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f8e1 	bl	8008b0e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b60      	cmp	r3, #96	@ 0x60
 8008956:	d01f      	beq.n	8008998 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f003 0320 	and.w	r3, r3, #32
 800896a:	2b20      	cmp	r3, #32
 800896c:	d114      	bne.n	8008998 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	2b10      	cmp	r3, #16
 800897a:	d109      	bne.n	8008990 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2210      	movs	r2, #16
 8008982:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008988:	f043 0204 	orr.w	r2, r3, #4
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2220      	movs	r2, #32
 8008996:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d039      	beq.n	8008a20 <I2C_ITError+0x140>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b11      	cmp	r3, #17
 80089b0:	d002      	beq.n	80089b8 <I2C_ITError+0xd8>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b21      	cmp	r3, #33	@ 0x21
 80089b6:	d133      	bne.n	8008a20 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089c6:	d107      	bne.n	80089d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80089d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fd fb2f 	bl	8006040 <HAL_DMA_GetState>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d017      	beq.n	8008a18 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ec:	4a33      	ldr	r2, [pc, #204]	@ (8008abc <I2C_ITError+0x1dc>)
 80089ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fc f9af 	bl	8004d60 <HAL_DMA_Abort_IT>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d04d      	beq.n	8008aa4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a12:	4610      	mov	r0, r2
 8008a14:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a16:	e045      	b.n	8008aa4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f851 	bl	8008ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a1e:	e041      	b.n	8008aa4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d039      	beq.n	8008a9c <I2C_ITError+0x1bc>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b12      	cmp	r3, #18
 8008a2c:	d002      	beq.n	8008a34 <I2C_ITError+0x154>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b22      	cmp	r3, #34	@ 0x22
 8008a32:	d133      	bne.n	8008a9c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a42:	d107      	bne.n	8008a54 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fd faf1 	bl	8006040 <HAL_DMA_GetState>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d017      	beq.n	8008a94 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a68:	4a14      	ldr	r2, [pc, #80]	@ (8008abc <I2C_ITError+0x1dc>)
 8008a6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fc f971 	bl	8004d60 <HAL_DMA_Abort_IT>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d011      	beq.n	8008aa8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a92:	e009      	b.n	8008aa8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f813 	bl	8008ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a9a:	e005      	b.n	8008aa8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f80f 	bl	8008ac0 <I2C_TreatErrorCallback>
  }
}
 8008aa2:	e002      	b.n	8008aaa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008aa4:	bf00      	nop
 8008aa6:	e000      	b.n	8008aaa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008aa8:	bf00      	nop
}
 8008aaa:	bf00      	nop
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	ffff0000 	.word	0xffff0000
 8008ab8:	08007597 	.word	0x08007597
 8008abc:	08008e61 	.word	0x08008e61

08008ac0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b60      	cmp	r3, #96	@ 0x60
 8008ad2:	d10e      	bne.n	8008af2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7fe fc15 	bl	800731a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008af0:	e009      	b.n	8008b06 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fe fc00 	bl	8007306 <HAL_I2C_ErrorCallback>
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d103      	bne.n	8008b2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d007      	beq.n	8008b4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f042 0201 	orr.w	r2, r2, #1
 8008b48:	619a      	str	r2, [r3, #24]
  }
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b72:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d104      	bne.n	8008b88 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b7e:	2120      	movs	r1, #32
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fb81 	bl	8009288 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008b86:	e02d      	b.n	8008be4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	2bff      	cmp	r3, #255	@ 0xff
 8008b9e:	d903      	bls.n	8008ba8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	22ff      	movs	r2, #255	@ 0xff
 8008ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008ba6:	e004      	b.n	8008bb2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bba:	4619      	mov	r1, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3328      	adds	r3, #40	@ 0x28
 8008bc2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008bc8:	f7fb fb42 	bl	8004250 <HAL_DMA_Start_IT>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d004      	beq.n	8008bdc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008bd2:	2110      	movs	r1, #16
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff fe83 	bl	80088e0 <I2C_ITError>
}
 8008bda:	e003      	b.n	8008be4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008bdc:	2140      	movs	r1, #64	@ 0x40
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fb52 	bl	8009288 <I2C_Enable_IRQ>
}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d076      	beq.n	8008cf4 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a71      	ldr	r2, [pc, #452]	@ (8008dd4 <I2C_DMAError+0x1e8>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d059      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a6f      	ldr	r2, [pc, #444]	@ (8008dd8 <I2C_DMAError+0x1ec>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d053      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a6d      	ldr	r2, [pc, #436]	@ (8008ddc <I2C_DMAError+0x1f0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d04d      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a6b      	ldr	r2, [pc, #428]	@ (8008de0 <I2C_DMAError+0x1f4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d047      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a69      	ldr	r2, [pc, #420]	@ (8008de4 <I2C_DMAError+0x1f8>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d041      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a67      	ldr	r2, [pc, #412]	@ (8008de8 <I2C_DMAError+0x1fc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d03b      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a65      	ldr	r2, [pc, #404]	@ (8008dec <I2C_DMAError+0x200>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d035      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a63      	ldr	r2, [pc, #396]	@ (8008df0 <I2C_DMAError+0x204>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d02f      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a61      	ldr	r2, [pc, #388]	@ (8008df4 <I2C_DMAError+0x208>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d029      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a5f      	ldr	r2, [pc, #380]	@ (8008df8 <I2C_DMAError+0x20c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d023      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a5d      	ldr	r2, [pc, #372]	@ (8008dfc <I2C_DMAError+0x210>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d01d      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a5b      	ldr	r2, [pc, #364]	@ (8008e00 <I2C_DMAError+0x214>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d017      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a59      	ldr	r2, [pc, #356]	@ (8008e04 <I2C_DMAError+0x218>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d011      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a57      	ldr	r2, [pc, #348]	@ (8008e08 <I2C_DMAError+0x21c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00b      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a55      	ldr	r2, [pc, #340]	@ (8008e0c <I2C_DMAError+0x220>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d005      	beq.n	8008cc6 <I2C_DMAError+0xda>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a53      	ldr	r2, [pc, #332]	@ (8008e10 <I2C_DMAError+0x224>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d109      	bne.n	8008cda <I2C_DMAError+0xee>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	e008      	b.n	8008cec <I2C_DMAError+0x100>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	bf0c      	ite	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	2300      	movne	r3, #0
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 8098 	beq.w	8008e2e <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a33      	ldr	r2, [pc, #204]	@ (8008dd4 <I2C_DMAError+0x1e8>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d059      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a31      	ldr	r2, [pc, #196]	@ (8008dd8 <I2C_DMAError+0x1ec>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d053      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8008ddc <I2C_DMAError+0x1f0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d04d      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2d      	ldr	r2, [pc, #180]	@ (8008de0 <I2C_DMAError+0x1f4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d047      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2b      	ldr	r2, [pc, #172]	@ (8008de4 <I2C_DMAError+0x1f8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d041      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a29      	ldr	r2, [pc, #164]	@ (8008de8 <I2C_DMAError+0x1fc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d03b      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a27      	ldr	r2, [pc, #156]	@ (8008dec <I2C_DMAError+0x200>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d035      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a25      	ldr	r2, [pc, #148]	@ (8008df0 <I2C_DMAError+0x204>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d02f      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a23      	ldr	r2, [pc, #140]	@ (8008df4 <I2C_DMAError+0x208>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d029      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a21      	ldr	r2, [pc, #132]	@ (8008df8 <I2C_DMAError+0x20c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d023      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8008dfc <I2C_DMAError+0x210>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01d      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1d      	ldr	r2, [pc, #116]	@ (8008e00 <I2C_DMAError+0x214>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d017      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a1b      	ldr	r2, [pc, #108]	@ (8008e04 <I2C_DMAError+0x218>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d011      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a19      	ldr	r2, [pc, #100]	@ (8008e08 <I2C_DMAError+0x21c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00b      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a17      	ldr	r2, [pc, #92]	@ (8008e0c <I2C_DMAError+0x220>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d005      	beq.n	8008dbe <I2C_DMAError+0x1d2>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a15      	ldr	r2, [pc, #84]	@ (8008e10 <I2C_DMAError+0x224>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d12a      	bne.n	8008e14 <I2C_DMAError+0x228>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bf0c      	ite	eq
 8008dca:	2301      	moveq	r3, #1
 8008dcc:	2300      	movne	r3, #0
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	e029      	b.n	8008e26 <I2C_DMAError+0x23a>
 8008dd2:	bf00      	nop
 8008dd4:	40020010 	.word	0x40020010
 8008dd8:	40020028 	.word	0x40020028
 8008ddc:	40020040 	.word	0x40020040
 8008de0:	40020058 	.word	0x40020058
 8008de4:	40020070 	.word	0x40020070
 8008de8:	40020088 	.word	0x40020088
 8008dec:	400200a0 	.word	0x400200a0
 8008df0:	400200b8 	.word	0x400200b8
 8008df4:	40020410 	.word	0x40020410
 8008df8:	40020428 	.word	0x40020428
 8008dfc:	40020440 	.word	0x40020440
 8008e00:	40020458 	.word	0x40020458
 8008e04:	40020470 	.word	0x40020470
 8008e08:	40020488 	.word	0x40020488
 8008e0c:	400204a0 	.word	0x400204a0
 8008e10:	400204b8 	.word	0x400204b8
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bf0c      	ite	eq
 8008e20:	2301      	moveq	r3, #1
 8008e22:	2300      	movne	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fd f914 	bl	800605c <HAL_DMA_GetError>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d00e      	beq.n	8008e58 <I2C_DMAError+0x26c>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e4e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008e50:	2110      	movs	r1, #16
 8008e52:	68b8      	ldr	r0, [r7, #8]
 8008e54:	f7ff fd44 	bl	80088e0 <I2C_ITError>
  }
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fe16 	bl	8008ac0 <I2C_TreatErrorCallback>
}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008eac:	e03b      	b.n	8008f26 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 f8d6 	bl	8009064 <I2C_IsErrorOccurred>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e041      	b.n	8008f46 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	d02d      	beq.n	8008f26 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eca:	f7f9 f9ef 	bl	80022ac <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d302      	bcc.n	8008ee0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d122      	bne.n	8008f26 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	699a      	ldr	r2, [r3, #24]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	bf0c      	ite	eq
 8008ef0:	2301      	moveq	r3, #1
 8008ef2:	2300      	movne	r3, #0
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d113      	bne.n	8008f26 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f02:	f043 0220 	orr.w	r2, r3, #32
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e00f      	b.n	8008f46 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	bf0c      	ite	eq
 8008f36:	2301      	moveq	r3, #1
 8008f38:	2300      	movne	r3, #0
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d0b4      	beq.n	8008eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f5a:	e033      	b.n	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f87f 	bl	8009064 <I2C_IsErrorOccurred>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e031      	b.n	8008fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f76:	d025      	beq.n	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f78:	f7f9 f998 	bl	80022ac <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d302      	bcc.n	8008f8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d11a      	bne.n	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d013      	beq.n	8008fc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa0:	f043 0220 	orr.w	r2, r3, #32
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e007      	b.n	8008fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d1c4      	bne.n	8008f5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fe8:	e02f      	b.n	800904a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f838 	bl	8009064 <I2C_IsErrorOccurred>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e02d      	b.n	800905a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ffe:	f7f9 f955 	bl	80022ac <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d11a      	bne.n	800904a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b20      	cmp	r3, #32
 8009020:	d013      	beq.n	800904a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009026:	f043 0220 	orr.w	r2, r3, #32
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2220      	movs	r2, #32
 8009032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e007      	b.n	800905a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b20      	cmp	r3, #32
 8009056:	d1c8      	bne.n	8008fea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08a      	sub	sp, #40	@ 0x28
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b00      	cmp	r3, #0
 800908e:	d068      	beq.n	8009162 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2210      	movs	r2, #16
 8009096:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009098:	e049      	b.n	800912e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d045      	beq.n	800912e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80090a2:	f7f9 f903 	bl	80022ac <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d302      	bcc.n	80090b8 <I2C_IsErrorOccurred+0x54>
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d13a      	bne.n	800912e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80090d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090da:	d121      	bne.n	8009120 <I2C_IsErrorOccurred+0xbc>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090e2:	d01d      	beq.n	8009120 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80090e4:	7cfb      	ldrb	r3, [r7, #19]
 80090e6:	2b20      	cmp	r3, #32
 80090e8:	d01a      	beq.n	8009120 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80090fa:	f7f9 f8d7 	bl	80022ac <HAL_GetTick>
 80090fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009100:	e00e      	b.n	8009120 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009102:	f7f9 f8d3 	bl	80022ac <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b19      	cmp	r3, #25
 800910e:	d907      	bls.n	8009120 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	f043 0320 	orr.w	r3, r3, #32
 8009116:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800911e:	e006      	b.n	800912e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b20      	cmp	r3, #32
 800912c:	d1e9      	bne.n	8009102 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b20      	cmp	r3, #32
 800913a:	d003      	beq.n	8009144 <I2C_IsErrorOccurred+0xe0>
 800913c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0aa      	beq.n	800909a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009148:	2b00      	cmp	r3, #0
 800914a:	d103      	bne.n	8009154 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2220      	movs	r2, #32
 8009152:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	f043 0304 	orr.w	r3, r3, #4
 800915a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	f043 0301 	orr.w	r3, r3, #1
 800917a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009184:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	f043 0308 	orr.w	r3, r3, #8
 800919c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80091a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00b      	beq.n	80091d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	f043 0302 	orr.w	r3, r3, #2
 80091be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80091d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01c      	beq.n	8009212 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7ff fc98 	bl	8008b0e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6859      	ldr	r1, [r3, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009220 <I2C_IsErrorOccurred+0x1bc>)
 80091ea:	400b      	ands	r3, r1
 80091ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	431a      	orrs	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009216:	4618      	mov	r0, r3
 8009218:	3728      	adds	r7, #40	@ 0x28
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	fe00e800 	.word	0xfe00e800

08009224 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	607b      	str	r3, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	817b      	strh	r3, [r7, #10]
 8009232:	4613      	mov	r3, r2
 8009234:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009236:	897b      	ldrh	r3, [r7, #10]
 8009238:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800923c:	7a7b      	ldrb	r3, [r7, #9]
 800923e:	041b      	lsls	r3, r3, #16
 8009240:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009244:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	4313      	orrs	r3, r2
 800924e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009252:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	0d5b      	lsrs	r3, r3, #21
 800925e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009262:	4b08      	ldr	r3, [pc, #32]	@ (8009284 <I2C_TransferConfig+0x60>)
 8009264:	430b      	orrs	r3, r1
 8009266:	43db      	mvns	r3, r3
 8009268:	ea02 0103 	and.w	r1, r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009276:	bf00      	nop
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	03ff63ff 	.word	0x03ff63ff

08009288 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800929c:	4a39      	ldr	r2, [pc, #228]	@ (8009384 <I2C_Enable_IRQ+0xfc>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d032      	beq.n	8009308 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80092a6:	4a38      	ldr	r2, [pc, #224]	@ (8009388 <I2C_Enable_IRQ+0x100>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d02d      	beq.n	8009308 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80092b0:	4a36      	ldr	r2, [pc, #216]	@ (800938c <I2C_Enable_IRQ+0x104>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d028      	beq.n	8009308 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80092b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	da03      	bge.n	80092c6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80092c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80092c6:	887b      	ldrh	r3, [r7, #2]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80092d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80092d8:	887b      	ldrh	r3, [r7, #2]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80092e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80092ea:	887b      	ldrh	r3, [r7, #2]
 80092ec:	2b10      	cmp	r3, #16
 80092ee:	d103      	bne.n	80092f8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80092f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80092f8:	887b      	ldrh	r3, [r7, #2]
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	d133      	bne.n	8009366 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f043 0320 	orr.w	r3, r3, #32
 8009304:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009306:	e02e      	b.n	8009366 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009308:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800930c:	2b00      	cmp	r3, #0
 800930e:	da03      	bge.n	8009318 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009316:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009318:	887b      	ldrh	r3, [r7, #2]
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009328:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800932a:	887b      	ldrh	r3, [r7, #2]
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800933a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800933c:	887b      	ldrh	r3, [r7, #2]
 800933e:	2b10      	cmp	r3, #16
 8009340:	d103      	bne.n	800934a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009348:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800934a:	887b      	ldrh	r3, [r7, #2]
 800934c:	2b20      	cmp	r3, #32
 800934e:	d103      	bne.n	8009358 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009356:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009358:	887b      	ldrh	r3, [r7, #2]
 800935a:	2b40      	cmp	r3, #64	@ 0x40
 800935c:	d103      	bne.n	8009366 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009364:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6819      	ldr	r1, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	430a      	orrs	r2, r1
 8009374:	601a      	str	r2, [r3, #0]
}
 8009376:	bf00      	nop
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	0800779f 	.word	0x0800779f
 8009388:	08007be5 	.word	0x08007be5
 800938c:	08007985 	.word	0x08007985

08009390 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80093a0:	887b      	ldrh	r3, [r7, #2]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00f      	beq.n	80093ca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80093b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80093be:	2b28      	cmp	r3, #40	@ 0x28
 80093c0:	d003      	beq.n	80093ca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80093c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80093ca:	887b      	ldrh	r3, [r7, #2]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00f      	beq.n	80093f4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80093da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80093e8:	2b28      	cmp	r3, #40	@ 0x28
 80093ea:	d003      	beq.n	80093f4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80093f2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80093f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	da03      	bge.n	8009404 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009402:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009404:	887b      	ldrh	r3, [r7, #2]
 8009406:	2b10      	cmp	r3, #16
 8009408:	d103      	bne.n	8009412 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009410:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009412:	887b      	ldrh	r3, [r7, #2]
 8009414:	2b20      	cmp	r3, #32
 8009416:	d103      	bne.n	8009420 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f043 0320 	orr.w	r3, r3, #32
 800941e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009420:	887b      	ldrh	r3, [r7, #2]
 8009422:	2b40      	cmp	r3, #64	@ 0x40
 8009424:	d103      	bne.n	800942e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6819      	ldr	r1, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	43da      	mvns	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	400a      	ands	r2, r1
 800943e:	601a      	str	r2, [r3, #0]
}
 8009440:	bf00      	nop
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b20      	cmp	r3, #32
 8009460:	d138      	bne.n	80094d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800946c:	2302      	movs	r3, #2
 800946e:	e032      	b.n	80094d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2224      	movs	r2, #36	@ 0x24
 800947c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0201 	bic.w	r2, r2, #1
 800948e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800949e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6819      	ldr	r1, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f042 0201 	orr.w	r2, r2, #1
 80094be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	e000      	b.n	80094d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094d4:	2302      	movs	r3, #2
  }
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b085      	sub	sp, #20
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d139      	bne.n	800956c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009502:	2302      	movs	r3, #2
 8009504:	e033      	b.n	800956e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2224      	movs	r2, #36	@ 0x24
 8009512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0201 	bic.w	r2, r2, #1
 8009524:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009534:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	021b      	lsls	r3, r3, #8
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2220      	movs	r2, #32
 800955c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	e000      	b.n	800956e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800956c:	2302      	movs	r3, #2
  }
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
	...

0800957c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e070      	b.n	8009670 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7f8 f88a 	bl	80016bc <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0201 	bic.w	r2, r2, #1
 80095ce:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80095de:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095fe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800960e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a19      	ldr	r2, [pc, #100]	@ (8009678 <HAL_JPEG_Init+0xfc>)
 8009614:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a18      	ldr	r2, [pc, #96]	@ (800967c <HAL_JPEG_Init+0x100>)
 800961a:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fc81 	bl	8009f30 <JPEG_Set_HuffEnc_Mem>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e018      	b.n	8009670 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800964c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	08017d38 	.word	0x08017d38
 800967c:	08017d78 	.word	0x08017d78

08009680 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <HAL_JPEG_GetInfo+0x16>
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e083      	b.n	80097a2 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d103      	bne.n	80096b0 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2210      	movs	r2, #16
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	e017      	b.n	80096e0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e00c      	b.n	80096e0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d103      	bne.n	80096dc <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2230      	movs	r2, #48	@ 0x30
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	e001      	b.n	80096e0 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e060      	b.n	80097a2 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	0c1b      	lsrs	r3, r3, #16
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	0c1b      	lsrs	r3, r3, #16
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b10      	cmp	r3, #16
 8009702:	d003      	beq.n	800970c <HAL_JPEG_GetInfo+0x8c>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b30      	cmp	r3, #48	@ 0x30
 800970a:	d140      	bne.n	800978e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	091b      	lsrs	r3, r3, #4
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	091b      	lsrs	r3, r3, #4
 8009722:	f003 030f 	and.w	r3, r3, #15
 8009726:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	091b      	lsrs	r3, r3, #4
 8009730:	f003 030f 	and.w	r3, r3, #15
 8009734:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d109      	bne.n	8009750 <HAL_JPEG_GetInfo+0xd0>
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d106      	bne.n	8009750 <HAL_JPEG_GetInfo+0xd0>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2202      	movs	r2, #2
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	e01d      	b.n	800978c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <HAL_JPEG_GetInfo+0xea>
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d106      	bne.n	800976a <HAL_JPEG_GetInfo+0xea>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d103      	bne.n	800976a <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2200      	movs	r2, #0
 8009766:	605a      	str	r2, [r3, #4]
 8009768:	e010      	b.n	800978c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d109      	bne.n	8009784 <HAL_JPEG_GetInfo+0x104>
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d106      	bne.n	8009784 <HAL_JPEG_GetInfo+0x104>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2201      	movs	r2, #1
 8009780:	605a      	str	r2, [r3, #4]
 8009782:	e003      	b.n	800978c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2200      	movs	r2, #0
 8009788:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800978a:	e003      	b.n	8009794 <HAL_JPEG_GetInfo+0x114>
 800978c:	e002      	b.n	8009794 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2200      	movs	r2, #0
 8009792:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 fa7b 	bl	800ac90 <JPEG_GetQuality>
 800979a:	4602      	mov	r2, r0
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097bc:	f003 030c 	and.w	r3, r3, #12
 80097c0:	2b0c      	cmp	r3, #12
 80097c2:	d116      	bne.n	80097f2 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d033      	beq.n	800984c <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80097f0:	e02c      	b.n	800984c <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f6:	f003 030c 	and.w	r3, r3, #12
 80097fa:	2b08      	cmp	r3, #8
 80097fc:	d126      	bne.n	800984c <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	d009      	beq.n	800981c <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800980c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f043 0306 	orr.w	r3, r3, #6
 800981a:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d009      	beq.n	800983a <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800982a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8009838:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	43da      	mvns	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	400a      	ands	r2, r1
 800984a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 80098a2:	bf00      	nop
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	60b9      	str	r1, [r7, #8]
 80098b8:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 80098ba:	bf00      	nop
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr

080098c6 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b082      	sub	sp, #8
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	3b03      	subs	r3, #3
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d813      	bhi.n	8009904 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e0:	f003 030c 	and.w	r3, r3, #12
 80098e4:	2b08      	cmp	r3, #8
 80098e6:	d103      	bne.n	80098f0 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fda3 	bl	800a434 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 80098ee:	e00b      	b.n	8009908 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f4:	f003 030c 	and.w	r3, r3, #12
 80098f8:	2b0c      	cmp	r3, #12
 80098fa:	d105      	bne.n	8009908 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 f848 	bl	800a992 <JPEG_DMA_ContinueProcess>
      break;
 8009902:	e001      	b.n	8009908 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8009904:	bf00      	nop
 8009906:	e000      	b.n	800990a <HAL_JPEG_IRQHandler+0x44>
      break;
 8009908:	bf00      	nop
  }
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009912:	b480      	push	{r7}
 8009914:	b08b      	sub	sp, #44	@ 0x2c
 8009916:	af00      	add	r7, sp, #0
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	607a      	str	r2, [r7, #4]
 800991e:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8009924:	2300      	movs	r3, #0
 8009926:	61fb      	str	r3, [r7, #28]
 8009928:	e020      	b.n	800996c <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	4413      	add	r3, r2
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8009934:	6a3a      	ldr	r2, [r7, #32]
 8009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009938:	4413      	add	r3, r2
 800993a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800993e:	d90f      	bls.n	8009960 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e055      	b.n	80099f0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	b2da      	uxtb	r2, r3
 8009948:	68b9      	ldr	r1, [r7, #8]
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	440b      	add	r3, r1
 800994e:	3201      	adds	r2, #1
 8009950:	b2d2      	uxtb	r2, r2
 8009952:	701a      	strb	r2, [r3, #0]
      p++;
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	3301      	adds	r3, #1
 8009958:	623b      	str	r3, [r7, #32]
      i--;
 800995a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995c:	3b01      	subs	r3, #1
 800995e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1ee      	bne.n	8009944 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	3301      	adds	r3, #1
 800996a:	61fb      	str	r3, [r7, #28]
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	2b0f      	cmp	r3, #15
 8009970:	d9db      	bls.n	800992a <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	4413      	add	r3, r2
 8009978:	2200      	movs	r2, #0
 800997a:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	6a3a      	ldr	r2, [r7, #32]
 8009980:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	617b      	str	r3, [r7, #20]
  p = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8009990:	e027      	b.n	80099e2 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	4413      	add	r3, r2
 800999a:	69ba      	ldr	r2, [r7, #24]
 800999c:	601a      	str	r2, [r3, #0]
      p++;
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	3301      	adds	r3, #1
 80099a2:	623b      	str	r3, [r7, #32]
      code++;
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	3301      	adds	r3, #1
 80099a8:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	4413      	add	r3, r2
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d0eb      	beq.n	8009992 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b1f      	cmp	r3, #31
 80099be:	d901      	bls.n	80099c4 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e015      	b.n	80099f0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80099c4:	2201      	movs	r2, #1
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	fa02 f303 	lsl.w	r3, r2, r3
 80099cc:	69ba      	ldr	r2, [r7, #24]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d301      	bcc.n	80099d6 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e00c      	b.n	80099f0 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	61bb      	str	r3, [r7, #24]
    si++;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	3301      	adds	r3, #1
 80099e0:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	4413      	add	r3, r2
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1dd      	bne.n	80099aa <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	372c      	adds	r7, #44	@ 0x2c
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a08:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a0c:	6018      	str	r0, [r3, #0]
 8009a0e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a12:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009a16:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009a18:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a1c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	f107 0308 	add.w	r3, r7, #8
 8009a26:	f107 020c 	add.w	r2, r7, #12
 8009a2a:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8009a2e:	f7ff ff70 	bl	8009912 <JPEG_Bits_To_SizeCodes>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8009a38:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009a40:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8009a44:	e075      	b.n	8009b32 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8009a4c:	e067      	b.n	8009b1e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8009a4e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009a52:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009a5c:	4413      	add	r3, r2
 8009a5e:	3310      	adds	r3, #16
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8009a66:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d103      	bne.n	8009a76 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009a6e:	23a0      	movs	r3, #160	@ 0xa0
 8009a70:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a74:	e021      	b.n	8009aba <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8009a76:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a7a:	2bf0      	cmp	r3, #240	@ 0xf0
 8009a7c:	d103      	bne.n	8009a86 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8009a7e:	23a1      	movs	r3, #161	@ 0xa1
 8009a80:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8009a84:	e019      	b.n	8009aba <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8009a86:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a8a:	091b      	lsrs	r3, r3, #4
 8009a8c:	f003 030f 	and.w	r3, r3, #15
 8009a90:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8009a94:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009a98:	f003 030f 	and.w	r3, r3, #15
 8009a9c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009aa0:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	461a      	mov	r2, r3
 8009aae:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009ab2:	4413      	add	r3, r2
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009aba:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009abe:	2ba1      	cmp	r3, #161	@ 0xa1
 8009ac0:	d901      	bls.n	8009ac6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e035      	b.n	8009b32 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009ac6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009aca:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009ace:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009ad2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ad6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009ada:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009ae4:	3328      	adds	r3, #40	@ 0x28
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	440b      	add	r3, r1
 8009aea:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009aec:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009af0:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8009af4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009af8:	4413      	add	r3, r2
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b2d9      	uxtb	r1, r3
 8009b00:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009b04:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009b0e:	4413      	add	r3, r2
 8009b10:	460a      	mov	r2, r1
 8009b12:	701a      	strb	r2, [r3, #0]
      k++;
 8009b14:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009b18:	3301      	adds	r3, #1
 8009b1a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8009b1e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009b22:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d38e      	bcc.n	8009a4e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b48:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b4c:	6018      	str	r0, [r3, #0]
 8009b4e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b52:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009b56:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009b58:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b5c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8009b66:	f107 0208 	add.w	r2, r7, #8
 8009b6a:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8009b6e:	f7ff fed0 	bl	8009912 <JPEG_Bits_To_SizeCodes>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009b78:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009b80:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009b84:	e048      	b.n	8009c18 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009b8c:	e03d      	b.n	8009c0a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8009b8e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009b92:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3310      	adds	r3, #16
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009ba6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009baa:	2b0b      	cmp	r3, #11
 8009bac:	d901      	bls.n	8009bb2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e032      	b.n	8009c18 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009bb2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bb6:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009bba:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009bbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bc2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bc6:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009bca:	6819      	ldr	r1, [r3, #0]
 8009bcc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	440b      	add	r3, r1
 8009bd6:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009bd8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bdc:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009be0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009be4:	4413      	add	r3, r2
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	b2d9      	uxtb	r1, r3
 8009bec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009bf0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009bfa:	4413      	add	r3, r2
 8009bfc:	460a      	mov	r2, r1
 8009bfe:	701a      	strb	r2, [r3, #0]
      k++;
 8009c00:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009c04:	3301      	adds	r3, #1
 8009c06:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8009c0a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8009c0e:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d3bb      	bcc.n	8009b8e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b09a      	sub	sp, #104	@ 0x68
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d106      	bne.n	8009c4a <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009c44:	3318      	adds	r3, #24
 8009c46:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c48:	e00f      	b.n	8009c6a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d106      	bne.n	8009c66 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009c60:	3318      	adds	r3, #24
 8009c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c64:	e001      	b.n	8009c6a <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e059      	b.n	8009d1e <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d055      	beq.n	8009d1c <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009c70:	f107 0314 	add.w	r3, r7, #20
 8009c74:	4619      	mov	r1, r3
 8009c76:	68b8      	ldr	r0, [r7, #8]
 8009c78:	f7ff ff60 	bl	8009b3c <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8009c82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d002      	beq.n	8009c90 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009c8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009c8e:	e046      	b.n	8009d1e <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009c90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c92:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c96:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009c9a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009c9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ca4:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009ca8:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009caa:	230c      	movs	r3, #12
 8009cac:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8009cae:	e032      	b.n	8009d16 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cb8:	3b04      	subs	r3, #4
 8009cba:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009cbc:	f107 0214 	add.w	r2, r7, #20
 8009cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cc2:	4413      	add	r3, r2
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cce:	3302      	adds	r3, #2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	3368      	adds	r3, #104	@ 0x68
 8009cd4:	443b      	add	r3, r7
 8009cd6:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009ce6:	f107 0214 	add.w	r2, r7, #20
 8009cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cec:	4413      	add	r3, r2
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cf8:	3302      	adds	r3, #2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	3368      	adds	r3, #104	@ 0x68
 8009cfe:	443b      	add	r3, r7
 8009d00:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d0c:	041a      	lsls	r2, r3, #16
 8009d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d10:	431a      	orrs	r2, r3
 8009d12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d14:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009d16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d8c9      	bhi.n	8009cb0 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3768      	adds	r7, #104	@ 0x68
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d34:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d38:	6018      	str	r0, [r3, #0]
 8009d3a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d3e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009d42:	6019      	str	r1, [r3, #0]
 8009d44:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d48:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8009d4c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009d4e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d52:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d5e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d62:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009d66:	6812      	ldr	r2, [r2, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d10c      	bne.n	8009d86 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009d6c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d70:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d7c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009d80:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009d84:	e01d      	b.n	8009dc2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009d86:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009d8a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009d96:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009d9a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009d9e:	6812      	ldr	r2, [r2, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d10c      	bne.n	8009dbe <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009da4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009da8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009db4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009db8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009dbc:	e001      	b.n	8009dc2 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e0a8      	b.n	8009f14 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8009dc2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dc6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f000 80a0 	beq.w	8009f12 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8009dd2:	f107 0214 	add.w	r2, r7, #20
 8009dd6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009dda:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009dde:	4611      	mov	r1, r2
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	f7ff fe0b 	bl	80099fc <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8009de6:	4603      	mov	r3, r0
 8009de8:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009dec:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8009df4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009df8:	e08c      	b.n	8009f14 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8009dfa:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009dfe:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009e02:	2300      	movs	r3, #0
 8009e04:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009e08:	e00e      	b.n	8009e28 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8009e0a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e0e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009e12:	601a      	str	r2, [r3, #0]
      addressDef++;
 8009e14:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e18:	3304      	adds	r3, #4
 8009e1a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8009e1e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e22:	3301      	adds	r3, #1
 8009e24:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8009e28:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d9ec      	bls.n	8009e0a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8009e30:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e34:	4a3a      	ldr	r2, [pc, #232]	@ (8009f20 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8009e36:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e38:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8009e42:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e46:	4a37      	ldr	r2, [pc, #220]	@ (8009f24 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8009e48:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e4a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e4e:	3304      	adds	r3, #4
 8009e50:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009e54:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e58:	4a33      	ldr	r2, [pc, #204]	@ (8009f28 <JPEG_Set_HuffAC_Mem+0x200>)
 8009e5a:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009e5c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e60:	3304      	adds	r3, #4
 8009e62:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009e66:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009e6a:	4a30      	ldr	r2, [pc, #192]	@ (8009f2c <JPEG_Set_HuffAC_Mem+0x204>)
 8009e6c:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8009e6e:	23a2      	movs	r3, #162	@ 0xa2
 8009e70:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8009e74:	e049      	b.n	8009f0a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8009e76:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8009e80:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009e84:	3b04      	subs	r3, #4
 8009e86:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009e8a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009e8e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009e92:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009e96:	4413      	add	r3, r2
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	021b      	lsls	r3, r3, #8
 8009e9c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009ea0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ea4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009ea8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009eac:	3328      	adds	r3, #40	@ 0x28
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	440b      	add	r3, r1
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009ebc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009ec6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009eca:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009ece:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ed2:	4413      	add	r3, r2
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	021b      	lsls	r3, r3, #8
 8009ed8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009edc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009ee0:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009ee4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009ee8:	3328      	adds	r3, #40	@ 0x28
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	440b      	add	r3, r1
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8009ef8:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8009efc:	041a      	lsls	r2, r3, #16
 8009efe:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8009f02:	431a      	orrs	r2, r3
 8009f04:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009f08:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8009f0a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d8b1      	bhi.n	8009e76 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	0fd10fd0 	.word	0x0fd10fd0
 8009f24:	0fd30fd2 	.word	0x0fd30fd2
 8009f28:	0fd50fd4 	.word	0x0fd50fd4
 8009f2c:	0fd70fd6 	.word	0x0fd70fd6

08009f30 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f84d 	bl	8009fd8 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009f46:	461a      	mov	r2, r3
 8009f48:	491f      	ldr	r1, [pc, #124]	@ (8009fc8 <JPEG_Set_HuffEnc_Mem+0x98>)
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff feec 	bl	8009d28 <JPEG_Set_HuffAC_Mem>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
 8009f5c:	e030      	b.n	8009fc0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009f66:	461a      	mov	r2, r3
 8009f68:	4918      	ldr	r1, [pc, #96]	@ (8009fcc <JPEG_Set_HuffEnc_Mem+0x9c>)
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff fedc 	bl	8009d28 <JPEG_Set_HuffAC_Mem>
 8009f70:	4603      	mov	r3, r0
 8009f72:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	e020      	b.n	8009fc0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009f86:	461a      	mov	r2, r3
 8009f88:	4911      	ldr	r1, [pc, #68]	@ (8009fd0 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7ff fe49 	bl	8009c22 <JPEG_Set_HuffDC_Mem>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	e010      	b.n	8009fc0 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	490a      	ldr	r1, [pc, #40]	@ (8009fd4 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff fe39 	bl	8009c22 <JPEG_Set_HuffDC_Mem>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	e000      	b.n	8009fc0 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	08017b90 	.word	0x08017b90
 8009fcc:	08017c44 	.word	0x08017c44
 8009fd0:	08017b58 	.word	0x08017b58
 8009fd4:	08017b74 	.word	0x08017b74

08009fd8 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b08b      	sub	sp, #44	@ 0x2c
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009fe0:	4b80      	ldr	r3, [pc, #512]	@ (800a1e4 <JPEG_Set_Huff_DHTMem+0x20c>)
 8009fe2:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009fe4:	4b80      	ldr	r3, [pc, #512]	@ (800a1e8 <JPEG_Set_Huff_DHTMem+0x210>)
 8009fe6:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009fe8:	4b80      	ldr	r3, [pc, #512]	@ (800a1ec <JPEG_Set_Huff_DHTMem+0x214>)
 8009fea:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8009fec:	4b80      	ldr	r3, [pc, #512]	@ (800a1f0 <JPEG_Set_Huff_DHTMem+0x218>)
 8009fee:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009ff8:	330c      	adds	r3, #12
 8009ffa:	623b      	str	r3, [r7, #32]
  index = 16;
 8009ffc:	2310      	movs	r3, #16
 8009ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a000:	e01d      	b.n	800a03e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	3b01      	subs	r3, #1
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	5cd3      	ldrb	r3, [r2, r3]
 800a00a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00e:	3b02      	subs	r3, #2
 800a010:	6979      	ldr	r1, [r7, #20]
 800a012:	5ccb      	ldrb	r3, [r1, r3]
 800a014:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a016:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01a:	3b03      	subs	r3, #3
 800a01c:	6979      	ldr	r1, [r7, #20]
 800a01e:	5ccb      	ldrb	r3, [r1, r3]
 800a020:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a022:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800a024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a026:	3a04      	subs	r2, #4
 800a028:	6979      	ldr	r1, [r7, #20]
 800a02a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a02c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	601a      	str	r2, [r3, #0]
    address--;
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	3b04      	subs	r3, #4
 800a036:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	3b04      	subs	r3, #4
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	2b03      	cmp	r3, #3
 800a042:	d8de      	bhi.n	800a002 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a04c:	3318      	adds	r3, #24
 800a04e:	623b      	str	r3, [r7, #32]
  index = 12;
 800a050:	230c      	movs	r3, #12
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a054:	e021      	b.n	800a09a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	3b01      	subs	r3, #1
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	4413      	add	r3, r2
 800a05e:	7c1b      	ldrb	r3, [r3, #16]
 800a060:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a064:	3b02      	subs	r3, #2
 800a066:	6979      	ldr	r1, [r7, #20]
 800a068:	440b      	add	r3, r1
 800a06a:	7c1b      	ldrb	r3, [r3, #16]
 800a06c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a06e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a072:	3b03      	subs	r3, #3
 800a074:	6979      	ldr	r1, [r7, #20]
 800a076:	440b      	add	r3, r1
 800a078:	7c1b      	ldrb	r3, [r3, #16]
 800a07a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a07c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800a07e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a080:	3a04      	subs	r2, #4
 800a082:	6979      	ldr	r1, [r7, #20]
 800a084:	440a      	add	r2, r1
 800a086:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a088:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	601a      	str	r2, [r3, #0]
    address--;
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	3b04      	subs	r3, #4
 800a092:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a096:	3b04      	subs	r3, #4
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d8da      	bhi.n	800a056 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a0a8:	3328      	adds	r3, #40	@ 0x28
 800a0aa:	623b      	str	r3, [r7, #32]
  index = 16;
 800a0ac:	2310      	movs	r3, #16
 800a0ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0b0:	e01d      	b.n	800a0ee <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	69fa      	ldr	r2, [r7, #28]
 800a0b8:	5cd3      	ldrb	r3, [r2, r3]
 800a0ba:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	3b02      	subs	r3, #2
 800a0c0:	69f9      	ldr	r1, [r7, #28]
 800a0c2:	5ccb      	ldrb	r3, [r1, r3]
 800a0c4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0c6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ca:	3b03      	subs	r3, #3
 800a0cc:	69f9      	ldr	r1, [r7, #28]
 800a0ce:	5ccb      	ldrb	r3, [r1, r3]
 800a0d0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800a0d2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800a0d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0d6:	3a04      	subs	r2, #4
 800a0d8:	69f9      	ldr	r1, [r7, #28]
 800a0da:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800a0dc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	601a      	str	r2, [r3, #0]
    address--;
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	3b04      	subs	r3, #4
 800a0e6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ea:	3b04      	subs	r3, #4
 800a0ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d8de      	bhi.n	800a0b2 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a0fc:	33cc      	adds	r3, #204	@ 0xcc
 800a0fe:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	4b3b      	ldr	r3, [pc, #236]	@ (800a1f4 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a106:	4013      	ands	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800a110:	021a      	lsls	r2, r3, #8
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	4313      	orrs	r3, r2
 800a116:	69fa      	ldr	r2, [r7, #28]
 800a118:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	3b04      	subs	r3, #4
 800a12a:	623b      	str	r3, [r7, #32]
  index = 160;
 800a12c:	23a0      	movs	r3, #160	@ 0xa0
 800a12e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a130:	e021      	b.n	800a176 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	3b01      	subs	r3, #1
 800a136:	69fa      	ldr	r2, [r7, #28]
 800a138:	4413      	add	r3, r2
 800a13a:	7c1b      	ldrb	r3, [r3, #16]
 800a13c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a140:	3b02      	subs	r3, #2
 800a142:	69f9      	ldr	r1, [r7, #28]
 800a144:	440b      	add	r3, r1
 800a146:	7c1b      	ldrb	r3, [r3, #16]
 800a148:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a14a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14e:	3b03      	subs	r3, #3
 800a150:	69f9      	ldr	r1, [r7, #28]
 800a152:	440b      	add	r3, r1
 800a154:	7c1b      	ldrb	r3, [r3, #16]
 800a156:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800a158:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800a15a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a15c:	3a04      	subs	r2, #4
 800a15e:	69f9      	ldr	r1, [r7, #28]
 800a160:	440a      	add	r2, r1
 800a162:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800a164:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	601a      	str	r2, [r3, #0]
    address--;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	3b04      	subs	r3, #4
 800a16e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a172:	3b04      	subs	r3, #4
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d8da      	bhi.n	800a132 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a184:	33cc      	adds	r3, #204	@ 0xcc
 800a186:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	785b      	ldrb	r3, [r3, #1]
 800a194:	061a      	lsls	r2, r3, #24
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	431a      	orrs	r2, r3
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	041b      	lsls	r3, r3, #16
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a1b2:	33dc      	adds	r3, #220	@ 0xdc
 800a1b4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f4 <JPEG_Set_Huff_DHTMem+0x21c>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	7bdb      	ldrb	r3, [r3, #15]
 800a1c4:	021a      	lsls	r2, r3, #8
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	7b92      	ldrb	r2, [r2, #14]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	3b04      	subs	r3, #4
 800a1dc:	623b      	str	r3, [r7, #32]
  index = 12;
 800a1de:	230c      	movs	r3, #12
 800a1e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a1e2:	e027      	b.n	800a234 <JPEG_Set_Huff_DHTMem+0x25c>
 800a1e4:	08017b90 	.word	0x08017b90
 800a1e8:	08017c44 	.word	0x08017c44
 800a1ec:	08017b58 	.word	0x08017b58
 800a1f0:	08017b74 	.word	0x08017b74
 800a1f4:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	5cd3      	ldrb	r3, [r2, r3]
 800a200:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a202:	6939      	ldr	r1, [r7, #16]
 800a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a206:	440b      	add	r3, r1
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a20c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a210:	3b01      	subs	r3, #1
 800a212:	6939      	ldr	r1, [r7, #16]
 800a214:	5ccb      	ldrb	r3, [r1, r3]
 800a216:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800a218:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800a21a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a21c:	3a02      	subs	r2, #2
 800a21e:	6939      	ldr	r1, [r7, #16]
 800a220:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a222:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	601a      	str	r2, [r3, #0]
    address--;
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	3b04      	subs	r3, #4
 800a22c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	3b04      	subs	r3, #4
 800a232:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a236:	2b03      	cmp	r3, #3
 800a238:	d8de      	bhi.n	800a1f8 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a242:	33dc      	adds	r3, #220	@ 0xdc
 800a244:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	7c5b      	ldrb	r3, [r3, #17]
 800a252:	061a      	lsls	r2, r3, #24
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	431a      	orrs	r2, r3
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	7c1b      	ldrb	r3, [r3, #16]
 800a25c:	041b      	lsls	r3, r3, #16
 800a25e:	4313      	orrs	r3, r2
 800a260:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a270:	33e8      	adds	r3, #232	@ 0xe8
 800a272:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	4b6d      	ldr	r3, [pc, #436]	@ (800a430 <JPEG_Set_Huff_DHTMem+0x458>)
 800a27a:	4013      	ands	r3, r2
 800a27c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	7edb      	ldrb	r3, [r3, #27]
 800a282:	021a      	lsls	r2, r3, #8
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4313      	orrs	r3, r2
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	7e92      	ldrb	r2, [r2, #26]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	3b04      	subs	r3, #4
 800a29a:	623b      	str	r3, [r7, #32]
  index = 8;
 800a29c:	2308      	movs	r3, #8
 800a29e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2a0:	e021      	b.n	800a2e6 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	7c1b      	ldrb	r3, [r3, #16]
 800a2ac:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a2ae:	6939      	ldr	r1, [r7, #16]
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b2:	440b      	add	r3, r1
 800a2b4:	3310      	adds	r3, #16
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2ba:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	6939      	ldr	r1, [r7, #16]
 800a2c2:	440b      	add	r3, r1
 800a2c4:	7c1b      	ldrb	r3, [r3, #16]
 800a2c6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800a2c8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800a2ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2cc:	3a02      	subs	r2, #2
 800a2ce:	6939      	ldr	r1, [r7, #16]
 800a2d0:	440a      	add	r2, r1
 800a2d2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a2d4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	601a      	str	r2, [r3, #0]
    address--;
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	3b04      	subs	r3, #4
 800a2de:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	3b04      	subs	r3, #4
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d8da      	bhi.n	800a2a2 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a2f4:	33e8      	adds	r3, #232	@ 0xe8
 800a2f6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	785b      	ldrb	r3, [r3, #1]
 800a304:	061a      	lsls	r2, r3, #24
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	431a      	orrs	r2, r3
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	041b      	lsls	r3, r3, #16
 800a310:	4313      	orrs	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a322:	33f8      	adds	r3, #248	@ 0xf8
 800a324:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	4b41      	ldr	r3, [pc, #260]	@ (800a430 <JPEG_Set_Huff_DHTMem+0x458>)
 800a32c:	4013      	ands	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	7bdb      	ldrb	r3, [r3, #15]
 800a334:	021a      	lsls	r2, r3, #8
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	4313      	orrs	r3, r2
 800a33a:	69ba      	ldr	r2, [r7, #24]
 800a33c:	7b92      	ldrb	r2, [r2, #14]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  *address = value;
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	3b04      	subs	r3, #4
 800a34c:	623b      	str	r3, [r7, #32]
  index = 12;
 800a34e:	230c      	movs	r3, #12
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a352:	e01d      	b.n	800a390 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	3301      	adds	r3, #1
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	5cd3      	ldrb	r3, [r2, r3]
 800a35c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a35e:	69b9      	ldr	r1, [r7, #24]
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	440b      	add	r3, r1
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a368:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	3b01      	subs	r3, #1
 800a36e:	69b9      	ldr	r1, [r7, #24]
 800a370:	5ccb      	ldrb	r3, [r1, r3]
 800a372:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800a374:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800a376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a378:	3a02      	subs	r2, #2
 800a37a:	69b9      	ldr	r1, [r7, #24]
 800a37c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800a37e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	601a      	str	r2, [r3, #0]
    address--;
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	3b04      	subs	r3, #4
 800a388:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	3b04      	subs	r3, #4
 800a38e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	2b03      	cmp	r3, #3
 800a394:	d8de      	bhi.n	800a354 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a39e:	33f8      	adds	r3, #248	@ 0xf8
 800a3a0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	7c5b      	ldrb	r3, [r3, #17]
 800a3ae:	061a      	lsls	r2, r3, #24
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	7c1b      	ldrb	r3, [r3, #16]
 800a3b8:	041b      	lsls	r3, r3, #16
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800a3cc:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800a3d0:	623b      	str	r3, [r7, #32]
  index = 160;
 800a3d2:	23a0      	movs	r3, #160	@ 0xa0
 800a3d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a3d6:	e021      	b.n	800a41c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3da:	3301      	adds	r3, #1
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	4413      	add	r3, r2
 800a3e0:	7c1b      	ldrb	r3, [r3, #16]
 800a3e2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3e4:	69b9      	ldr	r1, [r7, #24]
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e8:	440b      	add	r3, r1
 800a3ea:	3310      	adds	r3, #16
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a3f0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	69b9      	ldr	r1, [r7, #24]
 800a3f8:	440b      	add	r3, r1
 800a3fa:	7c1b      	ldrb	r3, [r3, #16]
 800a3fc:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800a3fe:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800a400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a402:	3a02      	subs	r2, #2
 800a404:	69b9      	ldr	r1, [r7, #24]
 800a406:	440a      	add	r2, r1
 800a408:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800a40a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	601a      	str	r2, [r3, #0]
    address--;
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	3b04      	subs	r3, #4
 800a414:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	3b04      	subs	r3, #4
 800a41a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d8da      	bhi.n	800a3d8 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800a422:	bf00      	nop
 800a424:	bf00      	nop
 800a426:	372c      	adds	r7, #44	@ 0x2c
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	ffff0000 	.word	0xffff0000

0800a434 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a440:	f003 0303 	and.w	r3, r3, #3
 800a444:	2b02      	cmp	r3, #2
 800a446:	d125      	bne.n	800a494 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a44e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	d01e      	beq.n	800a494 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3304      	adds	r3, #4
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff f90f 	bl	8009680 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3304      	adds	r3, #4
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff f9f3 	bl	800985a <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a482:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a492:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a498:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d116      	bne.n	800a4ce <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d004      	beq.n	800a4b8 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a4ae:	2108      	movs	r1, #8
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f988 	bl	800a7c6 <JPEG_ReadInputData>
 800a4b6:	e00a      	b.n	800a4ce <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f97c 	bl	800a7c6 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d116      	bne.n	800a508 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4e0:	f003 0308 	and.w	r3, r3, #8
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d004      	beq.n	800a4f2 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800a4e8:	2108      	movs	r1, #8
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f864 	bl	800a5b8 <JPEG_StoreOutputData>
 800a4f0:	e00a      	b.n	800a508 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f8:	f003 0310 	and.w	r3, r3, #16
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800a500:	2101      	movs	r1, #1
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f858 	bl	800a5b8 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a512:	2b20      	cmp	r3, #32
 800a514:	d14b      	bne.n	800a5ae <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0201 	bic.w	r2, r2, #1
 800a524:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a52a:	f003 030c 	and.w	r3, r3, #12
 800a52e:	2b08      	cmp	r3, #8
 800a530:	d107      	bne.n	800a542 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a540:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a550:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69d9      	ldr	r1, [r3, #28]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a562:	461a      	mov	r2, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff f9a2 	bl	80098ae <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a574:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a57a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d103      	bne.n	800a5a4 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7ff f971 	bl	8009884 <HAL_JPEG_DecodeCpltCallback>
 800a5a2:	e002      	b.n	800a5aa <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff f963 	bl	8009870 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e000      	b.n	800a5b0 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	440b      	add	r3, r1
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d34b      	bcc.n	800a66c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	e031      	b.n	800a63e <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5e0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	69da      	ldr	r2, [r3, #28]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ea:	4413      	add	r3, r2
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	0a19      	lsrs	r1, r3, #8
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	69da      	ldr	r2, [r3, #28]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	3301      	adds	r3, #1
 800a600:	4413      	add	r3, r2
 800a602:	b2ca      	uxtb	r2, r1
 800a604:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	0c19      	lsrs	r1, r3, #16
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	69da      	ldr	r2, [r3, #28]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a612:	3302      	adds	r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	b2ca      	uxtb	r2, r1
 800a618:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	0e19      	lsrs	r1, r3, #24
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	69da      	ldr	r2, [r3, #28]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a626:	3303      	adds	r3, #3
 800a628:	4413      	add	r3, r2
 800a62a:	b2ca      	uxtb	r2, r1
 800a62c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	1d1a      	adds	r2, r3, #4
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	3301      	adds	r3, #1
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d3c9      	bcc.n	800a5da <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64e:	429a      	cmp	r2, r3
 800a650:	f040 80b5 	bne.w	800a7be <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	69d9      	ldr	r1, [r3, #28]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a65c:	461a      	mov	r2, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff f925 	bl	80098ae <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800a66a:	e0a8      	b.n	800a7be <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a674:	429a      	cmp	r2, r3
 800a676:	f240 80a2 	bls.w	800a7be <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	089b      	lsrs	r3, r3, #2
 800a686:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800a688:	2300      	movs	r3, #0
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e031      	b.n	800a6f2 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a694:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	69da      	ldr	r2, [r3, #28]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a69e:	4413      	add	r3, r2
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	b2d2      	uxtb	r2, r2
 800a6a4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	0a19      	lsrs	r1, r3, #8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69da      	ldr	r2, [r3, #28]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	4413      	add	r3, r2
 800a6b6:	b2ca      	uxtb	r2, r1
 800a6b8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	0c19      	lsrs	r1, r3, #16
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69da      	ldr	r2, [r3, #28]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	b2ca      	uxtb	r2, r1
 800a6cc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	0e19      	lsrs	r1, r3, #24
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	69da      	ldr	r2, [r3, #28]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6da:	3303      	adds	r3, #3
 800a6dc:	4413      	add	r3, r2
 800a6de:	b2ca      	uxtb	r2, r1
 800a6e0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d3c9      	bcc.n	800a68e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a702:	429a      	cmp	r2, r3
 800a704:	d10b      	bne.n	800a71e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69d9      	ldr	r1, [r3, #28]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70e:	461a      	mov	r2, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff f8cc 	bl	80098ae <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a71c:	e04f      	b.n	800a7be <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a730:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800a732:	2300      	movs	r3, #0
 800a734:	617b      	str	r3, [r7, #20]
 800a736:	e015      	b.n	800a764 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	00db      	lsls	r3, r3, #3
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	fa22 f103 	lsr.w	r1, r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	69da      	ldr	r2, [r3, #28]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74e:	4413      	add	r3, r2
 800a750:	b2ca      	uxtb	r2, r1
 800a752:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a758:	1c5a      	adds	r2, r3, #1
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	3301      	adds	r3, #1
 800a762:	617b      	str	r3, [r7, #20]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d3e5      	bcc.n	800a738 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	69d9      	ldr	r1, [r3, #28]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a774:	461a      	mov	r2, r3
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff f899 	bl	80098ae <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f1c3 0304 	rsb	r3, r3, #4
 800a788:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	617b      	str	r3, [r7, #20]
 800a78e:	e013      	b.n	800a7b8 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	fa22 f103 	lsr.w	r1, r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69da      	ldr	r2, [r3, #28]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a2:	4413      	add	r3, r2
 800a7a4:	b2ca      	uxtb	r2, r1
 800a7a6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	617b      	str	r3, [r7, #20]
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d9e8      	bls.n	800a790 <JPEG_StoreOutputData+0x1d8>
}
 800a7be:	bf00      	nop
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b088      	sub	sp, #32
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <JPEG_ReadInputData+0x1c>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d104      	bne.n	800a7ec <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7fe ffe0 	bl	80097aa <HAL_JPEG_Pause>
 800a7ea:	e028      	b.n	800a83e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d906      	bls.n	800a806 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	61fb      	str	r3, [r7, #28]
 800a804:	e01b      	b.n	800a83e <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d115      	bne.n	800a83e <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff f83d 	bl	8009898 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a822:	2b04      	cmp	r3, #4
 800a824:	d905      	bls.n	800a832 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82a:	f023 0203 	bic.w	r2, r3, #3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83c:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a846:	2b00      	cmp	r3, #0
 800a848:	f040 809f 	bne.w	800a98a <JPEG_ReadInputData+0x1c4>
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 809b 	beq.w	800a98a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	089b      	lsrs	r3, r3, #2
 800a858:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d335      	bcc.n	800a8ce <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800a862:	2300      	movs	r3, #0
 800a864:	61bb      	str	r3, [r7, #24]
 800a866:	e02d      	b.n	800a8c4 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
 800a86c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699a      	ldr	r2, [r3, #24]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4413      	add	r3, r2
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3301      	adds	r3, #1
 800a882:	4413      	add	r3, r2
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a888:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6999      	ldr	r1, [r3, #24]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3302      	adds	r3, #2
 800a894:	440b      	add	r3, r1
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a89a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	699a      	ldr	r2, [r3, #24]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3303      	adds	r3, #3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a8b0:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8b2:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	1d1a      	adds	r2, r3, #4
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	61bb      	str	r3, [r7, #24]
 800a8c4:	69ba      	ldr	r2, [r7, #24]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d3cd      	bcc.n	800a868 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800a8cc:	e05d      	b.n	800a98a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d035      	beq.n	800a940 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	61bb      	str	r3, [r7, #24]
 800a8d8:	e02d      	b.n	800a936 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	699a      	ldr	r2, [r3, #24]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699a      	ldr	r2, [r3, #24]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	4413      	add	r3, r2
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a8fa:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6999      	ldr	r1, [r3, #24]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3302      	adds	r3, #2
 800a906:	440b      	add	r3, r1
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a90c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	699a      	ldr	r2, [r3, #24]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	3303      	adds	r3, #3
 800a918:	4413      	add	r3, r2
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a922:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a924:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	1d1a      	adds	r2, r3, #4
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	3301      	adds	r3, #1
 800a934:	61bb      	str	r3, [r7, #24]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d3cd      	bcc.n	800a8da <JPEG_ReadInputData+0x114>
}
 800a93e:	e024      	b.n	800a98a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800a944:	2300      	movs	r3, #0
 800a946:	61bb      	str	r3, [r7, #24]
 800a948:	e017      	b.n	800a97a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	4413      	add	r3, r2
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	461a      	mov	r2, r3
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	f003 0303 	and.w	r3, r3, #3
 800a95e:	00db      	lsls	r3, r3, #3
 800a960:	fa02 f303 	lsl.w	r3, r2, r3
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	3301      	adds	r3, #1
 800a978:	61bb      	str	r3, [r7, #24]
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d3e3      	bcc.n	800a94a <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a98a:	bf00      	nop
 800a98c:	3720      	adds	r7, #32
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b082      	sub	sp, #8
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a99e:	f003 0303 	and.w	r3, r3, #3
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d125      	bne.n	800a9f2 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d01e      	beq.n	800a9f2 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7fe fe60 	bl	8009680 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7fe ff44 	bl	800985a <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d039      	beq.n	800aa74 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa04:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0201 	bic.w	r2, r2, #1
 800aa1a:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aa2a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa3a:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d104      	bne.n	800aa54 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fa1a 	bl	800ae88 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d105      	bne.n	800aa6e <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fa0e 	bl	800ae88 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800aa6c:	e002      	b.n	800aa74 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f804 	bl	800aa7c <JPEG_DMA_EndProcess>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800aa94:	1ad2      	subs	r2, r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d10a      	bne.n	800aabc <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69d9      	ldr	r1, [r3, #28]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaae:	461a      	mov	r2, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7fe fefc 	bl	80098ae <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac2:	f003 0310 	and.w	r3, r3, #16
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d134      	bne.n	800ab34 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00a      	beq.n	800aae8 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69d9      	ldr	r1, [r3, #28]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aada:	461a      	mov	r2, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7fe fee6 	bl	80098ae <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f022 0201 	bic.w	r2, r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aafc:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab02:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d103      	bne.n	800ab2c <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7fe fead 	bl	8009884 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800ab2a:	e00c      	b.n	800ab46 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7fe fe9f 	bl	8009870 <HAL_JPEG_EncodeCpltCallback>
}
 800ab32:	e008      	b.n	800ab46 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f804 	bl	800ab4e <JPEG_DMA_PollResidualData>
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b086      	sub	sp, #24
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800ab56:	2310      	movs	r3, #16
 800ab58:	617b      	str	r3, [r7, #20]
 800ab5a:	e04f      	b.n	800abfc <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d146      	bne.n	800abf6 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab6e:	f003 0310 	and.w	r3, r3, #16
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d03f      	beq.n	800abf6 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7c:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	69da      	ldr	r2, [r3, #28]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab86:	4413      	add	r3, r2
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	b2d2      	uxtb	r2, r2
 800ab8c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	0a19      	lsrs	r1, r3, #8
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	69da      	ldr	r2, [r3, #28]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	b2ca      	uxtb	r2, r1
 800aba0:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	0c19      	lsrs	r1, r3, #16
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69da      	ldr	r2, [r3, #28]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abae:	3302      	adds	r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	b2ca      	uxtb	r2, r1
 800abb4:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	0e19      	lsrs	r1, r3, #24
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	69da      	ldr	r2, [r3, #28]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc2:	3303      	adds	r3, #3
 800abc4:	4413      	add	r3, r2
 800abc6:	b2ca      	uxtb	r2, r1
 800abc8:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abce:	1d1a      	adds	r2, r3, #4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abdc:	429a      	cmp	r2, r3
 800abde:	d10a      	bne.n	800abf6 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	69d9      	ldr	r1, [r3, #28]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe8:	461a      	mov	r2, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7fe fe5f 	bl	80098ae <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	617b      	str	r3, [r7, #20]
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1ac      	bne.n	800ab5c <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac06:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac0e:	f003 0310 	and.w	r3, r3, #16
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d004      	beq.n	800ac20 <JPEG_DMA_PollResidualData+0xd2>
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d133      	bne.n	800ac88 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f022 0201 	bic.w	r2, r2, #1
 800ac2e:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00a      	beq.n	800ac4e <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	69d9      	ldr	r1, [r3, #28]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac40:	461a      	mov	r2, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7fe fe33 	bl	80098ae <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac52:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac58:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d103      	bne.n	800ac82 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7fe fe02 	bl	8009884 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800ac80:	e002      	b.n	800ac88 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7fe fdf4 	bl	8009870 <HAL_JPEG_EncodeCpltCallback>
}
 800ac88:	bf00      	nop
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b08b      	sub	sp, #44	@ 0x2c
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3350      	adds	r3, #80	@ 0x50
 800aca2:	61bb      	str	r3, [r7, #24]

  i = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800aca8:	e042      	b.n	800ad30 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800acb0:	2300      	movs	r3, #0
 800acb2:	61fb      	str	r3, [r7, #28]
 800acb4:	e033      	b.n	800ad1e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	00db      	lsls	r3, r3, #3
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	fa22 f303 	lsr.w	r3, r2, r3
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d103      	bne.n	800acd2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	3364      	adds	r3, #100	@ 0x64
 800acce:	627b      	str	r3, [r7, #36]	@ 0x24
 800acd0:	e022      	b.n	800ad18 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2264      	movs	r2, #100	@ 0x64
 800acd6:	fb02 f303 	mul.w	r3, r2, r3
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800acde:	6a38      	ldr	r0, [r7, #32]
 800ace0:	69f9      	ldr	r1, [r7, #28]
 800ace2:	4401      	add	r1, r0
 800ace4:	4818      	ldr	r0, [pc, #96]	@ (800ad48 <JPEG_GetQuality+0xb8>)
 800ace6:	5c41      	ldrb	r1, [r0, r1]
 800ace8:	440a      	add	r2, r1
 800acea:	7812      	ldrb	r2, [r2, #0]
 800acec:	fbb3 f3f2 	udiv	r3, r3, r2
 800acf0:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b64      	cmp	r3, #100	@ 0x64
 800acf6:	d807      	bhi.n	800ad08 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800acfe:	085b      	lsrs	r3, r3, #1
 800ad00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad02:	4413      	add	r3, r2
 800ad04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad06:	e007      	b.n	800ad18 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800ad08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad14:	4413      	add	r3, r2
 800ad16:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	61fb      	str	r3, [r7, #28]
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d9c8      	bls.n	800acb6 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	3304      	adds	r3, #4
 800ad28:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	2b3c      	cmp	r3, #60	@ 0x3c
 800ad34:	d9b9      	bls.n	800acaa <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800ad36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad38:	099b      	lsrs	r3, r3, #6
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	372c      	adds	r7, #44	@ 0x2c
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	08017cf8 	.word	0x08017cf8

0800ad4c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ad54:	f7f7 faaa 	bl	80022ac <HAL_GetTick>
 800ad58:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e03b      	b.n	800addc <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68da      	ldr	r2, [r3, #12]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f022 0201 	bic.w	r2, r2, #1
 800ad82:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ad84:	e00f      	b.n	800ada6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ad86:	f7f7 fa91 	bl	80022ac <HAL_GetTick>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	2b05      	cmp	r3, #5
 800ad92:	d908      	bls.n	800ada6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2240      	movs	r2, #64	@ 0x40
 800ad98:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2203      	movs	r2, #3
 800ad9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e01a      	b.n	800addc <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1e8      	bne.n	800ad86 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f9e3 	bl	800b180 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e03e      	b.n	800ae7c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d101      	bne.n	800ae0c <HAL_MDMA_ConfigPostRequestMask+0x28>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	e037      	b.n	800ae7c <HAL_MDMA_ConfigPostRequestMask+0x98>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d126      	bne.n	800ae6e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d11c      	bne.n	800ae68 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d108      	bne.n	800ae56 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	691a      	ldr	r2, [r3, #16]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ae52:	611a      	str	r2, [r3, #16]
 800ae54:	e00d      	b.n	800ae72 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	691a      	ldr	r2, [r3, #16]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ae64:	611a      	str	r2, [r3, #16]
 800ae66:	e004      	b.n	800ae72 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	75fb      	strb	r3, [r7, #23]
 800ae6c:	e001      	b.n	800ae72 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e017      	b.n	800aeca <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d004      	beq.n	800aeb0 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2280      	movs	r2, #128	@ 0x80
 800aeaa:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e00c      	b.n	800aeca <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2204      	movs	r2, #4
 800aeb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f022 0201 	bic.w	r2, r2, #1
 800aec6:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aee4:	4b91      	ldr	r3, [pc, #580]	@ (800b12c <HAL_MDMA_IRQHandler+0x254>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a91      	ldr	r2, [pc, #580]	@ (800b130 <HAL_MDMA_IRQHandler+0x258>)
 800aeea:	fba2 2303 	umull	r2, r3, r2, r3
 800aeee:	0a9b      	lsrs	r3, r3, #10
 800aef0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	4b8e      	ldr	r3, [pc, #568]	@ (800b134 <HAL_MDMA_IRQHandler+0x25c>)
 800aefa:	4413      	add	r3, r2
 800aefc:	099b      	lsrs	r3, r3, #6
 800aefe:	f003 031f 	and.w	r3, r3, #31
 800af02:	2201      	movs	r2, #1
 800af04:	fa02 f303 	lsl.w	r3, r2, r3
 800af08:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800af0a:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	4013      	ands	r3, r2
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 812d 	beq.w	800b174 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b00      	cmp	r3, #0
 800af26:	d054      	beq.n	800afd2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d04d      	beq.n	800afd2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0202 	bic.w	r2, r2, #2
 800af44:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af54:	2b00      	cmp	r3, #0
 800af56:	d106      	bne.n	800af66 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af5c:	f043 0201 	orr.w	r2, r3, #1
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	669a      	str	r2, [r3, #104]	@ 0x68
 800af64:	e005      	b.n	800af72 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af6a:	f043 0202 	orr.w	r2, r3, #2
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d005      	beq.n	800af88 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af80:	f043 0204 	orr.w	r2, r3, #4
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af96:	f043 0208 	orr.w	r2, r3, #8
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afac:	f043 0210 	orr.w	r2, r3, #16
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afc2:	f043 0220 	orr.w	r2, r3, #32
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2201      	movs	r2, #1
 800afd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0310 	and.w	r3, r3, #16
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d012      	beq.n	800b006 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f003 0320 	and.w	r3, r3, #32
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2210      	movs	r2, #16
 800aff4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 0308 	and.w	r3, r3, #8
 800b010:	2b00      	cmp	r3, #0
 800b012:	d012      	beq.n	800b03a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	f003 0310 	and.w	r3, r3, #16
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00b      	beq.n	800b03a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2208      	movs	r2, #8
 800b028:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	2b00      	cmp	r3, #0
 800b046:	d012      	beq.n	800b06e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00b      	beq.n	800b06e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2204      	movs	r2, #4
 800b05c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b062:	2b00      	cmp	r3, #0
 800b064:	d003      	beq.n	800b06e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0302 	and.w	r3, r3, #2
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d039      	beq.n	800b0f0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f003 0304 	and.w	r3, r3, #4
 800b086:	2b00      	cmp	r3, #0
 800b088:	d032      	beq.n	800b0f0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68da      	ldr	r2, [r3, #12]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800b098:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d110      	bne.n	800b0c8 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d05c      	beq.n	800b178 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
        }
        return;
 800b0c6:	e057      	b.n	800b178 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d040      	beq.n	800b17a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2204      	movs	r2, #4
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68da      	ldr	r2, [r3, #12]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f022 0201 	bic.w	r2, r2, #1
 800b10e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	3301      	adds	r3, #1
 800b114:	60bb      	str	r3, [r7, #8]
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d30d      	bcc.n	800b138 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	f003 0301 	and.w	r3, r3, #1
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1f2      	bne.n	800b110 <HAL_MDMA_IRQHandler+0x238>
 800b12a:	e006      	b.n	800b13a <HAL_MDMA_IRQHandler+0x262>
 800b12c:	24000004 	.word	0x24000004
 800b130:	1b4e81b5 	.word	0x1b4e81b5
 800b134:	adffffc0 	.word	0xadffffc0
        break;
 800b138:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d004      	beq.n	800b15a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2203      	movs	r2, #3
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b158:	e003      	b.n	800b162 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b166:	2b00      	cmp	r3, #0
 800b168:	d007      	beq.n	800b17a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	4798      	blx	r3
 800b172:	e002      	b.n	800b17a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800b174:	bf00      	nop
 800b176:	e000      	b.n	800b17a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800b178:	bf00      	nop
    }
  }
}
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68d9      	ldr	r1, [r3, #12]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	691a      	ldr	r2, [r3, #16]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	430a      	orrs	r2, r1
 800b196:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	695a      	ldr	r2, [r3, #20]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b1a6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a1b      	ldr	r3, [r3, #32]
 800b1ac:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800b1b2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800b1be:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800b1c8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800b1d4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800b1d6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1e0:	d107      	bne.n	800b1f2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	691a      	ldr	r2, [r3, #16]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800b1f0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	da11      	bge.n	800b226 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	695a      	ldr	r2, [r3, #20]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b210:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b216:	425b      	negs	r3, r3
 800b218:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	b292      	uxth	r2, r2
 800b222:	621a      	str	r2, [r3, #32]
 800b224:	e006      	b.n	800b234 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b22a:	461a      	mov	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	b292      	uxth	r2, r2
 800b232:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b238:	2b00      	cmp	r3, #0
 800b23a:	da15      	bge.n	800b268 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	695a      	ldr	r2, [r3, #20]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800b24a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b250:	425b      	negs	r3, r3
 800b252:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6a19      	ldr	r1, [r3, #32]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	041a      	lsls	r2, r3, #16
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	430a      	orrs	r2, r1
 800b264:	621a      	str	r2, [r3, #32]
 800b266:	e009      	b.n	800b27c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6a19      	ldr	r1, [r3, #32]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b272:	041a      	lsls	r2, r3, #16
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b284:	d006      	beq.n	800b294 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685a      	ldr	r2, [r3, #4]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	b2d2      	uxtb	r2, r2
 800b290:	629a      	str	r2, [r3, #40]	@ 0x28
 800b292:	e003      	b.n	800b29c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2200      	movs	r2, #0
 800b29a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b2a4:	bf00      	nop
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e0fe      	b.n	800b4c0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d106      	bne.n	800b2dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f00b fa8c 	bl	80167f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2203      	movs	r2, #3
 800b2e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f007 fe3c 	bl	8012f66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6818      	ldr	r0, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7c1a      	ldrb	r2, [r3, #16]
 800b2f6:	f88d 2000 	strb.w	r2, [sp]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2fe:	f007 fd0d 	bl	8012d1c <USB_CoreInit>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d005      	beq.n	800b314 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e0d5      	b.n	800b4c0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2100      	movs	r1, #0
 800b31a:	4618      	mov	r0, r3
 800b31c:	f007 fe34 	bl	8012f88 <USB_SetCurrentMode>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d005      	beq.n	800b332 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2202      	movs	r2, #2
 800b32a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e0c6      	b.n	800b4c0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]
 800b336:	e04a      	b.n	800b3ce <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b338:	7bfa      	ldrb	r2, [r7, #15]
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	4613      	mov	r3, r2
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	440b      	add	r3, r1
 800b346:	3315      	adds	r3, #21
 800b348:	2201      	movs	r2, #1
 800b34a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b34c:	7bfa      	ldrb	r2, [r7, #15]
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	4613      	mov	r3, r2
 800b352:	00db      	lsls	r3, r3, #3
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	440b      	add	r3, r1
 800b35a:	3314      	adds	r3, #20
 800b35c:	7bfa      	ldrb	r2, [r7, #15]
 800b35e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b360:	7bfa      	ldrb	r2, [r7, #15]
 800b362:	7bfb      	ldrb	r3, [r7, #15]
 800b364:	b298      	uxth	r0, r3
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	4613      	mov	r3, r2
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	440b      	add	r3, r1
 800b372:	332e      	adds	r3, #46	@ 0x2e
 800b374:	4602      	mov	r2, r0
 800b376:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b378:	7bfa      	ldrb	r2, [r7, #15]
 800b37a:	6879      	ldr	r1, [r7, #4]
 800b37c:	4613      	mov	r3, r2
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	4413      	add	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	440b      	add	r3, r1
 800b386:	3318      	adds	r3, #24
 800b388:	2200      	movs	r2, #0
 800b38a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b38c:	7bfa      	ldrb	r2, [r7, #15]
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	4613      	mov	r3, r2
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	4413      	add	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	440b      	add	r3, r1
 800b39a:	331c      	adds	r3, #28
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b3a0:	7bfa      	ldrb	r2, [r7, #15]
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	3320      	adds	r3, #32
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b3b4:	7bfa      	ldrb	r2, [r7, #15]
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	4413      	add	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	440b      	add	r3, r1
 800b3c2:	3324      	adds	r3, #36	@ 0x24
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	73fb      	strb	r3, [r7, #15]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	791b      	ldrb	r3, [r3, #4]
 800b3d2:	7bfa      	ldrb	r2, [r7, #15]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d3af      	bcc.n	800b338 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	73fb      	strb	r3, [r7, #15]
 800b3dc:	e044      	b.n	800b468 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b3de:	7bfa      	ldrb	r2, [r7, #15]
 800b3e0:	6879      	ldr	r1, [r7, #4]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	440b      	add	r3, r1
 800b3ec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b3f4:	7bfa      	ldrb	r2, [r7, #15]
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	4413      	add	r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	440b      	add	r3, r1
 800b402:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b406:	7bfa      	ldrb	r2, [r7, #15]
 800b408:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b40a:	7bfa      	ldrb	r2, [r7, #15]
 800b40c:	6879      	ldr	r1, [r7, #4]
 800b40e:	4613      	mov	r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	440b      	add	r3, r1
 800b418:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b420:	7bfa      	ldrb	r2, [r7, #15]
 800b422:	6879      	ldr	r1, [r7, #4]
 800b424:	4613      	mov	r3, r2
 800b426:	00db      	lsls	r3, r3, #3
 800b428:	4413      	add	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	440b      	add	r3, r1
 800b42e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b432:	2200      	movs	r2, #0
 800b434:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b436:	7bfa      	ldrb	r2, [r7, #15]
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	4613      	mov	r3, r2
 800b43c:	00db      	lsls	r3, r3, #3
 800b43e:	4413      	add	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	440b      	add	r3, r1
 800b444:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b448:	2200      	movs	r2, #0
 800b44a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b44c:	7bfa      	ldrb	r2, [r7, #15]
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	4613      	mov	r3, r2
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	4413      	add	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	440b      	add	r3, r1
 800b45a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b45e:	2200      	movs	r2, #0
 800b460:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	3301      	adds	r3, #1
 800b466:	73fb      	strb	r3, [r7, #15]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	791b      	ldrb	r3, [r3, #4]
 800b46c:	7bfa      	ldrb	r2, [r7, #15]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d3b5      	bcc.n	800b3de <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6818      	ldr	r0, [r3, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	7c1a      	ldrb	r2, [r3, #16]
 800b47a:	f88d 2000 	strb.w	r2, [sp]
 800b47e:	3304      	adds	r3, #4
 800b480:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b482:	f007 fdcd 	bl	8013020 <USB_DevInit>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2202      	movs	r2, #2
 800b490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e013      	b.n	800b4c0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	7b1b      	ldrb	r3, [r3, #12]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d102      	bne.n	800b4b4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f001 f96e 	bl	800c790 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f008 fe10 	bl	80140de <USB_DevDisconnect>

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d101      	bne.n	800b4e4 <HAL_PCD_Start+0x1c>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	e022      	b.n	800b52a <HAL_PCD_Start+0x62>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d009      	beq.n	800b50c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d105      	bne.n	800b50c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b504:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4618      	mov	r0, r3
 800b512:	f007 fd17 	bl	8012f44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f008 fdbe 	bl	801409c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b532:	b590      	push	{r4, r7, lr}
 800b534:	b08d      	sub	sp, #52	@ 0x34
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4618      	mov	r0, r3
 800b54a:	f008 fe7c 	bl	8014246 <USB_GetMode>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	f040 84b9 	bne.w	800bec8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f008 fde0 	bl	8014120 <USB_ReadInterrupts>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	f000 84af 	beq.w	800bec6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	0a1b      	lsrs	r3, r3, #8
 800b572:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4618      	mov	r0, r3
 800b582:	f008 fdcd 	bl	8014120 <USB_ReadInterrupts>
 800b586:	4603      	mov	r3, r0
 800b588:	f003 0302 	and.w	r3, r3, #2
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d107      	bne.n	800b5a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	695a      	ldr	r2, [r3, #20]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f002 0202 	and.w	r2, r2, #2
 800b59e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f008 fdbb 	bl	8014120 <USB_ReadInterrupts>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f003 0310 	and.w	r3, r3, #16
 800b5b0:	2b10      	cmp	r3, #16
 800b5b2:	d161      	bne.n	800b678 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	699a      	ldr	r2, [r3, #24]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f022 0210 	bic.w	r2, r2, #16
 800b5c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	f003 020f 	and.w	r2, r3, #15
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	4413      	add	r3, r2
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b5ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5ee:	d124      	bne.n	800b63a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d035      	beq.n	800b668 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	091b      	lsrs	r3, r3, #4
 800b604:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	461a      	mov	r2, r3
 800b60e:	6a38      	ldr	r0, [r7, #32]
 800b610:	f008 fbf2 	bl	8013df8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	091b      	lsrs	r3, r3, #4
 800b61c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b620:	441a      	add	r2, r3
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	695a      	ldr	r2, [r3, #20]
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	091b      	lsrs	r3, r3, #4
 800b62e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b632:	441a      	add	r2, r3
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	615a      	str	r2, [r3, #20]
 800b638:	e016      	b.n	800b668 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b640:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b644:	d110      	bne.n	800b668 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b64c:	2208      	movs	r2, #8
 800b64e:	4619      	mov	r1, r3
 800b650:	6a38      	ldr	r0, [r7, #32]
 800b652:	f008 fbd1 	bl	8013df8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	695a      	ldr	r2, [r3, #20]
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	091b      	lsrs	r3, r3, #4
 800b65e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b662:	441a      	add	r2, r3
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	699a      	ldr	r2, [r3, #24]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f042 0210 	orr.w	r2, r2, #16
 800b676:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f008 fd4f 	bl	8014120 <USB_ReadInterrupts>
 800b682:	4603      	mov	r3, r0
 800b684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b688:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b68c:	f040 80a7 	bne.w	800b7de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4618      	mov	r0, r3
 800b69a:	f008 fd54 	bl	8014146 <USB_ReadDevAllOutEpInterrupt>
 800b69e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b6a0:	e099      	b.n	800b7d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 808e 	beq.w	800b7ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6b4:	b2d2      	uxtb	r2, r2
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f008 fd78 	bl	80141ae <USB_ReadDevOutEPInterrupt>
 800b6be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00c      	beq.n	800b6e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	2301      	movs	r3, #1
 800b6da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b6dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fed0 	bl	800c484 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	f003 0308 	and.w	r3, r3, #8
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00c      	beq.n	800b708 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f0:	015a      	lsls	r2, r3, #5
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b700:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 ffa6 	bl	800c654 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f003 0310 	and.w	r3, r3, #16
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d008      	beq.n	800b724 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b71e:	461a      	mov	r2, r3
 800b720:	2310      	movs	r3, #16
 800b722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f003 0302 	and.w	r3, r3, #2
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d030      	beq.n	800b790 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b72e:	6a3b      	ldr	r3, [r7, #32]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b736:	2b80      	cmp	r3, #128	@ 0x80
 800b738:	d109      	bne.n	800b74e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	69fa      	ldr	r2, [r7, #28]
 800b744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b748:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b74c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b750:	4613      	mov	r3, r2
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	4413      	add	r3, r2
 800b760:	3304      	adds	r3, #4
 800b762:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	78db      	ldrb	r3, [r3, #3]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d108      	bne.n	800b77e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2200      	movs	r2, #0
 800b770:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b774:	b2db      	uxtb	r3, r3
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f00b f961 	bl	8016a40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b78a:	461a      	mov	r2, r3
 800b78c:	2302      	movs	r3, #2
 800b78e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f003 0320 	and.w	r3, r3, #32
 800b796:	2b00      	cmp	r3, #0
 800b798:	d008      	beq.n	800b7ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	2320      	movs	r3, #32
 800b7aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d009      	beq.n	800b7ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	015a      	lsls	r2, r3, #5
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	4413      	add	r3, r2
 800b7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b7c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d2:	085b      	lsrs	r3, r3, #1
 800b7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f47f af62 	bne.w	800b6a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f008 fc9c 	bl	8014120 <USB_ReadInterrupts>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b7ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7f2:	f040 80db 	bne.w	800b9ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f008 fcbd 	bl	801417a <USB_ReadDevAllInEpInterrupt>
 800b800:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b806:	e0cd      	b.n	800b9a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 80c2 	beq.w	800b998 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	4611      	mov	r1, r2
 800b81e:	4618      	mov	r0, r3
 800b820:	f008 fce3 	bl	80141ea <USB_ReadDevInEPInterrupt>
 800b824:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f003 0301 	and.w	r3, r3, #1
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d057      	beq.n	800b8e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b832:	f003 030f 	and.w	r3, r3, #15
 800b836:	2201      	movs	r2, #1
 800b838:	fa02 f303 	lsl.w	r3, r2, r3
 800b83c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	43db      	mvns	r3, r3
 800b84a:	69f9      	ldr	r1, [r7, #28]
 800b84c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b850:	4013      	ands	r3, r2
 800b852:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b856:	015a      	lsls	r2, r3, #5
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b860:	461a      	mov	r2, r3
 800b862:	2301      	movs	r3, #1
 800b864:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	799b      	ldrb	r3, [r3, #6]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d132      	bne.n	800b8d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b872:	4613      	mov	r3, r2
 800b874:	00db      	lsls	r3, r3, #3
 800b876:	4413      	add	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	440b      	add	r3, r1
 800b87c:	3320      	adds	r3, #32
 800b87e:	6819      	ldr	r1, [r3, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b884:	4613      	mov	r3, r2
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4403      	add	r3, r0
 800b88e:	331c      	adds	r3, #28
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4419      	add	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b898:	4613      	mov	r3, r2
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4403      	add	r3, r0
 800b8a2:	3320      	adds	r3, #32
 800b8a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d113      	bne.n	800b8d4 <HAL_PCD_IRQHandler+0x3a2>
 800b8ac:	6879      	ldr	r1, [r7, #4]
 800b8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	4413      	add	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	440b      	add	r3, r1
 800b8ba:	3324      	adds	r3, #36	@ 0x24
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d108      	bne.n	800b8d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6818      	ldr	r0, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	f008 fcec 	bl	80142ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f00b f82b 	bl	8016936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	f003 0308 	and.w	r3, r3, #8
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d008      	beq.n	800b8fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ec:	015a      	lsls	r2, r3, #5
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	2308      	movs	r3, #8
 800b8fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	f003 0310 	and.w	r3, r3, #16
 800b902:	2b00      	cmp	r3, #0
 800b904:	d008      	beq.n	800b918 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b908:	015a      	lsls	r2, r3, #5
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	4413      	add	r3, r2
 800b90e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b912:	461a      	mov	r2, r3
 800b914:	2310      	movs	r3, #16
 800b916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d008      	beq.n	800b934 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b924:	015a      	lsls	r2, r3, #5
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	4413      	add	r3, r2
 800b92a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b92e:	461a      	mov	r2, r3
 800b930:	2340      	movs	r3, #64	@ 0x40
 800b932:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	f003 0302 	and.w	r3, r3, #2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d023      	beq.n	800b986 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b93e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b940:	6a38      	ldr	r0, [r7, #32]
 800b942:	f007 fccb 	bl	80132dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b948:	4613      	mov	r3, r2
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	4413      	add	r3, r2
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	3310      	adds	r3, #16
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	4413      	add	r3, r2
 800b956:	3304      	adds	r3, #4
 800b958:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	78db      	ldrb	r3, [r3, #3]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d108      	bne.n	800b974 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2200      	movs	r2, #0
 800b966:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f00b f878 	bl	8016a64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b976:	015a      	lsls	r2, r3, #5
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	4413      	add	r3, r2
 800b97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b980:	461a      	mov	r2, r3
 800b982:	2302      	movs	r3, #2
 800b984:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fcea 	bl	800c36c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99a:	3301      	adds	r3, #1
 800b99c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a0:	085b      	lsrs	r3, r3, #1
 800b9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f47f af2e 	bne.w	800b808 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f008 fbb5 	bl	8014120 <USB_ReadInterrupts>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9c0:	d122      	bne.n	800ba08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9d0:	f023 0301 	bic.w	r3, r3, #1
 800b9d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d108      	bne.n	800b9f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fef4 	bl	800c7d8 <HAL_PCDEx_LPM_Callback>
 800b9f0:	e002      	b.n	800b9f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f00b f816 	bl	8016a24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	695a      	ldr	r2, [r3, #20]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800ba06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f008 fb87 	bl	8014120 <USB_ReadInterrupts>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba1c:	d112      	bne.n	800ba44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d102      	bne.n	800ba34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f00a ffd2 	bl	80169d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	695a      	ldr	r2, [r3, #20]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800ba42:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f008 fb69 	bl	8014120 <USB_ReadInterrupts>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba58:	d121      	bne.n	800ba9e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	695a      	ldr	r2, [r3, #20]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800ba68:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d111      	bne.n	800ba98 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba82:	089b      	lsrs	r3, r3, #2
 800ba84:	f003 020f 	and.w	r2, r3, #15
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ba8e:	2101      	movs	r1, #1
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fea1 	bl	800c7d8 <HAL_PCDEx_LPM_Callback>
 800ba96:	e002      	b.n	800ba9e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f00a ff9d 	bl	80169d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f008 fb3c 	bl	8014120 <USB_ReadInterrupts>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800baae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bab2:	f040 80b7 	bne.w	800bc24 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	69fa      	ldr	r2, [r7, #28]
 800bac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bac4:	f023 0301 	bic.w	r3, r3, #1
 800bac8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2110      	movs	r1, #16
 800bad0:	4618      	mov	r0, r3
 800bad2:	f007 fc03 	bl	80132dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bad6:	2300      	movs	r3, #0
 800bad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bada:	e046      	b.n	800bb6a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800badc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bade:	015a      	lsls	r2, r3, #5
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bae8:	461a      	mov	r2, r3
 800baea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800baee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb00:	0151      	lsls	r1, r2, #5
 800bb02:	69fa      	ldr	r2, [r7, #28]
 800bb04:	440a      	add	r2, r1
 800bb06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb22:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb26:	015a      	lsls	r2, r3, #5
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb34:	0151      	lsls	r1, r2, #5
 800bb36:	69fa      	ldr	r2, [r7, #28]
 800bb38:	440a      	add	r2, r1
 800bb3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb46:	015a      	lsls	r2, r3, #5
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb54:	0151      	lsls	r1, r2, #5
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	440a      	add	r2, r1
 800bb5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb62:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb66:	3301      	adds	r3, #1
 800bb68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	791b      	ldrb	r3, [r3, #4]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d3b2      	bcc.n	800badc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	69fa      	ldr	r2, [r7, #28]
 800bb80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb84:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bb88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7bdb      	ldrb	r3, [r3, #15]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d016      	beq.n	800bbc0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb9c:	69fa      	ldr	r2, [r7, #28]
 800bb9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bba2:	f043 030b 	orr.w	r3, r3, #11
 800bba6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb2:	69fa      	ldr	r2, [r7, #28]
 800bbb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbb8:	f043 030b 	orr.w	r3, r3, #11
 800bbbc:	6453      	str	r3, [r2, #68]	@ 0x44
 800bbbe:	e015      	b.n	800bbec <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc6:	695a      	ldr	r2, [r3, #20]
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbce:	4619      	mov	r1, r3
 800bbd0:	f242 032b 	movw	r3, #8235	@ 0x202b
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	69fa      	ldr	r2, [r7, #28]
 800bbe2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbe6:	f043 030b 	orr.w	r3, r3, #11
 800bbea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	69fa      	ldr	r2, [r7, #28]
 800bbf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbfa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bbfe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f008 fb4c 	bl	80142ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	695a      	ldr	r2, [r3, #20]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800bc22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f008 fa79 	bl	8014120 <USB_ReadInterrupts>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc38:	d123      	bne.n	800bc82 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f008 fb10 	bl	8014264 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f007 fbc0 	bl	80133ce <USB_GetDevSpeed>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	461a      	mov	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681c      	ldr	r4, [r3, #0]
 800bc5a:	f001 fd9d 	bl	800d798 <HAL_RCC_GetHCLKFreq>
 800bc5e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc64:	461a      	mov	r2, r3
 800bc66:	4620      	mov	r0, r4
 800bc68:	f007 f8ca 	bl	8012e00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f00a fe8a 	bl	8016986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	695a      	ldr	r2, [r3, #20]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bc80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f008 fa4a 	bl	8014120 <USB_ReadInterrupts>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	f003 0308 	and.w	r3, r3, #8
 800bc92:	2b08      	cmp	r3, #8
 800bc94:	d10a      	bne.n	800bcac <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f00a fe67 	bl	801696a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	695a      	ldr	r2, [r3, #20]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f002 0208 	and.w	r2, r2, #8
 800bcaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f008 fa35 	bl	8014120 <USB_ReadInterrupts>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcbc:	2b80      	cmp	r3, #128	@ 0x80
 800bcbe:	d123      	bne.n	800bd08 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bcc8:	6a3b      	ldr	r3, [r7, #32]
 800bcca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bccc:	2301      	movs	r3, #1
 800bcce:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcd0:	e014      	b.n	800bcfc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	4413      	add	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	440b      	add	r3, r1
 800bce0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d105      	bne.n	800bcf6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 fb0a 	bl	800c30a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	791b      	ldrb	r3, [r3, #4]
 800bd00:	461a      	mov	r2, r3
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d3e4      	bcc.n	800bcd2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f008 fa07 	bl	8014120 <USB_ReadInterrupts>
 800bd12:	4603      	mov	r3, r0
 800bd14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd1c:	d13c      	bne.n	800bd98 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd1e:	2301      	movs	r3, #1
 800bd20:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd22:	e02b      	b.n	800bd7c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd34:	6879      	ldr	r1, [r7, #4]
 800bd36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd38:	4613      	mov	r3, r2
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	440b      	add	r3, r1
 800bd42:	3318      	adds	r3, #24
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d115      	bne.n	800bd76 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bd4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	da12      	bge.n	800bd76 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd54:	4613      	mov	r3, r2
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	4413      	add	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	440b      	add	r3, r1
 800bd5e:	3317      	adds	r3, #23
 800bd60:	2201      	movs	r2, #1
 800bd62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 faca 	bl	800c30a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd78:	3301      	adds	r3, #1
 800bd7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	791b      	ldrb	r3, [r3, #4]
 800bd80:	461a      	mov	r2, r3
 800bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d3cd      	bcc.n	800bd24 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	695a      	ldr	r2, [r3, #20]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bd96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f008 f9bf 	bl	8014120 <USB_ReadInterrupts>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bda8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdac:	d156      	bne.n	800be5c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bdae:	2301      	movs	r3, #1
 800bdb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdb2:	e045      	b.n	800be40 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bdc4:	6879      	ldr	r1, [r7, #4]
 800bdc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdc8:	4613      	mov	r3, r2
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	4413      	add	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	440b      	add	r3, r1
 800bdd2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d12e      	bne.n	800be3a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bddc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	da2b      	bge.n	800be3a <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	0c1a      	lsrs	r2, r3, #16
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800bdec:	4053      	eors	r3, r2
 800bdee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d121      	bne.n	800be3a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	4413      	add	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	440b      	add	r3, r1
 800be04:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800be08:	2201      	movs	r2, #1
 800be0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800be0c:	6a3b      	ldr	r3, [r7, #32]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	69fa      	ldr	r2, [r7, #28]
 800be2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be36:	6053      	str	r3, [r2, #4]
            break;
 800be38:	e008      	b.n	800be4c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3c:	3301      	adds	r3, #1
 800be3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	791b      	ldrb	r3, [r3, #4]
 800be44:	461a      	mov	r2, r3
 800be46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be48:	4293      	cmp	r3, r2
 800be4a:	d3b3      	bcc.n	800bdb4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	695a      	ldr	r2, [r3, #20]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800be5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4618      	mov	r0, r3
 800be62:	f008 f95d 	bl	8014120 <USB_ReadInterrupts>
 800be66:	4603      	mov	r3, r0
 800be68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be70:	d10a      	bne.n	800be88 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f00a fe08 	bl	8016a88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	695a      	ldr	r2, [r3, #20]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800be86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f008 f947 	bl	8014120 <USB_ReadInterrupts>
 800be92:	4603      	mov	r3, r0
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b04      	cmp	r3, #4
 800be9a:	d115      	bne.n	800bec8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	f003 0304 	and.w	r3, r3, #4
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f00a fdf8 	bl	8016aa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6859      	ldr	r1, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	605a      	str	r2, [r3, #4]
 800bec4:	e000      	b.n	800bec8 <HAL_PCD_IRQHandler+0x996>
      return;
 800bec6:	bf00      	nop
    }
  }
}
 800bec8:	3734      	adds	r7, #52	@ 0x34
 800beca:	46bd      	mov	sp, r7
 800becc:	bd90      	pop	{r4, r7, pc}

0800bece <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	460b      	mov	r3, r1
 800bed8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d101      	bne.n	800bee8 <HAL_PCD_SetAddress+0x1a>
 800bee4:	2302      	movs	r3, #2
 800bee6:	e012      	b.n	800bf0e <HAL_PCD_SetAddress+0x40>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	78fa      	ldrb	r2, [r7, #3]
 800bef4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	78fa      	ldrb	r2, [r7, #3]
 800befc:	4611      	mov	r1, r2
 800befe:	4618      	mov	r0, r3
 800bf00:	f008 f8a6 	bl	8014050 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	461a      	mov	r2, r3
 800bf24:	4603      	mov	r3, r0
 800bf26:	70fb      	strb	r3, [r7, #3]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	803b      	strh	r3, [r7, #0]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bf34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	da0f      	bge.n	800bf5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf3c:	78fb      	ldrb	r3, [r7, #3]
 800bf3e:	f003 020f 	and.w	r2, r3, #15
 800bf42:	4613      	mov	r3, r2
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	3310      	adds	r3, #16
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	4413      	add	r3, r2
 800bf50:	3304      	adds	r3, #4
 800bf52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2201      	movs	r2, #1
 800bf58:	705a      	strb	r2, [r3, #1]
 800bf5a:	e00f      	b.n	800bf7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	f003 020f 	and.w	r2, r3, #15
 800bf62:	4613      	mov	r3, r2
 800bf64:	00db      	lsls	r3, r3, #3
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	4413      	add	r3, r2
 800bf72:	3304      	adds	r3, #4
 800bf74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	f003 030f 	and.w	r3, r3, #15
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800bf88:	883b      	ldrh	r3, [r7, #0]
 800bf8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	78ba      	ldrb	r2, [r7, #2]
 800bf96:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	785b      	ldrb	r3, [r3, #1]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bfaa:	78bb      	ldrb	r3, [r7, #2]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d102      	bne.n	800bfb6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d101      	bne.n	800bfc4 <HAL_PCD_EP_Open+0xae>
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	e00e      	b.n	800bfe2 <HAL_PCD_EP_Open+0xcc>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68f9      	ldr	r1, [r7, #12]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f007 fa20 	bl	8013418 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800bfe0:	7afb      	ldrb	r3, [r7, #11]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	460b      	mov	r3, r1
 800bff4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	da0f      	bge.n	800c01e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bffe:	78fb      	ldrb	r3, [r7, #3]
 800c000:	f003 020f 	and.w	r2, r3, #15
 800c004:	4613      	mov	r3, r2
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	4413      	add	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	3310      	adds	r3, #16
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	4413      	add	r3, r2
 800c012:	3304      	adds	r3, #4
 800c014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2201      	movs	r2, #1
 800c01a:	705a      	strb	r2, [r3, #1]
 800c01c:	e00f      	b.n	800c03e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	f003 020f 	and.w	r2, r3, #15
 800c024:	4613      	mov	r3, r2
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	4413      	add	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	4413      	add	r3, r2
 800c034:	3304      	adds	r3, #4
 800c036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c03e:	78fb      	ldrb	r3, [r7, #3]
 800c040:	f003 030f 	and.w	r3, r3, #15
 800c044:	b2da      	uxtb	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <HAL_PCD_EP_Close+0x6e>
 800c054:	2302      	movs	r3, #2
 800c056:	e00e      	b.n	800c076 <HAL_PCD_EP_Close+0x8c>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68f9      	ldr	r1, [r7, #12]
 800c066:	4618      	mov	r0, r3
 800c068:	f007 fa5e 	bl	8013528 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b086      	sub	sp, #24
 800c082:	af00      	add	r7, sp, #0
 800c084:	60f8      	str	r0, [r7, #12]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
 800c08a:	460b      	mov	r3, r1
 800c08c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c08e:	7afb      	ldrb	r3, [r7, #11]
 800c090:	f003 020f 	and.w	r2, r3, #15
 800c094:	4613      	mov	r3, r2
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0c0:	7afb      	ldrb	r3, [r7, #11]
 800c0c2:	f003 030f 	and.w	r3, r3, #15
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	799b      	ldrb	r3, [r3, #6]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d102      	bne.n	800c0da <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6818      	ldr	r0, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	799b      	ldrb	r3, [r3, #6]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	6979      	ldr	r1, [r7, #20]
 800c0e6:	f007 fafb 	bl	80136e0 <USB_EPStartXfer>

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	f003 020f 	and.w	r2, r3, #15
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4613      	mov	r3, r2
 800c10a:	00db      	lsls	r3, r3, #3
 800c10c:	4413      	add	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	440b      	add	r3, r1
 800c112:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c116:	681b      	ldr	r3, [r3, #0]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	607a      	str	r2, [r7, #4]
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	460b      	mov	r3, r1
 800c132:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c134:	7afb      	ldrb	r3, [r7, #11]
 800c136:	f003 020f 	and.w	r2, r3, #15
 800c13a:	4613      	mov	r3, r2
 800c13c:	00db      	lsls	r3, r3, #3
 800c13e:	4413      	add	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	3310      	adds	r3, #16
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	4413      	add	r3, r2
 800c148:	3304      	adds	r3, #4
 800c14a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	2200      	movs	r2, #0
 800c15c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	2201      	movs	r2, #1
 800c162:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c164:	7afb      	ldrb	r3, [r7, #11]
 800c166:	f003 030f 	and.w	r3, r3, #15
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	799b      	ldrb	r3, [r3, #6]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d102      	bne.n	800c17e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6818      	ldr	r0, [r3, #0]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	799b      	ldrb	r3, [r3, #6]
 800c186:	461a      	mov	r2, r3
 800c188:	6979      	ldr	r1, [r7, #20]
 800c18a:	f007 faa9 	bl	80136e0 <USB_EPStartXfer>

  return HAL_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c1a4:	78fb      	ldrb	r3, [r7, #3]
 800c1a6:	f003 030f 	and.w	r3, r3, #15
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	7912      	ldrb	r2, [r2, #4]
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d901      	bls.n	800c1b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e04f      	b.n	800c256 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c1b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	da0f      	bge.n	800c1de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1be:	78fb      	ldrb	r3, [r7, #3]
 800c1c0:	f003 020f 	and.w	r2, r3, #15
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	3310      	adds	r3, #16
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	705a      	strb	r2, [r3, #1]
 800c1dc:	e00d      	b.n	800c1fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c1de:	78fa      	ldrb	r2, [r7, #3]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	f003 030f 	and.w	r3, r3, #15
 800c206:	b2da      	uxtb	r2, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <HAL_PCD_EP_SetStall+0x82>
 800c216:	2302      	movs	r3, #2
 800c218:	e01d      	b.n	800c256 <HAL_PCD_EP_SetStall+0xbe>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68f9      	ldr	r1, [r7, #12]
 800c228:	4618      	mov	r0, r3
 800c22a:	f007 fe3d 	bl	8013ea8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c22e:	78fb      	ldrb	r3, [r7, #3]
 800c230:	f003 030f 	and.w	r3, r3, #15
 800c234:	2b00      	cmp	r3, #0
 800c236:	d109      	bne.n	800c24c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6818      	ldr	r0, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7999      	ldrb	r1, [r3, #6]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c246:	461a      	mov	r2, r3
 800c248:	f008 f830 	bl	80142ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b084      	sub	sp, #16
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	460b      	mov	r3, r1
 800c268:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c26a:	78fb      	ldrb	r3, [r7, #3]
 800c26c:	f003 030f 	and.w	r3, r3, #15
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	7912      	ldrb	r2, [r2, #4]
 800c274:	4293      	cmp	r3, r2
 800c276:	d901      	bls.n	800c27c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	e042      	b.n	800c302 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c27c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c280:	2b00      	cmp	r3, #0
 800c282:	da0f      	bge.n	800c2a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	f003 020f 	and.w	r2, r3, #15
 800c28a:	4613      	mov	r3, r2
 800c28c:	00db      	lsls	r3, r3, #3
 800c28e:	4413      	add	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	3310      	adds	r3, #16
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	4413      	add	r3, r2
 800c298:	3304      	adds	r3, #4
 800c29a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	705a      	strb	r2, [r3, #1]
 800c2a2:	e00f      	b.n	800c2c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c2a4:	78fb      	ldrb	r3, [r7, #3]
 800c2a6:	f003 020f 	and.w	r2, r3, #15
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	00db      	lsls	r3, r3, #3
 800c2ae:	4413      	add	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2ca:	78fb      	ldrb	r3, [r7, #3]
 800c2cc:	f003 030f 	and.w	r3, r3, #15
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d101      	bne.n	800c2e4 <HAL_PCD_EP_ClrStall+0x86>
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	e00e      	b.n	800c302 <HAL_PCD_EP_ClrStall+0xa4>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68f9      	ldr	r1, [r7, #12]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f007 fe46 	bl	8013f84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	460b      	mov	r3, r1
 800c314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	da0c      	bge.n	800c338 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c31e:	78fb      	ldrb	r3, [r7, #3]
 800c320:	f003 020f 	and.w	r2, r3, #15
 800c324:	4613      	mov	r3, r2
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	3310      	adds	r3, #16
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	4413      	add	r3, r2
 800c332:	3304      	adds	r3, #4
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	e00c      	b.n	800c352 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c338:	78fb      	ldrb	r3, [r7, #3]
 800c33a:	f003 020f 	and.w	r2, r3, #15
 800c33e:	4613      	mov	r3, r2
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	4413      	add	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	4413      	add	r3, r2
 800c34e:	3304      	adds	r3, #4
 800c350:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68f9      	ldr	r1, [r7, #12]
 800c358:	4618      	mov	r0, r3
 800c35a:	f007 fc65 	bl	8013c28 <USB_EPStopXfer>
 800c35e:	4603      	mov	r3, r0
 800c360:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c362:	7afb      	ldrb	r3, [r7, #11]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08a      	sub	sp, #40	@ 0x28
 800c370:	af02      	add	r7, sp, #8
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	4613      	mov	r3, r2
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	3310      	adds	r3, #16
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	4413      	add	r3, r2
 800c390:	3304      	adds	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	695a      	ldr	r2, [r3, #20]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d901      	bls.n	800c3a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e06b      	b.n	800c47c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	691a      	ldr	r2, [r3, #16]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	1ad3      	subs	r3, r2, r3
 800c3ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	69fa      	ldr	r2, [r7, #28]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d902      	bls.n	800c3c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	3303      	adds	r3, #3
 800c3c4:	089b      	lsrs	r3, r3, #2
 800c3c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c3c8:	e02a      	b.n	800c420 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	691a      	ldr	r2, [r3, #16]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	69fa      	ldr	r2, [r7, #28]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d902      	bls.n	800c3e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	3303      	adds	r3, #3
 800c3ea:	089b      	lsrs	r3, r3, #2
 800c3ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	68d9      	ldr	r1, [r3, #12]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	4603      	mov	r3, r0
 800c402:	6978      	ldr	r0, [r7, #20]
 800c404:	f007 fcba 	bl	8013d7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	68da      	ldr	r2, [r3, #12]
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	441a      	add	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	695a      	ldr	r2, [r3, #20]
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	441a      	add	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	015a      	lsls	r2, r3, #5
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	4413      	add	r3, r2
 800c428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	429a      	cmp	r2, r3
 800c434:	d809      	bhi.n	800c44a <PCD_WriteEmptyTxFifo+0xde>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	695a      	ldr	r2, [r3, #20]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c43e:	429a      	cmp	r2, r3
 800c440:	d203      	bcs.n	800c44a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1bf      	bne.n	800c3ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	691a      	ldr	r2, [r3, #16]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	429a      	cmp	r2, r3
 800c454:	d811      	bhi.n	800c47a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	f003 030f 	and.w	r3, r3, #15
 800c45c:	2201      	movs	r2, #1
 800c45e:	fa02 f303 	lsl.w	r3, r2, r3
 800c462:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c46a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	43db      	mvns	r3, r3
 800c470:	6939      	ldr	r1, [r7, #16]
 800c472:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c476:	4013      	ands	r3, r2
 800c478:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3720      	adds	r7, #32
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b088      	sub	sp, #32
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	333c      	adds	r3, #60	@ 0x3c
 800c49c:	3304      	adds	r3, #4
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	799b      	ldrb	r3, [r3, #6]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d17b      	bne.n	800c5b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f003 0308 	and.w	r3, r3, #8
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d015      	beq.n	800c4f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	4a61      	ldr	r2, [pc, #388]	@ (800c64c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	f240 80b9 	bls.w	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 80b3 	beq.w	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	015a      	lsls	r2, r3, #5
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4ec:	6093      	str	r3, [r2, #8]
 800c4ee:	e0a7      	b.n	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	f003 0320 	and.w	r3, r3, #32
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d009      	beq.n	800c50e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	015a      	lsls	r2, r3, #5
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	4413      	add	r3, r2
 800c502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c506:	461a      	mov	r2, r3
 800c508:	2320      	movs	r3, #32
 800c50a:	6093      	str	r3, [r2, #8]
 800c50c:	e098      	b.n	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c514:	2b00      	cmp	r3, #0
 800c516:	f040 8093 	bne.w	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	4a4b      	ldr	r2, [pc, #300]	@ (800c64c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d90f      	bls.n	800c542 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00a      	beq.n	800c542 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c538:	461a      	mov	r2, r3
 800c53a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c53e:	6093      	str	r3, [r2, #8]
 800c540:	e07e      	b.n	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	4613      	mov	r3, r2
 800c546:	00db      	lsls	r3, r3, #3
 800c548:	4413      	add	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	4413      	add	r3, r2
 800c554:	3304      	adds	r3, #4
 800c556:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6a1a      	ldr	r2, [r3, #32]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	0159      	lsls	r1, r3, #5
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	440b      	add	r3, r1
 800c564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c56e:	1ad2      	subs	r2, r2, r3
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d114      	bne.n	800c5a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d109      	bne.n	800c596 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6818      	ldr	r0, [r3, #0]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c58c:	461a      	mov	r2, r3
 800c58e:	2101      	movs	r1, #1
 800c590:	f007 fe8c 	bl	80142ac <USB_EP0_OutStart>
 800c594:	e006      	b.n	800c5a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	68da      	ldr	r2, [r3, #12]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	695b      	ldr	r3, [r3, #20]
 800c59e:	441a      	add	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f00a f9a8 	bl	8016900 <HAL_PCD_DataOutStageCallback>
 800c5b0:	e046      	b.n	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	4a26      	ldr	r2, [pc, #152]	@ (800c650 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d124      	bne.n	800c604 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00a      	beq.n	800c5da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	015a      	lsls	r2, r3, #5
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5d6:	6093      	str	r3, [r2, #8]
 800c5d8:	e032      	b.n	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	f003 0320 	and.w	r3, r3, #32
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d008      	beq.n	800c5f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f00a f97f 	bl	8016900 <HAL_PCD_DataOutStageCallback>
 800c602:	e01d      	b.n	800c640 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d114      	bne.n	800c634 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c60a:	6879      	ldr	r1, [r7, #4]
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	4613      	mov	r3, r2
 800c610:	00db      	lsls	r3, r3, #3
 800c612:	4413      	add	r3, r2
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	440b      	add	r3, r1
 800c618:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d108      	bne.n	800c634 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6818      	ldr	r0, [r3, #0]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c62c:	461a      	mov	r2, r3
 800c62e:	2100      	movs	r1, #0
 800c630:	f007 fe3c 	bl	80142ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	b2db      	uxtb	r3, r3
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f00a f960 	bl	8016900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3720      	adds	r7, #32
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	4f54300a 	.word	0x4f54300a
 800c650:	4f54310a 	.word	0x4f54310a

0800c654 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	333c      	adds	r3, #60	@ 0x3c
 800c66c:	3304      	adds	r3, #4
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	015a      	lsls	r2, r3, #5
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	4413      	add	r3, r2
 800c67a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	4a15      	ldr	r2, [pc, #84]	@ (800c6dc <PCD_EP_OutSetupPacket_int+0x88>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d90e      	bls.n	800c6a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c690:	2b00      	cmp	r3, #0
 800c692:	d009      	beq.n	800c6a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	015a      	lsls	r2, r3, #5
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f00a f917 	bl	80168dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6dc <PCD_EP_OutSetupPacket_int+0x88>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d90c      	bls.n	800c6d0 <PCD_EP_OutSetupPacket_int+0x7c>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	799b      	ldrb	r3, [r3, #6]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d108      	bne.n	800c6d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	f007 fdee 	bl	80142ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	4f54300a 	.word	0x4f54300a

0800c6e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	70fb      	strb	r3, [r7, #3]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c6f8:	78fb      	ldrb	r3, [r7, #3]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d107      	bne.n	800c70e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c6fe:	883b      	ldrh	r3, [r7, #0]
 800c700:	0419      	lsls	r1, r3, #16
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	430a      	orrs	r2, r1
 800c70a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c70c:	e028      	b.n	800c760 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c714:	0c1b      	lsrs	r3, r3, #16
 800c716:	68ba      	ldr	r2, [r7, #8]
 800c718:	4413      	add	r3, r2
 800c71a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c71c:	2300      	movs	r3, #0
 800c71e:	73fb      	strb	r3, [r7, #15]
 800c720:	e00d      	b.n	800c73e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	7bfb      	ldrb	r3, [r7, #15]
 800c728:	3340      	adds	r3, #64	@ 0x40
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	4413      	add	r3, r2
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	0c1b      	lsrs	r3, r3, #16
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	4413      	add	r3, r2
 800c736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	3301      	adds	r3, #1
 800c73c:	73fb      	strb	r3, [r7, #15]
 800c73e:	7bfa      	ldrb	r2, [r7, #15]
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	3b01      	subs	r3, #1
 800c744:	429a      	cmp	r2, r3
 800c746:	d3ec      	bcc.n	800c722 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c748:	883b      	ldrh	r3, [r7, #0]
 800c74a:	0418      	lsls	r0, r3, #16
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6819      	ldr	r1, [r3, #0]
 800c750:	78fb      	ldrb	r3, [r7, #3]
 800c752:	3b01      	subs	r3, #1
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	4302      	orrs	r2, r0
 800c758:	3340      	adds	r3, #64	@ 0x40
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	440b      	add	r3, r1
 800c75e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
 800c776:	460b      	mov	r3, r1
 800c778:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	887a      	ldrh	r2, [r7, #2]
 800c780:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7be:	4b05      	ldr	r3, [pc, #20]	@ (800c7d4 <HAL_PCDEx_ActivateLPM+0x44>)
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	10000003 	.word	0x10000003

0800c7d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c7f8:	4b19      	ldr	r3, [pc, #100]	@ (800c860 <HAL_PWREx_ConfigSupply+0x70>)
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	f003 0304 	and.w	r3, r3, #4
 800c800:	2b04      	cmp	r3, #4
 800c802:	d00a      	beq.n	800c81a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c804:	4b16      	ldr	r3, [pc, #88]	@ (800c860 <HAL_PWREx_ConfigSupply+0x70>)
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	f003 0307 	and.w	r3, r3, #7
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d001      	beq.n	800c816 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e01f      	b.n	800c856 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c816:	2300      	movs	r3, #0
 800c818:	e01d      	b.n	800c856 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c81a:	4b11      	ldr	r3, [pc, #68]	@ (800c860 <HAL_PWREx_ConfigSupply+0x70>)
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	f023 0207 	bic.w	r2, r3, #7
 800c822:	490f      	ldr	r1, [pc, #60]	@ (800c860 <HAL_PWREx_ConfigSupply+0x70>)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4313      	orrs	r3, r2
 800c828:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c82a:	f7f5 fd3f 	bl	80022ac <HAL_GetTick>
 800c82e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c830:	e009      	b.n	800c846 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c832:	f7f5 fd3b 	bl	80022ac <HAL_GetTick>
 800c836:	4602      	mov	r2, r0
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c840:	d901      	bls.n	800c846 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	e007      	b.n	800c856 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c846:	4b06      	ldr	r3, [pc, #24]	@ (800c860 <HAL_PWREx_ConfigSupply+0x70>)
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c84e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c852:	d1ee      	bne.n	800c832 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	58024800 	.word	0x58024800

0800c864 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c864:	b480      	push	{r7}
 800c866:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c868:	4b05      	ldr	r3, [pc, #20]	@ (800c880 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	4a04      	ldr	r2, [pc, #16]	@ (800c880 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c86e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c872:	60d3      	str	r3, [r2, #12]
}
 800c874:	bf00      	nop
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	58024800 	.word	0x58024800

0800c884 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08c      	sub	sp, #48	@ 0x30
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d102      	bne.n	800c898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	f000 bc48 	b.w	800d128 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 8088 	beq.w	800c9b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8a6:	4b99      	ldr	r3, [pc, #612]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c8b0:	4b96      	ldr	r3, [pc, #600]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b8:	2b10      	cmp	r3, #16
 800c8ba:	d007      	beq.n	800c8cc <HAL_RCC_OscConfig+0x48>
 800c8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8be:	2b18      	cmp	r3, #24
 800c8c0:	d111      	bne.n	800c8e6 <HAL_RCC_OscConfig+0x62>
 800c8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c4:	f003 0303 	and.w	r3, r3, #3
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d10c      	bne.n	800c8e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8cc:	4b8f      	ldr	r3, [pc, #572]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d06d      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x130>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d169      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f000 bc21 	b.w	800d128 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8ee:	d106      	bne.n	800c8fe <HAL_RCC_OscConfig+0x7a>
 800c8f0:	4b86      	ldr	r3, [pc, #536]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a85      	ldr	r2, [pc, #532]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c8f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8fa:	6013      	str	r3, [r2, #0]
 800c8fc:	e02e      	b.n	800c95c <HAL_RCC_OscConfig+0xd8>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10c      	bne.n	800c920 <HAL_RCC_OscConfig+0x9c>
 800c906:	4b81      	ldr	r3, [pc, #516]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a80      	ldr	r2, [pc, #512]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c90c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	4b7e      	ldr	r3, [pc, #504]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a7d      	ldr	r2, [pc, #500]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c918:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c91c:	6013      	str	r3, [r2, #0]
 800c91e:	e01d      	b.n	800c95c <HAL_RCC_OscConfig+0xd8>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c928:	d10c      	bne.n	800c944 <HAL_RCC_OscConfig+0xc0>
 800c92a:	4b78      	ldr	r3, [pc, #480]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a77      	ldr	r2, [pc, #476]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	4b75      	ldr	r3, [pc, #468]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a74      	ldr	r2, [pc, #464]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c93c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c940:	6013      	str	r3, [r2, #0]
 800c942:	e00b      	b.n	800c95c <HAL_RCC_OscConfig+0xd8>
 800c944:	4b71      	ldr	r3, [pc, #452]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a70      	ldr	r2, [pc, #448]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c94a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c94e:	6013      	str	r3, [r2, #0]
 800c950:	4b6e      	ldr	r3, [pc, #440]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a6d      	ldr	r2, [pc, #436]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c95a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d013      	beq.n	800c98c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c964:	f7f5 fca2 	bl	80022ac <HAL_GetTick>
 800c968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c96a:	e008      	b.n	800c97e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c96c:	f7f5 fc9e 	bl	80022ac <HAL_GetTick>
 800c970:	4602      	mov	r2, r0
 800c972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b64      	cmp	r3, #100	@ 0x64
 800c978:	d901      	bls.n	800c97e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e3d4      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c97e:	4b63      	ldr	r3, [pc, #396]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c986:	2b00      	cmp	r3, #0
 800c988:	d0f0      	beq.n	800c96c <HAL_RCC_OscConfig+0xe8>
 800c98a:	e014      	b.n	800c9b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c98c:	f7f5 fc8e 	bl	80022ac <HAL_GetTick>
 800c990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c992:	e008      	b.n	800c9a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c994:	f7f5 fc8a 	bl	80022ac <HAL_GetTick>
 800c998:	4602      	mov	r2, r0
 800c99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99c:	1ad3      	subs	r3, r2, r3
 800c99e:	2b64      	cmp	r3, #100	@ 0x64
 800c9a0:	d901      	bls.n	800c9a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	e3c0      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c9a6:	4b59      	ldr	r3, [pc, #356]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1f0      	bne.n	800c994 <HAL_RCC_OscConfig+0x110>
 800c9b2:	e000      	b.n	800c9b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 0302 	and.w	r3, r3, #2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f000 80ca 	beq.w	800cb58 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9c4:	4b51      	ldr	r3, [pc, #324]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c9cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c9ce:	4b4f      	ldr	r3, [pc, #316]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c9d4:	6a3b      	ldr	r3, [r7, #32]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d007      	beq.n	800c9ea <HAL_RCC_OscConfig+0x166>
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	2b18      	cmp	r3, #24
 800c9de:	d156      	bne.n	800ca8e <HAL_RCC_OscConfig+0x20a>
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d151      	bne.n	800ca8e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c9ea:	4b48      	ldr	r3, [pc, #288]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f003 0304 	and.w	r3, r3, #4
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d005      	beq.n	800ca02 <HAL_RCC_OscConfig+0x17e>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e392      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ca02:	4b42      	ldr	r3, [pc, #264]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f023 0219 	bic.w	r2, r3, #25
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	493f      	ldr	r1, [pc, #252]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca10:	4313      	orrs	r3, r2
 800ca12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca14:	f7f5 fc4a 	bl	80022ac <HAL_GetTick>
 800ca18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca1a:	e008      	b.n	800ca2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca1c:	f7f5 fc46 	bl	80022ac <HAL_GetTick>
 800ca20:	4602      	mov	r2, r0
 800ca22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca24:	1ad3      	subs	r3, r2, r3
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d901      	bls.n	800ca2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	e37c      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca2e:	4b37      	ldr	r3, [pc, #220]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0304 	and.w	r3, r3, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0f0      	beq.n	800ca1c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca3a:	f7f5 fc67 	bl	800230c <HAL_GetREVID>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d817      	bhi.n	800ca78 <HAL_RCC_OscConfig+0x1f4>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	2b40      	cmp	r3, #64	@ 0x40
 800ca4e:	d108      	bne.n	800ca62 <HAL_RCC_OscConfig+0x1de>
 800ca50:	4b2e      	ldr	r3, [pc, #184]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ca58:	4a2c      	ldr	r2, [pc, #176]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca5e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca60:	e07a      	b.n	800cb58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca62:	4b2a      	ldr	r3, [pc, #168]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	031b      	lsls	r3, r3, #12
 800ca70:	4926      	ldr	r1, [pc, #152]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca72:	4313      	orrs	r3, r2
 800ca74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca76:	e06f      	b.n	800cb58 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca78:	4b24      	ldr	r3, [pc, #144]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	061b      	lsls	r3, r3, #24
 800ca86:	4921      	ldr	r1, [pc, #132]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca8c:	e064      	b.n	800cb58 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d047      	beq.n	800cb26 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ca96:	4b1d      	ldr	r3, [pc, #116]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f023 0219 	bic.w	r2, r3, #25
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	491a      	ldr	r1, [pc, #104]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800caa4:	4313      	orrs	r3, r2
 800caa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caa8:	f7f5 fc00 	bl	80022ac <HAL_GetTick>
 800caac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800caae:	e008      	b.n	800cac2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cab0:	f7f5 fbfc 	bl	80022ac <HAL_GetTick>
 800cab4:	4602      	mov	r2, r0
 800cab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d901      	bls.n	800cac2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e332      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cac2:	4b12      	ldr	r3, [pc, #72]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 0304 	and.w	r3, r3, #4
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d0f0      	beq.n	800cab0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cace:	f7f5 fc1d 	bl	800230c <HAL_GetREVID>
 800cad2:	4603      	mov	r3, r0
 800cad4:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cad8:	4293      	cmp	r3, r2
 800cada:	d819      	bhi.n	800cb10 <HAL_RCC_OscConfig+0x28c>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	2b40      	cmp	r3, #64	@ 0x40
 800cae2:	d108      	bne.n	800caf6 <HAL_RCC_OscConfig+0x272>
 800cae4:	4b09      	ldr	r3, [pc, #36]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800caec:	4a07      	ldr	r2, [pc, #28]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800caee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800caf2:	6053      	str	r3, [r2, #4]
 800caf4:	e030      	b.n	800cb58 <HAL_RCC_OscConfig+0x2d4>
 800caf6:	4b05      	ldr	r3, [pc, #20]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	031b      	lsls	r3, r3, #12
 800cb04:	4901      	ldr	r1, [pc, #4]	@ (800cb0c <HAL_RCC_OscConfig+0x288>)
 800cb06:	4313      	orrs	r3, r2
 800cb08:	604b      	str	r3, [r1, #4]
 800cb0a:	e025      	b.n	800cb58 <HAL_RCC_OscConfig+0x2d4>
 800cb0c:	58024400 	.word	0x58024400
 800cb10:	4b9a      	ldr	r3, [pc, #616]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	061b      	lsls	r3, r3, #24
 800cb1e:	4997      	ldr	r1, [pc, #604]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cb20:	4313      	orrs	r3, r2
 800cb22:	604b      	str	r3, [r1, #4]
 800cb24:	e018      	b.n	800cb58 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb26:	4b95      	ldr	r3, [pc, #596]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a94      	ldr	r2, [pc, #592]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cb2c:	f023 0301 	bic.w	r3, r3, #1
 800cb30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb32:	f7f5 fbbb 	bl	80022ac <HAL_GetTick>
 800cb36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb38:	e008      	b.n	800cb4c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb3a:	f7f5 fbb7 	bl	80022ac <HAL_GetTick>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d901      	bls.n	800cb4c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800cb48:	2303      	movs	r3, #3
 800cb4a:	e2ed      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb4c:	4b8b      	ldr	r3, [pc, #556]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 0304 	and.w	r3, r3, #4
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1f0      	bne.n	800cb3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f003 0310 	and.w	r3, r3, #16
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 80a9 	beq.w	800ccb8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb66:	4b85      	ldr	r3, [pc, #532]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cb68:	691b      	ldr	r3, [r3, #16]
 800cb6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb70:	4b82      	ldr	r3, [pc, #520]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cb72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb74:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	2b08      	cmp	r3, #8
 800cb7a:	d007      	beq.n	800cb8c <HAL_RCC_OscConfig+0x308>
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	2b18      	cmp	r3, #24
 800cb80:	d13a      	bne.n	800cbf8 <HAL_RCC_OscConfig+0x374>
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d135      	bne.n	800cbf8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cb8c:	4b7b      	ldr	r3, [pc, #492]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d005      	beq.n	800cba4 <HAL_RCC_OscConfig+0x320>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	69db      	ldr	r3, [r3, #28]
 800cb9c:	2b80      	cmp	r3, #128	@ 0x80
 800cb9e:	d001      	beq.n	800cba4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800cba0:	2301      	movs	r3, #1
 800cba2:	e2c1      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cba4:	f7f5 fbb2 	bl	800230c <HAL_GetREVID>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d817      	bhi.n	800cbe2 <HAL_RCC_OscConfig+0x35e>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a1b      	ldr	r3, [r3, #32]
 800cbb6:	2b20      	cmp	r3, #32
 800cbb8:	d108      	bne.n	800cbcc <HAL_RCC_OscConfig+0x348>
 800cbba:	4b70      	ldr	r3, [pc, #448]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cbc2:	4a6e      	ldr	r2, [pc, #440]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cbc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cbc8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cbca:	e075      	b.n	800ccb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cbcc:	4b6b      	ldr	r3, [pc, #428]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	069b      	lsls	r3, r3, #26
 800cbda:	4968      	ldr	r1, [pc, #416]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cbe0:	e06a      	b.n	800ccb8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cbe2:	4b66      	ldr	r3, [pc, #408]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	061b      	lsls	r3, r3, #24
 800cbf0:	4962      	ldr	r1, [pc, #392]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cbf6:	e05f      	b.n	800ccb8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d042      	beq.n	800cc86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cc00:	4b5e      	ldr	r3, [pc, #376]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a5d      	ldr	r2, [pc, #372]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc0c:	f7f5 fb4e 	bl	80022ac <HAL_GetTick>
 800cc10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cc12:	e008      	b.n	800cc26 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cc14:	f7f5 fb4a 	bl	80022ac <HAL_GetTick>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d901      	bls.n	800cc26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cc22:	2303      	movs	r3, #3
 800cc24:	e280      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cc26:	4b55      	ldr	r3, [pc, #340]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0f0      	beq.n	800cc14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc32:	f7f5 fb6b 	bl	800230c <HAL_GetREVID>
 800cc36:	4603      	mov	r3, r0
 800cc38:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d817      	bhi.n	800cc70 <HAL_RCC_OscConfig+0x3ec>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	d108      	bne.n	800cc5a <HAL_RCC_OscConfig+0x3d6>
 800cc48:	4b4c      	ldr	r3, [pc, #304]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cc50:	4a4a      	ldr	r2, [pc, #296]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cc56:	6053      	str	r3, [r2, #4]
 800cc58:	e02e      	b.n	800ccb8 <HAL_RCC_OscConfig+0x434>
 800cc5a:	4b48      	ldr	r3, [pc, #288]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	069b      	lsls	r3, r3, #26
 800cc68:	4944      	ldr	r1, [pc, #272]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	604b      	str	r3, [r1, #4]
 800cc6e:	e023      	b.n	800ccb8 <HAL_RCC_OscConfig+0x434>
 800cc70:	4b42      	ldr	r3, [pc, #264]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6a1b      	ldr	r3, [r3, #32]
 800cc7c:	061b      	lsls	r3, r3, #24
 800cc7e:	493f      	ldr	r1, [pc, #252]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc80:	4313      	orrs	r3, r2
 800cc82:	60cb      	str	r3, [r1, #12]
 800cc84:	e018      	b.n	800ccb8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cc86:	4b3d      	ldr	r3, [pc, #244]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a3c      	ldr	r2, [pc, #240]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cc8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc92:	f7f5 fb0b 	bl	80022ac <HAL_GetTick>
 800cc96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cc98:	e008      	b.n	800ccac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cc9a:	f7f5 fb07 	bl	80022ac <HAL_GetTick>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d901      	bls.n	800ccac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e23d      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ccac:	4b33      	ldr	r3, [pc, #204]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1f0      	bne.n	800cc9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f003 0308 	and.w	r3, r3, #8
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d036      	beq.n	800cd32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d019      	beq.n	800cd00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cccc:	4b2b      	ldr	r3, [pc, #172]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800ccce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccd0:	4a2a      	ldr	r2, [pc, #168]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800ccd2:	f043 0301 	orr.w	r3, r3, #1
 800ccd6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccd8:	f7f5 fae8 	bl	80022ac <HAL_GetTick>
 800ccdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ccde:	e008      	b.n	800ccf2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cce0:	f7f5 fae4 	bl	80022ac <HAL_GetTick>
 800cce4:	4602      	mov	r2, r0
 800cce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d901      	bls.n	800ccf2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	e21a      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ccf2:	4b22      	ldr	r3, [pc, #136]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800ccf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccf6:	f003 0302 	and.w	r3, r3, #2
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d0f0      	beq.n	800cce0 <HAL_RCC_OscConfig+0x45c>
 800ccfe:	e018      	b.n	800cd32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd00:	4b1e      	ldr	r3, [pc, #120]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cd02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd04:	4a1d      	ldr	r2, [pc, #116]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cd06:	f023 0301 	bic.w	r3, r3, #1
 800cd0a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd0c:	f7f5 face 	bl	80022ac <HAL_GetTick>
 800cd10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd12:	e008      	b.n	800cd26 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd14:	f7f5 faca 	bl	80022ac <HAL_GetTick>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	2b02      	cmp	r3, #2
 800cd20:	d901      	bls.n	800cd26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cd22:	2303      	movs	r3, #3
 800cd24:	e200      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd26:	4b15      	ldr	r3, [pc, #84]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cd28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd2a:	f003 0302 	and.w	r3, r3, #2
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1f0      	bne.n	800cd14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 0320 	and.w	r3, r3, #32
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d039      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d01c      	beq.n	800cd80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cd46:	4b0d      	ldr	r3, [pc, #52]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a0c      	ldr	r2, [pc, #48]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cd4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cd50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cd52:	f7f5 faab 	bl	80022ac <HAL_GetTick>
 800cd56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cd58:	e008      	b.n	800cd6c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd5a:	f7f5 faa7 	bl	80022ac <HAL_GetTick>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d901      	bls.n	800cd6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e1dd      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cd6c:	4b03      	ldr	r3, [pc, #12]	@ (800cd7c <HAL_RCC_OscConfig+0x4f8>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0f0      	beq.n	800cd5a <HAL_RCC_OscConfig+0x4d6>
 800cd78:	e01b      	b.n	800cdb2 <HAL_RCC_OscConfig+0x52e>
 800cd7a:	bf00      	nop
 800cd7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cd80:	4b9b      	ldr	r3, [pc, #620]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a9a      	ldr	r2, [pc, #616]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cd86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cd8c:	f7f5 fa8e 	bl	80022ac <HAL_GetTick>
 800cd90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cd92:	e008      	b.n	800cda6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd94:	f7f5 fa8a 	bl	80022ac <HAL_GetTick>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d901      	bls.n	800cda6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e1c0      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cda6:	4b92      	ldr	r3, [pc, #584]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1f0      	bne.n	800cd94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0304 	and.w	r3, r3, #4
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f000 8081 	beq.w	800cec2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cdc0:	4b8c      	ldr	r3, [pc, #560]	@ (800cff4 <HAL_RCC_OscConfig+0x770>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a8b      	ldr	r2, [pc, #556]	@ (800cff4 <HAL_RCC_OscConfig+0x770>)
 800cdc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cdca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cdcc:	f7f5 fa6e 	bl	80022ac <HAL_GetTick>
 800cdd0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cdd2:	e008      	b.n	800cde6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cdd4:	f7f5 fa6a 	bl	80022ac <HAL_GetTick>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	2b64      	cmp	r3, #100	@ 0x64
 800cde0:	d901      	bls.n	800cde6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800cde2:	2303      	movs	r3, #3
 800cde4:	e1a0      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cde6:	4b83      	ldr	r3, [pc, #524]	@ (800cff4 <HAL_RCC_OscConfig+0x770>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d0f0      	beq.n	800cdd4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d106      	bne.n	800ce08 <HAL_RCC_OscConfig+0x584>
 800cdfa:	4b7d      	ldr	r3, [pc, #500]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cdfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdfe:	4a7c      	ldr	r2, [pc, #496]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce00:	f043 0301 	orr.w	r3, r3, #1
 800ce04:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce06:	e02d      	b.n	800ce64 <HAL_RCC_OscConfig+0x5e0>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10c      	bne.n	800ce2a <HAL_RCC_OscConfig+0x5a6>
 800ce10:	4b77      	ldr	r3, [pc, #476]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce14:	4a76      	ldr	r2, [pc, #472]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce16:	f023 0301 	bic.w	r3, r3, #1
 800ce1a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce1c:	4b74      	ldr	r3, [pc, #464]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce20:	4a73      	ldr	r2, [pc, #460]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce22:	f023 0304 	bic.w	r3, r3, #4
 800ce26:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce28:	e01c      	b.n	800ce64 <HAL_RCC_OscConfig+0x5e0>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	2b05      	cmp	r3, #5
 800ce30:	d10c      	bne.n	800ce4c <HAL_RCC_OscConfig+0x5c8>
 800ce32:	4b6f      	ldr	r3, [pc, #444]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce36:	4a6e      	ldr	r2, [pc, #440]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce38:	f043 0304 	orr.w	r3, r3, #4
 800ce3c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce3e:	4b6c      	ldr	r3, [pc, #432]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce42:	4a6b      	ldr	r2, [pc, #428]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce44:	f043 0301 	orr.w	r3, r3, #1
 800ce48:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce4a:	e00b      	b.n	800ce64 <HAL_RCC_OscConfig+0x5e0>
 800ce4c:	4b68      	ldr	r3, [pc, #416]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce50:	4a67      	ldr	r2, [pc, #412]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce52:	f023 0301 	bic.w	r3, r3, #1
 800ce56:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce58:	4b65      	ldr	r3, [pc, #404]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce5c:	4a64      	ldr	r2, [pc, #400]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce5e:	f023 0304 	bic.w	r3, r3, #4
 800ce62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d015      	beq.n	800ce98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce6c:	f7f5 fa1e 	bl	80022ac <HAL_GetTick>
 800ce70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce72:	e00a      	b.n	800ce8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce74:	f7f5 fa1a 	bl	80022ac <HAL_GetTick>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d901      	bls.n	800ce8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ce86:	2303      	movs	r3, #3
 800ce88:	e14e      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ce8a:	4b59      	ldr	r3, [pc, #356]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ce8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce8e:	f003 0302 	and.w	r3, r3, #2
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0ee      	beq.n	800ce74 <HAL_RCC_OscConfig+0x5f0>
 800ce96:	e014      	b.n	800cec2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce98:	f7f5 fa08 	bl	80022ac <HAL_GetTick>
 800ce9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ce9e:	e00a      	b.n	800ceb6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cea0:	f7f5 fa04 	bl	80022ac <HAL_GetTick>
 800cea4:	4602      	mov	r2, r0
 800cea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d901      	bls.n	800ceb6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	e138      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ceb6:	4b4e      	ldr	r3, [pc, #312]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ceb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceba:	f003 0302 	and.w	r3, r3, #2
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1ee      	bne.n	800cea0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f000 812d 	beq.w	800d126 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cecc:	4b48      	ldr	r3, [pc, #288]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cece:	691b      	ldr	r3, [r3, #16]
 800ced0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ced4:	2b18      	cmp	r3, #24
 800ced6:	f000 80bd 	beq.w	800d054 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cede:	2b02      	cmp	r3, #2
 800cee0:	f040 809e 	bne.w	800d020 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cee4:	4b42      	ldr	r3, [pc, #264]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a41      	ldr	r2, [pc, #260]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800ceea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ceee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cef0:	f7f5 f9dc 	bl	80022ac <HAL_GetTick>
 800cef4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cef6:	e008      	b.n	800cf0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cef8:	f7f5 f9d8 	bl	80022ac <HAL_GetTick>
 800cefc:	4602      	mov	r2, r0
 800cefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d901      	bls.n	800cf0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800cf06:	2303      	movs	r3, #3
 800cf08:	e10e      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf0a:	4b39      	ldr	r3, [pc, #228]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1f0      	bne.n	800cef8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf16:	4b36      	ldr	r3, [pc, #216]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf1a:	4b37      	ldr	r3, [pc, #220]	@ (800cff8 <HAL_RCC_OscConfig+0x774>)
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cf26:	0112      	lsls	r2, r2, #4
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	4931      	ldr	r1, [pc, #196]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	628b      	str	r3, [r1, #40]	@ 0x28
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf34:	3b01      	subs	r3, #1
 800cf36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	025b      	lsls	r3, r3, #9
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	431a      	orrs	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	041b      	lsls	r3, r3, #16
 800cf4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cf52:	431a      	orrs	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	061b      	lsls	r3, r3, #24
 800cf5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cf60:	4923      	ldr	r1, [pc, #140]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800cf66:	4b22      	ldr	r3, [pc, #136]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf6a:	4a21      	ldr	r2, [pc, #132]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf6c:	f023 0301 	bic.w	r3, r3, #1
 800cf70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cf72:	4b1f      	ldr	r3, [pc, #124]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf76:	4b21      	ldr	r3, [pc, #132]	@ (800cffc <HAL_RCC_OscConfig+0x778>)
 800cf78:	4013      	ands	r3, r2
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cf7e:	00d2      	lsls	r2, r2, #3
 800cf80:	491b      	ldr	r1, [pc, #108]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf82:	4313      	orrs	r3, r2
 800cf84:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cf86:	4b1a      	ldr	r3, [pc, #104]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8a:	f023 020c 	bic.w	r2, r3, #12
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf92:	4917      	ldr	r1, [pc, #92]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf94:	4313      	orrs	r3, r2
 800cf96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800cf98:	4b15      	ldr	r3, [pc, #84]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cf9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf9c:	f023 0202 	bic.w	r2, r3, #2
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfa4:	4912      	ldr	r1, [pc, #72]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cfaa:	4b11      	ldr	r3, [pc, #68]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfae:	4a10      	ldr	r2, [pc, #64]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cfb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfb6:	4b0e      	ldr	r3, [pc, #56]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfba:	4a0d      	ldr	r2, [pc, #52]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cfc2:	4b0b      	ldr	r3, [pc, #44]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc6:	4a0a      	ldr	r2, [pc, #40]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cfcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800cfce:	4b08      	ldr	r3, [pc, #32]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd2:	4a07      	ldr	r2, [pc, #28]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfd4:	f043 0301 	orr.w	r3, r3, #1
 800cfd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cfda:	4b05      	ldr	r3, [pc, #20]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a04      	ldr	r2, [pc, #16]	@ (800cff0 <HAL_RCC_OscConfig+0x76c>)
 800cfe0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cfe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfe6:	f7f5 f961 	bl	80022ac <HAL_GetTick>
 800cfea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cfec:	e011      	b.n	800d012 <HAL_RCC_OscConfig+0x78e>
 800cfee:	bf00      	nop
 800cff0:	58024400 	.word	0x58024400
 800cff4:	58024800 	.word	0x58024800
 800cff8:	fffffc0c 	.word	0xfffffc0c
 800cffc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d000:	f7f5 f954 	bl	80022ac <HAL_GetTick>
 800d004:	4602      	mov	r2, r0
 800d006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d901      	bls.n	800d012 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d00e:	2303      	movs	r3, #3
 800d010:	e08a      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d012:	4b47      	ldr	r3, [pc, #284]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0f0      	beq.n	800d000 <HAL_RCC_OscConfig+0x77c>
 800d01e:	e082      	b.n	800d126 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d020:	4b43      	ldr	r3, [pc, #268]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a42      	ldr	r2, [pc, #264]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d02a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d02c:	f7f5 f93e 	bl	80022ac <HAL_GetTick>
 800d030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d032:	e008      	b.n	800d046 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d034:	f7f5 f93a 	bl	80022ac <HAL_GetTick>
 800d038:	4602      	mov	r2, r0
 800d03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	2b02      	cmp	r3, #2
 800d040:	d901      	bls.n	800d046 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e070      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d046:	4b3a      	ldr	r3, [pc, #232]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1f0      	bne.n	800d034 <HAL_RCC_OscConfig+0x7b0>
 800d052:	e068      	b.n	800d126 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d054:	4b36      	ldr	r3, [pc, #216]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d058:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d05a:	4b35      	ldr	r3, [pc, #212]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d05e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d064:	2b01      	cmp	r3, #1
 800d066:	d031      	beq.n	800d0cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	f003 0203 	and.w	r2, r3, #3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d072:	429a      	cmp	r2, r3
 800d074:	d12a      	bne.n	800d0cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	091b      	lsrs	r3, r3, #4
 800d07a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d082:	429a      	cmp	r2, r3
 800d084:	d122      	bne.n	800d0cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d090:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d092:	429a      	cmp	r2, r3
 800d094:	d11a      	bne.n	800d0cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	0a5b      	lsrs	r3, r3, #9
 800d09a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d111      	bne.n	800d0cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	0c1b      	lsrs	r3, r3, #16
 800d0ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d108      	bne.n	800d0cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	0e1b      	lsrs	r3, r3, #24
 800d0be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d001      	beq.n	800d0d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e02b      	b.n	800d128 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d0d0:	4b17      	ldr	r3, [pc, #92]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0d4:	08db      	lsrs	r3, r3, #3
 800d0d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0e0:	693a      	ldr	r2, [r7, #16]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d01f      	beq.n	800d126 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d0e6:	4b12      	ldr	r3, [pc, #72]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ea:	4a11      	ldr	r2, [pc, #68]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d0ec:	f023 0301 	bic.w	r3, r3, #1
 800d0f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d0f2:	f7f5 f8db 	bl	80022ac <HAL_GetTick>
 800d0f6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d0f8:	bf00      	nop
 800d0fa:	f7f5 f8d7 	bl	80022ac <HAL_GetTick>
 800d0fe:	4602      	mov	r2, r0
 800d100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d102:	4293      	cmp	r3, r2
 800d104:	d0f9      	beq.n	800d0fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d106:	4b0a      	ldr	r3, [pc, #40]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d10a:	4b0a      	ldr	r3, [pc, #40]	@ (800d134 <HAL_RCC_OscConfig+0x8b0>)
 800d10c:	4013      	ands	r3, r2
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d112:	00d2      	lsls	r2, r2, #3
 800d114:	4906      	ldr	r1, [pc, #24]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d116:	4313      	orrs	r3, r2
 800d118:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d11a:	4b05      	ldr	r3, [pc, #20]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11e:	4a04      	ldr	r2, [pc, #16]	@ (800d130 <HAL_RCC_OscConfig+0x8ac>)
 800d120:	f043 0301 	orr.w	r3, r3, #1
 800d124:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3730      	adds	r7, #48	@ 0x30
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	58024400 	.word	0x58024400
 800d134:	ffff0007 	.word	0xffff0007

0800d138 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d101      	bne.n	800d14c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	e19c      	b.n	800d486 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d14c:	4b8a      	ldr	r3, [pc, #552]	@ (800d378 <HAL_RCC_ClockConfig+0x240>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 030f 	and.w	r3, r3, #15
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	429a      	cmp	r2, r3
 800d158:	d910      	bls.n	800d17c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d15a:	4b87      	ldr	r3, [pc, #540]	@ (800d378 <HAL_RCC_ClockConfig+0x240>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f023 020f 	bic.w	r2, r3, #15
 800d162:	4985      	ldr	r1, [pc, #532]	@ (800d378 <HAL_RCC_ClockConfig+0x240>)
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	4313      	orrs	r3, r2
 800d168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d16a:	4b83      	ldr	r3, [pc, #524]	@ (800d378 <HAL_RCC_ClockConfig+0x240>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 030f 	and.w	r3, r3, #15
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	429a      	cmp	r2, r3
 800d176:	d001      	beq.n	800d17c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	e184      	b.n	800d486 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f003 0304 	and.w	r3, r3, #4
 800d184:	2b00      	cmp	r3, #0
 800d186:	d010      	beq.n	800d1aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	691a      	ldr	r2, [r3, #16]
 800d18c:	4b7b      	ldr	r3, [pc, #492]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d194:	429a      	cmp	r2, r3
 800d196:	d908      	bls.n	800d1aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d198:	4b78      	ldr	r3, [pc, #480]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d19a:	699b      	ldr	r3, [r3, #24]
 800d19c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	4975      	ldr	r1, [pc, #468]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f003 0308 	and.w	r3, r3, #8
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d010      	beq.n	800d1d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	695a      	ldr	r2, [r3, #20]
 800d1ba:	4b70      	ldr	r3, [pc, #448]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d908      	bls.n	800d1d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d1c6:	4b6d      	ldr	r3, [pc, #436]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d1c8:	69db      	ldr	r3, [r3, #28]
 800d1ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	496a      	ldr	r1, [pc, #424]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f003 0310 	and.w	r3, r3, #16
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d010      	beq.n	800d206 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	699a      	ldr	r2, [r3, #24]
 800d1e8:	4b64      	ldr	r3, [pc, #400]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d908      	bls.n	800d206 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d1f4:	4b61      	ldr	r3, [pc, #388]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d1f6:	69db      	ldr	r3, [r3, #28]
 800d1f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	495e      	ldr	r1, [pc, #376]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d202:	4313      	orrs	r3, r2
 800d204:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f003 0320 	and.w	r3, r3, #32
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d010      	beq.n	800d234 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	69da      	ldr	r2, [r3, #28]
 800d216:	4b59      	ldr	r3, [pc, #356]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d21e:	429a      	cmp	r2, r3
 800d220:	d908      	bls.n	800d234 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d222:	4b56      	ldr	r3, [pc, #344]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	69db      	ldr	r3, [r3, #28]
 800d22e:	4953      	ldr	r1, [pc, #332]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d230:	4313      	orrs	r3, r2
 800d232:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 0302 	and.w	r3, r3, #2
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d010      	beq.n	800d262 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68da      	ldr	r2, [r3, #12]
 800d244:	4b4d      	ldr	r3, [pc, #308]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	f003 030f 	and.w	r3, r3, #15
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d908      	bls.n	800d262 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d250:	4b4a      	ldr	r3, [pc, #296]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	f023 020f 	bic.w	r2, r3, #15
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	4947      	ldr	r1, [pc, #284]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 0301 	and.w	r3, r3, #1
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d055      	beq.n	800d31a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d26e:	4b43      	ldr	r3, [pc, #268]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d270:	699b      	ldr	r3, [r3, #24]
 800d272:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	4940      	ldr	r1, [pc, #256]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d27c:	4313      	orrs	r3, r2
 800d27e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	2b02      	cmp	r3, #2
 800d286:	d107      	bne.n	800d298 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d288:	4b3c      	ldr	r3, [pc, #240]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d290:	2b00      	cmp	r3, #0
 800d292:	d121      	bne.n	800d2d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	e0f6      	b.n	800d486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	2b03      	cmp	r3, #3
 800d29e:	d107      	bne.n	800d2b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2a0:	4b36      	ldr	r3, [pc, #216]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d115      	bne.n	800d2d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e0ea      	b.n	800d486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d107      	bne.n	800d2c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2b8:	4b30      	ldr	r3, [pc, #192]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d109      	bne.n	800d2d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e0de      	b.n	800d486 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d2c8:	4b2c      	ldr	r3, [pc, #176]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e0d6      	b.n	800d486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d2d8:	4b28      	ldr	r3, [pc, #160]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d2da:	691b      	ldr	r3, [r3, #16]
 800d2dc:	f023 0207 	bic.w	r2, r3, #7
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	4925      	ldr	r1, [pc, #148]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2ea:	f7f4 ffdf 	bl	80022ac <HAL_GetTick>
 800d2ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2f0:	e00a      	b.n	800d308 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2f2:	f7f4 ffdb 	bl	80022ac <HAL_GetTick>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d300:	4293      	cmp	r3, r2
 800d302:	d901      	bls.n	800d308 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d304:	2303      	movs	r3, #3
 800d306:	e0be      	b.n	800d486 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d308:	4b1c      	ldr	r3, [pc, #112]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	00db      	lsls	r3, r3, #3
 800d316:	429a      	cmp	r2, r3
 800d318:	d1eb      	bne.n	800d2f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 0302 	and.w	r3, r3, #2
 800d322:	2b00      	cmp	r3, #0
 800d324:	d010      	beq.n	800d348 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	68da      	ldr	r2, [r3, #12]
 800d32a:	4b14      	ldr	r3, [pc, #80]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	f003 030f 	and.w	r3, r3, #15
 800d332:	429a      	cmp	r2, r3
 800d334:	d208      	bcs.n	800d348 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d336:	4b11      	ldr	r3, [pc, #68]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	f023 020f 	bic.w	r2, r3, #15
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	490e      	ldr	r1, [pc, #56]	@ (800d37c <HAL_RCC_ClockConfig+0x244>)
 800d344:	4313      	orrs	r3, r2
 800d346:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d348:	4b0b      	ldr	r3, [pc, #44]	@ (800d378 <HAL_RCC_ClockConfig+0x240>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 030f 	and.w	r3, r3, #15
 800d350:	683a      	ldr	r2, [r7, #0]
 800d352:	429a      	cmp	r2, r3
 800d354:	d214      	bcs.n	800d380 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d356:	4b08      	ldr	r3, [pc, #32]	@ (800d378 <HAL_RCC_ClockConfig+0x240>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f023 020f 	bic.w	r2, r3, #15
 800d35e:	4906      	ldr	r1, [pc, #24]	@ (800d378 <HAL_RCC_ClockConfig+0x240>)
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	4313      	orrs	r3, r2
 800d364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d366:	4b04      	ldr	r3, [pc, #16]	@ (800d378 <HAL_RCC_ClockConfig+0x240>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 030f 	and.w	r3, r3, #15
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	429a      	cmp	r2, r3
 800d372:	d005      	beq.n	800d380 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e086      	b.n	800d486 <HAL_RCC_ClockConfig+0x34e>
 800d378:	52002000 	.word	0x52002000
 800d37c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f003 0304 	and.w	r3, r3, #4
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d010      	beq.n	800d3ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	691a      	ldr	r2, [r3, #16]
 800d390:	4b3f      	ldr	r3, [pc, #252]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d398:	429a      	cmp	r2, r3
 800d39a:	d208      	bcs.n	800d3ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d39c:	4b3c      	ldr	r3, [pc, #240]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	4939      	ldr	r1, [pc, #228]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 0308 	and.w	r3, r3, #8
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d010      	beq.n	800d3dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	695a      	ldr	r2, [r3, #20]
 800d3be:	4b34      	ldr	r3, [pc, #208]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d3c0:	69db      	ldr	r3, [r3, #28]
 800d3c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d208      	bcs.n	800d3dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d3ca:	4b31      	ldr	r3, [pc, #196]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d3cc:	69db      	ldr	r3, [r3, #28]
 800d3ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	492e      	ldr	r1, [pc, #184]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f003 0310 	and.w	r3, r3, #16
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d010      	beq.n	800d40a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	699a      	ldr	r2, [r3, #24]
 800d3ec:	4b28      	ldr	r3, [pc, #160]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d3ee:	69db      	ldr	r3, [r3, #28]
 800d3f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d208      	bcs.n	800d40a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d3f8:	4b25      	ldr	r3, [pc, #148]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d3fa:	69db      	ldr	r3, [r3, #28]
 800d3fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	4922      	ldr	r1, [pc, #136]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d406:	4313      	orrs	r3, r2
 800d408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f003 0320 	and.w	r3, r3, #32
 800d412:	2b00      	cmp	r3, #0
 800d414:	d010      	beq.n	800d438 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	69da      	ldr	r2, [r3, #28]
 800d41a:	4b1d      	ldr	r3, [pc, #116]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d422:	429a      	cmp	r2, r3
 800d424:	d208      	bcs.n	800d438 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d426:	4b1a      	ldr	r3, [pc, #104]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d428:	6a1b      	ldr	r3, [r3, #32]
 800d42a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	4917      	ldr	r1, [pc, #92]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d434:	4313      	orrs	r3, r2
 800d436:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d438:	f000 f834 	bl	800d4a4 <HAL_RCC_GetSysClockFreq>
 800d43c:	4602      	mov	r2, r0
 800d43e:	4b14      	ldr	r3, [pc, #80]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	0a1b      	lsrs	r3, r3, #8
 800d444:	f003 030f 	and.w	r3, r3, #15
 800d448:	4912      	ldr	r1, [pc, #72]	@ (800d494 <HAL_RCC_ClockConfig+0x35c>)
 800d44a:	5ccb      	ldrb	r3, [r1, r3]
 800d44c:	f003 031f 	and.w	r3, r3, #31
 800d450:	fa22 f303 	lsr.w	r3, r2, r3
 800d454:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d456:	4b0e      	ldr	r3, [pc, #56]	@ (800d490 <HAL_RCC_ClockConfig+0x358>)
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	f003 030f 	and.w	r3, r3, #15
 800d45e:	4a0d      	ldr	r2, [pc, #52]	@ (800d494 <HAL_RCC_ClockConfig+0x35c>)
 800d460:	5cd3      	ldrb	r3, [r2, r3]
 800d462:	f003 031f 	and.w	r3, r3, #31
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	fa22 f303 	lsr.w	r3, r2, r3
 800d46c:	4a0a      	ldr	r2, [pc, #40]	@ (800d498 <HAL_RCC_ClockConfig+0x360>)
 800d46e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d470:	4a0a      	ldr	r2, [pc, #40]	@ (800d49c <HAL_RCC_ClockConfig+0x364>)
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d476:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a0 <HAL_RCC_ClockConfig+0x368>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7f4 fecc 	bl	8002218 <HAL_InitTick>
 800d480:	4603      	mov	r3, r0
 800d482:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d484:	7bfb      	ldrb	r3, [r7, #15]
}
 800d486:	4618      	mov	r0, r3
 800d488:	3718      	adds	r7, #24
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	58024400 	.word	0x58024400
 800d494:	08017888 	.word	0x08017888
 800d498:	24000008 	.word	0x24000008
 800d49c:	24000004 	.word	0x24000004
 800d4a0:	2400000c 	.word	0x2400000c

0800d4a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b089      	sub	sp, #36	@ 0x24
 800d4a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d4aa:	4bb3      	ldr	r3, [pc, #716]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4ac:	691b      	ldr	r3, [r3, #16]
 800d4ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d4b2:	2b18      	cmp	r3, #24
 800d4b4:	f200 8155 	bhi.w	800d762 <HAL_RCC_GetSysClockFreq+0x2be>
 800d4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4be:	bf00      	nop
 800d4c0:	0800d525 	.word	0x0800d525
 800d4c4:	0800d763 	.word	0x0800d763
 800d4c8:	0800d763 	.word	0x0800d763
 800d4cc:	0800d763 	.word	0x0800d763
 800d4d0:	0800d763 	.word	0x0800d763
 800d4d4:	0800d763 	.word	0x0800d763
 800d4d8:	0800d763 	.word	0x0800d763
 800d4dc:	0800d763 	.word	0x0800d763
 800d4e0:	0800d54b 	.word	0x0800d54b
 800d4e4:	0800d763 	.word	0x0800d763
 800d4e8:	0800d763 	.word	0x0800d763
 800d4ec:	0800d763 	.word	0x0800d763
 800d4f0:	0800d763 	.word	0x0800d763
 800d4f4:	0800d763 	.word	0x0800d763
 800d4f8:	0800d763 	.word	0x0800d763
 800d4fc:	0800d763 	.word	0x0800d763
 800d500:	0800d551 	.word	0x0800d551
 800d504:	0800d763 	.word	0x0800d763
 800d508:	0800d763 	.word	0x0800d763
 800d50c:	0800d763 	.word	0x0800d763
 800d510:	0800d763 	.word	0x0800d763
 800d514:	0800d763 	.word	0x0800d763
 800d518:	0800d763 	.word	0x0800d763
 800d51c:	0800d763 	.word	0x0800d763
 800d520:	0800d557 	.word	0x0800d557
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d524:	4b94      	ldr	r3, [pc, #592]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 0320 	and.w	r3, r3, #32
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d009      	beq.n	800d544 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d530:	4b91      	ldr	r3, [pc, #580]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	08db      	lsrs	r3, r3, #3
 800d536:	f003 0303 	and.w	r3, r3, #3
 800d53a:	4a90      	ldr	r2, [pc, #576]	@ (800d77c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d53c:	fa22 f303 	lsr.w	r3, r2, r3
 800d540:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d542:	e111      	b.n	800d768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d544:	4b8d      	ldr	r3, [pc, #564]	@ (800d77c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d546:	61bb      	str	r3, [r7, #24]
      break;
 800d548:	e10e      	b.n	800d768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d54a:	4b8d      	ldr	r3, [pc, #564]	@ (800d780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d54c:	61bb      	str	r3, [r7, #24]
      break;
 800d54e:	e10b      	b.n	800d768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d550:	4b8c      	ldr	r3, [pc, #560]	@ (800d784 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d552:	61bb      	str	r3, [r7, #24]
      break;
 800d554:	e108      	b.n	800d768 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d556:	4b88      	ldr	r3, [pc, #544]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d55a:	f003 0303 	and.w	r3, r3, #3
 800d55e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d560:	4b85      	ldr	r3, [pc, #532]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d564:	091b      	lsrs	r3, r3, #4
 800d566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d56a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d56c:	4b82      	ldr	r3, [pc, #520]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d576:	4b80      	ldr	r3, [pc, #512]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d57a:	08db      	lsrs	r3, r3, #3
 800d57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	fb02 f303 	mul.w	r3, r2, r3
 800d586:	ee07 3a90 	vmov	s15, r3
 800d58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 80e1 	beq.w	800d75c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	f000 8083 	beq.w	800d6a8 <HAL_RCC_GetSysClockFreq+0x204>
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	f200 80a1 	bhi.w	800d6ec <HAL_RCC_GetSysClockFreq+0x248>
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d003      	beq.n	800d5b8 <HAL_RCC_GetSysClockFreq+0x114>
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d056      	beq.n	800d664 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d5b6:	e099      	b.n	800d6ec <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5b8:	4b6f      	ldr	r3, [pc, #444]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f003 0320 	and.w	r3, r3, #32
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d02d      	beq.n	800d620 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5c4:	4b6c      	ldr	r3, [pc, #432]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	08db      	lsrs	r3, r3, #3
 800d5ca:	f003 0303 	and.w	r3, r3, #3
 800d5ce:	4a6b      	ldr	r2, [pc, #428]	@ (800d77c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	ee07 3a90 	vmov	s15, r3
 800d5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	ee07 3a90 	vmov	s15, r3
 800d5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ee:	4b62      	ldr	r3, [pc, #392]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f6:	ee07 3a90 	vmov	s15, r3
 800d5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800d602:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d60e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d61a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d61e:	e087      	b.n	800d730 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	ee07 3a90 	vmov	s15, r3
 800d626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d62a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d78c <HAL_RCC_GetSysClockFreq+0x2e8>
 800d62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d632:	4b51      	ldr	r3, [pc, #324]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d63a:	ee07 3a90 	vmov	s15, r3
 800d63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d642:	ed97 6a02 	vldr	s12, [r7, #8]
 800d646:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d65e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d662:	e065      	b.n	800d730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	ee07 3a90 	vmov	s15, r3
 800d66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d66e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d790 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d676:	4b40      	ldr	r3, [pc, #256]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d67e:	ee07 3a90 	vmov	s15, r3
 800d682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d686:	ed97 6a02 	vldr	s12, [r7, #8]
 800d68a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d6a6:	e043      	b.n	800d730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	ee07 3a90 	vmov	s15, r3
 800d6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d794 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ba:	4b2f      	ldr	r3, [pc, #188]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c2:	ee07 3a90 	vmov	s15, r3
 800d6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800d6ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d6ea:	e021      	b.n	800d730 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	ee07 3a90 	vmov	s15, r3
 800d6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d790 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6fe:	4b1e      	ldr	r3, [pc, #120]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d706:	ee07 3a90 	vmov	s15, r3
 800d70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d70e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d712:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d71e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d72a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d72e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d730:	4b11      	ldr	r3, [pc, #68]	@ (800d778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d734:	0a5b      	lsrs	r3, r3, #9
 800d736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d73a:	3301      	adds	r3, #1
 800d73c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	ee07 3a90 	vmov	s15, r3
 800d744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d748:	edd7 6a07 	vldr	s13, [r7, #28]
 800d74c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d754:	ee17 3a90 	vmov	r3, s15
 800d758:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d75a:	e005      	b.n	800d768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d75c:	2300      	movs	r3, #0
 800d75e:	61bb      	str	r3, [r7, #24]
      break;
 800d760:	e002      	b.n	800d768 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d762:	4b07      	ldr	r3, [pc, #28]	@ (800d780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d764:	61bb      	str	r3, [r7, #24]
      break;
 800d766:	bf00      	nop
  }

  return sysclockfreq;
 800d768:	69bb      	ldr	r3, [r7, #24]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3724      	adds	r7, #36	@ 0x24
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	58024400 	.word	0x58024400
 800d77c:	03d09000 	.word	0x03d09000
 800d780:	003d0900 	.word	0x003d0900
 800d784:	017d7840 	.word	0x017d7840
 800d788:	46000000 	.word	0x46000000
 800d78c:	4c742400 	.word	0x4c742400
 800d790:	4a742400 	.word	0x4a742400
 800d794:	4bbebc20 	.word	0x4bbebc20

0800d798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d79e:	f7ff fe81 	bl	800d4a4 <HAL_RCC_GetSysClockFreq>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	4b10      	ldr	r3, [pc, #64]	@ (800d7e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800d7a6:	699b      	ldr	r3, [r3, #24]
 800d7a8:	0a1b      	lsrs	r3, r3, #8
 800d7aa:	f003 030f 	and.w	r3, r3, #15
 800d7ae:	490f      	ldr	r1, [pc, #60]	@ (800d7ec <HAL_RCC_GetHCLKFreq+0x54>)
 800d7b0:	5ccb      	ldrb	r3, [r1, r3]
 800d7b2:	f003 031f 	and.w	r3, r3, #31
 800d7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	f003 030f 	and.w	r3, r3, #15
 800d7c4:	4a09      	ldr	r2, [pc, #36]	@ (800d7ec <HAL_RCC_GetHCLKFreq+0x54>)
 800d7c6:	5cd3      	ldrb	r3, [r2, r3]
 800d7c8:	f003 031f 	and.w	r3, r3, #31
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d2:	4a07      	ldr	r2, [pc, #28]	@ (800d7f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800d7d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d7d6:	4a07      	ldr	r2, [pc, #28]	@ (800d7f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d7dc:	4b04      	ldr	r3, [pc, #16]	@ (800d7f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800d7de:	681b      	ldr	r3, [r3, #0]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	58024400 	.word	0x58024400
 800d7ec:	08017888 	.word	0x08017888
 800d7f0:	24000008 	.word	0x24000008
 800d7f4:	24000004 	.word	0x24000004

0800d7f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d7fc:	f7ff ffcc 	bl	800d798 <HAL_RCC_GetHCLKFreq>
 800d800:	4602      	mov	r2, r0
 800d802:	4b06      	ldr	r3, [pc, #24]	@ (800d81c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d804:	69db      	ldr	r3, [r3, #28]
 800d806:	091b      	lsrs	r3, r3, #4
 800d808:	f003 0307 	and.w	r3, r3, #7
 800d80c:	4904      	ldr	r1, [pc, #16]	@ (800d820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d80e:	5ccb      	ldrb	r3, [r1, r3]
 800d810:	f003 031f 	and.w	r3, r3, #31
 800d814:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d818:	4618      	mov	r0, r3
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	58024400 	.word	0x58024400
 800d820:	08017888 	.word	0x08017888

0800d824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d828:	f7ff ffb6 	bl	800d798 <HAL_RCC_GetHCLKFreq>
 800d82c:	4602      	mov	r2, r0
 800d82e:	4b06      	ldr	r3, [pc, #24]	@ (800d848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d830:	69db      	ldr	r3, [r3, #28]
 800d832:	0a1b      	lsrs	r3, r3, #8
 800d834:	f003 0307 	and.w	r3, r3, #7
 800d838:	4904      	ldr	r1, [pc, #16]	@ (800d84c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d83a:	5ccb      	ldrb	r3, [r1, r3]
 800d83c:	f003 031f 	and.w	r3, r3, #31
 800d840:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d844:	4618      	mov	r0, r3
 800d846:	bd80      	pop	{r7, pc}
 800d848:	58024400 	.word	0x58024400
 800d84c:	08017888 	.word	0x08017888

0800d850 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d854:	b0ca      	sub	sp, #296	@ 0x128
 800d856:	af00      	add	r7, sp, #0
 800d858:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d85c:	2300      	movs	r3, #0
 800d85e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d862:	2300      	movs	r3, #0
 800d864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d874:	2500      	movs	r5, #0
 800d876:	ea54 0305 	orrs.w	r3, r4, r5
 800d87a:	d049      	beq.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d882:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d886:	d02f      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d888:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d88c:	d828      	bhi.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d88e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d892:	d01a      	beq.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d898:	d822      	bhi.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d003      	beq.n	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d89e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8a2:	d007      	beq.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d8a4:	e01c      	b.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8a6:	4bb8      	ldr	r3, [pc, #736]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8aa:	4ab7      	ldr	r2, [pc, #732]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d8b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d8b2:	e01a      	b.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8b8:	3308      	adds	r3, #8
 800d8ba:	2102      	movs	r1, #2
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f002 fb61 	bl	800ff84 <RCCEx_PLL2_Config>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d8c8:	e00f      	b.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ce:	3328      	adds	r3, #40	@ 0x28
 800d8d0:	2102      	movs	r1, #2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f002 fc08 	bl	80100e8 <RCCEx_PLL3_Config>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d8de:	e004      	b.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8e6:	e000      	b.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10a      	bne.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d8f2:	4ba5      	ldr	r3, [pc, #660]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d900:	4aa1      	ldr	r2, [pc, #644]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d902:	430b      	orrs	r3, r1
 800d904:	6513      	str	r3, [r2, #80]	@ 0x50
 800d906:	e003      	b.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d90c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d918:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d91c:	f04f 0900 	mov.w	r9, #0
 800d920:	ea58 0309 	orrs.w	r3, r8, r9
 800d924:	d047      	beq.n	800d9b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d92a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d82a      	bhi.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d930:	a201      	add	r2, pc, #4	@ (adr r2, 800d938 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d936:	bf00      	nop
 800d938:	0800d94d 	.word	0x0800d94d
 800d93c:	0800d95b 	.word	0x0800d95b
 800d940:	0800d971 	.word	0x0800d971
 800d944:	0800d98f 	.word	0x0800d98f
 800d948:	0800d98f 	.word	0x0800d98f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d94c:	4b8e      	ldr	r3, [pc, #568]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d950:	4a8d      	ldr	r2, [pc, #564]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d958:	e01a      	b.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d95e:	3308      	adds	r3, #8
 800d960:	2100      	movs	r1, #0
 800d962:	4618      	mov	r0, r3
 800d964:	f002 fb0e 	bl	800ff84 <RCCEx_PLL2_Config>
 800d968:	4603      	mov	r3, r0
 800d96a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d96e:	e00f      	b.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d974:	3328      	adds	r3, #40	@ 0x28
 800d976:	2100      	movs	r1, #0
 800d978:	4618      	mov	r0, r3
 800d97a:	f002 fbb5 	bl	80100e8 <RCCEx_PLL3_Config>
 800d97e:	4603      	mov	r3, r0
 800d980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d984:	e004      	b.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d986:	2301      	movs	r3, #1
 800d988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d98c:	e000      	b.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d98e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10a      	bne.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d998:	4b7b      	ldr	r3, [pc, #492]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d99c:	f023 0107 	bic.w	r1, r3, #7
 800d9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9a6:	4a78      	ldr	r2, [pc, #480]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9a8:	430b      	orrs	r3, r1
 800d9aa:	6513      	str	r3, [r2, #80]	@ 0x50
 800d9ac:	e003      	b.n	800d9b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d9c2:	f04f 0b00 	mov.w	fp, #0
 800d9c6:	ea5a 030b 	orrs.w	r3, sl, fp
 800d9ca:	d04c      	beq.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d9d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9d6:	d030      	beq.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d9d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9dc:	d829      	bhi.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d9de:	2bc0      	cmp	r3, #192	@ 0xc0
 800d9e0:	d02d      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d9e2:	2bc0      	cmp	r3, #192	@ 0xc0
 800d9e4:	d825      	bhi.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d9e6:	2b80      	cmp	r3, #128	@ 0x80
 800d9e8:	d018      	beq.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d9ea:	2b80      	cmp	r3, #128	@ 0x80
 800d9ec:	d821      	bhi.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d9f2:	2b40      	cmp	r3, #64	@ 0x40
 800d9f4:	d007      	beq.n	800da06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d9f6:	e01c      	b.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9f8:	4b63      	ldr	r3, [pc, #396]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fc:	4a62      	ldr	r2, [pc, #392]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da04:	e01c      	b.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da0a:	3308      	adds	r3, #8
 800da0c:	2100      	movs	r1, #0
 800da0e:	4618      	mov	r0, r3
 800da10:	f002 fab8 	bl	800ff84 <RCCEx_PLL2_Config>
 800da14:	4603      	mov	r3, r0
 800da16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da1a:	e011      	b.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da20:	3328      	adds	r3, #40	@ 0x28
 800da22:	2100      	movs	r1, #0
 800da24:	4618      	mov	r0, r3
 800da26:	f002 fb5f 	bl	80100e8 <RCCEx_PLL3_Config>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da30:	e006      	b.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da38:	e002      	b.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800da3a:	bf00      	nop
 800da3c:	e000      	b.n	800da40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800da3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10a      	bne.n	800da5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800da48:	4b4f      	ldr	r3, [pc, #316]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da4c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800da50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da56:	4a4c      	ldr	r2, [pc, #304]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da58:	430b      	orrs	r3, r1
 800da5a:	6513      	str	r3, [r2, #80]	@ 0x50
 800da5c:	e003      	b.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800da66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800da72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800da76:	2300      	movs	r3, #0
 800da78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800da7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800da80:	460b      	mov	r3, r1
 800da82:	4313      	orrs	r3, r2
 800da84:	d053      	beq.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800da86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800da8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da92:	d035      	beq.n	800db00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800da94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da98:	d82e      	bhi.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800da9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800da9e:	d031      	beq.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800daa0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800daa4:	d828      	bhi.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800daa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800daaa:	d01a      	beq.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800daac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dab0:	d822      	bhi.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d003      	beq.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800dab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800daba:	d007      	beq.n	800dacc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800dabc:	e01c      	b.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dabe:	4b32      	ldr	r3, [pc, #200]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac2:	4a31      	ldr	r2, [pc, #196]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800daca:	e01c      	b.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dad0:	3308      	adds	r3, #8
 800dad2:	2100      	movs	r1, #0
 800dad4:	4618      	mov	r0, r3
 800dad6:	f002 fa55 	bl	800ff84 <RCCEx_PLL2_Config>
 800dada:	4603      	mov	r3, r0
 800dadc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dae0:	e011      	b.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dae6:	3328      	adds	r3, #40	@ 0x28
 800dae8:	2100      	movs	r1, #0
 800daea:	4618      	mov	r0, r3
 800daec:	f002 fafc 	bl	80100e8 <RCCEx_PLL3_Config>
 800daf0:	4603      	mov	r3, r0
 800daf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800daf6:	e006      	b.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dafe:	e002      	b.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800db00:	bf00      	nop
 800db02:	e000      	b.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800db04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10b      	bne.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800db0e:	4b1e      	ldr	r3, [pc, #120]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db12:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800db16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db1e:	4a1a      	ldr	r2, [pc, #104]	@ (800db88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db20:	430b      	orrs	r3, r1
 800db22:	6593      	str	r3, [r2, #88]	@ 0x58
 800db24:	e003      	b.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800db2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800db3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800db3e:	2300      	movs	r3, #0
 800db40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800db44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800db48:	460b      	mov	r3, r1
 800db4a:	4313      	orrs	r3, r2
 800db4c:	d056      	beq.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800db4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800db56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db5a:	d038      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800db5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db60:	d831      	bhi.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800db66:	d034      	beq.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800db68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800db6c:	d82b      	bhi.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db72:	d01d      	beq.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800db74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db78:	d825      	bhi.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d006      	beq.n	800db8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800db7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db82:	d00a      	beq.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800db84:	e01f      	b.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db86:	bf00      	nop
 800db88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db8c:	4ba2      	ldr	r3, [pc, #648]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db90:	4aa1      	ldr	r2, [pc, #644]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db98:	e01c      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db9e:	3308      	adds	r3, #8
 800dba0:	2100      	movs	r1, #0
 800dba2:	4618      	mov	r0, r3
 800dba4:	f002 f9ee 	bl	800ff84 <RCCEx_PLL2_Config>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dbae:	e011      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbb4:	3328      	adds	r3, #40	@ 0x28
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f002 fa95 	bl	80100e8 <RCCEx_PLL3_Config>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dbc4:	e006      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbcc:	e002      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dbce:	bf00      	nop
 800dbd0:	e000      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dbd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10b      	bne.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dbdc:	4b8e      	ldr	r3, [pc, #568]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbe0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dbec:	4a8a      	ldr	r2, [pc, #552]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbee:	430b      	orrs	r3, r1
 800dbf0:	6593      	str	r3, [r2, #88]	@ 0x58
 800dbf2:	e003      	b.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dc08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dc12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800dc16:	460b      	mov	r3, r1
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	d03a      	beq.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800dc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc22:	2b30      	cmp	r3, #48	@ 0x30
 800dc24:	d01f      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800dc26:	2b30      	cmp	r3, #48	@ 0x30
 800dc28:	d819      	bhi.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dc2a:	2b20      	cmp	r3, #32
 800dc2c:	d00c      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800dc2e:	2b20      	cmp	r3, #32
 800dc30:	d815      	bhi.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d019      	beq.n	800dc6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800dc36:	2b10      	cmp	r3, #16
 800dc38:	d111      	bne.n	800dc5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc3a:	4b77      	ldr	r3, [pc, #476]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc3e:	4a76      	ldr	r2, [pc, #472]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dc46:	e011      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc4c:	3308      	adds	r3, #8
 800dc4e:	2102      	movs	r1, #2
 800dc50:	4618      	mov	r0, r3
 800dc52:	f002 f997 	bl	800ff84 <RCCEx_PLL2_Config>
 800dc56:	4603      	mov	r3, r0
 800dc58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dc5c:	e006      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc64:	e002      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800dc66:	bf00      	nop
 800dc68:	e000      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800dc6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10a      	bne.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dc74:	4b68      	ldr	r3, [pc, #416]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc78:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dc7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc82:	4a65      	ldr	r2, [pc, #404]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc84:	430b      	orrs	r3, r1
 800dc86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dc88:	e003      	b.n	800dc92 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800dc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dc9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dca2:	2300      	movs	r3, #0
 800dca4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dca8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800dcac:	460b      	mov	r3, r1
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	d051      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dcb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcbc:	d035      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800dcbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dcc2:	d82e      	bhi.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dcc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dcc8:	d031      	beq.n	800dd2e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dcca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dcce:	d828      	bhi.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dcd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcd4:	d01a      	beq.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dcd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dcda:	d822      	bhi.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d003      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dce4:	d007      	beq.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dce6:	e01c      	b.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dce8:	4b4b      	ldr	r3, [pc, #300]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dcea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcec:	4a4a      	ldr	r2, [pc, #296]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dcee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dcf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dcf4:	e01c      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dcf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f002 f940 	bl	800ff84 <RCCEx_PLL2_Config>
 800dd04:	4603      	mov	r3, r0
 800dd06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd0a:	e011      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd10:	3328      	adds	r3, #40	@ 0x28
 800dd12:	2100      	movs	r1, #0
 800dd14:	4618      	mov	r0, r3
 800dd16:	f002 f9e7 	bl	80100e8 <RCCEx_PLL3_Config>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd20:	e006      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd28:	e002      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dd2a:	bf00      	nop
 800dd2c:	e000      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dd2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10a      	bne.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dd38:	4b37      	ldr	r3, [pc, #220]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800dd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd46:	4a34      	ldr	r2, [pc, #208]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd48:	430b      	orrs	r3, r1
 800dd4a:	6513      	str	r3, [r2, #80]	@ 0x50
 800dd4c:	e003      	b.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800dd62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dd66:	2300      	movs	r3, #0
 800dd68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd6c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dd70:	460b      	mov	r3, r1
 800dd72:	4313      	orrs	r3, r2
 800dd74:	d056      	beq.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800dd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dd80:	d033      	beq.n	800ddea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800dd82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dd86:	d82c      	bhi.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dd88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dd8c:	d02f      	beq.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800dd8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dd92:	d826      	bhi.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dd94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dd98:	d02b      	beq.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800dd9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dd9e:	d820      	bhi.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dda0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dda4:	d012      	beq.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800dda6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ddaa:	d81a      	bhi.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d022      	beq.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ddb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddb4:	d115      	bne.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ddb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddba:	3308      	adds	r3, #8
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f002 f8e0 	bl	800ff84 <RCCEx_PLL2_Config>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ddca:	e015      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ddcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddd0:	3328      	adds	r3, #40	@ 0x28
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f002 f987 	bl	80100e8 <RCCEx_PLL3_Config>
 800ddda:	4603      	mov	r3, r0
 800dddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dde0:	e00a      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dde2:	2301      	movs	r3, #1
 800dde4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dde8:	e006      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ddea:	bf00      	nop
 800ddec:	e004      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ddee:	bf00      	nop
 800ddf0:	e002      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ddf2:	bf00      	nop
 800ddf4:	e000      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ddf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10d      	bne.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800de00:	4b05      	ldr	r3, [pc, #20]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800de08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de0e:	4a02      	ldr	r2, [pc, #8]	@ (800de18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de10:	430b      	orrs	r3, r1
 800de12:	6513      	str	r3, [r2, #80]	@ 0x50
 800de14:	e006      	b.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800de16:	bf00      	nop
 800de18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800de24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800de30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de34:	2300      	movs	r3, #0
 800de36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800de3a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800de3e:	460b      	mov	r3, r1
 800de40:	4313      	orrs	r3, r2
 800de42:	d055      	beq.n	800def0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800de44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800de4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de50:	d033      	beq.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800de52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de56:	d82c      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de5c:	d02f      	beq.n	800debe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800de5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de62:	d826      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800de68:	d02b      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800de6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800de6e:	d820      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de74:	d012      	beq.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800de76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de7a:	d81a      	bhi.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d022      	beq.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800de80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de84:	d115      	bne.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de8a:	3308      	adds	r3, #8
 800de8c:	2101      	movs	r1, #1
 800de8e:	4618      	mov	r0, r3
 800de90:	f002 f878 	bl	800ff84 <RCCEx_PLL2_Config>
 800de94:	4603      	mov	r3, r0
 800de96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800de9a:	e015      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800de9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea0:	3328      	adds	r3, #40	@ 0x28
 800dea2:	2101      	movs	r1, #1
 800dea4:	4618      	mov	r0, r3
 800dea6:	f002 f91f 	bl	80100e8 <RCCEx_PLL3_Config>
 800deaa:	4603      	mov	r3, r0
 800deac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800deb0:	e00a      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800deb8:	e006      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800deba:	bf00      	nop
 800debc:	e004      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800debe:	bf00      	nop
 800dec0:	e002      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dec2:	bf00      	nop
 800dec4:	e000      	b.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10b      	bne.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ded0:	4ba3      	ldr	r3, [pc, #652]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ded2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ded4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ded8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dedc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dee0:	4a9f      	ldr	r2, [pc, #636]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dee2:	430b      	orrs	r3, r1
 800dee4:	6593      	str	r3, [r2, #88]	@ 0x58
 800dee6:	e003      	b.n	800def0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800deec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800def0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800def4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800defc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df00:	2300      	movs	r3, #0
 800df02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800df0a:	460b      	mov	r3, r1
 800df0c:	4313      	orrs	r3, r2
 800df0e:	d037      	beq.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800df10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df1a:	d00e      	beq.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800df1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df20:	d816      	bhi.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800df22:	2b00      	cmp	r3, #0
 800df24:	d018      	beq.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800df26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df2a:	d111      	bne.n	800df50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df2c:	4b8c      	ldr	r3, [pc, #560]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df30:	4a8b      	ldr	r2, [pc, #556]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800df38:	e00f      	b.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df3e:	3308      	adds	r3, #8
 800df40:	2101      	movs	r1, #1
 800df42:	4618      	mov	r0, r3
 800df44:	f002 f81e 	bl	800ff84 <RCCEx_PLL2_Config>
 800df48:	4603      	mov	r3, r0
 800df4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800df4e:	e004      	b.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df50:	2301      	movs	r3, #1
 800df52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df56:	e000      	b.n	800df5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800df58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800df62:	4b7f      	ldr	r3, [pc, #508]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800df6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df70:	4a7b      	ldr	r2, [pc, #492]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df72:	430b      	orrs	r3, r1
 800df74:	6513      	str	r3, [r2, #80]	@ 0x50
 800df76:	e003      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800df80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800df8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800df90:	2300      	movs	r3, #0
 800df92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800df96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4313      	orrs	r3, r2
 800df9e:	d039      	beq.n	800e014 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800dfa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	d81c      	bhi.n	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800dfaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800dfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb0:	0800dfed 	.word	0x0800dfed
 800dfb4:	0800dfc1 	.word	0x0800dfc1
 800dfb8:	0800dfcf 	.word	0x0800dfcf
 800dfbc:	0800dfed 	.word	0x0800dfed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfc0:	4b67      	ldr	r3, [pc, #412]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc4:	4a66      	ldr	r2, [pc, #408]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dfcc:	e00f      	b.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfd2:	3308      	adds	r3, #8
 800dfd4:	2102      	movs	r1, #2
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f001 ffd4 	bl	800ff84 <RCCEx_PLL2_Config>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800dfe2:	e004      	b.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dfea:	e000      	b.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800dfec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10a      	bne.n	800e00c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800dff6:	4b5a      	ldr	r3, [pc, #360]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dffa:	f023 0103 	bic.w	r1, r3, #3
 800dffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e004:	4a56      	ldr	r2, [pc, #344]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e006:	430b      	orrs	r3, r1
 800e008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e00a:	e003      	b.n	800e014 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e00c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e020:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e024:	2300      	movs	r3, #0
 800e026:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e02a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e02e:	460b      	mov	r3, r1
 800e030:	4313      	orrs	r3, r2
 800e032:	f000 809f 	beq.w	800e174 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e036:	4b4b      	ldr	r3, [pc, #300]	@ (800e164 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4a4a      	ldr	r2, [pc, #296]	@ (800e164 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e03c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e040:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e042:	f7f4 f933 	bl	80022ac <HAL_GetTick>
 800e046:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e04a:	e00b      	b.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e04c:	f7f4 f92e 	bl	80022ac <HAL_GetTick>
 800e050:	4602      	mov	r2, r0
 800e052:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	2b64      	cmp	r3, #100	@ 0x64
 800e05a:	d903      	bls.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e05c:	2303      	movs	r3, #3
 800e05e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e062:	e005      	b.n	800e070 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e064:	4b3f      	ldr	r3, [pc, #252]	@ (800e164 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d0ed      	beq.n	800e04c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e074:	2b00      	cmp	r3, #0
 800e076:	d179      	bne.n	800e16c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e078:	4b39      	ldr	r3, [pc, #228]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e07a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e080:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e084:	4053      	eors	r3, r2
 800e086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d015      	beq.n	800e0ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e08e:	4b34      	ldr	r3, [pc, #208]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e096:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e09a:	4b31      	ldr	r3, [pc, #196]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e09c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e09e:	4a30      	ldr	r2, [pc, #192]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e0a6:	4b2e      	ldr	r3, [pc, #184]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0aa:	4a2d      	ldr	r2, [pc, #180]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e0b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e0b2:	4a2b      	ldr	r2, [pc, #172]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e0b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0c6:	d118      	bne.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0c8:	f7f4 f8f0 	bl	80022ac <HAL_GetTick>
 800e0cc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e0d0:	e00d      	b.n	800e0ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0d2:	f7f4 f8eb 	bl	80022ac <HAL_GetTick>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e0dc:	1ad2      	subs	r2, r2, r3
 800e0de:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d903      	bls.n	800e0ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800e0ec:	e005      	b.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e0ee:	4b1c      	ldr	r3, [pc, #112]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0f2:	f003 0302 	and.w	r3, r3, #2
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d0eb      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e0fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d129      	bne.n	800e156 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e10a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e10e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e112:	d10e      	bne.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e114:	4b12      	ldr	r3, [pc, #72]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e116:	691b      	ldr	r3, [r3, #16]
 800e118:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e124:	091a      	lsrs	r2, r3, #4
 800e126:	4b10      	ldr	r3, [pc, #64]	@ (800e168 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e128:	4013      	ands	r3, r2
 800e12a:	4a0d      	ldr	r2, [pc, #52]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e12c:	430b      	orrs	r3, r1
 800e12e:	6113      	str	r3, [r2, #16]
 800e130:	e005      	b.n	800e13e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e132:	4b0b      	ldr	r3, [pc, #44]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	4a0a      	ldr	r2, [pc, #40]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e138:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e13c:	6113      	str	r3, [r2, #16]
 800e13e:	4b08      	ldr	r3, [pc, #32]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e140:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e146:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e14a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e14e:	4a04      	ldr	r2, [pc, #16]	@ (800e160 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e150:	430b      	orrs	r3, r1
 800e152:	6713      	str	r3, [r2, #112]	@ 0x70
 800e154:	e00e      	b.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e15a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e15e:	e009      	b.n	800e174 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e160:	58024400 	.word	0x58024400
 800e164:	58024800 	.word	0x58024800
 800e168:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e16c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e170:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17c:	f002 0301 	and.w	r3, r2, #1
 800e180:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e184:	2300      	movs	r3, #0
 800e186:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e18a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e18e:	460b      	mov	r3, r1
 800e190:	4313      	orrs	r3, r2
 800e192:	f000 8089 	beq.w	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e19a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e19c:	2b28      	cmp	r3, #40	@ 0x28
 800e19e:	d86b      	bhi.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e1a0:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a6:	bf00      	nop
 800e1a8:	0800e281 	.word	0x0800e281
 800e1ac:	0800e279 	.word	0x0800e279
 800e1b0:	0800e279 	.word	0x0800e279
 800e1b4:	0800e279 	.word	0x0800e279
 800e1b8:	0800e279 	.word	0x0800e279
 800e1bc:	0800e279 	.word	0x0800e279
 800e1c0:	0800e279 	.word	0x0800e279
 800e1c4:	0800e279 	.word	0x0800e279
 800e1c8:	0800e24d 	.word	0x0800e24d
 800e1cc:	0800e279 	.word	0x0800e279
 800e1d0:	0800e279 	.word	0x0800e279
 800e1d4:	0800e279 	.word	0x0800e279
 800e1d8:	0800e279 	.word	0x0800e279
 800e1dc:	0800e279 	.word	0x0800e279
 800e1e0:	0800e279 	.word	0x0800e279
 800e1e4:	0800e279 	.word	0x0800e279
 800e1e8:	0800e263 	.word	0x0800e263
 800e1ec:	0800e279 	.word	0x0800e279
 800e1f0:	0800e279 	.word	0x0800e279
 800e1f4:	0800e279 	.word	0x0800e279
 800e1f8:	0800e279 	.word	0x0800e279
 800e1fc:	0800e279 	.word	0x0800e279
 800e200:	0800e279 	.word	0x0800e279
 800e204:	0800e279 	.word	0x0800e279
 800e208:	0800e281 	.word	0x0800e281
 800e20c:	0800e279 	.word	0x0800e279
 800e210:	0800e279 	.word	0x0800e279
 800e214:	0800e279 	.word	0x0800e279
 800e218:	0800e279 	.word	0x0800e279
 800e21c:	0800e279 	.word	0x0800e279
 800e220:	0800e279 	.word	0x0800e279
 800e224:	0800e279 	.word	0x0800e279
 800e228:	0800e281 	.word	0x0800e281
 800e22c:	0800e279 	.word	0x0800e279
 800e230:	0800e279 	.word	0x0800e279
 800e234:	0800e279 	.word	0x0800e279
 800e238:	0800e279 	.word	0x0800e279
 800e23c:	0800e279 	.word	0x0800e279
 800e240:	0800e279 	.word	0x0800e279
 800e244:	0800e279 	.word	0x0800e279
 800e248:	0800e281 	.word	0x0800e281
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e250:	3308      	adds	r3, #8
 800e252:	2101      	movs	r1, #1
 800e254:	4618      	mov	r0, r3
 800e256:	f001 fe95 	bl	800ff84 <RCCEx_PLL2_Config>
 800e25a:	4603      	mov	r3, r0
 800e25c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e260:	e00f      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e266:	3328      	adds	r3, #40	@ 0x28
 800e268:	2101      	movs	r1, #1
 800e26a:	4618      	mov	r0, r3
 800e26c:	f001 ff3c 	bl	80100e8 <RCCEx_PLL3_Config>
 800e270:	4603      	mov	r3, r0
 800e272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e276:	e004      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e278:	2301      	movs	r3, #1
 800e27a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e27e:	e000      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e280:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10a      	bne.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e28a:	4bbf      	ldr	r3, [pc, #764]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e28c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e28e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e298:	4abb      	ldr	r2, [pc, #748]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e29a:	430b      	orrs	r3, r1
 800e29c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e29e:	e003      	b.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	f002 0302 	and.w	r3, r2, #2
 800e2b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e2be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	d041      	beq.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2ce:	2b05      	cmp	r3, #5
 800e2d0:	d824      	bhi.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e2d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e2d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d8:	0800e325 	.word	0x0800e325
 800e2dc:	0800e2f1 	.word	0x0800e2f1
 800e2e0:	0800e307 	.word	0x0800e307
 800e2e4:	0800e325 	.word	0x0800e325
 800e2e8:	0800e325 	.word	0x0800e325
 800e2ec:	0800e325 	.word	0x0800e325
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2f4:	3308      	adds	r3, #8
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f001 fe43 	bl	800ff84 <RCCEx_PLL2_Config>
 800e2fe:	4603      	mov	r3, r0
 800e300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e304:	e00f      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e30a:	3328      	adds	r3, #40	@ 0x28
 800e30c:	2101      	movs	r1, #1
 800e30e:	4618      	mov	r0, r3
 800e310:	f001 feea 	bl	80100e8 <RCCEx_PLL3_Config>
 800e314:	4603      	mov	r3, r0
 800e316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e31a:	e004      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e31c:	2301      	movs	r3, #1
 800e31e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e322:	e000      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e324:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d10a      	bne.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e32e:	4b96      	ldr	r3, [pc, #600]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e332:	f023 0107 	bic.w	r1, r3, #7
 800e336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e33a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e33c:	4a92      	ldr	r2, [pc, #584]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e33e:	430b      	orrs	r3, r1
 800e340:	6553      	str	r3, [r2, #84]	@ 0x54
 800e342:	e003      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e354:	f002 0304 	and.w	r3, r2, #4
 800e358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e35c:	2300      	movs	r3, #0
 800e35e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e362:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e366:	460b      	mov	r3, r1
 800e368:	4313      	orrs	r3, r2
 800e36a:	d044      	beq.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e374:	2b05      	cmp	r3, #5
 800e376:	d825      	bhi.n	800e3c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e378:	a201      	add	r2, pc, #4	@ (adr r2, 800e380 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e37e:	bf00      	nop
 800e380:	0800e3cd 	.word	0x0800e3cd
 800e384:	0800e399 	.word	0x0800e399
 800e388:	0800e3af 	.word	0x0800e3af
 800e38c:	0800e3cd 	.word	0x0800e3cd
 800e390:	0800e3cd 	.word	0x0800e3cd
 800e394:	0800e3cd 	.word	0x0800e3cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e39c:	3308      	adds	r3, #8
 800e39e:	2101      	movs	r1, #1
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f001 fdef 	bl	800ff84 <RCCEx_PLL2_Config>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e3ac:	e00f      	b.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3b2:	3328      	adds	r3, #40	@ 0x28
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f001 fe96 	bl	80100e8 <RCCEx_PLL3_Config>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e3c2:	e004      	b.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e3ca:	e000      	b.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e3cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10b      	bne.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e3d6:	4b6c      	ldr	r3, [pc, #432]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e3d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3da:	f023 0107 	bic.w	r1, r3, #7
 800e3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3e6:	4a68      	ldr	r2, [pc, #416]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e3e8:	430b      	orrs	r3, r1
 800e3ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800e3ec:	e003      	b.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fe:	f002 0320 	and.w	r3, r2, #32
 800e402:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e406:	2300      	movs	r3, #0
 800e408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e40c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e410:	460b      	mov	r3, r1
 800e412:	4313      	orrs	r3, r2
 800e414:	d055      	beq.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e41e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e422:	d033      	beq.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e428:	d82c      	bhi.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e42a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e42e:	d02f      	beq.n	800e490 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e434:	d826      	bhi.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e436:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e43a:	d02b      	beq.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e43c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e440:	d820      	bhi.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e446:	d012      	beq.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e44c:	d81a      	bhi.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d022      	beq.n	800e498 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e456:	d115      	bne.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e45c:	3308      	adds	r3, #8
 800e45e:	2100      	movs	r1, #0
 800e460:	4618      	mov	r0, r3
 800e462:	f001 fd8f 	bl	800ff84 <RCCEx_PLL2_Config>
 800e466:	4603      	mov	r3, r0
 800e468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e46c:	e015      	b.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e472:	3328      	adds	r3, #40	@ 0x28
 800e474:	2102      	movs	r1, #2
 800e476:	4618      	mov	r0, r3
 800e478:	f001 fe36 	bl	80100e8 <RCCEx_PLL3_Config>
 800e47c:	4603      	mov	r3, r0
 800e47e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e482:	e00a      	b.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e484:	2301      	movs	r3, #1
 800e486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e48a:	e006      	b.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e48c:	bf00      	nop
 800e48e:	e004      	b.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e490:	bf00      	nop
 800e492:	e002      	b.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e494:	bf00      	nop
 800e496:	e000      	b.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e49a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10b      	bne.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e4a2:	4b39      	ldr	r3, [pc, #228]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4b2:	4a35      	ldr	r2, [pc, #212]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4b4:	430b      	orrs	r3, r1
 800e4b6:	6553      	str	r3, [r2, #84]	@ 0x54
 800e4b8:	e003      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e4be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e4ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e4d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	d058      	beq.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e4ee:	d033      	beq.n	800e558 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e4f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e4f4:	d82c      	bhi.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e4f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4fa:	d02f      	beq.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e4fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e500:	d826      	bhi.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e502:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e506:	d02b      	beq.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e50c:	d820      	bhi.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e50e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e512:	d012      	beq.n	800e53a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e518:	d81a      	bhi.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d022      	beq.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e51e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e522:	d115      	bne.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e528:	3308      	adds	r3, #8
 800e52a:	2100      	movs	r1, #0
 800e52c:	4618      	mov	r0, r3
 800e52e:	f001 fd29 	bl	800ff84 <RCCEx_PLL2_Config>
 800e532:	4603      	mov	r3, r0
 800e534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e538:	e015      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e53e:	3328      	adds	r3, #40	@ 0x28
 800e540:	2102      	movs	r1, #2
 800e542:	4618      	mov	r0, r3
 800e544:	f001 fdd0 	bl	80100e8 <RCCEx_PLL3_Config>
 800e548:	4603      	mov	r3, r0
 800e54a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e54e:	e00a      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e550:	2301      	movs	r3, #1
 800e552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e556:	e006      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e558:	bf00      	nop
 800e55a:	e004      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e55c:	bf00      	nop
 800e55e:	e002      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e560:	bf00      	nop
 800e562:	e000      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e564:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d10e      	bne.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e56e:	4b06      	ldr	r3, [pc, #24]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e572:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e57a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e57e:	4a02      	ldr	r2, [pc, #8]	@ (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e580:	430b      	orrs	r3, r1
 800e582:	6593      	str	r3, [r2, #88]	@ 0x58
 800e584:	e006      	b.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e586:	bf00      	nop
 800e588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e58c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e5a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e5aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	d055      	beq.n	800e660 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e5bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e5c0:	d033      	beq.n	800e62a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e5c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e5c6:	d82c      	bhi.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e5c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e5cc:	d02f      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e5ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e5d2:	d826      	bhi.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e5d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e5d8:	d02b      	beq.n	800e632 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e5da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e5de:	d820      	bhi.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e5e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e5e4:	d012      	beq.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e5e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e5ea:	d81a      	bhi.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d022      	beq.n	800e636 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e5f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5f4:	d115      	bne.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f001 fcc0 	bl	800ff84 <RCCEx_PLL2_Config>
 800e604:	4603      	mov	r3, r0
 800e606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e60a:	e015      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e610:	3328      	adds	r3, #40	@ 0x28
 800e612:	2102      	movs	r1, #2
 800e614:	4618      	mov	r0, r3
 800e616:	f001 fd67 	bl	80100e8 <RCCEx_PLL3_Config>
 800e61a:	4603      	mov	r3, r0
 800e61c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e620:	e00a      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e628:	e006      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e62a:	bf00      	nop
 800e62c:	e004      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e62e:	bf00      	nop
 800e630:	e002      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e632:	bf00      	nop
 800e634:	e000      	b.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e636:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d10b      	bne.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e640:	4ba1      	ldr	r3, [pc, #644]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e644:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e64c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e650:	4a9d      	ldr	r2, [pc, #628]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e652:	430b      	orrs	r3, r1
 800e654:	6593      	str	r3, [r2, #88]	@ 0x58
 800e656:	e003      	b.n	800e660 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e65c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e668:	f002 0308 	and.w	r3, r2, #8
 800e66c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e670:	2300      	movs	r3, #0
 800e672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e676:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e67a:	460b      	mov	r3, r1
 800e67c:	4313      	orrs	r3, r2
 800e67e:	d01e      	beq.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e68c:	d10c      	bne.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e692:	3328      	adds	r3, #40	@ 0x28
 800e694:	2102      	movs	r1, #2
 800e696:	4618      	mov	r0, r3
 800e698:	f001 fd26 	bl	80100e8 <RCCEx_PLL3_Config>
 800e69c:	4603      	mov	r3, r0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e6a8:	4b87      	ldr	r3, [pc, #540]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6b8:	4a83      	ldr	r2, [pc, #524]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6ba:	430b      	orrs	r3, r1
 800e6bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c6:	f002 0310 	and.w	r3, r2, #16
 800e6ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e6d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e6d8:	460b      	mov	r3, r1
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	d01e      	beq.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e6e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6ea:	d10c      	bne.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6f0:	3328      	adds	r3, #40	@ 0x28
 800e6f2:	2102      	movs	r1, #2
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f001 fcf7 	bl	80100e8 <RCCEx_PLL3_Config>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e700:	2301      	movs	r3, #1
 800e702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e706:	4b70      	ldr	r3, [pc, #448]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e70a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e716:	4a6c      	ldr	r2, [pc, #432]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e718:	430b      	orrs	r3, r1
 800e71a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e724:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e72c:	2300      	movs	r3, #0
 800e72e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e732:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e736:	460b      	mov	r3, r1
 800e738:	4313      	orrs	r3, r2
 800e73a:	d03e      	beq.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e748:	d022      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e74a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e74e:	d81b      	bhi.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e750:	2b00      	cmp	r3, #0
 800e752:	d003      	beq.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e758:	d00b      	beq.n	800e772 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e75a:	e015      	b.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e760:	3308      	adds	r3, #8
 800e762:	2100      	movs	r1, #0
 800e764:	4618      	mov	r0, r3
 800e766:	f001 fc0d 	bl	800ff84 <RCCEx_PLL2_Config>
 800e76a:	4603      	mov	r3, r0
 800e76c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e770:	e00f      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e776:	3328      	adds	r3, #40	@ 0x28
 800e778:	2102      	movs	r1, #2
 800e77a:	4618      	mov	r0, r3
 800e77c:	f001 fcb4 	bl	80100e8 <RCCEx_PLL3_Config>
 800e780:	4603      	mov	r3, r0
 800e782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e786:	e004      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e788:	2301      	movs	r3, #1
 800e78a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e78e:	e000      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e790:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10b      	bne.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e79a:	4b4b      	ldr	r3, [pc, #300]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e79c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e79e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e7aa:	4a47      	ldr	r2, [pc, #284]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7ac:	430b      	orrs	r3, r1
 800e7ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800e7b0:	e003      	b.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e7b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e7c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e7cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	d03b      	beq.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e7de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e7e2:	d01f      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e7e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e7e8:	d818      	bhi.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e7ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7ee:	d003      	beq.n	800e7f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e7f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e7f4:	d007      	beq.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e7f6:	e011      	b.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7f8:	4b33      	ldr	r3, [pc, #204]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7fc:	4a32      	ldr	r2, [pc, #200]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e804:	e00f      	b.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e80a:	3328      	adds	r3, #40	@ 0x28
 800e80c:	2101      	movs	r1, #1
 800e80e:	4618      	mov	r0, r3
 800e810:	f001 fc6a 	bl	80100e8 <RCCEx_PLL3_Config>
 800e814:	4603      	mov	r3, r0
 800e816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e81a:	e004      	b.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e81c:	2301      	movs	r3, #1
 800e81e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e822:	e000      	b.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e824:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d10b      	bne.n	800e846 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e82e:	4b26      	ldr	r3, [pc, #152]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e832:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e83e:	4a22      	ldr	r2, [pc, #136]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e840:	430b      	orrs	r3, r1
 800e842:	6553      	str	r3, [r2, #84]	@ 0x54
 800e844:	e003      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e84a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e856:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e85a:	673b      	str	r3, [r7, #112]	@ 0x70
 800e85c:	2300      	movs	r3, #0
 800e85e:	677b      	str	r3, [r7, #116]	@ 0x74
 800e860:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e864:	460b      	mov	r3, r1
 800e866:	4313      	orrs	r3, r2
 800e868:	d034      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e870:	2b00      	cmp	r3, #0
 800e872:	d003      	beq.n	800e87c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e878:	d007      	beq.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e87a:	e011      	b.n	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e87c:	4b12      	ldr	r3, [pc, #72]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e880:	4a11      	ldr	r2, [pc, #68]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e888:	e00e      	b.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e88e:	3308      	adds	r3, #8
 800e890:	2102      	movs	r1, #2
 800e892:	4618      	mov	r0, r3
 800e894:	f001 fb76 	bl	800ff84 <RCCEx_PLL2_Config>
 800e898:	4603      	mov	r3, r0
 800e89a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e89e:	e003      	b.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e8a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d10d      	bne.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e8b0:	4b05      	ldr	r3, [pc, #20]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8be:	4a02      	ldr	r2, [pc, #8]	@ (800e8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8c0:	430b      	orrs	r3, r1
 800e8c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e8c4:	e006      	b.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e8c6:	bf00      	nop
 800e8c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e8e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	d00c      	beq.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8f4:	3328      	adds	r3, #40	@ 0x28
 800e8f6:	2102      	movs	r1, #2
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f001 fbf5 	bl	80100e8 <RCCEx_PLL3_Config>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e912:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e916:	663b      	str	r3, [r7, #96]	@ 0x60
 800e918:	2300      	movs	r3, #0
 800e91a:	667b      	str	r3, [r7, #100]	@ 0x64
 800e91c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e920:	460b      	mov	r3, r1
 800e922:	4313      	orrs	r3, r2
 800e924:	d038      	beq.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e92e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e932:	d018      	beq.n	800e966 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e938:	d811      	bhi.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e93a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e93e:	d014      	beq.n	800e96a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e944:	d80b      	bhi.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e946:	2b00      	cmp	r3, #0
 800e948:	d011      	beq.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e94a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e94e:	d106      	bne.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e950:	4bc3      	ldr	r3, [pc, #780]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e954:	4ac2      	ldr	r2, [pc, #776]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e95a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e95c:	e008      	b.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e95e:	2301      	movs	r3, #1
 800e960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e964:	e004      	b.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e966:	bf00      	nop
 800e968:	e002      	b.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e96a:	bf00      	nop
 800e96c:	e000      	b.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10b      	bne.n	800e990 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e978:	4bb9      	ldr	r3, [pc, #740]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e97a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e97c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e988:	4ab5      	ldr	r2, [pc, #724]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e98a:	430b      	orrs	r3, r1
 800e98c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e98e:	e003      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e9a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	d009      	beq.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e9b4:	4baa      	ldr	r3, [pc, #680]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9c2:	4aa7      	ldr	r2, [pc, #668]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9c4:	430b      	orrs	r3, r1
 800e9c6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e9d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	d00a      	beq.n	800e9fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e9e4:	4b9e      	ldr	r3, [pc, #632]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9e6:	691b      	ldr	r3, [r3, #16]
 800e9e8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e9f4:	4a9a      	ldr	r2, [pc, #616]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9f6:	430b      	orrs	r3, r1
 800e9f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea02:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ea06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea08:	2300      	movs	r3, #0
 800ea0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ea10:	460b      	mov	r3, r1
 800ea12:	4313      	orrs	r3, r2
 800ea14:	d009      	beq.n	800ea2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ea16:	4b92      	ldr	r3, [pc, #584]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea1a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ea1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea24:	4a8e      	ldr	r2, [pc, #568]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea26:	430b      	orrs	r3, r1
 800ea28:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ea2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea32:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ea36:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea38:	2300      	movs	r3, #0
 800ea3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ea40:	460b      	mov	r3, r1
 800ea42:	4313      	orrs	r3, r2
 800ea44:	d00e      	beq.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ea46:	4b86      	ldr	r3, [pc, #536]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea48:	691b      	ldr	r3, [r3, #16]
 800ea4a:	4a85      	ldr	r2, [pc, #532]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ea50:	6113      	str	r3, [r2, #16]
 800ea52:	4b83      	ldr	r3, [pc, #524]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea54:	6919      	ldr	r1, [r3, #16]
 800ea56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ea5e:	4a80      	ldr	r2, [pc, #512]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea60:	430b      	orrs	r3, r1
 800ea62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ea64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ea70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ea72:	2300      	movs	r3, #0
 800ea74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	d009      	beq.n	800ea94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ea80:	4b77      	ldr	r3, [pc, #476]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea84:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ea88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea8e:	4a74      	ldr	r2, [pc, #464]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea90:	430b      	orrs	r3, r1
 800ea92:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ea94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800eaa0:	633b      	str	r3, [r7, #48]	@ 0x30
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaa6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800eaaa:	460b      	mov	r3, r1
 800eaac:	4313      	orrs	r3, r2
 800eaae:	d00a      	beq.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800eab0:	4b6b      	ldr	r3, [pc, #428]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eab4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800eab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eac0:	4a67      	ldr	r2, [pc, #412]	@ (800ec60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eac2:	430b      	orrs	r3, r1
 800eac4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800eac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eace:	2100      	movs	r1, #0
 800ead0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ead2:	f003 0301 	and.w	r3, r3, #1
 800ead6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ead8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800eadc:	460b      	mov	r3, r1
 800eade:	4313      	orrs	r3, r2
 800eae0:	d011      	beq.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eae6:	3308      	adds	r3, #8
 800eae8:	2100      	movs	r1, #0
 800eaea:	4618      	mov	r0, r3
 800eaec:	f001 fa4a 	bl	800ff84 <RCCEx_PLL2_Config>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eaf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d003      	beq.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eafe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	2100      	movs	r1, #0
 800eb10:	6239      	str	r1, [r7, #32]
 800eb12:	f003 0302 	and.w	r3, r3, #2
 800eb16:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	d011      	beq.n	800eb46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb26:	3308      	adds	r3, #8
 800eb28:	2101      	movs	r1, #1
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f001 fa2a 	bl	800ff84 <RCCEx_PLL2_Config>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eb36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800eb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4e:	2100      	movs	r1, #0
 800eb50:	61b9      	str	r1, [r7, #24]
 800eb52:	f003 0304 	and.w	r3, r3, #4
 800eb56:	61fb      	str	r3, [r7, #28]
 800eb58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	d011      	beq.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb66:	3308      	adds	r3, #8
 800eb68:	2102      	movs	r1, #2
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f001 fa0a 	bl	800ff84 <RCCEx_PLL2_Config>
 800eb70:	4603      	mov	r3, r0
 800eb72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eb76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800eb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8e:	2100      	movs	r1, #0
 800eb90:	6139      	str	r1, [r7, #16]
 800eb92:	f003 0308 	and.w	r3, r3, #8
 800eb96:	617b      	str	r3, [r7, #20]
 800eb98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	d011      	beq.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eba6:	3328      	adds	r3, #40	@ 0x28
 800eba8:	2100      	movs	r1, #0
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f001 fa9c 	bl	80100e8 <RCCEx_PLL3_Config>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ebb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d003      	beq.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ebc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebce:	2100      	movs	r1, #0
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	f003 0310 	and.w	r3, r3, #16
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	d011      	beq.n	800ec06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebe6:	3328      	adds	r3, #40	@ 0x28
 800ebe8:	2101      	movs	r1, #1
 800ebea:	4618      	mov	r0, r3
 800ebec:	f001 fa7c 	bl	80100e8 <RCCEx_PLL3_Config>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ebf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d003      	beq.n	800ec06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ec06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	2100      	movs	r1, #0
 800ec10:	6039      	str	r1, [r7, #0]
 800ec12:	f003 0320 	and.w	r3, r3, #32
 800ec16:	607b      	str	r3, [r7, #4]
 800ec18:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	d011      	beq.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec26:	3328      	adds	r3, #40	@ 0x28
 800ec28:	2102      	movs	r1, #2
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f001 fa5c 	bl	80100e8 <RCCEx_PLL3_Config>
 800ec30:	4603      	mov	r3, r0
 800ec32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ec36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d003      	beq.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800ec46:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d101      	bne.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	e000      	b.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ec52:	2301      	movs	r3, #1
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec60:	58024400 	.word	0x58024400

0800ec64 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b090      	sub	sp, #64	@ 0x40
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ec6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec72:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ec76:	430b      	orrs	r3, r1
 800ec78:	f040 8094 	bne.w	800eda4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ec7c:	4b9e      	ldr	r3, [pc, #632]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec80:	f003 0307 	and.w	r3, r3, #7
 800ec84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ec86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec88:	2b04      	cmp	r3, #4
 800ec8a:	f200 8087 	bhi.w	800ed9c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ec8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ec90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec94:	0800eca9 	.word	0x0800eca9
 800ec98:	0800ecd1 	.word	0x0800ecd1
 800ec9c:	0800ecf9 	.word	0x0800ecf9
 800eca0:	0800ed95 	.word	0x0800ed95
 800eca4:	0800ed21 	.word	0x0800ed21
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eca8:	4b93      	ldr	r3, [pc, #588]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ecb4:	d108      	bne.n	800ecc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f001 f810 	bl	800fce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecc4:	f000 bd45 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eccc:	f000 bd41 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ecd0:	4b89      	ldr	r3, [pc, #548]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ecd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ecdc:	d108      	bne.n	800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecde:	f107 0318 	add.w	r3, r7, #24
 800ece2:	4618      	mov	r0, r3
 800ece4:	f000 fd54 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecec:	f000 bd31 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecf4:	f000 bd2d 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ecf8:	4b7f      	ldr	r3, [pc, #508]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed04:	d108      	bne.n	800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed06:	f107 030c 	add.w	r3, r7, #12
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f000 fe94 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed14:	f000 bd1d 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed1c:	f000 bd19 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ed20:	4b75      	ldr	r3, [pc, #468]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ed28:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed2a:	4b73      	ldr	r3, [pc, #460]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 0304 	and.w	r3, r3, #4
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	d10c      	bne.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ed36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d109      	bne.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed3c:	4b6e      	ldr	r3, [pc, #440]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	08db      	lsrs	r3, r3, #3
 800ed42:	f003 0303 	and.w	r3, r3, #3
 800ed46:	4a6d      	ldr	r2, [pc, #436]	@ (800eefc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ed48:	fa22 f303 	lsr.w	r3, r2, r3
 800ed4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed4e:	e01f      	b.n	800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed50:	4b69      	ldr	r3, [pc, #420]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed5c:	d106      	bne.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ed5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed64:	d102      	bne.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ed66:	4b66      	ldr	r3, [pc, #408]	@ (800ef00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ed68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed6a:	e011      	b.n	800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed6c:	4b62      	ldr	r3, [pc, #392]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed78:	d106      	bne.n	800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ed7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed80:	d102      	bne.n	800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ed82:	4b60      	ldr	r3, [pc, #384]	@ (800ef04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ed84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed86:	e003      	b.n	800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ed8c:	f000 bce1 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ed90:	f000 bcdf 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ed94:	4b5c      	ldr	r3, [pc, #368]	@ (800ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ed96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed98:	f000 bcdb 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eda0:	f000 bcd7 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800eda4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eda8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800edac:	430b      	orrs	r3, r1
 800edae:	f040 80ad 	bne.w	800ef0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800edb2:	4b51      	ldr	r3, [pc, #324]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edb6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800edba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800edbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800edc2:	d056      	beq.n	800ee72 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800edc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800edca:	f200 8090 	bhi.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800edce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd0:	2bc0      	cmp	r3, #192	@ 0xc0
 800edd2:	f000 8088 	beq.w	800eee6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800edd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd8:	2bc0      	cmp	r3, #192	@ 0xc0
 800edda:	f200 8088 	bhi.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800edde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede0:	2b80      	cmp	r3, #128	@ 0x80
 800ede2:	d032      	beq.n	800ee4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ede4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede6:	2b80      	cmp	r3, #128	@ 0x80
 800ede8:	f200 8081 	bhi.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800edec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d003      	beq.n	800edfa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800edf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf4:	2b40      	cmp	r3, #64	@ 0x40
 800edf6:	d014      	beq.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800edf8:	e079      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800edfa:	4b3f      	ldr	r3, [pc, #252]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee06:	d108      	bne.n	800ee1a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 ff67 	bl	800fce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee16:	f000 bc9c 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee1e:	f000 bc98 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee22:	4b35      	ldr	r3, [pc, #212]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee2e:	d108      	bne.n	800ee42 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee30:	f107 0318 	add.w	r3, r7, #24
 800ee34:	4618      	mov	r0, r3
 800ee36:	f000 fcab 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee3e:	f000 bc88 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee46:	f000 bc84 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee4a:	4b2b      	ldr	r3, [pc, #172]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee56:	d108      	bne.n	800ee6a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee58:	f107 030c 	add.w	r3, r7, #12
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f000 fdeb 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee66:	f000 bc74 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee6e:	f000 bc70 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ee72:	4b21      	ldr	r3, [pc, #132]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ee7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ee7c:	4b1e      	ldr	r3, [pc, #120]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f003 0304 	and.w	r3, r3, #4
 800ee84:	2b04      	cmp	r3, #4
 800ee86:	d10c      	bne.n	800eea2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ee88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d109      	bne.n	800eea2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee8e:	4b1a      	ldr	r3, [pc, #104]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	08db      	lsrs	r3, r3, #3
 800ee94:	f003 0303 	and.w	r3, r3, #3
 800ee98:	4a18      	ldr	r2, [pc, #96]	@ (800eefc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ee9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eea0:	e01f      	b.n	800eee2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eea2:	4b15      	ldr	r3, [pc, #84]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eeaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eeae:	d106      	bne.n	800eebe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800eeb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eeb6:	d102      	bne.n	800eebe <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eeb8:	4b11      	ldr	r3, [pc, #68]	@ (800ef00 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eebc:	e011      	b.n	800eee2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eebe:	4b0e      	ldr	r3, [pc, #56]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eeca:	d106      	bne.n	800eeda <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800eecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eed2:	d102      	bne.n	800eeda <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eed4:	4b0b      	ldr	r3, [pc, #44]	@ (800ef04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800eed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eed8:	e003      	b.n	800eee2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800eede:	f000 bc38 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eee2:	f000 bc36 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800eee6:	4b08      	ldr	r3, [pc, #32]	@ (800ef08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800eee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eeea:	f000 bc32 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eef2:	f000 bc2e 	b.w	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eef6:	bf00      	nop
 800eef8:	58024400 	.word	0x58024400
 800eefc:	03d09000 	.word	0x03d09000
 800ef00:	003d0900 	.word	0x003d0900
 800ef04:	017d7840 	.word	0x017d7840
 800ef08:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ef0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef10:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ef14:	430b      	orrs	r3, r1
 800ef16:	f040 809c 	bne.w	800f052 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ef1a:	4b9e      	ldr	r3, [pc, #632]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef1e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ef22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ef24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ef2a:	d054      	beq.n	800efd6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ef32:	f200 808b 	bhi.w	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ef3c:	f000 8083 	beq.w	800f046 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ef40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ef46:	f200 8081 	bhi.w	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ef50:	d02f      	beq.n	800efb2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ef52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ef58:	d878      	bhi.n	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d004      	beq.n	800ef6a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ef60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ef66:	d012      	beq.n	800ef8e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ef68:	e070      	b.n	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef6a:	4b8a      	ldr	r3, [pc, #552]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef76:	d107      	bne.n	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 feaf 	bl	800fce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef86:	e3e4      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef8c:	e3e1      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef8e:	4b81      	ldr	r3, [pc, #516]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ef96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ef9a:	d107      	bne.n	800efac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef9c:	f107 0318 	add.w	r3, r7, #24
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 fbf5 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efaa:	e3d2      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efac:	2300      	movs	r3, #0
 800efae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efb0:	e3cf      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efb2:	4b78      	ldr	r3, [pc, #480]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800efba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efbe:	d107      	bne.n	800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efc0:	f107 030c 	add.w	r3, r7, #12
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 fd37 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efce:	e3c0      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efd0:	2300      	movs	r3, #0
 800efd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efd4:	e3bd      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800efd6:	4b6f      	ldr	r3, [pc, #444]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800efde:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800efe0:	4b6c      	ldr	r3, [pc, #432]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f003 0304 	and.w	r3, r3, #4
 800efe8:	2b04      	cmp	r3, #4
 800efea:	d10c      	bne.n	800f006 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800efec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d109      	bne.n	800f006 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eff2:	4b68      	ldr	r3, [pc, #416]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	08db      	lsrs	r3, r3, #3
 800eff8:	f003 0303 	and.w	r3, r3, #3
 800effc:	4a66      	ldr	r2, [pc, #408]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800effe:	fa22 f303 	lsr.w	r3, r2, r3
 800f002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f004:	e01e      	b.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f006:	4b63      	ldr	r3, [pc, #396]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f00e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f012:	d106      	bne.n	800f022 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f01a:	d102      	bne.n	800f022 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f01c:	4b5f      	ldr	r3, [pc, #380]	@ (800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f020:	e010      	b.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f022:	4b5c      	ldr	r3, [pc, #368]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f02a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f02e:	d106      	bne.n	800f03e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f036:	d102      	bne.n	800f03e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f038:	4b59      	ldr	r3, [pc, #356]	@ (800f1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f03c:	e002      	b.n	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f03e:	2300      	movs	r3, #0
 800f040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f042:	e386      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f044:	e385      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f046:	4b57      	ldr	r3, [pc, #348]	@ (800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f04a:	e382      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f050:	e37f      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f052:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f056:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f05a:	430b      	orrs	r3, r1
 800f05c:	f040 80a7 	bne.w	800f1ae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f060:	4b4c      	ldr	r3, [pc, #304]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f064:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f068:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f06c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f070:	d055      	beq.n	800f11e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f078:	f200 8096 	bhi.w	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f07e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f082:	f000 8084 	beq.w	800f18e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f088:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f08c:	f200 808c 	bhi.w	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f096:	d030      	beq.n	800f0fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f09a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f09e:	f200 8083 	bhi.w	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f0ae:	d012      	beq.n	800f0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f0b0:	e07a      	b.n	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0b2:	4b38      	ldr	r3, [pc, #224]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0be:	d107      	bne.n	800f0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f000 fe0b 	bl	800fce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0ce:	e340      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d4:	e33d      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0d6:	4b2f      	ldr	r3, [pc, #188]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f0de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f0e2:	d107      	bne.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0e4:	f107 0318 	add.w	r3, r7, #24
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 fb51 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0f2:	e32e      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0f8:	e32b      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f0fa:	4b26      	ldr	r3, [pc, #152]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f106:	d107      	bne.n	800f118 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f108:	f107 030c 	add.w	r3, r7, #12
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 fc93 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f116:	e31c      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f118:	2300      	movs	r3, #0
 800f11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f11c:	e319      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f11e:	4b1d      	ldr	r3, [pc, #116]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f122:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f126:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f128:	4b1a      	ldr	r3, [pc, #104]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f003 0304 	and.w	r3, r3, #4
 800f130:	2b04      	cmp	r3, #4
 800f132:	d10c      	bne.n	800f14e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f136:	2b00      	cmp	r3, #0
 800f138:	d109      	bne.n	800f14e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f13a:	4b16      	ldr	r3, [pc, #88]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	08db      	lsrs	r3, r3, #3
 800f140:	f003 0303 	and.w	r3, r3, #3
 800f144:	4a14      	ldr	r2, [pc, #80]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f146:	fa22 f303 	lsr.w	r3, r2, r3
 800f14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f14c:	e01e      	b.n	800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f14e:	4b11      	ldr	r3, [pc, #68]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f15a:	d106      	bne.n	800f16a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f15e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f162:	d102      	bne.n	800f16a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f164:	4b0d      	ldr	r3, [pc, #52]	@ (800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f168:	e010      	b.n	800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f16a:	4b0a      	ldr	r3, [pc, #40]	@ (800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f172:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f176:	d106      	bne.n	800f186 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f17a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f17e:	d102      	bne.n	800f186 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f180:	4b07      	ldr	r3, [pc, #28]	@ (800f1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f184:	e002      	b.n	800f18c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f186:	2300      	movs	r3, #0
 800f188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f18a:	e2e2      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f18c:	e2e1      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f18e:	4b05      	ldr	r3, [pc, #20]	@ (800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f192:	e2de      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f194:	58024400 	.word	0x58024400
 800f198:	03d09000 	.word	0x03d09000
 800f19c:	003d0900 	.word	0x003d0900
 800f1a0:	017d7840 	.word	0x017d7840
 800f1a4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1ac:	e2d1      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f1ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1b2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f1b6:	430b      	orrs	r3, r1
 800f1b8:	f040 809c 	bne.w	800f2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f1bc:	4b93      	ldr	r3, [pc, #588]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f1c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f1cc:	d054      	beq.n	800f278 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f1d4:	f200 808b 	bhi.w	800f2ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f1de:	f000 8083 	beq.w	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f1e8:	f200 8081 	bhi.w	800f2ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f1f2:	d02f      	beq.n	800f254 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f1fa:	d878      	bhi.n	800f2ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d004      	beq.n	800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f208:	d012      	beq.n	800f230 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f20a:	e070      	b.n	800f2ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f20c:	4b7f      	ldr	r3, [pc, #508]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f218:	d107      	bne.n	800f22a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f21a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fd5e 	bl	800fce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f228:	e293      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f22a:	2300      	movs	r3, #0
 800f22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f22e:	e290      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f230:	4b76      	ldr	r3, [pc, #472]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f23c:	d107      	bne.n	800f24e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f23e:	f107 0318 	add.w	r3, r7, #24
 800f242:	4618      	mov	r0, r3
 800f244:	f000 faa4 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f24c:	e281      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f24e:	2300      	movs	r3, #0
 800f250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f252:	e27e      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f254:	4b6d      	ldr	r3, [pc, #436]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f25c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f260:	d107      	bne.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f262:	f107 030c 	add.w	r3, r7, #12
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fbe6 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f270:	e26f      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f276:	e26c      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f278:	4b64      	ldr	r3, [pc, #400]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f27a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f27c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f280:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f282:	4b62      	ldr	r3, [pc, #392]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f003 0304 	and.w	r3, r3, #4
 800f28a:	2b04      	cmp	r3, #4
 800f28c:	d10c      	bne.n	800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f290:	2b00      	cmp	r3, #0
 800f292:	d109      	bne.n	800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f294:	4b5d      	ldr	r3, [pc, #372]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	08db      	lsrs	r3, r3, #3
 800f29a:	f003 0303 	and.w	r3, r3, #3
 800f29e:	4a5c      	ldr	r2, [pc, #368]	@ (800f410 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2a6:	e01e      	b.n	800f2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2a8:	4b58      	ldr	r3, [pc, #352]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2b4:	d106      	bne.n	800f2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f2bc:	d102      	bne.n	800f2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f2be:	4b55      	ldr	r3, [pc, #340]	@ (800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2c2:	e010      	b.n	800f2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f2c4:	4b51      	ldr	r3, [pc, #324]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2d0:	d106      	bne.n	800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2d8:	d102      	bne.n	800f2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f2da:	4b4f      	ldr	r3, [pc, #316]	@ (800f418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2de:	e002      	b.n	800f2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f2e4:	e235      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2e6:	e234      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f2e8:	4b4c      	ldr	r3, [pc, #304]	@ (800f41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ec:	e231      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2f2:	e22e      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f2f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f2fc:	430b      	orrs	r3, r1
 800f2fe:	f040 808f 	bne.w	800f420 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f302:	4b42      	ldr	r3, [pc, #264]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f306:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f30a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f30e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f312:	d06b      	beq.n	800f3ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f316:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f31a:	d874      	bhi.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f322:	d056      	beq.n	800f3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f326:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f32a:	d86c      	bhi.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f32e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f332:	d03b      	beq.n	800f3ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f336:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f33a:	d864      	bhi.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f33e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f342:	d021      	beq.n	800f388 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f34a:	d85c      	bhi.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d004      	beq.n	800f35c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f358:	d004      	beq.n	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f35a:	e054      	b.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f35c:	f7fe fa4c 	bl	800d7f8 <HAL_RCC_GetPCLK1Freq>
 800f360:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f362:	e1f6      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f364:	4b29      	ldr	r3, [pc, #164]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f36c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f370:	d107      	bne.n	800f382 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f372:	f107 0318 	add.w	r3, r7, #24
 800f376:	4618      	mov	r0, r3
 800f378:	f000 fa0a 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f380:	e1e7      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f386:	e1e4      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f388:	4b20      	ldr	r3, [pc, #128]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f394:	d107      	bne.n	800f3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f396:	f107 030c 	add.w	r3, r7, #12
 800f39a:	4618      	mov	r0, r3
 800f39c:	f000 fb4c 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3a4:	e1d5      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3aa:	e1d2      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f3ac:	4b17      	ldr	r3, [pc, #92]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f003 0304 	and.w	r3, r3, #4
 800f3b4:	2b04      	cmp	r3, #4
 800f3b6:	d109      	bne.n	800f3cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3b8:	4b14      	ldr	r3, [pc, #80]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	08db      	lsrs	r3, r3, #3
 800f3be:	f003 0303 	and.w	r3, r3, #3
 800f3c2:	4a13      	ldr	r2, [pc, #76]	@ (800f410 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f3c4:	fa22 f303 	lsr.w	r3, r2, r3
 800f3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3ca:	e1c2      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3d0:	e1bf      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3de:	d102      	bne.n	800f3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3e4:	e1b5      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3ea:	e1b2      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f3ec:	4b07      	ldr	r3, [pc, #28]	@ (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f3f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f3f8:	d102      	bne.n	800f400 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f3fa:	4b07      	ldr	r3, [pc, #28]	@ (800f418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3fe:	e1a8      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f404:	e1a5      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f406:	2300      	movs	r3, #0
 800f408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f40a:	e1a2      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f40c:	58024400 	.word	0x58024400
 800f410:	03d09000 	.word	0x03d09000
 800f414:	003d0900 	.word	0x003d0900
 800f418:	017d7840 	.word	0x017d7840
 800f41c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f420:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f424:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f428:	430b      	orrs	r3, r1
 800f42a:	d173      	bne.n	800f514 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f42c:	4b9c      	ldr	r3, [pc, #624]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f42e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f434:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f43c:	d02f      	beq.n	800f49e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f444:	d863      	bhi.n	800f50e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d004      	beq.n	800f456 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f452:	d012      	beq.n	800f47a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f454:	e05b      	b.n	800f50e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f456:	4b92      	ldr	r3, [pc, #584]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f45e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f462:	d107      	bne.n	800f474 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f464:	f107 0318 	add.w	r3, r7, #24
 800f468:	4618      	mov	r0, r3
 800f46a:	f000 f991 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f472:	e16e      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f474:	2300      	movs	r3, #0
 800f476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f478:	e16b      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f47a:	4b89      	ldr	r3, [pc, #548]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f486:	d107      	bne.n	800f498 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f488:	f107 030c 	add.w	r3, r7, #12
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fad3 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f496:	e15c      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f498:	2300      	movs	r3, #0
 800f49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f49c:	e159      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f49e:	4b80      	ldr	r3, [pc, #512]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f4a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f4a8:	4b7d      	ldr	r3, [pc, #500]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f003 0304 	and.w	r3, r3, #4
 800f4b0:	2b04      	cmp	r3, #4
 800f4b2:	d10c      	bne.n	800f4ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d109      	bne.n	800f4ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4ba:	4b79      	ldr	r3, [pc, #484]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	08db      	lsrs	r3, r3, #3
 800f4c0:	f003 0303 	and.w	r3, r3, #3
 800f4c4:	4a77      	ldr	r2, [pc, #476]	@ (800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f4c6:	fa22 f303 	lsr.w	r3, r2, r3
 800f4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4cc:	e01e      	b.n	800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f4ce:	4b74      	ldr	r3, [pc, #464]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4da:	d106      	bne.n	800f4ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4e2:	d102      	bne.n	800f4ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f4e4:	4b70      	ldr	r3, [pc, #448]	@ (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4e8:	e010      	b.n	800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f4ea:	4b6d      	ldr	r3, [pc, #436]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f4f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f4f6:	d106      	bne.n	800f506 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4fe:	d102      	bne.n	800f506 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f500:	4b6a      	ldr	r3, [pc, #424]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f504:	e002      	b.n	800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f50a:	e122      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f50c:	e121      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f512:	e11e      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f514:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f518:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f51c:	430b      	orrs	r3, r1
 800f51e:	d133      	bne.n	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f520:	4b5f      	ldr	r3, [pc, #380]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f528:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d004      	beq.n	800f53a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f536:	d012      	beq.n	800f55e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f538:	e023      	b.n	800f582 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f53a:	4b59      	ldr	r3, [pc, #356]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f546:	d107      	bne.n	800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f54c:	4618      	mov	r0, r3
 800f54e:	f000 fbc7 	bl	800fce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f556:	e0fc      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f558:	2300      	movs	r3, #0
 800f55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f55c:	e0f9      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f55e:	4b50      	ldr	r3, [pc, #320]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f56a:	d107      	bne.n	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f56c:	f107 0318 	add.w	r3, r7, #24
 800f570:	4618      	mov	r0, r3
 800f572:	f000 f90d 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f57a:	e0ea      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f580:	e0e7      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f582:	2300      	movs	r3, #0
 800f584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f586:	e0e4      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f58c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f590:	430b      	orrs	r3, r1
 800f592:	f040 808d 	bne.w	800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f596:	4b42      	ldr	r3, [pc, #264]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f59a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f59e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5a6:	d06b      	beq.n	800f680 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5ae:	d874      	bhi.n	800f69a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5b6:	d056      	beq.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5be:	d86c      	bhi.n	800f69a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f5c6:	d03b      	beq.n	800f640 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f5ce:	d864      	bhi.n	800f69a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5d6:	d021      	beq.n	800f61c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5de:	d85c      	bhi.n	800f69a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d004      	beq.n	800f5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5ec:	d004      	beq.n	800f5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f5ee:	e054      	b.n	800f69a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f5f0:	f000 f8b8 	bl	800f764 <HAL_RCCEx_GetD3PCLK1Freq>
 800f5f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f5f6:	e0ac      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5f8:	4b29      	ldr	r3, [pc, #164]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f604:	d107      	bne.n	800f616 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f606:	f107 0318 	add.w	r3, r7, #24
 800f60a:	4618      	mov	r0, r3
 800f60c:	f000 f8c0 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f614:	e09d      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f616:	2300      	movs	r3, #0
 800f618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f61a:	e09a      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f61c:	4b20      	ldr	r3, [pc, #128]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f628:	d107      	bne.n	800f63a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f62a:	f107 030c 	add.w	r3, r7, #12
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fa02 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f638:	e08b      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f63a:	2300      	movs	r3, #0
 800f63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f63e:	e088      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f640:	4b17      	ldr	r3, [pc, #92]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f003 0304 	and.w	r3, r3, #4
 800f648:	2b04      	cmp	r3, #4
 800f64a:	d109      	bne.n	800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f64c:	4b14      	ldr	r3, [pc, #80]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	08db      	lsrs	r3, r3, #3
 800f652:	f003 0303 	and.w	r3, r3, #3
 800f656:	4a13      	ldr	r2, [pc, #76]	@ (800f6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f658:	fa22 f303 	lsr.w	r3, r2, r3
 800f65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f65e:	e078      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f660:	2300      	movs	r3, #0
 800f662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f664:	e075      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f666:	4b0e      	ldr	r3, [pc, #56]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f672:	d102      	bne.n	800f67a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f674:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f678:	e06b      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f67e:	e068      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f680:	4b07      	ldr	r3, [pc, #28]	@ (800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f68c:	d102      	bne.n	800f694 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f68e:	4b07      	ldr	r3, [pc, #28]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f692:	e05e      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f694:	2300      	movs	r3, #0
 800f696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f698:	e05b      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f69e:	e058      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f6a0:	58024400 	.word	0x58024400
 800f6a4:	03d09000 	.word	0x03d09000
 800f6a8:	003d0900 	.word	0x003d0900
 800f6ac:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f6b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f6b8:	430b      	orrs	r3, r1
 800f6ba:	d148      	bne.n	800f74e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f6bc:	4b27      	ldr	r3, [pc, #156]	@ (800f75c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f6be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f6c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f6cc:	d02a      	beq.n	800f724 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f6d4:	d838      	bhi.n	800f748 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d004      	beq.n	800f6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f6e2:	d00d      	beq.n	800f700 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f6e4:	e030      	b.n	800f748 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f6e6:	4b1d      	ldr	r3, [pc, #116]	@ (800f75c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6f2:	d102      	bne.n	800f6fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f6f4:	4b1a      	ldr	r3, [pc, #104]	@ (800f760 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6f8:	e02b      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6fe:	e028      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f700:	4b16      	ldr	r3, [pc, #88]	@ (800f75c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f70c:	d107      	bne.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f70e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f712:	4618      	mov	r0, r3
 800f714:	f000 fae4 	bl	800fce0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f71c:	e019      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f71e:	2300      	movs	r3, #0
 800f720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f722:	e016      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f724:	4b0d      	ldr	r3, [pc, #52]	@ (800f75c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f72c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f730:	d107      	bne.n	800f742 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f732:	f107 0318 	add.w	r3, r7, #24
 800f736:	4618      	mov	r0, r3
 800f738:	f000 f82a 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f740:	e007      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f742:	2300      	movs	r3, #0
 800f744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f746:	e004      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f748:	2300      	movs	r3, #0
 800f74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f74c:	e001      	b.n	800f752 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f74e:	2300      	movs	r3, #0
 800f750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f754:	4618      	mov	r0, r3
 800f756:	3740      	adds	r7, #64	@ 0x40
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	58024400 	.word	0x58024400
 800f760:	017d7840 	.word	0x017d7840

0800f764 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f768:	f7fe f816 	bl	800d798 <HAL_RCC_GetHCLKFreq>
 800f76c:	4602      	mov	r2, r0
 800f76e:	4b06      	ldr	r3, [pc, #24]	@ (800f788 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f770:	6a1b      	ldr	r3, [r3, #32]
 800f772:	091b      	lsrs	r3, r3, #4
 800f774:	f003 0307 	and.w	r3, r3, #7
 800f778:	4904      	ldr	r1, [pc, #16]	@ (800f78c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f77a:	5ccb      	ldrb	r3, [r1, r3]
 800f77c:	f003 031f 	and.w	r3, r3, #31
 800f780:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f784:	4618      	mov	r0, r3
 800f786:	bd80      	pop	{r7, pc}
 800f788:	58024400 	.word	0x58024400
 800f78c:	08017888 	.word	0x08017888

0800f790 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f790:	b480      	push	{r7}
 800f792:	b089      	sub	sp, #36	@ 0x24
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f798:	4ba1      	ldr	r3, [pc, #644]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f79c:	f003 0303 	and.w	r3, r3, #3
 800f7a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f7a2:	4b9f      	ldr	r3, [pc, #636]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7a6:	0b1b      	lsrs	r3, r3, #12
 800f7a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f7ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f7ae:	4b9c      	ldr	r3, [pc, #624]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b2:	091b      	lsrs	r3, r3, #4
 800f7b4:	f003 0301 	and.w	r3, r3, #1
 800f7b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f7ba:	4b99      	ldr	r3, [pc, #612]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7be:	08db      	lsrs	r3, r3, #3
 800f7c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7c4:	693a      	ldr	r2, [r7, #16]
 800f7c6:	fb02 f303 	mul.w	r3, r2, r3
 800f7ca:	ee07 3a90 	vmov	s15, r3
 800f7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 8111 	beq.w	800fa00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f7de:	69bb      	ldr	r3, [r7, #24]
 800f7e0:	2b02      	cmp	r3, #2
 800f7e2:	f000 8083 	beq.w	800f8ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f7e6:	69bb      	ldr	r3, [r7, #24]
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	f200 80a1 	bhi.w	800f930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d003      	beq.n	800f7fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d056      	beq.n	800f8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f7fa:	e099      	b.n	800f930 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7fc:	4b88      	ldr	r3, [pc, #544]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f003 0320 	and.w	r3, r3, #32
 800f804:	2b00      	cmp	r3, #0
 800f806:	d02d      	beq.n	800f864 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f808:	4b85      	ldr	r3, [pc, #532]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	08db      	lsrs	r3, r3, #3
 800f80e:	f003 0303 	and.w	r3, r3, #3
 800f812:	4a84      	ldr	r2, [pc, #528]	@ (800fa24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f814:	fa22 f303 	lsr.w	r3, r2, r3
 800f818:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	ee07 3a90 	vmov	s15, r3
 800f820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	ee07 3a90 	vmov	s15, r3
 800f82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f832:	4b7b      	ldr	r3, [pc, #492]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f83a:	ee07 3a90 	vmov	s15, r3
 800f83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f842:	ed97 6a03 	vldr	s12, [r7, #12]
 800f846:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fa28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f85e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f862:	e087      	b.n	800f974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	ee07 3a90 	vmov	s15, r3
 800f86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f86e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fa2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f876:	4b6a      	ldr	r3, [pc, #424]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f87e:	ee07 3a90 	vmov	s15, r3
 800f882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f886:	ed97 6a03 	vldr	s12, [r7, #12]
 800f88a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fa28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f88e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8a6:	e065      	b.n	800f974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	ee07 3a90 	vmov	s15, r3
 800f8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fa30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8ba:	4b59      	ldr	r3, [pc, #356]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8c2:	ee07 3a90 	vmov	s15, r3
 800f8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fa28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8ea:	e043      	b.n	800f974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	ee07 3a90 	vmov	s15, r3
 800f8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fa34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8fe:	4b48      	ldr	r3, [pc, #288]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f906:	ee07 3a90 	vmov	s15, r3
 800f90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f90e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f912:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fa28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f91e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f92a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f92e:	e021      	b.n	800f974 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	ee07 3a90 	vmov	s15, r3
 800f936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f93a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fa30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f942:	4b37      	ldr	r3, [pc, #220]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f94a:	ee07 3a90 	vmov	s15, r3
 800f94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f952:	ed97 6a03 	vldr	s12, [r7, #12]
 800f956:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fa28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f96e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f972:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f974:	4b2a      	ldr	r3, [pc, #168]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f978:	0a5b      	lsrs	r3, r3, #9
 800f97a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f97e:	ee07 3a90 	vmov	s15, r3
 800f982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f986:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f98a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f98e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f99a:	ee17 2a90 	vmov	r2, s15
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f9a2:	4b1f      	ldr	r3, [pc, #124]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9a6:	0c1b      	lsrs	r3, r3, #16
 800f9a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9ac:	ee07 3a90 	vmov	s15, r3
 800f9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9c8:	ee17 2a90 	vmov	r2, s15
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f9d0:	4b13      	ldr	r3, [pc, #76]	@ (800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9d4:	0e1b      	lsrs	r3, r3, #24
 800f9d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9da:	ee07 3a90 	vmov	s15, r3
 800f9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9f6:	ee17 2a90 	vmov	r2, s15
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f9fe:	e008      	b.n	800fa12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	609a      	str	r2, [r3, #8]
}
 800fa12:	bf00      	nop
 800fa14:	3724      	adds	r7, #36	@ 0x24
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	58024400 	.word	0x58024400
 800fa24:	03d09000 	.word	0x03d09000
 800fa28:	46000000 	.word	0x46000000
 800fa2c:	4c742400 	.word	0x4c742400
 800fa30:	4a742400 	.word	0x4a742400
 800fa34:	4bbebc20 	.word	0x4bbebc20

0800fa38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b089      	sub	sp, #36	@ 0x24
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa40:	4ba1      	ldr	r3, [pc, #644]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa44:	f003 0303 	and.w	r3, r3, #3
 800fa48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fa4a:	4b9f      	ldr	r3, [pc, #636]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa4e:	0d1b      	lsrs	r3, r3, #20
 800fa50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fa56:	4b9c      	ldr	r3, [pc, #624]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa5a:	0a1b      	lsrs	r3, r3, #8
 800fa5c:	f003 0301 	and.w	r3, r3, #1
 800fa60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800fa62:	4b99      	ldr	r3, [pc, #612]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa66:	08db      	lsrs	r3, r3, #3
 800fa68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	fb02 f303 	mul.w	r3, r2, r3
 800fa72:	ee07 3a90 	vmov	s15, r3
 800fa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	f000 8111 	beq.w	800fca8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	f000 8083 	beq.w	800fb94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	f200 80a1 	bhi.w	800fbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d003      	beq.n	800faa4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d056      	beq.n	800fb50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800faa2:	e099      	b.n	800fbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800faa4:	4b88      	ldr	r3, [pc, #544]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f003 0320 	and.w	r3, r3, #32
 800faac:	2b00      	cmp	r3, #0
 800faae:	d02d      	beq.n	800fb0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fab0:	4b85      	ldr	r3, [pc, #532]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	08db      	lsrs	r3, r3, #3
 800fab6:	f003 0303 	and.w	r3, r3, #3
 800faba:	4a84      	ldr	r2, [pc, #528]	@ (800fccc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fabc:	fa22 f303 	lsr.w	r3, r2, r3
 800fac0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	ee07 3a90 	vmov	s15, r3
 800fac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	ee07 3a90 	vmov	s15, r3
 800fad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fada:	4b7b      	ldr	r3, [pc, #492]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fae2:	ee07 3a90 	vmov	s15, r3
 800fae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800faea:	ed97 6a03 	vldr	s12, [r7, #12]
 800faee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800faf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fafa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fb0a:	e087      	b.n	800fc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	ee07 3a90 	vmov	s15, r3
 800fb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fcd4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fb1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb1e:	4b6a      	ldr	r3, [pc, #424]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb26:	ee07 3a90 	vmov	s15, r3
 800fb2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb4e:	e065      	b.n	800fc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	ee07 3a90 	vmov	s15, r3
 800fb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fcd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fb5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb62:	4b59      	ldr	r3, [pc, #356]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb6a:	ee07 3a90 	vmov	s15, r3
 800fb6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb72:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb92:	e043      	b.n	800fc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	ee07 3a90 	vmov	s15, r3
 800fb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fcdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fba6:	4b48      	ldr	r3, [pc, #288]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbae:	ee07 3a90 	vmov	s15, r3
 800fbb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fbbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbd6:	e021      	b.n	800fc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	ee07 3a90 	vmov	s15, r3
 800fbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbe2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fcd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fbe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbea:	4b37      	ldr	r3, [pc, #220]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbf2:	ee07 3a90 	vmov	s15, r3
 800fbf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fcd0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fc02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fc1c:	4b2a      	ldr	r3, [pc, #168]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc20:	0a5b      	lsrs	r3, r3, #9
 800fc22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc26:	ee07 3a90 	vmov	s15, r3
 800fc2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc36:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc42:	ee17 2a90 	vmov	r2, s15
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fc4a:	4b1f      	ldr	r3, [pc, #124]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc4e:	0c1b      	lsrs	r3, r3, #16
 800fc50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc54:	ee07 3a90 	vmov	s15, r3
 800fc58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc64:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc70:	ee17 2a90 	vmov	r2, s15
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fc78:	4b13      	ldr	r3, [pc, #76]	@ (800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc7c:	0e1b      	lsrs	r3, r3, #24
 800fc7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc82:	ee07 3a90 	vmov	s15, r3
 800fc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc92:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc9e:	ee17 2a90 	vmov	r2, s15
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fca6:	e008      	b.n	800fcba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	609a      	str	r2, [r3, #8]
}
 800fcba:	bf00      	nop
 800fcbc:	3724      	adds	r7, #36	@ 0x24
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop
 800fcc8:	58024400 	.word	0x58024400
 800fccc:	03d09000 	.word	0x03d09000
 800fcd0:	46000000 	.word	0x46000000
 800fcd4:	4c742400 	.word	0x4c742400
 800fcd8:	4a742400 	.word	0x4a742400
 800fcdc:	4bbebc20 	.word	0x4bbebc20

0800fce0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b089      	sub	sp, #36	@ 0x24
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fce8:	4ba0      	ldr	r3, [pc, #640]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcec:	f003 0303 	and.w	r3, r3, #3
 800fcf0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fcf2:	4b9e      	ldr	r3, [pc, #632]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcf6:	091b      	lsrs	r3, r3, #4
 800fcf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fcfc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fcfe:	4b9b      	ldr	r3, [pc, #620]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd02:	f003 0301 	and.w	r3, r3, #1
 800fd06:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fd08:	4b98      	ldr	r3, [pc, #608]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd0c:	08db      	lsrs	r3, r3, #3
 800fd0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd12:	693a      	ldr	r2, [r7, #16]
 800fd14:	fb02 f303 	mul.w	r3, r2, r3
 800fd18:	ee07 3a90 	vmov	s15, r3
 800fd1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f000 8111 	beq.w	800ff4e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fd2c:	69bb      	ldr	r3, [r7, #24]
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	f000 8083 	beq.w	800fe3a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fd34:	69bb      	ldr	r3, [r7, #24]
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	f200 80a1 	bhi.w	800fe7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fd3c:	69bb      	ldr	r3, [r7, #24]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d003      	beq.n	800fd4a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d056      	beq.n	800fdf6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fd48:	e099      	b.n	800fe7e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd4a:	4b88      	ldr	r3, [pc, #544]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f003 0320 	and.w	r3, r3, #32
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d02d      	beq.n	800fdb2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd56:	4b85      	ldr	r3, [pc, #532]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	08db      	lsrs	r3, r3, #3
 800fd5c:	f003 0303 	and.w	r3, r3, #3
 800fd60:	4a83      	ldr	r2, [pc, #524]	@ (800ff70 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fd62:	fa22 f303 	lsr.w	r3, r2, r3
 800fd66:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	ee07 3a90 	vmov	s15, r3
 800fd6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	ee07 3a90 	vmov	s15, r3
 800fd78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd80:	4b7a      	ldr	r3, [pc, #488]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd88:	ee07 3a90 	vmov	s15, r3
 800fd8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd90:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd94:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ff74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fda0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fda4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fdb0:	e087      	b.n	800fec2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	ee07 3a90 	vmov	s15, r3
 800fdb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdbc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ff78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fdc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdc4:	4b69      	ldr	r3, [pc, #420]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdcc:	ee07 3a90 	vmov	s15, r3
 800fdd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdd4:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdd8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ff74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fde0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fde4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fde8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fdf4:	e065      	b.n	800fec2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	ee07 3a90 	vmov	s15, r3
 800fdfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe00:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ff7c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fe04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe08:	4b58      	ldr	r3, [pc, #352]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe10:	ee07 3a90 	vmov	s15, r3
 800fe14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe18:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe1c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ff74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe38:	e043      	b.n	800fec2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	ee07 3a90 	vmov	s15, r3
 800fe40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe44:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ff80 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fe48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe4c:	4b47      	ldr	r3, [pc, #284]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe54:	ee07 3a90 	vmov	s15, r3
 800fe58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe60:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ff74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe7c:	e021      	b.n	800fec2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	ee07 3a90 	vmov	s15, r3
 800fe84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe88:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ff78 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fe8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe90:	4b36      	ldr	r3, [pc, #216]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe98:	ee07 3a90 	vmov	s15, r3
 800fe9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fea0:	ed97 6a03 	vldr	s12, [r7, #12]
 800fea4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ff74 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800feb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800febc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fec0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fec2:	4b2a      	ldr	r3, [pc, #168]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fec6:	0a5b      	lsrs	r3, r3, #9
 800fec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fecc:	ee07 3a90 	vmov	s15, r3
 800fed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fedc:	edd7 6a07 	vldr	s13, [r7, #28]
 800fee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fee8:	ee17 2a90 	vmov	r2, s15
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fef0:	4b1e      	ldr	r3, [pc, #120]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fef4:	0c1b      	lsrs	r3, r3, #16
 800fef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fefa:	ee07 3a90 	vmov	s15, r3
 800fefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff16:	ee17 2a90 	vmov	r2, s15
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ff1e:	4b13      	ldr	r3, [pc, #76]	@ (800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff22:	0e1b      	lsrs	r3, r3, #24
 800ff24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff28:	ee07 3a90 	vmov	s15, r3
 800ff2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff44:	ee17 2a90 	vmov	r2, s15
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ff4c:	e008      	b.n	800ff60 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	609a      	str	r2, [r3, #8]
}
 800ff60:	bf00      	nop
 800ff62:	3724      	adds	r7, #36	@ 0x24
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	58024400 	.word	0x58024400
 800ff70:	03d09000 	.word	0x03d09000
 800ff74:	46000000 	.word	0x46000000
 800ff78:	4c742400 	.word	0x4c742400
 800ff7c:	4a742400 	.word	0x4a742400
 800ff80:	4bbebc20 	.word	0x4bbebc20

0800ff84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ff92:	4b53      	ldr	r3, [pc, #332]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 800ff94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff96:	f003 0303 	and.w	r3, r3, #3
 800ff9a:	2b03      	cmp	r3, #3
 800ff9c:	d101      	bne.n	800ffa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	e099      	b.n	80100d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ffa2:	4b4f      	ldr	r3, [pc, #316]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a4e      	ldr	r2, [pc, #312]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 800ffa8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ffac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffae:	f7f2 f97d 	bl	80022ac <HAL_GetTick>
 800ffb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ffb4:	e008      	b.n	800ffc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ffb6:	f7f2 f979 	bl	80022ac <HAL_GetTick>
 800ffba:	4602      	mov	r2, r0
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	1ad3      	subs	r3, r2, r3
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d901      	bls.n	800ffc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ffc4:	2303      	movs	r3, #3
 800ffc6:	e086      	b.n	80100d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ffc8:	4b45      	ldr	r3, [pc, #276]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1f0      	bne.n	800ffb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ffd4:	4b42      	ldr	r3, [pc, #264]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 800ffd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffd8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	031b      	lsls	r3, r3, #12
 800ffe2:	493f      	ldr	r1, [pc, #252]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 800ffe4:	4313      	orrs	r3, r2
 800ffe6:	628b      	str	r3, [r1, #40]	@ 0x28
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	3b01      	subs	r3, #1
 800ffee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	3b01      	subs	r3, #1
 800fff8:	025b      	lsls	r3, r3, #9
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	431a      	orrs	r2, r3
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	3b01      	subs	r3, #1
 8010004:	041b      	lsls	r3, r3, #16
 8010006:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801000a:	431a      	orrs	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	3b01      	subs	r3, #1
 8010012:	061b      	lsls	r3, r3, #24
 8010014:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010018:	4931      	ldr	r1, [pc, #196]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 801001a:	4313      	orrs	r3, r2
 801001c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801001e:	4b30      	ldr	r3, [pc, #192]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	695b      	ldr	r3, [r3, #20]
 801002a:	492d      	ldr	r1, [pc, #180]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 801002c:	4313      	orrs	r3, r2
 801002e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010030:	4b2b      	ldr	r3, [pc, #172]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010034:	f023 0220 	bic.w	r2, r3, #32
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	699b      	ldr	r3, [r3, #24]
 801003c:	4928      	ldr	r1, [pc, #160]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 801003e:	4313      	orrs	r3, r2
 8010040:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010042:	4b27      	ldr	r3, [pc, #156]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010046:	4a26      	ldr	r2, [pc, #152]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010048:	f023 0310 	bic.w	r3, r3, #16
 801004c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801004e:	4b24      	ldr	r3, [pc, #144]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010052:	4b24      	ldr	r3, [pc, #144]	@ (80100e4 <RCCEx_PLL2_Config+0x160>)
 8010054:	4013      	ands	r3, r2
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	69d2      	ldr	r2, [r2, #28]
 801005a:	00d2      	lsls	r2, r2, #3
 801005c:	4920      	ldr	r1, [pc, #128]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 801005e:	4313      	orrs	r3, r2
 8010060:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010062:	4b1f      	ldr	r3, [pc, #124]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010066:	4a1e      	ldr	r2, [pc, #120]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010068:	f043 0310 	orr.w	r3, r3, #16
 801006c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d106      	bne.n	8010082 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010074:	4b1a      	ldr	r3, [pc, #104]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010078:	4a19      	ldr	r2, [pc, #100]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 801007a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801007e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010080:	e00f      	b.n	80100a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d106      	bne.n	8010096 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010088:	4b15      	ldr	r3, [pc, #84]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 801008a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801008c:	4a14      	ldr	r2, [pc, #80]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 801008e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010092:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010094:	e005      	b.n	80100a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010096:	4b12      	ldr	r3, [pc, #72]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 8010098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801009a:	4a11      	ldr	r2, [pc, #68]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 801009c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80100a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80100a2:	4b0f      	ldr	r3, [pc, #60]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4a0e      	ldr	r2, [pc, #56]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 80100a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80100ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100ae:	f7f2 f8fd 	bl	80022ac <HAL_GetTick>
 80100b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80100b4:	e008      	b.n	80100c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80100b6:	f7f2 f8f9 	bl	80022ac <HAL_GetTick>
 80100ba:	4602      	mov	r2, r0
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	1ad3      	subs	r3, r2, r3
 80100c0:	2b02      	cmp	r3, #2
 80100c2:	d901      	bls.n	80100c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80100c4:	2303      	movs	r3, #3
 80100c6:	e006      	b.n	80100d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80100c8:	4b05      	ldr	r3, [pc, #20]	@ (80100e0 <RCCEx_PLL2_Config+0x15c>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d0f0      	beq.n	80100b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80100d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	58024400 	.word	0x58024400
 80100e4:	ffff0007 	.word	0xffff0007

080100e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80100f6:	4b53      	ldr	r3, [pc, #332]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80100f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100fa:	f003 0303 	and.w	r3, r3, #3
 80100fe:	2b03      	cmp	r3, #3
 8010100:	d101      	bne.n	8010106 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8010102:	2301      	movs	r3, #1
 8010104:	e099      	b.n	801023a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010106:	4b4f      	ldr	r3, [pc, #316]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a4e      	ldr	r2, [pc, #312]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 801010c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010112:	f7f2 f8cb 	bl	80022ac <HAL_GetTick>
 8010116:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010118:	e008      	b.n	801012c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801011a:	f7f2 f8c7 	bl	80022ac <HAL_GetTick>
 801011e:	4602      	mov	r2, r0
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	2b02      	cmp	r3, #2
 8010126:	d901      	bls.n	801012c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010128:	2303      	movs	r3, #3
 801012a:	e086      	b.n	801023a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801012c:	4b45      	ldr	r3, [pc, #276]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010134:	2b00      	cmp	r3, #0
 8010136:	d1f0      	bne.n	801011a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010138:	4b42      	ldr	r3, [pc, #264]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 801013a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801013c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	051b      	lsls	r3, r3, #20
 8010146:	493f      	ldr	r1, [pc, #252]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 8010148:	4313      	orrs	r3, r2
 801014a:	628b      	str	r3, [r1, #40]	@ 0x28
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	3b01      	subs	r3, #1
 8010152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	3b01      	subs	r3, #1
 801015c:	025b      	lsls	r3, r3, #9
 801015e:	b29b      	uxth	r3, r3
 8010160:	431a      	orrs	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	3b01      	subs	r3, #1
 8010168:	041b      	lsls	r3, r3, #16
 801016a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801016e:	431a      	orrs	r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	691b      	ldr	r3, [r3, #16]
 8010174:	3b01      	subs	r3, #1
 8010176:	061b      	lsls	r3, r3, #24
 8010178:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801017c:	4931      	ldr	r1, [pc, #196]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 801017e:	4313      	orrs	r3, r2
 8010180:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010182:	4b30      	ldr	r3, [pc, #192]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 8010184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010186:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	695b      	ldr	r3, [r3, #20]
 801018e:	492d      	ldr	r1, [pc, #180]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 8010190:	4313      	orrs	r3, r2
 8010192:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010194:	4b2b      	ldr	r3, [pc, #172]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 8010196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010198:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	699b      	ldr	r3, [r3, #24]
 80101a0:	4928      	ldr	r1, [pc, #160]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101a2:	4313      	orrs	r3, r2
 80101a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80101a6:	4b27      	ldr	r3, [pc, #156]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101aa:	4a26      	ldr	r2, [pc, #152]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80101b2:	4b24      	ldr	r3, [pc, #144]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101b6:	4b24      	ldr	r3, [pc, #144]	@ (8010248 <RCCEx_PLL3_Config+0x160>)
 80101b8:	4013      	ands	r3, r2
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	69d2      	ldr	r2, [r2, #28]
 80101be:	00d2      	lsls	r2, r2, #3
 80101c0:	4920      	ldr	r1, [pc, #128]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101c2:	4313      	orrs	r3, r2
 80101c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80101c6:	4b1f      	ldr	r3, [pc, #124]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101ca:	4a1e      	ldr	r2, [pc, #120]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80101d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d106      	bne.n	80101e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80101d8:	4b1a      	ldr	r3, [pc, #104]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101dc:	4a19      	ldr	r2, [pc, #100]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80101e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80101e4:	e00f      	b.n	8010206 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	2b01      	cmp	r3, #1
 80101ea:	d106      	bne.n	80101fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80101ec:	4b15      	ldr	r3, [pc, #84]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101f0:	4a14      	ldr	r2, [pc, #80]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80101f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80101f8:	e005      	b.n	8010206 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80101fa:	4b12      	ldr	r3, [pc, #72]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 80101fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101fe:	4a11      	ldr	r2, [pc, #68]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 8010200:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010204:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010206:	4b0f      	ldr	r3, [pc, #60]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4a0e      	ldr	r2, [pc, #56]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 801020c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010212:	f7f2 f84b 	bl	80022ac <HAL_GetTick>
 8010216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010218:	e008      	b.n	801022c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801021a:	f7f2 f847 	bl	80022ac <HAL_GetTick>
 801021e:	4602      	mov	r2, r0
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	1ad3      	subs	r3, r2, r3
 8010224:	2b02      	cmp	r3, #2
 8010226:	d901      	bls.n	801022c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010228:	2303      	movs	r3, #3
 801022a:	e006      	b.n	801023a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801022c:	4b05      	ldr	r3, [pc, #20]	@ (8010244 <RCCEx_PLL3_Config+0x15c>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010234:	2b00      	cmp	r3, #0
 8010236:	d0f0      	beq.n	801021a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010238:	7bfb      	ldrb	r3, [r7, #15]
}
 801023a:	4618      	mov	r0, r3
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	58024400 	.word	0x58024400
 8010248:	ffff0007 	.word	0xffff0007

0801024c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d101      	bne.n	801025e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801025a:	2301      	movs	r3, #1
 801025c:	e10f      	b.n	801047e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4a87      	ldr	r2, [pc, #540]	@ (8010488 <HAL_SPI_Init+0x23c>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d00f      	beq.n	801028e <HAL_SPI_Init+0x42>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	4a86      	ldr	r2, [pc, #536]	@ (801048c <HAL_SPI_Init+0x240>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d00a      	beq.n	801028e <HAL_SPI_Init+0x42>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4a84      	ldr	r2, [pc, #528]	@ (8010490 <HAL_SPI_Init+0x244>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d005      	beq.n	801028e <HAL_SPI_Init+0x42>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	2b0f      	cmp	r3, #15
 8010288:	d901      	bls.n	801028e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801028a:	2301      	movs	r3, #1
 801028c:	e0f7      	b.n	801047e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 ff6c 	bl	801116c <SPI_GetPacketSize>
 8010294:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4a7b      	ldr	r2, [pc, #492]	@ (8010488 <HAL_SPI_Init+0x23c>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d00c      	beq.n	80102ba <HAL_SPI_Init+0x6e>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4a79      	ldr	r2, [pc, #484]	@ (801048c <HAL_SPI_Init+0x240>)
 80102a6:	4293      	cmp	r3, r2
 80102a8:	d007      	beq.n	80102ba <HAL_SPI_Init+0x6e>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a78      	ldr	r2, [pc, #480]	@ (8010490 <HAL_SPI_Init+0x244>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d002      	beq.n	80102ba <HAL_SPI_Init+0x6e>
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b08      	cmp	r3, #8
 80102b8:	d811      	bhi.n	80102de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80102be:	4a72      	ldr	r2, [pc, #456]	@ (8010488 <HAL_SPI_Init+0x23c>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d009      	beq.n	80102d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a70      	ldr	r2, [pc, #448]	@ (801048c <HAL_SPI_Init+0x240>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d004      	beq.n	80102d8 <HAL_SPI_Init+0x8c>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a6f      	ldr	r2, [pc, #444]	@ (8010490 <HAL_SPI_Init+0x244>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d104      	bne.n	80102e2 <HAL_SPI_Init+0x96>
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2b10      	cmp	r3, #16
 80102dc:	d901      	bls.n	80102e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80102de:	2301      	movs	r3, #1
 80102e0:	e0cd      	b.n	801047e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d106      	bne.n	80102fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2200      	movs	r2, #0
 80102f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7f1 fa9e 	bl	8001838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2202      	movs	r2, #2
 8010300:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f022 0201 	bic.w	r2, r2, #1
 8010312:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801031e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	699b      	ldr	r3, [r3, #24]
 8010324:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010328:	d119      	bne.n	801035e <HAL_SPI_Init+0x112>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010332:	d103      	bne.n	801033c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010338:	2b00      	cmp	r3, #0
 801033a:	d008      	beq.n	801034e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010340:	2b00      	cmp	r3, #0
 8010342:	d10c      	bne.n	801035e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801034c:	d107      	bne.n	801035e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	681a      	ldr	r2, [r3, #0]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801035c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00f      	beq.n	801038a <HAL_SPI_Init+0x13e>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	2b06      	cmp	r3, #6
 8010370:	d90b      	bls.n	801038a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	430a      	orrs	r2, r1
 8010386:	601a      	str	r2, [r3, #0]
 8010388:	e007      	b.n	801039a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010398:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	69da      	ldr	r2, [r3, #28]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103a2:	431a      	orrs	r2, r3
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	431a      	orrs	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ac:	ea42 0103 	orr.w	r1, r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	68da      	ldr	r2, [r3, #12]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	430a      	orrs	r2, r1
 80103ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103c4:	431a      	orrs	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ca:	431a      	orrs	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	699b      	ldr	r3, [r3, #24]
 80103d0:	431a      	orrs	r2, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	691b      	ldr	r3, [r3, #16]
 80103d6:	431a      	orrs	r2, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	695b      	ldr	r3, [r3, #20]
 80103dc:	431a      	orrs	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a1b      	ldr	r3, [r3, #32]
 80103e2:	431a      	orrs	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	685b      	ldr	r3, [r3, #4]
 80103e8:	431a      	orrs	r2, r3
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80103ee:	431a      	orrs	r2, r3
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	431a      	orrs	r2, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80103fa:	ea42 0103 	orr.w	r1, r2, r3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	430a      	orrs	r2, r1
 8010408:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d113      	bne.n	801043a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010424:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	689b      	ldr	r3, [r3, #8]
 801042c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010438:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f022 0201 	bic.w	r2, r2, #1
 8010448:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00a      	beq.n	801046c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	430a      	orrs	r2, r1
 801046a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2201      	movs	r2, #1
 8010478:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801047c:	2300      	movs	r3, #0
}
 801047e:	4618      	mov	r0, r3
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	40013000 	.word	0x40013000
 801048c:	40003800 	.word	0x40003800
 8010490:	40003c00 	.word	0x40003c00

08010494 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af02      	add	r7, sp, #8
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	603b      	str	r3, [r7, #0]
 80104a0:	4613      	mov	r3, r2
 80104a2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	3320      	adds	r3, #32
 80104aa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80104ac:	f7f1 fefe 	bl	80022ac <HAL_GetTick>
 80104b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d001      	beq.n	80104c2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80104be:	2302      	movs	r3, #2
 80104c0:	e1d1      	b.n	8010866 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d002      	beq.n	80104ce <HAL_SPI_Transmit+0x3a>
 80104c8:	88fb      	ldrh	r3, [r7, #6]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d101      	bne.n	80104d2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80104ce:	2301      	movs	r3, #1
 80104d0:	e1c9      	b.n	8010866 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d101      	bne.n	80104e0 <HAL_SPI_Transmit+0x4c>
 80104dc:	2302      	movs	r3, #2
 80104de:	e1c2      	b.n	8010866 <HAL_SPI_Transmit+0x3d2>
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2201      	movs	r2, #1
 80104e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2203      	movs	r2, #3
 80104ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2200      	movs	r2, #0
 80104f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	88fa      	ldrh	r2, [r7, #6]
 8010502:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	88fa      	ldrh	r2, [r7, #6]
 801050a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2200      	movs	r2, #0
 8010512:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2200      	movs	r2, #0
 8010518:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2200      	movs	r2, #0
 8010520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2200      	movs	r2, #0
 8010528:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2200      	movs	r2, #0
 801052e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010538:	d108      	bne.n	801054c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010548:	601a      	str	r2, [r3, #0]
 801054a:	e009      	b.n	8010560 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801055e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	685a      	ldr	r2, [r3, #4]
 8010566:	4b96      	ldr	r3, [pc, #600]	@ (80107c0 <HAL_SPI_Transmit+0x32c>)
 8010568:	4013      	ands	r3, r2
 801056a:	88f9      	ldrh	r1, [r7, #6]
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	6812      	ldr	r2, [r2, #0]
 8010570:	430b      	orrs	r3, r1
 8010572:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	f042 0201 	orr.w	r2, r2, #1
 8010582:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801058c:	d107      	bne.n	801059e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801059c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	68db      	ldr	r3, [r3, #12]
 80105a2:	2b0f      	cmp	r3, #15
 80105a4:	d947      	bls.n	8010636 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80105a6:	e03f      	b.n	8010628 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	695b      	ldr	r3, [r3, #20]
 80105ae:	f003 0302 	and.w	r3, r3, #2
 80105b2:	2b02      	cmp	r3, #2
 80105b4:	d114      	bne.n	80105e0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	6812      	ldr	r2, [r2, #0]
 80105c0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105c6:	1d1a      	adds	r2, r3, #4
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	3b01      	subs	r3, #1
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80105de:	e023      	b.n	8010628 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80105e0:	f7f1 fe64 	bl	80022ac <HAL_GetTick>
 80105e4:	4602      	mov	r2, r0
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	683a      	ldr	r2, [r7, #0]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d803      	bhi.n	80105f8 <HAL_SPI_Transmit+0x164>
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f6:	d102      	bne.n	80105fe <HAL_SPI_Transmit+0x16a>
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d114      	bne.n	8010628 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f000 fce6 	bl	8010fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801060a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2201      	movs	r2, #1
 8010618:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2200      	movs	r2, #0
 8010620:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010624:	2303      	movs	r3, #3
 8010626:	e11e      	b.n	8010866 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801062e:	b29b      	uxth	r3, r3
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1b9      	bne.n	80105a8 <HAL_SPI_Transmit+0x114>
 8010634:	e0f1      	b.n	801081a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	2b07      	cmp	r3, #7
 801063c:	f240 80e6 	bls.w	801080c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010640:	e05d      	b.n	80106fe <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	695b      	ldr	r3, [r3, #20]
 8010648:	f003 0302 	and.w	r3, r3, #2
 801064c:	2b02      	cmp	r3, #2
 801064e:	d132      	bne.n	80106b6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010656:	b29b      	uxth	r3, r3
 8010658:	2b01      	cmp	r3, #1
 801065a:	d918      	bls.n	801068e <HAL_SPI_Transmit+0x1fa>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010660:	2b00      	cmp	r3, #0
 8010662:	d014      	beq.n	801068e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	6812      	ldr	r2, [r2, #0]
 801066e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010674:	1d1a      	adds	r2, r3, #4
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010680:	b29b      	uxth	r3, r3
 8010682:	3b02      	subs	r3, #2
 8010684:	b29a      	uxth	r2, r3
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801068c:	e037      	b.n	80106fe <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010692:	881a      	ldrh	r2, [r3, #0]
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801069c:	1c9a      	adds	r2, r3, #2
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	3b01      	subs	r3, #1
 80106ac:	b29a      	uxth	r2, r3
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80106b4:	e023      	b.n	80106fe <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106b6:	f7f1 fdf9 	bl	80022ac <HAL_GetTick>
 80106ba:	4602      	mov	r2, r0
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	1ad3      	subs	r3, r2, r3
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d803      	bhi.n	80106ce <HAL_SPI_Transmit+0x23a>
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106cc:	d102      	bne.n	80106d4 <HAL_SPI_Transmit+0x240>
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d114      	bne.n	80106fe <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f000 fc7b 	bl	8010fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80106e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2201      	movs	r2, #1
 80106ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80106fa:	2303      	movs	r3, #3
 80106fc:	e0b3      	b.n	8010866 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010704:	b29b      	uxth	r3, r3
 8010706:	2b00      	cmp	r3, #0
 8010708:	d19b      	bne.n	8010642 <HAL_SPI_Transmit+0x1ae>
 801070a:	e086      	b.n	801081a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	695b      	ldr	r3, [r3, #20]
 8010712:	f003 0302 	and.w	r3, r3, #2
 8010716:	2b02      	cmp	r3, #2
 8010718:	d154      	bne.n	80107c4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010720:	b29b      	uxth	r3, r3
 8010722:	2b03      	cmp	r3, #3
 8010724:	d918      	bls.n	8010758 <HAL_SPI_Transmit+0x2c4>
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801072a:	2b40      	cmp	r3, #64	@ 0x40
 801072c:	d914      	bls.n	8010758 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	6812      	ldr	r2, [r2, #0]
 8010738:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801073e:	1d1a      	adds	r2, r3, #4
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801074a:	b29b      	uxth	r3, r3
 801074c:	3b04      	subs	r3, #4
 801074e:	b29a      	uxth	r2, r3
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010756:	e059      	b.n	801080c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801075e:	b29b      	uxth	r3, r3
 8010760:	2b01      	cmp	r3, #1
 8010762:	d917      	bls.n	8010794 <HAL_SPI_Transmit+0x300>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010768:	2b00      	cmp	r3, #0
 801076a:	d013      	beq.n	8010794 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010770:	881a      	ldrh	r2, [r3, #0]
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801077a:	1c9a      	adds	r2, r3, #2
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010786:	b29b      	uxth	r3, r3
 8010788:	3b02      	subs	r3, #2
 801078a:	b29a      	uxth	r2, r3
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010792:	e03b      	b.n	801080c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	3320      	adds	r3, #32
 801079e:	7812      	ldrb	r2, [r2, #0]
 80107a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80107a6:	1c5a      	adds	r2, r3, #1
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	3b01      	subs	r3, #1
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80107be:	e025      	b.n	801080c <HAL_SPI_Transmit+0x378>
 80107c0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80107c4:	f7f1 fd72 	bl	80022ac <HAL_GetTick>
 80107c8:	4602      	mov	r2, r0
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	683a      	ldr	r2, [r7, #0]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d803      	bhi.n	80107dc <HAL_SPI_Transmit+0x348>
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107da:	d102      	bne.n	80107e2 <HAL_SPI_Transmit+0x34e>
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d114      	bne.n	801080c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80107e2:	68f8      	ldr	r0, [r7, #12]
 80107e4:	f000 fbf4 	bl	8010fd0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80107ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2201      	movs	r2, #1
 80107fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2200      	movs	r2, #0
 8010804:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010808:	2303      	movs	r3, #3
 801080a:	e02c      	b.n	8010866 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010812:	b29b      	uxth	r3, r3
 8010814:	2b00      	cmp	r3, #0
 8010816:	f47f af79 	bne.w	801070c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	9300      	str	r3, [sp, #0]
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	2200      	movs	r2, #0
 8010822:	2108      	movs	r1, #8
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f000 fc73 	bl	8011110 <SPI_WaitOnFlagUntilTimeout>
 801082a:	4603      	mov	r3, r0
 801082c:	2b00      	cmp	r3, #0
 801082e:	d007      	beq.n	8010840 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010836:	f043 0220 	orr.w	r2, r3, #32
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f000 fbc5 	bl	8010fd0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2201      	movs	r2, #1
 801084a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2200      	movs	r2, #0
 8010852:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010860:	2301      	movs	r3, #1
 8010862:	e000      	b.n	8010866 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010864:	2300      	movs	r3, #0
  }
}
 8010866:	4618      	mov	r0, r3
 8010868:	3718      	adds	r7, #24
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop

08010870 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	4613      	mov	r3, r2
 801087c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b01      	cmp	r3, #1
 8010888:	d001      	beq.n	801088e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801088a:	2302      	movs	r3, #2
 801088c:	e126      	b.n	8010adc <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d002      	beq.n	801089a <HAL_SPI_Transmit_DMA+0x2a>
 8010894:	88fb      	ldrh	r3, [r7, #6]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d101      	bne.n	801089e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801089a:	2301      	movs	r3, #1
 801089c:	e11e      	b.n	8010adc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d101      	bne.n	80108ac <HAL_SPI_Transmit_DMA+0x3c>
 80108a8:	2302      	movs	r3, #2
 80108aa:	e117      	b.n	8010adc <HAL_SPI_Transmit_DMA+0x26c>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2201      	movs	r2, #1
 80108b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2203      	movs	r2, #3
 80108b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2200      	movs	r2, #0
 80108c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	88fa      	ldrh	r2, [r7, #6]
 80108ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	88fa      	ldrh	r2, [r7, #6]
 80108d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2200      	movs	r2, #0
 80108de:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2200      	movs	r2, #0
 80108e4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2200      	movs	r2, #0
 80108ea:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2200      	movs	r2, #0
 80108f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010904:	d108      	bne.n	8010918 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	e009      	b.n	801092c <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	68db      	ldr	r3, [r3, #12]
 801091e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801092a:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	2b0f      	cmp	r3, #15
 8010932:	d905      	bls.n	8010940 <HAL_SPI_Transmit_DMA+0xd0>
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010938:	699b      	ldr	r3, [r3, #24]
 801093a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801093e:	d10f      	bne.n	8010960 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8010944:	2b07      	cmp	r3, #7
 8010946:	d911      	bls.n	801096c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801094c:	699b      	ldr	r3, [r3, #24]
 801094e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010952:	d00b      	beq.n	801096c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010958:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801095a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801095e:	d005      	beq.n	801096c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2200      	movs	r2, #0
 8010964:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8010968:	2301      	movs	r3, #1
 801096a:	e0b7      	b.n	8010adc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	2b07      	cmp	r3, #7
 8010972:	d820      	bhi.n	80109b6 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010978:	699b      	ldr	r3, [r3, #24]
 801097a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801097e:	d109      	bne.n	8010994 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010986:	b29b      	uxth	r3, r3
 8010988:	3301      	adds	r3, #1
 801098a:	105b      	asrs	r3, r3, #1
 801098c:	b29a      	uxth	r2, r3
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010998:	699b      	ldr	r3, [r3, #24]
 801099a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801099e:	d11e      	bne.n	80109de <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	3303      	adds	r3, #3
 80109aa:	109b      	asrs	r3, r3, #2
 80109ac:	b29a      	uxth	r2, r3
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80109b4:	e013      	b.n	80109de <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	2b0f      	cmp	r3, #15
 80109bc:	d80f      	bhi.n	80109de <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109c2:	699b      	ldr	r3, [r3, #24]
 80109c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80109c8:	d109      	bne.n	80109de <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	3301      	adds	r3, #1
 80109d4:	105b      	asrs	r3, r3, #1
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109e2:	4a40      	ldr	r2, [pc, #256]	@ (8010ae4 <HAL_SPI_Transmit_DMA+0x274>)
 80109e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109ea:	4a3f      	ldr	r2, [pc, #252]	@ (8010ae8 <HAL_SPI_Transmit_DMA+0x278>)
 80109ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109f2:	4a3e      	ldr	r2, [pc, #248]	@ (8010aec <HAL_SPI_Transmit_DMA+0x27c>)
 80109f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109fa:	2200      	movs	r2, #0
 80109fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	689a      	ldr	r2, [r3, #8]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010a0c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a16:	4619      	mov	r1, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3320      	adds	r3, #32
 8010a1e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8010a28:	f7f3 fc12 	bl	8004250 <HAL_DMA_Start_IT>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d011      	beq.n	8010a56 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010a38:	f043 0210 	orr.w	r2, r3, #16
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2201      	movs	r2, #1
 8010a46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	e042      	b.n	8010adc <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010a5a:	69db      	ldr	r3, [r3, #28]
 8010a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a60:	d108      	bne.n	8010a74 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	6859      	ldr	r1, [r3, #4]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	4b20      	ldr	r3, [pc, #128]	@ (8010af0 <HAL_SPI_Transmit_DMA+0x280>)
 8010a6e:	400b      	ands	r3, r1
 8010a70:	6053      	str	r3, [r2, #4]
 8010a72:	e009      	b.n	8010a88 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	685a      	ldr	r2, [r3, #4]
 8010a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8010af0 <HAL_SPI_Transmit_DMA+0x280>)
 8010a7c:	4013      	ands	r3, r2
 8010a7e:	88f9      	ldrh	r1, [r7, #6]
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	6812      	ldr	r2, [r2, #0]
 8010a84:	430b      	orrs	r3, r1
 8010a86:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	689a      	ldr	r2, [r3, #8]
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010a96:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	691a      	ldr	r2, [r3, #16]
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8010aa6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	681a      	ldr	r2, [r3, #0]
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f042 0201 	orr.w	r2, r2, #1
 8010ab6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010ac0:	d107      	bne.n	8010ad2 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010ad0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010ada:	2300      	movs	r3, #0
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3710      	adds	r7, #16
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	08010f3b 	.word	0x08010f3b
 8010ae8:	08010ef5 	.word	0x08010ef5
 8010aec:	08010f57 	.word	0x08010f57
 8010af0:	ffff0000 	.word	0xffff0000

08010af4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08a      	sub	sp, #40	@ 0x28
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	691b      	ldr	r3, [r3, #16]
 8010b02:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	695b      	ldr	r3, [r3, #20]
 8010b0a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8010b0c:	6a3a      	ldr	r2, [r7, #32]
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	4013      	ands	r3, r2
 8010b12:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	689b      	ldr	r3, [r3, #8]
 8010b1a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010b26:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	3330      	adds	r3, #48	@ 0x30
 8010b2e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d010      	beq.n	8010b5c <HAL_SPI_IRQHandler+0x68>
 8010b3a:	6a3b      	ldr	r3, [r7, #32]
 8010b3c:	f003 0308 	and.w	r3, r3, #8
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d00b      	beq.n	8010b5c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	699a      	ldr	r2, [r3, #24]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010b52:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 f9c3 	bl	8010ee0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8010b5a:	e192      	b.n	8010e82 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d113      	bne.n	8010b8e <HAL_SPI_IRQHandler+0x9a>
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	f003 0320 	and.w	r3, r3, #32
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d10e      	bne.n	8010b8e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d009      	beq.n	8010b8e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	4798      	blx	r3
    hspi->RxISR(hspi);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	4798      	blx	r3
    handled = 1UL;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d10f      	bne.n	8010bb8 <HAL_SPI_IRQHandler+0xc4>
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	f003 0301 	and.w	r3, r3, #1
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d00a      	beq.n	8010bb8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d105      	bne.n	8010bb8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	4798      	blx	r3
    handled = 1UL;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010bb8:	69bb      	ldr	r3, [r7, #24]
 8010bba:	f003 0320 	and.w	r3, r3, #32
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d10f      	bne.n	8010be2 <HAL_SPI_IRQHandler+0xee>
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	f003 0302 	and.w	r3, r3, #2
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d00a      	beq.n	8010be2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d105      	bne.n	8010be2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	4798      	blx	r3
    handled = 1UL;
 8010bde:	2301      	movs	r3, #1
 8010be0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8010be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f040 8147 	bne.w	8010e78 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	f003 0308 	and.w	r3, r3, #8
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f000 808b 	beq.w	8010d0c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	699a      	ldr	r2, [r3, #24]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f042 0208 	orr.w	r2, r2, #8
 8010c04:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	699a      	ldr	r2, [r3, #24]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f042 0210 	orr.w	r2, r2, #16
 8010c14:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	699a      	ldr	r2, [r3, #24]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010c24:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	691a      	ldr	r2, [r3, #16]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f022 0208 	bic.w	r2, r2, #8
 8010c34:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	689b      	ldr	r3, [r3, #8]
 8010c3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d13d      	bne.n	8010cc0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8010c44:	e036      	b.n	8010cb4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	2b0f      	cmp	r3, #15
 8010c4c:	d90b      	bls.n	8010c66 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010c58:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c5e:	1d1a      	adds	r2, r3, #4
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	665a      	str	r2, [r3, #100]	@ 0x64
 8010c64:	e01d      	b.n	8010ca2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	2b07      	cmp	r3, #7
 8010c6c:	d90b      	bls.n	8010c86 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c72:	68fa      	ldr	r2, [r7, #12]
 8010c74:	8812      	ldrh	r2, [r2, #0]
 8010c76:	b292      	uxth	r2, r2
 8010c78:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c7e:	1c9a      	adds	r2, r3, #2
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	665a      	str	r2, [r3, #100]	@ 0x64
 8010c84:	e00d      	b.n	8010ca2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c92:	7812      	ldrb	r2, [r2, #0]
 8010c94:	b2d2      	uxtb	r2, r2
 8010c96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c9c:	1c5a      	adds	r2, r3, #1
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	3b01      	subs	r3, #1
 8010cac:	b29a      	uxth	r2, r3
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1c2      	bne.n	8010c46 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 f985 	bl	8010fd0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d003      	beq.n	8010ce0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f000 f8f7 	bl	8010ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010cde:	e0d0      	b.n	8010e82 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8010ce0:	7cfb      	ldrb	r3, [r7, #19]
 8010ce2:	2b05      	cmp	r3, #5
 8010ce4:	d103      	bne.n	8010cee <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 f8dc 	bl	8010ea4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8010cec:	e0c6      	b.n	8010e7c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8010cee:	7cfb      	ldrb	r3, [r7, #19]
 8010cf0:	2b04      	cmp	r3, #4
 8010cf2:	d103      	bne.n	8010cfc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 f8cb 	bl	8010e90 <HAL_SPI_RxCpltCallback>
    return;
 8010cfa:	e0bf      	b.n	8010e7c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8010cfc:	7cfb      	ldrb	r3, [r7, #19]
 8010cfe:	2b03      	cmp	r3, #3
 8010d00:	f040 80bc 	bne.w	8010e7c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7f0 f9e3 	bl	80010d0 <HAL_SPI_TxCpltCallback>
    return;
 8010d0a:	e0b7      	b.n	8010e7c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8010d0c:	69bb      	ldr	r3, [r7, #24]
 8010d0e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f000 80b5 	beq.w	8010e82 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8010d18:	69bb      	ldr	r3, [r7, #24]
 8010d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00f      	beq.n	8010d42 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d28:	f043 0204 	orr.w	r2, r3, #4
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	699a      	ldr	r2, [r3, #24]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010d40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00f      	beq.n	8010d6c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d52:	f043 0201 	orr.w	r2, r3, #1
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	699a      	ldr	r2, [r3, #24]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010d6a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010d6c:	69bb      	ldr	r3, [r7, #24]
 8010d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00f      	beq.n	8010d96 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d7c:	f043 0208 	orr.w	r2, r3, #8
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	699a      	ldr	r2, [r3, #24]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010d94:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	f003 0320 	and.w	r3, r3, #32
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00f      	beq.n	8010dc0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010da6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	699a      	ldr	r2, [r3, #24]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f042 0220 	orr.w	r2, r2, #32
 8010dbe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d05a      	beq.n	8010e80 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f022 0201 	bic.w	r2, r2, #1
 8010dd8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	6919      	ldr	r1, [r3, #16]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681a      	ldr	r2, [r3, #0]
 8010de4:	4b28      	ldr	r3, [pc, #160]	@ (8010e88 <HAL_SPI_IRQHandler+0x394>)
 8010de6:	400b      	ands	r3, r1
 8010de8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010df0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010df4:	d138      	bne.n	8010e68 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	689a      	ldr	r2, [r3, #8]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010e04:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d013      	beq.n	8010e36 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e12:	4a1e      	ldr	r2, [pc, #120]	@ (8010e8c <HAL_SPI_IRQHandler+0x398>)
 8010e14:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7f3 ffa0 	bl	8004d60 <HAL_DMA_Abort_IT>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d007      	beq.n	8010e36 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d020      	beq.n	8010e80 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e42:	4a12      	ldr	r2, [pc, #72]	@ (8010e8c <HAL_SPI_IRQHandler+0x398>)
 8010e44:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7f3 ff88 	bl	8004d60 <HAL_DMA_Abort_IT>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d014      	beq.n	8010e80 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010e66:	e00b      	b.n	8010e80 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f000 f82b 	bl	8010ecc <HAL_SPI_ErrorCallback>
    return;
 8010e76:	e003      	b.n	8010e80 <HAL_SPI_IRQHandler+0x38c>
    return;
 8010e78:	bf00      	nop
 8010e7a:	e002      	b.n	8010e82 <HAL_SPI_IRQHandler+0x38e>
    return;
 8010e7c:	bf00      	nop
 8010e7e:	e000      	b.n	8010e82 <HAL_SPI_IRQHandler+0x38e>
    return;
 8010e80:	bf00      	nop
  }
}
 8010e82:	3728      	adds	r7, #40	@ 0x28
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	fffffc94 	.word	0xfffffc94
 8010e8c:	08010f9d 	.word	0x08010f9d

08010e90 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010e98:	bf00      	nop
 8010e9a:	370c      	adds	r7, #12
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010eac:	bf00      	nop
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8010ec0:	bf00      	nop
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b083      	sub	sp, #12
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8010ee8:	bf00      	nop
 8010eea:	370c      	adds	r7, #12
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f00:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b07      	cmp	r3, #7
 8010f0c:	d011      	beq.n	8010f32 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f12:	69db      	ldr	r3, [r3, #28]
 8010f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f18:	d103      	bne.n	8010f22 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8010f1a:	68f8      	ldr	r0, [r7, #12]
 8010f1c:	f7f0 f8d8 	bl	80010d0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8010f20:	e007      	b.n	8010f32 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	691a      	ldr	r2, [r3, #16]
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f042 0208 	orr.w	r2, r2, #8
 8010f30:	611a      	str	r2, [r3, #16]
}
 8010f32:	bf00      	nop
 8010f34:	3710      	adds	r7, #16
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b084      	sub	sp, #16
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f46:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f7ff ffb5 	bl	8010eb8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010f4e:	bf00      	nop
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b084      	sub	sp, #16
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f62:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7f5 f879 	bl	800605c <HAL_DMA_GetError>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b02      	cmp	r3, #2
 8010f6e:	d011      	beq.n	8010f94 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f000 f82d 	bl	8010fd0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f7c:	f043 0210 	orr.w	r2, r3, #16
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f7ff ff9c 	bl	8010ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8010f94:	bf00      	nop
 8010f96:	3710      	adds	r7, #16
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fa8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2200      	movs	r2, #0
 8010fae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010fc2:	68f8      	ldr	r0, [r7, #12]
 8010fc4:	f7ff ff82 	bl	8010ecc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010fc8:	bf00      	nop
 8010fca:	3710      	adds	r7, #16
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b085      	sub	sp, #20
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	695b      	ldr	r3, [r3, #20]
 8010fde:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	699a      	ldr	r2, [r3, #24]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	f042 0208 	orr.w	r2, r2, #8
 8010fee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	699a      	ldr	r2, [r3, #24]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	f042 0210 	orr.w	r2, r2, #16
 8010ffe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f022 0201 	bic.w	r2, r2, #1
 801100e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	6919      	ldr	r1, [r3, #16]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	4b3c      	ldr	r3, [pc, #240]	@ (801110c <SPI_CloseTransfer+0x13c>)
 801101c:	400b      	ands	r3, r1
 801101e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	689a      	ldr	r2, [r3, #8]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801102e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011036:	b2db      	uxtb	r3, r3
 8011038:	2b04      	cmp	r3, #4
 801103a:	d014      	beq.n	8011066 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f003 0320 	and.w	r3, r3, #32
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00f      	beq.n	8011066 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801104c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	699a      	ldr	r2, [r3, #24]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	f042 0220 	orr.w	r2, r2, #32
 8011064:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801106c:	b2db      	uxtb	r3, r3
 801106e:	2b03      	cmp	r3, #3
 8011070:	d014      	beq.n	801109c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011078:	2b00      	cmp	r3, #0
 801107a:	d00f      	beq.n	801109c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011082:	f043 0204 	orr.w	r2, r3, #4
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	699a      	ldr	r2, [r3, #24]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801109a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00f      	beq.n	80110c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80110ac:	f043 0201 	orr.w	r2, r3, #1
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	699a      	ldr	r2, [r3, #24]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80110c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d00f      	beq.n	80110f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80110d6:	f043 0208 	orr.w	r2, r3, #8
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	699a      	ldr	r2, [r3, #24]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80110ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2200      	movs	r2, #0
 80110f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011100:	bf00      	nop
 8011102:	3714      	adds	r7, #20
 8011104:	46bd      	mov	sp, r7
 8011106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110a:	4770      	bx	lr
 801110c:	fffffc90 	.word	0xfffffc90

08011110 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	603b      	str	r3, [r7, #0]
 801111c:	4613      	mov	r3, r2
 801111e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011120:	e010      	b.n	8011144 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011122:	f7f1 f8c3 	bl	80022ac <HAL_GetTick>
 8011126:	4602      	mov	r2, r0
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	683a      	ldr	r2, [r7, #0]
 801112e:	429a      	cmp	r2, r3
 8011130:	d803      	bhi.n	801113a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011138:	d102      	bne.n	8011140 <SPI_WaitOnFlagUntilTimeout+0x30>
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d101      	bne.n	8011144 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011140:	2303      	movs	r3, #3
 8011142:	e00f      	b.n	8011164 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	695a      	ldr	r2, [r3, #20]
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	4013      	ands	r3, r2
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	429a      	cmp	r2, r3
 8011152:	bf0c      	ite	eq
 8011154:	2301      	moveq	r3, #1
 8011156:	2300      	movne	r3, #0
 8011158:	b2db      	uxtb	r3, r3
 801115a:	461a      	mov	r2, r3
 801115c:	79fb      	ldrb	r3, [r7, #7]
 801115e:	429a      	cmp	r2, r3
 8011160:	d0df      	beq.n	8011122 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3710      	adds	r7, #16
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801116c:	b480      	push	{r7}
 801116e:	b085      	sub	sp, #20
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011178:	095b      	lsrs	r3, r3, #5
 801117a:	3301      	adds	r3, #1
 801117c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	3301      	adds	r3, #1
 8011184:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	3307      	adds	r3, #7
 801118a:	08db      	lsrs	r3, r3, #3
 801118c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	68fa      	ldr	r2, [r7, #12]
 8011192:	fb02 f303 	mul.w	r3, r2, r3
}
 8011196:	4618      	mov	r0, r3
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr

080111a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b082      	sub	sp, #8
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d101      	bne.n	80111b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80111b0:	2301      	movs	r3, #1
 80111b2:	e042      	b.n	801123a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d106      	bne.n	80111cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f7f0 fbca 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2224      	movs	r2, #36	@ 0x24
 80111d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f022 0201 	bic.w	r2, r2, #1
 80111e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d002      	beq.n	80111f2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f001 fa15 	bl	801261c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 fcaa 	bl	8011b4c <UART_SetConfig>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d101      	bne.n	8011202 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80111fe:	2301      	movs	r3, #1
 8011200:	e01b      	b.n	801123a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	685a      	ldr	r2, [r3, #4]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011210:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	689a      	ldr	r2, [r3, #8]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011220:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f042 0201 	orr.w	r2, r2, #1
 8011230:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f001 fa94 	bl	8012760 <UART_CheckIdleState>
 8011238:	4603      	mov	r3, r0
}
 801123a:	4618      	mov	r0, r3
 801123c:	3708      	adds	r7, #8
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b08a      	sub	sp, #40	@ 0x28
 8011246:	af02      	add	r7, sp, #8
 8011248:	60f8      	str	r0, [r7, #12]
 801124a:	60b9      	str	r1, [r7, #8]
 801124c:	603b      	str	r3, [r7, #0]
 801124e:	4613      	mov	r3, r2
 8011250:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011258:	2b20      	cmp	r3, #32
 801125a:	d17b      	bne.n	8011354 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d002      	beq.n	8011268 <HAL_UART_Transmit+0x26>
 8011262:	88fb      	ldrh	r3, [r7, #6]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d101      	bne.n	801126c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011268:	2301      	movs	r3, #1
 801126a:	e074      	b.n	8011356 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2200      	movs	r2, #0
 8011270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2221      	movs	r2, #33	@ 0x21
 8011278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801127c:	f7f1 f816 	bl	80022ac <HAL_GetTick>
 8011280:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	88fa      	ldrh	r2, [r7, #6]
 8011286:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	88fa      	ldrh	r2, [r7, #6]
 801128e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801129a:	d108      	bne.n	80112ae <HAL_UART_Transmit+0x6c>
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	691b      	ldr	r3, [r3, #16]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d104      	bne.n	80112ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80112a4:	2300      	movs	r3, #0
 80112a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	61bb      	str	r3, [r7, #24]
 80112ac:	e003      	b.n	80112b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80112b2:	2300      	movs	r3, #0
 80112b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80112b6:	e030      	b.n	801131a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	2200      	movs	r2, #0
 80112c0:	2180      	movs	r1, #128	@ 0x80
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f001 faf6 	bl	80128b4 <UART_WaitOnFlagUntilTimeout>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d005      	beq.n	80112da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2220      	movs	r2, #32
 80112d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80112d6:	2303      	movs	r3, #3
 80112d8:	e03d      	b.n	8011356 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80112da:	69fb      	ldr	r3, [r7, #28]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d10b      	bne.n	80112f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	881b      	ldrh	r3, [r3, #0]
 80112e4:	461a      	mov	r2, r3
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80112ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	3302      	adds	r3, #2
 80112f4:	61bb      	str	r3, [r7, #24]
 80112f6:	e007      	b.n	8011308 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	781a      	ldrb	r2, [r3, #0]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	3301      	adds	r3, #1
 8011306:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801130e:	b29b      	uxth	r3, r3
 8011310:	3b01      	subs	r3, #1
 8011312:	b29a      	uxth	r2, r3
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011320:	b29b      	uxth	r3, r3
 8011322:	2b00      	cmp	r3, #0
 8011324:	d1c8      	bne.n	80112b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	2200      	movs	r2, #0
 801132e:	2140      	movs	r1, #64	@ 0x40
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	f001 fabf 	bl	80128b4 <UART_WaitOnFlagUntilTimeout>
 8011336:	4603      	mov	r3, r0
 8011338:	2b00      	cmp	r3, #0
 801133a:	d005      	beq.n	8011348 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2220      	movs	r2, #32
 8011340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8011344:	2303      	movs	r3, #3
 8011346:	e006      	b.n	8011356 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2220      	movs	r2, #32
 801134c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8011350:	2300      	movs	r3, #0
 8011352:	e000      	b.n	8011356 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011354:	2302      	movs	r3, #2
  }
}
 8011356:	4618      	mov	r0, r3
 8011358:	3720      	adds	r7, #32
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b0ba      	sub	sp, #232	@ 0xe8
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	69db      	ldr	r3, [r3, #28]
 801136e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	689b      	ldr	r3, [r3, #8]
 8011382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801138a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801138e:	4013      	ands	r3, r2
 8011390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011398:	2b00      	cmp	r3, #0
 801139a:	d11b      	bne.n	80113d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801139c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113a0:	f003 0320 	and.w	r3, r3, #32
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d015      	beq.n	80113d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80113a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80113ac:	f003 0320 	and.w	r3, r3, #32
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d105      	bne.n	80113c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80113b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80113b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d009      	beq.n	80113d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	f000 8393 	beq.w	8011af0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	4798      	blx	r3
      }
      return;
 80113d2:	e38d      	b.n	8011af0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80113d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80113d8:	2b00      	cmp	r3, #0
 80113da:	f000 8123 	beq.w	8011624 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80113de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80113e2:	4b8d      	ldr	r3, [pc, #564]	@ (8011618 <HAL_UART_IRQHandler+0x2b8>)
 80113e4:	4013      	ands	r3, r2
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d106      	bne.n	80113f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80113ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80113ee:	4b8b      	ldr	r3, [pc, #556]	@ (801161c <HAL_UART_IRQHandler+0x2bc>)
 80113f0:	4013      	ands	r3, r2
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	f000 8116 	beq.w	8011624 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80113f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80113fc:	f003 0301 	and.w	r3, r3, #1
 8011400:	2b00      	cmp	r3, #0
 8011402:	d011      	beq.n	8011428 <HAL_UART_IRQHandler+0xc8>
 8011404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00b      	beq.n	8011428 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2201      	movs	r2, #1
 8011416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801141e:	f043 0201 	orr.w	r2, r3, #1
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801142c:	f003 0302 	and.w	r3, r3, #2
 8011430:	2b00      	cmp	r3, #0
 8011432:	d011      	beq.n	8011458 <HAL_UART_IRQHandler+0xf8>
 8011434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011438:	f003 0301 	and.w	r3, r3, #1
 801143c:	2b00      	cmp	r3, #0
 801143e:	d00b      	beq.n	8011458 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2202      	movs	r2, #2
 8011446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801144e:	f043 0204 	orr.w	r2, r3, #4
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801145c:	f003 0304 	and.w	r3, r3, #4
 8011460:	2b00      	cmp	r3, #0
 8011462:	d011      	beq.n	8011488 <HAL_UART_IRQHandler+0x128>
 8011464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011468:	f003 0301 	and.w	r3, r3, #1
 801146c:	2b00      	cmp	r3, #0
 801146e:	d00b      	beq.n	8011488 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2204      	movs	r2, #4
 8011476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801147e:	f043 0202 	orr.w	r2, r3, #2
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801148c:	f003 0308 	and.w	r3, r3, #8
 8011490:	2b00      	cmp	r3, #0
 8011492:	d017      	beq.n	80114c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011498:	f003 0320 	and.w	r3, r3, #32
 801149c:	2b00      	cmp	r3, #0
 801149e:	d105      	bne.n	80114ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80114a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80114a4:	4b5c      	ldr	r3, [pc, #368]	@ (8011618 <HAL_UART_IRQHandler+0x2b8>)
 80114a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00b      	beq.n	80114c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2208      	movs	r2, #8
 80114b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80114ba:	f043 0208 	orr.w	r2, r3, #8
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80114c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d012      	beq.n	80114f6 <HAL_UART_IRQHandler+0x196>
 80114d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d00c      	beq.n	80114f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80114e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80114ec:	f043 0220 	orr.w	r2, r3, #32
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	f000 82f9 	beq.w	8011af4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011506:	f003 0320 	and.w	r3, r3, #32
 801150a:	2b00      	cmp	r3, #0
 801150c:	d013      	beq.n	8011536 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801150e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011512:	f003 0320 	and.w	r3, r3, #32
 8011516:	2b00      	cmp	r3, #0
 8011518:	d105      	bne.n	8011526 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801151a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011522:	2b00      	cmp	r3, #0
 8011524:	d007      	beq.n	8011536 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801152a:	2b00      	cmp	r3, #0
 801152c:	d003      	beq.n	8011536 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801153c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801154a:	2b40      	cmp	r3, #64	@ 0x40
 801154c:	d005      	beq.n	801155a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801154e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011552:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011556:	2b00      	cmp	r3, #0
 8011558:	d054      	beq.n	8011604 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f001 fa18 	bl	8012990 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801156a:	2b40      	cmp	r3, #64	@ 0x40
 801156c:	d146      	bne.n	80115fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	3308      	adds	r3, #8
 8011574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801157c:	e853 3f00 	ldrex	r3, [r3]
 8011580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801158c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	3308      	adds	r3, #8
 8011596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801159a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801159e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80115a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80115aa:	e841 2300 	strex	r3, r2, [r1]
 80115ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80115b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d1d9      	bne.n	801156e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d017      	beq.n	80115f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115ca:	4a15      	ldr	r2, [pc, #84]	@ (8011620 <HAL_UART_IRQHandler+0x2c0>)
 80115cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7f3 fbc3 	bl	8004d60 <HAL_DMA_Abort_IT>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d019      	beq.n	8011614 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80115ee:	4610      	mov	r0, r2
 80115f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80115f2:	e00f      	b.n	8011614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f000 fa93 	bl	8011b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80115fa:	e00b      	b.n	8011614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f000 fa8f 	bl	8011b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011602:	e007      	b.n	8011614 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f000 fa8b 	bl	8011b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2200      	movs	r2, #0
 801160e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8011612:	e26f      	b.n	8011af4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011614:	bf00      	nop
    return;
 8011616:	e26d      	b.n	8011af4 <HAL_UART_IRQHandler+0x794>
 8011618:	10000001 	.word	0x10000001
 801161c:	04000120 	.word	0x04000120
 8011620:	08012a5d 	.word	0x08012a5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011628:	2b01      	cmp	r3, #1
 801162a:	f040 8203 	bne.w	8011a34 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801162e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011632:	f003 0310 	and.w	r3, r3, #16
 8011636:	2b00      	cmp	r3, #0
 8011638:	f000 81fc 	beq.w	8011a34 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801163c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011640:	f003 0310 	and.w	r3, r3, #16
 8011644:	2b00      	cmp	r3, #0
 8011646:	f000 81f5 	beq.w	8011a34 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2210      	movs	r2, #16
 8011650:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	689b      	ldr	r3, [r3, #8]
 8011658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801165c:	2b40      	cmp	r3, #64	@ 0x40
 801165e:	f040 816d 	bne.w	801193c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4aa4      	ldr	r2, [pc, #656]	@ (80118fc <HAL_UART_IRQHandler+0x59c>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d068      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4aa1      	ldr	r2, [pc, #644]	@ (8011900 <HAL_UART_IRQHandler+0x5a0>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d061      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4a9f      	ldr	r2, [pc, #636]	@ (8011904 <HAL_UART_IRQHandler+0x5a4>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d05a      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4a9c      	ldr	r2, [pc, #624]	@ (8011908 <HAL_UART_IRQHandler+0x5a8>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d053      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	4a9a      	ldr	r2, [pc, #616]	@ (801190c <HAL_UART_IRQHandler+0x5ac>)
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d04c      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4a97      	ldr	r2, [pc, #604]	@ (8011910 <HAL_UART_IRQHandler+0x5b0>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d045      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	4a95      	ldr	r2, [pc, #596]	@ (8011914 <HAL_UART_IRQHandler+0x5b4>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d03e      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	4a92      	ldr	r2, [pc, #584]	@ (8011918 <HAL_UART_IRQHandler+0x5b8>)
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d037      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4a90      	ldr	r2, [pc, #576]	@ (801191c <HAL_UART_IRQHandler+0x5bc>)
 80116dc:	4293      	cmp	r3, r2
 80116de:	d030      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4a8d      	ldr	r2, [pc, #564]	@ (8011920 <HAL_UART_IRQHandler+0x5c0>)
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d029      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	4a8b      	ldr	r2, [pc, #556]	@ (8011924 <HAL_UART_IRQHandler+0x5c4>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d022      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	4a88      	ldr	r2, [pc, #544]	@ (8011928 <HAL_UART_IRQHandler+0x5c8>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d01b      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4a86      	ldr	r2, [pc, #536]	@ (801192c <HAL_UART_IRQHandler+0x5cc>)
 8011714:	4293      	cmp	r3, r2
 8011716:	d014      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	4a83      	ldr	r2, [pc, #524]	@ (8011930 <HAL_UART_IRQHandler+0x5d0>)
 8011722:	4293      	cmp	r3, r2
 8011724:	d00d      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	4a81      	ldr	r2, [pc, #516]	@ (8011934 <HAL_UART_IRQHandler+0x5d4>)
 8011730:	4293      	cmp	r3, r2
 8011732:	d006      	beq.n	8011742 <HAL_UART_IRQHandler+0x3e2>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	4a7e      	ldr	r2, [pc, #504]	@ (8011938 <HAL_UART_IRQHandler+0x5d8>)
 801173e:	4293      	cmp	r3, r2
 8011740:	d106      	bne.n	8011750 <HAL_UART_IRQHandler+0x3f0>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	b29b      	uxth	r3, r3
 801174e:	e005      	b.n	801175c <HAL_UART_IRQHandler+0x3fc>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	b29b      	uxth	r3, r3
 801175c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011764:	2b00      	cmp	r3, #0
 8011766:	f000 80ad 	beq.w	80118c4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011770:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011774:	429a      	cmp	r2, r3
 8011776:	f080 80a5 	bcs.w	80118c4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011780:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801178a:	69db      	ldr	r3, [r3, #28]
 801178c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011790:	f000 8087 	beq.w	80118a2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801179c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80117a0:	e853 3f00 	ldrex	r3, [r3]
 80117a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80117a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80117ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80117b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	461a      	mov	r2, r3
 80117ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80117be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80117c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80117ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80117ce:	e841 2300 	strex	r3, r2, [r1]
 80117d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80117d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d1da      	bne.n	8011794 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	3308      	adds	r3, #8
 80117e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117e8:	e853 3f00 	ldrex	r3, [r3]
 80117ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80117ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80117f0:	f023 0301 	bic.w	r3, r3, #1
 80117f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	3308      	adds	r3, #8
 80117fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011802:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011806:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011808:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801180a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801180e:	e841 2300 	strex	r3, r2, [r1]
 8011812:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011814:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011816:	2b00      	cmp	r3, #0
 8011818:	d1e1      	bne.n	80117de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	3308      	adds	r3, #8
 8011820:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011822:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011824:	e853 3f00 	ldrex	r3, [r3]
 8011828:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801182a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801182c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	3308      	adds	r3, #8
 801183a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801183e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011840:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011842:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011844:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011846:	e841 2300 	strex	r3, r2, [r1]
 801184a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801184c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801184e:	2b00      	cmp	r3, #0
 8011850:	d1e3      	bne.n	801181a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2220      	movs	r2, #32
 8011856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011868:	e853 3f00 	ldrex	r3, [r3]
 801186c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801186e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011870:	f023 0310 	bic.w	r3, r3, #16
 8011874:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	461a      	mov	r2, r3
 801187e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011882:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011884:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011886:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801188a:	e841 2300 	strex	r3, r2, [r1]
 801188e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1e4      	bne.n	8011860 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801189c:	4618      	mov	r0, r3
 801189e:	f7f2 ff41 	bl	8004724 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2202      	movs	r2, #2
 80118a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	4619      	mov	r1, r3
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 f939 	bl	8011b34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80118c2:	e119      	b.n	8011af8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80118ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80118ce:	429a      	cmp	r2, r3
 80118d0:	f040 8112 	bne.w	8011af8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80118da:	69db      	ldr	r3, [r3, #28]
 80118dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80118e0:	f040 810a 	bne.w	8011af8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2202      	movs	r2, #2
 80118e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80118f0:	4619      	mov	r1, r3
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f000 f91e 	bl	8011b34 <HAL_UARTEx_RxEventCallback>
      return;
 80118f8:	e0fe      	b.n	8011af8 <HAL_UART_IRQHandler+0x798>
 80118fa:	bf00      	nop
 80118fc:	40020010 	.word	0x40020010
 8011900:	40020028 	.word	0x40020028
 8011904:	40020040 	.word	0x40020040
 8011908:	40020058 	.word	0x40020058
 801190c:	40020070 	.word	0x40020070
 8011910:	40020088 	.word	0x40020088
 8011914:	400200a0 	.word	0x400200a0
 8011918:	400200b8 	.word	0x400200b8
 801191c:	40020410 	.word	0x40020410
 8011920:	40020428 	.word	0x40020428
 8011924:	40020440 	.word	0x40020440
 8011928:	40020458 	.word	0x40020458
 801192c:	40020470 	.word	0x40020470
 8011930:	40020488 	.word	0x40020488
 8011934:	400204a0 	.word	0x400204a0
 8011938:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011948:	b29b      	uxth	r3, r3
 801194a:	1ad3      	subs	r3, r2, r3
 801194c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011956:	b29b      	uxth	r3, r3
 8011958:	2b00      	cmp	r3, #0
 801195a:	f000 80cf 	beq.w	8011afc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801195e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011962:	2b00      	cmp	r3, #0
 8011964:	f000 80ca 	beq.w	8011afc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011970:	e853 3f00 	ldrex	r3, [r3]
 8011974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801197c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	461a      	mov	r2, r3
 8011986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801198a:	647b      	str	r3, [r7, #68]	@ 0x44
 801198c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801198e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011992:	e841 2300 	strex	r3, r2, [r1]
 8011996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801199a:	2b00      	cmp	r3, #0
 801199c:	d1e4      	bne.n	8011968 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	3308      	adds	r3, #8
 80119a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a8:	e853 3f00 	ldrex	r3, [r3]
 80119ac:	623b      	str	r3, [r7, #32]
   return(result);
 80119ae:	6a3a      	ldr	r2, [r7, #32]
 80119b0:	4b55      	ldr	r3, [pc, #340]	@ (8011b08 <HAL_UART_IRQHandler+0x7a8>)
 80119b2:	4013      	ands	r3, r2
 80119b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	3308      	adds	r3, #8
 80119be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80119c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80119c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119ca:	e841 2300 	strex	r3, r2, [r1]
 80119ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80119d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d1e3      	bne.n	801199e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2220      	movs	r2, #32
 80119da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2200      	movs	r2, #0
 80119e2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	e853 3f00 	ldrex	r3, [r3]
 80119f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f023 0310 	bic.w	r3, r3, #16
 80119fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	461a      	mov	r2, r3
 8011a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011a0c:	61fb      	str	r3, [r7, #28]
 8011a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a10:	69b9      	ldr	r1, [r7, #24]
 8011a12:	69fa      	ldr	r2, [r7, #28]
 8011a14:	e841 2300 	strex	r3, r2, [r1]
 8011a18:	617b      	str	r3, [r7, #20]
   return(result);
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1e4      	bne.n	80119ea <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2202      	movs	r2, #2
 8011a24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 f881 	bl	8011b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011a32:	e063      	b.n	8011afc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00e      	beq.n	8011a5e <HAL_UART_IRQHandler+0x6fe>
 8011a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d008      	beq.n	8011a5e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f001 f83d 	bl	8012ad6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011a5c:	e051      	b.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d014      	beq.n	8011a94 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d105      	bne.n	8011a82 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011a7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d008      	beq.n	8011a94 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d03a      	beq.n	8011b00 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	4798      	blx	r3
    }
    return;
 8011a92:	e035      	b.n	8011b00 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d009      	beq.n	8011ab4 <HAL_UART_IRQHandler+0x754>
 8011aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d003      	beq.n	8011ab4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 ffe7 	bl	8012a80 <UART_EndTransmit_IT>
    return;
 8011ab2:	e026      	b.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d009      	beq.n	8011ad4 <HAL_UART_IRQHandler+0x774>
 8011ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ac4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d003      	beq.n	8011ad4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	f001 f816 	bl	8012afe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011ad2:	e016      	b.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d010      	beq.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
 8011ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	da0c      	bge.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 fffe 	bl	8012aea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011aee:	e008      	b.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8011af0:	bf00      	nop
 8011af2:	e006      	b.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
    return;
 8011af4:	bf00      	nop
 8011af6:	e004      	b.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8011af8:	bf00      	nop
 8011afa:	e002      	b.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
      return;
 8011afc:	bf00      	nop
 8011afe:	e000      	b.n	8011b02 <HAL_UART_IRQHandler+0x7a2>
    return;
 8011b00:	bf00      	nop
  }
}
 8011b02:	37e8      	adds	r7, #232	@ 0xe8
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	effffffe 	.word	0xeffffffe

08011b0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011b14:	bf00      	nop
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b083      	sub	sp, #12
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011b28:	bf00      	nop
 8011b2a:	370c      	adds	r7, #12
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr

08011b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b083      	sub	sp, #12
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011b40:	bf00      	nop
 8011b42:	370c      	adds	r7, #12
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr

08011b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b50:	b092      	sub	sp, #72	@ 0x48
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011b56:	2300      	movs	r3, #0
 8011b58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	689a      	ldr	r2, [r3, #8]
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	691b      	ldr	r3, [r3, #16]
 8011b64:	431a      	orrs	r2, r3
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	695b      	ldr	r3, [r3, #20]
 8011b6a:	431a      	orrs	r2, r3
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	69db      	ldr	r3, [r3, #28]
 8011b70:	4313      	orrs	r3, r2
 8011b72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	4bbe      	ldr	r3, [pc, #760]	@ (8011e74 <UART_SetConfig+0x328>)
 8011b7c:	4013      	ands	r3, r2
 8011b7e:	697a      	ldr	r2, [r7, #20]
 8011b80:	6812      	ldr	r2, [r2, #0]
 8011b82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011b84:	430b      	orrs	r3, r1
 8011b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	68da      	ldr	r2, [r3, #12]
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	430a      	orrs	r2, r1
 8011b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	699b      	ldr	r3, [r3, #24]
 8011ba2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4ab3      	ldr	r2, [pc, #716]	@ (8011e78 <UART_SetConfig+0x32c>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d004      	beq.n	8011bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011bb4:	4313      	orrs	r3, r2
 8011bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	689a      	ldr	r2, [r3, #8]
 8011bbe:	4baf      	ldr	r3, [pc, #700]	@ (8011e7c <UART_SetConfig+0x330>)
 8011bc0:	4013      	ands	r3, r2
 8011bc2:	697a      	ldr	r2, [r7, #20]
 8011bc4:	6812      	ldr	r2, [r2, #0]
 8011bc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011bc8:	430b      	orrs	r3, r1
 8011bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bd2:	f023 010f 	bic.w	r1, r3, #15
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	430a      	orrs	r2, r1
 8011be0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	4aa6      	ldr	r2, [pc, #664]	@ (8011e80 <UART_SetConfig+0x334>)
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d177      	bne.n	8011cdc <UART_SetConfig+0x190>
 8011bec:	4ba5      	ldr	r3, [pc, #660]	@ (8011e84 <UART_SetConfig+0x338>)
 8011bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011bf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011bf4:	2b28      	cmp	r3, #40	@ 0x28
 8011bf6:	d86d      	bhi.n	8011cd4 <UART_SetConfig+0x188>
 8011bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8011c00 <UART_SetConfig+0xb4>)
 8011bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bfe:	bf00      	nop
 8011c00:	08011ca5 	.word	0x08011ca5
 8011c04:	08011cd5 	.word	0x08011cd5
 8011c08:	08011cd5 	.word	0x08011cd5
 8011c0c:	08011cd5 	.word	0x08011cd5
 8011c10:	08011cd5 	.word	0x08011cd5
 8011c14:	08011cd5 	.word	0x08011cd5
 8011c18:	08011cd5 	.word	0x08011cd5
 8011c1c:	08011cd5 	.word	0x08011cd5
 8011c20:	08011cad 	.word	0x08011cad
 8011c24:	08011cd5 	.word	0x08011cd5
 8011c28:	08011cd5 	.word	0x08011cd5
 8011c2c:	08011cd5 	.word	0x08011cd5
 8011c30:	08011cd5 	.word	0x08011cd5
 8011c34:	08011cd5 	.word	0x08011cd5
 8011c38:	08011cd5 	.word	0x08011cd5
 8011c3c:	08011cd5 	.word	0x08011cd5
 8011c40:	08011cb5 	.word	0x08011cb5
 8011c44:	08011cd5 	.word	0x08011cd5
 8011c48:	08011cd5 	.word	0x08011cd5
 8011c4c:	08011cd5 	.word	0x08011cd5
 8011c50:	08011cd5 	.word	0x08011cd5
 8011c54:	08011cd5 	.word	0x08011cd5
 8011c58:	08011cd5 	.word	0x08011cd5
 8011c5c:	08011cd5 	.word	0x08011cd5
 8011c60:	08011cbd 	.word	0x08011cbd
 8011c64:	08011cd5 	.word	0x08011cd5
 8011c68:	08011cd5 	.word	0x08011cd5
 8011c6c:	08011cd5 	.word	0x08011cd5
 8011c70:	08011cd5 	.word	0x08011cd5
 8011c74:	08011cd5 	.word	0x08011cd5
 8011c78:	08011cd5 	.word	0x08011cd5
 8011c7c:	08011cd5 	.word	0x08011cd5
 8011c80:	08011cc5 	.word	0x08011cc5
 8011c84:	08011cd5 	.word	0x08011cd5
 8011c88:	08011cd5 	.word	0x08011cd5
 8011c8c:	08011cd5 	.word	0x08011cd5
 8011c90:	08011cd5 	.word	0x08011cd5
 8011c94:	08011cd5 	.word	0x08011cd5
 8011c98:	08011cd5 	.word	0x08011cd5
 8011c9c:	08011cd5 	.word	0x08011cd5
 8011ca0:	08011ccd 	.word	0x08011ccd
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011caa:	e222      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011cac:	2304      	movs	r3, #4
 8011cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cb2:	e21e      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011cb4:	2308      	movs	r3, #8
 8011cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cba:	e21a      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011cbc:	2310      	movs	r3, #16
 8011cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cc2:	e216      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011cc4:	2320      	movs	r3, #32
 8011cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cca:	e212      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011ccc:	2340      	movs	r3, #64	@ 0x40
 8011cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cd2:	e20e      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011cd4:	2380      	movs	r3, #128	@ 0x80
 8011cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011cda:	e20a      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4a69      	ldr	r2, [pc, #420]	@ (8011e88 <UART_SetConfig+0x33c>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	d130      	bne.n	8011d48 <UART_SetConfig+0x1fc>
 8011ce6:	4b67      	ldr	r3, [pc, #412]	@ (8011e84 <UART_SetConfig+0x338>)
 8011ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cea:	f003 0307 	and.w	r3, r3, #7
 8011cee:	2b05      	cmp	r3, #5
 8011cf0:	d826      	bhi.n	8011d40 <UART_SetConfig+0x1f4>
 8011cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8011cf8 <UART_SetConfig+0x1ac>)
 8011cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cf8:	08011d11 	.word	0x08011d11
 8011cfc:	08011d19 	.word	0x08011d19
 8011d00:	08011d21 	.word	0x08011d21
 8011d04:	08011d29 	.word	0x08011d29
 8011d08:	08011d31 	.word	0x08011d31
 8011d0c:	08011d39 	.word	0x08011d39
 8011d10:	2300      	movs	r3, #0
 8011d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d16:	e1ec      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d18:	2304      	movs	r3, #4
 8011d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d1e:	e1e8      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d20:	2308      	movs	r3, #8
 8011d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d26:	e1e4      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d28:	2310      	movs	r3, #16
 8011d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d2e:	e1e0      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d30:	2320      	movs	r3, #32
 8011d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d36:	e1dc      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d38:	2340      	movs	r3, #64	@ 0x40
 8011d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d3e:	e1d8      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d40:	2380      	movs	r3, #128	@ 0x80
 8011d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d46:	e1d4      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8011e8c <UART_SetConfig+0x340>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	d130      	bne.n	8011db4 <UART_SetConfig+0x268>
 8011d52:	4b4c      	ldr	r3, [pc, #304]	@ (8011e84 <UART_SetConfig+0x338>)
 8011d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d56:	f003 0307 	and.w	r3, r3, #7
 8011d5a:	2b05      	cmp	r3, #5
 8011d5c:	d826      	bhi.n	8011dac <UART_SetConfig+0x260>
 8011d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8011d64 <UART_SetConfig+0x218>)
 8011d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d64:	08011d7d 	.word	0x08011d7d
 8011d68:	08011d85 	.word	0x08011d85
 8011d6c:	08011d8d 	.word	0x08011d8d
 8011d70:	08011d95 	.word	0x08011d95
 8011d74:	08011d9d 	.word	0x08011d9d
 8011d78:	08011da5 	.word	0x08011da5
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d82:	e1b6      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d84:	2304      	movs	r3, #4
 8011d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d8a:	e1b2      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d8c:	2308      	movs	r3, #8
 8011d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d92:	e1ae      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d94:	2310      	movs	r3, #16
 8011d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011d9a:	e1aa      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011d9c:	2320      	movs	r3, #32
 8011d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011da2:	e1a6      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011da4:	2340      	movs	r3, #64	@ 0x40
 8011da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011daa:	e1a2      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011dac:	2380      	movs	r3, #128	@ 0x80
 8011dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011db2:	e19e      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	4a35      	ldr	r2, [pc, #212]	@ (8011e90 <UART_SetConfig+0x344>)
 8011dba:	4293      	cmp	r3, r2
 8011dbc:	d130      	bne.n	8011e20 <UART_SetConfig+0x2d4>
 8011dbe:	4b31      	ldr	r3, [pc, #196]	@ (8011e84 <UART_SetConfig+0x338>)
 8011dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011dc2:	f003 0307 	and.w	r3, r3, #7
 8011dc6:	2b05      	cmp	r3, #5
 8011dc8:	d826      	bhi.n	8011e18 <UART_SetConfig+0x2cc>
 8011dca:	a201      	add	r2, pc, #4	@ (adr r2, 8011dd0 <UART_SetConfig+0x284>)
 8011dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd0:	08011de9 	.word	0x08011de9
 8011dd4:	08011df1 	.word	0x08011df1
 8011dd8:	08011df9 	.word	0x08011df9
 8011ddc:	08011e01 	.word	0x08011e01
 8011de0:	08011e09 	.word	0x08011e09
 8011de4:	08011e11 	.word	0x08011e11
 8011de8:	2300      	movs	r3, #0
 8011dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dee:	e180      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011df0:	2304      	movs	r3, #4
 8011df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011df6:	e17c      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011df8:	2308      	movs	r3, #8
 8011dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011dfe:	e178      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e00:	2310      	movs	r3, #16
 8011e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e06:	e174      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e08:	2320      	movs	r3, #32
 8011e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e0e:	e170      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e10:	2340      	movs	r3, #64	@ 0x40
 8011e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e16:	e16c      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e18:	2380      	movs	r3, #128	@ 0x80
 8011e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e1e:	e168      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	4a1b      	ldr	r2, [pc, #108]	@ (8011e94 <UART_SetConfig+0x348>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d142      	bne.n	8011eb0 <UART_SetConfig+0x364>
 8011e2a:	4b16      	ldr	r3, [pc, #88]	@ (8011e84 <UART_SetConfig+0x338>)
 8011e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011e2e:	f003 0307 	and.w	r3, r3, #7
 8011e32:	2b05      	cmp	r3, #5
 8011e34:	d838      	bhi.n	8011ea8 <UART_SetConfig+0x35c>
 8011e36:	a201      	add	r2, pc, #4	@ (adr r2, 8011e3c <UART_SetConfig+0x2f0>)
 8011e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e3c:	08011e55 	.word	0x08011e55
 8011e40:	08011e5d 	.word	0x08011e5d
 8011e44:	08011e65 	.word	0x08011e65
 8011e48:	08011e6d 	.word	0x08011e6d
 8011e4c:	08011e99 	.word	0x08011e99
 8011e50:	08011ea1 	.word	0x08011ea1
 8011e54:	2300      	movs	r3, #0
 8011e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e5a:	e14a      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e5c:	2304      	movs	r3, #4
 8011e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e62:	e146      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e64:	2308      	movs	r3, #8
 8011e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e6a:	e142      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e6c:	2310      	movs	r3, #16
 8011e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e72:	e13e      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011e74:	cfff69f3 	.word	0xcfff69f3
 8011e78:	58000c00 	.word	0x58000c00
 8011e7c:	11fff4ff 	.word	0x11fff4ff
 8011e80:	40011000 	.word	0x40011000
 8011e84:	58024400 	.word	0x58024400
 8011e88:	40004400 	.word	0x40004400
 8011e8c:	40004800 	.word	0x40004800
 8011e90:	40004c00 	.word	0x40004c00
 8011e94:	40005000 	.word	0x40005000
 8011e98:	2320      	movs	r3, #32
 8011e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011e9e:	e128      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011ea0:	2340      	movs	r3, #64	@ 0x40
 8011ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ea6:	e124      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011ea8:	2380      	movs	r3, #128	@ 0x80
 8011eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011eae:	e120      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	4acb      	ldr	r2, [pc, #812]	@ (80121e4 <UART_SetConfig+0x698>)
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	d176      	bne.n	8011fa8 <UART_SetConfig+0x45c>
 8011eba:	4bcb      	ldr	r3, [pc, #812]	@ (80121e8 <UART_SetConfig+0x69c>)
 8011ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011ec2:	2b28      	cmp	r3, #40	@ 0x28
 8011ec4:	d86c      	bhi.n	8011fa0 <UART_SetConfig+0x454>
 8011ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8011ecc <UART_SetConfig+0x380>)
 8011ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ecc:	08011f71 	.word	0x08011f71
 8011ed0:	08011fa1 	.word	0x08011fa1
 8011ed4:	08011fa1 	.word	0x08011fa1
 8011ed8:	08011fa1 	.word	0x08011fa1
 8011edc:	08011fa1 	.word	0x08011fa1
 8011ee0:	08011fa1 	.word	0x08011fa1
 8011ee4:	08011fa1 	.word	0x08011fa1
 8011ee8:	08011fa1 	.word	0x08011fa1
 8011eec:	08011f79 	.word	0x08011f79
 8011ef0:	08011fa1 	.word	0x08011fa1
 8011ef4:	08011fa1 	.word	0x08011fa1
 8011ef8:	08011fa1 	.word	0x08011fa1
 8011efc:	08011fa1 	.word	0x08011fa1
 8011f00:	08011fa1 	.word	0x08011fa1
 8011f04:	08011fa1 	.word	0x08011fa1
 8011f08:	08011fa1 	.word	0x08011fa1
 8011f0c:	08011f81 	.word	0x08011f81
 8011f10:	08011fa1 	.word	0x08011fa1
 8011f14:	08011fa1 	.word	0x08011fa1
 8011f18:	08011fa1 	.word	0x08011fa1
 8011f1c:	08011fa1 	.word	0x08011fa1
 8011f20:	08011fa1 	.word	0x08011fa1
 8011f24:	08011fa1 	.word	0x08011fa1
 8011f28:	08011fa1 	.word	0x08011fa1
 8011f2c:	08011f89 	.word	0x08011f89
 8011f30:	08011fa1 	.word	0x08011fa1
 8011f34:	08011fa1 	.word	0x08011fa1
 8011f38:	08011fa1 	.word	0x08011fa1
 8011f3c:	08011fa1 	.word	0x08011fa1
 8011f40:	08011fa1 	.word	0x08011fa1
 8011f44:	08011fa1 	.word	0x08011fa1
 8011f48:	08011fa1 	.word	0x08011fa1
 8011f4c:	08011f91 	.word	0x08011f91
 8011f50:	08011fa1 	.word	0x08011fa1
 8011f54:	08011fa1 	.word	0x08011fa1
 8011f58:	08011fa1 	.word	0x08011fa1
 8011f5c:	08011fa1 	.word	0x08011fa1
 8011f60:	08011fa1 	.word	0x08011fa1
 8011f64:	08011fa1 	.word	0x08011fa1
 8011f68:	08011fa1 	.word	0x08011fa1
 8011f6c:	08011f99 	.word	0x08011f99
 8011f70:	2301      	movs	r3, #1
 8011f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f76:	e0bc      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011f78:	2304      	movs	r3, #4
 8011f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f7e:	e0b8      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011f80:	2308      	movs	r3, #8
 8011f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f86:	e0b4      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011f88:	2310      	movs	r3, #16
 8011f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f8e:	e0b0      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011f90:	2320      	movs	r3, #32
 8011f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f96:	e0ac      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011f98:	2340      	movs	r3, #64	@ 0x40
 8011f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f9e:	e0a8      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011fa0:	2380      	movs	r3, #128	@ 0x80
 8011fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fa6:	e0a4      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	4a8f      	ldr	r2, [pc, #572]	@ (80121ec <UART_SetConfig+0x6a0>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d130      	bne.n	8012014 <UART_SetConfig+0x4c8>
 8011fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80121e8 <UART_SetConfig+0x69c>)
 8011fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011fb6:	f003 0307 	and.w	r3, r3, #7
 8011fba:	2b05      	cmp	r3, #5
 8011fbc:	d826      	bhi.n	801200c <UART_SetConfig+0x4c0>
 8011fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8011fc4 <UART_SetConfig+0x478>)
 8011fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fc4:	08011fdd 	.word	0x08011fdd
 8011fc8:	08011fe5 	.word	0x08011fe5
 8011fcc:	08011fed 	.word	0x08011fed
 8011fd0:	08011ff5 	.word	0x08011ff5
 8011fd4:	08011ffd 	.word	0x08011ffd
 8011fd8:	08012005 	.word	0x08012005
 8011fdc:	2300      	movs	r3, #0
 8011fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fe2:	e086      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011fe4:	2304      	movs	r3, #4
 8011fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fea:	e082      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011fec:	2308      	movs	r3, #8
 8011fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ff2:	e07e      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011ff4:	2310      	movs	r3, #16
 8011ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011ffa:	e07a      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8011ffc:	2320      	movs	r3, #32
 8011ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012002:	e076      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012004:	2340      	movs	r3, #64	@ 0x40
 8012006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801200a:	e072      	b.n	80120f2 <UART_SetConfig+0x5a6>
 801200c:	2380      	movs	r3, #128	@ 0x80
 801200e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012012:	e06e      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	4a75      	ldr	r2, [pc, #468]	@ (80121f0 <UART_SetConfig+0x6a4>)
 801201a:	4293      	cmp	r3, r2
 801201c:	d130      	bne.n	8012080 <UART_SetConfig+0x534>
 801201e:	4b72      	ldr	r3, [pc, #456]	@ (80121e8 <UART_SetConfig+0x69c>)
 8012020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012022:	f003 0307 	and.w	r3, r3, #7
 8012026:	2b05      	cmp	r3, #5
 8012028:	d826      	bhi.n	8012078 <UART_SetConfig+0x52c>
 801202a:	a201      	add	r2, pc, #4	@ (adr r2, 8012030 <UART_SetConfig+0x4e4>)
 801202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012030:	08012049 	.word	0x08012049
 8012034:	08012051 	.word	0x08012051
 8012038:	08012059 	.word	0x08012059
 801203c:	08012061 	.word	0x08012061
 8012040:	08012069 	.word	0x08012069
 8012044:	08012071 	.word	0x08012071
 8012048:	2300      	movs	r3, #0
 801204a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801204e:	e050      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012050:	2304      	movs	r3, #4
 8012052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012056:	e04c      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012058:	2308      	movs	r3, #8
 801205a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801205e:	e048      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012060:	2310      	movs	r3, #16
 8012062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012066:	e044      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012068:	2320      	movs	r3, #32
 801206a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801206e:	e040      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012070:	2340      	movs	r3, #64	@ 0x40
 8012072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012076:	e03c      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012078:	2380      	movs	r3, #128	@ 0x80
 801207a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801207e:	e038      	b.n	80120f2 <UART_SetConfig+0x5a6>
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	4a5b      	ldr	r2, [pc, #364]	@ (80121f4 <UART_SetConfig+0x6a8>)
 8012086:	4293      	cmp	r3, r2
 8012088:	d130      	bne.n	80120ec <UART_SetConfig+0x5a0>
 801208a:	4b57      	ldr	r3, [pc, #348]	@ (80121e8 <UART_SetConfig+0x69c>)
 801208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801208e:	f003 0307 	and.w	r3, r3, #7
 8012092:	2b05      	cmp	r3, #5
 8012094:	d826      	bhi.n	80120e4 <UART_SetConfig+0x598>
 8012096:	a201      	add	r2, pc, #4	@ (adr r2, 801209c <UART_SetConfig+0x550>)
 8012098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801209c:	080120b5 	.word	0x080120b5
 80120a0:	080120bd 	.word	0x080120bd
 80120a4:	080120c5 	.word	0x080120c5
 80120a8:	080120cd 	.word	0x080120cd
 80120ac:	080120d5 	.word	0x080120d5
 80120b0:	080120dd 	.word	0x080120dd
 80120b4:	2302      	movs	r3, #2
 80120b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120ba:	e01a      	b.n	80120f2 <UART_SetConfig+0x5a6>
 80120bc:	2304      	movs	r3, #4
 80120be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120c2:	e016      	b.n	80120f2 <UART_SetConfig+0x5a6>
 80120c4:	2308      	movs	r3, #8
 80120c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120ca:	e012      	b.n	80120f2 <UART_SetConfig+0x5a6>
 80120cc:	2310      	movs	r3, #16
 80120ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120d2:	e00e      	b.n	80120f2 <UART_SetConfig+0x5a6>
 80120d4:	2320      	movs	r3, #32
 80120d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120da:	e00a      	b.n	80120f2 <UART_SetConfig+0x5a6>
 80120dc:	2340      	movs	r3, #64	@ 0x40
 80120de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120e2:	e006      	b.n	80120f2 <UART_SetConfig+0x5a6>
 80120e4:	2380      	movs	r3, #128	@ 0x80
 80120e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120ea:	e002      	b.n	80120f2 <UART_SetConfig+0x5a6>
 80120ec:	2380      	movs	r3, #128	@ 0x80
 80120ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4a3f      	ldr	r2, [pc, #252]	@ (80121f4 <UART_SetConfig+0x6a8>)
 80120f8:	4293      	cmp	r3, r2
 80120fa:	f040 80f8 	bne.w	80122ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80120fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012102:	2b20      	cmp	r3, #32
 8012104:	dc46      	bgt.n	8012194 <UART_SetConfig+0x648>
 8012106:	2b02      	cmp	r3, #2
 8012108:	f2c0 8082 	blt.w	8012210 <UART_SetConfig+0x6c4>
 801210c:	3b02      	subs	r3, #2
 801210e:	2b1e      	cmp	r3, #30
 8012110:	d87e      	bhi.n	8012210 <UART_SetConfig+0x6c4>
 8012112:	a201      	add	r2, pc, #4	@ (adr r2, 8012118 <UART_SetConfig+0x5cc>)
 8012114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012118:	0801219b 	.word	0x0801219b
 801211c:	08012211 	.word	0x08012211
 8012120:	080121a3 	.word	0x080121a3
 8012124:	08012211 	.word	0x08012211
 8012128:	08012211 	.word	0x08012211
 801212c:	08012211 	.word	0x08012211
 8012130:	080121b3 	.word	0x080121b3
 8012134:	08012211 	.word	0x08012211
 8012138:	08012211 	.word	0x08012211
 801213c:	08012211 	.word	0x08012211
 8012140:	08012211 	.word	0x08012211
 8012144:	08012211 	.word	0x08012211
 8012148:	08012211 	.word	0x08012211
 801214c:	08012211 	.word	0x08012211
 8012150:	080121c3 	.word	0x080121c3
 8012154:	08012211 	.word	0x08012211
 8012158:	08012211 	.word	0x08012211
 801215c:	08012211 	.word	0x08012211
 8012160:	08012211 	.word	0x08012211
 8012164:	08012211 	.word	0x08012211
 8012168:	08012211 	.word	0x08012211
 801216c:	08012211 	.word	0x08012211
 8012170:	08012211 	.word	0x08012211
 8012174:	08012211 	.word	0x08012211
 8012178:	08012211 	.word	0x08012211
 801217c:	08012211 	.word	0x08012211
 8012180:	08012211 	.word	0x08012211
 8012184:	08012211 	.word	0x08012211
 8012188:	08012211 	.word	0x08012211
 801218c:	08012211 	.word	0x08012211
 8012190:	08012203 	.word	0x08012203
 8012194:	2b40      	cmp	r3, #64	@ 0x40
 8012196:	d037      	beq.n	8012208 <UART_SetConfig+0x6bc>
 8012198:	e03a      	b.n	8012210 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801219a:	f7fd fae3 	bl	800f764 <HAL_RCCEx_GetD3PCLK1Freq>
 801219e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80121a0:	e03c      	b.n	801221c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80121a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fd faf2 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80121ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121b0:	e034      	b.n	801221c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80121b2:	f107 0318 	add.w	r3, r7, #24
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fd fc3e 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121c0:	e02c      	b.n	801221c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121c2:	4b09      	ldr	r3, [pc, #36]	@ (80121e8 <UART_SetConfig+0x69c>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f003 0320 	and.w	r3, r3, #32
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d016      	beq.n	80121fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80121ce:	4b06      	ldr	r3, [pc, #24]	@ (80121e8 <UART_SetConfig+0x69c>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	08db      	lsrs	r3, r3, #3
 80121d4:	f003 0303 	and.w	r3, r3, #3
 80121d8:	4a07      	ldr	r2, [pc, #28]	@ (80121f8 <UART_SetConfig+0x6ac>)
 80121da:	fa22 f303 	lsr.w	r3, r2, r3
 80121de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80121e0:	e01c      	b.n	801221c <UART_SetConfig+0x6d0>
 80121e2:	bf00      	nop
 80121e4:	40011400 	.word	0x40011400
 80121e8:	58024400 	.word	0x58024400
 80121ec:	40007800 	.word	0x40007800
 80121f0:	40007c00 	.word	0x40007c00
 80121f4:	58000c00 	.word	0x58000c00
 80121f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80121fc:	4b9d      	ldr	r3, [pc, #628]	@ (8012474 <UART_SetConfig+0x928>)
 80121fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012200:	e00c      	b.n	801221c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012202:	4b9d      	ldr	r3, [pc, #628]	@ (8012478 <UART_SetConfig+0x92c>)
 8012204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012206:	e009      	b.n	801221c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801220c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801220e:	e005      	b.n	801221c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8012210:	2300      	movs	r3, #0
 8012212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012214:	2301      	movs	r3, #1
 8012216:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801221a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801221c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801221e:	2b00      	cmp	r3, #0
 8012220:	f000 81de 	beq.w	80125e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012228:	4a94      	ldr	r2, [pc, #592]	@ (801247c <UART_SetConfig+0x930>)
 801222a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801222e:	461a      	mov	r2, r3
 8012230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012232:	fbb3 f3f2 	udiv	r3, r3, r2
 8012236:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	685a      	ldr	r2, [r3, #4]
 801223c:	4613      	mov	r3, r2
 801223e:	005b      	lsls	r3, r3, #1
 8012240:	4413      	add	r3, r2
 8012242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012244:	429a      	cmp	r2, r3
 8012246:	d305      	bcc.n	8012254 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801224e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012250:	429a      	cmp	r2, r3
 8012252:	d903      	bls.n	801225c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8012254:	2301      	movs	r3, #1
 8012256:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801225a:	e1c1      	b.n	80125e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801225c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801225e:	2200      	movs	r2, #0
 8012260:	60bb      	str	r3, [r7, #8]
 8012262:	60fa      	str	r2, [r7, #12]
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012268:	4a84      	ldr	r2, [pc, #528]	@ (801247c <UART_SetConfig+0x930>)
 801226a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801226e:	b29b      	uxth	r3, r3
 8012270:	2200      	movs	r2, #0
 8012272:	603b      	str	r3, [r7, #0]
 8012274:	607a      	str	r2, [r7, #4]
 8012276:	e9d7 2300 	ldrd	r2, r3, [r7]
 801227a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801227e:	f7ee f887 	bl	8000390 <__aeabi_uldivmod>
 8012282:	4602      	mov	r2, r0
 8012284:	460b      	mov	r3, r1
 8012286:	4610      	mov	r0, r2
 8012288:	4619      	mov	r1, r3
 801228a:	f04f 0200 	mov.w	r2, #0
 801228e:	f04f 0300 	mov.w	r3, #0
 8012292:	020b      	lsls	r3, r1, #8
 8012294:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012298:	0202      	lsls	r2, r0, #8
 801229a:	6979      	ldr	r1, [r7, #20]
 801229c:	6849      	ldr	r1, [r1, #4]
 801229e:	0849      	lsrs	r1, r1, #1
 80122a0:	2000      	movs	r0, #0
 80122a2:	460c      	mov	r4, r1
 80122a4:	4605      	mov	r5, r0
 80122a6:	eb12 0804 	adds.w	r8, r2, r4
 80122aa:	eb43 0905 	adc.w	r9, r3, r5
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	2200      	movs	r2, #0
 80122b4:	469a      	mov	sl, r3
 80122b6:	4693      	mov	fp, r2
 80122b8:	4652      	mov	r2, sl
 80122ba:	465b      	mov	r3, fp
 80122bc:	4640      	mov	r0, r8
 80122be:	4649      	mov	r1, r9
 80122c0:	f7ee f866 	bl	8000390 <__aeabi_uldivmod>
 80122c4:	4602      	mov	r2, r0
 80122c6:	460b      	mov	r3, r1
 80122c8:	4613      	mov	r3, r2
 80122ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80122cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80122d2:	d308      	bcc.n	80122e6 <UART_SetConfig+0x79a>
 80122d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80122da:	d204      	bcs.n	80122e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80122e2:	60da      	str	r2, [r3, #12]
 80122e4:	e17c      	b.n	80125e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80122e6:	2301      	movs	r3, #1
 80122e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80122ec:	e178      	b.n	80125e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	69db      	ldr	r3, [r3, #28]
 80122f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80122f6:	f040 80c5 	bne.w	8012484 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80122fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80122fe:	2b20      	cmp	r3, #32
 8012300:	dc48      	bgt.n	8012394 <UART_SetConfig+0x848>
 8012302:	2b00      	cmp	r3, #0
 8012304:	db7b      	blt.n	80123fe <UART_SetConfig+0x8b2>
 8012306:	2b20      	cmp	r3, #32
 8012308:	d879      	bhi.n	80123fe <UART_SetConfig+0x8b2>
 801230a:	a201      	add	r2, pc, #4	@ (adr r2, 8012310 <UART_SetConfig+0x7c4>)
 801230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012310:	0801239b 	.word	0x0801239b
 8012314:	080123a3 	.word	0x080123a3
 8012318:	080123ff 	.word	0x080123ff
 801231c:	080123ff 	.word	0x080123ff
 8012320:	080123ab 	.word	0x080123ab
 8012324:	080123ff 	.word	0x080123ff
 8012328:	080123ff 	.word	0x080123ff
 801232c:	080123ff 	.word	0x080123ff
 8012330:	080123bb 	.word	0x080123bb
 8012334:	080123ff 	.word	0x080123ff
 8012338:	080123ff 	.word	0x080123ff
 801233c:	080123ff 	.word	0x080123ff
 8012340:	080123ff 	.word	0x080123ff
 8012344:	080123ff 	.word	0x080123ff
 8012348:	080123ff 	.word	0x080123ff
 801234c:	080123ff 	.word	0x080123ff
 8012350:	080123cb 	.word	0x080123cb
 8012354:	080123ff 	.word	0x080123ff
 8012358:	080123ff 	.word	0x080123ff
 801235c:	080123ff 	.word	0x080123ff
 8012360:	080123ff 	.word	0x080123ff
 8012364:	080123ff 	.word	0x080123ff
 8012368:	080123ff 	.word	0x080123ff
 801236c:	080123ff 	.word	0x080123ff
 8012370:	080123ff 	.word	0x080123ff
 8012374:	080123ff 	.word	0x080123ff
 8012378:	080123ff 	.word	0x080123ff
 801237c:	080123ff 	.word	0x080123ff
 8012380:	080123ff 	.word	0x080123ff
 8012384:	080123ff 	.word	0x080123ff
 8012388:	080123ff 	.word	0x080123ff
 801238c:	080123ff 	.word	0x080123ff
 8012390:	080123f1 	.word	0x080123f1
 8012394:	2b40      	cmp	r3, #64	@ 0x40
 8012396:	d02e      	beq.n	80123f6 <UART_SetConfig+0x8aa>
 8012398:	e031      	b.n	80123fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801239a:	f7fb fa2d 	bl	800d7f8 <HAL_RCC_GetPCLK1Freq>
 801239e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80123a0:	e033      	b.n	801240a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80123a2:	f7fb fa3f 	bl	800d824 <HAL_RCC_GetPCLK2Freq>
 80123a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80123a8:	e02f      	b.n	801240a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80123aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fd f9ee 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80123b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123b8:	e027      	b.n	801240a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80123ba:	f107 0318 	add.w	r3, r7, #24
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fd fb3a 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123c8:	e01f      	b.n	801240a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80123ca:	4b2d      	ldr	r3, [pc, #180]	@ (8012480 <UART_SetConfig+0x934>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f003 0320 	and.w	r3, r3, #32
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d009      	beq.n	80123ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80123d6:	4b2a      	ldr	r3, [pc, #168]	@ (8012480 <UART_SetConfig+0x934>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	08db      	lsrs	r3, r3, #3
 80123dc:	f003 0303 	and.w	r3, r3, #3
 80123e0:	4a24      	ldr	r2, [pc, #144]	@ (8012474 <UART_SetConfig+0x928>)
 80123e2:	fa22 f303 	lsr.w	r3, r2, r3
 80123e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80123e8:	e00f      	b.n	801240a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80123ea:	4b22      	ldr	r3, [pc, #136]	@ (8012474 <UART_SetConfig+0x928>)
 80123ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123ee:	e00c      	b.n	801240a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80123f0:	4b21      	ldr	r3, [pc, #132]	@ (8012478 <UART_SetConfig+0x92c>)
 80123f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123f4:	e009      	b.n	801240a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80123f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80123fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123fc:	e005      	b.n	801240a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80123fe:	2300      	movs	r3, #0
 8012400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012402:	2301      	movs	r3, #1
 8012404:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801240a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801240c:	2b00      	cmp	r3, #0
 801240e:	f000 80e7 	beq.w	80125e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012416:	4a19      	ldr	r2, [pc, #100]	@ (801247c <UART_SetConfig+0x930>)
 8012418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801241c:	461a      	mov	r2, r3
 801241e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012420:	fbb3 f3f2 	udiv	r3, r3, r2
 8012424:	005a      	lsls	r2, r3, #1
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	085b      	lsrs	r3, r3, #1
 801242c:	441a      	add	r2, r3
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	fbb2 f3f3 	udiv	r3, r2, r3
 8012436:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801243a:	2b0f      	cmp	r3, #15
 801243c:	d916      	bls.n	801246c <UART_SetConfig+0x920>
 801243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012444:	d212      	bcs.n	801246c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012448:	b29b      	uxth	r3, r3
 801244a:	f023 030f 	bic.w	r3, r3, #15
 801244e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012452:	085b      	lsrs	r3, r3, #1
 8012454:	b29b      	uxth	r3, r3
 8012456:	f003 0307 	and.w	r3, r3, #7
 801245a:	b29a      	uxth	r2, r3
 801245c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801245e:	4313      	orrs	r3, r2
 8012460:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012468:	60da      	str	r2, [r3, #12]
 801246a:	e0b9      	b.n	80125e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801246c:	2301      	movs	r3, #1
 801246e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012472:	e0b5      	b.n	80125e0 <UART_SetConfig+0xa94>
 8012474:	03d09000 	.word	0x03d09000
 8012478:	003d0900 	.word	0x003d0900
 801247c:	08017db8 	.word	0x08017db8
 8012480:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8012484:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012488:	2b20      	cmp	r3, #32
 801248a:	dc49      	bgt.n	8012520 <UART_SetConfig+0x9d4>
 801248c:	2b00      	cmp	r3, #0
 801248e:	db7c      	blt.n	801258a <UART_SetConfig+0xa3e>
 8012490:	2b20      	cmp	r3, #32
 8012492:	d87a      	bhi.n	801258a <UART_SetConfig+0xa3e>
 8012494:	a201      	add	r2, pc, #4	@ (adr r2, 801249c <UART_SetConfig+0x950>)
 8012496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801249a:	bf00      	nop
 801249c:	08012527 	.word	0x08012527
 80124a0:	0801252f 	.word	0x0801252f
 80124a4:	0801258b 	.word	0x0801258b
 80124a8:	0801258b 	.word	0x0801258b
 80124ac:	08012537 	.word	0x08012537
 80124b0:	0801258b 	.word	0x0801258b
 80124b4:	0801258b 	.word	0x0801258b
 80124b8:	0801258b 	.word	0x0801258b
 80124bc:	08012547 	.word	0x08012547
 80124c0:	0801258b 	.word	0x0801258b
 80124c4:	0801258b 	.word	0x0801258b
 80124c8:	0801258b 	.word	0x0801258b
 80124cc:	0801258b 	.word	0x0801258b
 80124d0:	0801258b 	.word	0x0801258b
 80124d4:	0801258b 	.word	0x0801258b
 80124d8:	0801258b 	.word	0x0801258b
 80124dc:	08012557 	.word	0x08012557
 80124e0:	0801258b 	.word	0x0801258b
 80124e4:	0801258b 	.word	0x0801258b
 80124e8:	0801258b 	.word	0x0801258b
 80124ec:	0801258b 	.word	0x0801258b
 80124f0:	0801258b 	.word	0x0801258b
 80124f4:	0801258b 	.word	0x0801258b
 80124f8:	0801258b 	.word	0x0801258b
 80124fc:	0801258b 	.word	0x0801258b
 8012500:	0801258b 	.word	0x0801258b
 8012504:	0801258b 	.word	0x0801258b
 8012508:	0801258b 	.word	0x0801258b
 801250c:	0801258b 	.word	0x0801258b
 8012510:	0801258b 	.word	0x0801258b
 8012514:	0801258b 	.word	0x0801258b
 8012518:	0801258b 	.word	0x0801258b
 801251c:	0801257d 	.word	0x0801257d
 8012520:	2b40      	cmp	r3, #64	@ 0x40
 8012522:	d02e      	beq.n	8012582 <UART_SetConfig+0xa36>
 8012524:	e031      	b.n	801258a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012526:	f7fb f967 	bl	800d7f8 <HAL_RCC_GetPCLK1Freq>
 801252a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801252c:	e033      	b.n	8012596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801252e:	f7fb f979 	bl	800d824 <HAL_RCC_GetPCLK2Freq>
 8012532:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012534:	e02f      	b.n	8012596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801253a:	4618      	mov	r0, r3
 801253c:	f7fd f928 	bl	800f790 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012544:	e027      	b.n	8012596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012546:	f107 0318 	add.w	r3, r7, #24
 801254a:	4618      	mov	r0, r3
 801254c:	f7fd fa74 	bl	800fa38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012554:	e01f      	b.n	8012596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012556:	4b2d      	ldr	r3, [pc, #180]	@ (801260c <UART_SetConfig+0xac0>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f003 0320 	and.w	r3, r3, #32
 801255e:	2b00      	cmp	r3, #0
 8012560:	d009      	beq.n	8012576 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012562:	4b2a      	ldr	r3, [pc, #168]	@ (801260c <UART_SetConfig+0xac0>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	08db      	lsrs	r3, r3, #3
 8012568:	f003 0303 	and.w	r3, r3, #3
 801256c:	4a28      	ldr	r2, [pc, #160]	@ (8012610 <UART_SetConfig+0xac4>)
 801256e:	fa22 f303 	lsr.w	r3, r2, r3
 8012572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012574:	e00f      	b.n	8012596 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8012576:	4b26      	ldr	r3, [pc, #152]	@ (8012610 <UART_SetConfig+0xac4>)
 8012578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801257a:	e00c      	b.n	8012596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801257c:	4b25      	ldr	r3, [pc, #148]	@ (8012614 <UART_SetConfig+0xac8>)
 801257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012580:	e009      	b.n	8012596 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012588:	e005      	b.n	8012596 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801258a:	2300      	movs	r3, #0
 801258c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801258e:	2301      	movs	r3, #1
 8012590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012594:	bf00      	nop
    }

    if (pclk != 0U)
 8012596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012598:	2b00      	cmp	r3, #0
 801259a:	d021      	beq.n	80125e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125a0:	4a1d      	ldr	r2, [pc, #116]	@ (8012618 <UART_SetConfig+0xacc>)
 80125a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125a6:	461a      	mov	r2, r3
 80125a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	085b      	lsrs	r3, r3, #1
 80125b4:	441a      	add	r2, r3
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80125be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80125c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c2:	2b0f      	cmp	r3, #15
 80125c4:	d909      	bls.n	80125da <UART_SetConfig+0xa8e>
 80125c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80125cc:	d205      	bcs.n	80125da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80125ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	60da      	str	r2, [r3, #12]
 80125d8:	e002      	b.n	80125e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80125da:	2301      	movs	r3, #1
 80125dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	2201      	movs	r2, #1
 80125e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	2201      	movs	r2, #1
 80125ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	2200      	movs	r2, #0
 80125f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	2200      	movs	r2, #0
 80125fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80125fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8012600:	4618      	mov	r0, r3
 8012602:	3748      	adds	r7, #72	@ 0x48
 8012604:	46bd      	mov	sp, r7
 8012606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801260a:	bf00      	nop
 801260c:	58024400 	.word	0x58024400
 8012610:	03d09000 	.word	0x03d09000
 8012614:	003d0900 	.word	0x003d0900
 8012618:	08017db8 	.word	0x08017db8

0801261c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012628:	f003 0308 	and.w	r3, r3, #8
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00a      	beq.n	8012646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	430a      	orrs	r2, r1
 8012644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801264a:	f003 0301 	and.w	r3, r3, #1
 801264e:	2b00      	cmp	r3, #0
 8012650:	d00a      	beq.n	8012668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	430a      	orrs	r2, r1
 8012666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801266c:	f003 0302 	and.w	r3, r3, #2
 8012670:	2b00      	cmp	r3, #0
 8012672:	d00a      	beq.n	801268a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	430a      	orrs	r2, r1
 8012688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801268e:	f003 0304 	and.w	r3, r3, #4
 8012692:	2b00      	cmp	r3, #0
 8012694:	d00a      	beq.n	80126ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	430a      	orrs	r2, r1
 80126aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126b0:	f003 0310 	and.w	r3, r3, #16
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00a      	beq.n	80126ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	430a      	orrs	r2, r1
 80126cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126d2:	f003 0320 	and.w	r3, r3, #32
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00a      	beq.n	80126f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	689b      	ldr	r3, [r3, #8]
 80126e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	430a      	orrs	r2, r1
 80126ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d01a      	beq.n	8012732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	685b      	ldr	r3, [r3, #4]
 8012702:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	430a      	orrs	r2, r1
 8012710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801271a:	d10a      	bne.n	8012732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	430a      	orrs	r2, r1
 8012730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801273a:	2b00      	cmp	r3, #0
 801273c:	d00a      	beq.n	8012754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	430a      	orrs	r2, r1
 8012752:	605a      	str	r2, [r3, #4]
  }
}
 8012754:	bf00      	nop
 8012756:	370c      	adds	r7, #12
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr

08012760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b098      	sub	sp, #96	@ 0x60
 8012764:	af02      	add	r7, sp, #8
 8012766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012770:	f7ef fd9c 	bl	80022ac <HAL_GetTick>
 8012774:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f003 0308 	and.w	r3, r3, #8
 8012780:	2b08      	cmp	r3, #8
 8012782:	d12f      	bne.n	80127e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801278c:	2200      	movs	r2, #0
 801278e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f000 f88e 	bl	80128b4 <UART_WaitOnFlagUntilTimeout>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d022      	beq.n	80127e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127a6:	e853 3f00 	ldrex	r3, [r3]
 80127aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80127ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80127b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	461a      	mov	r2, r3
 80127ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80127be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80127c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80127c4:	e841 2300 	strex	r3, r2, [r1]
 80127c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80127ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1e6      	bne.n	801279e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2220      	movs	r2, #32
 80127d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2200      	movs	r2, #0
 80127dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80127e0:	2303      	movs	r3, #3
 80127e2:	e063      	b.n	80128ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f003 0304 	and.w	r3, r3, #4
 80127ee:	2b04      	cmp	r3, #4
 80127f0:	d149      	bne.n	8012886 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80127f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80127f6:	9300      	str	r3, [sp, #0]
 80127f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127fa:	2200      	movs	r2, #0
 80127fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 f857 	bl	80128b4 <UART_WaitOnFlagUntilTimeout>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d03c      	beq.n	8012886 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012814:	e853 3f00 	ldrex	r3, [r3]
 8012818:	623b      	str	r3, [r7, #32]
   return(result);
 801281a:	6a3b      	ldr	r3, [r7, #32]
 801281c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012820:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	461a      	mov	r2, r3
 8012828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801282a:	633b      	str	r3, [r7, #48]	@ 0x30
 801282c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801282e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012832:	e841 2300 	strex	r3, r2, [r1]
 8012836:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1e6      	bne.n	801280c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	3308      	adds	r3, #8
 8012844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	e853 3f00 	ldrex	r3, [r3]
 801284c:	60fb      	str	r3, [r7, #12]
   return(result);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	f023 0301 	bic.w	r3, r3, #1
 8012854:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	3308      	adds	r3, #8
 801285c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801285e:	61fa      	str	r2, [r7, #28]
 8012860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012862:	69b9      	ldr	r1, [r7, #24]
 8012864:	69fa      	ldr	r2, [r7, #28]
 8012866:	e841 2300 	strex	r3, r2, [r1]
 801286a:	617b      	str	r3, [r7, #20]
   return(result);
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1e5      	bne.n	801283e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2220      	movs	r2, #32
 8012876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2200      	movs	r2, #0
 801287e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012882:	2303      	movs	r3, #3
 8012884:	e012      	b.n	80128ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2220      	movs	r2, #32
 801288a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2220      	movs	r2, #32
 8012892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2200      	movs	r2, #0
 801289a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2200      	movs	r2, #0
 80128a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2200      	movs	r2, #0
 80128a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80128aa:	2300      	movs	r3, #0
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	3758      	adds	r7, #88	@ 0x58
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b084      	sub	sp, #16
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	60b9      	str	r1, [r7, #8]
 80128be:	603b      	str	r3, [r7, #0]
 80128c0:	4613      	mov	r3, r2
 80128c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80128c4:	e04f      	b.n	8012966 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128cc:	d04b      	beq.n	8012966 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80128ce:	f7ef fced 	bl	80022ac <HAL_GetTick>
 80128d2:	4602      	mov	r2, r0
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	1ad3      	subs	r3, r2, r3
 80128d8:	69ba      	ldr	r2, [r7, #24]
 80128da:	429a      	cmp	r2, r3
 80128dc:	d302      	bcc.n	80128e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d101      	bne.n	80128e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80128e4:	2303      	movs	r3, #3
 80128e6:	e04e      	b.n	8012986 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f003 0304 	and.w	r3, r3, #4
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d037      	beq.n	8012966 <UART_WaitOnFlagUntilTimeout+0xb2>
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	2b80      	cmp	r3, #128	@ 0x80
 80128fa:	d034      	beq.n	8012966 <UART_WaitOnFlagUntilTimeout+0xb2>
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	2b40      	cmp	r3, #64	@ 0x40
 8012900:	d031      	beq.n	8012966 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	69db      	ldr	r3, [r3, #28]
 8012908:	f003 0308 	and.w	r3, r3, #8
 801290c:	2b08      	cmp	r3, #8
 801290e:	d110      	bne.n	8012932 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2208      	movs	r2, #8
 8012916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f000 f839 	bl	8012990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2208      	movs	r2, #8
 8012922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2200      	movs	r2, #0
 801292a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801292e:	2301      	movs	r3, #1
 8012930:	e029      	b.n	8012986 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	69db      	ldr	r3, [r3, #28]
 8012938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801293c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012940:	d111      	bne.n	8012966 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801294a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	f000 f81f 	bl	8012990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	2220      	movs	r2, #32
 8012956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2200      	movs	r2, #0
 801295e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8012962:	2303      	movs	r3, #3
 8012964:	e00f      	b.n	8012986 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	69da      	ldr	r2, [r3, #28]
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	4013      	ands	r3, r2
 8012970:	68ba      	ldr	r2, [r7, #8]
 8012972:	429a      	cmp	r2, r3
 8012974:	bf0c      	ite	eq
 8012976:	2301      	moveq	r3, #1
 8012978:	2300      	movne	r3, #0
 801297a:	b2db      	uxtb	r3, r3
 801297c:	461a      	mov	r2, r3
 801297e:	79fb      	ldrb	r3, [r7, #7]
 8012980:	429a      	cmp	r2, r3
 8012982:	d0a0      	beq.n	80128c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3710      	adds	r7, #16
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
	...

08012990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012990:	b480      	push	{r7}
 8012992:	b095      	sub	sp, #84	@ 0x54
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129a0:	e853 3f00 	ldrex	r3, [r3]
 80129a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80129a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80129ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	461a      	mov	r2, r3
 80129b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80129b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80129bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80129be:	e841 2300 	strex	r3, r2, [r1]
 80129c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80129c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d1e6      	bne.n	8012998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	3308      	adds	r3, #8
 80129d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129d2:	6a3b      	ldr	r3, [r7, #32]
 80129d4:	e853 3f00 	ldrex	r3, [r3]
 80129d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80129da:	69fa      	ldr	r2, [r7, #28]
 80129dc:	4b1e      	ldr	r3, [pc, #120]	@ (8012a58 <UART_EndRxTransfer+0xc8>)
 80129de:	4013      	ands	r3, r2
 80129e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	3308      	adds	r3, #8
 80129e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80129ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80129ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80129f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129f2:	e841 2300 	strex	r3, r2, [r1]
 80129f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80129f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1e5      	bne.n	80129ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d118      	bne.n	8012a38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	e853 3f00 	ldrex	r3, [r3]
 8012a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	f023 0310 	bic.w	r3, r3, #16
 8012a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	461a      	mov	r2, r3
 8012a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a24:	61bb      	str	r3, [r7, #24]
 8012a26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a28:	6979      	ldr	r1, [r7, #20]
 8012a2a:	69ba      	ldr	r2, [r7, #24]
 8012a2c:	e841 2300 	strex	r3, r2, [r1]
 8012a30:	613b      	str	r3, [r7, #16]
   return(result);
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d1e6      	bne.n	8012a06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2220      	movs	r2, #32
 8012a3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2200      	movs	r2, #0
 8012a44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8012a4c:	bf00      	nop
 8012a4e:	3754      	adds	r7, #84	@ 0x54
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr
 8012a58:	effffffe 	.word	0xeffffffe

08012a5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012a72:	68f8      	ldr	r0, [r7, #12]
 8012a74:	f7ff f854 	bl	8011b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012a78:	bf00      	nop
 8012a7a:	3710      	adds	r7, #16
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b088      	sub	sp, #32
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	e853 3f00 	ldrex	r3, [r3]
 8012a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a9c:	61fb      	str	r3, [r7, #28]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	61bb      	str	r3, [r7, #24]
 8012aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aaa:	6979      	ldr	r1, [r7, #20]
 8012aac:	69ba      	ldr	r2, [r7, #24]
 8012aae:	e841 2300 	strex	r3, r2, [r1]
 8012ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d1e6      	bne.n	8012a88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2220      	movs	r2, #32
 8012abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff f81f 	bl	8011b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ace:	bf00      	nop
 8012ad0:	3720      	adds	r7, #32
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ad6:	b480      	push	{r7}
 8012ad8:	b083      	sub	sp, #12
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012ade:	bf00      	nop
 8012ae0:	370c      	adds	r7, #12
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr

08012aea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012aea:	b480      	push	{r7}
 8012aec:	b083      	sub	sp, #12
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012af2:	bf00      	nop
 8012af4:	370c      	adds	r7, #12
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr

08012afe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012afe:	b480      	push	{r7}
 8012b00:	b083      	sub	sp, #12
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012b06:	bf00      	nop
 8012b08:	370c      	adds	r7, #12
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr

08012b12 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012b12:	b580      	push	{r7, lr}
 8012b14:	b084      	sub	sp, #16
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d101      	bne.n	8012b28 <HAL_UARTEx_EnableFifoMode+0x16>
 8012b24:	2302      	movs	r3, #2
 8012b26:	e02b      	b.n	8012b80 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2224      	movs	r2, #36	@ 0x24
 8012b34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681a      	ldr	r2, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f022 0201 	bic.w	r2, r2, #1
 8012b4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012b56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8012b5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	68fa      	ldr	r2, [r7, #12]
 8012b66:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 f889 	bl	8012c80 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2220      	movs	r2, #32
 8012b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012b7e:	2300      	movs	r3, #0
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3710      	adds	r7, #16
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b084      	sub	sp, #16
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	d101      	bne.n	8012ba0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012b9c:	2302      	movs	r3, #2
 8012b9e:	e02d      	b.n	8012bfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2224      	movs	r2, #36	@ 0x24
 8012bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f022 0201 	bic.w	r2, r2, #1
 8012bc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	689b      	ldr	r3, [r3, #8]
 8012bce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	683a      	ldr	r2, [r7, #0]
 8012bd8:	430a      	orrs	r2, r1
 8012bda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f000 f84f 	bl	8012c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	68fa      	ldr	r2, [r7, #12]
 8012be8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2220      	movs	r2, #32
 8012bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d101      	bne.n	8012c1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012c18:	2302      	movs	r3, #2
 8012c1a:	e02d      	b.n	8012c78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2201      	movs	r2, #1
 8012c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2224      	movs	r2, #36	@ 0x24
 8012c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f022 0201 	bic.w	r2, r2, #1
 8012c42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	683a      	ldr	r2, [r7, #0]
 8012c54:	430a      	orrs	r2, r1
 8012c56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 f811 	bl	8012c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2220      	movs	r2, #32
 8012c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2200      	movs	r2, #0
 8012c72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b085      	sub	sp, #20
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d108      	bne.n	8012ca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2201      	movs	r2, #1
 8012c94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ca0:	e031      	b.n	8012d06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012ca2:	2310      	movs	r3, #16
 8012ca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012ca6:	2310      	movs	r3, #16
 8012ca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	689b      	ldr	r3, [r3, #8]
 8012cb0:	0e5b      	lsrs	r3, r3, #25
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	f003 0307 	and.w	r3, r3, #7
 8012cb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	0f5b      	lsrs	r3, r3, #29
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	f003 0307 	and.w	r3, r3, #7
 8012cc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012cca:	7bbb      	ldrb	r3, [r7, #14]
 8012ccc:	7b3a      	ldrb	r2, [r7, #12]
 8012cce:	4911      	ldr	r1, [pc, #68]	@ (8012d14 <UARTEx_SetNbDataToProcess+0x94>)
 8012cd0:	5c8a      	ldrb	r2, [r1, r2]
 8012cd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012cd6:	7b3a      	ldrb	r2, [r7, #12]
 8012cd8:	490f      	ldr	r1, [pc, #60]	@ (8012d18 <UARTEx_SetNbDataToProcess+0x98>)
 8012cda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012ce8:	7bfb      	ldrb	r3, [r7, #15]
 8012cea:	7b7a      	ldrb	r2, [r7, #13]
 8012cec:	4909      	ldr	r1, [pc, #36]	@ (8012d14 <UARTEx_SetNbDataToProcess+0x94>)
 8012cee:	5c8a      	ldrb	r2, [r1, r2]
 8012cf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012cf4:	7b7a      	ldrb	r2, [r7, #13]
 8012cf6:	4908      	ldr	r1, [pc, #32]	@ (8012d18 <UARTEx_SetNbDataToProcess+0x98>)
 8012cf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012d06:	bf00      	nop
 8012d08:	3714      	adds	r7, #20
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	08017dd0 	.word	0x08017dd0
 8012d18:	08017dd8 	.word	0x08017dd8

08012d1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d1c:	b084      	sub	sp, #16
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b084      	sub	sp, #16
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
 8012d26:	f107 001c 	add.w	r0, r7, #28
 8012d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012d2e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d121      	bne.n	8012d7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	68da      	ldr	r2, [r3, #12]
 8012d46:	4b2c      	ldr	r3, [pc, #176]	@ (8012df8 <USB_CoreInit+0xdc>)
 8012d48:	4013      	ands	r3, r2
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d105      	bne.n	8012d6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f001 fafa 	bl	8014368 <USB_CoreReset>
 8012d74:	4603      	mov	r3, r0
 8012d76:	73fb      	strb	r3, [r7, #15]
 8012d78:	e01b      	b.n	8012db2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f001 faee 	bl	8014368 <USB_CoreReset>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012d90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d106      	bne.n	8012da6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	639a      	str	r2, [r3, #56]	@ 0x38
 8012da4:	e005      	b.n	8012db2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012daa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012db2:	7fbb      	ldrb	r3, [r7, #30]
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d116      	bne.n	8012de6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012dbc:	b29a      	uxth	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8012dfc <USB_CoreInit+0xe0>)
 8012dc8:	4313      	orrs	r3, r2
 8012dca:	687a      	ldr	r2, [r7, #4]
 8012dcc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	689b      	ldr	r3, [r3, #8]
 8012dd2:	f043 0206 	orr.w	r2, r3, #6
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	689b      	ldr	r3, [r3, #8]
 8012dde:	f043 0220 	orr.w	r2, r3, #32
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3710      	adds	r7, #16
 8012dec:	46bd      	mov	sp, r7
 8012dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012df2:	b004      	add	sp, #16
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop
 8012df8:	ffbdffbf 	.word	0xffbdffbf
 8012dfc:	03ee0000 	.word	0x03ee0000

08012e00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012e00:	b480      	push	{r7}
 8012e02:	b087      	sub	sp, #28
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	4613      	mov	r3, r2
 8012e0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012e0e:	79fb      	ldrb	r3, [r7, #7]
 8012e10:	2b02      	cmp	r3, #2
 8012e12:	d165      	bne.n	8012ee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	4a41      	ldr	r2, [pc, #260]	@ (8012f1c <USB_SetTurnaroundTime+0x11c>)
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d906      	bls.n	8012e2a <USB_SetTurnaroundTime+0x2a>
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	4a40      	ldr	r2, [pc, #256]	@ (8012f20 <USB_SetTurnaroundTime+0x120>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d202      	bcs.n	8012e2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012e24:	230f      	movs	r3, #15
 8012e26:	617b      	str	r3, [r7, #20]
 8012e28:	e062      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8012f20 <USB_SetTurnaroundTime+0x120>)
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d306      	bcc.n	8012e40 <USB_SetTurnaroundTime+0x40>
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	4a3b      	ldr	r2, [pc, #236]	@ (8012f24 <USB_SetTurnaroundTime+0x124>)
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d202      	bcs.n	8012e40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012e3a:	230e      	movs	r3, #14
 8012e3c:	617b      	str	r3, [r7, #20]
 8012e3e:	e057      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	4a38      	ldr	r2, [pc, #224]	@ (8012f24 <USB_SetTurnaroundTime+0x124>)
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d306      	bcc.n	8012e56 <USB_SetTurnaroundTime+0x56>
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	4a37      	ldr	r2, [pc, #220]	@ (8012f28 <USB_SetTurnaroundTime+0x128>)
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	d202      	bcs.n	8012e56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012e50:	230d      	movs	r3, #13
 8012e52:	617b      	str	r3, [r7, #20]
 8012e54:	e04c      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	4a33      	ldr	r2, [pc, #204]	@ (8012f28 <USB_SetTurnaroundTime+0x128>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d306      	bcc.n	8012e6c <USB_SetTurnaroundTime+0x6c>
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	4a32      	ldr	r2, [pc, #200]	@ (8012f2c <USB_SetTurnaroundTime+0x12c>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d802      	bhi.n	8012e6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012e66:	230c      	movs	r3, #12
 8012e68:	617b      	str	r3, [r7, #20]
 8012e6a:	e041      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8012f2c <USB_SetTurnaroundTime+0x12c>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d906      	bls.n	8012e82 <USB_SetTurnaroundTime+0x82>
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	4a2e      	ldr	r2, [pc, #184]	@ (8012f30 <USB_SetTurnaroundTime+0x130>)
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d802      	bhi.n	8012e82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012e7c:	230b      	movs	r3, #11
 8012e7e:	617b      	str	r3, [r7, #20]
 8012e80:	e036      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	4a2a      	ldr	r2, [pc, #168]	@ (8012f30 <USB_SetTurnaroundTime+0x130>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d906      	bls.n	8012e98 <USB_SetTurnaroundTime+0x98>
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	4a29      	ldr	r2, [pc, #164]	@ (8012f34 <USB_SetTurnaroundTime+0x134>)
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d802      	bhi.n	8012e98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012e92:	230a      	movs	r3, #10
 8012e94:	617b      	str	r3, [r7, #20]
 8012e96:	e02b      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	4a26      	ldr	r2, [pc, #152]	@ (8012f34 <USB_SetTurnaroundTime+0x134>)
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	d906      	bls.n	8012eae <USB_SetTurnaroundTime+0xae>
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	4a25      	ldr	r2, [pc, #148]	@ (8012f38 <USB_SetTurnaroundTime+0x138>)
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d202      	bcs.n	8012eae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012ea8:	2309      	movs	r3, #9
 8012eaa:	617b      	str	r3, [r7, #20]
 8012eac:	e020      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	4a21      	ldr	r2, [pc, #132]	@ (8012f38 <USB_SetTurnaroundTime+0x138>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d306      	bcc.n	8012ec4 <USB_SetTurnaroundTime+0xc4>
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	4a20      	ldr	r2, [pc, #128]	@ (8012f3c <USB_SetTurnaroundTime+0x13c>)
 8012eba:	4293      	cmp	r3, r2
 8012ebc:	d802      	bhi.n	8012ec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012ebe:	2308      	movs	r3, #8
 8012ec0:	617b      	str	r3, [r7, #20]
 8012ec2:	e015      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8012f3c <USB_SetTurnaroundTime+0x13c>)
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d906      	bls.n	8012eda <USB_SetTurnaroundTime+0xda>
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	4a1c      	ldr	r2, [pc, #112]	@ (8012f40 <USB_SetTurnaroundTime+0x140>)
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	d202      	bcs.n	8012eda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012ed4:	2307      	movs	r3, #7
 8012ed6:	617b      	str	r3, [r7, #20]
 8012ed8:	e00a      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012eda:	2306      	movs	r3, #6
 8012edc:	617b      	str	r3, [r7, #20]
 8012ede:	e007      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012ee0:	79fb      	ldrb	r3, [r7, #7]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d102      	bne.n	8012eec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012ee6:	2309      	movs	r3, #9
 8012ee8:	617b      	str	r3, [r7, #20]
 8012eea:	e001      	b.n	8012ef0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012eec:	2309      	movs	r3, #9
 8012eee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	68db      	ldr	r3, [r3, #12]
 8012ef4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	68da      	ldr	r2, [r3, #12]
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	029b      	lsls	r3, r3, #10
 8012f04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8012f08:	431a      	orrs	r2, r3
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012f0e:	2300      	movs	r3, #0
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	371c      	adds	r7, #28
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr
 8012f1c:	00d8acbf 	.word	0x00d8acbf
 8012f20:	00e4e1c0 	.word	0x00e4e1c0
 8012f24:	00f42400 	.word	0x00f42400
 8012f28:	01067380 	.word	0x01067380
 8012f2c:	011a499f 	.word	0x011a499f
 8012f30:	01312cff 	.word	0x01312cff
 8012f34:	014ca43f 	.word	0x014ca43f
 8012f38:	016e3600 	.word	0x016e3600
 8012f3c:	01a6ab1f 	.word	0x01a6ab1f
 8012f40:	01e84800 	.word	0x01e84800

08012f44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	689b      	ldr	r3, [r3, #8]
 8012f50:	f043 0201 	orr.w	r2, r3, #1
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012f58:	2300      	movs	r3, #0
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	370c      	adds	r7, #12
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f66:	b480      	push	{r7}
 8012f68:	b083      	sub	sp, #12
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	689b      	ldr	r3, [r3, #8]
 8012f72:	f023 0201 	bic.w	r2, r3, #1
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	460b      	mov	r3, r1
 8012f92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012f94:	2300      	movs	r3, #0
 8012f96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012fa4:	78fb      	ldrb	r3, [r7, #3]
 8012fa6:	2b01      	cmp	r3, #1
 8012fa8:	d115      	bne.n	8012fd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	68db      	ldr	r3, [r3, #12]
 8012fae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012fb6:	200a      	movs	r0, #10
 8012fb8:	f7ef f984 	bl	80022c4 <HAL_Delay>
      ms += 10U;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	330a      	adds	r3, #10
 8012fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f001 f93f 	bl	8014246 <USB_GetMode>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d01e      	beq.n	801300c <USB_SetCurrentMode+0x84>
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8012fd2:	d9f0      	bls.n	8012fb6 <USB_SetCurrentMode+0x2e>
 8012fd4:	e01a      	b.n	801300c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012fd6:	78fb      	ldrb	r3, [r7, #3]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d115      	bne.n	8013008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	68db      	ldr	r3, [r3, #12]
 8012fe0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8012fe8:	200a      	movs	r0, #10
 8012fea:	f7ef f96b 	bl	80022c4 <HAL_Delay>
      ms += 10U;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	330a      	adds	r3, #10
 8012ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f001 f926 	bl	8014246 <USB_GetMode>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d005      	beq.n	801300c <USB_SetCurrentMode+0x84>
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2bc7      	cmp	r3, #199	@ 0xc7
 8013004:	d9f0      	bls.n	8012fe8 <USB_SetCurrentMode+0x60>
 8013006:	e001      	b.n	801300c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013008:	2301      	movs	r3, #1
 801300a:	e005      	b.n	8013018 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2bc8      	cmp	r3, #200	@ 0xc8
 8013010:	d101      	bne.n	8013016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013012:	2301      	movs	r3, #1
 8013014:	e000      	b.n	8013018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013020:	b084      	sub	sp, #16
 8013022:	b580      	push	{r7, lr}
 8013024:	b086      	sub	sp, #24
 8013026:	af00      	add	r7, sp, #0
 8013028:	6078      	str	r0, [r7, #4]
 801302a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801302e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013032:	2300      	movs	r3, #0
 8013034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801303a:	2300      	movs	r3, #0
 801303c:	613b      	str	r3, [r7, #16]
 801303e:	e009      	b.n	8013054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	3340      	adds	r3, #64	@ 0x40
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	4413      	add	r3, r2
 801304a:	2200      	movs	r2, #0
 801304c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	3301      	adds	r3, #1
 8013052:	613b      	str	r3, [r7, #16]
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	2b0e      	cmp	r3, #14
 8013058:	d9f2      	bls.n	8013040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801305a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801305e:	2b00      	cmp	r3, #0
 8013060:	d11c      	bne.n	801309c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	68fa      	ldr	r2, [r7, #12]
 801306c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013070:	f043 0302 	orr.w	r3, r3, #2
 8013074:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801307a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	601a      	str	r2, [r3, #0]
 801309a:	e005      	b.n	80130a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80130ae:	461a      	mov	r2, r3
 80130b0:	2300      	movs	r3, #0
 80130b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80130b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d10d      	bne.n	80130d8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80130bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d104      	bne.n	80130ce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80130c4:	2100      	movs	r1, #0
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f000 f968 	bl	801339c <USB_SetDevSpeed>
 80130cc:	e008      	b.n	80130e0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80130ce:	2101      	movs	r1, #1
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f000 f963 	bl	801339c <USB_SetDevSpeed>
 80130d6:	e003      	b.n	80130e0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80130d8:	2103      	movs	r1, #3
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f000 f95e 	bl	801339c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80130e0:	2110      	movs	r1, #16
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 f8fa 	bl	80132dc <USB_FlushTxFifo>
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d001      	beq.n	80130f2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80130ee:	2301      	movs	r3, #1
 80130f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f000 f924 	bl	8013340 <USB_FlushRxFifo>
 80130f8:	4603      	mov	r3, r0
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d001      	beq.n	8013102 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80130fe:	2301      	movs	r3, #1
 8013100:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013108:	461a      	mov	r2, r3
 801310a:	2300      	movs	r3, #0
 801310c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013114:	461a      	mov	r2, r3
 8013116:	2300      	movs	r3, #0
 8013118:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013120:	461a      	mov	r2, r3
 8013122:	2300      	movs	r3, #0
 8013124:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013126:	2300      	movs	r3, #0
 8013128:	613b      	str	r3, [r7, #16]
 801312a:	e043      	b.n	80131b4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	015a      	lsls	r2, r3, #5
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	4413      	add	r3, r2
 8013134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801313e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013142:	d118      	bne.n	8013176 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d10a      	bne.n	8013160 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	015a      	lsls	r2, r3, #5
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	4413      	add	r3, r2
 8013152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013156:	461a      	mov	r2, r3
 8013158:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801315c:	6013      	str	r3, [r2, #0]
 801315e:	e013      	b.n	8013188 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	015a      	lsls	r2, r3, #5
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	4413      	add	r3, r2
 8013168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801316c:	461a      	mov	r2, r3
 801316e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8013172:	6013      	str	r3, [r2, #0]
 8013174:	e008      	b.n	8013188 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	015a      	lsls	r2, r3, #5
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	4413      	add	r3, r2
 801317e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013182:	461a      	mov	r2, r3
 8013184:	2300      	movs	r3, #0
 8013186:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	015a      	lsls	r2, r3, #5
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	4413      	add	r3, r2
 8013190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013194:	461a      	mov	r2, r3
 8013196:	2300      	movs	r3, #0
 8013198:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	015a      	lsls	r2, r3, #5
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	4413      	add	r3, r2
 80131a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131a6:	461a      	mov	r2, r3
 80131a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80131ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	3301      	adds	r3, #1
 80131b2:	613b      	str	r3, [r7, #16]
 80131b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80131b8:	461a      	mov	r2, r3
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	4293      	cmp	r3, r2
 80131be:	d3b5      	bcc.n	801312c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80131c0:	2300      	movs	r3, #0
 80131c2:	613b      	str	r3, [r7, #16]
 80131c4:	e043      	b.n	801324e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	015a      	lsls	r2, r3, #5
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	4413      	add	r3, r2
 80131ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80131d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80131dc:	d118      	bne.n	8013210 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d10a      	bne.n	80131fa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	015a      	lsls	r2, r3, #5
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	4413      	add	r3, r2
 80131ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80131f0:	461a      	mov	r2, r3
 80131f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80131f6:	6013      	str	r3, [r2, #0]
 80131f8:	e013      	b.n	8013222 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	015a      	lsls	r2, r3, #5
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	4413      	add	r3, r2
 8013202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013206:	461a      	mov	r2, r3
 8013208:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801320c:	6013      	str	r3, [r2, #0]
 801320e:	e008      	b.n	8013222 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	015a      	lsls	r2, r3, #5
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	4413      	add	r3, r2
 8013218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801321c:	461a      	mov	r2, r3
 801321e:	2300      	movs	r3, #0
 8013220:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	015a      	lsls	r2, r3, #5
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	4413      	add	r3, r2
 801322a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801322e:	461a      	mov	r2, r3
 8013230:	2300      	movs	r3, #0
 8013232:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	015a      	lsls	r2, r3, #5
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	4413      	add	r3, r2
 801323c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013240:	461a      	mov	r2, r3
 8013242:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8013246:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	3301      	adds	r3, #1
 801324c:	613b      	str	r3, [r7, #16]
 801324e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013252:	461a      	mov	r2, r3
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	4293      	cmp	r3, r2
 8013258:	d3b5      	bcc.n	80131c6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013260:	691b      	ldr	r3, [r3, #16]
 8013262:	68fa      	ldr	r2, [r7, #12]
 8013264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801326c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	2200      	movs	r2, #0
 8013272:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801327a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801327c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013280:	2b00      	cmp	r3, #0
 8013282:	d105      	bne.n	8013290 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	699b      	ldr	r3, [r3, #24]
 8013288:	f043 0210 	orr.w	r2, r3, #16
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	699a      	ldr	r2, [r3, #24]
 8013294:	4b0f      	ldr	r3, [pc, #60]	@ (80132d4 <USB_DevInit+0x2b4>)
 8013296:	4313      	orrs	r3, r2
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801329c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d005      	beq.n	80132b0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	699b      	ldr	r3, [r3, #24]
 80132a8:	f043 0208 	orr.w	r2, r3, #8
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80132b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d105      	bne.n	80132c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	699a      	ldr	r2, [r3, #24]
 80132bc:	4b06      	ldr	r3, [pc, #24]	@ (80132d8 <USB_DevInit+0x2b8>)
 80132be:	4313      	orrs	r3, r2
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80132c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3718      	adds	r7, #24
 80132ca:	46bd      	mov	sp, r7
 80132cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80132d0:	b004      	add	sp, #16
 80132d2:	4770      	bx	lr
 80132d4:	803c3800 	.word	0x803c3800
 80132d8:	40000004 	.word	0x40000004

080132dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80132dc:	b480      	push	{r7}
 80132de:	b085      	sub	sp, #20
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80132e6:	2300      	movs	r3, #0
 80132e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	3301      	adds	r3, #1
 80132ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80132f6:	d901      	bls.n	80132fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80132f8:	2303      	movs	r3, #3
 80132fa:	e01b      	b.n	8013334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	daf2      	bge.n	80132ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013304:	2300      	movs	r3, #0
 8013306:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	019b      	lsls	r3, r3, #6
 801330c:	f043 0220 	orr.w	r2, r3, #32
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	3301      	adds	r3, #1
 8013318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013320:	d901      	bls.n	8013326 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013322:	2303      	movs	r3, #3
 8013324:	e006      	b.n	8013334 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	691b      	ldr	r3, [r3, #16]
 801332a:	f003 0320 	and.w	r3, r3, #32
 801332e:	2b20      	cmp	r3, #32
 8013330:	d0f0      	beq.n	8013314 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013332:	2300      	movs	r3, #0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3714      	adds	r7, #20
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr

08013340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013340:	b480      	push	{r7}
 8013342:	b085      	sub	sp, #20
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013348:	2300      	movs	r3, #0
 801334a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	3301      	adds	r3, #1
 8013350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013358:	d901      	bls.n	801335e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801335a:	2303      	movs	r3, #3
 801335c:	e018      	b.n	8013390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	691b      	ldr	r3, [r3, #16]
 8013362:	2b00      	cmp	r3, #0
 8013364:	daf2      	bge.n	801334c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013366:	2300      	movs	r3, #0
 8013368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2210      	movs	r2, #16
 801336e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	3301      	adds	r3, #1
 8013374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801337c:	d901      	bls.n	8013382 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801337e:	2303      	movs	r3, #3
 8013380:	e006      	b.n	8013390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	691b      	ldr	r3, [r3, #16]
 8013386:	f003 0310 	and.w	r3, r3, #16
 801338a:	2b10      	cmp	r3, #16
 801338c:	d0f0      	beq.n	8013370 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801338e:	2300      	movs	r3, #0
}
 8013390:	4618      	mov	r0, r3
 8013392:	3714      	adds	r7, #20
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801339c:	b480      	push	{r7}
 801339e:	b085      	sub	sp, #20
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	460b      	mov	r3, r1
 80133a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133b2:	681a      	ldr	r2, [r3, #0]
 80133b4:	78fb      	ldrb	r3, [r7, #3]
 80133b6:	68f9      	ldr	r1, [r7, #12]
 80133b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80133bc:	4313      	orrs	r3, r2
 80133be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80133c0:	2300      	movs	r3, #0
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3714      	adds	r7, #20
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr

080133ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80133ce:	b480      	push	{r7}
 80133d0:	b087      	sub	sp, #28
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80133e0:	689b      	ldr	r3, [r3, #8]
 80133e2:	f003 0306 	and.w	r3, r3, #6
 80133e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d102      	bne.n	80133f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80133ee:	2300      	movs	r3, #0
 80133f0:	75fb      	strb	r3, [r7, #23]
 80133f2:	e00a      	b.n	801340a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2b02      	cmp	r3, #2
 80133f8:	d002      	beq.n	8013400 <USB_GetDevSpeed+0x32>
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	2b06      	cmp	r3, #6
 80133fe:	d102      	bne.n	8013406 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013400:	2302      	movs	r3, #2
 8013402:	75fb      	strb	r3, [r7, #23]
 8013404:	e001      	b.n	801340a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013406:	230f      	movs	r3, #15
 8013408:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801340a:	7dfb      	ldrb	r3, [r7, #23]
}
 801340c:	4618      	mov	r0, r3
 801340e:	371c      	adds	r7, #28
 8013410:	46bd      	mov	sp, r7
 8013412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013416:	4770      	bx	lr

08013418 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013418:	b480      	push	{r7}
 801341a:	b085      	sub	sp, #20
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	785b      	ldrb	r3, [r3, #1]
 8013430:	2b01      	cmp	r3, #1
 8013432:	d139      	bne.n	80134a8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801343a:	69da      	ldr	r2, [r3, #28]
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	f003 030f 	and.w	r3, r3, #15
 8013444:	2101      	movs	r1, #1
 8013446:	fa01 f303 	lsl.w	r3, r1, r3
 801344a:	b29b      	uxth	r3, r3
 801344c:	68f9      	ldr	r1, [r7, #12]
 801344e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013452:	4313      	orrs	r3, r2
 8013454:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	015a      	lsls	r2, r3, #5
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	4413      	add	r3, r2
 801345e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013468:	2b00      	cmp	r3, #0
 801346a:	d153      	bne.n	8013514 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	015a      	lsls	r2, r3, #5
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	4413      	add	r3, r2
 8013474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	689b      	ldr	r3, [r3, #8]
 801347e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	791b      	ldrb	r3, [r3, #4]
 8013486:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013488:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	059b      	lsls	r3, r3, #22
 801348e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013490:	431a      	orrs	r2, r3
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	0159      	lsls	r1, r3, #5
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	440b      	add	r3, r1
 801349a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801349e:	4619      	mov	r1, r3
 80134a0:	4b20      	ldr	r3, [pc, #128]	@ (8013524 <USB_ActivateEndpoint+0x10c>)
 80134a2:	4313      	orrs	r3, r2
 80134a4:	600b      	str	r3, [r1, #0]
 80134a6:	e035      	b.n	8013514 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80134ae:	69da      	ldr	r2, [r3, #28]
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	f003 030f 	and.w	r3, r3, #15
 80134b8:	2101      	movs	r1, #1
 80134ba:	fa01 f303 	lsl.w	r3, r1, r3
 80134be:	041b      	lsls	r3, r3, #16
 80134c0:	68f9      	ldr	r1, [r7, #12]
 80134c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80134c6:	4313      	orrs	r3, r2
 80134c8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	015a      	lsls	r2, r3, #5
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	4413      	add	r3, r2
 80134d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d119      	bne.n	8013514 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	015a      	lsls	r2, r3, #5
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	4413      	add	r3, r2
 80134e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	689b      	ldr	r3, [r3, #8]
 80134f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	791b      	ldrb	r3, [r3, #4]
 80134fa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80134fc:	430b      	orrs	r3, r1
 80134fe:	431a      	orrs	r2, r3
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	0159      	lsls	r1, r3, #5
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	440b      	add	r3, r1
 8013508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801350c:	4619      	mov	r1, r3
 801350e:	4b05      	ldr	r3, [pc, #20]	@ (8013524 <USB_ActivateEndpoint+0x10c>)
 8013510:	4313      	orrs	r3, r2
 8013512:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013514:	2300      	movs	r3, #0
}
 8013516:	4618      	mov	r0, r3
 8013518:	3714      	adds	r7, #20
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr
 8013522:	bf00      	nop
 8013524:	10008000 	.word	0x10008000

08013528 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013528:	b480      	push	{r7}
 801352a:	b085      	sub	sp, #20
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	785b      	ldrb	r3, [r3, #1]
 8013540:	2b01      	cmp	r3, #1
 8013542:	d161      	bne.n	8013608 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	015a      	lsls	r2, r3, #5
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	4413      	add	r3, r2
 801354c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801355a:	d11f      	bne.n	801359c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	015a      	lsls	r2, r3, #5
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	4413      	add	r3, r2
 8013564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	68ba      	ldr	r2, [r7, #8]
 801356c:	0151      	lsls	r1, r2, #5
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	440a      	add	r2, r1
 8013572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013576:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801357a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	015a      	lsls	r2, r3, #5
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	4413      	add	r3, r2
 8013584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	68ba      	ldr	r2, [r7, #8]
 801358c:	0151      	lsls	r1, r2, #5
 801358e:	68fa      	ldr	r2, [r7, #12]
 8013590:	440a      	add	r2, r1
 8013592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013596:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801359a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80135a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	f003 030f 	and.w	r3, r3, #15
 80135ac:	2101      	movs	r1, #1
 80135ae:	fa01 f303 	lsl.w	r3, r1, r3
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	43db      	mvns	r3, r3
 80135b6:	68f9      	ldr	r1, [r7, #12]
 80135b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80135bc:	4013      	ands	r3, r2
 80135be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80135c6:	69da      	ldr	r2, [r3, #28]
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	f003 030f 	and.w	r3, r3, #15
 80135d0:	2101      	movs	r1, #1
 80135d2:	fa01 f303 	lsl.w	r3, r1, r3
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	43db      	mvns	r3, r3
 80135da:	68f9      	ldr	r1, [r7, #12]
 80135dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80135e0:	4013      	ands	r3, r2
 80135e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	015a      	lsls	r2, r3, #5
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	4413      	add	r3, r2
 80135ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	0159      	lsls	r1, r3, #5
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	440b      	add	r3, r1
 80135fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80135fe:	4619      	mov	r1, r3
 8013600:	4b35      	ldr	r3, [pc, #212]	@ (80136d8 <USB_DeactivateEndpoint+0x1b0>)
 8013602:	4013      	ands	r3, r2
 8013604:	600b      	str	r3, [r1, #0]
 8013606:	e060      	b.n	80136ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	015a      	lsls	r2, r3, #5
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	4413      	add	r3, r2
 8013610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801361a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801361e:	d11f      	bne.n	8013660 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	015a      	lsls	r2, r3, #5
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	4413      	add	r3, r2
 8013628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	68ba      	ldr	r2, [r7, #8]
 8013630:	0151      	lsls	r1, r2, #5
 8013632:	68fa      	ldr	r2, [r7, #12]
 8013634:	440a      	add	r2, r1
 8013636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801363a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801363e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	015a      	lsls	r2, r3, #5
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	4413      	add	r3, r2
 8013648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	68ba      	ldr	r2, [r7, #8]
 8013650:	0151      	lsls	r1, r2, #5
 8013652:	68fa      	ldr	r2, [r7, #12]
 8013654:	440a      	add	r2, r1
 8013656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801365a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801365e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013666:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	f003 030f 	and.w	r3, r3, #15
 8013670:	2101      	movs	r1, #1
 8013672:	fa01 f303 	lsl.w	r3, r1, r3
 8013676:	041b      	lsls	r3, r3, #16
 8013678:	43db      	mvns	r3, r3
 801367a:	68f9      	ldr	r1, [r7, #12]
 801367c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8013680:	4013      	ands	r3, r2
 8013682:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801368a:	69da      	ldr	r2, [r3, #28]
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	f003 030f 	and.w	r3, r3, #15
 8013694:	2101      	movs	r1, #1
 8013696:	fa01 f303 	lsl.w	r3, r1, r3
 801369a:	041b      	lsls	r3, r3, #16
 801369c:	43db      	mvns	r3, r3
 801369e:	68f9      	ldr	r1, [r7, #12]
 80136a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80136a4:	4013      	ands	r3, r2
 80136a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	015a      	lsls	r2, r3, #5
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	4413      	add	r3, r2
 80136b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	0159      	lsls	r1, r3, #5
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	440b      	add	r3, r1
 80136be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80136c2:	4619      	mov	r1, r3
 80136c4:	4b05      	ldr	r3, [pc, #20]	@ (80136dc <USB_DeactivateEndpoint+0x1b4>)
 80136c6:	4013      	ands	r3, r2
 80136c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80136ca:	2300      	movs	r3, #0
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3714      	adds	r7, #20
 80136d0:	46bd      	mov	sp, r7
 80136d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d6:	4770      	bx	lr
 80136d8:	ec337800 	.word	0xec337800
 80136dc:	eff37800 	.word	0xeff37800

080136e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b08a      	sub	sp, #40	@ 0x28
 80136e4:	af02      	add	r7, sp, #8
 80136e6:	60f8      	str	r0, [r7, #12]
 80136e8:	60b9      	str	r1, [r7, #8]
 80136ea:	4613      	mov	r3, r2
 80136ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	785b      	ldrb	r3, [r3, #1]
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	f040 8185 	bne.w	8013a0c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	691b      	ldr	r3, [r3, #16]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d132      	bne.n	8013770 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801370a:	69bb      	ldr	r3, [r7, #24]
 801370c:	015a      	lsls	r2, r3, #5
 801370e:	69fb      	ldr	r3, [r7, #28]
 8013710:	4413      	add	r3, r2
 8013712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013716:	691a      	ldr	r2, [r3, #16]
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	0159      	lsls	r1, r3, #5
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	440b      	add	r3, r1
 8013720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013724:	4619      	mov	r1, r3
 8013726:	4ba7      	ldr	r3, [pc, #668]	@ (80139c4 <USB_EPStartXfer+0x2e4>)
 8013728:	4013      	ands	r3, r2
 801372a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801372c:	69bb      	ldr	r3, [r7, #24]
 801372e:	015a      	lsls	r2, r3, #5
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	4413      	add	r3, r2
 8013734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013738:	691b      	ldr	r3, [r3, #16]
 801373a:	69ba      	ldr	r2, [r7, #24]
 801373c:	0151      	lsls	r1, r2, #5
 801373e:	69fa      	ldr	r2, [r7, #28]
 8013740:	440a      	add	r2, r1
 8013742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013746:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801374a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801374c:	69bb      	ldr	r3, [r7, #24]
 801374e:	015a      	lsls	r2, r3, #5
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	4413      	add	r3, r2
 8013754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013758:	691a      	ldr	r2, [r3, #16]
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	0159      	lsls	r1, r3, #5
 801375e:	69fb      	ldr	r3, [r7, #28]
 8013760:	440b      	add	r3, r1
 8013762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013766:	4619      	mov	r1, r3
 8013768:	4b97      	ldr	r3, [pc, #604]	@ (80139c8 <USB_EPStartXfer+0x2e8>)
 801376a:	4013      	ands	r3, r2
 801376c:	610b      	str	r3, [r1, #16]
 801376e:	e097      	b.n	80138a0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	015a      	lsls	r2, r3, #5
 8013774:	69fb      	ldr	r3, [r7, #28]
 8013776:	4413      	add	r3, r2
 8013778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801377c:	691a      	ldr	r2, [r3, #16]
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	0159      	lsls	r1, r3, #5
 8013782:	69fb      	ldr	r3, [r7, #28]
 8013784:	440b      	add	r3, r1
 8013786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801378a:	4619      	mov	r1, r3
 801378c:	4b8e      	ldr	r3, [pc, #568]	@ (80139c8 <USB_EPStartXfer+0x2e8>)
 801378e:	4013      	ands	r3, r2
 8013790:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	015a      	lsls	r2, r3, #5
 8013796:	69fb      	ldr	r3, [r7, #28]
 8013798:	4413      	add	r3, r2
 801379a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801379e:	691a      	ldr	r2, [r3, #16]
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	0159      	lsls	r1, r3, #5
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	440b      	add	r3, r1
 80137a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137ac:	4619      	mov	r1, r3
 80137ae:	4b85      	ldr	r3, [pc, #532]	@ (80139c4 <USB_EPStartXfer+0x2e4>)
 80137b0:	4013      	ands	r3, r2
 80137b2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d11a      	bne.n	80137f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	691a      	ldr	r2, [r3, #16]
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	689b      	ldr	r3, [r3, #8]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d903      	bls.n	80137ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	689a      	ldr	r2, [r3, #8]
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	015a      	lsls	r2, r3, #5
 80137d2:	69fb      	ldr	r3, [r7, #28]
 80137d4:	4413      	add	r3, r2
 80137d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80137da:	691b      	ldr	r3, [r3, #16]
 80137dc:	69ba      	ldr	r2, [r7, #24]
 80137de:	0151      	lsls	r1, r2, #5
 80137e0:	69fa      	ldr	r2, [r7, #28]
 80137e2:	440a      	add	r2, r1
 80137e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80137e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80137ec:	6113      	str	r3, [r2, #16]
 80137ee:	e044      	b.n	801387a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	691a      	ldr	r2, [r3, #16]
 80137f4:	68bb      	ldr	r3, [r7, #8]
 80137f6:	689b      	ldr	r3, [r3, #8]
 80137f8:	4413      	add	r3, r2
 80137fa:	1e5a      	subs	r2, r3, #1
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	689b      	ldr	r3, [r3, #8]
 8013800:	fbb2 f3f3 	udiv	r3, r2, r3
 8013804:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8013806:	69bb      	ldr	r3, [r7, #24]
 8013808:	015a      	lsls	r2, r3, #5
 801380a:	69fb      	ldr	r3, [r7, #28]
 801380c:	4413      	add	r3, r2
 801380e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013812:	691a      	ldr	r2, [r3, #16]
 8013814:	8afb      	ldrh	r3, [r7, #22]
 8013816:	04d9      	lsls	r1, r3, #19
 8013818:	4b6c      	ldr	r3, [pc, #432]	@ (80139cc <USB_EPStartXfer+0x2ec>)
 801381a:	400b      	ands	r3, r1
 801381c:	69b9      	ldr	r1, [r7, #24]
 801381e:	0148      	lsls	r0, r1, #5
 8013820:	69f9      	ldr	r1, [r7, #28]
 8013822:	4401      	add	r1, r0
 8013824:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013828:	4313      	orrs	r3, r2
 801382a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	791b      	ldrb	r3, [r3, #4]
 8013830:	2b01      	cmp	r3, #1
 8013832:	d122      	bne.n	801387a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013834:	69bb      	ldr	r3, [r7, #24]
 8013836:	015a      	lsls	r2, r3, #5
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	4413      	add	r3, r2
 801383c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	69ba      	ldr	r2, [r7, #24]
 8013844:	0151      	lsls	r1, r2, #5
 8013846:	69fa      	ldr	r2, [r7, #28]
 8013848:	440a      	add	r2, r1
 801384a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801384e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8013852:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	015a      	lsls	r2, r3, #5
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	4413      	add	r3, r2
 801385c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013860:	691a      	ldr	r2, [r3, #16]
 8013862:	8afb      	ldrh	r3, [r7, #22]
 8013864:	075b      	lsls	r3, r3, #29
 8013866:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801386a:	69b9      	ldr	r1, [r7, #24]
 801386c:	0148      	lsls	r0, r1, #5
 801386e:	69f9      	ldr	r1, [r7, #28]
 8013870:	4401      	add	r1, r0
 8013872:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8013876:	4313      	orrs	r3, r2
 8013878:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	015a      	lsls	r2, r3, #5
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	4413      	add	r3, r2
 8013882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013886:	691a      	ldr	r2, [r3, #16]
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	691b      	ldr	r3, [r3, #16]
 801388c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013890:	69b9      	ldr	r1, [r7, #24]
 8013892:	0148      	lsls	r0, r1, #5
 8013894:	69f9      	ldr	r1, [r7, #28]
 8013896:	4401      	add	r1, r0
 8013898:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801389c:	4313      	orrs	r3, r2
 801389e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80138a0:	79fb      	ldrb	r3, [r7, #7]
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d14b      	bne.n	801393e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	69db      	ldr	r3, [r3, #28]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d009      	beq.n	80138c2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	015a      	lsls	r2, r3, #5
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	4413      	add	r3, r2
 80138b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138ba:	461a      	mov	r2, r3
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	69db      	ldr	r3, [r3, #28]
 80138c0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	791b      	ldrb	r3, [r3, #4]
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	d128      	bne.n	801391c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80138ca:	69fb      	ldr	r3, [r7, #28]
 80138cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80138d0:	689b      	ldr	r3, [r3, #8]
 80138d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d110      	bne.n	80138fc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	015a      	lsls	r2, r3, #5
 80138de:	69fb      	ldr	r3, [r7, #28]
 80138e0:	4413      	add	r3, r2
 80138e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	69ba      	ldr	r2, [r7, #24]
 80138ea:	0151      	lsls	r1, r2, #5
 80138ec:	69fa      	ldr	r2, [r7, #28]
 80138ee:	440a      	add	r2, r1
 80138f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80138f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80138f8:	6013      	str	r3, [r2, #0]
 80138fa:	e00f      	b.n	801391c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80138fc:	69bb      	ldr	r3, [r7, #24]
 80138fe:	015a      	lsls	r2, r3, #5
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	4413      	add	r3, r2
 8013904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	69ba      	ldr	r2, [r7, #24]
 801390c:	0151      	lsls	r1, r2, #5
 801390e:	69fa      	ldr	r2, [r7, #28]
 8013910:	440a      	add	r2, r1
 8013912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801391a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	015a      	lsls	r2, r3, #5
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	4413      	add	r3, r2
 8013924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	69ba      	ldr	r2, [r7, #24]
 801392c:	0151      	lsls	r1, r2, #5
 801392e:	69fa      	ldr	r2, [r7, #28]
 8013930:	440a      	add	r2, r1
 8013932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013936:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801393a:	6013      	str	r3, [r2, #0]
 801393c:	e169      	b.n	8013c12 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801393e:	69bb      	ldr	r3, [r7, #24]
 8013940:	015a      	lsls	r2, r3, #5
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	4413      	add	r3, r2
 8013946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	69ba      	ldr	r2, [r7, #24]
 801394e:	0151      	lsls	r1, r2, #5
 8013950:	69fa      	ldr	r2, [r7, #28]
 8013952:	440a      	add	r2, r1
 8013954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013958:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801395c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	791b      	ldrb	r3, [r3, #4]
 8013962:	2b01      	cmp	r3, #1
 8013964:	d015      	beq.n	8013992 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	691b      	ldr	r3, [r3, #16]
 801396a:	2b00      	cmp	r3, #0
 801396c:	f000 8151 	beq.w	8013c12 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	f003 030f 	and.w	r3, r3, #15
 8013980:	2101      	movs	r1, #1
 8013982:	fa01 f303 	lsl.w	r3, r1, r3
 8013986:	69f9      	ldr	r1, [r7, #28]
 8013988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801398c:	4313      	orrs	r3, r2
 801398e:	634b      	str	r3, [r1, #52]	@ 0x34
 8013990:	e13f      	b.n	8013c12 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013998:	689b      	ldr	r3, [r3, #8]
 801399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d116      	bne.n	80139d0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80139a2:	69bb      	ldr	r3, [r7, #24]
 80139a4:	015a      	lsls	r2, r3, #5
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	4413      	add	r3, r2
 80139aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	69ba      	ldr	r2, [r7, #24]
 80139b2:	0151      	lsls	r1, r2, #5
 80139b4:	69fa      	ldr	r2, [r7, #28]
 80139b6:	440a      	add	r2, r1
 80139b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80139bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80139c0:	6013      	str	r3, [r2, #0]
 80139c2:	e015      	b.n	80139f0 <USB_EPStartXfer+0x310>
 80139c4:	e007ffff 	.word	0xe007ffff
 80139c8:	fff80000 	.word	0xfff80000
 80139cc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80139d0:	69bb      	ldr	r3, [r7, #24]
 80139d2:	015a      	lsls	r2, r3, #5
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	4413      	add	r3, r2
 80139d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	69ba      	ldr	r2, [r7, #24]
 80139e0:	0151      	lsls	r1, r2, #5
 80139e2:	69fa      	ldr	r2, [r7, #28]
 80139e4:	440a      	add	r2, r1
 80139e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80139ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80139ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	68d9      	ldr	r1, [r3, #12]
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	781a      	ldrb	r2, [r3, #0]
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	691b      	ldr	r3, [r3, #16]
 80139fc:	b298      	uxth	r0, r3
 80139fe:	79fb      	ldrb	r3, [r7, #7]
 8013a00:	9300      	str	r3, [sp, #0]
 8013a02:	4603      	mov	r3, r0
 8013a04:	68f8      	ldr	r0, [r7, #12]
 8013a06:	f000 f9b9 	bl	8013d7c <USB_WritePacket>
 8013a0a:	e102      	b.n	8013c12 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	015a      	lsls	r2, r3, #5
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	4413      	add	r3, r2
 8013a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a18:	691a      	ldr	r2, [r3, #16]
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	0159      	lsls	r1, r3, #5
 8013a1e:	69fb      	ldr	r3, [r7, #28]
 8013a20:	440b      	add	r3, r1
 8013a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a26:	4619      	mov	r1, r3
 8013a28:	4b7c      	ldr	r3, [pc, #496]	@ (8013c1c <USB_EPStartXfer+0x53c>)
 8013a2a:	4013      	ands	r3, r2
 8013a2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013a2e:	69bb      	ldr	r3, [r7, #24]
 8013a30:	015a      	lsls	r2, r3, #5
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	4413      	add	r3, r2
 8013a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a3a:	691a      	ldr	r2, [r3, #16]
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	0159      	lsls	r1, r3, #5
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	440b      	add	r3, r1
 8013a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a48:	4619      	mov	r1, r3
 8013a4a:	4b75      	ldr	r3, [pc, #468]	@ (8013c20 <USB_EPStartXfer+0x540>)
 8013a4c:	4013      	ands	r3, r2
 8013a4e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013a50:	69bb      	ldr	r3, [r7, #24]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d12f      	bne.n	8013ab6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	691b      	ldr	r3, [r3, #16]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d003      	beq.n	8013a66 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	689a      	ldr	r2, [r3, #8]
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	689a      	ldr	r2, [r3, #8]
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013a6e:	69bb      	ldr	r3, [r7, #24]
 8013a70:	015a      	lsls	r2, r3, #5
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	4413      	add	r3, r2
 8013a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013a7a:	691a      	ldr	r2, [r3, #16]
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	6a1b      	ldr	r3, [r3, #32]
 8013a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a84:	69b9      	ldr	r1, [r7, #24]
 8013a86:	0148      	lsls	r0, r1, #5
 8013a88:	69f9      	ldr	r1, [r7, #28]
 8013a8a:	4401      	add	r1, r0
 8013a8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013a90:	4313      	orrs	r3, r2
 8013a92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	015a      	lsls	r2, r3, #5
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aa0:	691b      	ldr	r3, [r3, #16]
 8013aa2:	69ba      	ldr	r2, [r7, #24]
 8013aa4:	0151      	lsls	r1, r2, #5
 8013aa6:	69fa      	ldr	r2, [r7, #28]
 8013aa8:	440a      	add	r2, r1
 8013aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013aae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013ab2:	6113      	str	r3, [r2, #16]
 8013ab4:	e05f      	b.n	8013b76 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	691b      	ldr	r3, [r3, #16]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d123      	bne.n	8013b06 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	015a      	lsls	r2, r3, #5
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013aca:	691a      	ldr	r2, [r3, #16]
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	689b      	ldr	r3, [r3, #8]
 8013ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ad4:	69b9      	ldr	r1, [r7, #24]
 8013ad6:	0148      	lsls	r0, r1, #5
 8013ad8:	69f9      	ldr	r1, [r7, #28]
 8013ada:	4401      	add	r1, r0
 8013adc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	015a      	lsls	r2, r3, #5
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	4413      	add	r3, r2
 8013aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013af0:	691b      	ldr	r3, [r3, #16]
 8013af2:	69ba      	ldr	r2, [r7, #24]
 8013af4:	0151      	lsls	r1, r2, #5
 8013af6:	69fa      	ldr	r2, [r7, #28]
 8013af8:	440a      	add	r2, r1
 8013afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013afe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013b02:	6113      	str	r3, [r2, #16]
 8013b04:	e037      	b.n	8013b76 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	691a      	ldr	r2, [r3, #16]
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	689b      	ldr	r3, [r3, #8]
 8013b0e:	4413      	add	r3, r2
 8013b10:	1e5a      	subs	r2, r3, #1
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	689b      	ldr	r3, [r3, #8]
 8013b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b1a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	689b      	ldr	r3, [r3, #8]
 8013b20:	8afa      	ldrh	r2, [r7, #22]
 8013b22:	fb03 f202 	mul.w	r2, r3, r2
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b2a:	69bb      	ldr	r3, [r7, #24]
 8013b2c:	015a      	lsls	r2, r3, #5
 8013b2e:	69fb      	ldr	r3, [r7, #28]
 8013b30:	4413      	add	r3, r2
 8013b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b36:	691a      	ldr	r2, [r3, #16]
 8013b38:	8afb      	ldrh	r3, [r7, #22]
 8013b3a:	04d9      	lsls	r1, r3, #19
 8013b3c:	4b39      	ldr	r3, [pc, #228]	@ (8013c24 <USB_EPStartXfer+0x544>)
 8013b3e:	400b      	ands	r3, r1
 8013b40:	69b9      	ldr	r1, [r7, #24]
 8013b42:	0148      	lsls	r0, r1, #5
 8013b44:	69f9      	ldr	r1, [r7, #28]
 8013b46:	4401      	add	r1, r0
 8013b48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	015a      	lsls	r2, r3, #5
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	4413      	add	r3, r2
 8013b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b5c:	691a      	ldr	r2, [r3, #16]
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	6a1b      	ldr	r3, [r3, #32]
 8013b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013b66:	69b9      	ldr	r1, [r7, #24]
 8013b68:	0148      	lsls	r0, r1, #5
 8013b6a:	69f9      	ldr	r1, [r7, #28]
 8013b6c:	4401      	add	r1, r0
 8013b6e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8013b72:	4313      	orrs	r3, r2
 8013b74:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013b76:	79fb      	ldrb	r3, [r7, #7]
 8013b78:	2b01      	cmp	r3, #1
 8013b7a:	d10d      	bne.n	8013b98 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d009      	beq.n	8013b98 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	68d9      	ldr	r1, [r3, #12]
 8013b88:	69bb      	ldr	r3, [r7, #24]
 8013b8a:	015a      	lsls	r2, r3, #5
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	4413      	add	r3, r2
 8013b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013b94:	460a      	mov	r2, r1
 8013b96:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	791b      	ldrb	r3, [r3, #4]
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d128      	bne.n	8013bf2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013ba6:	689b      	ldr	r3, [r3, #8]
 8013ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d110      	bne.n	8013bd2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013bb0:	69bb      	ldr	r3, [r7, #24]
 8013bb2:	015a      	lsls	r2, r3, #5
 8013bb4:	69fb      	ldr	r3, [r7, #28]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	69ba      	ldr	r2, [r7, #24]
 8013bc0:	0151      	lsls	r1, r2, #5
 8013bc2:	69fa      	ldr	r2, [r7, #28]
 8013bc4:	440a      	add	r2, r1
 8013bc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013bca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013bce:	6013      	str	r3, [r2, #0]
 8013bd0:	e00f      	b.n	8013bf2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	015a      	lsls	r2, r3, #5
 8013bd6:	69fb      	ldr	r3, [r7, #28]
 8013bd8:	4413      	add	r3, r2
 8013bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	69ba      	ldr	r2, [r7, #24]
 8013be2:	0151      	lsls	r1, r2, #5
 8013be4:	69fa      	ldr	r2, [r7, #28]
 8013be6:	440a      	add	r2, r1
 8013be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013bf0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	015a      	lsls	r2, r3, #5
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	69ba      	ldr	r2, [r7, #24]
 8013c02:	0151      	lsls	r1, r2, #5
 8013c04:	69fa      	ldr	r2, [r7, #28]
 8013c06:	440a      	add	r2, r1
 8013c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013c0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8013c10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c12:	2300      	movs	r3, #0
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3720      	adds	r7, #32
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	fff80000 	.word	0xfff80000
 8013c20:	e007ffff 	.word	0xe007ffff
 8013c24:	1ff80000 	.word	0x1ff80000

08013c28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b087      	sub	sp, #28
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013c32:	2300      	movs	r3, #0
 8013c34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013c36:	2300      	movs	r3, #0
 8013c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	785b      	ldrb	r3, [r3, #1]
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d14a      	bne.n	8013cdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	015a      	lsls	r2, r3, #5
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	4413      	add	r3, r2
 8013c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013c5e:	f040 8086 	bne.w	8013d6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	015a      	lsls	r2, r3, #5
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	683a      	ldr	r2, [r7, #0]
 8013c74:	7812      	ldrb	r2, [r2, #0]
 8013c76:	0151      	lsls	r1, r2, #5
 8013c78:	693a      	ldr	r2, [r7, #16]
 8013c7a:	440a      	add	r2, r1
 8013c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013c80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013c84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	015a      	lsls	r2, r3, #5
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	4413      	add	r3, r2
 8013c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	7812      	ldrb	r2, [r2, #0]
 8013c9a:	0151      	lsls	r1, r2, #5
 8013c9c:	693a      	ldr	r2, [r7, #16]
 8013c9e:	440a      	add	r2, r1
 8013ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013ca8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	3301      	adds	r3, #1
 8013cae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	d902      	bls.n	8013cc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013cba:	2301      	movs	r3, #1
 8013cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8013cbe:	e056      	b.n	8013d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	015a      	lsls	r2, r3, #5
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	4413      	add	r3, r2
 8013cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013cd8:	d0e7      	beq.n	8013caa <USB_EPStopXfer+0x82>
 8013cda:	e048      	b.n	8013d6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	015a      	lsls	r2, r3, #5
 8013ce2:	693b      	ldr	r3, [r7, #16]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013cf4:	d13b      	bne.n	8013d6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	015a      	lsls	r2, r3, #5
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	4413      	add	r3, r2
 8013d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	683a      	ldr	r2, [r7, #0]
 8013d08:	7812      	ldrb	r2, [r2, #0]
 8013d0a:	0151      	lsls	r1, r2, #5
 8013d0c:	693a      	ldr	r2, [r7, #16]
 8013d0e:	440a      	add	r2, r1
 8013d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013d14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8013d18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	015a      	lsls	r2, r3, #5
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	4413      	add	r3, r2
 8013d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	683a      	ldr	r2, [r7, #0]
 8013d2c:	7812      	ldrb	r2, [r2, #0]
 8013d2e:	0151      	lsls	r1, r2, #5
 8013d30:	693a      	ldr	r2, [r7, #16]
 8013d32:	440a      	add	r2, r1
 8013d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013d38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8013d3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	3301      	adds	r3, #1
 8013d42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d902      	bls.n	8013d54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013d4e:	2301      	movs	r3, #1
 8013d50:	75fb      	strb	r3, [r7, #23]
          break;
 8013d52:	e00c      	b.n	8013d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	015a      	lsls	r2, r3, #5
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013d6c:	d0e7      	beq.n	8013d3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	371c      	adds	r7, #28
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b089      	sub	sp, #36	@ 0x24
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	60b9      	str	r1, [r7, #8]
 8013d86:	4611      	mov	r1, r2
 8013d88:	461a      	mov	r2, r3
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	71fb      	strb	r3, [r7, #7]
 8013d8e:	4613      	mov	r3, r2
 8013d90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d123      	bne.n	8013dea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013da2:	88bb      	ldrh	r3, [r7, #4]
 8013da4:	3303      	adds	r3, #3
 8013da6:	089b      	lsrs	r3, r3, #2
 8013da8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013daa:	2300      	movs	r3, #0
 8013dac:	61bb      	str	r3, [r7, #24]
 8013dae:	e018      	b.n	8013de2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013db0:	79fb      	ldrb	r3, [r7, #7]
 8013db2:	031a      	lsls	r2, r3, #12
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	4413      	add	r3, r2
 8013db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013dc4:	69fb      	ldr	r3, [r7, #28]
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013dd6:	69fb      	ldr	r3, [r7, #28]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013ddc:	69bb      	ldr	r3, [r7, #24]
 8013dde:	3301      	adds	r3, #1
 8013de0:	61bb      	str	r3, [r7, #24]
 8013de2:	69ba      	ldr	r2, [r7, #24]
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d3e2      	bcc.n	8013db0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013dea:	2300      	movs	r3, #0
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3724      	adds	r7, #36	@ 0x24
 8013df0:	46bd      	mov	sp, r7
 8013df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df6:	4770      	bx	lr

08013df8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b08b      	sub	sp, #44	@ 0x2c
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	4613      	mov	r3, r2
 8013e04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013e0e:	88fb      	ldrh	r3, [r7, #6]
 8013e10:	089b      	lsrs	r3, r3, #2
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013e16:	88fb      	ldrh	r3, [r7, #6]
 8013e18:	f003 0303 	and.w	r3, r3, #3
 8013e1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013e1e:	2300      	movs	r3, #0
 8013e20:	623b      	str	r3, [r7, #32]
 8013e22:	e014      	b.n	8013e4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013e24:	69bb      	ldr	r3, [r7, #24]
 8013e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e32:	3301      	adds	r3, #1
 8013e34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e38:	3301      	adds	r3, #1
 8013e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e3e:	3301      	adds	r3, #1
 8013e40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8013e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e44:	3301      	adds	r3, #1
 8013e46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8013e48:	6a3b      	ldr	r3, [r7, #32]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	623b      	str	r3, [r7, #32]
 8013e4e:	6a3a      	ldr	r2, [r7, #32]
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d3e6      	bcc.n	8013e24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013e56:	8bfb      	ldrh	r3, [r7, #30]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d01e      	beq.n	8013e9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013e60:	69bb      	ldr	r3, [r7, #24]
 8013e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013e66:	461a      	mov	r2, r3
 8013e68:	f107 0310 	add.w	r3, r7, #16
 8013e6c:	6812      	ldr	r2, [r2, #0]
 8013e6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013e70:	693a      	ldr	r2, [r7, #16]
 8013e72:	6a3b      	ldr	r3, [r7, #32]
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	00db      	lsls	r3, r3, #3
 8013e78:	fa22 f303 	lsr.w	r3, r2, r3
 8013e7c:	b2da      	uxtb	r2, r3
 8013e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e80:	701a      	strb	r2, [r3, #0]
      i++;
 8013e82:	6a3b      	ldr	r3, [r7, #32]
 8013e84:	3301      	adds	r3, #1
 8013e86:	623b      	str	r3, [r7, #32]
      pDest++;
 8013e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8013e8e:	8bfb      	ldrh	r3, [r7, #30]
 8013e90:	3b01      	subs	r3, #1
 8013e92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013e94:	8bfb      	ldrh	r3, [r7, #30]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d1ea      	bne.n	8013e70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	372c      	adds	r7, #44	@ 0x2c
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	785b      	ldrb	r3, [r3, #1]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d12c      	bne.n	8013f1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ec4:	68bb      	ldr	r3, [r7, #8]
 8013ec6:	015a      	lsls	r2, r3, #5
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	4413      	add	r3, r2
 8013ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	db12      	blt.n	8013efc <USB_EPSetStall+0x54>
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d00f      	beq.n	8013efc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	015a      	lsls	r2, r3, #5
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	4413      	add	r3, r2
 8013ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	68ba      	ldr	r2, [r7, #8]
 8013eec:	0151      	lsls	r1, r2, #5
 8013eee:	68fa      	ldr	r2, [r7, #12]
 8013ef0:	440a      	add	r2, r1
 8013ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013ef6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013efa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	015a      	lsls	r2, r3, #5
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	4413      	add	r3, r2
 8013f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	68ba      	ldr	r2, [r7, #8]
 8013f0c:	0151      	lsls	r1, r2, #5
 8013f0e:	68fa      	ldr	r2, [r7, #12]
 8013f10:	440a      	add	r2, r1
 8013f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013f16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013f1a:	6013      	str	r3, [r2, #0]
 8013f1c:	e02b      	b.n	8013f76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	015a      	lsls	r2, r3, #5
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	4413      	add	r3, r2
 8013f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	db12      	blt.n	8013f56 <USB_EPSetStall+0xae>
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d00f      	beq.n	8013f56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	015a      	lsls	r2, r3, #5
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	4413      	add	r3, r2
 8013f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	68ba      	ldr	r2, [r7, #8]
 8013f46:	0151      	lsls	r1, r2, #5
 8013f48:	68fa      	ldr	r2, [r7, #12]
 8013f4a:	440a      	add	r2, r1
 8013f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013f50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8013f54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	015a      	lsls	r2, r3, #5
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	68ba      	ldr	r2, [r7, #8]
 8013f66:	0151      	lsls	r1, r2, #5
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	440a      	add	r2, r1
 8013f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013f70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013f74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f76:	2300      	movs	r3, #0
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3714      	adds	r7, #20
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	785b      	ldrb	r3, [r3, #1]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d128      	bne.n	8013ff2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	015a      	lsls	r2, r3, #5
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	68ba      	ldr	r2, [r7, #8]
 8013fb0:	0151      	lsls	r1, r2, #5
 8013fb2:	68fa      	ldr	r2, [r7, #12]
 8013fb4:	440a      	add	r2, r1
 8013fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013fba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013fbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	791b      	ldrb	r3, [r3, #4]
 8013fc4:	2b03      	cmp	r3, #3
 8013fc6:	d003      	beq.n	8013fd0 <USB_EPClearStall+0x4c>
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	791b      	ldrb	r3, [r3, #4]
 8013fcc:	2b02      	cmp	r3, #2
 8013fce:	d138      	bne.n	8014042 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	015a      	lsls	r2, r3, #5
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	68ba      	ldr	r2, [r7, #8]
 8013fe0:	0151      	lsls	r1, r2, #5
 8013fe2:	68fa      	ldr	r2, [r7, #12]
 8013fe4:	440a      	add	r2, r1
 8013fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8013fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013fee:	6013      	str	r3, [r2, #0]
 8013ff0:	e027      	b.n	8014042 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	015a      	lsls	r2, r3, #5
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	68ba      	ldr	r2, [r7, #8]
 8014002:	0151      	lsls	r1, r2, #5
 8014004:	68fa      	ldr	r2, [r7, #12]
 8014006:	440a      	add	r2, r1
 8014008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801400c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8014010:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	791b      	ldrb	r3, [r3, #4]
 8014016:	2b03      	cmp	r3, #3
 8014018:	d003      	beq.n	8014022 <USB_EPClearStall+0x9e>
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	791b      	ldrb	r3, [r3, #4]
 801401e:	2b02      	cmp	r3, #2
 8014020:	d10f      	bne.n	8014042 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	015a      	lsls	r2, r3, #5
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	4413      	add	r3, r2
 801402a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	68ba      	ldr	r2, [r7, #8]
 8014032:	0151      	lsls	r1, r2, #5
 8014034:	68fa      	ldr	r2, [r7, #12]
 8014036:	440a      	add	r2, r1
 8014038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801403c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014040:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014042:	2300      	movs	r3, #0
}
 8014044:	4618      	mov	r0, r3
 8014046:	3714      	adds	r7, #20
 8014048:	46bd      	mov	sp, r7
 801404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404e:	4770      	bx	lr

08014050 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014050:	b480      	push	{r7}
 8014052:	b085      	sub	sp, #20
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	460b      	mov	r3, r1
 801405a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	68fa      	ldr	r2, [r7, #12]
 801406a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801406e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8014072:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801407a:	681a      	ldr	r2, [r3, #0]
 801407c:	78fb      	ldrb	r3, [r7, #3]
 801407e:	011b      	lsls	r3, r3, #4
 8014080:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8014084:	68f9      	ldr	r1, [r7, #12]
 8014086:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801408a:	4313      	orrs	r3, r2
 801408c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801408e:	2300      	movs	r3, #0
}
 8014090:	4618      	mov	r0, r3
 8014092:	3714      	adds	r7, #20
 8014094:	46bd      	mov	sp, r7
 8014096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409a:	4770      	bx	lr

0801409c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801409c:	b480      	push	{r7}
 801409e:	b085      	sub	sp, #20
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	68fa      	ldr	r2, [r7, #12]
 80140b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80140b6:	f023 0303 	bic.w	r3, r3, #3
 80140ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80140ca:	f023 0302 	bic.w	r3, r3, #2
 80140ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80140d0:	2300      	movs	r3, #0
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3714      	adds	r7, #20
 80140d6:	46bd      	mov	sp, r7
 80140d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140dc:	4770      	bx	lr

080140de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80140de:	b480      	push	{r7}
 80140e0:	b085      	sub	sp, #20
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	68fa      	ldr	r2, [r7, #12]
 80140f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80140f8:	f023 0303 	bic.w	r3, r3, #3
 80140fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801410c:	f043 0302 	orr.w	r3, r3, #2
 8014110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014112:	2300      	movs	r3, #0
}
 8014114:	4618      	mov	r0, r3
 8014116:	3714      	adds	r7, #20
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr

08014120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8014120:	b480      	push	{r7}
 8014122:	b085      	sub	sp, #20
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	695b      	ldr	r3, [r3, #20]
 801412c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	699b      	ldr	r3, [r3, #24]
 8014132:	68fa      	ldr	r2, [r7, #12]
 8014134:	4013      	ands	r3, r2
 8014136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014138:	68fb      	ldr	r3, [r7, #12]
}
 801413a:	4618      	mov	r0, r3
 801413c:	3714      	adds	r7, #20
 801413e:	46bd      	mov	sp, r7
 8014140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014144:	4770      	bx	lr

08014146 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8014146:	b480      	push	{r7}
 8014148:	b085      	sub	sp, #20
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014158:	699b      	ldr	r3, [r3, #24]
 801415a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014162:	69db      	ldr	r3, [r3, #28]
 8014164:	68ba      	ldr	r2, [r7, #8]
 8014166:	4013      	ands	r3, r2
 8014168:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	0c1b      	lsrs	r3, r3, #16
}
 801416e:	4618      	mov	r0, r3
 8014170:	3714      	adds	r7, #20
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr

0801417a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801417a:	b480      	push	{r7}
 801417c:	b085      	sub	sp, #20
 801417e:	af00      	add	r7, sp, #0
 8014180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801418c:	699b      	ldr	r3, [r3, #24]
 801418e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014196:	69db      	ldr	r3, [r3, #28]
 8014198:	68ba      	ldr	r2, [r7, #8]
 801419a:	4013      	ands	r3, r2
 801419c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	b29b      	uxth	r3, r3
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3714      	adds	r7, #20
 80141a6:	46bd      	mov	sp, r7
 80141a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ac:	4770      	bx	lr

080141ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80141ae:	b480      	push	{r7}
 80141b0:	b085      	sub	sp, #20
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
 80141b6:	460b      	mov	r3, r1
 80141b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80141be:	78fb      	ldrb	r3, [r7, #3]
 80141c0:	015a      	lsls	r2, r3, #5
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	4413      	add	r3, r2
 80141c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80141ca:	689b      	ldr	r3, [r3, #8]
 80141cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80141d4:	695b      	ldr	r3, [r3, #20]
 80141d6:	68ba      	ldr	r2, [r7, #8]
 80141d8:	4013      	ands	r3, r2
 80141da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80141dc:	68bb      	ldr	r3, [r7, #8]
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3714      	adds	r7, #20
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr

080141ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80141ea:	b480      	push	{r7}
 80141ec:	b087      	sub	sp, #28
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	6078      	str	r0, [r7, #4]
 80141f2:	460b      	mov	r3, r1
 80141f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014200:	691b      	ldr	r3, [r3, #16]
 8014202:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801420c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801420e:	78fb      	ldrb	r3, [r7, #3]
 8014210:	f003 030f 	and.w	r3, r3, #15
 8014214:	68fa      	ldr	r2, [r7, #12]
 8014216:	fa22 f303 	lsr.w	r3, r2, r3
 801421a:	01db      	lsls	r3, r3, #7
 801421c:	b2db      	uxtb	r3, r3
 801421e:	693a      	ldr	r2, [r7, #16]
 8014220:	4313      	orrs	r3, r2
 8014222:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014224:	78fb      	ldrb	r3, [r7, #3]
 8014226:	015a      	lsls	r2, r3, #5
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	4413      	add	r3, r2
 801422c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014230:	689b      	ldr	r3, [r3, #8]
 8014232:	693a      	ldr	r2, [r7, #16]
 8014234:	4013      	ands	r3, r2
 8014236:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014238:	68bb      	ldr	r3, [r7, #8]
}
 801423a:	4618      	mov	r0, r3
 801423c:	371c      	adds	r7, #28
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr

08014246 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8014246:	b480      	push	{r7}
 8014248:	b083      	sub	sp, #12
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	695b      	ldr	r3, [r3, #20]
 8014252:	f003 0301 	and.w	r3, r3, #1
}
 8014256:	4618      	mov	r0, r3
 8014258:	370c      	adds	r7, #12
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr
	...

08014264 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8014264:	b480      	push	{r7}
 8014266:	b085      	sub	sp, #20
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801427e:	4619      	mov	r1, r3
 8014280:	4b09      	ldr	r3, [pc, #36]	@ (80142a8 <USB_ActivateSetup+0x44>)
 8014282:	4013      	ands	r3, r2
 8014284:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	68fa      	ldr	r2, [r7, #12]
 8014290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801429a:	2300      	movs	r3, #0
}
 801429c:	4618      	mov	r0, r3
 801429e:	3714      	adds	r7, #20
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr
 80142a8:	fffff800 	.word	0xfffff800

080142ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80142ac:	b480      	push	{r7}
 80142ae:	b087      	sub	sp, #28
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	460b      	mov	r3, r1
 80142b6:	607a      	str	r2, [r7, #4]
 80142b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	333c      	adds	r3, #60	@ 0x3c
 80142c2:	3304      	adds	r3, #4
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	4a26      	ldr	r2, [pc, #152]	@ (8014364 <USB_EP0_OutStart+0xb8>)
 80142cc:	4293      	cmp	r3, r2
 80142ce:	d90a      	bls.n	80142e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80142dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80142e0:	d101      	bne.n	80142e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80142e2:	2300      	movs	r3, #0
 80142e4:	e037      	b.n	8014356 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142ec:	461a      	mov	r2, r3
 80142ee:	2300      	movs	r3, #0
 80142f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80142f8:	691b      	ldr	r3, [r3, #16]
 80142fa:	697a      	ldr	r2, [r7, #20]
 80142fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801430c:	691b      	ldr	r3, [r3, #16]
 801430e:	697a      	ldr	r2, [r7, #20]
 8014310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014314:	f043 0318 	orr.w	r3, r3, #24
 8014318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	697a      	ldr	r2, [r7, #20]
 8014324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014328:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801432c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801432e:	7afb      	ldrb	r3, [r7, #11]
 8014330:	2b01      	cmp	r3, #1
 8014332:	d10f      	bne.n	8014354 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801433a:	461a      	mov	r2, r3
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	697a      	ldr	r2, [r7, #20]
 801434a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801434e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8014352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014354:	2300      	movs	r3, #0
}
 8014356:	4618      	mov	r0, r3
 8014358:	371c      	adds	r7, #28
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	4f54300a 	.word	0x4f54300a

08014368 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014368:	b480      	push	{r7}
 801436a:	b085      	sub	sp, #20
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014370:	2300      	movs	r3, #0
 8014372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	3301      	adds	r3, #1
 8014378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014380:	d901      	bls.n	8014386 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014382:	2303      	movs	r3, #3
 8014384:	e01b      	b.n	80143be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	691b      	ldr	r3, [r3, #16]
 801438a:	2b00      	cmp	r3, #0
 801438c:	daf2      	bge.n	8014374 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801438e:	2300      	movs	r3, #0
 8014390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	691b      	ldr	r3, [r3, #16]
 8014396:	f043 0201 	orr.w	r2, r3, #1
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	3301      	adds	r3, #1
 80143a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80143aa:	d901      	bls.n	80143b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80143ac:	2303      	movs	r3, #3
 80143ae:	e006      	b.n	80143be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	f003 0301 	and.w	r3, r3, #1
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d0f0      	beq.n	801439e <USB_CoreReset+0x36>

  return HAL_OK;
 80143bc:	2300      	movs	r3, #0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3714      	adds	r7, #20
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr
	...

080143cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	460b      	mov	r3, r1
 80143d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80143d8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80143dc:	f002 fcfe 	bl	8016ddc <USBD_static_malloc>
 80143e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d109      	bne.n	80143fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	32b0      	adds	r2, #176	@ 0xb0
 80143f2:	2100      	movs	r1, #0
 80143f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80143f8:	2302      	movs	r3, #2
 80143fa:	e0d4      	b.n	80145a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80143fc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8014400:	2100      	movs	r1, #0
 8014402:	68f8      	ldr	r0, [r7, #12]
 8014404:	f002 fd50 	bl	8016ea8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	32b0      	adds	r2, #176	@ 0xb0
 8014412:	68f9      	ldr	r1, [r7, #12]
 8014414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	32b0      	adds	r2, #176	@ 0xb0
 8014422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	7c1b      	ldrb	r3, [r3, #16]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d138      	bne.n	80144a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014434:	4b5e      	ldr	r3, [pc, #376]	@ (80145b0 <USBD_CDC_Init+0x1e4>)
 8014436:	7819      	ldrb	r1, [r3, #0]
 8014438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801443c:	2202      	movs	r2, #2
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f002 fba9 	bl	8016b96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014444:	4b5a      	ldr	r3, [pc, #360]	@ (80145b0 <USBD_CDC_Init+0x1e4>)
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	f003 020f 	and.w	r2, r3, #15
 801444c:	6879      	ldr	r1, [r7, #4]
 801444e:	4613      	mov	r3, r2
 8014450:	009b      	lsls	r3, r3, #2
 8014452:	4413      	add	r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	440b      	add	r3, r1
 8014458:	3324      	adds	r3, #36	@ 0x24
 801445a:	2201      	movs	r2, #1
 801445c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801445e:	4b55      	ldr	r3, [pc, #340]	@ (80145b4 <USBD_CDC_Init+0x1e8>)
 8014460:	7819      	ldrb	r1, [r3, #0]
 8014462:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014466:	2202      	movs	r2, #2
 8014468:	6878      	ldr	r0, [r7, #4]
 801446a:	f002 fb94 	bl	8016b96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801446e:	4b51      	ldr	r3, [pc, #324]	@ (80145b4 <USBD_CDC_Init+0x1e8>)
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	f003 020f 	and.w	r2, r3, #15
 8014476:	6879      	ldr	r1, [r7, #4]
 8014478:	4613      	mov	r3, r2
 801447a:	009b      	lsls	r3, r3, #2
 801447c:	4413      	add	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	440b      	add	r3, r1
 8014482:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014486:	2201      	movs	r2, #1
 8014488:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801448a:	4b4b      	ldr	r3, [pc, #300]	@ (80145b8 <USBD_CDC_Init+0x1ec>)
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	f003 020f 	and.w	r2, r3, #15
 8014492:	6879      	ldr	r1, [r7, #4]
 8014494:	4613      	mov	r3, r2
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	4413      	add	r3, r2
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	440b      	add	r3, r1
 801449e:	3326      	adds	r3, #38	@ 0x26
 80144a0:	2210      	movs	r2, #16
 80144a2:	801a      	strh	r2, [r3, #0]
 80144a4:	e035      	b.n	8014512 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80144a6:	4b42      	ldr	r3, [pc, #264]	@ (80145b0 <USBD_CDC_Init+0x1e4>)
 80144a8:	7819      	ldrb	r1, [r3, #0]
 80144aa:	2340      	movs	r3, #64	@ 0x40
 80144ac:	2202      	movs	r2, #2
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f002 fb71 	bl	8016b96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80144b4:	4b3e      	ldr	r3, [pc, #248]	@ (80145b0 <USBD_CDC_Init+0x1e4>)
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	f003 020f 	and.w	r2, r3, #15
 80144bc:	6879      	ldr	r1, [r7, #4]
 80144be:	4613      	mov	r3, r2
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	4413      	add	r3, r2
 80144c4:	009b      	lsls	r3, r3, #2
 80144c6:	440b      	add	r3, r1
 80144c8:	3324      	adds	r3, #36	@ 0x24
 80144ca:	2201      	movs	r2, #1
 80144cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80144ce:	4b39      	ldr	r3, [pc, #228]	@ (80145b4 <USBD_CDC_Init+0x1e8>)
 80144d0:	7819      	ldrb	r1, [r3, #0]
 80144d2:	2340      	movs	r3, #64	@ 0x40
 80144d4:	2202      	movs	r2, #2
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f002 fb5d 	bl	8016b96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80144dc:	4b35      	ldr	r3, [pc, #212]	@ (80145b4 <USBD_CDC_Init+0x1e8>)
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	f003 020f 	and.w	r2, r3, #15
 80144e4:	6879      	ldr	r1, [r7, #4]
 80144e6:	4613      	mov	r3, r2
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4413      	add	r3, r2
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	440b      	add	r3, r1
 80144f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80144f4:	2201      	movs	r2, #1
 80144f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80144f8:	4b2f      	ldr	r3, [pc, #188]	@ (80145b8 <USBD_CDC_Init+0x1ec>)
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	f003 020f 	and.w	r2, r3, #15
 8014500:	6879      	ldr	r1, [r7, #4]
 8014502:	4613      	mov	r3, r2
 8014504:	009b      	lsls	r3, r3, #2
 8014506:	4413      	add	r3, r2
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	440b      	add	r3, r1
 801450c:	3326      	adds	r3, #38	@ 0x26
 801450e:	2210      	movs	r2, #16
 8014510:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014512:	4b29      	ldr	r3, [pc, #164]	@ (80145b8 <USBD_CDC_Init+0x1ec>)
 8014514:	7819      	ldrb	r1, [r3, #0]
 8014516:	2308      	movs	r3, #8
 8014518:	2203      	movs	r2, #3
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f002 fb3b 	bl	8016b96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014520:	4b25      	ldr	r3, [pc, #148]	@ (80145b8 <USBD_CDC_Init+0x1ec>)
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	f003 020f 	and.w	r2, r3, #15
 8014528:	6879      	ldr	r1, [r7, #4]
 801452a:	4613      	mov	r3, r2
 801452c:	009b      	lsls	r3, r3, #2
 801452e:	4413      	add	r3, r2
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	440b      	add	r3, r1
 8014534:	3324      	adds	r3, #36	@ 0x24
 8014536:	2201      	movs	r2, #1
 8014538:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2200      	movs	r2, #0
 801453e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014548:	687a      	ldr	r2, [r7, #4]
 801454a:	33b0      	adds	r3, #176	@ 0xb0
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	4413      	add	r3, r2
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	2200      	movs	r2, #0
 801455a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	2200      	movs	r2, #0
 8014562:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801456c:	2b00      	cmp	r3, #0
 801456e:	d101      	bne.n	8014574 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014570:	2302      	movs	r3, #2
 8014572:	e018      	b.n	80145a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	7c1b      	ldrb	r3, [r3, #16]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d10a      	bne.n	8014592 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801457c:	4b0d      	ldr	r3, [pc, #52]	@ (80145b4 <USBD_CDC_Init+0x1e8>)
 801457e:	7819      	ldrb	r1, [r3, #0]
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f002 fbf2 	bl	8016d74 <USBD_LL_PrepareReceive>
 8014590:	e008      	b.n	80145a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014592:	4b08      	ldr	r3, [pc, #32]	@ (80145b4 <USBD_CDC_Init+0x1e8>)
 8014594:	7819      	ldrb	r1, [r3, #0]
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801459c:	2340      	movs	r3, #64	@ 0x40
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f002 fbe8 	bl	8016d74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	2400009b 	.word	0x2400009b
 80145b4:	2400009c 	.word	0x2400009c
 80145b8:	2400009d 	.word	0x2400009d

080145bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	460b      	mov	r3, r1
 80145c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80145c8:	4b3a      	ldr	r3, [pc, #232]	@ (80146b4 <USBD_CDC_DeInit+0xf8>)
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	4619      	mov	r1, r3
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f002 fb07 	bl	8016be2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80145d4:	4b37      	ldr	r3, [pc, #220]	@ (80146b4 <USBD_CDC_DeInit+0xf8>)
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	f003 020f 	and.w	r2, r3, #15
 80145dc:	6879      	ldr	r1, [r7, #4]
 80145de:	4613      	mov	r3, r2
 80145e0:	009b      	lsls	r3, r3, #2
 80145e2:	4413      	add	r3, r2
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	440b      	add	r3, r1
 80145e8:	3324      	adds	r3, #36	@ 0x24
 80145ea:	2200      	movs	r2, #0
 80145ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80145ee:	4b32      	ldr	r3, [pc, #200]	@ (80146b8 <USBD_CDC_DeInit+0xfc>)
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	4619      	mov	r1, r3
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f002 faf4 	bl	8016be2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80145fa:	4b2f      	ldr	r3, [pc, #188]	@ (80146b8 <USBD_CDC_DeInit+0xfc>)
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	f003 020f 	and.w	r2, r3, #15
 8014602:	6879      	ldr	r1, [r7, #4]
 8014604:	4613      	mov	r3, r2
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4413      	add	r3, r2
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	440b      	add	r3, r1
 801460e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014612:	2200      	movs	r2, #0
 8014614:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014616:	4b29      	ldr	r3, [pc, #164]	@ (80146bc <USBD_CDC_DeInit+0x100>)
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	4619      	mov	r1, r3
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f002 fae0 	bl	8016be2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014622:	4b26      	ldr	r3, [pc, #152]	@ (80146bc <USBD_CDC_DeInit+0x100>)
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	f003 020f 	and.w	r2, r3, #15
 801462a:	6879      	ldr	r1, [r7, #4]
 801462c:	4613      	mov	r3, r2
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	4413      	add	r3, r2
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	440b      	add	r3, r1
 8014636:	3324      	adds	r3, #36	@ 0x24
 8014638:	2200      	movs	r2, #0
 801463a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801463c:	4b1f      	ldr	r3, [pc, #124]	@ (80146bc <USBD_CDC_DeInit+0x100>)
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	f003 020f 	and.w	r2, r3, #15
 8014644:	6879      	ldr	r1, [r7, #4]
 8014646:	4613      	mov	r3, r2
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	4413      	add	r3, r2
 801464c:	009b      	lsls	r3, r3, #2
 801464e:	440b      	add	r3, r1
 8014650:	3326      	adds	r3, #38	@ 0x26
 8014652:	2200      	movs	r2, #0
 8014654:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	32b0      	adds	r2, #176	@ 0xb0
 8014660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d01f      	beq.n	80146a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	33b0      	adds	r3, #176	@ 0xb0
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	4413      	add	r3, r2
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	32b0      	adds	r2, #176	@ 0xb0
 8014686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801468a:	4618      	mov	r0, r3
 801468c:	f002 fbb4 	bl	8016df8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	32b0      	adds	r2, #176	@ 0xb0
 801469a:	2100      	movs	r1, #0
 801469c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80146a8:	2300      	movs	r3, #0
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	2400009b 	.word	0x2400009b
 80146b8:	2400009c 	.word	0x2400009c
 80146bc:	2400009d 	.word	0x2400009d

080146c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	32b0      	adds	r2, #176	@ 0xb0
 80146d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80146da:	2300      	movs	r3, #0
 80146dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80146de:	2300      	movs	r3, #0
 80146e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80146e2:	2300      	movs	r3, #0
 80146e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d101      	bne.n	80146f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80146ec:	2303      	movs	r3, #3
 80146ee:	e0bf      	b.n	8014870 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d050      	beq.n	801479e <USBD_CDC_Setup+0xde>
 80146fc:	2b20      	cmp	r3, #32
 80146fe:	f040 80af 	bne.w	8014860 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	88db      	ldrh	r3, [r3, #6]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d03a      	beq.n	8014780 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	781b      	ldrb	r3, [r3, #0]
 801470e:	b25b      	sxtb	r3, r3
 8014710:	2b00      	cmp	r3, #0
 8014712:	da1b      	bge.n	801474c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801471a:	687a      	ldr	r2, [r7, #4]
 801471c:	33b0      	adds	r3, #176	@ 0xb0
 801471e:	009b      	lsls	r3, r3, #2
 8014720:	4413      	add	r3, r2
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	689b      	ldr	r3, [r3, #8]
 8014726:	683a      	ldr	r2, [r7, #0]
 8014728:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801472a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801472c:	683a      	ldr	r2, [r7, #0]
 801472e:	88d2      	ldrh	r2, [r2, #6]
 8014730:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	88db      	ldrh	r3, [r3, #6]
 8014736:	2b07      	cmp	r3, #7
 8014738:	bf28      	it	cs
 801473a:	2307      	movcs	r3, #7
 801473c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	89fa      	ldrh	r2, [r7, #14]
 8014742:	4619      	mov	r1, r3
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f001 fdbd 	bl	80162c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801474a:	e090      	b.n	801486e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	785a      	ldrb	r2, [r3, #1]
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	88db      	ldrh	r3, [r3, #6]
 801475a:	2b3f      	cmp	r3, #63	@ 0x3f
 801475c:	d803      	bhi.n	8014766 <USBD_CDC_Setup+0xa6>
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	88db      	ldrh	r3, [r3, #6]
 8014762:	b2da      	uxtb	r2, r3
 8014764:	e000      	b.n	8014768 <USBD_CDC_Setup+0xa8>
 8014766:	2240      	movs	r2, #64	@ 0x40
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801476e:	6939      	ldr	r1, [r7, #16]
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8014776:	461a      	mov	r2, r3
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f001 fdcf 	bl	801631c <USBD_CtlPrepareRx>
      break;
 801477e:	e076      	b.n	801486e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	33b0      	adds	r3, #176	@ 0xb0
 801478a:	009b      	lsls	r3, r3, #2
 801478c:	4413      	add	r3, r2
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	689b      	ldr	r3, [r3, #8]
 8014792:	683a      	ldr	r2, [r7, #0]
 8014794:	7850      	ldrb	r0, [r2, #1]
 8014796:	2200      	movs	r2, #0
 8014798:	6839      	ldr	r1, [r7, #0]
 801479a:	4798      	blx	r3
      break;
 801479c:	e067      	b.n	801486e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	785b      	ldrb	r3, [r3, #1]
 80147a2:	2b0b      	cmp	r3, #11
 80147a4:	d851      	bhi.n	801484a <USBD_CDC_Setup+0x18a>
 80147a6:	a201      	add	r2, pc, #4	@ (adr r2, 80147ac <USBD_CDC_Setup+0xec>)
 80147a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147ac:	080147dd 	.word	0x080147dd
 80147b0:	08014859 	.word	0x08014859
 80147b4:	0801484b 	.word	0x0801484b
 80147b8:	0801484b 	.word	0x0801484b
 80147bc:	0801484b 	.word	0x0801484b
 80147c0:	0801484b 	.word	0x0801484b
 80147c4:	0801484b 	.word	0x0801484b
 80147c8:	0801484b 	.word	0x0801484b
 80147cc:	0801484b 	.word	0x0801484b
 80147d0:	0801484b 	.word	0x0801484b
 80147d4:	08014807 	.word	0x08014807
 80147d8:	08014831 	.word	0x08014831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147e2:	b2db      	uxtb	r3, r3
 80147e4:	2b03      	cmp	r3, #3
 80147e6:	d107      	bne.n	80147f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80147e8:	f107 030a 	add.w	r3, r7, #10
 80147ec:	2202      	movs	r2, #2
 80147ee:	4619      	mov	r1, r3
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f001 fd67 	bl	80162c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80147f6:	e032      	b.n	801485e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80147f8:	6839      	ldr	r1, [r7, #0]
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f001 fce5 	bl	80161ca <USBD_CtlError>
            ret = USBD_FAIL;
 8014800:	2303      	movs	r3, #3
 8014802:	75fb      	strb	r3, [r7, #23]
          break;
 8014804:	e02b      	b.n	801485e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801480c:	b2db      	uxtb	r3, r3
 801480e:	2b03      	cmp	r3, #3
 8014810:	d107      	bne.n	8014822 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014812:	f107 030d 	add.w	r3, r7, #13
 8014816:	2201      	movs	r2, #1
 8014818:	4619      	mov	r1, r3
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f001 fd52 	bl	80162c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014820:	e01d      	b.n	801485e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014822:	6839      	ldr	r1, [r7, #0]
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f001 fcd0 	bl	80161ca <USBD_CtlError>
            ret = USBD_FAIL;
 801482a:	2303      	movs	r3, #3
 801482c:	75fb      	strb	r3, [r7, #23]
          break;
 801482e:	e016      	b.n	801485e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014836:	b2db      	uxtb	r3, r3
 8014838:	2b03      	cmp	r3, #3
 801483a:	d00f      	beq.n	801485c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801483c:	6839      	ldr	r1, [r7, #0]
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f001 fcc3 	bl	80161ca <USBD_CtlError>
            ret = USBD_FAIL;
 8014844:	2303      	movs	r3, #3
 8014846:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014848:	e008      	b.n	801485c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801484a:	6839      	ldr	r1, [r7, #0]
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f001 fcbc 	bl	80161ca <USBD_CtlError>
          ret = USBD_FAIL;
 8014852:	2303      	movs	r3, #3
 8014854:	75fb      	strb	r3, [r7, #23]
          break;
 8014856:	e002      	b.n	801485e <USBD_CDC_Setup+0x19e>
          break;
 8014858:	bf00      	nop
 801485a:	e008      	b.n	801486e <USBD_CDC_Setup+0x1ae>
          break;
 801485c:	bf00      	nop
      }
      break;
 801485e:	e006      	b.n	801486e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014860:	6839      	ldr	r1, [r7, #0]
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f001 fcb1 	bl	80161ca <USBD_CtlError>
      ret = USBD_FAIL;
 8014868:	2303      	movs	r3, #3
 801486a:	75fb      	strb	r3, [r7, #23]
      break;
 801486c:	bf00      	nop
  }

  return (uint8_t)ret;
 801486e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014870:	4618      	mov	r0, r3
 8014872:	3718      	adds	r7, #24
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}

08014878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
 8014880:	460b      	mov	r3, r1
 8014882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801488a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	32b0      	adds	r2, #176	@ 0xb0
 8014896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d101      	bne.n	80148a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801489e:	2303      	movs	r3, #3
 80148a0:	e065      	b.n	801496e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	32b0      	adds	r2, #176	@ 0xb0
 80148ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80148b2:	78fb      	ldrb	r3, [r7, #3]
 80148b4:	f003 020f 	and.w	r2, r3, #15
 80148b8:	6879      	ldr	r1, [r7, #4]
 80148ba:	4613      	mov	r3, r2
 80148bc:	009b      	lsls	r3, r3, #2
 80148be:	4413      	add	r3, r2
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	440b      	add	r3, r1
 80148c4:	3318      	adds	r3, #24
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d02f      	beq.n	801492c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80148cc:	78fb      	ldrb	r3, [r7, #3]
 80148ce:	f003 020f 	and.w	r2, r3, #15
 80148d2:	6879      	ldr	r1, [r7, #4]
 80148d4:	4613      	mov	r3, r2
 80148d6:	009b      	lsls	r3, r3, #2
 80148d8:	4413      	add	r3, r2
 80148da:	009b      	lsls	r3, r3, #2
 80148dc:	440b      	add	r3, r1
 80148de:	3318      	adds	r3, #24
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	78fb      	ldrb	r3, [r7, #3]
 80148e4:	f003 010f 	and.w	r1, r3, #15
 80148e8:	68f8      	ldr	r0, [r7, #12]
 80148ea:	460b      	mov	r3, r1
 80148ec:	00db      	lsls	r3, r3, #3
 80148ee:	440b      	add	r3, r1
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	4403      	add	r3, r0
 80148f4:	331c      	adds	r3, #28
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80148fc:	fb01 f303 	mul.w	r3, r1, r3
 8014900:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014902:	2b00      	cmp	r3, #0
 8014904:	d112      	bne.n	801492c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014906:	78fb      	ldrb	r3, [r7, #3]
 8014908:	f003 020f 	and.w	r2, r3, #15
 801490c:	6879      	ldr	r1, [r7, #4]
 801490e:	4613      	mov	r3, r2
 8014910:	009b      	lsls	r3, r3, #2
 8014912:	4413      	add	r3, r2
 8014914:	009b      	lsls	r3, r3, #2
 8014916:	440b      	add	r3, r1
 8014918:	3318      	adds	r3, #24
 801491a:	2200      	movs	r2, #0
 801491c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801491e:	78f9      	ldrb	r1, [r7, #3]
 8014920:	2300      	movs	r3, #0
 8014922:	2200      	movs	r2, #0
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f002 fa04 	bl	8016d32 <USBD_LL_Transmit>
 801492a:	e01f      	b.n	801496c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	2200      	movs	r2, #0
 8014930:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	33b0      	adds	r3, #176	@ 0xb0
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	4413      	add	r3, r2
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	691b      	ldr	r3, [r3, #16]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d010      	beq.n	801496c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	33b0      	adds	r3, #176	@ 0xb0
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	4413      	add	r3, r2
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	691b      	ldr	r3, [r3, #16]
 801495c:	68ba      	ldr	r2, [r7, #8]
 801495e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8014962:	68ba      	ldr	r2, [r7, #8]
 8014964:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8014968:	78fa      	ldrb	r2, [r7, #3]
 801496a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801496c:	2300      	movs	r3, #0
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}

08014976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014976:	b580      	push	{r7, lr}
 8014978:	b084      	sub	sp, #16
 801497a:	af00      	add	r7, sp, #0
 801497c:	6078      	str	r0, [r7, #4]
 801497e:	460b      	mov	r3, r1
 8014980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	32b0      	adds	r2, #176	@ 0xb0
 801498c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014990:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	32b0      	adds	r2, #176	@ 0xb0
 801499c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d101      	bne.n	80149a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80149a4:	2303      	movs	r3, #3
 80149a6:	e01a      	b.n	80149de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80149a8:	78fb      	ldrb	r3, [r7, #3]
 80149aa:	4619      	mov	r1, r3
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f002 fa02 	bl	8016db6 <USBD_LL_GetRxDataSize>
 80149b2:	4602      	mov	r2, r0
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80149c0:	687a      	ldr	r2, [r7, #4]
 80149c2:	33b0      	adds	r3, #176	@ 0xb0
 80149c4:	009b      	lsls	r3, r3, #2
 80149c6:	4413      	add	r3, r2
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	68fa      	ldr	r2, [r7, #12]
 80149ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80149d2:	68fa      	ldr	r2, [r7, #12]
 80149d4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80149d8:	4611      	mov	r1, r2
 80149da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80149dc:	2300      	movs	r3, #0
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}

080149e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80149e6:	b580      	push	{r7, lr}
 80149e8:	b084      	sub	sp, #16
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	32b0      	adds	r2, #176	@ 0xb0
 80149f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d101      	bne.n	8014a08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014a04:	2303      	movs	r3, #3
 8014a06:	e024      	b.n	8014a52 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014a0e:	687a      	ldr	r2, [r7, #4]
 8014a10:	33b0      	adds	r3, #176	@ 0xb0
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	4413      	add	r3, r2
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d019      	beq.n	8014a50 <USBD_CDC_EP0_RxReady+0x6a>
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8014a22:	2bff      	cmp	r3, #255	@ 0xff
 8014a24:	d014      	beq.n	8014a50 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	33b0      	adds	r3, #176	@ 0xb0
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	4413      	add	r3, r2
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	689b      	ldr	r3, [r3, #8]
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8014a3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014a40:	68fa      	ldr	r2, [r7, #12]
 8014a42:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014a46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	22ff      	movs	r2, #255	@ 0xff
 8014a4c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8014a50:	2300      	movs	r3, #0
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
	...

08014a5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b086      	sub	sp, #24
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014a64:	2182      	movs	r1, #130	@ 0x82
 8014a66:	4818      	ldr	r0, [pc, #96]	@ (8014ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014a68:	f000 fd4f 	bl	801550a <USBD_GetEpDesc>
 8014a6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014a6e:	2101      	movs	r1, #1
 8014a70:	4815      	ldr	r0, [pc, #84]	@ (8014ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014a72:	f000 fd4a 	bl	801550a <USBD_GetEpDesc>
 8014a76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014a78:	2181      	movs	r1, #129	@ 0x81
 8014a7a:	4813      	ldr	r0, [pc, #76]	@ (8014ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014a7c:	f000 fd45 	bl	801550a <USBD_GetEpDesc>
 8014a80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d002      	beq.n	8014a8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	2210      	movs	r2, #16
 8014a8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d006      	beq.n	8014aa2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014a94:	693b      	ldr	r3, [r7, #16]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014a9c:	711a      	strb	r2, [r3, #4]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d006      	beq.n	8014ab6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014ab0:	711a      	strb	r2, [r3, #4]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2243      	movs	r2, #67	@ 0x43
 8014aba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014abc:	4b02      	ldr	r3, [pc, #8]	@ (8014ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3718      	adds	r7, #24
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	24000058 	.word	0x24000058

08014acc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ad4:	2182      	movs	r1, #130	@ 0x82
 8014ad6:	4818      	ldr	r0, [pc, #96]	@ (8014b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014ad8:	f000 fd17 	bl	801550a <USBD_GetEpDesc>
 8014adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014ade:	2101      	movs	r1, #1
 8014ae0:	4815      	ldr	r0, [pc, #84]	@ (8014b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014ae2:	f000 fd12 	bl	801550a <USBD_GetEpDesc>
 8014ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014ae8:	2181      	movs	r1, #129	@ 0x81
 8014aea:	4813      	ldr	r0, [pc, #76]	@ (8014b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014aec:	f000 fd0d 	bl	801550a <USBD_GetEpDesc>
 8014af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	2210      	movs	r2, #16
 8014afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014afe:	693b      	ldr	r3, [r7, #16]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d006      	beq.n	8014b12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	2200      	movs	r2, #0
 8014b08:	711a      	strb	r2, [r3, #4]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	f042 0202 	orr.w	r2, r2, #2
 8014b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d006      	beq.n	8014b26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	711a      	strb	r2, [r3, #4]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	f042 0202 	orr.w	r2, r2, #2
 8014b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	2243      	movs	r2, #67	@ 0x43
 8014b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b2c:	4b02      	ldr	r3, [pc, #8]	@ (8014b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3718      	adds	r7, #24
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	24000058 	.word	0x24000058

08014b3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b086      	sub	sp, #24
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b44:	2182      	movs	r1, #130	@ 0x82
 8014b46:	4818      	ldr	r0, [pc, #96]	@ (8014ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b48:	f000 fcdf 	bl	801550a <USBD_GetEpDesc>
 8014b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b4e:	2101      	movs	r1, #1
 8014b50:	4815      	ldr	r0, [pc, #84]	@ (8014ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b52:	f000 fcda 	bl	801550a <USBD_GetEpDesc>
 8014b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b58:	2181      	movs	r1, #129	@ 0x81
 8014b5a:	4813      	ldr	r0, [pc, #76]	@ (8014ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014b5c:	f000 fcd5 	bl	801550a <USBD_GetEpDesc>
 8014b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d002      	beq.n	8014b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	2210      	movs	r2, #16
 8014b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d006      	beq.n	8014b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b74:	693b      	ldr	r3, [r7, #16]
 8014b76:	2200      	movs	r2, #0
 8014b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014b7c:	711a      	strb	r2, [r3, #4]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d006      	beq.n	8014b96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014b90:	711a      	strb	r2, [r3, #4]
 8014b92:	2200      	movs	r2, #0
 8014b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2243      	movs	r2, #67	@ 0x43
 8014b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b9c:	4b02      	ldr	r3, [pc, #8]	@ (8014ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3718      	adds	r7, #24
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
 8014ba6:	bf00      	nop
 8014ba8:	24000058 	.word	0x24000058

08014bac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b083      	sub	sp, #12
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	220a      	movs	r2, #10
 8014bb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014bba:	4b03      	ldr	r3, [pc, #12]	@ (8014bc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	370c      	adds	r7, #12
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr
 8014bc8:	24000014 	.word	0x24000014

08014bcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014bcc:	b480      	push	{r7}
 8014bce:	b083      	sub	sp, #12
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
 8014bd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d101      	bne.n	8014be0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	e009      	b.n	8014bf4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	33b0      	adds	r3, #176	@ 0xb0
 8014bea:	009b      	lsls	r3, r3, #2
 8014bec:	4413      	add	r3, r2
 8014bee:	683a      	ldr	r2, [r7, #0]
 8014bf0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014bf2:	2300      	movs	r3, #0
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	370c      	adds	r7, #12
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfe:	4770      	bx	lr

08014c00 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014c00:	b480      	push	{r7}
 8014c02:	b087      	sub	sp, #28
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	60f8      	str	r0, [r7, #12]
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	32b0      	adds	r2, #176	@ 0xb0
 8014c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c1a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d101      	bne.n	8014c26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014c22:	2303      	movs	r3, #3
 8014c24:	e008      	b.n	8014c38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	68ba      	ldr	r2, [r7, #8]
 8014c2a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8014c36:	2300      	movs	r3, #0
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	371c      	adds	r7, #28
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr

08014c44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014c44:	b480      	push	{r7}
 8014c46:	b085      	sub	sp, #20
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	32b0      	adds	r2, #176	@ 0xb0
 8014c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d101      	bne.n	8014c68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014c64:	2303      	movs	r3, #3
 8014c66:	e004      	b.n	8014c72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	683a      	ldr	r2, [r7, #0]
 8014c6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7c:	4770      	bx	lr
	...

08014c80 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	32b0      	adds	r2, #176	@ 0xb0
 8014c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c96:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d101      	bne.n	8014ca6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014ca2:	2303      	movs	r3, #3
 8014ca4:	e025      	b.n	8014cf2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014ca6:	68bb      	ldr	r3, [r7, #8]
 8014ca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d11f      	bne.n	8014cf0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014cb8:	4b10      	ldr	r3, [pc, #64]	@ (8014cfc <USBD_CDC_TransmitPacket+0x7c>)
 8014cba:	781b      	ldrb	r3, [r3, #0]
 8014cbc:	f003 020f 	and.w	r2, r3, #15
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8014cc6:	6878      	ldr	r0, [r7, #4]
 8014cc8:	4613      	mov	r3, r2
 8014cca:	009b      	lsls	r3, r3, #2
 8014ccc:	4413      	add	r3, r2
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4403      	add	r3, r0
 8014cd2:	3318      	adds	r3, #24
 8014cd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014cd6:	4b09      	ldr	r3, [pc, #36]	@ (8014cfc <USBD_CDC_TransmitPacket+0x7c>)
 8014cd8:	7819      	ldrb	r1, [r3, #0]
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014ce0:	68bb      	ldr	r3, [r7, #8]
 8014ce2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f002 f823 	bl	8016d32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014cec:	2300      	movs	r3, #0
 8014cee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3710      	adds	r7, #16
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	2400009b 	.word	0x2400009b

08014d00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	32b0      	adds	r2, #176	@ 0xb0
 8014d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	32b0      	adds	r2, #176	@ 0xb0
 8014d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d101      	bne.n	8014d2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014d2a:	2303      	movs	r3, #3
 8014d2c:	e018      	b.n	8014d60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	7c1b      	ldrb	r3, [r3, #16]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d10a      	bne.n	8014d4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d36:	4b0c      	ldr	r3, [pc, #48]	@ (8014d68 <USBD_CDC_ReceivePacket+0x68>)
 8014d38:	7819      	ldrb	r1, [r3, #0]
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f002 f815 	bl	8016d74 <USBD_LL_PrepareReceive>
 8014d4a:	e008      	b.n	8014d5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d4c:	4b06      	ldr	r3, [pc, #24]	@ (8014d68 <USBD_CDC_ReceivePacket+0x68>)
 8014d4e:	7819      	ldrb	r1, [r3, #0]
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8014d56:	2340      	movs	r3, #64	@ 0x40
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f002 f80b 	bl	8016d74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014d5e:	2300      	movs	r3, #0
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3710      	adds	r7, #16
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	2400009c 	.word	0x2400009c

08014d6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b086      	sub	sp, #24
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	60f8      	str	r0, [r7, #12]
 8014d74:	60b9      	str	r1, [r7, #8]
 8014d76:	4613      	mov	r3, r2
 8014d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d101      	bne.n	8014d84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014d80:	2303      	movs	r3, #3
 8014d82:	e01f      	b.n	8014dc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2200      	movs	r2, #0
 8014d88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2200      	movs	r2, #0
 8014d98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d003      	beq.n	8014daa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	2201      	movs	r2, #1
 8014dae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	79fa      	ldrb	r2, [r7, #7]
 8014db6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014db8:	68f8      	ldr	r0, [r7, #12]
 8014dba:	f001 fe81 	bl	8016ac0 <USBD_LL_Init>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3718      	adds	r7, #24
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d101      	bne.n	8014de4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014de0:	2303      	movs	r3, #3
 8014de2:	e025      	b.n	8014e30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	683a      	ldr	r2, [r7, #0]
 8014de8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	32ae      	adds	r2, #174	@ 0xae
 8014df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d00f      	beq.n	8014e20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	32ae      	adds	r2, #174	@ 0xae
 8014e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e10:	f107 020e 	add.w	r2, r7, #14
 8014e14:	4610      	mov	r0, r2
 8014e16:	4798      	blx	r3
 8014e18:	4602      	mov	r2, r0
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014e26:	1c5a      	adds	r2, r3, #1
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8014e2e:	2300      	movs	r3, #0
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3710      	adds	r7, #16
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f001 fe8d 	bl	8016b60 <USBD_LL_Start>
 8014e46:	4603      	mov	r3, r0
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014e50:	b480      	push	{r7}
 8014e52:	b083      	sub	sp, #12
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014e58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	370c      	adds	r7, #12
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e64:	4770      	bx	lr

08014e66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b084      	sub	sp, #16
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
 8014e6e:	460b      	mov	r3, r1
 8014e70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e72:	2300      	movs	r3, #0
 8014e74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d009      	beq.n	8014e94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	78fa      	ldrb	r2, [r7, #3]
 8014e8a:	4611      	mov	r1, r2
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	4798      	blx	r3
 8014e90:	4603      	mov	r3, r0
 8014e92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b084      	sub	sp, #16
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
 8014ea6:	460b      	mov	r3, r1
 8014ea8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	78fa      	ldrb	r2, [r7, #3]
 8014eb8:	4611      	mov	r1, r2
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	4798      	blx	r3
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d001      	beq.n	8014ec8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014ec4:	2303      	movs	r3, #3
 8014ec6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3710      	adds	r7, #16
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b084      	sub	sp, #16
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
 8014eda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014ee2:	6839      	ldr	r1, [r7, #0]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f001 f936 	bl	8016156 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2201      	movs	r2, #1
 8014eee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014ef8:	461a      	mov	r2, r3
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014f06:	f003 031f 	and.w	r3, r3, #31
 8014f0a:	2b02      	cmp	r3, #2
 8014f0c:	d01a      	beq.n	8014f44 <USBD_LL_SetupStage+0x72>
 8014f0e:	2b02      	cmp	r3, #2
 8014f10:	d822      	bhi.n	8014f58 <USBD_LL_SetupStage+0x86>
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d002      	beq.n	8014f1c <USBD_LL_SetupStage+0x4a>
 8014f16:	2b01      	cmp	r3, #1
 8014f18:	d00a      	beq.n	8014f30 <USBD_LL_SetupStage+0x5e>
 8014f1a:	e01d      	b.n	8014f58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014f22:	4619      	mov	r1, r3
 8014f24:	6878      	ldr	r0, [r7, #4]
 8014f26:	f000 fb63 	bl	80155f0 <USBD_StdDevReq>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8014f2e:	e020      	b.n	8014f72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014f36:	4619      	mov	r1, r3
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f000 fbcb 	bl	80156d4 <USBD_StdItfReq>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	73fb      	strb	r3, [r7, #15]
      break;
 8014f42:	e016      	b.n	8014f72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f000 fc2d 	bl	80157ac <USBD_StdEPReq>
 8014f52:	4603      	mov	r3, r0
 8014f54:	73fb      	strb	r3, [r7, #15]
      break;
 8014f56:	e00c      	b.n	8014f72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014f5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	4619      	mov	r1, r3
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f001 fe5a 	bl	8016c20 <USBD_LL_StallEP>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8014f70:	bf00      	nop
  }

  return ret;
 8014f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3710      	adds	r7, #16
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	460b      	mov	r3, r1
 8014f86:	607a      	str	r2, [r7, #4]
 8014f88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014f8e:	7afb      	ldrb	r3, [r7, #11]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d16e      	bne.n	8015072 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8014f9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014fa2:	2b03      	cmp	r3, #3
 8014fa4:	f040 8098 	bne.w	80150d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	689a      	ldr	r2, [r3, #8]
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	68db      	ldr	r3, [r3, #12]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d913      	bls.n	8014fdc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	689a      	ldr	r2, [r3, #8]
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	1ad2      	subs	r2, r2, r3
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	68da      	ldr	r2, [r3, #12]
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	689b      	ldr	r3, [r3, #8]
 8014fca:	4293      	cmp	r3, r2
 8014fcc:	bf28      	it	cs
 8014fce:	4613      	movcs	r3, r2
 8014fd0:	461a      	mov	r2, r3
 8014fd2:	6879      	ldr	r1, [r7, #4]
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f001 f9be 	bl	8016356 <USBD_CtlContinueRx>
 8014fda:	e07d      	b.n	80150d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014fe2:	f003 031f 	and.w	r3, r3, #31
 8014fe6:	2b02      	cmp	r3, #2
 8014fe8:	d014      	beq.n	8015014 <USBD_LL_DataOutStage+0x98>
 8014fea:	2b02      	cmp	r3, #2
 8014fec:	d81d      	bhi.n	801502a <USBD_LL_DataOutStage+0xae>
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d002      	beq.n	8014ff8 <USBD_LL_DataOutStage+0x7c>
 8014ff2:	2b01      	cmp	r3, #1
 8014ff4:	d003      	beq.n	8014ffe <USBD_LL_DataOutStage+0x82>
 8014ff6:	e018      	b.n	801502a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	75bb      	strb	r3, [r7, #22]
            break;
 8014ffc:	e018      	b.n	8015030 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8015004:	b2db      	uxtb	r3, r3
 8015006:	4619      	mov	r1, r3
 8015008:	68f8      	ldr	r0, [r7, #12]
 801500a:	f000 fa64 	bl	80154d6 <USBD_CoreFindIF>
 801500e:	4603      	mov	r3, r0
 8015010:	75bb      	strb	r3, [r7, #22]
            break;
 8015012:	e00d      	b.n	8015030 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801501a:	b2db      	uxtb	r3, r3
 801501c:	4619      	mov	r1, r3
 801501e:	68f8      	ldr	r0, [r7, #12]
 8015020:	f000 fa66 	bl	80154f0 <USBD_CoreFindEP>
 8015024:	4603      	mov	r3, r0
 8015026:	75bb      	strb	r3, [r7, #22]
            break;
 8015028:	e002      	b.n	8015030 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801502a:	2300      	movs	r3, #0
 801502c:	75bb      	strb	r3, [r7, #22]
            break;
 801502e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015030:	7dbb      	ldrb	r3, [r7, #22]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d119      	bne.n	801506a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801503c:	b2db      	uxtb	r3, r3
 801503e:	2b03      	cmp	r3, #3
 8015040:	d113      	bne.n	801506a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015042:	7dba      	ldrb	r2, [r7, #22]
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	32ae      	adds	r2, #174	@ 0xae
 8015048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801504c:	691b      	ldr	r3, [r3, #16]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00b      	beq.n	801506a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015052:	7dba      	ldrb	r2, [r7, #22]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801505a:	7dba      	ldrb	r2, [r7, #22]
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	32ae      	adds	r2, #174	@ 0xae
 8015060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015064:	691b      	ldr	r3, [r3, #16]
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801506a:	68f8      	ldr	r0, [r7, #12]
 801506c:	f001 f984 	bl	8016378 <USBD_CtlSendStatus>
 8015070:	e032      	b.n	80150d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015072:	7afb      	ldrb	r3, [r7, #11]
 8015074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015078:	b2db      	uxtb	r3, r3
 801507a:	4619      	mov	r1, r3
 801507c:	68f8      	ldr	r0, [r7, #12]
 801507e:	f000 fa37 	bl	80154f0 <USBD_CoreFindEP>
 8015082:	4603      	mov	r3, r0
 8015084:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015086:	7dbb      	ldrb	r3, [r7, #22]
 8015088:	2bff      	cmp	r3, #255	@ 0xff
 801508a:	d025      	beq.n	80150d8 <USBD_LL_DataOutStage+0x15c>
 801508c:	7dbb      	ldrb	r3, [r7, #22]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d122      	bne.n	80150d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015098:	b2db      	uxtb	r3, r3
 801509a:	2b03      	cmp	r3, #3
 801509c:	d117      	bne.n	80150ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801509e:	7dba      	ldrb	r2, [r7, #22]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	32ae      	adds	r2, #174	@ 0xae
 80150a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150a8:	699b      	ldr	r3, [r3, #24]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d00f      	beq.n	80150ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80150ae:	7dba      	ldrb	r2, [r7, #22]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80150b6:	7dba      	ldrb	r2, [r7, #22]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	32ae      	adds	r2, #174	@ 0xae
 80150bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c0:	699b      	ldr	r3, [r3, #24]
 80150c2:	7afa      	ldrb	r2, [r7, #11]
 80150c4:	4611      	mov	r1, r2
 80150c6:	68f8      	ldr	r0, [r7, #12]
 80150c8:	4798      	blx	r3
 80150ca:	4603      	mov	r3, r0
 80150cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80150ce:	7dfb      	ldrb	r3, [r7, #23]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d001      	beq.n	80150d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80150d4:	7dfb      	ldrb	r3, [r7, #23]
 80150d6:	e000      	b.n	80150da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80150d8:	2300      	movs	r3, #0
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3718      	adds	r7, #24
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}

080150e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80150e2:	b580      	push	{r7, lr}
 80150e4:	b086      	sub	sp, #24
 80150e6:	af00      	add	r7, sp, #0
 80150e8:	60f8      	str	r0, [r7, #12]
 80150ea:	460b      	mov	r3, r1
 80150ec:	607a      	str	r2, [r7, #4]
 80150ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80150f0:	7afb      	ldrb	r3, [r7, #11]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d16f      	bne.n	80151d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	3314      	adds	r3, #20
 80150fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8015102:	2b02      	cmp	r3, #2
 8015104:	d15a      	bne.n	80151bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	689a      	ldr	r2, [r3, #8]
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	68db      	ldr	r3, [r3, #12]
 801510e:	429a      	cmp	r2, r3
 8015110:	d914      	bls.n	801513c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	689a      	ldr	r2, [r3, #8]
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	68db      	ldr	r3, [r3, #12]
 801511a:	1ad2      	subs	r2, r2, r3
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	689b      	ldr	r3, [r3, #8]
 8015124:	461a      	mov	r2, r3
 8015126:	6879      	ldr	r1, [r7, #4]
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f001 f8e6 	bl	80162fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801512e:	2300      	movs	r3, #0
 8015130:	2200      	movs	r2, #0
 8015132:	2100      	movs	r1, #0
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f001 fe1d 	bl	8016d74 <USBD_LL_PrepareReceive>
 801513a:	e03f      	b.n	80151bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801513c:	693b      	ldr	r3, [r7, #16]
 801513e:	68da      	ldr	r2, [r3, #12]
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	689b      	ldr	r3, [r3, #8]
 8015144:	429a      	cmp	r2, r3
 8015146:	d11c      	bne.n	8015182 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	685a      	ldr	r2, [r3, #4]
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015150:	429a      	cmp	r2, r3
 8015152:	d316      	bcc.n	8015182 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	685a      	ldr	r2, [r3, #4]
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801515e:	429a      	cmp	r2, r3
 8015160:	d20f      	bcs.n	8015182 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015162:	2200      	movs	r2, #0
 8015164:	2100      	movs	r1, #0
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f001 f8c7 	bl	80162fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	2200      	movs	r2, #0
 8015170:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015174:	2300      	movs	r3, #0
 8015176:	2200      	movs	r2, #0
 8015178:	2100      	movs	r1, #0
 801517a:	68f8      	ldr	r0, [r7, #12]
 801517c:	f001 fdfa 	bl	8016d74 <USBD_LL_PrepareReceive>
 8015180:	e01c      	b.n	80151bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015188:	b2db      	uxtb	r3, r3
 801518a:	2b03      	cmp	r3, #3
 801518c:	d10f      	bne.n	80151ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d009      	beq.n	80151ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	2200      	movs	r2, #0
 801519e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80151a8:	68db      	ldr	r3, [r3, #12]
 80151aa:	68f8      	ldr	r0, [r7, #12]
 80151ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80151ae:	2180      	movs	r1, #128	@ 0x80
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f001 fd35 	bl	8016c20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80151b6:	68f8      	ldr	r0, [r7, #12]
 80151b8:	f001 f8f1 	bl	801639e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d03a      	beq.n	801523c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f7ff fe42 	bl	8014e50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	2200      	movs	r2, #0
 80151d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80151d4:	e032      	b.n	801523c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80151d6:	7afb      	ldrb	r3, [r7, #11]
 80151d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	4619      	mov	r1, r3
 80151e0:	68f8      	ldr	r0, [r7, #12]
 80151e2:	f000 f985 	bl	80154f0 <USBD_CoreFindEP>
 80151e6:	4603      	mov	r3, r0
 80151e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80151ea:	7dfb      	ldrb	r3, [r7, #23]
 80151ec:	2bff      	cmp	r3, #255	@ 0xff
 80151ee:	d025      	beq.n	801523c <USBD_LL_DataInStage+0x15a>
 80151f0:	7dfb      	ldrb	r3, [r7, #23]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d122      	bne.n	801523c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80151fc:	b2db      	uxtb	r3, r3
 80151fe:	2b03      	cmp	r3, #3
 8015200:	d11c      	bne.n	801523c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015202:	7dfa      	ldrb	r2, [r7, #23]
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	32ae      	adds	r2, #174	@ 0xae
 8015208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801520c:	695b      	ldr	r3, [r3, #20]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d014      	beq.n	801523c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015212:	7dfa      	ldrb	r2, [r7, #23]
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801521a:	7dfa      	ldrb	r2, [r7, #23]
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	32ae      	adds	r2, #174	@ 0xae
 8015220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015224:	695b      	ldr	r3, [r3, #20]
 8015226:	7afa      	ldrb	r2, [r7, #11]
 8015228:	4611      	mov	r1, r2
 801522a:	68f8      	ldr	r0, [r7, #12]
 801522c:	4798      	blx	r3
 801522e:	4603      	mov	r3, r0
 8015230:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015232:	7dbb      	ldrb	r3, [r7, #22]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d001      	beq.n	801523c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015238:	7dbb      	ldrb	r3, [r7, #22]
 801523a:	e000      	b.n	801523e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801523c:	2300      	movs	r3, #0
}
 801523e:	4618      	mov	r0, r3
 8015240:	3718      	adds	r7, #24
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}

08015246 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015246:	b580      	push	{r7, lr}
 8015248:	b084      	sub	sp, #16
 801524a:	af00      	add	r7, sp, #0
 801524c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801524e:	2300      	movs	r3, #0
 8015250:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2201      	movs	r2, #1
 8015256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2200      	movs	r2, #0
 801525e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2200      	movs	r2, #0
 8015266:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2200      	movs	r2, #0
 801526c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2200      	movs	r2, #0
 8015274:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801527e:	2b00      	cmp	r3, #0
 8015280:	d014      	beq.n	80152ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d00e      	beq.n	80152ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	6852      	ldr	r2, [r2, #4]
 801529a:	b2d2      	uxtb	r2, r2
 801529c:	4611      	mov	r1, r2
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	4798      	blx	r3
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d001      	beq.n	80152ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80152a8:	2303      	movs	r3, #3
 80152aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80152ac:	2340      	movs	r3, #64	@ 0x40
 80152ae:	2200      	movs	r2, #0
 80152b0:	2100      	movs	r1, #0
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f001 fc6f 	bl	8016b96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2201      	movs	r2, #1
 80152bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2240      	movs	r2, #64	@ 0x40
 80152c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80152c8:	2340      	movs	r3, #64	@ 0x40
 80152ca:	2200      	movs	r2, #0
 80152cc:	2180      	movs	r1, #128	@ 0x80
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f001 fc61 	bl	8016b96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2201      	movs	r2, #1
 80152d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2240      	movs	r2, #64	@ 0x40
 80152de:	621a      	str	r2, [r3, #32]

  return ret;
 80152e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3710      	adds	r7, #16
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}

080152ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80152ea:	b480      	push	{r7}
 80152ec:	b083      	sub	sp, #12
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
 80152f2:	460b      	mov	r3, r1
 80152f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	78fa      	ldrb	r2, [r7, #3]
 80152fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80152fc:	2300      	movs	r3, #0
}
 80152fe:	4618      	mov	r0, r3
 8015300:	370c      	adds	r7, #12
 8015302:	46bd      	mov	sp, r7
 8015304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015308:	4770      	bx	lr

0801530a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801530a:	b480      	push	{r7}
 801530c:	b083      	sub	sp, #12
 801530e:	af00      	add	r7, sp, #0
 8015310:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015318:	b2db      	uxtb	r3, r3
 801531a:	2b04      	cmp	r3, #4
 801531c:	d006      	beq.n	801532c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015324:	b2da      	uxtb	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2204      	movs	r2, #4
 8015330:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8015334:	2300      	movs	r3, #0
}
 8015336:	4618      	mov	r0, r3
 8015338:	370c      	adds	r7, #12
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr

08015342 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015342:	b480      	push	{r7}
 8015344:	b083      	sub	sp, #12
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015350:	b2db      	uxtb	r3, r3
 8015352:	2b04      	cmp	r3, #4
 8015354:	d106      	bne.n	8015364 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801535c:	b2da      	uxtb	r2, r3
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8015364:	2300      	movs	r3, #0
}
 8015366:	4618      	mov	r0, r3
 8015368:	370c      	adds	r7, #12
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr

08015372 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015372:	b580      	push	{r7, lr}
 8015374:	b082      	sub	sp, #8
 8015376:	af00      	add	r7, sp, #0
 8015378:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015380:	b2db      	uxtb	r3, r3
 8015382:	2b03      	cmp	r3, #3
 8015384:	d110      	bne.n	80153a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801538c:	2b00      	cmp	r3, #0
 801538e:	d00b      	beq.n	80153a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015396:	69db      	ldr	r3, [r3, #28]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d005      	beq.n	80153a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80153a2:	69db      	ldr	r3, [r3, #28]
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80153a8:	2300      	movs	r3, #0
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3708      	adds	r7, #8
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}

080153b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b082      	sub	sp, #8
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
 80153ba:	460b      	mov	r3, r1
 80153bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	32ae      	adds	r2, #174	@ 0xae
 80153c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d101      	bne.n	80153d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80153d0:	2303      	movs	r3, #3
 80153d2:	e01c      	b.n	801540e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80153da:	b2db      	uxtb	r3, r3
 80153dc:	2b03      	cmp	r3, #3
 80153de:	d115      	bne.n	801540c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	32ae      	adds	r2, #174	@ 0xae
 80153ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153ee:	6a1b      	ldr	r3, [r3, #32]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d00b      	beq.n	801540c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	32ae      	adds	r2, #174	@ 0xae
 80153fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015402:	6a1b      	ldr	r3, [r3, #32]
 8015404:	78fa      	ldrb	r2, [r7, #3]
 8015406:	4611      	mov	r1, r2
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801540c:	2300      	movs	r3, #0
}
 801540e:	4618      	mov	r0, r3
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}

08015416 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015416:	b580      	push	{r7, lr}
 8015418:	b082      	sub	sp, #8
 801541a:	af00      	add	r7, sp, #0
 801541c:	6078      	str	r0, [r7, #4]
 801541e:	460b      	mov	r3, r1
 8015420:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	32ae      	adds	r2, #174	@ 0xae
 801542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d101      	bne.n	8015438 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015434:	2303      	movs	r3, #3
 8015436:	e01c      	b.n	8015472 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801543e:	b2db      	uxtb	r3, r3
 8015440:	2b03      	cmp	r3, #3
 8015442:	d115      	bne.n	8015470 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	32ae      	adds	r2, #174	@ 0xae
 801544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015454:	2b00      	cmp	r3, #0
 8015456:	d00b      	beq.n	8015470 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	32ae      	adds	r2, #174	@ 0xae
 8015462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015468:	78fa      	ldrb	r2, [r7, #3]
 801546a:	4611      	mov	r1, r2
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015470:	2300      	movs	r3, #0
}
 8015472:	4618      	mov	r0, r3
 8015474:	3708      	adds	r7, #8
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}

0801547a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801547a:	b480      	push	{r7}
 801547c:	b083      	sub	sp, #12
 801547e:	af00      	add	r7, sp, #0
 8015480:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015482:	2300      	movs	r3, #0
}
 8015484:	4618      	mov	r0, r3
 8015486:	370c      	adds	r7, #12
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr

08015490 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b084      	sub	sp, #16
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015498:	2300      	movs	r3, #0
 801549a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2201      	movs	r2, #1
 80154a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d00e      	beq.n	80154cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	6852      	ldr	r2, [r2, #4]
 80154ba:	b2d2      	uxtb	r2, r2
 80154bc:	4611      	mov	r1, r2
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	4798      	blx	r3
 80154c2:	4603      	mov	r3, r0
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d001      	beq.n	80154cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80154c8:	2303      	movs	r3, #3
 80154ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80154cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3710      	adds	r7, #16
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80154d6:	b480      	push	{r7}
 80154d8:	b083      	sub	sp, #12
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
 80154de:	460b      	mov	r3, r1
 80154e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80154e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	370c      	adds	r7, #12
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr

080154f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	460b      	mov	r3, r1
 80154fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80154fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80154fe:	4618      	mov	r0, r3
 8015500:	370c      	adds	r7, #12
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr

0801550a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801550a:	b580      	push	{r7, lr}
 801550c:	b086      	sub	sp, #24
 801550e:	af00      	add	r7, sp, #0
 8015510:	6078      	str	r0, [r7, #4]
 8015512:	460b      	mov	r3, r1
 8015514:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801551e:	2300      	movs	r3, #0
 8015520:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	885b      	ldrh	r3, [r3, #2]
 8015526:	b29b      	uxth	r3, r3
 8015528:	68fa      	ldr	r2, [r7, #12]
 801552a:	7812      	ldrb	r2, [r2, #0]
 801552c:	4293      	cmp	r3, r2
 801552e:	d91f      	bls.n	8015570 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015536:	e013      	b.n	8015560 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015538:	f107 030a 	add.w	r3, r7, #10
 801553c:	4619      	mov	r1, r3
 801553e:	6978      	ldr	r0, [r7, #20]
 8015540:	f000 f81b 	bl	801557a <USBD_GetNextDesc>
 8015544:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015546:	697b      	ldr	r3, [r7, #20]
 8015548:	785b      	ldrb	r3, [r3, #1]
 801554a:	2b05      	cmp	r3, #5
 801554c:	d108      	bne.n	8015560 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	789b      	ldrb	r3, [r3, #2]
 8015556:	78fa      	ldrb	r2, [r7, #3]
 8015558:	429a      	cmp	r2, r3
 801555a:	d008      	beq.n	801556e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801555c:	2300      	movs	r3, #0
 801555e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	885b      	ldrh	r3, [r3, #2]
 8015564:	b29a      	uxth	r2, r3
 8015566:	897b      	ldrh	r3, [r7, #10]
 8015568:	429a      	cmp	r2, r3
 801556a:	d8e5      	bhi.n	8015538 <USBD_GetEpDesc+0x2e>
 801556c:	e000      	b.n	8015570 <USBD_GetEpDesc+0x66>
          break;
 801556e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015570:	693b      	ldr	r3, [r7, #16]
}
 8015572:	4618      	mov	r0, r3
 8015574:	3718      	adds	r7, #24
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}

0801557a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801557a:	b480      	push	{r7}
 801557c:	b085      	sub	sp, #20
 801557e:	af00      	add	r7, sp, #0
 8015580:	6078      	str	r0, [r7, #4]
 8015582:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	881b      	ldrh	r3, [r3, #0]
 801558c:	68fa      	ldr	r2, [r7, #12]
 801558e:	7812      	ldrb	r2, [r2, #0]
 8015590:	4413      	add	r3, r2
 8015592:	b29a      	uxth	r2, r3
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	781b      	ldrb	r3, [r3, #0]
 801559c:	461a      	mov	r2, r3
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	4413      	add	r3, r2
 80155a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80155a4:	68fb      	ldr	r3, [r7, #12]
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3714      	adds	r7, #20
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr

080155b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80155b2:	b480      	push	{r7}
 80155b4:	b087      	sub	sp, #28
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	781b      	ldrb	r3, [r3, #0]
 80155c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	3301      	adds	r3, #1
 80155c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	781b      	ldrb	r3, [r3, #0]
 80155ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80155d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80155d4:	021b      	lsls	r3, r3, #8
 80155d6:	b21a      	sxth	r2, r3
 80155d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80155dc:	4313      	orrs	r3, r2
 80155de:	b21b      	sxth	r3, r3
 80155e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80155e2:	89fb      	ldrh	r3, [r7, #14]
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	371c      	adds	r7, #28
 80155e8:	46bd      	mov	sp, r7
 80155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ee:	4770      	bx	lr

080155f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80155fa:	2300      	movs	r3, #0
 80155fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015606:	2b40      	cmp	r3, #64	@ 0x40
 8015608:	d005      	beq.n	8015616 <USBD_StdDevReq+0x26>
 801560a:	2b40      	cmp	r3, #64	@ 0x40
 801560c:	d857      	bhi.n	80156be <USBD_StdDevReq+0xce>
 801560e:	2b00      	cmp	r3, #0
 8015610:	d00f      	beq.n	8015632 <USBD_StdDevReq+0x42>
 8015612:	2b20      	cmp	r3, #32
 8015614:	d153      	bne.n	80156be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	32ae      	adds	r2, #174	@ 0xae
 8015620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015624:	689b      	ldr	r3, [r3, #8]
 8015626:	6839      	ldr	r1, [r7, #0]
 8015628:	6878      	ldr	r0, [r7, #4]
 801562a:	4798      	blx	r3
 801562c:	4603      	mov	r3, r0
 801562e:	73fb      	strb	r3, [r7, #15]
      break;
 8015630:	e04a      	b.n	80156c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	785b      	ldrb	r3, [r3, #1]
 8015636:	2b09      	cmp	r3, #9
 8015638:	d83b      	bhi.n	80156b2 <USBD_StdDevReq+0xc2>
 801563a:	a201      	add	r2, pc, #4	@ (adr r2, 8015640 <USBD_StdDevReq+0x50>)
 801563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015640:	08015695 	.word	0x08015695
 8015644:	080156a9 	.word	0x080156a9
 8015648:	080156b3 	.word	0x080156b3
 801564c:	0801569f 	.word	0x0801569f
 8015650:	080156b3 	.word	0x080156b3
 8015654:	08015673 	.word	0x08015673
 8015658:	08015669 	.word	0x08015669
 801565c:	080156b3 	.word	0x080156b3
 8015660:	0801568b 	.word	0x0801568b
 8015664:	0801567d 	.word	0x0801567d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015668:	6839      	ldr	r1, [r7, #0]
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f000 fa3c 	bl	8015ae8 <USBD_GetDescriptor>
          break;
 8015670:	e024      	b.n	80156bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015672:	6839      	ldr	r1, [r7, #0]
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f000 fbcb 	bl	8015e10 <USBD_SetAddress>
          break;
 801567a:	e01f      	b.n	80156bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801567c:	6839      	ldr	r1, [r7, #0]
 801567e:	6878      	ldr	r0, [r7, #4]
 8015680:	f000 fc0a 	bl	8015e98 <USBD_SetConfig>
 8015684:	4603      	mov	r3, r0
 8015686:	73fb      	strb	r3, [r7, #15]
          break;
 8015688:	e018      	b.n	80156bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801568a:	6839      	ldr	r1, [r7, #0]
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f000 fcad 	bl	8015fec <USBD_GetConfig>
          break;
 8015692:	e013      	b.n	80156bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015694:	6839      	ldr	r1, [r7, #0]
 8015696:	6878      	ldr	r0, [r7, #4]
 8015698:	f000 fcde 	bl	8016058 <USBD_GetStatus>
          break;
 801569c:	e00e      	b.n	80156bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801569e:	6839      	ldr	r1, [r7, #0]
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f000 fd0d 	bl	80160c0 <USBD_SetFeature>
          break;
 80156a6:	e009      	b.n	80156bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80156a8:	6839      	ldr	r1, [r7, #0]
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f000 fd31 	bl	8016112 <USBD_ClrFeature>
          break;
 80156b0:	e004      	b.n	80156bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80156b2:	6839      	ldr	r1, [r7, #0]
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f000 fd88 	bl	80161ca <USBD_CtlError>
          break;
 80156ba:	bf00      	nop
      }
      break;
 80156bc:	e004      	b.n	80156c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80156be:	6839      	ldr	r1, [r7, #0]
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f000 fd82 	bl	80161ca <USBD_CtlError>
      break;
 80156c6:	bf00      	nop
  }

  return ret;
 80156c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3710      	adds	r7, #16
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop

080156d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b084      	sub	sp, #16
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80156de:	2300      	movs	r3, #0
 80156e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	781b      	ldrb	r3, [r3, #0]
 80156e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80156ea:	2b40      	cmp	r3, #64	@ 0x40
 80156ec:	d005      	beq.n	80156fa <USBD_StdItfReq+0x26>
 80156ee:	2b40      	cmp	r3, #64	@ 0x40
 80156f0:	d852      	bhi.n	8015798 <USBD_StdItfReq+0xc4>
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d001      	beq.n	80156fa <USBD_StdItfReq+0x26>
 80156f6:	2b20      	cmp	r3, #32
 80156f8:	d14e      	bne.n	8015798 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015700:	b2db      	uxtb	r3, r3
 8015702:	3b01      	subs	r3, #1
 8015704:	2b02      	cmp	r3, #2
 8015706:	d840      	bhi.n	801578a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	889b      	ldrh	r3, [r3, #4]
 801570c:	b2db      	uxtb	r3, r3
 801570e:	2b01      	cmp	r3, #1
 8015710:	d836      	bhi.n	8015780 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	889b      	ldrh	r3, [r3, #4]
 8015716:	b2db      	uxtb	r3, r3
 8015718:	4619      	mov	r1, r3
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f7ff fedb 	bl	80154d6 <USBD_CoreFindIF>
 8015720:	4603      	mov	r3, r0
 8015722:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015724:	7bbb      	ldrb	r3, [r7, #14]
 8015726:	2bff      	cmp	r3, #255	@ 0xff
 8015728:	d01d      	beq.n	8015766 <USBD_StdItfReq+0x92>
 801572a:	7bbb      	ldrb	r3, [r7, #14]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d11a      	bne.n	8015766 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015730:	7bba      	ldrb	r2, [r7, #14]
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	32ae      	adds	r2, #174	@ 0xae
 8015736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801573a:	689b      	ldr	r3, [r3, #8]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d00f      	beq.n	8015760 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015740:	7bba      	ldrb	r2, [r7, #14]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015748:	7bba      	ldrb	r2, [r7, #14]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	32ae      	adds	r2, #174	@ 0xae
 801574e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015752:	689b      	ldr	r3, [r3, #8]
 8015754:	6839      	ldr	r1, [r7, #0]
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	4798      	blx	r3
 801575a:	4603      	mov	r3, r0
 801575c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801575e:	e004      	b.n	801576a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015760:	2303      	movs	r3, #3
 8015762:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015764:	e001      	b.n	801576a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015766:	2303      	movs	r3, #3
 8015768:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	88db      	ldrh	r3, [r3, #6]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d110      	bne.n	8015794 <USBD_StdItfReq+0xc0>
 8015772:	7bfb      	ldrb	r3, [r7, #15]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d10d      	bne.n	8015794 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015778:	6878      	ldr	r0, [r7, #4]
 801577a:	f000 fdfd 	bl	8016378 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801577e:	e009      	b.n	8015794 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015780:	6839      	ldr	r1, [r7, #0]
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f000 fd21 	bl	80161ca <USBD_CtlError>
          break;
 8015788:	e004      	b.n	8015794 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801578a:	6839      	ldr	r1, [r7, #0]
 801578c:	6878      	ldr	r0, [r7, #4]
 801578e:	f000 fd1c 	bl	80161ca <USBD_CtlError>
          break;
 8015792:	e000      	b.n	8015796 <USBD_StdItfReq+0xc2>
          break;
 8015794:	bf00      	nop
      }
      break;
 8015796:	e004      	b.n	80157a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015798:	6839      	ldr	r1, [r7, #0]
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f000 fd15 	bl	80161ca <USBD_CtlError>
      break;
 80157a0:	bf00      	nop
  }

  return ret;
 80157a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3710      	adds	r7, #16
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}

080157ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b084      	sub	sp, #16
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80157b6:	2300      	movs	r3, #0
 80157b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	889b      	ldrh	r3, [r3, #4]
 80157be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	781b      	ldrb	r3, [r3, #0]
 80157c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80157c8:	2b40      	cmp	r3, #64	@ 0x40
 80157ca:	d007      	beq.n	80157dc <USBD_StdEPReq+0x30>
 80157cc:	2b40      	cmp	r3, #64	@ 0x40
 80157ce:	f200 817f 	bhi.w	8015ad0 <USBD_StdEPReq+0x324>
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d02a      	beq.n	801582c <USBD_StdEPReq+0x80>
 80157d6:	2b20      	cmp	r3, #32
 80157d8:	f040 817a 	bne.w	8015ad0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80157dc:	7bbb      	ldrb	r3, [r7, #14]
 80157de:	4619      	mov	r1, r3
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f7ff fe85 	bl	80154f0 <USBD_CoreFindEP>
 80157e6:	4603      	mov	r3, r0
 80157e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80157ea:	7b7b      	ldrb	r3, [r7, #13]
 80157ec:	2bff      	cmp	r3, #255	@ 0xff
 80157ee:	f000 8174 	beq.w	8015ada <USBD_StdEPReq+0x32e>
 80157f2:	7b7b      	ldrb	r3, [r7, #13]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f040 8170 	bne.w	8015ada <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80157fa:	7b7a      	ldrb	r2, [r7, #13]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015802:	7b7a      	ldrb	r2, [r7, #13]
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	32ae      	adds	r2, #174	@ 0xae
 8015808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801580c:	689b      	ldr	r3, [r3, #8]
 801580e:	2b00      	cmp	r3, #0
 8015810:	f000 8163 	beq.w	8015ada <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015814:	7b7a      	ldrb	r2, [r7, #13]
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	32ae      	adds	r2, #174	@ 0xae
 801581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801581e:	689b      	ldr	r3, [r3, #8]
 8015820:	6839      	ldr	r1, [r7, #0]
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	4798      	blx	r3
 8015826:	4603      	mov	r3, r0
 8015828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801582a:	e156      	b.n	8015ada <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	785b      	ldrb	r3, [r3, #1]
 8015830:	2b03      	cmp	r3, #3
 8015832:	d008      	beq.n	8015846 <USBD_StdEPReq+0x9a>
 8015834:	2b03      	cmp	r3, #3
 8015836:	f300 8145 	bgt.w	8015ac4 <USBD_StdEPReq+0x318>
 801583a:	2b00      	cmp	r3, #0
 801583c:	f000 809b 	beq.w	8015976 <USBD_StdEPReq+0x1ca>
 8015840:	2b01      	cmp	r3, #1
 8015842:	d03c      	beq.n	80158be <USBD_StdEPReq+0x112>
 8015844:	e13e      	b.n	8015ac4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801584c:	b2db      	uxtb	r3, r3
 801584e:	2b02      	cmp	r3, #2
 8015850:	d002      	beq.n	8015858 <USBD_StdEPReq+0xac>
 8015852:	2b03      	cmp	r3, #3
 8015854:	d016      	beq.n	8015884 <USBD_StdEPReq+0xd8>
 8015856:	e02c      	b.n	80158b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015858:	7bbb      	ldrb	r3, [r7, #14]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d00d      	beq.n	801587a <USBD_StdEPReq+0xce>
 801585e:	7bbb      	ldrb	r3, [r7, #14]
 8015860:	2b80      	cmp	r3, #128	@ 0x80
 8015862:	d00a      	beq.n	801587a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015864:	7bbb      	ldrb	r3, [r7, #14]
 8015866:	4619      	mov	r1, r3
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f001 f9d9 	bl	8016c20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801586e:	2180      	movs	r1, #128	@ 0x80
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f001 f9d5 	bl	8016c20 <USBD_LL_StallEP>
 8015876:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015878:	e020      	b.n	80158bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801587a:	6839      	ldr	r1, [r7, #0]
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f000 fca4 	bl	80161ca <USBD_CtlError>
              break;
 8015882:	e01b      	b.n	80158bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015884:	683b      	ldr	r3, [r7, #0]
 8015886:	885b      	ldrh	r3, [r3, #2]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d10e      	bne.n	80158aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801588c:	7bbb      	ldrb	r3, [r7, #14]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d00b      	beq.n	80158aa <USBD_StdEPReq+0xfe>
 8015892:	7bbb      	ldrb	r3, [r7, #14]
 8015894:	2b80      	cmp	r3, #128	@ 0x80
 8015896:	d008      	beq.n	80158aa <USBD_StdEPReq+0xfe>
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	88db      	ldrh	r3, [r3, #6]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d104      	bne.n	80158aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80158a0:	7bbb      	ldrb	r3, [r7, #14]
 80158a2:	4619      	mov	r1, r3
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f001 f9bb 	bl	8016c20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 fd64 	bl	8016378 <USBD_CtlSendStatus>

              break;
 80158b0:	e004      	b.n	80158bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80158b2:	6839      	ldr	r1, [r7, #0]
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f000 fc88 	bl	80161ca <USBD_CtlError>
              break;
 80158ba:	bf00      	nop
          }
          break;
 80158bc:	e107      	b.n	8015ace <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80158c4:	b2db      	uxtb	r3, r3
 80158c6:	2b02      	cmp	r3, #2
 80158c8:	d002      	beq.n	80158d0 <USBD_StdEPReq+0x124>
 80158ca:	2b03      	cmp	r3, #3
 80158cc:	d016      	beq.n	80158fc <USBD_StdEPReq+0x150>
 80158ce:	e04b      	b.n	8015968 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158d0:	7bbb      	ldrb	r3, [r7, #14]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d00d      	beq.n	80158f2 <USBD_StdEPReq+0x146>
 80158d6:	7bbb      	ldrb	r3, [r7, #14]
 80158d8:	2b80      	cmp	r3, #128	@ 0x80
 80158da:	d00a      	beq.n	80158f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158dc:	7bbb      	ldrb	r3, [r7, #14]
 80158de:	4619      	mov	r1, r3
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f001 f99d 	bl	8016c20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158e6:	2180      	movs	r1, #128	@ 0x80
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f001 f999 	bl	8016c20 <USBD_LL_StallEP>
 80158ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80158f0:	e040      	b.n	8015974 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80158f2:	6839      	ldr	r1, [r7, #0]
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f000 fc68 	bl	80161ca <USBD_CtlError>
              break;
 80158fa:	e03b      	b.n	8015974 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	885b      	ldrh	r3, [r3, #2]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d136      	bne.n	8015972 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015904:	7bbb      	ldrb	r3, [r7, #14]
 8015906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801590a:	2b00      	cmp	r3, #0
 801590c:	d004      	beq.n	8015918 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801590e:	7bbb      	ldrb	r3, [r7, #14]
 8015910:	4619      	mov	r1, r3
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f001 f9a3 	bl	8016c5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f000 fd2d 	bl	8016378 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801591e:	7bbb      	ldrb	r3, [r7, #14]
 8015920:	4619      	mov	r1, r3
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f7ff fde4 	bl	80154f0 <USBD_CoreFindEP>
 8015928:	4603      	mov	r3, r0
 801592a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801592c:	7b7b      	ldrb	r3, [r7, #13]
 801592e:	2bff      	cmp	r3, #255	@ 0xff
 8015930:	d01f      	beq.n	8015972 <USBD_StdEPReq+0x1c6>
 8015932:	7b7b      	ldrb	r3, [r7, #13]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d11c      	bne.n	8015972 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015938:	7b7a      	ldrb	r2, [r7, #13]
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015940:	7b7a      	ldrb	r2, [r7, #13]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	32ae      	adds	r2, #174	@ 0xae
 8015946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801594a:	689b      	ldr	r3, [r3, #8]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d010      	beq.n	8015972 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015950:	7b7a      	ldrb	r2, [r7, #13]
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	32ae      	adds	r2, #174	@ 0xae
 8015956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801595a:	689b      	ldr	r3, [r3, #8]
 801595c:	6839      	ldr	r1, [r7, #0]
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	4798      	blx	r3
 8015962:	4603      	mov	r3, r0
 8015964:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015966:	e004      	b.n	8015972 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015968:	6839      	ldr	r1, [r7, #0]
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f000 fc2d 	bl	80161ca <USBD_CtlError>
              break;
 8015970:	e000      	b.n	8015974 <USBD_StdEPReq+0x1c8>
              break;
 8015972:	bf00      	nop
          }
          break;
 8015974:	e0ab      	b.n	8015ace <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801597c:	b2db      	uxtb	r3, r3
 801597e:	2b02      	cmp	r3, #2
 8015980:	d002      	beq.n	8015988 <USBD_StdEPReq+0x1dc>
 8015982:	2b03      	cmp	r3, #3
 8015984:	d032      	beq.n	80159ec <USBD_StdEPReq+0x240>
 8015986:	e097      	b.n	8015ab8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015988:	7bbb      	ldrb	r3, [r7, #14]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d007      	beq.n	801599e <USBD_StdEPReq+0x1f2>
 801598e:	7bbb      	ldrb	r3, [r7, #14]
 8015990:	2b80      	cmp	r3, #128	@ 0x80
 8015992:	d004      	beq.n	801599e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015994:	6839      	ldr	r1, [r7, #0]
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f000 fc17 	bl	80161ca <USBD_CtlError>
                break;
 801599c:	e091      	b.n	8015ac2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801599e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	da0b      	bge.n	80159be <USBD_StdEPReq+0x212>
 80159a6:	7bbb      	ldrb	r3, [r7, #14]
 80159a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80159ac:	4613      	mov	r3, r2
 80159ae:	009b      	lsls	r3, r3, #2
 80159b0:	4413      	add	r3, r2
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	3310      	adds	r3, #16
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	4413      	add	r3, r2
 80159ba:	3304      	adds	r3, #4
 80159bc:	e00b      	b.n	80159d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80159be:	7bbb      	ldrb	r3, [r7, #14]
 80159c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80159c4:	4613      	mov	r3, r2
 80159c6:	009b      	lsls	r3, r3, #2
 80159c8:	4413      	add	r3, r2
 80159ca:	009b      	lsls	r3, r3, #2
 80159cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	4413      	add	r3, r2
 80159d4:	3304      	adds	r3, #4
 80159d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	2200      	movs	r2, #0
 80159dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2202      	movs	r2, #2
 80159e2:	4619      	mov	r1, r3
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f000 fc6d 	bl	80162c4 <USBD_CtlSendData>
              break;
 80159ea:	e06a      	b.n	8015ac2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80159ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	da11      	bge.n	8015a18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80159f4:	7bbb      	ldrb	r3, [r7, #14]
 80159f6:	f003 020f 	and.w	r2, r3, #15
 80159fa:	6879      	ldr	r1, [r7, #4]
 80159fc:	4613      	mov	r3, r2
 80159fe:	009b      	lsls	r3, r3, #2
 8015a00:	4413      	add	r3, r2
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	440b      	add	r3, r1
 8015a06:	3324      	adds	r3, #36	@ 0x24
 8015a08:	881b      	ldrh	r3, [r3, #0]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d117      	bne.n	8015a3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a0e:	6839      	ldr	r1, [r7, #0]
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f000 fbda 	bl	80161ca <USBD_CtlError>
                  break;
 8015a16:	e054      	b.n	8015ac2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a18:	7bbb      	ldrb	r3, [r7, #14]
 8015a1a:	f003 020f 	and.w	r2, r3, #15
 8015a1e:	6879      	ldr	r1, [r7, #4]
 8015a20:	4613      	mov	r3, r2
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	4413      	add	r3, r2
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	440b      	add	r3, r1
 8015a2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015a2e:	881b      	ldrh	r3, [r3, #0]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d104      	bne.n	8015a3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a34:	6839      	ldr	r1, [r7, #0]
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f000 fbc7 	bl	80161ca <USBD_CtlError>
                  break;
 8015a3c:	e041      	b.n	8015ac2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	da0b      	bge.n	8015a5e <USBD_StdEPReq+0x2b2>
 8015a46:	7bbb      	ldrb	r3, [r7, #14]
 8015a48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015a4c:	4613      	mov	r3, r2
 8015a4e:	009b      	lsls	r3, r3, #2
 8015a50:	4413      	add	r3, r2
 8015a52:	009b      	lsls	r3, r3, #2
 8015a54:	3310      	adds	r3, #16
 8015a56:	687a      	ldr	r2, [r7, #4]
 8015a58:	4413      	add	r3, r2
 8015a5a:	3304      	adds	r3, #4
 8015a5c:	e00b      	b.n	8015a76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a5e:	7bbb      	ldrb	r3, [r7, #14]
 8015a60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a64:	4613      	mov	r3, r2
 8015a66:	009b      	lsls	r3, r3, #2
 8015a68:	4413      	add	r3, r2
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015a70:	687a      	ldr	r2, [r7, #4]
 8015a72:	4413      	add	r3, r2
 8015a74:	3304      	adds	r3, #4
 8015a76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015a78:	7bbb      	ldrb	r3, [r7, #14]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d002      	beq.n	8015a84 <USBD_StdEPReq+0x2d8>
 8015a7e:	7bbb      	ldrb	r3, [r7, #14]
 8015a80:	2b80      	cmp	r3, #128	@ 0x80
 8015a82:	d103      	bne.n	8015a8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	2200      	movs	r2, #0
 8015a88:	601a      	str	r2, [r3, #0]
 8015a8a:	e00e      	b.n	8015aaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015a8c:	7bbb      	ldrb	r3, [r7, #14]
 8015a8e:	4619      	mov	r1, r3
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f001 f903 	bl	8016c9c <USBD_LL_IsStallEP>
 8015a96:	4603      	mov	r3, r0
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d003      	beq.n	8015aa4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	2201      	movs	r2, #1
 8015aa0:	601a      	str	r2, [r3, #0]
 8015aa2:	e002      	b.n	8015aaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	2202      	movs	r2, #2
 8015aae:	4619      	mov	r1, r3
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f000 fc07 	bl	80162c4 <USBD_CtlSendData>
              break;
 8015ab6:	e004      	b.n	8015ac2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015ab8:	6839      	ldr	r1, [r7, #0]
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 fb85 	bl	80161ca <USBD_CtlError>
              break;
 8015ac0:	bf00      	nop
          }
          break;
 8015ac2:	e004      	b.n	8015ace <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f000 fb7f 	bl	80161ca <USBD_CtlError>
          break;
 8015acc:	bf00      	nop
      }
      break;
 8015ace:	e005      	b.n	8015adc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015ad0:	6839      	ldr	r1, [r7, #0]
 8015ad2:	6878      	ldr	r0, [r7, #4]
 8015ad4:	f000 fb79 	bl	80161ca <USBD_CtlError>
      break;
 8015ad8:	e000      	b.n	8015adc <USBD_StdEPReq+0x330>
      break;
 8015ada:	bf00      	nop
  }

  return ret;
 8015adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3710      	adds	r7, #16
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
	...

08015ae8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b084      	sub	sp, #16
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
 8015af0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015af2:	2300      	movs	r3, #0
 8015af4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015af6:	2300      	movs	r3, #0
 8015af8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015afa:	2300      	movs	r3, #0
 8015afc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	885b      	ldrh	r3, [r3, #2]
 8015b02:	0a1b      	lsrs	r3, r3, #8
 8015b04:	b29b      	uxth	r3, r3
 8015b06:	3b01      	subs	r3, #1
 8015b08:	2b0e      	cmp	r3, #14
 8015b0a:	f200 8152 	bhi.w	8015db2 <USBD_GetDescriptor+0x2ca>
 8015b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8015b14 <USBD_GetDescriptor+0x2c>)
 8015b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b14:	08015b85 	.word	0x08015b85
 8015b18:	08015b9d 	.word	0x08015b9d
 8015b1c:	08015bdd 	.word	0x08015bdd
 8015b20:	08015db3 	.word	0x08015db3
 8015b24:	08015db3 	.word	0x08015db3
 8015b28:	08015d53 	.word	0x08015d53
 8015b2c:	08015d7f 	.word	0x08015d7f
 8015b30:	08015db3 	.word	0x08015db3
 8015b34:	08015db3 	.word	0x08015db3
 8015b38:	08015db3 	.word	0x08015db3
 8015b3c:	08015db3 	.word	0x08015db3
 8015b40:	08015db3 	.word	0x08015db3
 8015b44:	08015db3 	.word	0x08015db3
 8015b48:	08015db3 	.word	0x08015db3
 8015b4c:	08015b51 	.word	0x08015b51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b56:	69db      	ldr	r3, [r3, #28]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d00b      	beq.n	8015b74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b62:	69db      	ldr	r3, [r3, #28]
 8015b64:	687a      	ldr	r2, [r7, #4]
 8015b66:	7c12      	ldrb	r2, [r2, #16]
 8015b68:	f107 0108 	add.w	r1, r7, #8
 8015b6c:	4610      	mov	r0, r2
 8015b6e:	4798      	blx	r3
 8015b70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015b72:	e126      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015b74:	6839      	ldr	r1, [r7, #0]
 8015b76:	6878      	ldr	r0, [r7, #4]
 8015b78:	f000 fb27 	bl	80161ca <USBD_CtlError>
        err++;
 8015b7c:	7afb      	ldrb	r3, [r7, #11]
 8015b7e:	3301      	adds	r3, #1
 8015b80:	72fb      	strb	r3, [r7, #11]
      break;
 8015b82:	e11e      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	7c12      	ldrb	r2, [r2, #16]
 8015b90:	f107 0108 	add.w	r1, r7, #8
 8015b94:	4610      	mov	r0, r2
 8015b96:	4798      	blx	r3
 8015b98:	60f8      	str	r0, [r7, #12]
      break;
 8015b9a:	e112      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	7c1b      	ldrb	r3, [r3, #16]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d10d      	bne.n	8015bc0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bac:	f107 0208 	add.w	r2, r7, #8
 8015bb0:	4610      	mov	r0, r2
 8015bb2:	4798      	blx	r3
 8015bb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	3301      	adds	r3, #1
 8015bba:	2202      	movs	r2, #2
 8015bbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015bbe:	e100      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bc8:	f107 0208 	add.w	r2, r7, #8
 8015bcc:	4610      	mov	r0, r2
 8015bce:	4798      	blx	r3
 8015bd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	3301      	adds	r3, #1
 8015bd6:	2202      	movs	r2, #2
 8015bd8:	701a      	strb	r2, [r3, #0]
      break;
 8015bda:	e0f2      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	885b      	ldrh	r3, [r3, #2]
 8015be0:	b2db      	uxtb	r3, r3
 8015be2:	2b05      	cmp	r3, #5
 8015be4:	f200 80ac 	bhi.w	8015d40 <USBD_GetDescriptor+0x258>
 8015be8:	a201      	add	r2, pc, #4	@ (adr r2, 8015bf0 <USBD_GetDescriptor+0x108>)
 8015bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bee:	bf00      	nop
 8015bf0:	08015c09 	.word	0x08015c09
 8015bf4:	08015c3d 	.word	0x08015c3d
 8015bf8:	08015c71 	.word	0x08015c71
 8015bfc:	08015ca5 	.word	0x08015ca5
 8015c00:	08015cd9 	.word	0x08015cd9
 8015c04:	08015d0d 	.word	0x08015d0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d00b      	beq.n	8015c2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	7c12      	ldrb	r2, [r2, #16]
 8015c20:	f107 0108 	add.w	r1, r7, #8
 8015c24:	4610      	mov	r0, r2
 8015c26:	4798      	blx	r3
 8015c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c2a:	e091      	b.n	8015d50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015c2c:	6839      	ldr	r1, [r7, #0]
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f000 facb 	bl	80161ca <USBD_CtlError>
            err++;
 8015c34:	7afb      	ldrb	r3, [r7, #11]
 8015c36:	3301      	adds	r3, #1
 8015c38:	72fb      	strb	r3, [r7, #11]
          break;
 8015c3a:	e089      	b.n	8015d50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c42:	689b      	ldr	r3, [r3, #8]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00b      	beq.n	8015c60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c4e:	689b      	ldr	r3, [r3, #8]
 8015c50:	687a      	ldr	r2, [r7, #4]
 8015c52:	7c12      	ldrb	r2, [r2, #16]
 8015c54:	f107 0108 	add.w	r1, r7, #8
 8015c58:	4610      	mov	r0, r2
 8015c5a:	4798      	blx	r3
 8015c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c5e:	e077      	b.n	8015d50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015c60:	6839      	ldr	r1, [r7, #0]
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 fab1 	bl	80161ca <USBD_CtlError>
            err++;
 8015c68:	7afb      	ldrb	r3, [r7, #11]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8015c6e:	e06f      	b.n	8015d50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d00b      	beq.n	8015c94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	7c12      	ldrb	r2, [r2, #16]
 8015c88:	f107 0108 	add.w	r1, r7, #8
 8015c8c:	4610      	mov	r0, r2
 8015c8e:	4798      	blx	r3
 8015c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c92:	e05d      	b.n	8015d50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015c94:	6839      	ldr	r1, [r7, #0]
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f000 fa97 	bl	80161ca <USBD_CtlError>
            err++;
 8015c9c:	7afb      	ldrb	r3, [r7, #11]
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ca2:	e055      	b.n	8015d50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015caa:	691b      	ldr	r3, [r3, #16]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00b      	beq.n	8015cc8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cb6:	691b      	ldr	r3, [r3, #16]
 8015cb8:	687a      	ldr	r2, [r7, #4]
 8015cba:	7c12      	ldrb	r2, [r2, #16]
 8015cbc:	f107 0108 	add.w	r1, r7, #8
 8015cc0:	4610      	mov	r0, r2
 8015cc2:	4798      	blx	r3
 8015cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cc6:	e043      	b.n	8015d50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015cc8:	6839      	ldr	r1, [r7, #0]
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f000 fa7d 	bl	80161ca <USBD_CtlError>
            err++;
 8015cd0:	7afb      	ldrb	r3, [r7, #11]
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8015cd6:	e03b      	b.n	8015d50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cde:	695b      	ldr	r3, [r3, #20]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d00b      	beq.n	8015cfc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015cea:	695b      	ldr	r3, [r3, #20]
 8015cec:	687a      	ldr	r2, [r7, #4]
 8015cee:	7c12      	ldrb	r2, [r2, #16]
 8015cf0:	f107 0108 	add.w	r1, r7, #8
 8015cf4:	4610      	mov	r0, r2
 8015cf6:	4798      	blx	r3
 8015cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cfa:	e029      	b.n	8015d50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f000 fa63 	bl	80161ca <USBD_CtlError>
            err++;
 8015d04:	7afb      	ldrb	r3, [r7, #11]
 8015d06:	3301      	adds	r3, #1
 8015d08:	72fb      	strb	r3, [r7, #11]
          break;
 8015d0a:	e021      	b.n	8015d50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d12:	699b      	ldr	r3, [r3, #24]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d00b      	beq.n	8015d30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015d1e:	699b      	ldr	r3, [r3, #24]
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	7c12      	ldrb	r2, [r2, #16]
 8015d24:	f107 0108 	add.w	r1, r7, #8
 8015d28:	4610      	mov	r0, r2
 8015d2a:	4798      	blx	r3
 8015d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d2e:	e00f      	b.n	8015d50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015d30:	6839      	ldr	r1, [r7, #0]
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f000 fa49 	bl	80161ca <USBD_CtlError>
            err++;
 8015d38:	7afb      	ldrb	r3, [r7, #11]
 8015d3a:	3301      	adds	r3, #1
 8015d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8015d3e:	e007      	b.n	8015d50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015d40:	6839      	ldr	r1, [r7, #0]
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f000 fa41 	bl	80161ca <USBD_CtlError>
          err++;
 8015d48:	7afb      	ldrb	r3, [r7, #11]
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015d4e:	bf00      	nop
      }
      break;
 8015d50:	e037      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	7c1b      	ldrb	r3, [r3, #16]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d109      	bne.n	8015d6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d62:	f107 0208 	add.w	r2, r7, #8
 8015d66:	4610      	mov	r0, r2
 8015d68:	4798      	blx	r3
 8015d6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d6c:	e029      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015d6e:	6839      	ldr	r1, [r7, #0]
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f000 fa2a 	bl	80161ca <USBD_CtlError>
        err++;
 8015d76:	7afb      	ldrb	r3, [r7, #11]
 8015d78:	3301      	adds	r3, #1
 8015d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8015d7c:	e021      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	7c1b      	ldrb	r3, [r3, #16]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d10d      	bne.n	8015da2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d8e:	f107 0208 	add.w	r2, r7, #8
 8015d92:	4610      	mov	r0, r2
 8015d94:	4798      	blx	r3
 8015d96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	3301      	adds	r3, #1
 8015d9c:	2207      	movs	r2, #7
 8015d9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015da0:	e00f      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015da2:	6839      	ldr	r1, [r7, #0]
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f000 fa10 	bl	80161ca <USBD_CtlError>
        err++;
 8015daa:	7afb      	ldrb	r3, [r7, #11]
 8015dac:	3301      	adds	r3, #1
 8015dae:	72fb      	strb	r3, [r7, #11]
      break;
 8015db0:	e007      	b.n	8015dc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015db2:	6839      	ldr	r1, [r7, #0]
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f000 fa08 	bl	80161ca <USBD_CtlError>
      err++;
 8015dba:	7afb      	ldrb	r3, [r7, #11]
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8015dc0:	bf00      	nop
  }

  if (err != 0U)
 8015dc2:	7afb      	ldrb	r3, [r7, #11]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d11e      	bne.n	8015e06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	88db      	ldrh	r3, [r3, #6]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d016      	beq.n	8015dfe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015dd0:	893b      	ldrh	r3, [r7, #8]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d00e      	beq.n	8015df4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	88da      	ldrh	r2, [r3, #6]
 8015dda:	893b      	ldrh	r3, [r7, #8]
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	bf28      	it	cs
 8015de0:	4613      	movcs	r3, r2
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015de6:	893b      	ldrh	r3, [r7, #8]
 8015de8:	461a      	mov	r2, r3
 8015dea:	68f9      	ldr	r1, [r7, #12]
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	f000 fa69 	bl	80162c4 <USBD_CtlSendData>
 8015df2:	e009      	b.n	8015e08 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015df4:	6839      	ldr	r1, [r7, #0]
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f000 f9e7 	bl	80161ca <USBD_CtlError>
 8015dfc:	e004      	b.n	8015e08 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015dfe:	6878      	ldr	r0, [r7, #4]
 8015e00:	f000 faba 	bl	8016378 <USBD_CtlSendStatus>
 8015e04:	e000      	b.n	8015e08 <USBD_GetDescriptor+0x320>
    return;
 8015e06:	bf00      	nop
  }
}
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop

08015e10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	889b      	ldrh	r3, [r3, #4]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d131      	bne.n	8015e86 <USBD_SetAddress+0x76>
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	88db      	ldrh	r3, [r3, #6]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d12d      	bne.n	8015e86 <USBD_SetAddress+0x76>
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	885b      	ldrh	r3, [r3, #2]
 8015e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015e30:	d829      	bhi.n	8015e86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	885b      	ldrh	r3, [r3, #2]
 8015e36:	b2db      	uxtb	r3, r3
 8015e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015e3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e44:	b2db      	uxtb	r3, r3
 8015e46:	2b03      	cmp	r3, #3
 8015e48:	d104      	bne.n	8015e54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015e4a:	6839      	ldr	r1, [r7, #0]
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f000 f9bc 	bl	80161ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e52:	e01d      	b.n	8015e90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	7bfa      	ldrb	r2, [r7, #15]
 8015e58:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e5c:	7bfb      	ldrb	r3, [r7, #15]
 8015e5e:	4619      	mov	r1, r3
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f000 ff47 	bl	8016cf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f000 fa86 	bl	8016378 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e6c:	7bfb      	ldrb	r3, [r7, #15]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d004      	beq.n	8015e7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2202      	movs	r2, #2
 8015e76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e7a:	e009      	b.n	8015e90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2201      	movs	r2, #1
 8015e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e84:	e004      	b.n	8015e90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015e86:	6839      	ldr	r1, [r7, #0]
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f000 f99e 	bl	80161ca <USBD_CtlError>
  }
}
 8015e8e:	bf00      	nop
 8015e90:	bf00      	nop
 8015e92:	3710      	adds	r7, #16
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bd80      	pop	{r7, pc}

08015e98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b084      	sub	sp, #16
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
 8015ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	885b      	ldrh	r3, [r3, #2]
 8015eaa:	b2da      	uxtb	r2, r3
 8015eac:	4b4e      	ldr	r3, [pc, #312]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015eae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2b01      	cmp	r3, #1
 8015eb6:	d905      	bls.n	8015ec4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015eb8:	6839      	ldr	r1, [r7, #0]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f000 f985 	bl	80161ca <USBD_CtlError>
    return USBD_FAIL;
 8015ec0:	2303      	movs	r3, #3
 8015ec2:	e08c      	b.n	8015fde <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015eca:	b2db      	uxtb	r3, r3
 8015ecc:	2b02      	cmp	r3, #2
 8015ece:	d002      	beq.n	8015ed6 <USBD_SetConfig+0x3e>
 8015ed0:	2b03      	cmp	r3, #3
 8015ed2:	d029      	beq.n	8015f28 <USBD_SetConfig+0x90>
 8015ed4:	e075      	b.n	8015fc2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015ed6:	4b44      	ldr	r3, [pc, #272]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015ed8:	781b      	ldrb	r3, [r3, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d020      	beq.n	8015f20 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015ede:	4b42      	ldr	r3, [pc, #264]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	4619      	mov	r1, r3
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7fe ffb9 	bl	8014e66 <USBD_SetClassConfig>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015ef8:	7bfb      	ldrb	r3, [r7, #15]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d008      	beq.n	8015f10 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015efe:	6839      	ldr	r1, [r7, #0]
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f000 f962 	bl	80161ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	2202      	movs	r2, #2
 8015f0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f0e:	e065      	b.n	8015fdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 fa31 	bl	8016378 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2203      	movs	r2, #3
 8015f1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015f1e:	e05d      	b.n	8015fdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f000 fa29 	bl	8016378 <USBD_CtlSendStatus>
      break;
 8015f26:	e059      	b.n	8015fdc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015f28:	4b2f      	ldr	r3, [pc, #188]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015f2a:	781b      	ldrb	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d112      	bne.n	8015f56 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2202      	movs	r2, #2
 8015f34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8015f38:	4b2b      	ldr	r3, [pc, #172]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	461a      	mov	r2, r3
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f42:	4b29      	ldr	r3, [pc, #164]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015f44:	781b      	ldrb	r3, [r3, #0]
 8015f46:	4619      	mov	r1, r3
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f7fe ffa8 	bl	8014e9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f000 fa12 	bl	8016378 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f54:	e042      	b.n	8015fdc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015f56:	4b24      	ldr	r3, [pc, #144]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015f58:	781b      	ldrb	r3, [r3, #0]
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d02a      	beq.n	8015fba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	f7fe ff96 	bl	8014e9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015f72:	4b1d      	ldr	r3, [pc, #116]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	461a      	mov	r2, r3
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	4619      	mov	r1, r3
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f7fe ff6f 	bl	8014e66 <USBD_SetClassConfig>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015f8c:	7bfb      	ldrb	r3, [r7, #15]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d00f      	beq.n	8015fb2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015f92:	6839      	ldr	r1, [r7, #0]
 8015f94:	6878      	ldr	r0, [r7, #4]
 8015f96:	f000 f918 	bl	80161ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	685b      	ldr	r3, [r3, #4]
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	4619      	mov	r1, r3
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f7fe ff7b 	bl	8014e9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2202      	movs	r2, #2
 8015fac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015fb0:	e014      	b.n	8015fdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f000 f9e0 	bl	8016378 <USBD_CtlSendStatus>
      break;
 8015fb8:	e010      	b.n	8015fdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	f000 f9dc 	bl	8016378 <USBD_CtlSendStatus>
      break;
 8015fc0:	e00c      	b.n	8015fdc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015fc2:	6839      	ldr	r1, [r7, #0]
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f000 f900 	bl	80161ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fca:	4b07      	ldr	r3, [pc, #28]	@ (8015fe8 <USBD_SetConfig+0x150>)
 8015fcc:	781b      	ldrb	r3, [r3, #0]
 8015fce:	4619      	mov	r1, r3
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7fe ff64 	bl	8014e9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015fd6:	2303      	movs	r3, #3
 8015fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8015fda:	bf00      	nop
  }

  return ret;
 8015fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3710      	adds	r7, #16
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	24026800 	.word	0x24026800

08015fec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b082      	sub	sp, #8
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
 8015ff4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	88db      	ldrh	r3, [r3, #6]
 8015ffa:	2b01      	cmp	r3, #1
 8015ffc:	d004      	beq.n	8016008 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015ffe:	6839      	ldr	r1, [r7, #0]
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f000 f8e2 	bl	80161ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016006:	e023      	b.n	8016050 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801600e:	b2db      	uxtb	r3, r3
 8016010:	2b02      	cmp	r3, #2
 8016012:	dc02      	bgt.n	801601a <USBD_GetConfig+0x2e>
 8016014:	2b00      	cmp	r3, #0
 8016016:	dc03      	bgt.n	8016020 <USBD_GetConfig+0x34>
 8016018:	e015      	b.n	8016046 <USBD_GetConfig+0x5a>
 801601a:	2b03      	cmp	r3, #3
 801601c:	d00b      	beq.n	8016036 <USBD_GetConfig+0x4a>
 801601e:	e012      	b.n	8016046 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2200      	movs	r2, #0
 8016024:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	3308      	adds	r3, #8
 801602a:	2201      	movs	r2, #1
 801602c:	4619      	mov	r1, r3
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f000 f948 	bl	80162c4 <USBD_CtlSendData>
        break;
 8016034:	e00c      	b.n	8016050 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	3304      	adds	r3, #4
 801603a:	2201      	movs	r2, #1
 801603c:	4619      	mov	r1, r3
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f000 f940 	bl	80162c4 <USBD_CtlSendData>
        break;
 8016044:	e004      	b.n	8016050 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016046:	6839      	ldr	r1, [r7, #0]
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f000 f8be 	bl	80161ca <USBD_CtlError>
        break;
 801604e:	bf00      	nop
}
 8016050:	bf00      	nop
 8016052:	3708      	adds	r7, #8
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016068:	b2db      	uxtb	r3, r3
 801606a:	3b01      	subs	r3, #1
 801606c:	2b02      	cmp	r3, #2
 801606e:	d81e      	bhi.n	80160ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	88db      	ldrh	r3, [r3, #6]
 8016074:	2b02      	cmp	r3, #2
 8016076:	d004      	beq.n	8016082 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016078:	6839      	ldr	r1, [r7, #0]
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f000 f8a5 	bl	80161ca <USBD_CtlError>
        break;
 8016080:	e01a      	b.n	80160b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2201      	movs	r2, #1
 8016086:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801608e:	2b00      	cmp	r3, #0
 8016090:	d005      	beq.n	801609e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	68db      	ldr	r3, [r3, #12]
 8016096:	f043 0202 	orr.w	r2, r3, #2
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	330c      	adds	r3, #12
 80160a2:	2202      	movs	r2, #2
 80160a4:	4619      	mov	r1, r3
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f000 f90c 	bl	80162c4 <USBD_CtlSendData>
      break;
 80160ac:	e004      	b.n	80160b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80160ae:	6839      	ldr	r1, [r7, #0]
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 f88a 	bl	80161ca <USBD_CtlError>
      break;
 80160b6:	bf00      	nop
  }
}
 80160b8:	bf00      	nop
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	885b      	ldrh	r3, [r3, #2]
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	d107      	bne.n	80160e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	2201      	movs	r2, #1
 80160d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 f94c 	bl	8016378 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80160e0:	e013      	b.n	801610a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	885b      	ldrh	r3, [r3, #2]
 80160e6:	2b02      	cmp	r3, #2
 80160e8:	d10b      	bne.n	8016102 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	889b      	ldrh	r3, [r3, #4]
 80160ee:	0a1b      	lsrs	r3, r3, #8
 80160f0:	b29b      	uxth	r3, r3
 80160f2:	b2da      	uxtb	r2, r3
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f000 f93c 	bl	8016378 <USBD_CtlSendStatus>
}
 8016100:	e003      	b.n	801610a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016102:	6839      	ldr	r1, [r7, #0]
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f000 f860 	bl	80161ca <USBD_CtlError>
}
 801610a:	bf00      	nop
 801610c:	3708      	adds	r7, #8
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}

08016112 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016112:	b580      	push	{r7, lr}
 8016114:	b082      	sub	sp, #8
 8016116:	af00      	add	r7, sp, #0
 8016118:	6078      	str	r0, [r7, #4]
 801611a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016122:	b2db      	uxtb	r3, r3
 8016124:	3b01      	subs	r3, #1
 8016126:	2b02      	cmp	r3, #2
 8016128:	d80b      	bhi.n	8016142 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	885b      	ldrh	r3, [r3, #2]
 801612e:	2b01      	cmp	r3, #1
 8016130:	d10c      	bne.n	801614c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	2200      	movs	r2, #0
 8016136:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f000 f91c 	bl	8016378 <USBD_CtlSendStatus>
      }
      break;
 8016140:	e004      	b.n	801614c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016142:	6839      	ldr	r1, [r7, #0]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 f840 	bl	80161ca <USBD_CtlError>
      break;
 801614a:	e000      	b.n	801614e <USBD_ClrFeature+0x3c>
      break;
 801614c:	bf00      	nop
  }
}
 801614e:	bf00      	nop
 8016150:	3708      	adds	r7, #8
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016156:	b580      	push	{r7, lr}
 8016158:	b084      	sub	sp, #16
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
 801615e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	781a      	ldrb	r2, [r3, #0]
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	3301      	adds	r3, #1
 8016170:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	781a      	ldrb	r2, [r3, #0]
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	3301      	adds	r3, #1
 801617e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016180:	68f8      	ldr	r0, [r7, #12]
 8016182:	f7ff fa16 	bl	80155b2 <SWAPBYTE>
 8016186:	4603      	mov	r3, r0
 8016188:	461a      	mov	r2, r3
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	3301      	adds	r3, #1
 8016192:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	3301      	adds	r3, #1
 8016198:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801619a:	68f8      	ldr	r0, [r7, #12]
 801619c:	f7ff fa09 	bl	80155b2 <SWAPBYTE>
 80161a0:	4603      	mov	r3, r0
 80161a2:	461a      	mov	r2, r3
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	3301      	adds	r3, #1
 80161ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	3301      	adds	r3, #1
 80161b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80161b4:	68f8      	ldr	r0, [r7, #12]
 80161b6:	f7ff f9fc 	bl	80155b2 <SWAPBYTE>
 80161ba:	4603      	mov	r3, r0
 80161bc:	461a      	mov	r2, r3
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	80da      	strh	r2, [r3, #6]
}
 80161c2:	bf00      	nop
 80161c4:	3710      	adds	r7, #16
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}

080161ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161ca:	b580      	push	{r7, lr}
 80161cc:	b082      	sub	sp, #8
 80161ce:	af00      	add	r7, sp, #0
 80161d0:	6078      	str	r0, [r7, #4]
 80161d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80161d4:	2180      	movs	r1, #128	@ 0x80
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f000 fd22 	bl	8016c20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80161dc:	2100      	movs	r1, #0
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f000 fd1e 	bl	8016c20 <USBD_LL_StallEP>
}
 80161e4:	bf00      	nop
 80161e6:	3708      	adds	r7, #8
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}

080161ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b086      	sub	sp, #24
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	60f8      	str	r0, [r7, #12]
 80161f4:	60b9      	str	r1, [r7, #8]
 80161f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80161f8:	2300      	movs	r3, #0
 80161fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d042      	beq.n	8016288 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8016206:	6938      	ldr	r0, [r7, #16]
 8016208:	f000 f842 	bl	8016290 <USBD_GetLen>
 801620c:	4603      	mov	r3, r0
 801620e:	3301      	adds	r3, #1
 8016210:	005b      	lsls	r3, r3, #1
 8016212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016216:	d808      	bhi.n	801622a <USBD_GetString+0x3e>
 8016218:	6938      	ldr	r0, [r7, #16]
 801621a:	f000 f839 	bl	8016290 <USBD_GetLen>
 801621e:	4603      	mov	r3, r0
 8016220:	3301      	adds	r3, #1
 8016222:	b29b      	uxth	r3, r3
 8016224:	005b      	lsls	r3, r3, #1
 8016226:	b29a      	uxth	r2, r3
 8016228:	e001      	b.n	801622e <USBD_GetString+0x42>
 801622a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016232:	7dfb      	ldrb	r3, [r7, #23]
 8016234:	68ba      	ldr	r2, [r7, #8]
 8016236:	4413      	add	r3, r2
 8016238:	687a      	ldr	r2, [r7, #4]
 801623a:	7812      	ldrb	r2, [r2, #0]
 801623c:	701a      	strb	r2, [r3, #0]
  idx++;
 801623e:	7dfb      	ldrb	r3, [r7, #23]
 8016240:	3301      	adds	r3, #1
 8016242:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016244:	7dfb      	ldrb	r3, [r7, #23]
 8016246:	68ba      	ldr	r2, [r7, #8]
 8016248:	4413      	add	r3, r2
 801624a:	2203      	movs	r2, #3
 801624c:	701a      	strb	r2, [r3, #0]
  idx++;
 801624e:	7dfb      	ldrb	r3, [r7, #23]
 8016250:	3301      	adds	r3, #1
 8016252:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016254:	e013      	b.n	801627e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8016256:	7dfb      	ldrb	r3, [r7, #23]
 8016258:	68ba      	ldr	r2, [r7, #8]
 801625a:	4413      	add	r3, r2
 801625c:	693a      	ldr	r2, [r7, #16]
 801625e:	7812      	ldrb	r2, [r2, #0]
 8016260:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	3301      	adds	r3, #1
 8016266:	613b      	str	r3, [r7, #16]
    idx++;
 8016268:	7dfb      	ldrb	r3, [r7, #23]
 801626a:	3301      	adds	r3, #1
 801626c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801626e:	7dfb      	ldrb	r3, [r7, #23]
 8016270:	68ba      	ldr	r2, [r7, #8]
 8016272:	4413      	add	r3, r2
 8016274:	2200      	movs	r2, #0
 8016276:	701a      	strb	r2, [r3, #0]
    idx++;
 8016278:	7dfb      	ldrb	r3, [r7, #23]
 801627a:	3301      	adds	r3, #1
 801627c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801627e:	693b      	ldr	r3, [r7, #16]
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d1e7      	bne.n	8016256 <USBD_GetString+0x6a>
 8016286:	e000      	b.n	801628a <USBD_GetString+0x9e>
    return;
 8016288:	bf00      	nop
  }
}
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016290:	b480      	push	{r7}
 8016292:	b085      	sub	sp, #20
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016298:	2300      	movs	r3, #0
 801629a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80162a0:	e005      	b.n	80162ae <USBD_GetLen+0x1e>
  {
    len++;
 80162a2:	7bfb      	ldrb	r3, [r7, #15]
 80162a4:	3301      	adds	r3, #1
 80162a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	3301      	adds	r3, #1
 80162ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d1f5      	bne.n	80162a2 <USBD_GetLen+0x12>
  }

  return len;
 80162b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	3714      	adds	r7, #20
 80162bc:	46bd      	mov	sp, r7
 80162be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c2:	4770      	bx	lr

080162c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b084      	sub	sp, #16
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	2202      	movs	r2, #2
 80162d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	687a      	ldr	r2, [r7, #4]
 80162e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	68ba      	ldr	r2, [r7, #8]
 80162e8:	2100      	movs	r1, #0
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	f000 fd21 	bl	8016d32 <USBD_LL_Transmit>

  return USBD_OK;
 80162f0:	2300      	movs	r3, #0
}
 80162f2:	4618      	mov	r0, r3
 80162f4:	3710      	adds	r7, #16
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}

080162fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162fa:	b580      	push	{r7, lr}
 80162fc:	b084      	sub	sp, #16
 80162fe:	af00      	add	r7, sp, #0
 8016300:	60f8      	str	r0, [r7, #12]
 8016302:	60b9      	str	r1, [r7, #8]
 8016304:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	68ba      	ldr	r2, [r7, #8]
 801630a:	2100      	movs	r1, #0
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f000 fd10 	bl	8016d32 <USBD_LL_Transmit>

  return USBD_OK;
 8016312:	2300      	movs	r3, #0
}
 8016314:	4618      	mov	r0, r3
 8016316:	3710      	adds	r7, #16
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}

0801631c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b084      	sub	sp, #16
 8016320:	af00      	add	r7, sp, #0
 8016322:	60f8      	str	r0, [r7, #12]
 8016324:	60b9      	str	r1, [r7, #8]
 8016326:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2203      	movs	r2, #3
 801632c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	687a      	ldr	r2, [r7, #4]
 8016334:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	2100      	movs	r1, #0
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	f000 fd14 	bl	8016d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801634c:	2300      	movs	r3, #0
}
 801634e:	4618      	mov	r0, r3
 8016350:	3710      	adds	r7, #16
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}

08016356 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016356:	b580      	push	{r7, lr}
 8016358:	b084      	sub	sp, #16
 801635a:	af00      	add	r7, sp, #0
 801635c:	60f8      	str	r0, [r7, #12]
 801635e:	60b9      	str	r1, [r7, #8]
 8016360:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	68ba      	ldr	r2, [r7, #8]
 8016366:	2100      	movs	r1, #0
 8016368:	68f8      	ldr	r0, [r7, #12]
 801636a:	f000 fd03 	bl	8016d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801636e:	2300      	movs	r3, #0
}
 8016370:	4618      	mov	r0, r3
 8016372:	3710      	adds	r7, #16
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}

08016378 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b082      	sub	sp, #8
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2204      	movs	r2, #4
 8016384:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016388:	2300      	movs	r3, #0
 801638a:	2200      	movs	r2, #0
 801638c:	2100      	movs	r1, #0
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f000 fccf 	bl	8016d32 <USBD_LL_Transmit>

  return USBD_OK;
 8016394:	2300      	movs	r3, #0
}
 8016396:	4618      	mov	r0, r3
 8016398:	3708      	adds	r7, #8
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}

0801639e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801639e:	b580      	push	{r7, lr}
 80163a0:	b082      	sub	sp, #8
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	2205      	movs	r2, #5
 80163aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163ae:	2300      	movs	r3, #0
 80163b0:	2200      	movs	r2, #0
 80163b2:	2100      	movs	r1, #0
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	f000 fcdd 	bl	8016d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163ba:	2300      	movs	r3, #0
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80163c8:	2200      	movs	r2, #0
 80163ca:	4918      	ldr	r1, [pc, #96]	@ (801642c <MX_USB_DEVICE_Init+0x68>)
 80163cc:	4818      	ldr	r0, [pc, #96]	@ (8016430 <MX_USB_DEVICE_Init+0x6c>)
 80163ce:	f7fe fccd 	bl	8014d6c <USBD_Init>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d001      	beq.n	80163dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80163d8:	f7ea ffb2 	bl	8001340 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80163dc:	4915      	ldr	r1, [pc, #84]	@ (8016434 <MX_USB_DEVICE_Init+0x70>)
 80163de:	4814      	ldr	r0, [pc, #80]	@ (8016430 <MX_USB_DEVICE_Init+0x6c>)
 80163e0:	f7fe fcf4 	bl	8014dcc <USBD_RegisterClass>
 80163e4:	4603      	mov	r3, r0
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d001      	beq.n	80163ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80163ea:	f7ea ffa9 	bl	8001340 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80163ee:	4912      	ldr	r1, [pc, #72]	@ (8016438 <MX_USB_DEVICE_Init+0x74>)
 80163f0:	480f      	ldr	r0, [pc, #60]	@ (8016430 <MX_USB_DEVICE_Init+0x6c>)
 80163f2:	f7fe fbeb 	bl	8014bcc <USBD_CDC_RegisterInterface>
 80163f6:	4603      	mov	r3, r0
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d001      	beq.n	8016400 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80163fc:	f7ea ffa0 	bl	8001340 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016400:	480b      	ldr	r0, [pc, #44]	@ (8016430 <MX_USB_DEVICE_Init+0x6c>)
 8016402:	f7fe fd19 	bl	8014e38 <USBD_Start>
 8016406:	4603      	mov	r3, r0
 8016408:	2b00      	cmp	r3, #0
 801640a:	d001      	beq.n	8016410 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801640c:	f7ea ff98 	bl	8001340 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016410:	f7f6 fa28 	bl	800c864 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8016414:	4b06      	ldr	r3, [pc, #24]	@ (8016430 <MX_USB_DEVICE_Init+0x6c>)
 8016416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801641a:	4a05      	ldr	r2, [pc, #20]	@ (8016430 <MX_USB_DEVICE_Init+0x6c>)
 801641c:	33b0      	adds	r3, #176	@ 0xb0
 801641e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016422:	4a06      	ldr	r2, [pc, #24]	@ (801643c <MX_USB_DEVICE_Init+0x78>)
 8016424:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016426:	bf00      	nop
 8016428:	bd80      	pop	{r7, pc}
 801642a:	bf00      	nop
 801642c:	240000b4 	.word	0x240000b4
 8016430:	24026804 	.word	0x24026804
 8016434:	24000020 	.word	0x24000020
 8016438:	240000a0 	.word	0x240000a0
 801643c:	24026ae0 	.word	0x24026ae0

08016440 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016444:	2200      	movs	r2, #0
 8016446:	4905      	ldr	r1, [pc, #20]	@ (801645c <CDC_Init_FS+0x1c>)
 8016448:	4805      	ldr	r0, [pc, #20]	@ (8016460 <CDC_Init_FS+0x20>)
 801644a:	f7fe fbd9 	bl	8014c00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801644e:	4905      	ldr	r1, [pc, #20]	@ (8016464 <CDC_Init_FS+0x24>)
 8016450:	4803      	ldr	r0, [pc, #12]	@ (8016460 <CDC_Init_FS+0x20>)
 8016452:	f7fe fbf7 	bl	8014c44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016456:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016458:	4618      	mov	r0, r3
 801645a:	bd80      	pop	{r7, pc}
 801645c:	240272e4 	.word	0x240272e4
 8016460:	24026804 	.word	0x24026804
 8016464:	24026ae4 	.word	0x24026ae4

08016468 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016468:	b480      	push	{r7}
 801646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801646c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801646e:	4618      	mov	r0, r3
 8016470:	46bd      	mov	sp, r7
 8016472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016476:	4770      	bx	lr

08016478 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016478:	b480      	push	{r7}
 801647a:	b083      	sub	sp, #12
 801647c:	af00      	add	r7, sp, #0
 801647e:	4603      	mov	r3, r0
 8016480:	6039      	str	r1, [r7, #0]
 8016482:	71fb      	strb	r3, [r7, #7]
 8016484:	4613      	mov	r3, r2
 8016486:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016488:	79fb      	ldrb	r3, [r7, #7]
 801648a:	2b23      	cmp	r3, #35	@ 0x23
 801648c:	d84a      	bhi.n	8016524 <CDC_Control_FS+0xac>
 801648e:	a201      	add	r2, pc, #4	@ (adr r2, 8016494 <CDC_Control_FS+0x1c>)
 8016490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016494:	08016525 	.word	0x08016525
 8016498:	08016525 	.word	0x08016525
 801649c:	08016525 	.word	0x08016525
 80164a0:	08016525 	.word	0x08016525
 80164a4:	08016525 	.word	0x08016525
 80164a8:	08016525 	.word	0x08016525
 80164ac:	08016525 	.word	0x08016525
 80164b0:	08016525 	.word	0x08016525
 80164b4:	08016525 	.word	0x08016525
 80164b8:	08016525 	.word	0x08016525
 80164bc:	08016525 	.word	0x08016525
 80164c0:	08016525 	.word	0x08016525
 80164c4:	08016525 	.word	0x08016525
 80164c8:	08016525 	.word	0x08016525
 80164cc:	08016525 	.word	0x08016525
 80164d0:	08016525 	.word	0x08016525
 80164d4:	08016525 	.word	0x08016525
 80164d8:	08016525 	.word	0x08016525
 80164dc:	08016525 	.word	0x08016525
 80164e0:	08016525 	.word	0x08016525
 80164e4:	08016525 	.word	0x08016525
 80164e8:	08016525 	.word	0x08016525
 80164ec:	08016525 	.word	0x08016525
 80164f0:	08016525 	.word	0x08016525
 80164f4:	08016525 	.word	0x08016525
 80164f8:	08016525 	.word	0x08016525
 80164fc:	08016525 	.word	0x08016525
 8016500:	08016525 	.word	0x08016525
 8016504:	08016525 	.word	0x08016525
 8016508:	08016525 	.word	0x08016525
 801650c:	08016525 	.word	0x08016525
 8016510:	08016525 	.word	0x08016525
 8016514:	08016525 	.word	0x08016525
 8016518:	08016525 	.word	0x08016525
 801651c:	08016525 	.word	0x08016525
 8016520:	08016525 	.word	0x08016525
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016524:	bf00      	nop
  }

  return (USBD_OK);
 8016526:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016528:	4618      	mov	r0, r3
 801652a:	370c      	adds	r7, #12
 801652c:	46bd      	mov	sp, r7
 801652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016532:	4770      	bx	lr

08016534 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b082      	sub	sp, #8
 8016538:	af00      	add	r7, sp, #0
 801653a:	6078      	str	r0, [r7, #4]
 801653c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801653e:	6879      	ldr	r1, [r7, #4]
 8016540:	4806      	ldr	r0, [pc, #24]	@ (801655c <CDC_Receive_FS+0x28>)
 8016542:	f7fe fb7f 	bl	8014c44 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016546:	4805      	ldr	r0, [pc, #20]	@ (801655c <CDC_Receive_FS+0x28>)
 8016548:	f7fe fbda 	bl	8014d00 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 801654c:	4b04      	ldr	r3, [pc, #16]	@ (8016560 <CDC_Receive_FS+0x2c>)
 801654e:	2201      	movs	r2, #1
 8016550:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8016552:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016554:	4618      	mov	r0, r3
 8016556:	3708      	adds	r7, #8
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}
 801655c:	24026804 	.word	0x24026804
 8016560:	240267f6 	.word	0x240267f6

08016564 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b084      	sub	sp, #16
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
 801656c:	460b      	mov	r3, r1
 801656e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016570:	2300      	movs	r3, #0
 8016572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016574:	4b0d      	ldr	r3, [pc, #52]	@ (80165ac <CDC_Transmit_FS+0x48>)
 8016576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801657a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016582:	2b00      	cmp	r3, #0
 8016584:	d001      	beq.n	801658a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016586:	2301      	movs	r3, #1
 8016588:	e00b      	b.n	80165a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801658a:	887b      	ldrh	r3, [r7, #2]
 801658c:	461a      	mov	r2, r3
 801658e:	6879      	ldr	r1, [r7, #4]
 8016590:	4806      	ldr	r0, [pc, #24]	@ (80165ac <CDC_Transmit_FS+0x48>)
 8016592:	f7fe fb35 	bl	8014c00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016596:	4805      	ldr	r0, [pc, #20]	@ (80165ac <CDC_Transmit_FS+0x48>)
 8016598:	f7fe fb72 	bl	8014c80 <USBD_CDC_TransmitPacket>
 801659c:	4603      	mov	r3, r0
 801659e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80165a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	24026804 	.word	0x24026804

080165b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80165b0:	b480      	push	{r7}
 80165b2:	b087      	sub	sp, #28
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	4613      	mov	r3, r2
 80165bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80165be:	2300      	movs	r3, #0
 80165c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80165c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165c6:	4618      	mov	r0, r3
 80165c8:	371c      	adds	r7, #28
 80165ca:	46bd      	mov	sp, r7
 80165cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d0:	4770      	bx	lr
	...

080165d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165d4:	b480      	push	{r7}
 80165d6:	b083      	sub	sp, #12
 80165d8:	af00      	add	r7, sp, #0
 80165da:	4603      	mov	r3, r0
 80165dc:	6039      	str	r1, [r7, #0]
 80165de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	2212      	movs	r2, #18
 80165e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80165e6:	4b03      	ldr	r3, [pc, #12]	@ (80165f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	370c      	adds	r7, #12
 80165ec:	46bd      	mov	sp, r7
 80165ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f2:	4770      	bx	lr
 80165f4:	240000d4 	.word	0x240000d4

080165f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165f8:	b480      	push	{r7}
 80165fa:	b083      	sub	sp, #12
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	4603      	mov	r3, r0
 8016600:	6039      	str	r1, [r7, #0]
 8016602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016604:	683b      	ldr	r3, [r7, #0]
 8016606:	2204      	movs	r2, #4
 8016608:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801660a:	4b03      	ldr	r3, [pc, #12]	@ (8016618 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801660c:	4618      	mov	r0, r3
 801660e:	370c      	adds	r7, #12
 8016610:	46bd      	mov	sp, r7
 8016612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016616:	4770      	bx	lr
 8016618:	240000e8 	.word	0x240000e8

0801661c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b082      	sub	sp, #8
 8016620:	af00      	add	r7, sp, #0
 8016622:	4603      	mov	r3, r0
 8016624:	6039      	str	r1, [r7, #0]
 8016626:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016628:	79fb      	ldrb	r3, [r7, #7]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d105      	bne.n	801663a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801662e:	683a      	ldr	r2, [r7, #0]
 8016630:	4907      	ldr	r1, [pc, #28]	@ (8016650 <USBD_FS_ProductStrDescriptor+0x34>)
 8016632:	4808      	ldr	r0, [pc, #32]	@ (8016654 <USBD_FS_ProductStrDescriptor+0x38>)
 8016634:	f7ff fdda 	bl	80161ec <USBD_GetString>
 8016638:	e004      	b.n	8016644 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801663a:	683a      	ldr	r2, [r7, #0]
 801663c:	4904      	ldr	r1, [pc, #16]	@ (8016650 <USBD_FS_ProductStrDescriptor+0x34>)
 801663e:	4805      	ldr	r0, [pc, #20]	@ (8016654 <USBD_FS_ProductStrDescriptor+0x38>)
 8016640:	f7ff fdd4 	bl	80161ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8016644:	4b02      	ldr	r3, [pc, #8]	@ (8016650 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016646:	4618      	mov	r0, r3
 8016648:	3708      	adds	r7, #8
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	24027ae4 	.word	0x24027ae4
 8016654:	08017840 	.word	0x08017840

08016658 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
 801665e:	4603      	mov	r3, r0
 8016660:	6039      	str	r1, [r7, #0]
 8016662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016664:	683a      	ldr	r2, [r7, #0]
 8016666:	4904      	ldr	r1, [pc, #16]	@ (8016678 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016668:	4804      	ldr	r0, [pc, #16]	@ (801667c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801666a:	f7ff fdbf 	bl	80161ec <USBD_GetString>
  return USBD_StrDesc;
 801666e:	4b02      	ldr	r3, [pc, #8]	@ (8016678 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016670:	4618      	mov	r0, r3
 8016672:	3708      	adds	r7, #8
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	24027ae4 	.word	0x24027ae4
 801667c:	08017858 	.word	0x08017858

08016680 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	4603      	mov	r3, r0
 8016688:	6039      	str	r1, [r7, #0]
 801668a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	221a      	movs	r2, #26
 8016690:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016692:	f000 f843 	bl	801671c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016696:	4b02      	ldr	r3, [pc, #8]	@ (80166a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016698:	4618      	mov	r0, r3
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}
 80166a0:	240000ec 	.word	0x240000ec

080166a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b082      	sub	sp, #8
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	4603      	mov	r3, r0
 80166ac:	6039      	str	r1, [r7, #0]
 80166ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80166b0:	79fb      	ldrb	r3, [r7, #7]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d105      	bne.n	80166c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80166b6:	683a      	ldr	r2, [r7, #0]
 80166b8:	4907      	ldr	r1, [pc, #28]	@ (80166d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80166ba:	4808      	ldr	r0, [pc, #32]	@ (80166dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80166bc:	f7ff fd96 	bl	80161ec <USBD_GetString>
 80166c0:	e004      	b.n	80166cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80166c2:	683a      	ldr	r2, [r7, #0]
 80166c4:	4904      	ldr	r1, [pc, #16]	@ (80166d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80166c6:	4805      	ldr	r0, [pc, #20]	@ (80166dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80166c8:	f7ff fd90 	bl	80161ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80166cc:	4b02      	ldr	r3, [pc, #8]	@ (80166d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3708      	adds	r7, #8
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	24027ae4 	.word	0x24027ae4
 80166dc:	0801786c 	.word	0x0801786c

080166e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	4603      	mov	r3, r0
 80166e8:	6039      	str	r1, [r7, #0]
 80166ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80166ec:	79fb      	ldrb	r3, [r7, #7]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d105      	bne.n	80166fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80166f2:	683a      	ldr	r2, [r7, #0]
 80166f4:	4907      	ldr	r1, [pc, #28]	@ (8016714 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80166f6:	4808      	ldr	r0, [pc, #32]	@ (8016718 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80166f8:	f7ff fd78 	bl	80161ec <USBD_GetString>
 80166fc:	e004      	b.n	8016708 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80166fe:	683a      	ldr	r2, [r7, #0]
 8016700:	4904      	ldr	r1, [pc, #16]	@ (8016714 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016702:	4805      	ldr	r0, [pc, #20]	@ (8016718 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016704:	f7ff fd72 	bl	80161ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8016708:	4b02      	ldr	r3, [pc, #8]	@ (8016714 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801670a:	4618      	mov	r0, r3
 801670c:	3708      	adds	r7, #8
 801670e:	46bd      	mov	sp, r7
 8016710:	bd80      	pop	{r7, pc}
 8016712:	bf00      	nop
 8016714:	24027ae4 	.word	0x24027ae4
 8016718:	08017878 	.word	0x08017878

0801671c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b084      	sub	sp, #16
 8016720:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016722:	4b0f      	ldr	r3, [pc, #60]	@ (8016760 <Get_SerialNum+0x44>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016728:	4b0e      	ldr	r3, [pc, #56]	@ (8016764 <Get_SerialNum+0x48>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801672e:	4b0e      	ldr	r3, [pc, #56]	@ (8016768 <Get_SerialNum+0x4c>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	4413      	add	r3, r2
 801673a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d009      	beq.n	8016756 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016742:	2208      	movs	r2, #8
 8016744:	4909      	ldr	r1, [pc, #36]	@ (801676c <Get_SerialNum+0x50>)
 8016746:	68f8      	ldr	r0, [r7, #12]
 8016748:	f000 f814 	bl	8016774 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801674c:	2204      	movs	r2, #4
 801674e:	4908      	ldr	r1, [pc, #32]	@ (8016770 <Get_SerialNum+0x54>)
 8016750:	68b8      	ldr	r0, [r7, #8]
 8016752:	f000 f80f 	bl	8016774 <IntToUnicode>
  }
}
 8016756:	bf00      	nop
 8016758:	3710      	adds	r7, #16
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}
 801675e:	bf00      	nop
 8016760:	1ff1e800 	.word	0x1ff1e800
 8016764:	1ff1e804 	.word	0x1ff1e804
 8016768:	1ff1e808 	.word	0x1ff1e808
 801676c:	240000ee 	.word	0x240000ee
 8016770:	240000fe 	.word	0x240000fe

08016774 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016774:	b480      	push	{r7}
 8016776:	b087      	sub	sp, #28
 8016778:	af00      	add	r7, sp, #0
 801677a:	60f8      	str	r0, [r7, #12]
 801677c:	60b9      	str	r1, [r7, #8]
 801677e:	4613      	mov	r3, r2
 8016780:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016782:	2300      	movs	r3, #0
 8016784:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016786:	2300      	movs	r3, #0
 8016788:	75fb      	strb	r3, [r7, #23]
 801678a:	e027      	b.n	80167dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	0f1b      	lsrs	r3, r3, #28
 8016790:	2b09      	cmp	r3, #9
 8016792:	d80b      	bhi.n	80167ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	0f1b      	lsrs	r3, r3, #28
 8016798:	b2da      	uxtb	r2, r3
 801679a:	7dfb      	ldrb	r3, [r7, #23]
 801679c:	005b      	lsls	r3, r3, #1
 801679e:	4619      	mov	r1, r3
 80167a0:	68bb      	ldr	r3, [r7, #8]
 80167a2:	440b      	add	r3, r1
 80167a4:	3230      	adds	r2, #48	@ 0x30
 80167a6:	b2d2      	uxtb	r2, r2
 80167a8:	701a      	strb	r2, [r3, #0]
 80167aa:	e00a      	b.n	80167c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	0f1b      	lsrs	r3, r3, #28
 80167b0:	b2da      	uxtb	r2, r3
 80167b2:	7dfb      	ldrb	r3, [r7, #23]
 80167b4:	005b      	lsls	r3, r3, #1
 80167b6:	4619      	mov	r1, r3
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	440b      	add	r3, r1
 80167bc:	3237      	adds	r2, #55	@ 0x37
 80167be:	b2d2      	uxtb	r2, r2
 80167c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	011b      	lsls	r3, r3, #4
 80167c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80167c8:	7dfb      	ldrb	r3, [r7, #23]
 80167ca:	005b      	lsls	r3, r3, #1
 80167cc:	3301      	adds	r3, #1
 80167ce:	68ba      	ldr	r2, [r7, #8]
 80167d0:	4413      	add	r3, r2
 80167d2:	2200      	movs	r2, #0
 80167d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80167d6:	7dfb      	ldrb	r3, [r7, #23]
 80167d8:	3301      	adds	r3, #1
 80167da:	75fb      	strb	r3, [r7, #23]
 80167dc:	7dfa      	ldrb	r2, [r7, #23]
 80167de:	79fb      	ldrb	r3, [r7, #7]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d3d3      	bcc.n	801678c <IntToUnicode+0x18>
  }
}
 80167e4:	bf00      	nop
 80167e6:	bf00      	nop
 80167e8:	371c      	adds	r7, #28
 80167ea:	46bd      	mov	sp, r7
 80167ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f0:	4770      	bx	lr
	...

080167f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b0ba      	sub	sp, #232	@ 0xe8
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80167fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8016800:	2200      	movs	r2, #0
 8016802:	601a      	str	r2, [r3, #0]
 8016804:	605a      	str	r2, [r3, #4]
 8016806:	609a      	str	r2, [r3, #8]
 8016808:	60da      	str	r2, [r3, #12]
 801680a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801680c:	f107 0310 	add.w	r3, r7, #16
 8016810:	22c0      	movs	r2, #192	@ 0xc0
 8016812:	2100      	movs	r1, #0
 8016814:	4618      	mov	r0, r3
 8016816:	f000 fb47 	bl	8016ea8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	4a2c      	ldr	r2, [pc, #176]	@ (80168d0 <HAL_PCD_MspInit+0xdc>)
 8016820:	4293      	cmp	r3, r2
 8016822:	d151      	bne.n	80168c8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016824:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8016828:	f04f 0300 	mov.w	r3, #0
 801682c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8016830:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016838:	f107 0310 	add.w	r3, r7, #16
 801683c:	4618      	mov	r0, r3
 801683e:	f7f7 f807 	bl	800d850 <HAL_RCCEx_PeriphCLKConfig>
 8016842:	4603      	mov	r3, r0
 8016844:	2b00      	cmp	r3, #0
 8016846:	d001      	beq.n	801684c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8016848:	f7ea fd7a 	bl	8001340 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801684c:	f7f6 f80a 	bl	800c864 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016850:	4b20      	ldr	r3, [pc, #128]	@ (80168d4 <HAL_PCD_MspInit+0xe0>)
 8016852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016856:	4a1f      	ldr	r2, [pc, #124]	@ (80168d4 <HAL_PCD_MspInit+0xe0>)
 8016858:	f043 0301 	orr.w	r3, r3, #1
 801685c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8016860:	4b1c      	ldr	r3, [pc, #112]	@ (80168d4 <HAL_PCD_MspInit+0xe0>)
 8016862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8016866:	f003 0301 	and.w	r3, r3, #1
 801686a:	60fb      	str	r3, [r7, #12]
 801686c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801686e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8016872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016876:	2302      	movs	r3, #2
 8016878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801687c:	2300      	movs	r3, #0
 801687e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016882:	2300      	movs	r3, #0
 8016884:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8016888:	230a      	movs	r3, #10
 801688a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801688e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8016892:	4619      	mov	r1, r3
 8016894:	4810      	ldr	r0, [pc, #64]	@ (80168d8 <HAL_PCD_MspInit+0xe4>)
 8016896:	f7ef ffd5 	bl	8006844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801689a:	4b0e      	ldr	r3, [pc, #56]	@ (80168d4 <HAL_PCD_MspInit+0xe0>)
 801689c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80168a0:	4a0c      	ldr	r2, [pc, #48]	@ (80168d4 <HAL_PCD_MspInit+0xe0>)
 80168a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80168a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80168aa:	4b0a      	ldr	r3, [pc, #40]	@ (80168d4 <HAL_PCD_MspInit+0xe0>)
 80168ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80168b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80168b4:	60bb      	str	r3, [r7, #8]
 80168b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80168b8:	2200      	movs	r2, #0
 80168ba:	2100      	movs	r1, #0
 80168bc:	2065      	movs	r0, #101	@ 0x65
 80168be:	f7ed f8be 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80168c2:	2065      	movs	r0, #101	@ 0x65
 80168c4:	f7ed f8d5 	bl	8003a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80168c8:	bf00      	nop
 80168ca:	37e8      	adds	r7, #232	@ 0xe8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	40080000 	.word	0x40080000
 80168d4:	58024400 	.word	0x58024400
 80168d8:	58020000 	.word	0x58020000

080168dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80168f0:	4619      	mov	r1, r3
 80168f2:	4610      	mov	r0, r2
 80168f4:	f7fe faed 	bl	8014ed2 <USBD_LL_SetupStage>
}
 80168f8:	bf00      	nop
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	460b      	mov	r3, r1
 801690a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016912:	78fa      	ldrb	r2, [r7, #3]
 8016914:	6879      	ldr	r1, [r7, #4]
 8016916:	4613      	mov	r3, r2
 8016918:	00db      	lsls	r3, r3, #3
 801691a:	4413      	add	r3, r2
 801691c:	009b      	lsls	r3, r3, #2
 801691e:	440b      	add	r3, r1
 8016920:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8016924:	681a      	ldr	r2, [r3, #0]
 8016926:	78fb      	ldrb	r3, [r7, #3]
 8016928:	4619      	mov	r1, r3
 801692a:	f7fe fb27 	bl	8014f7c <USBD_LL_DataOutStage>
}
 801692e:	bf00      	nop
 8016930:	3708      	adds	r7, #8
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}

08016936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016936:	b580      	push	{r7, lr}
 8016938:	b082      	sub	sp, #8
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
 801693e:	460b      	mov	r3, r1
 8016940:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8016948:	78fa      	ldrb	r2, [r7, #3]
 801694a:	6879      	ldr	r1, [r7, #4]
 801694c:	4613      	mov	r3, r2
 801694e:	00db      	lsls	r3, r3, #3
 8016950:	4413      	add	r3, r2
 8016952:	009b      	lsls	r3, r3, #2
 8016954:	440b      	add	r3, r1
 8016956:	3320      	adds	r3, #32
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	78fb      	ldrb	r3, [r7, #3]
 801695c:	4619      	mov	r1, r3
 801695e:	f7fe fbc0 	bl	80150e2 <USBD_LL_DataInStage>
}
 8016962:	bf00      	nop
 8016964:	3708      	adds	r7, #8
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}

0801696a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801696a:	b580      	push	{r7, lr}
 801696c:	b082      	sub	sp, #8
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016978:	4618      	mov	r0, r3
 801697a:	f7fe fcfa 	bl	8015372 <USBD_LL_SOF>
}
 801697e:	bf00      	nop
 8016980:	3708      	adds	r7, #8
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}

08016986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016986:	b580      	push	{r7, lr}
 8016988:	b084      	sub	sp, #16
 801698a:	af00      	add	r7, sp, #0
 801698c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801698e:	2301      	movs	r3, #1
 8016990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	79db      	ldrb	r3, [r3, #7]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d102      	bne.n	80169a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801699a:	2300      	movs	r3, #0
 801699c:	73fb      	strb	r3, [r7, #15]
 801699e:	e008      	b.n	80169b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	79db      	ldrb	r3, [r3, #7]
 80169a4:	2b02      	cmp	r3, #2
 80169a6:	d102      	bne.n	80169ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80169a8:	2301      	movs	r3, #1
 80169aa:	73fb      	strb	r3, [r7, #15]
 80169ac:	e001      	b.n	80169b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80169ae:	f7ea fcc7 	bl	8001340 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80169b8:	7bfa      	ldrb	r2, [r7, #15]
 80169ba:	4611      	mov	r1, r2
 80169bc:	4618      	mov	r0, r3
 80169be:	f7fe fc94 	bl	80152ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7fe fc3c 	bl	8015246 <USBD_LL_Reset>
}
 80169ce:	bf00      	nop
 80169d0:	3710      	adds	r7, #16
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
	...

080169d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80169e6:	4618      	mov	r0, r3
 80169e8:	f7fe fc8f 	bl	801530a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	6812      	ldr	r2, [r2, #0]
 80169fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80169fe:	f043 0301 	orr.w	r3, r3, #1
 8016a02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	7adb      	ldrb	r3, [r3, #11]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d005      	beq.n	8016a18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a0c:	4b04      	ldr	r3, [pc, #16]	@ (8016a20 <HAL_PCD_SuspendCallback+0x48>)
 8016a0e:	691b      	ldr	r3, [r3, #16]
 8016a10:	4a03      	ldr	r2, [pc, #12]	@ (8016a20 <HAL_PCD_SuspendCallback+0x48>)
 8016a12:	f043 0306 	orr.w	r3, r3, #6
 8016a16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016a18:	bf00      	nop
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}
 8016a20:	e000ed00 	.word	0xe000ed00

08016a24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b082      	sub	sp, #8
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7fe fc85 	bl	8015342 <USBD_LL_Resume>
}
 8016a38:	bf00      	nop
 8016a3a:	3708      	adds	r7, #8
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}

08016a40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b082      	sub	sp, #8
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	460b      	mov	r3, r1
 8016a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016a52:	78fa      	ldrb	r2, [r7, #3]
 8016a54:	4611      	mov	r1, r2
 8016a56:	4618      	mov	r0, r3
 8016a58:	f7fe fcdd 	bl	8015416 <USBD_LL_IsoOUTIncomplete>
}
 8016a5c:	bf00      	nop
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016a76:	78fa      	ldrb	r2, [r7, #3]
 8016a78:	4611      	mov	r1, r2
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7fe fc99 	bl	80153b2 <USBD_LL_IsoINIncomplete>
}
 8016a80:	bf00      	nop
 8016a82:	3708      	adds	r7, #8
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016a96:	4618      	mov	r0, r3
 8016a98:	f7fe fcef 	bl	801547a <USBD_LL_DevConnected>
}
 8016a9c:	bf00      	nop
 8016a9e:	3708      	adds	r7, #8
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}

08016aa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b082      	sub	sp, #8
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f7fe fcec 	bl	8015490 <USBD_LL_DevDisconnected>
}
 8016ab8:	bf00      	nop
 8016aba:	3708      	adds	r7, #8
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}

08016ac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d13e      	bne.n	8016b4e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016ad0:	4a21      	ldr	r2, [pc, #132]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	4a1f      	ldr	r2, [pc, #124]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016adc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8016b5c <USBD_LL_Init+0x9c>)
 8016ae4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8016ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016ae8:	2209      	movs	r2, #9
 8016aea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016aec:	4b1a      	ldr	r3, [pc, #104]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016aee:	2202      	movs	r2, #2
 8016af0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016af2:	4b19      	ldr	r3, [pc, #100]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016af4:	2200      	movs	r2, #0
 8016af6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016af8:	4b17      	ldr	r3, [pc, #92]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016afa:	2202      	movs	r2, #2
 8016afc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016afe:	4b16      	ldr	r3, [pc, #88]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b00:	2200      	movs	r2, #0
 8016b02:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016b04:	4b14      	ldr	r3, [pc, #80]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b06:	2200      	movs	r2, #0
 8016b08:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016b0a:	4b13      	ldr	r3, [pc, #76]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8016b10:	4b11      	ldr	r3, [pc, #68]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b12:	2200      	movs	r2, #0
 8016b14:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016b16:	4b10      	ldr	r3, [pc, #64]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b18:	2200      	movs	r2, #0
 8016b1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b1e:	2200      	movs	r2, #0
 8016b20:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016b22:	480d      	ldr	r0, [pc, #52]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b24:	f7f4 fbc4 	bl	800b2b0 <HAL_PCD_Init>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d001      	beq.n	8016b32 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016b2e:	f7ea fc07 	bl	8001340 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016b32:	2180      	movs	r1, #128	@ 0x80
 8016b34:	4808      	ldr	r0, [pc, #32]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b36:	f7f5 fe1a 	bl	800c76e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016b3a:	2240      	movs	r2, #64	@ 0x40
 8016b3c:	2100      	movs	r1, #0
 8016b3e:	4806      	ldr	r0, [pc, #24]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b40:	f7f5 fdce 	bl	800c6e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016b44:	2280      	movs	r2, #128	@ 0x80
 8016b46:	2101      	movs	r1, #1
 8016b48:	4803      	ldr	r0, [pc, #12]	@ (8016b58 <USBD_LL_Init+0x98>)
 8016b4a:	f7f5 fdc9 	bl	800c6e0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8016b4e:	2300      	movs	r3, #0
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3708      	adds	r7, #8
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	24027ce4 	.word	0x24027ce4
 8016b5c:	40080000 	.word	0x40080000

08016b60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b084      	sub	sp, #16
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b68:	2300      	movs	r3, #0
 8016b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016b76:	4618      	mov	r0, r3
 8016b78:	f7f4 fca6 	bl	800b4c8 <HAL_PCD_Start>
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b80:	7bfb      	ldrb	r3, [r7, #15]
 8016b82:	4618      	mov	r0, r3
 8016b84:	f000 f942 	bl	8016e0c <USBD_Get_USB_Status>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3710      	adds	r7, #16
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}

08016b96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016b96:	b580      	push	{r7, lr}
 8016b98:	b084      	sub	sp, #16
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6078      	str	r0, [r7, #4]
 8016b9e:	4608      	mov	r0, r1
 8016ba0:	4611      	mov	r1, r2
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	70fb      	strb	r3, [r7, #3]
 8016ba8:	460b      	mov	r3, r1
 8016baa:	70bb      	strb	r3, [r7, #2]
 8016bac:	4613      	mov	r3, r2
 8016bae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016bbe:	78bb      	ldrb	r3, [r7, #2]
 8016bc0:	883a      	ldrh	r2, [r7, #0]
 8016bc2:	78f9      	ldrb	r1, [r7, #3]
 8016bc4:	f7f5 f9a7 	bl	800bf16 <HAL_PCD_EP_Open>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bcc:	7bfb      	ldrb	r3, [r7, #15]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f000 f91c 	bl	8016e0c <USBD_Get_USB_Status>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bda:	4618      	mov	r0, r3
 8016bdc:	3710      	adds	r7, #16
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}

08016be2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016be2:	b580      	push	{r7, lr}
 8016be4:	b084      	sub	sp, #16
 8016be6:	af00      	add	r7, sp, #0
 8016be8:	6078      	str	r0, [r7, #4]
 8016bea:	460b      	mov	r3, r1
 8016bec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bee:	2300      	movs	r3, #0
 8016bf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016bfc:	78fa      	ldrb	r2, [r7, #3]
 8016bfe:	4611      	mov	r1, r2
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7f5 f9f2 	bl	800bfea <HAL_PCD_EP_Close>
 8016c06:	4603      	mov	r3, r0
 8016c08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c0a:	7bfb      	ldrb	r3, [r7, #15]
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f000 f8fd 	bl	8016e0c <USBD_Get_USB_Status>
 8016c12:	4603      	mov	r3, r0
 8016c14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3710      	adds	r7, #16
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	460b      	mov	r3, r1
 8016c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c30:	2300      	movs	r3, #0
 8016c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016c3a:	78fa      	ldrb	r2, [r7, #3]
 8016c3c:	4611      	mov	r1, r2
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f7f5 faaa 	bl	800c198 <HAL_PCD_EP_SetStall>
 8016c44:	4603      	mov	r3, r0
 8016c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c48:	7bfb      	ldrb	r3, [r7, #15]
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f000 f8de 	bl	8016e0c <USBD_Get_USB_Status>
 8016c50:	4603      	mov	r3, r0
 8016c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3710      	adds	r7, #16
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}

08016c5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c5e:	b580      	push	{r7, lr}
 8016c60:	b084      	sub	sp, #16
 8016c62:	af00      	add	r7, sp, #0
 8016c64:	6078      	str	r0, [r7, #4]
 8016c66:	460b      	mov	r3, r1
 8016c68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016c78:	78fa      	ldrb	r2, [r7, #3]
 8016c7a:	4611      	mov	r1, r2
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7f5 faee 	bl	800c25e <HAL_PCD_EP_ClrStall>
 8016c82:	4603      	mov	r3, r0
 8016c84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c86:	7bfb      	ldrb	r3, [r7, #15]
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f000 f8bf 	bl	8016e0c <USBD_Get_USB_Status>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c92:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3710      	adds	r7, #16
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c9c:	b480      	push	{r7}
 8016c9e:	b085      	sub	sp, #20
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	460b      	mov	r3, r1
 8016ca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016cae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	da0b      	bge.n	8016cd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016cb8:	78fb      	ldrb	r3, [r7, #3]
 8016cba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016cbe:	68f9      	ldr	r1, [r7, #12]
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	00db      	lsls	r3, r3, #3
 8016cc4:	4413      	add	r3, r2
 8016cc6:	009b      	lsls	r3, r3, #2
 8016cc8:	440b      	add	r3, r1
 8016cca:	3316      	adds	r3, #22
 8016ccc:	781b      	ldrb	r3, [r3, #0]
 8016cce:	e00b      	b.n	8016ce8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016cd0:	78fb      	ldrb	r3, [r7, #3]
 8016cd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016cd6:	68f9      	ldr	r1, [r7, #12]
 8016cd8:	4613      	mov	r3, r2
 8016cda:	00db      	lsls	r3, r3, #3
 8016cdc:	4413      	add	r3, r2
 8016cde:	009b      	lsls	r3, r3, #2
 8016ce0:	440b      	add	r3, r1
 8016ce2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8016ce6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ce8:	4618      	mov	r0, r3
 8016cea:	3714      	adds	r7, #20
 8016cec:	46bd      	mov	sp, r7
 8016cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf2:	4770      	bx	lr

08016cf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b084      	sub	sp, #16
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
 8016cfc:	460b      	mov	r3, r1
 8016cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d00:	2300      	movs	r3, #0
 8016d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d04:	2300      	movs	r3, #0
 8016d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016d0e:	78fa      	ldrb	r2, [r7, #3]
 8016d10:	4611      	mov	r1, r2
 8016d12:	4618      	mov	r0, r3
 8016d14:	f7f5 f8db 	bl	800bece <HAL_PCD_SetAddress>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d1c:	7bfb      	ldrb	r3, [r7, #15]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f000 f874 	bl	8016e0c <USBD_Get_USB_Status>
 8016d24:	4603      	mov	r3, r0
 8016d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	3710      	adds	r7, #16
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bd80      	pop	{r7, pc}

08016d32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d32:	b580      	push	{r7, lr}
 8016d34:	b086      	sub	sp, #24
 8016d36:	af00      	add	r7, sp, #0
 8016d38:	60f8      	str	r0, [r7, #12]
 8016d3a:	607a      	str	r2, [r7, #4]
 8016d3c:	603b      	str	r3, [r7, #0]
 8016d3e:	460b      	mov	r3, r1
 8016d40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d42:	2300      	movs	r3, #0
 8016d44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d46:	2300      	movs	r3, #0
 8016d48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016d50:	7af9      	ldrb	r1, [r7, #11]
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	f7f5 f9e5 	bl	800c124 <HAL_PCD_EP_Transmit>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d5e:	7dfb      	ldrb	r3, [r7, #23]
 8016d60:	4618      	mov	r0, r3
 8016d62:	f000 f853 	bl	8016e0c <USBD_Get_USB_Status>
 8016d66:	4603      	mov	r3, r0
 8016d68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016d6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3718      	adds	r7, #24
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}

08016d74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b086      	sub	sp, #24
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	60f8      	str	r0, [r7, #12]
 8016d7c:	607a      	str	r2, [r7, #4]
 8016d7e:	603b      	str	r3, [r7, #0]
 8016d80:	460b      	mov	r3, r1
 8016d82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016d92:	7af9      	ldrb	r1, [r7, #11]
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	f7f5 f971 	bl	800c07e <HAL_PCD_EP_Receive>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016da0:	7dfb      	ldrb	r3, [r7, #23]
 8016da2:	4618      	mov	r0, r3
 8016da4:	f000 f832 	bl	8016e0c <USBD_Get_USB_Status>
 8016da8:	4603      	mov	r3, r0
 8016daa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016dac:	7dbb      	ldrb	r3, [r7, #22]
}
 8016dae:	4618      	mov	r0, r3
 8016db0:	3718      	adds	r7, #24
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}

08016db6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b082      	sub	sp, #8
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	6078      	str	r0, [r7, #4]
 8016dbe:	460b      	mov	r3, r1
 8016dc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016dc8:	78fa      	ldrb	r2, [r7, #3]
 8016dca:	4611      	mov	r1, r2
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f7f5 f991 	bl	800c0f4 <HAL_PCD_EP_GetRxCount>
 8016dd2:	4603      	mov	r3, r0
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3708      	adds	r7, #8
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}

08016ddc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b083      	sub	sp, #12
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016de4:	4b03      	ldr	r3, [pc, #12]	@ (8016df4 <USBD_static_malloc+0x18>)
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	370c      	adds	r7, #12
 8016dea:	46bd      	mov	sp, r7
 8016dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df0:	4770      	bx	lr
 8016df2:	bf00      	nop
 8016df4:	240281c8 	.word	0x240281c8

08016df8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016df8:	b480      	push	{r7}
 8016dfa:	b083      	sub	sp, #12
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016e00:	bf00      	nop
 8016e02:	370c      	adds	r7, #12
 8016e04:	46bd      	mov	sp, r7
 8016e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0a:	4770      	bx	lr

08016e0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e0c:	b480      	push	{r7}
 8016e0e:	b085      	sub	sp, #20
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	4603      	mov	r3, r0
 8016e14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e16:	2300      	movs	r3, #0
 8016e18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e1a:	79fb      	ldrb	r3, [r7, #7]
 8016e1c:	2b03      	cmp	r3, #3
 8016e1e:	d817      	bhi.n	8016e50 <USBD_Get_USB_Status+0x44>
 8016e20:	a201      	add	r2, pc, #4	@ (adr r2, 8016e28 <USBD_Get_USB_Status+0x1c>)
 8016e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e26:	bf00      	nop
 8016e28:	08016e39 	.word	0x08016e39
 8016e2c:	08016e3f 	.word	0x08016e3f
 8016e30:	08016e45 	.word	0x08016e45
 8016e34:	08016e4b 	.word	0x08016e4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8016e3c:	e00b      	b.n	8016e56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e3e:	2303      	movs	r3, #3
 8016e40:	73fb      	strb	r3, [r7, #15]
    break;
 8016e42:	e008      	b.n	8016e56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e44:	2301      	movs	r3, #1
 8016e46:	73fb      	strb	r3, [r7, #15]
    break;
 8016e48:	e005      	b.n	8016e56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016e4a:	2303      	movs	r3, #3
 8016e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8016e4e:	e002      	b.n	8016e56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016e50:	2303      	movs	r3, #3
 8016e52:	73fb      	strb	r3, [r7, #15]
    break;
 8016e54:	bf00      	nop
  }
  return usb_status;
 8016e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e58:	4618      	mov	r0, r3
 8016e5a:	3714      	adds	r7, #20
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e62:	4770      	bx	lr

08016e64 <siprintf>:
 8016e64:	b40e      	push	{r1, r2, r3}
 8016e66:	b510      	push	{r4, lr}
 8016e68:	b09d      	sub	sp, #116	@ 0x74
 8016e6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8016e6c:	9002      	str	r0, [sp, #8]
 8016e6e:	9006      	str	r0, [sp, #24]
 8016e70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016e74:	480a      	ldr	r0, [pc, #40]	@ (8016ea0 <siprintf+0x3c>)
 8016e76:	9107      	str	r1, [sp, #28]
 8016e78:	9104      	str	r1, [sp, #16]
 8016e7a:	490a      	ldr	r1, [pc, #40]	@ (8016ea4 <siprintf+0x40>)
 8016e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e80:	9105      	str	r1, [sp, #20]
 8016e82:	2400      	movs	r4, #0
 8016e84:	a902      	add	r1, sp, #8
 8016e86:	6800      	ldr	r0, [r0, #0]
 8016e88:	9301      	str	r3, [sp, #4]
 8016e8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8016e8c:	f000 f9a2 	bl	80171d4 <_svfiprintf_r>
 8016e90:	9b02      	ldr	r3, [sp, #8]
 8016e92:	701c      	strb	r4, [r3, #0]
 8016e94:	b01d      	add	sp, #116	@ 0x74
 8016e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e9a:	b003      	add	sp, #12
 8016e9c:	4770      	bx	lr
 8016e9e:	bf00      	nop
 8016ea0:	24000108 	.word	0x24000108
 8016ea4:	ffff0208 	.word	0xffff0208

08016ea8 <memset>:
 8016ea8:	4402      	add	r2, r0
 8016eaa:	4603      	mov	r3, r0
 8016eac:	4293      	cmp	r3, r2
 8016eae:	d100      	bne.n	8016eb2 <memset+0xa>
 8016eb0:	4770      	bx	lr
 8016eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8016eb6:	e7f9      	b.n	8016eac <memset+0x4>

08016eb8 <__errno>:
 8016eb8:	4b01      	ldr	r3, [pc, #4]	@ (8016ec0 <__errno+0x8>)
 8016eba:	6818      	ldr	r0, [r3, #0]
 8016ebc:	4770      	bx	lr
 8016ebe:	bf00      	nop
 8016ec0:	24000108 	.word	0x24000108

08016ec4 <__libc_init_array>:
 8016ec4:	b570      	push	{r4, r5, r6, lr}
 8016ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8016efc <__libc_init_array+0x38>)
 8016ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8016f00 <__libc_init_array+0x3c>)
 8016eca:	1b64      	subs	r4, r4, r5
 8016ecc:	10a4      	asrs	r4, r4, #2
 8016ece:	2600      	movs	r6, #0
 8016ed0:	42a6      	cmp	r6, r4
 8016ed2:	d109      	bne.n	8016ee8 <__libc_init_array+0x24>
 8016ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8016f04 <__libc_init_array+0x40>)
 8016ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8016f08 <__libc_init_array+0x44>)
 8016ed8:	f000 fc64 	bl	80177a4 <_init>
 8016edc:	1b64      	subs	r4, r4, r5
 8016ede:	10a4      	asrs	r4, r4, #2
 8016ee0:	2600      	movs	r6, #0
 8016ee2:	42a6      	cmp	r6, r4
 8016ee4:	d105      	bne.n	8016ef2 <__libc_init_array+0x2e>
 8016ee6:	bd70      	pop	{r4, r5, r6, pc}
 8016ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016eec:	4798      	blx	r3
 8016eee:	3601      	adds	r6, #1
 8016ef0:	e7ee      	b.n	8016ed0 <__libc_init_array+0xc>
 8016ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ef6:	4798      	blx	r3
 8016ef8:	3601      	adds	r6, #1
 8016efa:	e7f2      	b.n	8016ee2 <__libc_init_array+0x1e>
 8016efc:	08017e1c 	.word	0x08017e1c
 8016f00:	08017e1c 	.word	0x08017e1c
 8016f04:	08017e1c 	.word	0x08017e1c
 8016f08:	08017e20 	.word	0x08017e20

08016f0c <__retarget_lock_acquire_recursive>:
 8016f0c:	4770      	bx	lr

08016f0e <__retarget_lock_release_recursive>:
 8016f0e:	4770      	bx	lr

08016f10 <memcpy>:
 8016f10:	440a      	add	r2, r1
 8016f12:	4291      	cmp	r1, r2
 8016f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8016f18:	d100      	bne.n	8016f1c <memcpy+0xc>
 8016f1a:	4770      	bx	lr
 8016f1c:	b510      	push	{r4, lr}
 8016f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f26:	4291      	cmp	r1, r2
 8016f28:	d1f9      	bne.n	8016f1e <memcpy+0xe>
 8016f2a:	bd10      	pop	{r4, pc}

08016f2c <_free_r>:
 8016f2c:	b538      	push	{r3, r4, r5, lr}
 8016f2e:	4605      	mov	r5, r0
 8016f30:	2900      	cmp	r1, #0
 8016f32:	d041      	beq.n	8016fb8 <_free_r+0x8c>
 8016f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f38:	1f0c      	subs	r4, r1, #4
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	bfb8      	it	lt
 8016f3e:	18e4      	addlt	r4, r4, r3
 8016f40:	f000 f8e0 	bl	8017104 <__malloc_lock>
 8016f44:	4a1d      	ldr	r2, [pc, #116]	@ (8016fbc <_free_r+0x90>)
 8016f46:	6813      	ldr	r3, [r2, #0]
 8016f48:	b933      	cbnz	r3, 8016f58 <_free_r+0x2c>
 8016f4a:	6063      	str	r3, [r4, #4]
 8016f4c:	6014      	str	r4, [r2, #0]
 8016f4e:	4628      	mov	r0, r5
 8016f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f54:	f000 b8dc 	b.w	8017110 <__malloc_unlock>
 8016f58:	42a3      	cmp	r3, r4
 8016f5a:	d908      	bls.n	8016f6e <_free_r+0x42>
 8016f5c:	6820      	ldr	r0, [r4, #0]
 8016f5e:	1821      	adds	r1, r4, r0
 8016f60:	428b      	cmp	r3, r1
 8016f62:	bf01      	itttt	eq
 8016f64:	6819      	ldreq	r1, [r3, #0]
 8016f66:	685b      	ldreq	r3, [r3, #4]
 8016f68:	1809      	addeq	r1, r1, r0
 8016f6a:	6021      	streq	r1, [r4, #0]
 8016f6c:	e7ed      	b.n	8016f4a <_free_r+0x1e>
 8016f6e:	461a      	mov	r2, r3
 8016f70:	685b      	ldr	r3, [r3, #4]
 8016f72:	b10b      	cbz	r3, 8016f78 <_free_r+0x4c>
 8016f74:	42a3      	cmp	r3, r4
 8016f76:	d9fa      	bls.n	8016f6e <_free_r+0x42>
 8016f78:	6811      	ldr	r1, [r2, #0]
 8016f7a:	1850      	adds	r0, r2, r1
 8016f7c:	42a0      	cmp	r0, r4
 8016f7e:	d10b      	bne.n	8016f98 <_free_r+0x6c>
 8016f80:	6820      	ldr	r0, [r4, #0]
 8016f82:	4401      	add	r1, r0
 8016f84:	1850      	adds	r0, r2, r1
 8016f86:	4283      	cmp	r3, r0
 8016f88:	6011      	str	r1, [r2, #0]
 8016f8a:	d1e0      	bne.n	8016f4e <_free_r+0x22>
 8016f8c:	6818      	ldr	r0, [r3, #0]
 8016f8e:	685b      	ldr	r3, [r3, #4]
 8016f90:	6053      	str	r3, [r2, #4]
 8016f92:	4408      	add	r0, r1
 8016f94:	6010      	str	r0, [r2, #0]
 8016f96:	e7da      	b.n	8016f4e <_free_r+0x22>
 8016f98:	d902      	bls.n	8016fa0 <_free_r+0x74>
 8016f9a:	230c      	movs	r3, #12
 8016f9c:	602b      	str	r3, [r5, #0]
 8016f9e:	e7d6      	b.n	8016f4e <_free_r+0x22>
 8016fa0:	6820      	ldr	r0, [r4, #0]
 8016fa2:	1821      	adds	r1, r4, r0
 8016fa4:	428b      	cmp	r3, r1
 8016fa6:	bf04      	itt	eq
 8016fa8:	6819      	ldreq	r1, [r3, #0]
 8016faa:	685b      	ldreq	r3, [r3, #4]
 8016fac:	6063      	str	r3, [r4, #4]
 8016fae:	bf04      	itt	eq
 8016fb0:	1809      	addeq	r1, r1, r0
 8016fb2:	6021      	streq	r1, [r4, #0]
 8016fb4:	6054      	str	r4, [r2, #4]
 8016fb6:	e7ca      	b.n	8016f4e <_free_r+0x22>
 8016fb8:	bd38      	pop	{r3, r4, r5, pc}
 8016fba:	bf00      	nop
 8016fbc:	2402852c 	.word	0x2402852c

08016fc0 <sbrk_aligned>:
 8016fc0:	b570      	push	{r4, r5, r6, lr}
 8016fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8017000 <sbrk_aligned+0x40>)
 8016fc4:	460c      	mov	r4, r1
 8016fc6:	6831      	ldr	r1, [r6, #0]
 8016fc8:	4605      	mov	r5, r0
 8016fca:	b911      	cbnz	r1, 8016fd2 <sbrk_aligned+0x12>
 8016fcc:	f000 fba4 	bl	8017718 <_sbrk_r>
 8016fd0:	6030      	str	r0, [r6, #0]
 8016fd2:	4621      	mov	r1, r4
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f000 fb9f 	bl	8017718 <_sbrk_r>
 8016fda:	1c43      	adds	r3, r0, #1
 8016fdc:	d103      	bne.n	8016fe6 <sbrk_aligned+0x26>
 8016fde:	f04f 34ff 	mov.w	r4, #4294967295
 8016fe2:	4620      	mov	r0, r4
 8016fe4:	bd70      	pop	{r4, r5, r6, pc}
 8016fe6:	1cc4      	adds	r4, r0, #3
 8016fe8:	f024 0403 	bic.w	r4, r4, #3
 8016fec:	42a0      	cmp	r0, r4
 8016fee:	d0f8      	beq.n	8016fe2 <sbrk_aligned+0x22>
 8016ff0:	1a21      	subs	r1, r4, r0
 8016ff2:	4628      	mov	r0, r5
 8016ff4:	f000 fb90 	bl	8017718 <_sbrk_r>
 8016ff8:	3001      	adds	r0, #1
 8016ffa:	d1f2      	bne.n	8016fe2 <sbrk_aligned+0x22>
 8016ffc:	e7ef      	b.n	8016fde <sbrk_aligned+0x1e>
 8016ffe:	bf00      	nop
 8017000:	24028528 	.word	0x24028528

08017004 <_malloc_r>:
 8017004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017008:	1ccd      	adds	r5, r1, #3
 801700a:	f025 0503 	bic.w	r5, r5, #3
 801700e:	3508      	adds	r5, #8
 8017010:	2d0c      	cmp	r5, #12
 8017012:	bf38      	it	cc
 8017014:	250c      	movcc	r5, #12
 8017016:	2d00      	cmp	r5, #0
 8017018:	4606      	mov	r6, r0
 801701a:	db01      	blt.n	8017020 <_malloc_r+0x1c>
 801701c:	42a9      	cmp	r1, r5
 801701e:	d904      	bls.n	801702a <_malloc_r+0x26>
 8017020:	230c      	movs	r3, #12
 8017022:	6033      	str	r3, [r6, #0]
 8017024:	2000      	movs	r0, #0
 8017026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801702a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017100 <_malloc_r+0xfc>
 801702e:	f000 f869 	bl	8017104 <__malloc_lock>
 8017032:	f8d8 3000 	ldr.w	r3, [r8]
 8017036:	461c      	mov	r4, r3
 8017038:	bb44      	cbnz	r4, 801708c <_malloc_r+0x88>
 801703a:	4629      	mov	r1, r5
 801703c:	4630      	mov	r0, r6
 801703e:	f7ff ffbf 	bl	8016fc0 <sbrk_aligned>
 8017042:	1c43      	adds	r3, r0, #1
 8017044:	4604      	mov	r4, r0
 8017046:	d158      	bne.n	80170fa <_malloc_r+0xf6>
 8017048:	f8d8 4000 	ldr.w	r4, [r8]
 801704c:	4627      	mov	r7, r4
 801704e:	2f00      	cmp	r7, #0
 8017050:	d143      	bne.n	80170da <_malloc_r+0xd6>
 8017052:	2c00      	cmp	r4, #0
 8017054:	d04b      	beq.n	80170ee <_malloc_r+0xea>
 8017056:	6823      	ldr	r3, [r4, #0]
 8017058:	4639      	mov	r1, r7
 801705a:	4630      	mov	r0, r6
 801705c:	eb04 0903 	add.w	r9, r4, r3
 8017060:	f000 fb5a 	bl	8017718 <_sbrk_r>
 8017064:	4581      	cmp	r9, r0
 8017066:	d142      	bne.n	80170ee <_malloc_r+0xea>
 8017068:	6821      	ldr	r1, [r4, #0]
 801706a:	1a6d      	subs	r5, r5, r1
 801706c:	4629      	mov	r1, r5
 801706e:	4630      	mov	r0, r6
 8017070:	f7ff ffa6 	bl	8016fc0 <sbrk_aligned>
 8017074:	3001      	adds	r0, #1
 8017076:	d03a      	beq.n	80170ee <_malloc_r+0xea>
 8017078:	6823      	ldr	r3, [r4, #0]
 801707a:	442b      	add	r3, r5
 801707c:	6023      	str	r3, [r4, #0]
 801707e:	f8d8 3000 	ldr.w	r3, [r8]
 8017082:	685a      	ldr	r2, [r3, #4]
 8017084:	bb62      	cbnz	r2, 80170e0 <_malloc_r+0xdc>
 8017086:	f8c8 7000 	str.w	r7, [r8]
 801708a:	e00f      	b.n	80170ac <_malloc_r+0xa8>
 801708c:	6822      	ldr	r2, [r4, #0]
 801708e:	1b52      	subs	r2, r2, r5
 8017090:	d420      	bmi.n	80170d4 <_malloc_r+0xd0>
 8017092:	2a0b      	cmp	r2, #11
 8017094:	d917      	bls.n	80170c6 <_malloc_r+0xc2>
 8017096:	1961      	adds	r1, r4, r5
 8017098:	42a3      	cmp	r3, r4
 801709a:	6025      	str	r5, [r4, #0]
 801709c:	bf18      	it	ne
 801709e:	6059      	strne	r1, [r3, #4]
 80170a0:	6863      	ldr	r3, [r4, #4]
 80170a2:	bf08      	it	eq
 80170a4:	f8c8 1000 	streq.w	r1, [r8]
 80170a8:	5162      	str	r2, [r4, r5]
 80170aa:	604b      	str	r3, [r1, #4]
 80170ac:	4630      	mov	r0, r6
 80170ae:	f000 f82f 	bl	8017110 <__malloc_unlock>
 80170b2:	f104 000b 	add.w	r0, r4, #11
 80170b6:	1d23      	adds	r3, r4, #4
 80170b8:	f020 0007 	bic.w	r0, r0, #7
 80170bc:	1ac2      	subs	r2, r0, r3
 80170be:	bf1c      	itt	ne
 80170c0:	1a1b      	subne	r3, r3, r0
 80170c2:	50a3      	strne	r3, [r4, r2]
 80170c4:	e7af      	b.n	8017026 <_malloc_r+0x22>
 80170c6:	6862      	ldr	r2, [r4, #4]
 80170c8:	42a3      	cmp	r3, r4
 80170ca:	bf0c      	ite	eq
 80170cc:	f8c8 2000 	streq.w	r2, [r8]
 80170d0:	605a      	strne	r2, [r3, #4]
 80170d2:	e7eb      	b.n	80170ac <_malloc_r+0xa8>
 80170d4:	4623      	mov	r3, r4
 80170d6:	6864      	ldr	r4, [r4, #4]
 80170d8:	e7ae      	b.n	8017038 <_malloc_r+0x34>
 80170da:	463c      	mov	r4, r7
 80170dc:	687f      	ldr	r7, [r7, #4]
 80170de:	e7b6      	b.n	801704e <_malloc_r+0x4a>
 80170e0:	461a      	mov	r2, r3
 80170e2:	685b      	ldr	r3, [r3, #4]
 80170e4:	42a3      	cmp	r3, r4
 80170e6:	d1fb      	bne.n	80170e0 <_malloc_r+0xdc>
 80170e8:	2300      	movs	r3, #0
 80170ea:	6053      	str	r3, [r2, #4]
 80170ec:	e7de      	b.n	80170ac <_malloc_r+0xa8>
 80170ee:	230c      	movs	r3, #12
 80170f0:	6033      	str	r3, [r6, #0]
 80170f2:	4630      	mov	r0, r6
 80170f4:	f000 f80c 	bl	8017110 <__malloc_unlock>
 80170f8:	e794      	b.n	8017024 <_malloc_r+0x20>
 80170fa:	6005      	str	r5, [r0, #0]
 80170fc:	e7d6      	b.n	80170ac <_malloc_r+0xa8>
 80170fe:	bf00      	nop
 8017100:	2402852c 	.word	0x2402852c

08017104 <__malloc_lock>:
 8017104:	4801      	ldr	r0, [pc, #4]	@ (801710c <__malloc_lock+0x8>)
 8017106:	f7ff bf01 	b.w	8016f0c <__retarget_lock_acquire_recursive>
 801710a:	bf00      	nop
 801710c:	24028524 	.word	0x24028524

08017110 <__malloc_unlock>:
 8017110:	4801      	ldr	r0, [pc, #4]	@ (8017118 <__malloc_unlock+0x8>)
 8017112:	f7ff befc 	b.w	8016f0e <__retarget_lock_release_recursive>
 8017116:	bf00      	nop
 8017118:	24028524 	.word	0x24028524

0801711c <__ssputs_r>:
 801711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017120:	688e      	ldr	r6, [r1, #8]
 8017122:	461f      	mov	r7, r3
 8017124:	42be      	cmp	r6, r7
 8017126:	680b      	ldr	r3, [r1, #0]
 8017128:	4682      	mov	sl, r0
 801712a:	460c      	mov	r4, r1
 801712c:	4690      	mov	r8, r2
 801712e:	d82d      	bhi.n	801718c <__ssputs_r+0x70>
 8017130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017138:	d026      	beq.n	8017188 <__ssputs_r+0x6c>
 801713a:	6965      	ldr	r5, [r4, #20]
 801713c:	6909      	ldr	r1, [r1, #16]
 801713e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017142:	eba3 0901 	sub.w	r9, r3, r1
 8017146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801714a:	1c7b      	adds	r3, r7, #1
 801714c:	444b      	add	r3, r9
 801714e:	106d      	asrs	r5, r5, #1
 8017150:	429d      	cmp	r5, r3
 8017152:	bf38      	it	cc
 8017154:	461d      	movcc	r5, r3
 8017156:	0553      	lsls	r3, r2, #21
 8017158:	d527      	bpl.n	80171aa <__ssputs_r+0x8e>
 801715a:	4629      	mov	r1, r5
 801715c:	f7ff ff52 	bl	8017004 <_malloc_r>
 8017160:	4606      	mov	r6, r0
 8017162:	b360      	cbz	r0, 80171be <__ssputs_r+0xa2>
 8017164:	6921      	ldr	r1, [r4, #16]
 8017166:	464a      	mov	r2, r9
 8017168:	f7ff fed2 	bl	8016f10 <memcpy>
 801716c:	89a3      	ldrh	r3, [r4, #12]
 801716e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017176:	81a3      	strh	r3, [r4, #12]
 8017178:	6126      	str	r6, [r4, #16]
 801717a:	6165      	str	r5, [r4, #20]
 801717c:	444e      	add	r6, r9
 801717e:	eba5 0509 	sub.w	r5, r5, r9
 8017182:	6026      	str	r6, [r4, #0]
 8017184:	60a5      	str	r5, [r4, #8]
 8017186:	463e      	mov	r6, r7
 8017188:	42be      	cmp	r6, r7
 801718a:	d900      	bls.n	801718e <__ssputs_r+0x72>
 801718c:	463e      	mov	r6, r7
 801718e:	6820      	ldr	r0, [r4, #0]
 8017190:	4632      	mov	r2, r6
 8017192:	4641      	mov	r1, r8
 8017194:	f000 faa6 	bl	80176e4 <memmove>
 8017198:	68a3      	ldr	r3, [r4, #8]
 801719a:	1b9b      	subs	r3, r3, r6
 801719c:	60a3      	str	r3, [r4, #8]
 801719e:	6823      	ldr	r3, [r4, #0]
 80171a0:	4433      	add	r3, r6
 80171a2:	6023      	str	r3, [r4, #0]
 80171a4:	2000      	movs	r0, #0
 80171a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171aa:	462a      	mov	r2, r5
 80171ac:	f000 fac4 	bl	8017738 <_realloc_r>
 80171b0:	4606      	mov	r6, r0
 80171b2:	2800      	cmp	r0, #0
 80171b4:	d1e0      	bne.n	8017178 <__ssputs_r+0x5c>
 80171b6:	6921      	ldr	r1, [r4, #16]
 80171b8:	4650      	mov	r0, sl
 80171ba:	f7ff feb7 	bl	8016f2c <_free_r>
 80171be:	230c      	movs	r3, #12
 80171c0:	f8ca 3000 	str.w	r3, [sl]
 80171c4:	89a3      	ldrh	r3, [r4, #12]
 80171c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171ca:	81a3      	strh	r3, [r4, #12]
 80171cc:	f04f 30ff 	mov.w	r0, #4294967295
 80171d0:	e7e9      	b.n	80171a6 <__ssputs_r+0x8a>
	...

080171d4 <_svfiprintf_r>:
 80171d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d8:	4698      	mov	r8, r3
 80171da:	898b      	ldrh	r3, [r1, #12]
 80171dc:	061b      	lsls	r3, r3, #24
 80171de:	b09d      	sub	sp, #116	@ 0x74
 80171e0:	4607      	mov	r7, r0
 80171e2:	460d      	mov	r5, r1
 80171e4:	4614      	mov	r4, r2
 80171e6:	d510      	bpl.n	801720a <_svfiprintf_r+0x36>
 80171e8:	690b      	ldr	r3, [r1, #16]
 80171ea:	b973      	cbnz	r3, 801720a <_svfiprintf_r+0x36>
 80171ec:	2140      	movs	r1, #64	@ 0x40
 80171ee:	f7ff ff09 	bl	8017004 <_malloc_r>
 80171f2:	6028      	str	r0, [r5, #0]
 80171f4:	6128      	str	r0, [r5, #16]
 80171f6:	b930      	cbnz	r0, 8017206 <_svfiprintf_r+0x32>
 80171f8:	230c      	movs	r3, #12
 80171fa:	603b      	str	r3, [r7, #0]
 80171fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017200:	b01d      	add	sp, #116	@ 0x74
 8017202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017206:	2340      	movs	r3, #64	@ 0x40
 8017208:	616b      	str	r3, [r5, #20]
 801720a:	2300      	movs	r3, #0
 801720c:	9309      	str	r3, [sp, #36]	@ 0x24
 801720e:	2320      	movs	r3, #32
 8017210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017214:	f8cd 800c 	str.w	r8, [sp, #12]
 8017218:	2330      	movs	r3, #48	@ 0x30
 801721a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80173b8 <_svfiprintf_r+0x1e4>
 801721e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017222:	f04f 0901 	mov.w	r9, #1
 8017226:	4623      	mov	r3, r4
 8017228:	469a      	mov	sl, r3
 801722a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801722e:	b10a      	cbz	r2, 8017234 <_svfiprintf_r+0x60>
 8017230:	2a25      	cmp	r2, #37	@ 0x25
 8017232:	d1f9      	bne.n	8017228 <_svfiprintf_r+0x54>
 8017234:	ebba 0b04 	subs.w	fp, sl, r4
 8017238:	d00b      	beq.n	8017252 <_svfiprintf_r+0x7e>
 801723a:	465b      	mov	r3, fp
 801723c:	4622      	mov	r2, r4
 801723e:	4629      	mov	r1, r5
 8017240:	4638      	mov	r0, r7
 8017242:	f7ff ff6b 	bl	801711c <__ssputs_r>
 8017246:	3001      	adds	r0, #1
 8017248:	f000 80a7 	beq.w	801739a <_svfiprintf_r+0x1c6>
 801724c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801724e:	445a      	add	r2, fp
 8017250:	9209      	str	r2, [sp, #36]	@ 0x24
 8017252:	f89a 3000 	ldrb.w	r3, [sl]
 8017256:	2b00      	cmp	r3, #0
 8017258:	f000 809f 	beq.w	801739a <_svfiprintf_r+0x1c6>
 801725c:	2300      	movs	r3, #0
 801725e:	f04f 32ff 	mov.w	r2, #4294967295
 8017262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017266:	f10a 0a01 	add.w	sl, sl, #1
 801726a:	9304      	str	r3, [sp, #16]
 801726c:	9307      	str	r3, [sp, #28]
 801726e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017272:	931a      	str	r3, [sp, #104]	@ 0x68
 8017274:	4654      	mov	r4, sl
 8017276:	2205      	movs	r2, #5
 8017278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801727c:	484e      	ldr	r0, [pc, #312]	@ (80173b8 <_svfiprintf_r+0x1e4>)
 801727e:	f7e9 f837 	bl	80002f0 <memchr>
 8017282:	9a04      	ldr	r2, [sp, #16]
 8017284:	b9d8      	cbnz	r0, 80172be <_svfiprintf_r+0xea>
 8017286:	06d0      	lsls	r0, r2, #27
 8017288:	bf44      	itt	mi
 801728a:	2320      	movmi	r3, #32
 801728c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017290:	0711      	lsls	r1, r2, #28
 8017292:	bf44      	itt	mi
 8017294:	232b      	movmi	r3, #43	@ 0x2b
 8017296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801729a:	f89a 3000 	ldrb.w	r3, [sl]
 801729e:	2b2a      	cmp	r3, #42	@ 0x2a
 80172a0:	d015      	beq.n	80172ce <_svfiprintf_r+0xfa>
 80172a2:	9a07      	ldr	r2, [sp, #28]
 80172a4:	4654      	mov	r4, sl
 80172a6:	2000      	movs	r0, #0
 80172a8:	f04f 0c0a 	mov.w	ip, #10
 80172ac:	4621      	mov	r1, r4
 80172ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172b2:	3b30      	subs	r3, #48	@ 0x30
 80172b4:	2b09      	cmp	r3, #9
 80172b6:	d94b      	bls.n	8017350 <_svfiprintf_r+0x17c>
 80172b8:	b1b0      	cbz	r0, 80172e8 <_svfiprintf_r+0x114>
 80172ba:	9207      	str	r2, [sp, #28]
 80172bc:	e014      	b.n	80172e8 <_svfiprintf_r+0x114>
 80172be:	eba0 0308 	sub.w	r3, r0, r8
 80172c2:	fa09 f303 	lsl.w	r3, r9, r3
 80172c6:	4313      	orrs	r3, r2
 80172c8:	9304      	str	r3, [sp, #16]
 80172ca:	46a2      	mov	sl, r4
 80172cc:	e7d2      	b.n	8017274 <_svfiprintf_r+0xa0>
 80172ce:	9b03      	ldr	r3, [sp, #12]
 80172d0:	1d19      	adds	r1, r3, #4
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	9103      	str	r1, [sp, #12]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	bfbb      	ittet	lt
 80172da:	425b      	neglt	r3, r3
 80172dc:	f042 0202 	orrlt.w	r2, r2, #2
 80172e0:	9307      	strge	r3, [sp, #28]
 80172e2:	9307      	strlt	r3, [sp, #28]
 80172e4:	bfb8      	it	lt
 80172e6:	9204      	strlt	r2, [sp, #16]
 80172e8:	7823      	ldrb	r3, [r4, #0]
 80172ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80172ec:	d10a      	bne.n	8017304 <_svfiprintf_r+0x130>
 80172ee:	7863      	ldrb	r3, [r4, #1]
 80172f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80172f2:	d132      	bne.n	801735a <_svfiprintf_r+0x186>
 80172f4:	9b03      	ldr	r3, [sp, #12]
 80172f6:	1d1a      	adds	r2, r3, #4
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	9203      	str	r2, [sp, #12]
 80172fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017300:	3402      	adds	r4, #2
 8017302:	9305      	str	r3, [sp, #20]
 8017304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80173c8 <_svfiprintf_r+0x1f4>
 8017308:	7821      	ldrb	r1, [r4, #0]
 801730a:	2203      	movs	r2, #3
 801730c:	4650      	mov	r0, sl
 801730e:	f7e8 ffef 	bl	80002f0 <memchr>
 8017312:	b138      	cbz	r0, 8017324 <_svfiprintf_r+0x150>
 8017314:	9b04      	ldr	r3, [sp, #16]
 8017316:	eba0 000a 	sub.w	r0, r0, sl
 801731a:	2240      	movs	r2, #64	@ 0x40
 801731c:	4082      	lsls	r2, r0
 801731e:	4313      	orrs	r3, r2
 8017320:	3401      	adds	r4, #1
 8017322:	9304      	str	r3, [sp, #16]
 8017324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017328:	4824      	ldr	r0, [pc, #144]	@ (80173bc <_svfiprintf_r+0x1e8>)
 801732a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801732e:	2206      	movs	r2, #6
 8017330:	f7e8 ffde 	bl	80002f0 <memchr>
 8017334:	2800      	cmp	r0, #0
 8017336:	d036      	beq.n	80173a6 <_svfiprintf_r+0x1d2>
 8017338:	4b21      	ldr	r3, [pc, #132]	@ (80173c0 <_svfiprintf_r+0x1ec>)
 801733a:	bb1b      	cbnz	r3, 8017384 <_svfiprintf_r+0x1b0>
 801733c:	9b03      	ldr	r3, [sp, #12]
 801733e:	3307      	adds	r3, #7
 8017340:	f023 0307 	bic.w	r3, r3, #7
 8017344:	3308      	adds	r3, #8
 8017346:	9303      	str	r3, [sp, #12]
 8017348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801734a:	4433      	add	r3, r6
 801734c:	9309      	str	r3, [sp, #36]	@ 0x24
 801734e:	e76a      	b.n	8017226 <_svfiprintf_r+0x52>
 8017350:	fb0c 3202 	mla	r2, ip, r2, r3
 8017354:	460c      	mov	r4, r1
 8017356:	2001      	movs	r0, #1
 8017358:	e7a8      	b.n	80172ac <_svfiprintf_r+0xd8>
 801735a:	2300      	movs	r3, #0
 801735c:	3401      	adds	r4, #1
 801735e:	9305      	str	r3, [sp, #20]
 8017360:	4619      	mov	r1, r3
 8017362:	f04f 0c0a 	mov.w	ip, #10
 8017366:	4620      	mov	r0, r4
 8017368:	f810 2b01 	ldrb.w	r2, [r0], #1
 801736c:	3a30      	subs	r2, #48	@ 0x30
 801736e:	2a09      	cmp	r2, #9
 8017370:	d903      	bls.n	801737a <_svfiprintf_r+0x1a6>
 8017372:	2b00      	cmp	r3, #0
 8017374:	d0c6      	beq.n	8017304 <_svfiprintf_r+0x130>
 8017376:	9105      	str	r1, [sp, #20]
 8017378:	e7c4      	b.n	8017304 <_svfiprintf_r+0x130>
 801737a:	fb0c 2101 	mla	r1, ip, r1, r2
 801737e:	4604      	mov	r4, r0
 8017380:	2301      	movs	r3, #1
 8017382:	e7f0      	b.n	8017366 <_svfiprintf_r+0x192>
 8017384:	ab03      	add	r3, sp, #12
 8017386:	9300      	str	r3, [sp, #0]
 8017388:	462a      	mov	r2, r5
 801738a:	4b0e      	ldr	r3, [pc, #56]	@ (80173c4 <_svfiprintf_r+0x1f0>)
 801738c:	a904      	add	r1, sp, #16
 801738e:	4638      	mov	r0, r7
 8017390:	f3af 8000 	nop.w
 8017394:	1c42      	adds	r2, r0, #1
 8017396:	4606      	mov	r6, r0
 8017398:	d1d6      	bne.n	8017348 <_svfiprintf_r+0x174>
 801739a:	89ab      	ldrh	r3, [r5, #12]
 801739c:	065b      	lsls	r3, r3, #25
 801739e:	f53f af2d 	bmi.w	80171fc <_svfiprintf_r+0x28>
 80173a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173a4:	e72c      	b.n	8017200 <_svfiprintf_r+0x2c>
 80173a6:	ab03      	add	r3, sp, #12
 80173a8:	9300      	str	r3, [sp, #0]
 80173aa:	462a      	mov	r2, r5
 80173ac:	4b05      	ldr	r3, [pc, #20]	@ (80173c4 <_svfiprintf_r+0x1f0>)
 80173ae:	a904      	add	r1, sp, #16
 80173b0:	4638      	mov	r0, r7
 80173b2:	f000 f879 	bl	80174a8 <_printf_i>
 80173b6:	e7ed      	b.n	8017394 <_svfiprintf_r+0x1c0>
 80173b8:	08017de0 	.word	0x08017de0
 80173bc:	08017dea 	.word	0x08017dea
 80173c0:	00000000 	.word	0x00000000
 80173c4:	0801711d 	.word	0x0801711d
 80173c8:	08017de6 	.word	0x08017de6

080173cc <_printf_common>:
 80173cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173d0:	4616      	mov	r6, r2
 80173d2:	4698      	mov	r8, r3
 80173d4:	688a      	ldr	r2, [r1, #8]
 80173d6:	690b      	ldr	r3, [r1, #16]
 80173d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80173dc:	4293      	cmp	r3, r2
 80173de:	bfb8      	it	lt
 80173e0:	4613      	movlt	r3, r2
 80173e2:	6033      	str	r3, [r6, #0]
 80173e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80173e8:	4607      	mov	r7, r0
 80173ea:	460c      	mov	r4, r1
 80173ec:	b10a      	cbz	r2, 80173f2 <_printf_common+0x26>
 80173ee:	3301      	adds	r3, #1
 80173f0:	6033      	str	r3, [r6, #0]
 80173f2:	6823      	ldr	r3, [r4, #0]
 80173f4:	0699      	lsls	r1, r3, #26
 80173f6:	bf42      	ittt	mi
 80173f8:	6833      	ldrmi	r3, [r6, #0]
 80173fa:	3302      	addmi	r3, #2
 80173fc:	6033      	strmi	r3, [r6, #0]
 80173fe:	6825      	ldr	r5, [r4, #0]
 8017400:	f015 0506 	ands.w	r5, r5, #6
 8017404:	d106      	bne.n	8017414 <_printf_common+0x48>
 8017406:	f104 0a19 	add.w	sl, r4, #25
 801740a:	68e3      	ldr	r3, [r4, #12]
 801740c:	6832      	ldr	r2, [r6, #0]
 801740e:	1a9b      	subs	r3, r3, r2
 8017410:	42ab      	cmp	r3, r5
 8017412:	dc26      	bgt.n	8017462 <_printf_common+0x96>
 8017414:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017418:	6822      	ldr	r2, [r4, #0]
 801741a:	3b00      	subs	r3, #0
 801741c:	bf18      	it	ne
 801741e:	2301      	movne	r3, #1
 8017420:	0692      	lsls	r2, r2, #26
 8017422:	d42b      	bmi.n	801747c <_printf_common+0xb0>
 8017424:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017428:	4641      	mov	r1, r8
 801742a:	4638      	mov	r0, r7
 801742c:	47c8      	blx	r9
 801742e:	3001      	adds	r0, #1
 8017430:	d01e      	beq.n	8017470 <_printf_common+0xa4>
 8017432:	6823      	ldr	r3, [r4, #0]
 8017434:	6922      	ldr	r2, [r4, #16]
 8017436:	f003 0306 	and.w	r3, r3, #6
 801743a:	2b04      	cmp	r3, #4
 801743c:	bf02      	ittt	eq
 801743e:	68e5      	ldreq	r5, [r4, #12]
 8017440:	6833      	ldreq	r3, [r6, #0]
 8017442:	1aed      	subeq	r5, r5, r3
 8017444:	68a3      	ldr	r3, [r4, #8]
 8017446:	bf0c      	ite	eq
 8017448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801744c:	2500      	movne	r5, #0
 801744e:	4293      	cmp	r3, r2
 8017450:	bfc4      	itt	gt
 8017452:	1a9b      	subgt	r3, r3, r2
 8017454:	18ed      	addgt	r5, r5, r3
 8017456:	2600      	movs	r6, #0
 8017458:	341a      	adds	r4, #26
 801745a:	42b5      	cmp	r5, r6
 801745c:	d11a      	bne.n	8017494 <_printf_common+0xc8>
 801745e:	2000      	movs	r0, #0
 8017460:	e008      	b.n	8017474 <_printf_common+0xa8>
 8017462:	2301      	movs	r3, #1
 8017464:	4652      	mov	r2, sl
 8017466:	4641      	mov	r1, r8
 8017468:	4638      	mov	r0, r7
 801746a:	47c8      	blx	r9
 801746c:	3001      	adds	r0, #1
 801746e:	d103      	bne.n	8017478 <_printf_common+0xac>
 8017470:	f04f 30ff 	mov.w	r0, #4294967295
 8017474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017478:	3501      	adds	r5, #1
 801747a:	e7c6      	b.n	801740a <_printf_common+0x3e>
 801747c:	18e1      	adds	r1, r4, r3
 801747e:	1c5a      	adds	r2, r3, #1
 8017480:	2030      	movs	r0, #48	@ 0x30
 8017482:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017486:	4422      	add	r2, r4
 8017488:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801748c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017490:	3302      	adds	r3, #2
 8017492:	e7c7      	b.n	8017424 <_printf_common+0x58>
 8017494:	2301      	movs	r3, #1
 8017496:	4622      	mov	r2, r4
 8017498:	4641      	mov	r1, r8
 801749a:	4638      	mov	r0, r7
 801749c:	47c8      	blx	r9
 801749e:	3001      	adds	r0, #1
 80174a0:	d0e6      	beq.n	8017470 <_printf_common+0xa4>
 80174a2:	3601      	adds	r6, #1
 80174a4:	e7d9      	b.n	801745a <_printf_common+0x8e>
	...

080174a8 <_printf_i>:
 80174a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80174ac:	7e0f      	ldrb	r7, [r1, #24]
 80174ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80174b0:	2f78      	cmp	r7, #120	@ 0x78
 80174b2:	4691      	mov	r9, r2
 80174b4:	4680      	mov	r8, r0
 80174b6:	460c      	mov	r4, r1
 80174b8:	469a      	mov	sl, r3
 80174ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80174be:	d807      	bhi.n	80174d0 <_printf_i+0x28>
 80174c0:	2f62      	cmp	r7, #98	@ 0x62
 80174c2:	d80a      	bhi.n	80174da <_printf_i+0x32>
 80174c4:	2f00      	cmp	r7, #0
 80174c6:	f000 80d1 	beq.w	801766c <_printf_i+0x1c4>
 80174ca:	2f58      	cmp	r7, #88	@ 0x58
 80174cc:	f000 80b8 	beq.w	8017640 <_printf_i+0x198>
 80174d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80174d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80174d8:	e03a      	b.n	8017550 <_printf_i+0xa8>
 80174da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80174de:	2b15      	cmp	r3, #21
 80174e0:	d8f6      	bhi.n	80174d0 <_printf_i+0x28>
 80174e2:	a101      	add	r1, pc, #4	@ (adr r1, 80174e8 <_printf_i+0x40>)
 80174e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80174e8:	08017541 	.word	0x08017541
 80174ec:	08017555 	.word	0x08017555
 80174f0:	080174d1 	.word	0x080174d1
 80174f4:	080174d1 	.word	0x080174d1
 80174f8:	080174d1 	.word	0x080174d1
 80174fc:	080174d1 	.word	0x080174d1
 8017500:	08017555 	.word	0x08017555
 8017504:	080174d1 	.word	0x080174d1
 8017508:	080174d1 	.word	0x080174d1
 801750c:	080174d1 	.word	0x080174d1
 8017510:	080174d1 	.word	0x080174d1
 8017514:	08017653 	.word	0x08017653
 8017518:	0801757f 	.word	0x0801757f
 801751c:	0801760d 	.word	0x0801760d
 8017520:	080174d1 	.word	0x080174d1
 8017524:	080174d1 	.word	0x080174d1
 8017528:	08017675 	.word	0x08017675
 801752c:	080174d1 	.word	0x080174d1
 8017530:	0801757f 	.word	0x0801757f
 8017534:	080174d1 	.word	0x080174d1
 8017538:	080174d1 	.word	0x080174d1
 801753c:	08017615 	.word	0x08017615
 8017540:	6833      	ldr	r3, [r6, #0]
 8017542:	1d1a      	adds	r2, r3, #4
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	6032      	str	r2, [r6, #0]
 8017548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801754c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017550:	2301      	movs	r3, #1
 8017552:	e09c      	b.n	801768e <_printf_i+0x1e6>
 8017554:	6833      	ldr	r3, [r6, #0]
 8017556:	6820      	ldr	r0, [r4, #0]
 8017558:	1d19      	adds	r1, r3, #4
 801755a:	6031      	str	r1, [r6, #0]
 801755c:	0606      	lsls	r6, r0, #24
 801755e:	d501      	bpl.n	8017564 <_printf_i+0xbc>
 8017560:	681d      	ldr	r5, [r3, #0]
 8017562:	e003      	b.n	801756c <_printf_i+0xc4>
 8017564:	0645      	lsls	r5, r0, #25
 8017566:	d5fb      	bpl.n	8017560 <_printf_i+0xb8>
 8017568:	f9b3 5000 	ldrsh.w	r5, [r3]
 801756c:	2d00      	cmp	r5, #0
 801756e:	da03      	bge.n	8017578 <_printf_i+0xd0>
 8017570:	232d      	movs	r3, #45	@ 0x2d
 8017572:	426d      	negs	r5, r5
 8017574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017578:	4858      	ldr	r0, [pc, #352]	@ (80176dc <_printf_i+0x234>)
 801757a:	230a      	movs	r3, #10
 801757c:	e011      	b.n	80175a2 <_printf_i+0xfa>
 801757e:	6821      	ldr	r1, [r4, #0]
 8017580:	6833      	ldr	r3, [r6, #0]
 8017582:	0608      	lsls	r0, r1, #24
 8017584:	f853 5b04 	ldr.w	r5, [r3], #4
 8017588:	d402      	bmi.n	8017590 <_printf_i+0xe8>
 801758a:	0649      	lsls	r1, r1, #25
 801758c:	bf48      	it	mi
 801758e:	b2ad      	uxthmi	r5, r5
 8017590:	2f6f      	cmp	r7, #111	@ 0x6f
 8017592:	4852      	ldr	r0, [pc, #328]	@ (80176dc <_printf_i+0x234>)
 8017594:	6033      	str	r3, [r6, #0]
 8017596:	bf14      	ite	ne
 8017598:	230a      	movne	r3, #10
 801759a:	2308      	moveq	r3, #8
 801759c:	2100      	movs	r1, #0
 801759e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80175a2:	6866      	ldr	r6, [r4, #4]
 80175a4:	60a6      	str	r6, [r4, #8]
 80175a6:	2e00      	cmp	r6, #0
 80175a8:	db05      	blt.n	80175b6 <_printf_i+0x10e>
 80175aa:	6821      	ldr	r1, [r4, #0]
 80175ac:	432e      	orrs	r6, r5
 80175ae:	f021 0104 	bic.w	r1, r1, #4
 80175b2:	6021      	str	r1, [r4, #0]
 80175b4:	d04b      	beq.n	801764e <_printf_i+0x1a6>
 80175b6:	4616      	mov	r6, r2
 80175b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80175bc:	fb03 5711 	mls	r7, r3, r1, r5
 80175c0:	5dc7      	ldrb	r7, [r0, r7]
 80175c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80175c6:	462f      	mov	r7, r5
 80175c8:	42bb      	cmp	r3, r7
 80175ca:	460d      	mov	r5, r1
 80175cc:	d9f4      	bls.n	80175b8 <_printf_i+0x110>
 80175ce:	2b08      	cmp	r3, #8
 80175d0:	d10b      	bne.n	80175ea <_printf_i+0x142>
 80175d2:	6823      	ldr	r3, [r4, #0]
 80175d4:	07df      	lsls	r7, r3, #31
 80175d6:	d508      	bpl.n	80175ea <_printf_i+0x142>
 80175d8:	6923      	ldr	r3, [r4, #16]
 80175da:	6861      	ldr	r1, [r4, #4]
 80175dc:	4299      	cmp	r1, r3
 80175de:	bfde      	ittt	le
 80175e0:	2330      	movle	r3, #48	@ 0x30
 80175e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80175e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80175ea:	1b92      	subs	r2, r2, r6
 80175ec:	6122      	str	r2, [r4, #16]
 80175ee:	f8cd a000 	str.w	sl, [sp]
 80175f2:	464b      	mov	r3, r9
 80175f4:	aa03      	add	r2, sp, #12
 80175f6:	4621      	mov	r1, r4
 80175f8:	4640      	mov	r0, r8
 80175fa:	f7ff fee7 	bl	80173cc <_printf_common>
 80175fe:	3001      	adds	r0, #1
 8017600:	d14a      	bne.n	8017698 <_printf_i+0x1f0>
 8017602:	f04f 30ff 	mov.w	r0, #4294967295
 8017606:	b004      	add	sp, #16
 8017608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801760c:	6823      	ldr	r3, [r4, #0]
 801760e:	f043 0320 	orr.w	r3, r3, #32
 8017612:	6023      	str	r3, [r4, #0]
 8017614:	4832      	ldr	r0, [pc, #200]	@ (80176e0 <_printf_i+0x238>)
 8017616:	2778      	movs	r7, #120	@ 0x78
 8017618:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801761c:	6823      	ldr	r3, [r4, #0]
 801761e:	6831      	ldr	r1, [r6, #0]
 8017620:	061f      	lsls	r7, r3, #24
 8017622:	f851 5b04 	ldr.w	r5, [r1], #4
 8017626:	d402      	bmi.n	801762e <_printf_i+0x186>
 8017628:	065f      	lsls	r7, r3, #25
 801762a:	bf48      	it	mi
 801762c:	b2ad      	uxthmi	r5, r5
 801762e:	6031      	str	r1, [r6, #0]
 8017630:	07d9      	lsls	r1, r3, #31
 8017632:	bf44      	itt	mi
 8017634:	f043 0320 	orrmi.w	r3, r3, #32
 8017638:	6023      	strmi	r3, [r4, #0]
 801763a:	b11d      	cbz	r5, 8017644 <_printf_i+0x19c>
 801763c:	2310      	movs	r3, #16
 801763e:	e7ad      	b.n	801759c <_printf_i+0xf4>
 8017640:	4826      	ldr	r0, [pc, #152]	@ (80176dc <_printf_i+0x234>)
 8017642:	e7e9      	b.n	8017618 <_printf_i+0x170>
 8017644:	6823      	ldr	r3, [r4, #0]
 8017646:	f023 0320 	bic.w	r3, r3, #32
 801764a:	6023      	str	r3, [r4, #0]
 801764c:	e7f6      	b.n	801763c <_printf_i+0x194>
 801764e:	4616      	mov	r6, r2
 8017650:	e7bd      	b.n	80175ce <_printf_i+0x126>
 8017652:	6833      	ldr	r3, [r6, #0]
 8017654:	6825      	ldr	r5, [r4, #0]
 8017656:	6961      	ldr	r1, [r4, #20]
 8017658:	1d18      	adds	r0, r3, #4
 801765a:	6030      	str	r0, [r6, #0]
 801765c:	062e      	lsls	r6, r5, #24
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	d501      	bpl.n	8017666 <_printf_i+0x1be>
 8017662:	6019      	str	r1, [r3, #0]
 8017664:	e002      	b.n	801766c <_printf_i+0x1c4>
 8017666:	0668      	lsls	r0, r5, #25
 8017668:	d5fb      	bpl.n	8017662 <_printf_i+0x1ba>
 801766a:	8019      	strh	r1, [r3, #0]
 801766c:	2300      	movs	r3, #0
 801766e:	6123      	str	r3, [r4, #16]
 8017670:	4616      	mov	r6, r2
 8017672:	e7bc      	b.n	80175ee <_printf_i+0x146>
 8017674:	6833      	ldr	r3, [r6, #0]
 8017676:	1d1a      	adds	r2, r3, #4
 8017678:	6032      	str	r2, [r6, #0]
 801767a:	681e      	ldr	r6, [r3, #0]
 801767c:	6862      	ldr	r2, [r4, #4]
 801767e:	2100      	movs	r1, #0
 8017680:	4630      	mov	r0, r6
 8017682:	f7e8 fe35 	bl	80002f0 <memchr>
 8017686:	b108      	cbz	r0, 801768c <_printf_i+0x1e4>
 8017688:	1b80      	subs	r0, r0, r6
 801768a:	6060      	str	r0, [r4, #4]
 801768c:	6863      	ldr	r3, [r4, #4]
 801768e:	6123      	str	r3, [r4, #16]
 8017690:	2300      	movs	r3, #0
 8017692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017696:	e7aa      	b.n	80175ee <_printf_i+0x146>
 8017698:	6923      	ldr	r3, [r4, #16]
 801769a:	4632      	mov	r2, r6
 801769c:	4649      	mov	r1, r9
 801769e:	4640      	mov	r0, r8
 80176a0:	47d0      	blx	sl
 80176a2:	3001      	adds	r0, #1
 80176a4:	d0ad      	beq.n	8017602 <_printf_i+0x15a>
 80176a6:	6823      	ldr	r3, [r4, #0]
 80176a8:	079b      	lsls	r3, r3, #30
 80176aa:	d413      	bmi.n	80176d4 <_printf_i+0x22c>
 80176ac:	68e0      	ldr	r0, [r4, #12]
 80176ae:	9b03      	ldr	r3, [sp, #12]
 80176b0:	4298      	cmp	r0, r3
 80176b2:	bfb8      	it	lt
 80176b4:	4618      	movlt	r0, r3
 80176b6:	e7a6      	b.n	8017606 <_printf_i+0x15e>
 80176b8:	2301      	movs	r3, #1
 80176ba:	4632      	mov	r2, r6
 80176bc:	4649      	mov	r1, r9
 80176be:	4640      	mov	r0, r8
 80176c0:	47d0      	blx	sl
 80176c2:	3001      	adds	r0, #1
 80176c4:	d09d      	beq.n	8017602 <_printf_i+0x15a>
 80176c6:	3501      	adds	r5, #1
 80176c8:	68e3      	ldr	r3, [r4, #12]
 80176ca:	9903      	ldr	r1, [sp, #12]
 80176cc:	1a5b      	subs	r3, r3, r1
 80176ce:	42ab      	cmp	r3, r5
 80176d0:	dcf2      	bgt.n	80176b8 <_printf_i+0x210>
 80176d2:	e7eb      	b.n	80176ac <_printf_i+0x204>
 80176d4:	2500      	movs	r5, #0
 80176d6:	f104 0619 	add.w	r6, r4, #25
 80176da:	e7f5      	b.n	80176c8 <_printf_i+0x220>
 80176dc:	08017df1 	.word	0x08017df1
 80176e0:	08017e02 	.word	0x08017e02

080176e4 <memmove>:
 80176e4:	4288      	cmp	r0, r1
 80176e6:	b510      	push	{r4, lr}
 80176e8:	eb01 0402 	add.w	r4, r1, r2
 80176ec:	d902      	bls.n	80176f4 <memmove+0x10>
 80176ee:	4284      	cmp	r4, r0
 80176f0:	4623      	mov	r3, r4
 80176f2:	d807      	bhi.n	8017704 <memmove+0x20>
 80176f4:	1e43      	subs	r3, r0, #1
 80176f6:	42a1      	cmp	r1, r4
 80176f8:	d008      	beq.n	801770c <memmove+0x28>
 80176fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017702:	e7f8      	b.n	80176f6 <memmove+0x12>
 8017704:	4402      	add	r2, r0
 8017706:	4601      	mov	r1, r0
 8017708:	428a      	cmp	r2, r1
 801770a:	d100      	bne.n	801770e <memmove+0x2a>
 801770c:	bd10      	pop	{r4, pc}
 801770e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017716:	e7f7      	b.n	8017708 <memmove+0x24>

08017718 <_sbrk_r>:
 8017718:	b538      	push	{r3, r4, r5, lr}
 801771a:	4d06      	ldr	r5, [pc, #24]	@ (8017734 <_sbrk_r+0x1c>)
 801771c:	2300      	movs	r3, #0
 801771e:	4604      	mov	r4, r0
 8017720:	4608      	mov	r0, r1
 8017722:	602b      	str	r3, [r5, #0]
 8017724:	f7ea fa80 	bl	8001c28 <_sbrk>
 8017728:	1c43      	adds	r3, r0, #1
 801772a:	d102      	bne.n	8017732 <_sbrk_r+0x1a>
 801772c:	682b      	ldr	r3, [r5, #0]
 801772e:	b103      	cbz	r3, 8017732 <_sbrk_r+0x1a>
 8017730:	6023      	str	r3, [r4, #0]
 8017732:	bd38      	pop	{r3, r4, r5, pc}
 8017734:	24028520 	.word	0x24028520

08017738 <_realloc_r>:
 8017738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801773c:	4607      	mov	r7, r0
 801773e:	4614      	mov	r4, r2
 8017740:	460d      	mov	r5, r1
 8017742:	b921      	cbnz	r1, 801774e <_realloc_r+0x16>
 8017744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017748:	4611      	mov	r1, r2
 801774a:	f7ff bc5b 	b.w	8017004 <_malloc_r>
 801774e:	b92a      	cbnz	r2, 801775c <_realloc_r+0x24>
 8017750:	f7ff fbec 	bl	8016f2c <_free_r>
 8017754:	4625      	mov	r5, r4
 8017756:	4628      	mov	r0, r5
 8017758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801775c:	f000 f81a 	bl	8017794 <_malloc_usable_size_r>
 8017760:	4284      	cmp	r4, r0
 8017762:	4606      	mov	r6, r0
 8017764:	d802      	bhi.n	801776c <_realloc_r+0x34>
 8017766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801776a:	d8f4      	bhi.n	8017756 <_realloc_r+0x1e>
 801776c:	4621      	mov	r1, r4
 801776e:	4638      	mov	r0, r7
 8017770:	f7ff fc48 	bl	8017004 <_malloc_r>
 8017774:	4680      	mov	r8, r0
 8017776:	b908      	cbnz	r0, 801777c <_realloc_r+0x44>
 8017778:	4645      	mov	r5, r8
 801777a:	e7ec      	b.n	8017756 <_realloc_r+0x1e>
 801777c:	42b4      	cmp	r4, r6
 801777e:	4622      	mov	r2, r4
 8017780:	4629      	mov	r1, r5
 8017782:	bf28      	it	cs
 8017784:	4632      	movcs	r2, r6
 8017786:	f7ff fbc3 	bl	8016f10 <memcpy>
 801778a:	4629      	mov	r1, r5
 801778c:	4638      	mov	r0, r7
 801778e:	f7ff fbcd 	bl	8016f2c <_free_r>
 8017792:	e7f1      	b.n	8017778 <_realloc_r+0x40>

08017794 <_malloc_usable_size_r>:
 8017794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017798:	1f18      	subs	r0, r3, #4
 801779a:	2b00      	cmp	r3, #0
 801779c:	bfbc      	itt	lt
 801779e:	580b      	ldrlt	r3, [r1, r0]
 80177a0:	18c0      	addlt	r0, r0, r3
 80177a2:	4770      	bx	lr

080177a4 <_init>:
 80177a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177a6:	bf00      	nop
 80177a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177aa:	bc08      	pop	{r3}
 80177ac:	469e      	mov	lr, r3
 80177ae:	4770      	bx	lr

080177b0 <_fini>:
 80177b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177b2:	bf00      	nop
 80177b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177b6:	bc08      	pop	{r3}
 80177b8:	469e      	mov	lr, r3
 80177ba:	4770      	bx	lr
