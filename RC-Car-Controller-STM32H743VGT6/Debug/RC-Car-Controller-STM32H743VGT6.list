
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aef0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  0801b190  0801b190  0001c190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b990  0801b990  0001c990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b998  0801b998  0001c998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801b99c  0801b99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000394  24000000  0801b9a0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00048a8c  24000394  0801bd34  0001d394  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24048e20  0801bd34  0001de20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d394  2**0
                  CONTENTS, READONLY
 10 .debug_info   000342a3  00000000  00000000  0001d3c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005e1b  00000000  00000000  00051665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000025e0  00000000  00000000  00057480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d8c  00000000  00000000  00059a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f967  00000000  00000000  0005b7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003625c  00000000  00000000  0009b153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185103  00000000  00000000  000d13af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002564b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a8e4  00000000  00000000  002564f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00260ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000394 	.word	0x24000394
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b178 	.word	0x0801b178

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000398 	.word	0x24000398
 80002dc:	0801b178 	.word	0x0801b178

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fcb5 	bl	800205c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 ff97 	bl	8003624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f92d 	bl	8000954 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 f9a5 	bl	8000a48 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fc5d 	bl	8000fbc <MX_GPIO_Init>
  MX_MDMA_Init();
 8000702:	f000 fc3b 	bl	8000f7c <MX_MDMA_Init>
  MX_DMA_Init();
 8000706:	f000 fbe9 	bl	8000edc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800070a:	f000 fb95 	bl	8000e38 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070e:	f019 fb29 	bl	8019d64 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 8000712:	f000 fad7 	bl	8000cc4 <MX_JPEG_Init>
  MX_I2C1_Init();
 8000716:	f000 fa55 	bl	8000bc4 <MX_I2C1_Init>
  MX_SPI4_Init();
 800071a:	f000 fae7 	bl	8000cec <MX_SPI4_Init>
  MX_ADC1_Init();
 800071e:	f000 f9c5 	bl	8000aac <MX_ADC1_Init>
  MX_I2C2_Init();
 8000722:	f000 fa8f 	bl	8000c44 <MX_I2C2_Init>
  MX_TIM5_Init();
 8000726:	f000 fb37 	bl	8000d98 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 800072a:	2214      	movs	r2, #20
 800072c:	496d      	ldr	r1, [pc, #436]	@ (80008e4 <main+0x1fc>)
 800072e:	486e      	ldr	r0, [pc, #440]	@ (80008e8 <main+0x200>)
 8000730:	f003 fbf6 	bl	8003f20 <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	uint8_t init_result = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	71fb      	strb	r3, [r7, #7]

	hssd1.i2c_handle = &hi2c2;
 8000738:	4b6c      	ldr	r3, [pc, #432]	@ (80008ec <main+0x204>)
 800073a:	4a6d      	ldr	r2, [pc, #436]	@ (80008f0 <main+0x208>)
 800073c:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800073e:	4b6b      	ldr	r3, [pc, #428]	@ (80008ec <main+0x204>)
 8000740:	223c      	movs	r2, #60	@ 0x3c
 8000742:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000744:	4b69      	ldr	r3, [pc, #420]	@ (80008ec <main+0x204>)
 8000746:	4a6b      	ldr	r2, [pc, #428]	@ (80008f4 <main+0x20c>)
 8000748:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd1);
 800074a:	4868      	ldr	r0, [pc, #416]	@ (80008ec <main+0x204>)
 800074c:	f002 fae0 	bl	8002d10 <SSD1306_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d00f      	beq.n	800077a <main+0x92>
		sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	461a      	mov	r2, r3
 800075e:	4966      	ldr	r1, [pc, #408]	@ (80008f8 <main+0x210>)
 8000760:	4866      	ldr	r0, [pc, #408]	@ (80008fc <main+0x214>)
 8000762:	f01a f90f 	bl	801a984 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000766:	4865      	ldr	r0, [pc, #404]	@ (80008fc <main+0x214>)
 8000768:	f7ff fdba 	bl	80002e0 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	4619      	mov	r1, r3
 8000770:	4862      	ldr	r0, [pc, #392]	@ (80008fc <main+0x214>)
 8000772:	f019 fbd1 	bl	8019f18 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000776:	f7ff ffa1 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	hssd2.i2c_handle = &hi2c1;
 800077a:	4b61      	ldr	r3, [pc, #388]	@ (8000900 <main+0x218>)
 800077c:	4a61      	ldr	r2, [pc, #388]	@ (8000904 <main+0x21c>)
 800077e:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 8000780:	4b5f      	ldr	r3, [pc, #380]	@ (8000900 <main+0x218>)
 8000782:	223c      	movs	r2, #60	@ 0x3c
 8000784:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 8000786:	4b5e      	ldr	r3, [pc, #376]	@ (8000900 <main+0x218>)
 8000788:	4a5f      	ldr	r2, [pc, #380]	@ (8000908 <main+0x220>)
 800078a:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd2);
 800078c:	485c      	ldr	r0, [pc, #368]	@ (8000900 <main+0x218>)
 800078e:	f002 fabf 	bl	8002d10 <SSD1306_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00f      	beq.n	80007bc <main+0xd4>
		sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	461a      	mov	r2, r3
 80007a0:	495a      	ldr	r1, [pc, #360]	@ (800090c <main+0x224>)
 80007a2:	4856      	ldr	r0, [pc, #344]	@ (80008fc <main+0x214>)
 80007a4:	f01a f8ee 	bl	801a984 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007a8:	4854      	ldr	r0, [pc, #336]	@ (80008fc <main+0x214>)
 80007aa:	f7ff fd99 	bl	80002e0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4619      	mov	r1, r3
 80007b2:	4852      	ldr	r0, [pc, #328]	@ (80008fc <main+0x214>)
 80007b4:	f019 fbb0 	bl	8019f18 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80007b8:	f7ff ff80 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 80007bc:	4b54      	ldr	r3, [pc, #336]	@ (8000910 <main+0x228>)
 80007be:	4a55      	ldr	r2, [pc, #340]	@ (8000914 <main+0x22c>)
 80007c0:	601a      	str	r2, [r3, #0]
	hst7789.spi_state = 0;
 80007c2:	4b53      	ldr	r3, [pc, #332]	@ (8000910 <main+0x228>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007c8:	4b51      	ldr	r3, [pc, #324]	@ (8000910 <main+0x228>)
 80007ca:	4a53      	ldr	r2, [pc, #332]	@ (8000918 <main+0x230>)
 80007cc:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007ce:	4b50      	ldr	r3, [pc, #320]	@ (8000910 <main+0x228>)
 80007d0:	2220      	movs	r2, #32
 80007d2:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 80007d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000910 <main+0x228>)
 80007d6:	4a51      	ldr	r2, [pc, #324]	@ (800091c <main+0x234>)
 80007d8:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 80007da:	484d      	ldr	r0, [pc, #308]	@ (8000910 <main+0x228>)
 80007dc:	f002 fbfc 	bl	8002fd8 <ST7789_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00f      	beq.n	800080a <main+0x122>
		sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	461a      	mov	r2, r3
 80007ee:	494c      	ldr	r1, [pc, #304]	@ (8000920 <main+0x238>)
 80007f0:	4842      	ldr	r0, [pc, #264]	@ (80008fc <main+0x214>)
 80007f2:	f01a f8c7 	bl	801a984 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007f6:	4841      	ldr	r0, [pc, #260]	@ (80008fc <main+0x214>)
 80007f8:	f7ff fd72 	bl	80002e0 <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4619      	mov	r1, r3
 8000800:	483e      	ldr	r0, [pc, #248]	@ (80008fc <main+0x214>)
 8000802:	f019 fb89 	bl	8019f18 <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000806:	f7ff ff59 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}


	ST7789_Clear(&hst7789);		 // Clear the screen
 800080a:	4841      	ldr	r0, [pc, #260]	@ (8000910 <main+0x228>)
 800080c:	f002 fd02 	bl	8003214 <ST7789_Clear>
	ST7789_Draw_NOSIG(&hst7789); // Draw the NOSIG symbol
 8000810:	483f      	ldr	r0, [pc, #252]	@ (8000910 <main+0x228>)
 8000812:	f002 fd11 	bl	8003238 <ST7789_Draw_NOSIG>
	st7789_state = 1;			 // Flag LCD as requested
 8000816:	4b43      	ldr	r3, [pc, #268]	@ (8000924 <main+0x23c>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]

	// ------------------------------------------------------------ SETUP MENU -- //
	hmenu.ssdL_handle = &hssd1;
 800081c:	4b42      	ldr	r3, [pc, #264]	@ (8000928 <main+0x240>)
 800081e:	4a33      	ldr	r2, [pc, #204]	@ (80008ec <main+0x204>)
 8000820:	601a      	str	r2, [r3, #0]
	hmenu.ssdR_handle = &hssd2;
 8000822:	4b41      	ldr	r3, [pc, #260]	@ (8000928 <main+0x240>)
 8000824:	4a36      	ldr	r2, [pc, #216]	@ (8000900 <main+0x218>)
 8000826:	605a      	str	r2, [r3, #4]
	hmenu.page_anim = 0;
 8000828:	4b3f      	ldr	r3, [pc, #252]	@ (8000928 <main+0x240>)
 800082a:	2200      	movs	r2, #0
 800082c:	755a      	strb	r2, [r3, #21]
	MENU_Init(&hmenu);
 800082e:	483e      	ldr	r0, [pc, #248]	@ (8000928 <main+0x240>)
 8000830:	f016 fe02 	bl	8017438 <MENU_Init>

	// ------------------------------------------------------------ SETUP JPEG DECODE -- //
	// override the header
	// DO NOT MODIFY THE JPEG_RAW BUF BELOW BYTE 526
	memcpy(jpeg_raw1, jpeg_header, JPEG_HEADERSIZE);
 8000834:	4a3d      	ldr	r2, [pc, #244]	@ (800092c <main+0x244>)
 8000836:	4b3e      	ldr	r3, [pc, #248]	@ (8000930 <main+0x248>)
 8000838:	4610      	mov	r0, r2
 800083a:	4619      	mov	r1, r3
 800083c:	f240 230e 	movw	r3, #526	@ 0x20e
 8000840:	461a      	mov	r2, r3
 8000842:	f01a f90d 	bl	801aa60 <memcpy>
	memcpy(jpeg_raw2, jpeg_header, JPEG_HEADERSIZE);
 8000846:	4a3b      	ldr	r2, [pc, #236]	@ (8000934 <main+0x24c>)
 8000848:	4b39      	ldr	r3, [pc, #228]	@ (8000930 <main+0x248>)
 800084a:	4610      	mov	r0, r2
 800084c:	4619      	mov	r1, r3
 800084e:	f240 230e 	movw	r3, #526	@ 0x20e
 8000852:	461a      	mov	r2, r3
 8000854:	f01a f904 	bl	801aa60 <memcpy>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 8000858:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <main+0x250>)
 800085a:	4a38      	ldr	r2, [pc, #224]	@ (800093c <main+0x254>)
 800085c:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 5;
 800085e:	4b36      	ldr	r3, [pc, #216]	@ (8000938 <main+0x250>)
 8000860:	2205      	movs	r2, #5
 8000862:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 5;
 8000864:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <main+0x250>)
 8000866:	2205      	movs	r2, #5
 8000868:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 800086c:	4832      	ldr	r0, [pc, #200]	@ (8000938 <main+0x250>)
 800086e:	f016 fba4 	bl	8016fba <XBEE_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d00e      	beq.n	8000896 <main+0x1ae>
		sprintf(ssd_msg, " Failed to Init XBEE");
 8000878:	4931      	ldr	r1, [pc, #196]	@ (8000940 <main+0x258>)
 800087a:	4832      	ldr	r0, [pc, #200]	@ (8000944 <main+0x25c>)
 800087c:	f01a f882 	bl	801a984 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000880:	4830      	ldr	r0, [pc, #192]	@ (8000944 <main+0x25c>)
 8000882:	f7ff fd2d 	bl	80002e0 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	482d      	ldr	r0, [pc, #180]	@ (8000944 <main+0x25c>)
 800088e:	f001 fbbf 	bl	8002010 <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000892:	f7ff ff13 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK)
 8000896:	482c      	ldr	r0, [pc, #176]	@ (8000948 <main+0x260>)
 8000898:	f012 fbb6 	bl	8013008 <HAL_TIM_Base_Start_IT>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00e      	beq.n	80008c0 <main+0x1d8>
	{
		sprintf(ssd_msg, " Failed to Start Watchdog");
 80008a2:	492a      	ldr	r1, [pc, #168]	@ (800094c <main+0x264>)
 80008a4:	4827      	ldr	r0, [pc, #156]	@ (8000944 <main+0x25c>)
 80008a6:	f01a f86d 	bl	801a984 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80008aa:	4826      	ldr	r0, [pc, #152]	@ (8000944 <main+0x25c>)
 80008ac:	f7ff fd18 	bl	80002e0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4619      	mov	r1, r3
 80008b6:	4823      	ldr	r0, [pc, #140]	@ (8000944 <main+0x25c>)
 80008b8:	f001 fbaa 	bl	8002010 <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80008bc:	f7ff fefe 	bl	80006bc <__NVIC_SystemReset>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();		// Process any incoming packets
 80008c0:	f000 fd3a 	bl	8001338 <SCH_XBeeRX>
		SCH_GetInputs();	// Get user inputs
 80008c4:	f000 ff92 	bl	80017ec <SCH_GetInputs>
		SCH_OLEDUpdate();	// Update the OLEDs
 80008c8:	f000 ff46 	bl	8001758 <SCH_OLEDUpdate>
		SCH_LCDUpdate();	// Update the LCD
 80008cc:	f000 ff78 	bl	80017c0 <SCH_LCDUpdate>

		// Network timeout condition:
		// Don't SEND anything
		// Don't bother processing images
		// Don't update the screen
		if (wdog_network < WDOG_NETWORK_CUTOFF) {
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <main+0x268>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d8f3      	bhi.n	80008c0 <main+0x1d8>

			SCH_XBeeTX();		// Send any neccesarry outgoing packets
 80008d8:	f000 fda2 	bl	8001420 <SCH_XBeeTX>
			SCH_ImageDecode();	// Decode pending MCU blocks
 80008dc:	f000 fde8 	bl	80014b0 <SCH_ImageDecode>
		SCH_XBeeRX();		// Process any incoming packets
 80008e0:	e7ee      	b.n	80008c0 <main+0x1d8>
 80008e2:	bf00      	nop
 80008e4:	24026af8 	.word	0x24026af8
 80008e8:	240003b0 	.word	0x240003b0
 80008ec:	240009d0 	.word	0x240009d0
 80008f0:	240004e0 	.word	0x240004e0
 80008f4:	240009f8 	.word	0x240009f8
 80008f8:	0801b190 	.word	0x0801b190
 80008fc:	2400125c 	.word	0x2400125c
 8000900:	240009e4 	.word	0x240009e4
 8000904:	2400048c 	.word	0x2400048c
 8000908:	24000df8 	.word	0x24000df8
 800090c:	0801b1ac 	.word	0x0801b1ac
 8000910:	240012dc 	.word	0x240012dc
 8000914:	24000754 	.word	0x24000754
 8000918:	58021000 	.word	0x58021000
 800091c:	240012f4 	.word	0x240012f4
 8000920:	0801b1c8 	.word	0x0801b1c8
 8000924:	24026af4 	.word	0x24026af4
 8000928:	240012c0 	.word	0x240012c0
 800092c:	24026b60 	.word	0x24026b60
 8000930:	24000030 	.word	0x24000030
 8000934:	240317e0 	.word	0x240317e0
 8000938:	24026b2c 	.word	0x24026b2c
 800093c:	240008a0 	.word	0x240008a0
 8000940:	0801b1e4 	.word	0x0801b1e4
 8000944:	240011f8 	.word	0x240011f8
 8000948:	24000854 	.word	0x24000854
 800094c:	0801b1fc 	.word	0x0801b1fc
 8000950:	240009ac 	.word	0x240009ac

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	@ 0x70
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	224c      	movs	r2, #76	@ 0x4c
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f01a f830 	bl	801a9c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2220      	movs	r2, #32
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f01a f82a 	bl	801a9c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000974:	2002      	movs	r0, #2
 8000976:	f00d fe17 	bl	800e5a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <SystemClock_Config+0xec>)
 8000980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000982:	4a2f      	ldr	r2, [pc, #188]	@ (8000a40 <SystemClock_Config+0xec>)
 8000984:	f023 0301 	bic.w	r3, r3, #1
 8000988:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800098a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a40 <SystemClock_Config+0xec>)
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <SystemClock_Config+0xf0>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a2a      	ldr	r2, [pc, #168]	@ (8000a44 <SystemClock_Config+0xf0>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <SystemClock_Config+0xf0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ac:	bf00      	nop
 80009ae:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <SystemClock_Config+0xf0>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009ba:	d1f8      	bne.n	80009ae <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009d2:	2318      	movs	r3, #24
 80009d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009da:	2306      	movs	r3, #6
 80009dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009de:	2302      	movs	r3, #2
 80009e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009e2:	230c      	movs	r3, #12
 80009e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00d fe22 	bl	800e63c <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009fe:	f001 fb59 	bl	80020b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	233f      	movs	r3, #63	@ 0x3f
 8000a04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2303      	movs	r3, #3
 8000a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a12:	2340      	movs	r3, #64	@ 0x40
 8000a14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a16:	2340      	movs	r3, #64	@ 0x40
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a20:	2340      	movs	r3, #64	@ 0x40
 8000a22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2102      	movs	r1, #2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f00e fa61 	bl	800eef0 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a34:	f001 fb3e 	bl	80020b4 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3770      	adds	r7, #112	@ 0x70
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	58000400 	.word	0x58000400
 8000a44:	58024800 	.word	0x58024800

08000a48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b0b0      	sub	sp, #192	@ 0xc0
 8000a4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	22c0      	movs	r2, #192	@ 0xc0
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f019 ffb7 	bl	801a9c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 8000a5a:	f04f 0208 	mov.w	r2, #8
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000a76:	2303      	movs	r3, #3
 8000a78:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a7a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a84:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00e fdb7 	bl	800f608 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000aa0:	f001 fb08 	bl	80020b4 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	37c0      	adds	r7, #192	@ 0xc0
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ad0:	4b38      	ldr	r3, [pc, #224]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000ad2:	4a39      	ldr	r2, [pc, #228]	@ (8000bb8 <MX_ADC1_Init+0x10c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ad6:	4b37      	ldr	r3, [pc, #220]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000ad8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000adc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ade:	4b35      	ldr	r3, [pc, #212]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ae4:	4b33      	ldr	r3, [pc, #204]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000aea:	4b32      	ldr	r3, [pc, #200]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000af0:	4b30      	ldr	r3, [pc, #192]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000af6:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000afc:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b02:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b0e:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b14:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b20:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b26:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b34:	481f      	ldr	r0, [pc, #124]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b36:	f003 f851 	bl	8003bdc <HAL_ADC_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b40:	f001 fab8 	bl	80020b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4819      	ldr	r0, [pc, #100]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b50:	f003 fffe 	bl	8004b50 <HAL_ADCEx_MultiModeConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b5a:	f001 faab 	bl	80020b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_ADC1_Init+0x110>)
 8000b60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b62:	2306      	movs	r3, #6
 8000b64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000b66:	2307      	movs	r3, #7
 8000b68:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b6a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b6e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b70:	2304      	movs	r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b82:	f003 faa5 	bl	80040d0 <HAL_ADC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b8c:	f001 fa92 	bl	80020b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_ADC1_Init+0x114>)
 8000b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b94:	230c      	movs	r3, #12
 8000b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_ADC1_Init+0x108>)
 8000b9e:	f003 fa97 	bl	80040d0 <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000ba8:	f001 fa84 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	@ 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	240003b0 	.word	0x240003b0
 8000bb8:	40022000 	.word	0x40022000
 8000bbc:	0c900008 	.word	0x0c900008
 8000bc0:	10c00010 	.word	0x10c00010

08000bc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bca:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <MX_I2C1_Init+0x78>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <MX_I2C1_Init+0x7c>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfe:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000c00:	f007 fa44 	bl	800808c <HAL_I2C_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c0a:	f001 fa53 	bl	80020b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000c12:	f009 fe75 	bl	800a900 <HAL_I2CEx_ConfigAnalogFilter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c1c:	f001 fa4a 	bl	80020b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_I2C1_Init+0x74>)
 8000c24:	f009 feb7 	bl	800a996 <HAL_I2CEx_ConfigDigitalFilter>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f001 fa41 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2400048c 	.word	0x2400048c
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	00401959 	.word	0x00401959

08000c44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <MX_I2C2_Init+0x78>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c50:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <MX_I2C2_Init+0x7c>)
 8000c52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c7e:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c80:	f007 fa04 	bl	800808c <HAL_I2C_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c8a:	f001 fa13 	bl	80020b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000c92:	f009 fe35 	bl	800a900 <HAL_I2CEx_ConfigAnalogFilter>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c9c:	f001 fa0a 	bl	80020b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_I2C2_Init+0x74>)
 8000ca4:	f009 fe77 	bl	800a996 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f001 fa01 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	240004e0 	.word	0x240004e0
 8000cbc:	40005800 	.word	0x40005800
 8000cc0:	00401959 	.word	0x00401959

08000cc4 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_JPEG_Init+0x20>)
 8000cca:	4a07      	ldr	r2, [pc, #28]	@ (8000ce8 <MX_JPEG_Init+0x24>)
 8000ccc:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_JPEG_Init+0x20>)
 8000cd0:	f009 feae 	bl	800aa30 <HAL_JPEG_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000cda:	f001 f9eb 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	24000624 	.word	0x24000624
 8000ce8:	52003000 	.word	0x52003000

08000cec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cf0:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000cf2:	4a28      	ldr	r2, [pc, #160]	@ (8000d94 <MX_SPI4_Init+0xa8>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000cf8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d04:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d06:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0c:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d1a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d44:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_SPI4_Init+0xa4>)
 8000d7e:	f011 f941 	bl	8012004 <HAL_SPI_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d88:	f001 f994 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	24000754 	.word	0x24000754
 8000d94:	40013400 	.word	0x40013400

08000d98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000db8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e30 <MX_TIM5_Init+0x98>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000dca:	4a1a      	ldr	r2, [pc, #104]	@ (8000e34 <MX_TIM5_Init+0x9c>)
 8000dcc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000dda:	4814      	ldr	r0, [pc, #80]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000ddc:	f012 f8bd 	bl	8012f5a <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000de6:	f001 f965 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000df8:	f012 fa86 	bl	8013308 <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f001 f957 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <MX_TIM5_Init+0x94>)
 8000e14:	f012 fce0 	bl	80137d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e1e:	f001 f949 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	24000854 	.word	0x24000854
 8000e30:	40000c00 	.word	0x40000c00
 8000e34:	007270de 	.word	0x007270de

08000e38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e3e:	4a25      	ldr	r2, [pc, #148]	@ (8000ed4 <MX_USART1_UART_Init+0x9c>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000e42:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e44:	4a24      	ldr	r2, [pc, #144]	@ (8000ed8 <MX_USART1_UART_Init+0xa0>)
 8000e46:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e86:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e88:	f012 fd52 	bl	8013930 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000e92:	f001 f90f 	bl	80020b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000e9a:	f014 fc6c 	bl	8015776 <HAL_UARTEx_SetTxFifoThreshold>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000ea4:	f001 f906 	bl	80020b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000eac:	f014 fca1 	bl	80157f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000eb6:	f001 f8fd 	bl	80020b4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USART1_UART_Init+0x98>)
 8000ebc:	f014 fc20 	bl	8015700 <HAL_UARTEx_EnableFifoMode>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000ec6:	f001 f8f5 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	240008a0 	.word	0x240008a0
 8000ed4:	40011000 	.word	0x40011000
 8000ed8:	0001b207 	.word	0x0001b207

08000edc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ee2:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <MX_DMA_Init+0x9c>)
 8000ee4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee8:	4a23      	ldr	r2, [pc, #140]	@ (8000f78 <MX_DMA_Init+0x9c>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <MX_DMA_Init+0x9c>)
 8000ef4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_DMA_Init+0x9c>)
 8000f02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f06:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <MX_DMA_Init+0x9c>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f10:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <MX_DMA_Init+0x9c>)
 8000f12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200b      	movs	r0, #11
 8000f24:	f003 ffcd 	bl	8004ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f28:	200b      	movs	r0, #11
 8000f2a:	f003 ffe4 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	200c      	movs	r0, #12
 8000f34:	f003 ffc5 	bl	8004ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f38:	200c      	movs	r0, #12
 8000f3a:	f003 ffdc 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	200d      	movs	r0, #13
 8000f44:	f003 ffbd 	bl	8004ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f48:	200d      	movs	r0, #13
 8000f4a:	f003 ffd4 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	200e      	movs	r0, #14
 8000f54:	f003 ffb5 	bl	8004ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f58:	200e      	movs	r0, #14
 8000f5a:	f003 ffcc 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2038      	movs	r0, #56	@ 0x38
 8000f64:	f003 ffad 	bl	8004ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f68:	2038      	movs	r0, #56	@ 0x38
 8000f6a:	f003 ffc4 	bl	8004ef6 <HAL_NVIC_EnableIRQ>

}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	58024400 	.word	0x58024400

08000f7c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <MX_MDMA_Init+0x3c>)
 8000f84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f88:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <MX_MDMA_Init+0x3c>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MX_MDMA_Init+0x3c>)
 8000f94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	207a      	movs	r0, #122	@ 0x7a
 8000fa6:	f003 ff8c 	bl	8004ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000faa:	207a      	movs	r0, #122	@ 0x7a
 8000fac:	f003 ffa3 	bl	8004ef6 <HAL_NVIC_EnableIRQ>

}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58024400 	.word	0x58024400

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800110c <MX_GPIO_Init+0x150>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800110c <MX_GPIO_Init+0x150>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800110c <MX_GPIO_Init+0x150>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff0:	4b46      	ldr	r3, [pc, #280]	@ (800110c <MX_GPIO_Init+0x150>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff6:	4a45      	ldr	r2, [pc, #276]	@ (800110c <MX_GPIO_Init+0x150>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001000:	4b42      	ldr	r3, [pc, #264]	@ (800110c <MX_GPIO_Init+0x150>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b3f      	ldr	r3, [pc, #252]	@ (800110c <MX_GPIO_Init+0x150>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001014:	4a3d      	ldr	r2, [pc, #244]	@ (800110c <MX_GPIO_Init+0x150>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101e:	4b3b      	ldr	r3, [pc, #236]	@ (800110c <MX_GPIO_Init+0x150>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b37      	ldr	r3, [pc, #220]	@ (800110c <MX_GPIO_Init+0x150>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001032:	4a36      	ldr	r2, [pc, #216]	@ (800110c <MX_GPIO_Init+0x150>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103c:	4b33      	ldr	r3, [pc, #204]	@ (800110c <MX_GPIO_Init+0x150>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b30      	ldr	r3, [pc, #192]	@ (800110c <MX_GPIO_Init+0x150>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001050:	4a2e      	ldr	r2, [pc, #184]	@ (800110c <MX_GPIO_Init+0x150>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105a:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <MX_GPIO_Init+0x150>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2120      	movs	r1, #32
 800106c:	4828      	ldr	r0, [pc, #160]	@ (8001110 <MX_GPIO_Init+0x154>)
 800106e:	f006 fff3 	bl	8008058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001078:	4826      	ldr	r0, [pc, #152]	@ (8001114 <MX_GPIO_Init+0x158>)
 800107a:	f006 ffed 	bl	8008058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 800107e:	2320      	movs	r3, #32
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	481e      	ldr	r0, [pc, #120]	@ (8001110 <MX_GPIO_Init+0x154>)
 8001096:	f006 fe17 	bl	8007cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LB_Pin */
  GPIO_InitStruct.Pin = BTN_LB_Pin;
 800109a:	2320      	movs	r3, #32
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_LB_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	481a      	ldr	r0, [pc, #104]	@ (8001118 <MX_GPIO_Init+0x15c>)
 80010ae:	f006 fe0b 	bl	8007cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RB_Pin */
  GPIO_InitStruct.Pin = BTN_RB_Pin;
 80010b2:	2320      	movs	r3, #32
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_RB_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4813      	ldr	r0, [pc, #76]	@ (8001114 <MX_GPIO_Init+0x158>)
 80010c6:	f006 fdff 	bl	8007cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LF_Pin BTN_RF_Pin */
  GPIO_InitStruct.Pin = BTN_LF_Pin|BTN_RF_Pin;
 80010ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x158>)
 80010e0:	f006 fdf2 	bl	8007cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 80010e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_GPIO_Init+0x158>)
 80010fe:	f006 fde3 	bl	8007cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	58024400 	.word	0x58024400
 8001110:	58021000 	.word	0x58021000
 8001114:	58020800 	.word	0x58020800
 8001118:	58020000 	.word	0x58020000

0800111c <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	if (wdog_network < WDOG_NETWORK_CUTOFF) {
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <NetworkTimeout+0x30>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d80f      	bhi.n	8001148 <NetworkTimeout+0x2c>
		// Increment the timeout ctr
		wdog_network++;
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <NetworkTimeout+0x30>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <NetworkTimeout+0x30>)
 8001132:	701a      	strb	r2, [r3, #0]

		// A timeout occurs when wdog_network == the Cutoff
		if (wdog_network == WDOG_NETWORK_CUTOFF) {
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <NetworkTimeout+0x30>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b04      	cmp	r3, #4
 800113a:	d105      	bne.n	8001148 <NetworkTimeout+0x2c>
			ST7789_Draw_NOSIG(&hst7789); // Draw the NOSIG symbol
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <NetworkTimeout+0x34>)
 800113e:	f002 f87b 	bl	8003238 <ST7789_Draw_NOSIG>
			st7789_state = 1;			 // Flag LCD as requested
 8001142:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <NetworkTimeout+0x38>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
		}
	}


}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	240009ac 	.word	0x240009ac
 8001150:	240012dc 	.word	0x240012dc
 8001154:	24026af4 	.word	0x24026af4

08001158 <ParsePacket_JPEG_IMAGE>:

//  Scoping Funtions
void ParsePacket_JPEG_IMAGE(uint8_t* packet, uint16_t byte_num) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
	// Data was fully sent
	if (byte_num < jpeg_img_lastRcvPkt && jpeg_state == 0) {
 8001164:	4b48      	ldr	r3, [pc, #288]	@ (8001288 <ParsePacket_JPEG_IMAGE+0x130>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	429a      	cmp	r2, r3
 800116c:	d269      	bcs.n	8001242 <ParsePacket_JPEG_IMAGE+0xea>
 800116e:	4b47      	ldr	r3, [pc, #284]	@ (800128c <ParsePacket_JPEG_IMAGE+0x134>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d165      	bne.n	8001242 <ParsePacket_JPEG_IMAGE+0xea>
		// Start the jpeg decode
		jpeg_size = jpeg_img_lastRcvPkt*PKT_DATASIZE + JPEG_HEADERSIZE;
 8001176:	4b44      	ldr	r3, [pc, #272]	@ (8001288 <ParsePacket_JPEG_IMAGE+0x130>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	019b      	lsls	r3, r3, #6
 800117c:	b29b      	uxth	r3, r3
 800117e:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b42      	ldr	r3, [pc, #264]	@ (8001290 <ParsePacket_JPEG_IMAGE+0x138>)
 8001186:	801a      	strh	r2, [r3, #0]
		HAL_StatusTypeDef ret;
		if (jpeg_currentraw)
 8001188:	4b42      	ldr	r3, [pc, #264]	@ (8001294 <ParsePacket_JPEG_IMAGE+0x13c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d01c      	beq.n	80011ca <ParsePacket_JPEG_IMAGE+0x72>
			ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw1, jpeg_size, jpeg_out, jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]*64);
 8001190:	4b3f      	ldr	r3, [pc, #252]	@ (8001290 <ParsePacket_JPEG_IMAGE+0x138>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	4b40      	ldr	r3, [pc, #256]	@ (8001298 <ParsePacket_JPEG_IMAGE+0x140>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4b3f      	ldr	r3, [pc, #252]	@ (800129c <ParsePacket_JPEG_IMAGE+0x144>)
 800119e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001298 <ParsePacket_JPEG_IMAGE+0x140>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <ParsePacket_JPEG_IMAGE+0x148>)
 80011ac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	019b      	lsls	r3, r3, #6
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4b3a      	ldr	r3, [pc, #232]	@ (80012a4 <ParsePacket_JPEG_IMAGE+0x14c>)
 80011ba:	4602      	mov	r2, r0
 80011bc:	493a      	ldr	r1, [pc, #232]	@ (80012a8 <ParsePacket_JPEG_IMAGE+0x150>)
 80011be:	483b      	ldr	r0, [pc, #236]	@ (80012ac <ParsePacket_JPEG_IMAGE+0x154>)
 80011c0:	f009 fd4d 	bl	800ac5e <HAL_JPEG_Decode_DMA>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e01b      	b.n	8001202 <ParsePacket_JPEG_IMAGE+0xaa>
		else {
			ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw2, jpeg_size, jpeg_out, jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]*64);
 80011ca:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <ParsePacket_JPEG_IMAGE+0x138>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <ParsePacket_JPEG_IMAGE+0x140>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <ParsePacket_JPEG_IMAGE+0x144>)
 80011d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <ParsePacket_JPEG_IMAGE+0x140>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	4619      	mov	r1, r3
 80011e4:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <ParsePacket_JPEG_IMAGE+0x148>)
 80011e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	019b      	lsls	r3, r3, #6
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <ParsePacket_JPEG_IMAGE+0x14c>)
 80011f4:	4602      	mov	r2, r0
 80011f6:	492e      	ldr	r1, [pc, #184]	@ (80012b0 <ParsePacket_JPEG_IMAGE+0x158>)
 80011f8:	482c      	ldr	r0, [pc, #176]	@ (80012ac <ParsePacket_JPEG_IMAGE+0x154>)
 80011fa:	f009 fd30 	bl	800ac5e <HAL_JPEG_Decode_DMA>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
		}
		jpeg_currentraw = !jpeg_currentraw;
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <ParsePacket_JPEG_IMAGE+0x13c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf0c      	ite	eq
 800120a:	2301      	moveq	r3, #1
 800120c:	2300      	movne	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <ParsePacket_JPEG_IMAGE+0x13c>)
 8001214:	701a      	strb	r2, [r3, #0]

		if (ret) {
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00f      	beq.n	800123c <ParsePacket_JPEG_IMAGE+0xe4>
			sprintf(ssd_msg, " JPEG FAIL %d", ret);
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	461a      	mov	r2, r3
 8001220:	4924      	ldr	r1, [pc, #144]	@ (80012b4 <ParsePacket_JPEG_IMAGE+0x15c>)
 8001222:	4825      	ldr	r0, [pc, #148]	@ (80012b8 <ParsePacket_JPEG_IMAGE+0x160>)
 8001224:	f019 fbae 	bl	801a984 <siprintf>
			WriteDebug(ssd_msg, strlen(ssd_msg));
 8001228:	4823      	ldr	r0, [pc, #140]	@ (80012b8 <ParsePacket_JPEG_IMAGE+0x160>)
 800122a:	f7ff f859 	bl	80002e0 <strlen>
 800122e:	4603      	mov	r3, r0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	4820      	ldr	r0, [pc, #128]	@ (80012b8 <ParsePacket_JPEG_IMAGE+0x160>)
 8001236:	f000 feeb 	bl	8002010 <WriteDebug>
 800123a:	e002      	b.n	8001242 <ParsePacket_JPEG_IMAGE+0xea>
		} else {
			jpeg_state = 1;	// Flag JPEG as busy
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <ParsePacket_JPEG_IMAGE+0x134>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
		}
	}
	jpeg_img_lastRcvPkt = byte_num;
 8001242:	4a11      	ldr	r2, [pc, #68]	@ (8001288 <ParsePacket_JPEG_IMAGE+0x130>)
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	8013      	strh	r3, [r2, #0]

	// fill in the received data
	if (jpeg_currentraw)
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <ParsePacket_JPEG_IMAGE+0x13c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00b      	beq.n	8001268 <ParsePacket_JPEG_IMAGE+0x110>
		memcpy(jpeg_raw1 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001258:	4a13      	ldr	r2, [pc, #76]	@ (80012a8 <ParsePacket_JPEG_IMAGE+0x150>)
 800125a:	4413      	add	r3, r2
 800125c:	2240      	movs	r2, #64	@ 0x40
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f019 fbfd 	bl	801aa60 <memcpy>
	else {
		memcpy(jpeg_raw2 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
	}
}
 8001266:	e00a      	b.n	800127e <ParsePacket_JPEG_IMAGE+0x126>
		memcpy(jpeg_raw2 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	019b      	lsls	r3, r3, #6
 800126c:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001270:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <ParsePacket_JPEG_IMAGE+0x158>)
 8001272:	4413      	add	r3, r2
 8001274:	2240      	movs	r2, #64	@ 0x40
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	f019 fbf1 	bl	801aa60 <memcpy>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	24026b50 	.word	0x24026b50
 800128c:	240470e2 	.word	0x240470e2
 8001290:	240470e0 	.word	0x240470e0
 8001294:	24026b5d 	.word	0x24026b5d
 8001298:	24026b5c 	.word	0x24026b5c
 800129c:	2400001c 	.word	0x2400001c
 80012a0:	24000024 	.word	0x24000024
 80012a4:	2403c460 	.word	0x2403c460
 80012a8:	24026b60 	.word	0x24026b60
 80012ac:	24000624 	.word	0x24000624
 80012b0:	240317e0 	.word	0x240317e0
 80012b4:	0801b218 	.word	0x0801b218
 80012b8:	240011f8 	.word	0x240011f8

080012bc <ParsePacket_JPEG_HEADER>:

void ParsePacket_JPEG_HEADER(uint8_t* packet, uint16_t byte_num) {
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
	uint16_t byte_num_conv = (0xFFFF - byte_num) - 1;
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80012ce:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80012d2:	33fe      	adds	r3, #254	@ 0xfe
 80012d4:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 0; i < PKT_DATASIZE; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e01e      	b.n	800131a <ParsePacket_JPEG_HEADER+0x5e>
		// Bounds check on last packet
		if (byte_num*PKT_DATASIZE + i >= JPEG_HEADERSIZE)
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	019a      	lsls	r2, r3, #6
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	4413      	add	r3, r2
 80012e4:	f240 220d 	movw	r2, #525	@ 0x20d
 80012e8:	4293      	cmp	r3, r2
 80012ea:	dc1a      	bgt.n	8001322 <ParsePacket_JPEG_HEADER+0x66>
			return;

		// Update both buffers' headers
		jpeg_raw1[byte_num*PKT_DATASIZE + i] = packet[i];
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	441a      	add	r2, r3
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	0199      	lsls	r1, r3, #6
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	440b      	add	r3, r1
 80012fa:	7811      	ldrb	r1, [r2, #0]
 80012fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <ParsePacket_JPEG_HEADER+0x74>)
 80012fe:	54d1      	strb	r1, [r2, r3]
		jpeg_raw2[byte_num*PKT_DATASIZE + i] = packet[i];
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	441a      	add	r2, r3
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	0199      	lsls	r1, r3, #6
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	440b      	add	r3, r1
 800130e:	7811      	ldrb	r1, [r2, #0]
 8001310:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <ParsePacket_JPEG_HEADER+0x78>)
 8001312:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < PKT_DATASIZE; i++) {
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	3301      	adds	r3, #1
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b3f      	cmp	r3, #63	@ 0x3f
 800131e:	d9dd      	bls.n	80012dc <ParsePacket_JPEG_HEADER+0x20>
 8001320:	e000      	b.n	8001324 <ParsePacket_JPEG_HEADER+0x68>
			return;
 8001322:	bf00      	nop
	}
}
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	24026b60 	.word	0x24026b60
 8001334:	240317e0 	.word	0x240317e0

08001338 <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	// If there's a packet, process it
	// If the packet is good, push it to the screen
	uint16_t rx_byte;
	uint8_t *rx_packet;
	uint8_t ret = XBEE_RXPacket(&hxbee, &rx_packet, &rx_byte);
 800133e:	1d3a      	adds	r2, r7, #4
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4831      	ldr	r0, [pc, #196]	@ (800140c <SCH_XBeeRX+0xd4>)
 8001346:	f015 fe8b 	bl	8017060 <XBEE_RXPacket>
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	if (ret == 0) {
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d158      	bne.n	8001406 <SCH_XBeeRX+0xce>
		// Network is active, reset the watchdog
		wdog_network = 0;
 8001354:	4b2e      	ldr	r3, [pc, #184]	@ (8001410 <SCH_XBeeRX+0xd8>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]

		// Packet contains telemetry
		if (rx_byte == 0xFFFF) {
 800135a:	88bb      	ldrh	r3, [r7, #4]
 800135c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001360:	4293      	cmp	r3, r2
 8001362:	d04f      	beq.n	8001404 <SCH_XBeeRX+0xcc>
			// TODO: Parse Telemetry
			return;
		}

		// Packet contains JPEG HEADER data
		if (GetState(OP_CAMERA_ENCODING) == 0 && rx_byte > 0xFFF0) {
 8001364:	2000      	movs	r0, #0
 8001366:	f000 fadb 	bl	8001920 <GetState>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10b      	bne.n	8001388 <SCH_XBeeRX+0x50>
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8001376:	4293      	cmp	r3, r2
 8001378:	d906      	bls.n	8001388 <SCH_XBeeRX+0x50>
			ParsePacket_JPEG_HEADER(rx_packet, rx_byte);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	88ba      	ldrh	r2, [r7, #4]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff9b 	bl	80012bc <ParsePacket_JPEG_HEADER>
			return;
 8001386:	e03e      	b.n	8001406 <SCH_XBeeRX+0xce>
		}

		// Packet contains JPEG IMAGE data
		if (GetState(OP_CAMERA_ENCODING) == 0 && rx_byte < jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality] + 1) {
 8001388:	2000      	movs	r0, #0
 800138a:	f000 fac9 	bl	8001920 <GetState>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d118      	bne.n	80013c6 <SCH_XBeeRX+0x8e>
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <SCH_XBeeRX+0xdc>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <SCH_XBeeRX+0xe0>)
 800139c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <SCH_XBeeRX+0xdc>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <SCH_XBeeRX+0xe4>)
 80013aa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	88ba      	ldrh	r2, [r7, #4]
 80013b4:	4293      	cmp	r3, r2
 80013b6:	db06      	blt.n	80013c6 <SCH_XBeeRX+0x8e>
			ParsePacket_JPEG_IMAGE(rx_packet, rx_byte);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff feca 	bl	8001158 <ParsePacket_JPEG_IMAGE>
			return;
 80013c4:	e01f      	b.n	8001406 <SCH_XBeeRX+0xce>
		}

		// Packet contains RAW image data
		if (GetState(OP_CAMERA_ENCODING) == 1 && rx_byte < jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality] + 1) {
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 faaa 	bl	8001920 <GetState>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d119      	bne.n	8001406 <SCH_XBeeRX+0xce>
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <SCH_XBeeRX+0xdc>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <SCH_XBeeRX+0xe0>)
 80013da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <SCH_XBeeRX+0xdc>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <SCH_XBeeRX+0xe4>)
 80013e8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	88ba      	ldrh	r2, [r7, #4]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	db07      	blt.n	8001406 <SCH_XBeeRX+0xce>
			ParsePacket_JPEG_IMAGE(rx_packet, rx_byte);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	88ba      	ldrh	r2, [r7, #4]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff feab 	bl	8001158 <ParsePacket_JPEG_IMAGE>
			return;
 8001402:	e000      	b.n	8001406 <SCH_XBeeRX+0xce>
			return;
 8001404:	bf00      	nop
		}

		// TODO: Parse JPEG Header data
	}
}
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	24026b2c 	.word	0x24026b2c
 8001410:	240009ac 	.word	0x240009ac
 8001414:	24026b5c 	.word	0x24026b5c
 8001418:	2400001c 	.word	0x2400001c
 800141c:	24000024 	.word	0x24000024

08001420 <SCH_XBeeTX>:

void SCH_XBeeTX() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <SCH_XBeeTX+0x78>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fa60 	bl	80018f0 <DeltaTime>
 8001430:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX) return;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b63      	cmp	r3, #99	@ 0x63
 8001436:	d928      	bls.n	800148a <SCH_XBeeTX+0x6a>

	// Set the tank controls just before send, minimize latency
	hmenu.state_packet[RESERVE_LTRACK_MAG] = slider_magnitude[0];
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <SCH_XBeeTX+0x7c>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	3307      	adds	r3, #7
 800143e:	4a18      	ldr	r2, [pc, #96]	@ (80014a0 <SCH_XBeeTX+0x80>)
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_RTRACK_MAG] = slider_magnitude[1];
 8001444:	4b15      	ldr	r3, [pc, #84]	@ (800149c <SCH_XBeeTX+0x7c>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	3308      	adds	r3, #8
 800144a:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <SCH_XBeeTX+0x80>)
 800144c:	7852      	ldrb	r2, [r2, #1]
 800144e:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_LTRACK_DIR] = slider_direction[0];
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <SCH_XBeeTX+0x7c>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	3309      	adds	r3, #9
 8001456:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <SCH_XBeeTX+0x84>)
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_RTRACK_DIR] = slider_direction[1];
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <SCH_XBeeTX+0x7c>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	330a      	adds	r3, #10
 8001462:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <SCH_XBeeTX+0x84>)
 8001464:	7852      	ldrb	r2, [r2, #1]
 8001466:	701a      	strb	r2, [r3, #0]

	if (XBEE_TXPacket(&hxbee, hmenu.state_packet, 0xFFFF))  {
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <SCH_XBeeTX+0x7c>)
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <SCH_XBeeTX+0x88>)
 8001474:	f015 fe64 	bl	8017140 <XBEE_TXPacket>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <SCH_XBeeTX+0x6e>
		// Line busy, retry ASAP
		return;
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 800147e:	f002 f957 	bl	8003730 <HAL_GetTick>
 8001482:	4603      	mov	r3, r0
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <SCH_XBeeTX+0x78>)
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e002      	b.n	8001490 <SCH_XBeeTX+0x70>
	if (delta_t < SCH_MS_TX) return;
 800148a:	bf00      	nop
 800148c:	e000      	b.n	8001490 <SCH_XBeeTX+0x70>
		return;
 800148e:	bf00      	nop
}
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	240009b4 	.word	0x240009b4
 800149c:	240012c0 	.word	0x240012c0
 80014a0:	24026b24 	.word	0x24026b24
 80014a4:	24026b28 	.word	0x24026b28
 80014a8:	24026b2c 	.word	0x24026b2c
 80014ac:	00000000 	.word	0x00000000

080014b0 <SCH_ImageDecode>:

void SCH_ImageDecode() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
	if (jpeg_state != 2) return;
 80014b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001728 <SCH_ImageDecode+0x278>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	f040 8126 	bne.w	800170c <SCH_ImageDecode+0x25c>
		// Loop through every mcu block

		for (uint16_t mcu_x = 0; mcu_x < jpeg_mcu_widths[jpeg_quality]; mcu_x++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	83fb      	strh	r3, [r7, #30]
 80014c4:	e0b7      	b.n	8001636 <SCH_ImageDecode+0x186>
			uint16_t mcu_idx = current_mcu_y*jpeg_mcu_widths[jpeg_quality] + mcu_x;
 80014c6:	4b99      	ldr	r3, [pc, #612]	@ (800172c <SCH_ImageDecode+0x27c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b98      	ldr	r3, [pc, #608]	@ (8001730 <SCH_ImageDecode+0x280>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4b98      	ldr	r3, [pc, #608]	@ (8001734 <SCH_ImageDecode+0x284>)
 80014d4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014d8:	fb12 f303 	smulbb	r3, r2, r3
 80014dc:	b29a      	uxth	r2, r3
 80014de:	8bfb      	ldrh	r3, [r7, #30]
 80014e0:	4413      	add	r3, r2
 80014e2:	82bb      	strh	r3, [r7, #20]

			for (uint16_t y = 0; y < 8; y++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	83bb      	strh	r3, [r7, #28]
 80014e8:	e09e      	b.n	8001628 <SCH_ImageDecode+0x178>
				for (uint16_t x = 0; x < 8; x++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	837b      	strh	r3, [r7, #26]
 80014ee:	e094      	b.n	800161a <SCH_ImageDecode+0x16a>
					// Bounds check
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 80014f0:	8bfb      	ldrh	r3, [r7, #30]
 80014f2:	00da      	lsls	r2, r3, #3
 80014f4:	8b7b      	ldrh	r3, [r7, #26]
 80014f6:	4413      	add	r3, r2
 80014f8:	2bf0      	cmp	r3, #240	@ 0xf0
 80014fa:	f300 8086 	bgt.w	800160a <SCH_ImageDecode+0x15a>
					// COLOR FORMAT
					// |RRRRR GGG|GGG BBBBB|

					uint32_t pix_x = (mcu_x*8 + x)*jpeg_scaleFactors[jpeg_quality];
 80014fe:	8bfb      	ldrh	r3, [r7, #30]
 8001500:	00da      	lsls	r2, r3, #3
 8001502:	8b7b      	ldrh	r3, [r7, #26]
 8001504:	4413      	add	r3, r2
 8001506:	4a8a      	ldr	r2, [pc, #552]	@ (8001730 <SCH_ImageDecode+0x280>)
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	4611      	mov	r1, r2
 800150c:	4a8a      	ldr	r2, [pc, #552]	@ (8001738 <SCH_ImageDecode+0x288>)
 800150e:	5c52      	ldrb	r2, [r2, r1]
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	613b      	str	r3, [r7, #16]
					if (pix_x >= LCD_WIDTH-1) continue;
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	2bee      	cmp	r3, #238	@ 0xee
 800151a:	d878      	bhi.n	800160e <SCH_ImageDecode+0x15e>
					pix_x = LCD_WIDTH - pix_x - 1;
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001522:	613b      	str	r3, [r7, #16]
					uint32_t pix_y = (current_mcu_y*8 + y)*jpeg_scaleFactors[jpeg_quality];
 8001524:	4b81      	ldr	r3, [pc, #516]	@ (800172c <SCH_ImageDecode+0x27c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	00da      	lsls	r2, r3, #3
 800152a:	8bbb      	ldrh	r3, [r7, #28]
 800152c:	4413      	add	r3, r2
 800152e:	4a80      	ldr	r2, [pc, #512]	@ (8001730 <SCH_ImageDecode+0x280>)
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	4611      	mov	r1, r2
 8001534:	4a80      	ldr	r2, [pc, #512]	@ (8001738 <SCH_ImageDecode+0x288>)
 8001536:	5c52      	ldrb	r2, [r2, r1]
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	60fb      	str	r3, [r7, #12]
					if (pix_y >= LCD_HEIGHT-2) continue;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001544:	d265      	bcs.n	8001612 <SCH_ImageDecode+0x162>

					uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 8001546:	8abb      	ldrh	r3, [r7, #20]
 8001548:	00da      	lsls	r2, r3, #3
 800154a:	8bbb      	ldrh	r3, [r7, #28]
 800154c:	4413      	add	r3, r2
 800154e:	00da      	lsls	r2, r3, #3
 8001550:	8b7b      	ldrh	r3, [r7, #26]
 8001552:	4413      	add	r3, r2
 8001554:	4a79      	ldr	r2, [pc, #484]	@ (800173c <SCH_ImageDecode+0x28c>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	72fb      	strb	r3, [r7, #11]
					uint8_t msb = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 800155a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800155e:	f023 0307 	bic.w	r3, r3, #7
 8001562:	b25a      	sxtb	r2, r3
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	b2db      	uxtb	r3, r3
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b25b      	sxtb	r3, r3
 8001570:	72bb      	strb	r3, [r7, #10]
					uint8_t lsb = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	b25a      	sxtb	r2, r3
 800157a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	f023 031f 	bic.w	r3, r3, #31
 8001586:	b25b      	sxtb	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b25b      	sxtb	r3, r3
 800158c:	727b      	strb	r3, [r7, #9]

					// TODO: Speed this up as much as possible, even if it means skipping lines
					// Loop through the pixels in a box
					uint8_t perfScaleFac = jpeg_scaleFactors[jpeg_quality];
 800158e:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <SCH_ImageDecode+0x280>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <SCH_ImageDecode+0x288>)
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	767b      	strb	r3, [r7, #25]
					if (perfScaleFac == 0)
 800159a:	7e7b      	ldrb	r3, [r7, #25]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <SCH_ImageDecode+0xf4>
						perfScaleFac = 1;
 80015a0:	2301      	movs	r3, #1
 80015a2:	767b      	strb	r3, [r7, #25]

					for (uint8_t yOff = 0; yOff < perfScaleFac; yOff++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	763b      	strb	r3, [r7, #24]
 80015a8:	e02a      	b.n	8001600 <SCH_ImageDecode+0x150>
						uint32_t cached_yOff = (pix_y+yOff)*LCD_WIDTH*2;	// Cache the Y offset so we don't compute it every loop
 80015aa:	7e3a      	ldrb	r2, [r7, #24]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	441a      	add	r2, r3
 80015b0:	4613      	mov	r3, r2
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	015b      	lsls	r3, r3, #5
 80015b8:	607b      	str	r3, [r7, #4]

						for (uint8_t xOff = 0; xOff < perfScaleFac; xOff++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]
 80015be:	e018      	b.n	80015f2 <SCH_ImageDecode+0x142>
							uint32_t cached_xOff = (pix_x+xOff)*2;
 80015c0:	7dfa      	ldrb	r2, [r7, #23]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4413      	add	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	603b      	str	r3, [r7, #0]

							hst7789.vram[cached_yOff + cached_xOff    ] = msb;
 80015ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001740 <SCH_ImageDecode+0x290>)
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	4413      	add	r3, r2
 80015d6:	7aba      	ldrb	r2, [r7, #10]
 80015d8:	701a      	strb	r2, [r3, #0]
							hst7789.vram[cached_yOff + cached_xOff + 1] = lsb;
 80015da:	4b59      	ldr	r3, [pc, #356]	@ (8001740 <SCH_ImageDecode+0x290>)
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	440b      	add	r3, r1
 80015e4:	3301      	adds	r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	7a7a      	ldrb	r2, [r7, #9]
 80015ea:	701a      	strb	r2, [r3, #0]
						for (uint8_t xOff = 0; xOff < perfScaleFac; xOff++) {
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3301      	adds	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	7dfa      	ldrb	r2, [r7, #23]
 80015f4:	7e7b      	ldrb	r3, [r7, #25]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3e2      	bcc.n	80015c0 <SCH_ImageDecode+0x110>
					for (uint8_t yOff = 0; yOff < perfScaleFac; yOff++) {
 80015fa:	7e3b      	ldrb	r3, [r7, #24]
 80015fc:	3301      	adds	r3, #1
 80015fe:	763b      	strb	r3, [r7, #24]
 8001600:	7e3a      	ldrb	r2, [r7, #24]
 8001602:	7e7b      	ldrb	r3, [r7, #25]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3d0      	bcc.n	80015aa <SCH_ImageDecode+0xfa>
 8001608:	e004      	b.n	8001614 <SCH_ImageDecode+0x164>
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 800160a:	bf00      	nop
 800160c:	e002      	b.n	8001614 <SCH_ImageDecode+0x164>
					if (pix_x >= LCD_WIDTH-1) continue;
 800160e:	bf00      	nop
 8001610:	e000      	b.n	8001614 <SCH_ImageDecode+0x164>
					if (pix_y >= LCD_HEIGHT-2) continue;
 8001612:	bf00      	nop
				for (uint16_t x = 0; x < 8; x++) {
 8001614:	8b7b      	ldrh	r3, [r7, #26]
 8001616:	3301      	adds	r3, #1
 8001618:	837b      	strh	r3, [r7, #26]
 800161a:	8b7b      	ldrh	r3, [r7, #26]
 800161c:	2b07      	cmp	r3, #7
 800161e:	f67f af67 	bls.w	80014f0 <SCH_ImageDecode+0x40>
			for (uint16_t y = 0; y < 8; y++) {
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	83bb      	strh	r3, [r7, #28]
 8001628:	8bbb      	ldrh	r3, [r7, #28]
 800162a:	2b07      	cmp	r3, #7
 800162c:	f67f af5d 	bls.w	80014ea <SCH_ImageDecode+0x3a>
		for (uint16_t mcu_x = 0; mcu_x < jpeg_mcu_widths[jpeg_quality]; mcu_x++) {
 8001630:	8bfb      	ldrh	r3, [r7, #30]
 8001632:	3301      	adds	r3, #1
 8001634:	83fb      	strh	r3, [r7, #30]
 8001636:	4b3e      	ldr	r3, [pc, #248]	@ (8001730 <SCH_ImageDecode+0x280>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	4b3d      	ldr	r3, [pc, #244]	@ (8001734 <SCH_ImageDecode+0x284>)
 800163e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001642:	8bfa      	ldrh	r2, [r7, #30]
 8001644:	429a      	cmp	r2, r3
 8001646:	f4ff af3e 	bcc.w	80014c6 <SCH_ImageDecode+0x16>
					}
				}
			}
		}

		current_mcu_y++;
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <SCH_ImageDecode+0x27c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b36      	ldr	r3, [pc, #216]	@ (800172c <SCH_ImageDecode+0x27c>)
 8001654:	701a      	strb	r2, [r3, #0]

		if (current_mcu_y >= jpeg_mcu_heights[jpeg_quality]) {
 8001656:	4b35      	ldr	r3, [pc, #212]	@ (800172c <SCH_ImageDecode+0x27c>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b34      	ldr	r3, [pc, #208]	@ (8001730 <SCH_ImageDecode+0x280>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <SCH_ImageDecode+0x294>)
 8001664:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001668:	429a      	cmp	r2, r3
 800166a:	d350      	bcc.n	800170e <SCH_ImageDecode+0x25e>
			current_mcu_y = 0;	// Reset the V-MCU counter
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <SCH_ImageDecode+0x27c>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]

			avg_ms_imgRecv *= 0.8;
 8001672:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <SCH_ImageDecode+0x298>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800167e:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001718 <SCH_ImageDecode+0x268>
 8001682:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001686:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800168a:	ee17 2a90 	vmov	r2, s15
 800168e:	4b2e      	ldr	r3, [pc, #184]	@ (8001748 <SCH_ImageDecode+0x298>)
 8001690:	601a      	str	r2, [r3, #0]
			avg_ms_imgRecv += DeltaTime(tim_ms_imgRecv)*0.2;	// Get the time since last frame
 8001692:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <SCH_ImageDecode+0x29c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f92a 	bl	80018f0 <DeltaTime>
 800169c:	ee07 0a90 	vmov	s15, r0
 80016a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016a4:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001720 <SCH_ImageDecode+0x270>
 80016a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <SCH_ImageDecode+0x298>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016c0:	ee17 2a90 	vmov	r2, s15
 80016c4:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <SCH_ImageDecode+0x298>)
 80016c6:	601a      	str	r2, [r3, #0]
			tim_ms_imgRecv = HAL_GetTick();						// start the frame-timer
 80016c8:	f002 f832 	bl	8003730 <HAL_GetTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a1f      	ldr	r2, [pc, #124]	@ (800174c <SCH_ImageDecode+0x29c>)
 80016d0:	6013      	str	r3, [r2, #0]

			// Plaster the FPS on top of VRAM
			if (!GetState(OP_CAMERA_FRAMETIME))
 80016d2:	2002      	movs	r0, #2
 80016d4:	f000 f924 	bl	8001920 <GetState>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d105      	bne.n	80016ea <SCH_ImageDecode+0x23a>
				ST7789_Draw_DATA(&hst7789, avg_ms_imgRecv);
 80016de:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <SCH_ImageDecode+0x298>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4816      	ldr	r0, [pc, #88]	@ (8001740 <SCH_ImageDecode+0x290>)
 80016e6:	f001 fe3f 	bl	8003368 <ST7789_Draw_DATA>

			jpeg_state = 0;		// Flag JPEG as idle
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <SCH_ImageDecode+0x278>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
			st7789_state = 1;	// Flag LCD as requested
 80016f0:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <SCH_ImageDecode+0x2a0>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]

			st_interlacing = !st_interlacing; // Toggle interlacing
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <SCH_ImageDecode+0x2a4>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <SCH_ImageDecode+0x2a4>)
 8001708:	701a      	strb	r2, [r3, #0]
 800170a:	e000      	b.n	800170e <SCH_ImageDecode+0x25e>
	if (jpeg_state != 2) return;
 800170c:	bf00      	nop
		}
}
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	f3af 8000 	nop.w
 8001718:	9999999a 	.word	0x9999999a
 800171c:	3fe99999 	.word	0x3fe99999
 8001720:	9999999a 	.word	0x9999999a
 8001724:	3fc99999 	.word	0x3fc99999
 8001728:	240470e2 	.word	0x240470e2
 800172c:	240470e3 	.word	0x240470e3
 8001730:	24026b5c 	.word	0x24026b5c
 8001734:	2400001c 	.word	0x2400001c
 8001738:	2400002c 	.word	0x2400002c
 800173c:	2403c460 	.word	0x2403c460
 8001740:	240012dc 	.word	0x240012dc
 8001744:	24000024 	.word	0x24000024
 8001748:	24026b54 	.word	0x24026b54
 800174c:	24026b58 	.word	0x24026b58
 8001750:	24026af4 	.word	0x24026af4
 8001754:	24026af5 	.word	0x24026af5

08001758 <SCH_OLEDUpdate>:

void SCH_OLEDUpdate() {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_oled);
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <SCH_OLEDUpdate+0x58>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f8c4 	bl	80018f0 <DeltaTime>
 8001768:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_OLED) return;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b20      	cmp	r3, #32
 800176e:	d91b      	bls.n	80017a8 <SCH_OLEDUpdate+0x50>

	// Update the timer for the next DT period
	sch_tim_oled = HAL_GetTick();
 8001770:	f001 ffde 	bl	8003730 <HAL_GetTick>
 8001774:	4603      	mov	r3, r0
 8001776:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <SCH_OLEDUpdate+0x58>)
 8001778:	6013      	str	r3, [r2, #0]

	// Display the screen contents
	// Clear existing VRAM
	SSD1306_Clear(&hssd1);
 800177a:	480e      	ldr	r0, [pc, #56]	@ (80017b4 <SCH_OLEDUpdate+0x5c>)
 800177c:	f001 fb12 	bl	8002da4 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8001780:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <SCH_OLEDUpdate+0x60>)
 8001782:	f001 fb0f 	bl	8002da4 <SSD1306_Clear>

	// Draw the sliders
	Draw_Slider(0);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f9ae 	bl	8001ae8 <Draw_Slider>
	Draw_Slider(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f000 f9ab 	bl	8001ae8 <Draw_Slider>

	MENU_Draw(&hmenu, delta_t);
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <SCH_OLEDUpdate+0x64>)
 8001796:	f016 f8a5 	bl	80178e4 <MENU_Draw>

	// Update the screens
	SSD1306_Update(&hssd1);
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <SCH_OLEDUpdate+0x5c>)
 800179c:	f001 fb16 	bl	8002dcc <SSD1306_Update>
	SSD1306_Update(&hssd2);
 80017a0:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <SCH_OLEDUpdate+0x60>)
 80017a2:	f001 fb13 	bl	8002dcc <SSD1306_Update>
 80017a6:	e000      	b.n	80017aa <SCH_OLEDUpdate+0x52>
	if (delta_t < SCH_MS_OLED) return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	240009b0 	.word	0x240009b0
 80017b4:	240009d0 	.word	0x240009d0
 80017b8:	240009e4 	.word	0x240009e4
 80017bc:	240012c0 	.word	0x240012c0

080017c0 <SCH_LCDUpdate>:

void SCH_LCDUpdate() {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	// Update the displays
	if (hst7789.spi_state == 0 && st7789_state == 1) {
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <SCH_LCDUpdate+0x24>)
 80017c6:	791b      	ldrb	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <SCH_LCDUpdate+0x20>
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <SCH_LCDUpdate+0x28>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <SCH_LCDUpdate+0x20>
		ST7789_UpdateAutomatic(&hst7789);
 80017d4:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <SCH_LCDUpdate+0x24>)
 80017d6:	f001 fd06 	bl	80031e6 <ST7789_UpdateAutomatic>
		st7789_state = 0;
 80017da:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <SCH_LCDUpdate+0x28>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
	}
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	240012dc 	.word	0x240012dc
 80017e8:	24026af4 	.word	0x24026af4

080017ec <SCH_GetInputs>:

void SCH_GetInputs() {
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	e041      	b.n	800187c <SCH_GetInputs+0x90>
		// Debounce timer
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	4a35      	ldr	r2, [pc, #212]	@ (80018d0 <SCH_GetInputs+0xe4>)
 80017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f875 	bl	80018f0 <DeltaTime>
 8001806:	4603      	mov	r3, r0
 8001808:	2b13      	cmp	r3, #19
 800180a:	d933      	bls.n	8001874 <SCH_GetInputs+0x88>

		// Get input
		uint8_t i_new = !HAL_GPIO_ReadPin(i_ports[i], i_pins[i]);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4a31      	ldr	r2, [pc, #196]	@ (80018d4 <SCH_GetInputs+0xe8>)
 8001810:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4930      	ldr	r1, [pc, #192]	@ (80018d8 <SCH_GetInputs+0xec>)
 8001818:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800181c:	4619      	mov	r1, r3
 800181e:	4610      	mov	r0, r2
 8001820:	f006 fc02 	bl	8008028 <HAL_GPIO_ReadPin>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	71bb      	strb	r3, [r7, #6]

		// Update debounce timer
		if (i_new != istate_hold[i])
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <SCH_GetInputs+0xf0>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	79ba      	ldrb	r2, [r7, #6]
 800183a:	429a      	cmp	r2, r3
 800183c:	d006      	beq.n	800184c <SCH_GetInputs+0x60>
			istate_time[i] = HAL_GetTick();
 800183e:	79fc      	ldrb	r4, [r7, #7]
 8001840:	f001 ff76 	bl	8003730 <HAL_GetTick>
 8001844:	4603      	mov	r3, r0
 8001846:	4a22      	ldr	r2, [pc, #136]	@ (80018d0 <SCH_GetInputs+0xe4>)
 8001848:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

		istate_pressed[i] = i_new && !istate_hold[i];	// Just pressed
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <SCH_GetInputs+0x74>
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <SCH_GetInputs+0xf0>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <SCH_GetInputs+0x74>
 800185c:	2201      	movs	r2, #1
 800185e:	e000      	b.n	8001862 <SCH_GetInputs+0x76>
 8001860:	2200      	movs	r2, #0
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	b2d1      	uxtb	r1, r2
 8001866:	4a1e      	ldr	r2, [pc, #120]	@ (80018e0 <SCH_GetInputs+0xf4>)
 8001868:	54d1      	strb	r1, [r2, r3]
		istate_hold[i] = i_new;							// Update sotred val
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	491b      	ldr	r1, [pc, #108]	@ (80018dc <SCH_GetInputs+0xf0>)
 800186e:	79ba      	ldrb	r2, [r7, #6]
 8001870:	54ca      	strb	r2, [r1, r3]
 8001872:	e000      	b.n	8001876 <SCH_GetInputs+0x8a>
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 8001874:	bf00      	nop
	for (uint8_t i = 0; i < 4; i++) {
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	3301      	adds	r3, #1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d9ba      	bls.n	80017f8 <SCH_GetInputs+0xc>
//			test_vals[i]++;
//		}
	}

	// Update the menu state
	MENU_ParseInput(&hmenu, istate_pressed);
 8001882:	4917      	ldr	r1, [pc, #92]	@ (80018e0 <SCH_GetInputs+0xf4>)
 8001884:	4817      	ldr	r0, [pc, #92]	@ (80018e4 <SCH_GetInputs+0xf8>)
 8001886:	f016 f999 	bl	8017bbc <MENU_ParseInput>
	istate_pressed[0] = 0;
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <SCH_GetInputs+0xf4>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
	istate_pressed[1] = 0;
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <SCH_GetInputs+0xf4>)
 8001892:	2200      	movs	r2, #0
 8001894:	705a      	strb	r2, [r3, #1]
	istate_pressed[2] = 0;
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <SCH_GetInputs+0xf4>)
 8001898:	2200      	movs	r2, #0
 800189a:	709a      	strb	r2, [r3, #2]
	istate_pressed[3] = 0;
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <SCH_GetInputs+0xf4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	70da      	strb	r2, [r3, #3]

	// Update the JPEG settings
	if (jpeg_quality != GetState(OP_CAMERA_QUALITY)) {
 80018a2:	2001      	movs	r0, #1
 80018a4:	f000 f83c 	bl	8001920 <GetState>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <SCH_GetInputs+0xfc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d009      	beq.n	80018c8 <SCH_GetInputs+0xdc>
		jpeg_quality = GetState(OP_CAMERA_QUALITY);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f000 f833 	bl	8001920 <GetState>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <SCH_GetInputs+0xfc>)
 80018c0:	701a      	strb	r2, [r3, #0]
		// Clear the screen
		ST7789_Clear(&hst7789);
 80018c2:	480a      	ldr	r0, [pc, #40]	@ (80018ec <SCH_GetInputs+0x100>)
 80018c4:	f001 fca6 	bl	8003214 <ST7789_Clear>
	}

}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	240009bc 	.word	0x240009bc
 80018d4:	24000000 	.word	0x24000000
 80018d8:	24000010 	.word	0x24000010
 80018dc:	240009b8 	.word	0x240009b8
 80018e0:	240009cc 	.word	0x240009cc
 80018e4:	240012c0 	.word	0x240012c0
 80018e8:	24026b5c 	.word	0x24026b5c
 80018ec:	240012dc 	.word	0x240012dc

080018f0 <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //

uint32_t DeltaTime(uint32_t start_t) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 80018f8:	f001 ff1a 	bl	8003730 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d204      	bcs.n	8001910 <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	e002      	b.n	8001916 <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	1ad3      	subs	r3, r2, r3
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <GetState>:

uint8_t GetState(uint8_t byte_num) {
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	if (byte_num >= 64) return 0;
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b3f      	cmp	r3, #63	@ 0x3f
 800192e:	d901      	bls.n	8001934 <GetState+0x14>
 8001930:	2300      	movs	r3, #0
 8001932:	e004      	b.n	800193e <GetState+0x1e>
	return hmenu.state_packet[byte_num];
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <GetState+0x2c>)
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	240012c0 	.word	0x240012c0

08001950 <HAL_UART_RxCpltCallback>:

// DEBUG FUNCTIONS

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	uint8_t ret = XBEE_RX_DMACallback(&hxbee);
 8001958:	4804      	ldr	r0, [pc, #16]	@ (800196c <HAL_UART_RxCpltCallback+0x1c>)
 800195a:	f015 fc5b 	bl	8017214 <XBEE_RX_DMACallback>
 800195e:	4603      	mov	r3, r0
 8001960:	73fb      	strb	r3, [r7, #15]
	if (ret) {
//		sprintf(ssd_msg, " PKT Err: %d", ret);
//		WriteDebug(ssd_msg, strlen(ssd_msg));
	}
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	24026b2c 	.word	0x24026b2c

08001970 <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT %d", hjpeg->OutDataLength);
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800197a:	2202      	movs	r2, #2
 800197c:	701a      	strb	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	240470e2 	.word	0x240470e2

08001990 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <HAL_JPEG_ErrorCallback+0x1c>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	240470e2 	.word	0x240470e2

080019b0 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	// Abort if it's too long
	if (OutDataLength > JPEG_MAX_WIDTH*JPEG_MAX_HEIGHT) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f64a 4280 	movw	r2, #44160	@ 0xac80
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d906      	bls.n	80019d4 <HAL_JPEG_DataReadyCallback+0x24>
		HAL_JPEG_Abort(hjpeg);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f009 fa04 	bl	800add4 <HAL_JPEG_Abort>
		jpeg_state = 2;
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
		return;
 80019d2:	e002      	b.n	80019da <HAL_JPEG_DataReadyCallback+0x2a>
	}

	jpeg_state = 2;
 80019d4:	4b02      	ldr	r3, [pc, #8]	@ (80019e0 <HAL_JPEG_DataReadyCallback+0x30>)
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
}
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	240470e2 	.word	0x240470e2

080019e4 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 80019ec:	4803      	ldr	r0, [pc, #12]	@ (80019fc <HAL_SPI_TxCpltCallback+0x18>)
 80019ee:	f001 fdfd 	bl	80035ec <ST7789_DMATransmitCplt>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	240012dc 	.word	0x240012dc

08001a00 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
//		// Accumulate the samples
//		// Have to pre-divide so the result fits in a uint16
//		adc_average[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
//	}

	for (int i = 0; i < 2; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e053      	b.n	8001ab6 <HAL_ADC_ConvCpltCallback+0xb6>

		adc_average[i] = adc_buffer[i]; // Skip the averaging process
 8001a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001acc <HAL_ADC_ConvCpltCallback+0xcc>)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a16:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	0bdb      	lsrs	r3, r3, #15
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	4a28      	ldr	r2, [pc, #160]	@ (8001ad4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	460a      	mov	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 8001a3c:	4a24      	ldr	r2, [pc, #144]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a44:	09db      	lsrs	r3, r3, #7
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b2d9      	uxtb	r1, r3
 8001a4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	460a      	mov	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 8001a54:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad4 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00a      	beq.n	8001a76 <HAL_ADC_ConvCpltCallback+0x76>
 8001a60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	b2d9      	uxtb	r1, r3
 8001a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	460a      	mov	r2, r1
 8001a74:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 8001a76:	4a18      	ldr	r2, [pc, #96]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <HAL_ADC_ConvCpltCallback+0xdc>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d204      	bcs.n	8001a90 <HAL_ADC_ConvCpltCallback+0x90>
			slider_magnitude[i] = 0;
 8001a86:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001a90:	4a11      	ldr	r2, [pc, #68]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dd04      	ble.n	8001ab0 <HAL_ADC_ConvCpltCallback+0xb0>
			slider_magnitude[i] = 0xFF;
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	22ff      	movs	r2, #255	@ 0xff
 8001aae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	dda8      	ble.n	8001a0e <HAL_ADC_ConvCpltCallback+0xe>

	}
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	24026af8 	.word	0x24026af8
 8001ad0:	24026b20 	.word	0x24026b20
 8001ad4:	24026b28 	.word	0x24026b28
 8001ad8:	24026b24 	.word	0x24026b24
 8001adc:	24000018 	.word	0x24000018
 8001ae0:	24000019 	.word	0x24000019
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <Draw_Slider>:

// ------------------------------------------------------------ DRAW COMMANDS -- //
void Draw_Slider(uint8_t slider_id) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b092      	sub	sp, #72	@ 0x48
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
	uint8_t byte_sel = slider_magnitude[slider_id] >> 5;					// Byte threshold
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4ab0      	ldr	r2, [pc, #704]	@ (8001db8 <Draw_Slider+0x2d0>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	095b      	lsrs	r3, r3, #5
 8001afa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t bit_sel = (slider_magnitude[slider_id] >> 2) & 0b00000111;		// Partial byte threshold
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4aad      	ldr	r2, [pc, #692]	@ (8001db8 <Draw_Slider+0x2d0>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t subbit_sel = (slider_magnitude[slider_id]) & 0b00000111;	// Fine control display
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	4aa9      	ldr	r2, [pc, #676]	@ (8001db8 <Draw_Slider+0x2d0>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	77fb      	strb	r3, [r7, #31]

	uint8_t slider_vram[8] = {0};
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]

	if (slider_direction[slider_id]) {
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4aa4      	ldr	r2, [pc, #656]	@ (8001dbc <Draw_Slider+0x2d4>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d036      	beq.n	8001b9e <Draw_Slider+0xb6>
		for (int i = 0; i < 8; i++) {
 8001b30:	2300      	movs	r3, #0
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b34:	e02f      	b.n	8001b96 <Draw_Slider+0xae>
			if (i < byte_sel) slider_vram[7-i] = 0xFF;	// Before partial byte, fill
 8001b36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	da07      	bge.n	8001b50 <Draw_Slider+0x68>
 8001b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	3348      	adds	r3, #72	@ 0x48
 8001b48:	443b      	add	r3, r7
 8001b4a:	22ff      	movs	r2, #255	@ 0xff
 8001b4c:	f803 2c38 	strb.w	r2, [r3, #-56]
			if (i > byte_sel) slider_vram[7-i] = 0x00;	// After partial byte, empty
 8001b50:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dd07      	ble.n	8001b6a <Draw_Slider+0x82>
 8001b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b5c:	f1c3 0307 	rsb	r3, r3, #7
 8001b60:	3348      	adds	r3, #72	@ 0x48
 8001b62:	443b      	add	r3, r7
 8001b64:	2200      	movs	r2, #0
 8001b66:	f803 2c38 	strb.w	r2, [r3, #-56]
			if (i == byte_sel) slider_vram[7-i] = 0xFF << (7-bit_sel);	// Partial byte
 8001b6a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d10d      	bne.n	8001b90 <Draw_Slider+0xa8>
 8001b74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b78:	f1c3 0307 	rsb	r3, r3, #7
 8001b7c:	22ff      	movs	r2, #255	@ 0xff
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	3348      	adds	r3, #72	@ 0x48
 8001b8a:	443b      	add	r3, r7
 8001b8c:	f803 2c38 	strb.w	r2, [r3, #-56]
		for (int i = 0; i < 8; i++) {
 8001b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b92:	3301      	adds	r3, #1
 8001b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b98:	2b07      	cmp	r3, #7
 8001b9a:	ddcc      	ble.n	8001b36 <Draw_Slider+0x4e>
 8001b9c:	e031      	b.n	8001c02 <Draw_Slider+0x11a>
		}
	} else {
		for (int i = 0; i < 8; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ba2:	e02b      	b.n	8001bfc <Draw_Slider+0x114>
			if (i < byte_sel) slider_vram[i] = 0xFF;
 8001ba4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001ba8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001baa:	429a      	cmp	r2, r3
 8001bac:	da05      	bge.n	8001bba <Draw_Slider+0xd2>
 8001bae:	f107 0210 	add.w	r2, r7, #16
 8001bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bb4:	4413      	add	r3, r2
 8001bb6:	22ff      	movs	r2, #255	@ 0xff
 8001bb8:	701a      	strb	r2, [r3, #0]
			if (i > byte_sel) slider_vram[i] = 0x00;
 8001bba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001bbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dd05      	ble.n	8001bd0 <Draw_Slider+0xe8>
 8001bc4:	f107 0210 	add.w	r2, r7, #16
 8001bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bca:	4413      	add	r3, r2
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
			if (i == byte_sel) slider_vram[i] = 0xFF >> (7-bit_sel);
 8001bd0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001bd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d10d      	bne.n	8001bf6 <Draw_Slider+0x10e>
 8001bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	22ff      	movs	r2, #255	@ 0xff
 8001be4:	fa42 f303 	asr.w	r3, r2, r3
 8001be8:	b2d9      	uxtb	r1, r3
 8001bea:	f107 0210 	add.w	r2, r7, #16
 8001bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf0:	4413      	add	r3, r2
 8001bf2:	460a      	mov	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8001bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bfe:	2b07      	cmp	r3, #7
 8001c00:	ddd0      	ble.n	8001ba4 <Draw_Slider+0xbc>
		}
	}

	uint8_t slider_str[4] = {0};
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
	sprintf(slider_str, "%03d", (uint8_t)(slider_magnitude[slider_id] / 2.55));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	4a6b      	ldr	r2, [pc, #428]	@ (8001db8 <Draw_Slider+0x2d0>)
 8001c0a:	5cd3      	ldrb	r3, [r2, r3]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c14:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001db0 <Draw_Slider+0x2c8>
 8001c18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c20:	edc7 7a00 	vstr	s15, [r7]
 8001c24:	783b      	ldrb	r3, [r7, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	4964      	ldr	r1, [pc, #400]	@ (8001dc0 <Draw_Slider+0x2d8>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f018 fea7 	bl	801a984 <siprintf>

	if (slider_id == 0) {
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 80f4 	bne.w	8001e26 <Draw_Slider+0x33e>
		uint16_t curs = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	837b      	strh	r3, [r7, #26]
		for (int y = 0; y < 8; y++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c46:	e02f      	b.n	8001ca8 <Draw_Slider+0x1c0>
			for (int x = 3; x < 8; x++)
 8001c48:	2303      	movs	r3, #3
 8001c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c4c:	e00f      	b.n	8001c6e <Draw_Slider+0x186>
				ssd1_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 8001c4e:	8b7a      	ldrh	r2, [r7, #26]
 8001c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c52:	01db      	lsls	r3, r3, #7
 8001c54:	441a      	add	r2, r3
 8001c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c58:	4413      	add	r3, r2
 8001c5a:	f107 0110 	add.w	r1, r7, #16
 8001c5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c60:	440a      	add	r2, r1
 8001c62:	7811      	ldrb	r1, [r2, #0]
 8001c64:	4a57      	ldr	r2, [pc, #348]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001c66:	54d1      	strb	r1, [r2, r3]
			for (int x = 3; x < 8; x++)
 8001c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c70:	2b07      	cmp	r3, #7
 8001c72:	ddec      	ble.n	8001c4e <Draw_Slider+0x166>
			ssd1_vram[curs + y*128 + 0] = 0x80 >> subbit_sel;	// Set the fine control disp.
 8001c74:	7ffb      	ldrb	r3, [r7, #31]
 8001c76:	2280      	movs	r2, #128	@ 0x80
 8001c78:	fa42 f103 	asr.w	r1, r2, r3
 8001c7c:	8b7a      	ldrh	r2, [r7, #26]
 8001c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c80:	01db      	lsls	r3, r3, #7
 8001c82:	4413      	add	r3, r2
 8001c84:	b2c9      	uxtb	r1, r1
 8001c86:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001c88:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[curs + y*128 + 1] = 0x80 >> subbit_sel;
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	2280      	movs	r2, #128	@ 0x80
 8001c8e:	fa42 f103 	asr.w	r1, r2, r3
 8001c92:	8b7a      	ldrh	r2, [r7, #26]
 8001c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c96:	01db      	lsls	r3, r3, #7
 8001c98:	4413      	add	r3, r2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b2c9      	uxtb	r1, r1
 8001c9e:	4a49      	ldr	r2, [pc, #292]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001ca0:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 8001ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001caa:	2b07      	cmp	r3, #7
 8001cac:	ddcc      	ble.n	8001c48 <Draw_Slider+0x160>
		}
		hssd1.str_cursor = 10;
 8001cae:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <Draw_Slider+0x2e0>)
 8001cb0:	220a      	movs	r2, #10
 8001cb2:	821a      	strh	r2, [r3, #16]
		hssd1.draw_inverted = 1;
 8001cb4:	4b44      	ldr	r3, [pc, #272]	@ (8001dc8 <Draw_Slider+0x2e0>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	749a      	strb	r2, [r3, #18]
		SSD1306_DrawString(&hssd1, slider_str, strlen(slider_str));
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fb0e 	bl	80002e0 <strlen>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4619      	mov	r1, r3
 8001cce:	483e      	ldr	r0, [pc, #248]	@ (8001dc8 <Draw_Slider+0x2e0>)
 8001cd0:	f001 f908 	bl	8002ee4 <SSD1306_DrawString>
		hssd1.draw_inverted = 0;
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc8 <Draw_Slider+0x2e0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	749a      	strb	r2, [r3, #18]

		// Draw the strip on top
		for (uint8_t i = 10; i <= 128; i++) {
 8001cda:	230a      	movs	r3, #10
 8001cdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001ce0:	e018      	b.n	8001d14 <Draw_Slider+0x22c>
			if (i%2 == 0)
 8001ce2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <Draw_Slider+0x216>
				ssd1_vram[128 + i] = 0b00010110;
 8001cf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cf4:	3380      	adds	r3, #128	@ 0x80
 8001cf6:	4a33      	ldr	r2, [pc, #204]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001cf8:	2116      	movs	r1, #22
 8001cfa:	54d1      	strb	r1, [r2, r3]
 8001cfc:	e005      	b.n	8001d0a <Draw_Slider+0x222>
			else
				ssd1_vram[128 + i] = 0b00001110;
 8001cfe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d02:	3380      	adds	r3, #128	@ 0x80
 8001d04:	4a2f      	ldr	r2, [pc, #188]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001d06:	210e      	movs	r1, #14
 8001d08:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 10; i <= 128; i++) {
 8001d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001d14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d18:	2b80      	cmp	r3, #128	@ 0x80
 8001d1a:	d9e2      	bls.n	8001ce2 <Draw_Slider+0x1fa>
		}

		// Pad the inverted number
		ssd1_vram[10] = 0xFF;
 8001d1c:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001d1e:	22ff      	movs	r2, #255	@ 0xff
 8001d20:	729a      	strb	r2, [r3, #10]
		ssd1_vram[29] = 0xFF;
 8001d22:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001d24:	22ff      	movs	r2, #255	@ 0xff
 8001d26:	775a      	strb	r2, [r3, #29]
		for (uint8_t i = 10; i < 30; i++) {
 8001d28:	230a      	movs	r3, #10
 8001d2a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001d2e:	e011      	b.n	8001d54 <Draw_Slider+0x26c>
			ssd1_vram[128 + i] |= 0b00000011;
 8001d30:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d34:	3380      	adds	r3, #128	@ 0x80
 8001d36:	4a23      	ldr	r2, [pc, #140]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001d38:	5cd2      	ldrb	r2, [r2, r3]
 8001d3a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d3e:	3380      	adds	r3, #128	@ 0x80
 8001d40:	f042 0203 	orr.w	r2, r2, #3
 8001d44:	b2d1      	uxtb	r1, r2
 8001d46:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001d48:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 10; i < 30; i++) {
 8001d4a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001d54:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d58:	2b1d      	cmp	r3, #29
 8001d5a:	d9e9      	bls.n	8001d30 <Draw_Slider+0x248>
		}

		// Draw the cool bars
		for (uint8_t i = 0; i <= 4; i++) {
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001d62:	e01e      	b.n	8001da2 <Draw_Slider+0x2ba>
			ssd1_vram[30+i*2] = 0xFF << i;
 8001d64:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d68:	22ff      	movs	r2, #255	@ 0xff
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d70:	330f      	adds	r3, #15
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	b2d1      	uxtb	r1, r2
 8001d76:	4a13      	ldr	r2, [pc, #76]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001d78:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[30+i*2 + 128] |= 0b00000011;
 8001d7a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d7e:	334f      	adds	r3, #79	@ 0x4f
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001d84:	5cd2      	ldrb	r2, [r2, r3]
 8001d86:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d8a:	334f      	adds	r3, #79	@ 0x4f
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	f042 0203 	orr.w	r2, r2, #3
 8001d92:	b2d1      	uxtb	r1, r2
 8001d94:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc4 <Draw_Slider+0x2dc>)
 8001d96:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 4; i++) {
 8001d98:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001da2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d9dc      	bls.n	8001d64 <Draw_Slider+0x27c>
		}

		for (uint16_t i = 1; i <= 7; i++) {
 8001daa:	2301      	movs	r3, #1
 8001dac:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001dae:	e036      	b.n	8001e1e <Draw_Slider+0x336>
 8001db0:	66666666 	.word	0x66666666
 8001db4:	40046666 	.word	0x40046666
 8001db8:	24026b24 	.word	0x24026b24
 8001dbc:	24026b28 	.word	0x24026b28
 8001dc0:	0801b228 	.word	0x0801b228
 8001dc4:	240009f8 	.word	0x240009f8
 8001dc8:	240009d0 	.word	0x240009d0
			ssd1_vram[i*128 + 10] = 0xFF;
 8001dcc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001dce:	01db      	lsls	r3, r3, #7
 8001dd0:	330a      	adds	r3, #10
 8001dd2:	4a8c      	ldr	r2, [pc, #560]	@ (8002004 <Draw_Slider+0x51c>)
 8001dd4:	21ff      	movs	r1, #255	@ 0xff
 8001dd6:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 11] = 0xFF;
 8001dd8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001dda:	01db      	lsls	r3, r3, #7
 8001ddc:	330b      	adds	r3, #11
 8001dde:	4a89      	ldr	r2, [pc, #548]	@ (8002004 <Draw_Slider+0x51c>)
 8001de0:	21ff      	movs	r1, #255	@ 0xff
 8001de2:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 12] |= 0x55;
 8001de4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001de6:	01db      	lsls	r3, r3, #7
 8001de8:	330c      	adds	r3, #12
 8001dea:	4a86      	ldr	r2, [pc, #536]	@ (8002004 <Draw_Slider+0x51c>)
 8001dec:	5cd2      	ldrb	r2, [r2, r3]
 8001dee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001df0:	01db      	lsls	r3, r3, #7
 8001df2:	330c      	adds	r3, #12
 8001df4:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8001df8:	b2d1      	uxtb	r1, r2
 8001dfa:	4a82      	ldr	r2, [pc, #520]	@ (8002004 <Draw_Slider+0x51c>)
 8001dfc:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[i*128 + 13] |= 0xAA;
 8001dfe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	330d      	adds	r3, #13
 8001e04:	4a7f      	ldr	r2, [pc, #508]	@ (8002004 <Draw_Slider+0x51c>)
 8001e06:	5cd2      	ldrb	r2, [r2, r3]
 8001e08:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e0a:	01db      	lsls	r3, r3, #7
 8001e0c:	330d      	adds	r3, #13
 8001e0e:	f062 0255 	orn	r2, r2, #85	@ 0x55
 8001e12:	b2d1      	uxtb	r1, r2
 8001e14:	4a7b      	ldr	r2, [pc, #492]	@ (8002004 <Draw_Slider+0x51c>)
 8001e16:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 1; i <= 7; i++) {
 8001e18:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001e1e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001e20:	2b07      	cmp	r3, #7
 8001e22:	d9d3      	bls.n	8001dcc <Draw_Slider+0x2e4>
			ssd2_vram[i*128 + 117] = 0xFF;
			ssd2_vram[i*128 + 116] |= 0x55;
			ssd2_vram[i*128 + 115] |= 0xAA;
		}
	}
}
 8001e24:	e0ea      	b.n	8001ffc <Draw_Slider+0x514>
		uint16_t curs = 120;
 8001e26:	2378      	movs	r3, #120	@ 0x78
 8001e28:	83bb      	strh	r3, [r7, #28]
		for (int y = 0; y < 8; y++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e2e:	e030      	b.n	8001e92 <Draw_Slider+0x3aa>
			for (int x = 0; x < 5; x++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e34:	e00f      	b.n	8001e56 <Draw_Slider+0x36e>
				ssd2_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 8001e36:	8bba      	ldrh	r2, [r7, #28]
 8001e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e3a:	01db      	lsls	r3, r3, #7
 8001e3c:	441a      	add	r2, r3
 8001e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e40:	4413      	add	r3, r2
 8001e42:	f107 0110 	add.w	r1, r7, #16
 8001e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e48:	440a      	add	r2, r1
 8001e4a:	7811      	ldrb	r1, [r2, #0]
 8001e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002008 <Draw_Slider+0x520>)
 8001e4e:	54d1      	strb	r1, [r2, r3]
			for (int x = 0; x < 5; x++)
 8001e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e52:	3301      	adds	r3, #1
 8001e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	ddec      	ble.n	8001e36 <Draw_Slider+0x34e>
			ssd2_vram[curs + y*128 + 6] = 0x80 >> subbit_sel;	// Set the fine control disp.
 8001e5c:	7ffb      	ldrb	r3, [r7, #31]
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	fa42 f103 	asr.w	r1, r2, r3
 8001e64:	8bba      	ldrh	r2, [r7, #28]
 8001e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e68:	01db      	lsls	r3, r3, #7
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3306      	adds	r3, #6
 8001e6e:	b2c9      	uxtb	r1, r1
 8001e70:	4a65      	ldr	r2, [pc, #404]	@ (8002008 <Draw_Slider+0x520>)
 8001e72:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[curs + y*128 + 7] = 0x80 >> subbit_sel;
 8001e74:	7ffb      	ldrb	r3, [r7, #31]
 8001e76:	2280      	movs	r2, #128	@ 0x80
 8001e78:	fa42 f103 	asr.w	r1, r2, r3
 8001e7c:	8bba      	ldrh	r2, [r7, #28]
 8001e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e80:	01db      	lsls	r3, r3, #7
 8001e82:	4413      	add	r3, r2
 8001e84:	3307      	adds	r3, #7
 8001e86:	b2c9      	uxtb	r1, r1
 8001e88:	4a5f      	ldr	r2, [pc, #380]	@ (8002008 <Draw_Slider+0x520>)
 8001e8a:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 8001e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8e:	3301      	adds	r3, #1
 8001e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e94:	2b07      	cmp	r3, #7
 8001e96:	ddcb      	ble.n	8001e30 <Draw_Slider+0x348>
		hssd2.str_cursor = 98;
 8001e98:	4b5c      	ldr	r3, [pc, #368]	@ (800200c <Draw_Slider+0x524>)
 8001e9a:	2262      	movs	r2, #98	@ 0x62
 8001e9c:	821a      	strh	r2, [r3, #16]
		hssd2.draw_inverted = 1;
 8001e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800200c <Draw_Slider+0x524>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	749a      	strb	r2, [r3, #18]
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fa19 	bl	80002e0 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4854      	ldr	r0, [pc, #336]	@ (800200c <Draw_Slider+0x524>)
 8001eba:	f001 f813 	bl	8002ee4 <SSD1306_DrawString>
		hssd2.draw_inverted = 0;
 8001ebe:	4b53      	ldr	r3, [pc, #332]	@ (800200c <Draw_Slider+0x524>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	749a      	strb	r2, [r3, #18]
		for (uint8_t i = 0; i <= 128-10; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001eca:	e018      	b.n	8001efe <Draw_Slider+0x416>
			if (i%2 == 0)
 8001ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <Draw_Slider+0x400>
				ssd2_vram[128 + i] = 0b00010110;
 8001eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ede:	3380      	adds	r3, #128	@ 0x80
 8001ee0:	4a49      	ldr	r2, [pc, #292]	@ (8002008 <Draw_Slider+0x520>)
 8001ee2:	2116      	movs	r1, #22
 8001ee4:	54d1      	strb	r1, [r2, r3]
 8001ee6:	e005      	b.n	8001ef4 <Draw_Slider+0x40c>
				ssd2_vram[128 + i] = 0b00001110;
 8001ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eec:	3380      	adds	r3, #128	@ 0x80
 8001eee:	4a46      	ldr	r2, [pc, #280]	@ (8002008 <Draw_Slider+0x520>)
 8001ef0:	210e      	movs	r1, #14
 8001ef2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 128-10; i++) {
 8001ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f02:	2b76      	cmp	r3, #118	@ 0x76
 8001f04:	d9e2      	bls.n	8001ecc <Draw_Slider+0x3e4>
		ssd2_vram[128-10] = 0xFF;
 8001f06:	4b40      	ldr	r3, [pc, #256]	@ (8002008 <Draw_Slider+0x520>)
 8001f08:	22ff      	movs	r2, #255	@ 0xff
 8001f0a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
		ssd2_vram[128-11] = 0xFF;
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002008 <Draw_Slider+0x520>)
 8001f10:	22ff      	movs	r2, #255	@ 0xff
 8001f12:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
		for (uint8_t i = 128-30; i < 128-10; i++) {
 8001f16:	2362      	movs	r3, #98	@ 0x62
 8001f18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f1c:	e011      	b.n	8001f42 <Draw_Slider+0x45a>
			ssd2_vram[128 + i] |= 0b00000011;
 8001f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f22:	3380      	adds	r3, #128	@ 0x80
 8001f24:	4a38      	ldr	r2, [pc, #224]	@ (8002008 <Draw_Slider+0x520>)
 8001f26:	5cd2      	ldrb	r2, [r2, r3]
 8001f28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f2c:	3380      	adds	r3, #128	@ 0x80
 8001f2e:	f042 0203 	orr.w	r2, r2, #3
 8001f32:	b2d1      	uxtb	r1, r2
 8001f34:	4a34      	ldr	r2, [pc, #208]	@ (8002008 <Draw_Slider+0x520>)
 8001f36:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 128-30; i < 128-10; i++) {
 8001f38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f46:	2b75      	cmp	r3, #117	@ 0x75
 8001f48:	d9e9      	bls.n	8001f1e <Draw_Slider+0x436>
		for (uint8_t i = 0; i <= 4; i++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001f50:	e021      	b.n	8001f96 <Draw_Slider+0x4ae>
			ssd2_vram[128 - (30+i*2)] = 0xFF << i;
 8001f52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f56:	22ff      	movs	r2, #255	@ 0xff
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f5e:	f1c3 0331 	rsb	r3, r3, #49	@ 0x31
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	b2d1      	uxtb	r1, r2
 8001f66:	4a28      	ldr	r2, [pc, #160]	@ (8002008 <Draw_Slider+0x520>)
 8001f68:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[128 - (30+i*2) + 128] |= 0b00000011;
 8001f6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f6e:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4a24      	ldr	r2, [pc, #144]	@ (8002008 <Draw_Slider+0x520>)
 8001f76:	5cd2      	ldrb	r2, [r2, r3]
 8001f78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f7c:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	f042 0203 	orr.w	r2, r2, #3
 8001f86:	b2d1      	uxtb	r1, r2
 8001f88:	4a1f      	ldr	r2, [pc, #124]	@ (8002008 <Draw_Slider+0x520>)
 8001f8a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i <= 4; i++) {
 8001f8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f90:	3301      	adds	r3, #1
 8001f92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001f96:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d9d9      	bls.n	8001f52 <Draw_Slider+0x46a>
		for (uint16_t i = 1; i <= 7; i++) {
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001fa2:	e028      	b.n	8001ff6 <Draw_Slider+0x50e>
			ssd2_vram[i*128 + 118] = 0xFF;
 8001fa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	3376      	adds	r3, #118	@ 0x76
 8001faa:	4a17      	ldr	r2, [pc, #92]	@ (8002008 <Draw_Slider+0x520>)
 8001fac:	21ff      	movs	r1, #255	@ 0xff
 8001fae:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 117] = 0xFF;
 8001fb0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fb2:	01db      	lsls	r3, r3, #7
 8001fb4:	3375      	adds	r3, #117	@ 0x75
 8001fb6:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <Draw_Slider+0x520>)
 8001fb8:	21ff      	movs	r1, #255	@ 0xff
 8001fba:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 116] |= 0x55;
 8001fbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fbe:	01db      	lsls	r3, r3, #7
 8001fc0:	3374      	adds	r3, #116	@ 0x74
 8001fc2:	4a11      	ldr	r2, [pc, #68]	@ (8002008 <Draw_Slider+0x520>)
 8001fc4:	5cd2      	ldrb	r2, [r2, r3]
 8001fc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fc8:	01db      	lsls	r3, r3, #7
 8001fca:	3374      	adds	r3, #116	@ 0x74
 8001fcc:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8001fd0:	b2d1      	uxtb	r1, r2
 8001fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <Draw_Slider+0x520>)
 8001fd4:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[i*128 + 115] |= 0xAA;
 8001fd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fd8:	01db      	lsls	r3, r3, #7
 8001fda:	3373      	adds	r3, #115	@ 0x73
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <Draw_Slider+0x520>)
 8001fde:	5cd2      	ldrb	r2, [r2, r3]
 8001fe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fe2:	01db      	lsls	r3, r3, #7
 8001fe4:	3373      	adds	r3, #115	@ 0x73
 8001fe6:	f062 0255 	orn	r2, r2, #85	@ 0x55
 8001fea:	b2d1      	uxtb	r1, r2
 8001fec:	4a06      	ldr	r2, [pc, #24]	@ (8002008 <Draw_Slider+0x520>)
 8001fee:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 1; i <= 7; i++) {
 8001ff0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001ff6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ff8:	2b07      	cmp	r3, #7
 8001ffa:	d9d3      	bls.n	8001fa4 <Draw_Slider+0x4bc>
}
 8001ffc:	bf00      	nop
 8001ffe:	3748      	adds	r7, #72	@ 0x48
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	240009f8 	.word	0x240009f8
 8002008:	24000df8 	.word	0x24000df8
 800200c:	240009e4 	.word	0x240009e4

08002010 <WriteDebug>:

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 800201c:	480d      	ldr	r0, [pc, #52]	@ (8002054 <WriteDebug+0x44>)
 800201e:	f000 fec1 	bl	8002da4 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8002022:	480d      	ldr	r0, [pc, #52]	@ (8002058 <WriteDebug+0x48>)
 8002024:	f000 febe 	bl	8002da4 <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	461a      	mov	r2, r3
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4809      	ldr	r0, [pc, #36]	@ (8002054 <WriteDebug+0x44>)
 8002030:	f000 ff58 	bl	8002ee4 <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	461a      	mov	r2, r3
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4807      	ldr	r0, [pc, #28]	@ (8002058 <WriteDebug+0x48>)
 800203c:	f000 ff52 	bl	8002ee4 <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 8002040:	4804      	ldr	r0, [pc, #16]	@ (8002054 <WriteDebug+0x44>)
 8002042:	f000 fec3 	bl	8002dcc <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8002046:	4804      	ldr	r0, [pc, #16]	@ (8002058 <WriteDebug+0x48>)
 8002048:	f000 fec0 	bl	8002dcc <SSD1306_Update>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	240009d0 	.word	0x240009d0
 8002058:	240009e4 	.word	0x240009e4

0800205c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002062:	463b      	mov	r3, r7
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800206e:	f002 ff5d 	bl	8004f2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002072:	2301      	movs	r3, #1
 8002074:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002076:	2300      	movs	r3, #0
 8002078:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800207e:	231f      	movs	r3, #31
 8002080:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002082:	2387      	movs	r3, #135	@ 0x87
 8002084:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002086:	2300      	movs	r3, #0
 8002088:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800208a:	2300      	movs	r3, #0
 800208c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800208e:	2301      	movs	r3, #1
 8002090:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002092:	2301      	movs	r3, #1
 8002094:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800209e:	463b      	mov	r3, r7
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 ff7b 	bl	8004f9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80020a6:	2004      	movs	r0, #4
 80020a8:	f002 ff58 	bl	8004f5c <HAL_MPU_Enable>

}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020b8:	b672      	cpsid	i
}
 80020ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <Error_Handler+0x8>

080020c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <HAL_MspInit+0x30>)
 80020c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020cc:	4a08      	ldr	r2, [pc, #32]	@ (80020f0 <HAL_MspInit+0x30>)
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_MspInit+0x30>)
 80020d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	58024400 	.word	0x58024400

080020f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	@ 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a3e      	ldr	r2, [pc, #248]	@ (800220c <HAL_ADC_MspInit+0x118>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d175      	bne.n	8002202 <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002116:	4b3e      	ldr	r3, [pc, #248]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 8002118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800211c:	4a3c      	ldr	r2, [pc, #240]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 800211e:	f043 0320 	orr.w	r3, r3, #32
 8002122:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002126:	4b3a      	ldr	r3, [pc, #232]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 8002128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213a:	4a35      	ldr	r2, [pc, #212]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002144:	4b32      	ldr	r3, [pc, #200]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002158:	4a2d      	ldr	r2, [pc, #180]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002162:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <HAL_ADC_MspInit+0x11c>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8002170:	2340      	movs	r3, #64	@ 0x40
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002174:	2303      	movs	r3, #3
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4824      	ldr	r0, [pc, #144]	@ (8002214 <HAL_ADC_MspInit+0x120>)
 8002184:	f005 fda0 	bl	8007cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8002188:	2310      	movs	r3, #16
 800218a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218c:	2303      	movs	r3, #3
 800218e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	481f      	ldr	r0, [pc, #124]	@ (8002218 <HAL_ADC_MspInit+0x124>)
 800219c:	f005 fd94 	bl	8007cc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 80021a0:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <HAL_ADC_MspInit+0x12c>)
 80021a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021a8:	2209      	movs	r2, #9
 80021aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021e6:	480d      	ldr	r0, [pc, #52]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021e8:	f002 ff18 	bl	800501c <HAL_DMA_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80021f2:	f7ff ff5f 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a08      	ldr	r2, [pc, #32]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80021fc:	4a07      	ldr	r2, [pc, #28]	@ (800221c <HAL_ADC_MspInit+0x128>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000
 8002210:	58024400 	.word	0x58024400
 8002214:	58020000 	.word	0x58020000
 8002218:	58020800 	.word	0x58020800
 800221c:	24000414 	.word	0x24000414
 8002220:	40020058 	.word	0x40020058

08002224 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	@ 0x30
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a73      	ldr	r2, [pc, #460]	@ (8002410 <HAL_I2C_MspInit+0x1ec>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d16d      	bne.n	8002322 <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	4b73      	ldr	r3, [pc, #460]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800224c:	4a71      	ldr	r2, [pc, #452]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002256:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 8002258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002264:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226a:	2312      	movs	r3, #18
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002276:	2304      	movs	r3, #4
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	4865      	ldr	r0, [pc, #404]	@ (8002418 <HAL_I2C_MspInit+0x1f4>)
 8002282:	f005 fd21 	bl	8007cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002286:	4b63      	ldr	r3, [pc, #396]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 8002288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800228c:	4a61      	ldr	r2, [pc, #388]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 800228e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002292:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002296:	4b5f      	ldr	r3, [pc, #380]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 8002298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 80022a4:	4b5d      	ldr	r3, [pc, #372]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002420 <HAL_I2C_MspInit+0x1fc>)
 80022a8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80022aa:	4b5c      	ldr	r3, [pc, #368]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022ac:	2222      	movs	r2, #34	@ 0x22
 80022ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022b0:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022b2:	2240      	movs	r2, #64	@ 0x40
 80022b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b6:	4b59      	ldr	r3, [pc, #356]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022bc:	4b57      	ldr	r3, [pc, #348]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022c4:	4b55      	ldr	r3, [pc, #340]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ca:	4b54      	ldr	r3, [pc, #336]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80022d0:	4b52      	ldr	r3, [pc, #328]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80022d6:	4b51      	ldr	r3, [pc, #324]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022dc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022de:	4b4f      	ldr	r3, [pc, #316]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80022e4:	484d      	ldr	r0, [pc, #308]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022e6:	f002 fe99 	bl	800501c <HAL_DMA_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80022f0:	f7ff fee0 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a49      	ldr	r2, [pc, #292]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80022fa:	4a48      	ldr	r2, [pc, #288]	@ (800241c <HAL_I2C_MspInit+0x1f8>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	201f      	movs	r0, #31
 8002306:	f002 fddc 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800230a:	201f      	movs	r0, #31
 800230c:	f002 fdf3 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	2020      	movs	r0, #32
 8002316:	f002 fdd4 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800231a:	2020      	movs	r0, #32
 800231c:	f002 fdeb 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002320:	e071      	b.n	8002406 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a3f      	ldr	r2, [pc, #252]	@ (8002424 <HAL_I2C_MspInit+0x200>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d16c      	bne.n	8002406 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	4b39      	ldr	r3, [pc, #228]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 800232e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002332:	4a38      	ldr	r2, [pc, #224]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800233c:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800234a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002350:	2312      	movs	r3, #18
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	2301      	movs	r3, #1
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800235c:	2304      	movs	r3, #4
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	482c      	ldr	r0, [pc, #176]	@ (8002418 <HAL_I2C_MspInit+0x1f4>)
 8002368:	f005 fcae 	bl	8007cc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800236c:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 800236e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002372:	4a28      	ldr	r2, [pc, #160]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 8002374:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002378:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800237c:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <HAL_I2C_MspInit+0x1f0>)
 800237e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800238a:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 800238c:	4a27      	ldr	r2, [pc, #156]	@ (800242c <HAL_I2C_MspInit+0x208>)
 800238e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 8002392:	2224      	movs	r2, #36	@ 0x24
 8002394:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002396:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 8002398:	2240      	movs	r2, #64	@ 0x40
 800239a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023a2:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023a8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023c2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023c4:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80023ca:	4817      	ldr	r0, [pc, #92]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023cc:	f002 fe26 	bl	800501c <HAL_DMA_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 80023d6:	f7ff fe6d 	bl	80020b4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023de:	639a      	str	r2, [r3, #56]	@ 0x38
 80023e0:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <HAL_I2C_MspInit+0x204>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2021      	movs	r0, #33	@ 0x21
 80023ec:	f002 fd69 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80023f0:	2021      	movs	r0, #33	@ 0x21
 80023f2:	f002 fd80 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2022      	movs	r0, #34	@ 0x22
 80023fc:	f002 fd61 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002400:	2022      	movs	r0, #34	@ 0x22
 8002402:	f002 fd78 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
}
 8002406:	bf00      	nop
 8002408:	3730      	adds	r7, #48	@ 0x30
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40005400 	.word	0x40005400
 8002414:	58024400 	.word	0x58024400
 8002418:	58020400 	.word	0x58020400
 800241c:	24000534 	.word	0x24000534
 8002420:	40020040 	.word	0x40020040
 8002424:	40005800 	.word	0x40005800
 8002428:	240005ac 	.word	0x240005ac
 800242c:	40020028 	.word	0x40020028

08002430 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a55      	ldr	r2, [pc, #340]	@ (8002594 <HAL_JPEG_MspInit+0x164>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f040 80a3 	bne.w	800258a <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8002444:	4b54      	ldr	r3, [pc, #336]	@ (8002598 <HAL_JPEG_MspInit+0x168>)
 8002446:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800244a:	4a53      	ldr	r2, [pc, #332]	@ (8002598 <HAL_JPEG_MspInit+0x168>)
 800244c:	f043 0320 	orr.w	r3, r3, #32
 8002450:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002454:	4b50      	ldr	r3, [pc, #320]	@ (8002598 <HAL_JPEG_MspInit+0x168>)
 8002456:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8002462:	4b4e      	ldr	r3, [pc, #312]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 8002464:	4a4e      	ldr	r2, [pc, #312]	@ (80025a0 <HAL_JPEG_MspInit+0x170>)
 8002466:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8002468:	4b4c      	ldr	r3, [pc, #304]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 800246a:	2211      	movs	r2, #17
 800246c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800246e:	4b4b      	ldr	r3, [pc, #300]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002474:	4b49      	ldr	r3, [pc, #292]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 8002476:	2240      	movs	r2, #64	@ 0x40
 8002478:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800247a:	4b48      	ldr	r3, [pc, #288]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8002480:	4b46      	ldr	r3, [pc, #280]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 8002482:	2202      	movs	r2, #2
 8002484:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8002486:	4b45      	ldr	r3, [pc, #276]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 800248c:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8002492:	4b42      	ldr	r3, [pc, #264]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 8002494:	2280      	movs	r2, #128	@ 0x80
 8002496:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002498:	4b40      	ldr	r3, [pc, #256]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 800249a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80024a0:	4b3e      	ldr	r3, [pc, #248]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024a2:	2220      	movs	r2, #32
 80024a4:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80024a6:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80024ac:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 80024b2:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80024b8:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80024be:	4837      	ldr	r0, [pc, #220]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024c0:	f00a f9d4 	bl	800c86c <HAL_MDMA_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 80024ca:	f7ff fdf3 	bl	80020b4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	4832      	ldr	r0, [pc, #200]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024d4:	f00a fa16 	bl	800c904 <HAL_MDMA_ConfigPostRequestMask>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 80024de:	f7ff fde9 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a2d      	ldr	r2, [pc, #180]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024e8:	4a2c      	ldr	r2, [pc, #176]	@ (800259c <HAL_JPEG_MspInit+0x16c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 80024ee:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 80024f0:	4a2d      	ldr	r2, [pc, #180]	@ (80025a8 <HAL_JPEG_MspInit+0x178>)
 80024f2:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 80024f4:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 80024f6:	2214      	movs	r2, #20
 80024f8:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80024fa:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002502:	2240      	movs	r2, #64	@ 0x40
 8002504:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002506:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 800250c:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8002512:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002514:	2208      	movs	r2, #8
 8002516:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8002518:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 800251a:	2220      	movs	r2, #32
 800251c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800251e:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002526:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 800252e:	2204      	movs	r2, #4
 8002530:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002532:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002534:	2200      	movs	r2, #0
 8002536:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 800253a:	2200      	movs	r2, #0
 800253c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 800253e:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002540:	2200      	movs	r2, #0
 8002542:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8002544:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002546:	2200      	movs	r2, #0
 8002548:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 800254a:	4816      	ldr	r0, [pc, #88]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 800254c:	f00a f98e 	bl	800c86c <HAL_MDMA_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8002556:	f7ff fdad 	bl	80020b4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	4811      	ldr	r0, [pc, #68]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002560:	f00a f9d0 	bl	800c904 <HAL_MDMA_ConfigPostRequestMask>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 800256a:	f7ff fda3 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0c      	ldr	r2, [pc, #48]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34
 8002574:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <HAL_JPEG_MspInit+0x174>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2079      	movs	r0, #121	@ 0x79
 8002580:	f002 fc9f 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002584:	2079      	movs	r0, #121	@ 0x79
 8002586:	f002 fcb6 	bl	8004ef6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	52003000 	.word	0x52003000
 8002598:	58024400 	.word	0x58024400
 800259c:	2400067c 	.word	0x2400067c
 80025a0:	52000040 	.word	0x52000040
 80025a4:	240006e8 	.word	0x240006e8
 80025a8:	52000080 	.word	0x52000080

080025ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0ba      	sub	sp, #232	@ 0xe8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	22c0      	movs	r2, #192	@ 0xc0
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f018 f9fb 	bl	801a9c8 <memset>
  if(hspi->Instance==SPI4)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a54      	ldr	r2, [pc, #336]	@ (8002728 <HAL_SPI_MspInit+0x17c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	f040 80a1 	bne.w	8002720 <HAL_SPI_MspInit+0x174>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80025de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 80025ea:	2310      	movs	r3, #16
 80025ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 80;
 80025f2:	2350      	movs	r3, #80	@ 0x50
 80025f4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80025f6:	2302      	movs	r3, #2
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80025fa:	2302      	movs	r3, #2
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80025fe:	2300      	movs	r3, #0
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002602:	2300      	movs	r3, #0
 8002604:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800260a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800260e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	4618      	mov	r0, r3
 8002616:	f00c fff7 	bl	800f608 <HAL_RCCEx_PeriphCLKConfig>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8002620:	f7ff fd48 	bl	80020b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002624:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_SPI_MspInit+0x180>)
 8002626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800262a:	4a40      	ldr	r2, [pc, #256]	@ (800272c <HAL_SPI_MspInit+0x180>)
 800262c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002630:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002634:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <HAL_SPI_MspInit+0x180>)
 8002636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800263a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002642:	4b3a      	ldr	r3, [pc, #232]	@ (800272c <HAL_SPI_MspInit+0x180>)
 8002644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002648:	4a38      	ldr	r2, [pc, #224]	@ (800272c <HAL_SPI_MspInit+0x180>)
 800264a:	f043 0310 	orr.w	r3, r3, #16
 800264e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002652:	4b36      	ldr	r3, [pc, #216]	@ (800272c <HAL_SPI_MspInit+0x180>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002660:	2344      	movs	r3, #68	@ 0x44
 8002662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002678:	2305      	movs	r3, #5
 800267a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800267e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002682:	4619      	mov	r1, r3
 8002684:	482a      	ldr	r0, [pc, #168]	@ (8002730 <HAL_SPI_MspInit+0x184>)
 8002686:	f005 fb1f 	bl	8007cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800268a:	2310      	movs	r3, #16
 800268c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80026a2:	2305      	movs	r3, #5
 80026a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026ac:	4619      	mov	r1, r3
 80026ae:	4820      	ldr	r0, [pc, #128]	@ (8002730 <HAL_SPI_MspInit+0x184>)
 80026b0:	f005 fb0a 	bl	8007cc8 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 80026b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026b6:	4a20      	ldr	r2, [pc, #128]	@ (8002738 <HAL_SPI_MspInit+0x18c>)
 80026b8:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026bc:	2254      	movs	r2, #84	@ 0x54
 80026be:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d2:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d4:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026da:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026e6:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026ec:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80026f4:	480f      	ldr	r0, [pc, #60]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 80026f6:	f002 fc91 	bl	800501c <HAL_DMA_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8002700:	f7ff fcd8 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 8002708:	679a      	str	r2, [r3, #120]	@ 0x78
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <HAL_SPI_MspInit+0x188>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	2054      	movs	r0, #84	@ 0x54
 8002716:	f002 fbd4 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800271a:	2054      	movs	r0, #84	@ 0x54
 800271c:	f002 fbeb 	bl	8004ef6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002720:	bf00      	nop
 8002722:	37e8      	adds	r7, #232	@ 0xe8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40013400 	.word	0x40013400
 800272c:	58024400 	.word	0x58024400
 8002730:	58021000 	.word	0x58021000
 8002734:	240007dc 	.word	0x240007dc
 8002738:	40020010 	.word	0x40020010

0800273c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0e      	ldr	r2, [pc, #56]	@ (8002784 <HAL_TIM_Base_MspInit+0x48>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d116      	bne.n	800277c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <HAL_TIM_Base_MspInit+0x4c>)
 8002750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002754:	4a0c      	ldr	r2, [pc, #48]	@ (8002788 <HAL_TIM_Base_MspInit+0x4c>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <HAL_TIM_Base_MspInit+0x4c>)
 8002760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	2032      	movs	r0, #50	@ 0x32
 8002772:	f002 fba6 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002776:	2032      	movs	r0, #50	@ 0x32
 8002778:	f002 fbbd 	bl	8004ef6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40000c00 	.word	0x40000c00
 8002788:	58024400 	.word	0x58024400

0800278c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b0ba      	sub	sp, #232	@ 0xe8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	22c0      	movs	r2, #192	@ 0xc0
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f018 f90b 	bl	801a9c8 <memset>
  if(huart->Instance==USART1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a43      	ldr	r2, [pc, #268]	@ (80028c4 <HAL_UART_MspInit+0x138>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d17e      	bne.n	80028ba <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027bc:	f04f 0201 	mov.w	r2, #1
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ce:	f107 0310 	add.w	r3, r7, #16
 80027d2:	4618      	mov	r0, r3
 80027d4:	f00c ff18 	bl	800f608 <HAL_RCCEx_PeriphCLKConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80027de:	f7ff fc69 	bl	80020b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027e2:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <HAL_UART_MspInit+0x13c>)
 80027e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027e8:	4a37      	ldr	r2, [pc, #220]	@ (80028c8 <HAL_UART_MspInit+0x13c>)
 80027ea:	f043 0310 	orr.w	r3, r3, #16
 80027ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027f2:	4b35      	ldr	r3, [pc, #212]	@ (80028c8 <HAL_UART_MspInit+0x13c>)
 80027f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <HAL_UART_MspInit+0x13c>)
 8002802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002806:	4a30      	ldr	r2, [pc, #192]	@ (80028c8 <HAL_UART_MspInit+0x13c>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002810:	4b2d      	ldr	r3, [pc, #180]	@ (80028c8 <HAL_UART_MspInit+0x13c>)
 8002812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800281e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002838:	2304      	movs	r3, #4
 800283a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002842:	4619      	mov	r1, r3
 8002844:	4821      	ldr	r0, [pc, #132]	@ (80028cc <HAL_UART_MspInit+0x140>)
 8002846:	f005 fa3f 	bl	8007cc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800284a:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 800284c:	4a21      	ldr	r2, [pc, #132]	@ (80028d4 <HAL_UART_MspInit+0x148>)
 800284e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002850:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 8002852:	2229      	movs	r2, #41	@ 0x29
 8002854:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002856:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800285c:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002862:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 8002864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002868:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286a:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 800286c:	2200      	movs	r2, #0
 800286e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 8002872:	2200      	movs	r2, #0
 8002874:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002876:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 8002878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800287c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 8002880:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002884:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800288c:	4810      	ldr	r0, [pc, #64]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 800288e:	f002 fbc5 	bl	800501c <HAL_DMA_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002898:	f7ff fc0c 	bl	80020b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0c      	ldr	r2, [pc, #48]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 80028a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80028a4:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <HAL_UART_MspInit+0x144>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2025      	movs	r0, #37	@ 0x25
 80028b0:	f002 fb07 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028b4:	2025      	movs	r0, #37	@ 0x25
 80028b6:	f002 fb1e 	bl	8004ef6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80028ba:	bf00      	nop
 80028bc:	37e8      	adds	r7, #232	@ 0xe8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40011000 	.word	0x40011000
 80028c8:	58024400 	.word	0x58024400
 80028cc:	58020400 	.word	0x58020400
 80028d0:	24000934 	.word	0x24000934
 80028d4:	40020410 	.word	0x40020410

080028d8 <__NVIC_SystemReset>:
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80028dc:	f3bf 8f4f 	dsb	sy
}
 80028e0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <__NVIC_SystemReset+0x24>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80028ea:	4904      	ldr	r1, [pc, #16]	@ (80028fc <__NVIC_SystemReset+0x24>)
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <__NVIC_SystemReset+0x28>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80028f2:	f3bf 8f4f 	dsb	sy
}
 80028f6:	bf00      	nop
    __NOP();
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <__NVIC_SystemReset+0x20>
 80028fc:	e000ed00 	.word	0xe000ed00
 8002900:	05fa0004 	.word	0x05fa0004

08002904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <NMI_Handler+0x4>

0800290c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// ON HARDFAULT:
	// Reset the system
	NVIC_SystemReset();
 8002910:	f7ff ffe2 	bl	80028d8 <__NVIC_SystemReset>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <MemManage_Handler+0x4>

0800291c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <UsageFault_Handler+0x4>

0800292c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295a:	f000 fed5 	bl	8003708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <DMA1_Stream0_IRQHandler+0x10>)
 800296a:	f003 fe81 	bl	8006670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	240007dc 	.word	0x240007dc

08002978 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800297c:	4802      	ldr	r0, [pc, #8]	@ (8002988 <DMA1_Stream1_IRQHandler+0x10>)
 800297e:	f003 fe77 	bl	8006670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	240005ac 	.word	0x240005ac

0800298c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002990:	4802      	ldr	r0, [pc, #8]	@ (800299c <DMA1_Stream2_IRQHandler+0x10>)
 8002992:	f003 fe6d 	bl	8006670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	24000534 	.word	0x24000534

080029a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029a4:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <DMA1_Stream3_IRQHandler+0x10>)
 80029a6:	f003 fe63 	bl	8006670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	24000414 	.word	0x24000414

080029b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029b8:	4802      	ldr	r0, [pc, #8]	@ (80029c4 <I2C1_EV_IRQHandler+0x10>)
 80029ba:	f005 fe2f 	bl	800861c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2400048c 	.word	0x2400048c

080029c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80029cc:	4802      	ldr	r0, [pc, #8]	@ (80029d8 <I2C1_ER_IRQHandler+0x10>)
 80029ce:	f005 fe3f 	bl	8008650 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2400048c 	.word	0x2400048c

080029dc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80029e0:	4802      	ldr	r0, [pc, #8]	@ (80029ec <I2C2_EV_IRQHandler+0x10>)
 80029e2:	f005 fe1b 	bl	800861c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	240004e0 	.word	0x240004e0

080029f0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80029f4:	4802      	ldr	r0, [pc, #8]	@ (8002a00 <I2C2_ER_IRQHandler+0x10>)
 80029f6:	f005 fe2b 	bl	8008650 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	240004e0 	.word	0x240004e0

08002a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a08:	4802      	ldr	r0, [pc, #8]	@ (8002a14 <USART1_IRQHandler+0x10>)
 8002a0a:	f011 f8bb 	bl	8013b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	240008a0 	.word	0x240008a0

08002a18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	NetworkTimeout();
 8002a1c:	f7fe fb7e 	bl	800111c <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a20:	4802      	ldr	r0, [pc, #8]	@ (8002a2c <TIM5_IRQHandler+0x14>)
 8002a22:	f010 fb69 	bl	80130f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	24000854 	.word	0x24000854

08002a30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a34:	4802      	ldr	r0, [pc, #8]	@ (8002a40 <DMA2_Stream0_IRQHandler+0x10>)
 8002a36:	f003 fe1b 	bl	8006670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	24000934 	.word	0x24000934

08002a44 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002a48:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <SPI4_IRQHandler+0x10>)
 8002a4a:	f00f ff2f 	bl	80128ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	24000754 	.word	0x24000754

08002a58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a5c:	4802      	ldr	r0, [pc, #8]	@ (8002a68 <OTG_FS_IRQHandler+0x10>)
 8002a5e:	f00a fc44 	bl	800d2ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	240485d4 	.word	0x240485d4

08002a6c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002a70:	4802      	ldr	r0, [pc, #8]	@ (8002a7c <JPEG_IRQHandler+0x10>)
 8002a72:	f008 fa77 	bl	800af64 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	24000624 	.word	0x24000624

08002a80 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002a84:	4803      	ldr	r0, [pc, #12]	@ (8002a94 <MDMA_IRQHandler+0x14>)
 8002a86:	f00a f893 	bl	800cbb0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002a8a:	4803      	ldr	r0, [pc, #12]	@ (8002a98 <MDMA_IRQHandler+0x18>)
 8002a8c:	f00a f890 	bl	800cbb0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2400067c 	.word	0x2400067c
 8002a98:	240006e8 	.word	0x240006e8

08002a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa4:	4a14      	ldr	r2, [pc, #80]	@ (8002af8 <_sbrk+0x5c>)
 8002aa6:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <_sbrk+0x60>)
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <_sbrk+0x64>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	@ (8002b04 <_sbrk+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d207      	bcs.n	8002adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002acc:	f017 ff94 	bl	801a9f8 <__errno>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	e009      	b.n	8002af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a05      	ldr	r2, [pc, #20]	@ (8002b00 <_sbrk+0x64>)
 8002aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	24080000 	.word	0x24080000
 8002afc:	00000400 	.word	0x00000400
 8002b00:	240470e8 	.word	0x240470e8
 8002b04:	24048e20 	.word	0x24048e20

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b43      	ldr	r3, [pc, #268]	@ (8002c1c <SystemInit+0x114>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	4a42      	ldr	r2, [pc, #264]	@ (8002c1c <SystemInit+0x114>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b1c:	4b40      	ldr	r3, [pc, #256]	@ (8002c20 <SystemInit+0x118>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d807      	bhi.n	8002b38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b28:	4b3d      	ldr	r3, [pc, #244]	@ (8002c20 <SystemInit+0x118>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 030f 	bic.w	r3, r3, #15
 8002b30:	4a3b      	ldr	r2, [pc, #236]	@ (8002c20 <SystemInit+0x118>)
 8002b32:	f043 0307 	orr.w	r3, r3, #7
 8002b36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b38:	4b3a      	ldr	r3, [pc, #232]	@ (8002c24 <SystemInit+0x11c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a39      	ldr	r2, [pc, #228]	@ (8002c24 <SystemInit+0x11c>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b44:	4b37      	ldr	r3, [pc, #220]	@ (8002c24 <SystemInit+0x11c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b4a:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <SystemInit+0x11c>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4935      	ldr	r1, [pc, #212]	@ (8002c24 <SystemInit+0x11c>)
 8002b50:	4b35      	ldr	r3, [pc, #212]	@ (8002c28 <SystemInit+0x120>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b56:	4b32      	ldr	r3, [pc, #200]	@ (8002c20 <SystemInit+0x118>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b62:	4b2f      	ldr	r3, [pc, #188]	@ (8002c20 <SystemInit+0x118>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 030f 	bic.w	r3, r3, #15
 8002b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c20 <SystemInit+0x118>)
 8002b6c:	f043 0307 	orr.w	r3, r3, #7
 8002b70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b72:	4b2c      	ldr	r3, [pc, #176]	@ (8002c24 <SystemInit+0x11c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b78:	4b2a      	ldr	r3, [pc, #168]	@ (8002c24 <SystemInit+0x11c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b7e:	4b29      	ldr	r3, [pc, #164]	@ (8002c24 <SystemInit+0x11c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <SystemInit+0x11c>)
 8002b86:	4a29      	ldr	r2, [pc, #164]	@ (8002c2c <SystemInit+0x124>)
 8002b88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b8a:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <SystemInit+0x11c>)
 8002b8c:	4a28      	ldr	r2, [pc, #160]	@ (8002c30 <SystemInit+0x128>)
 8002b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <SystemInit+0x11c>)
 8002b92:	4a28      	ldr	r2, [pc, #160]	@ (8002c34 <SystemInit+0x12c>)
 8002b94:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b96:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <SystemInit+0x11c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b9c:	4b21      	ldr	r3, [pc, #132]	@ (8002c24 <SystemInit+0x11c>)
 8002b9e:	4a25      	ldr	r2, [pc, #148]	@ (8002c34 <SystemInit+0x12c>)
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <SystemInit+0x11c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c24 <SystemInit+0x11c>)
 8002baa:	4a22      	ldr	r2, [pc, #136]	@ (8002c34 <SystemInit+0x12c>)
 8002bac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bae:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <SystemInit+0x11c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <SystemInit+0x11c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002c24 <SystemInit+0x11c>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <SystemInit+0x11c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c38 <SystemInit+0x130>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <SystemInit+0x134>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bd2:	d202      	bcs.n	8002bda <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <SystemInit+0x138>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002bda:	4b12      	ldr	r3, [pc, #72]	@ (8002c24 <SystemInit+0x11c>)
 8002bdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002be0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d113      	bne.n	8002c10 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002be8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c24 <SystemInit+0x11c>)
 8002bea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002bee:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <SystemInit+0x11c>)
 8002bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bf4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <SystemInit+0x13c>)
 8002bfa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002bfe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002c00:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <SystemInit+0x11c>)
 8002c02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002c06:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <SystemInit+0x11c>)
 8002c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c0c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00
 8002c20:	52002000 	.word	0x52002000
 8002c24:	58024400 	.word	0x58024400
 8002c28:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c2c:	02020200 	.word	0x02020200
 8002c30:	01ff0000 	.word	0x01ff0000
 8002c34:	01010280 	.word	0x01010280
 8002c38:	5c001000 	.word	0x5c001000
 8002c3c:	ffff0000 	.word	0xffff0000
 8002c40:	51008108 	.word	0x51008108
 8002c44:	52004000 	.word	0x52004000

08002c48 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002c4c:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <ExitRun0Mode+0x2c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a08      	ldr	r2, [pc, #32]	@ (8002c74 <ExitRun0Mode+0x2c>)
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002c58:	bf00      	nop
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <ExitRun0Mode+0x2c>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f9      	beq.n	8002c5a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002c66:	bf00      	nop
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	58024800 	.word	0x58024800

08002c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c78:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002cb4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002c7c:	f7ff ffe4 	bl	8002c48 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c80:	f7ff ff42 	bl	8002b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c84:	480c      	ldr	r0, [pc, #48]	@ (8002cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c86:	490d      	ldr	r1, [pc, #52]	@ (8002cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c88:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002caa:	f017 feab 	bl	801aa04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cae:	f7fd fd1b 	bl	80006e8 <main>
  bx  lr
 8002cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002cb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002cbc:	24000394 	.word	0x24000394
  ldr r2, =_sidata
 8002cc0:	0801b9a0 	.word	0x0801b9a0
  ldr r2, =_sbss
 8002cc4:	24000394 	.word	0x24000394
  ldr r4, =_ebss
 8002cc8:	24048e20 	.word	0x24048e20

08002ccc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC3_IRQHandler>

08002cce <SSD1306_SendCommand>:
	0x06, 0x00,       0xFF,       0x00,       0xFF,       0x00,       0xFF,       0x00        // ------ 131 - \x84 (|||)
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af02      	add	r7, sp, #8
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	733b      	strb	r3, [r7, #12]
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	791b      	ldrb	r3, [r3, #4]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	b299      	uxth	r1, r3
 8002cee:	f107 020c 	add.w	r2, r7, #12
 8002cf2:	2364      	movs	r3, #100	@ 0x64
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f005 fa64 	bl	80081c4 <HAL_I2C_Master_Transmit>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SSD1306_SendCommand+0x38>
		return ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8002d28:	2312      	movs	r3, #18
 8002d2a:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002d30:	e02c      	b.n	8002d8c <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	4a1a      	ldr	r2, [pc, #104]	@ (8002da0 <SSD1306_Init+0x90>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002d40:	897b      	ldrh	r3, [r7, #10]
 8002d42:	4a17      	ldr	r2, [pc, #92]	@ (8002da0 <SSD1306_Init+0x90>)
 8002d44:	5cd3      	ldrb	r3, [r2, r3]
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ffc0 	bl	8002cce <SSD1306_SendCommand>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <SSD1306_Init+0x4a>
 8002d54:	897b      	ldrh	r3, [r7, #10]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	e01e      	b.n	8002d98 <SSD1306_Init+0x88>
	        cmd_idx++;
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8002d60:	e00f      	b.n	8002d82 <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	4a0e      	ldr	r2, [pc, #56]	@ (8002da0 <SSD1306_Init+0x90>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffaf 	bl	8002cce <SSD1306_SendCommand>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <SSD1306_Init+0x6c>
 8002d76:	897b      	ldrh	r3, [r7, #10]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e00d      	b.n	8002d98 <SSD1306_Init+0x88>
	            cmd_idx++;
 8002d7c:	897b      	ldrh	r3, [r7, #10]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8002d82:	89bb      	ldrh	r3, [r7, #12]
 8002d84:	1e5a      	subs	r2, r3, #1
 8002d86:	81ba      	strh	r2, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ea      	bne.n	8002d62 <SSD1306_Init+0x52>
	while (n_commands--) {
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	1e5a      	subs	r2, r3, #1
 8002d90:	81fa      	strh	r2, [r7, #14]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1cd      	bne.n	8002d32 <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	0801b344 	.word	0x0801b344

08002da4 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f017 fe03 	bl	801a9c8 <memset>
	return 0;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2240      	movs	r2, #64	@ 0x40
 8002dda:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	791b      	ldrb	r3, [r3, #4]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	b299      	uxth	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	f240 4301 	movw	r3, #1025	@ 0x401
 8002df0:	f005 fb00 	bl	80083f4 <HAL_I2C_Master_Transmit_DMA>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	2b0a      	cmp	r3, #10
 8002e10:	d109      	bne.n	8002e26 <SSD1306_DrawChar+0x26>
		hssd->str_cursor = (hssd->str_cursor/128)*128;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8a1b      	ldrh	r3, [r3, #16]
 8002e16:	09db      	lsrs	r3, r3, #7
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	01db      	lsls	r3, r3, #7
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	821a      	strh	r2, [r3, #16]
		return SUCCESS;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e055      	b.n	8002ed2 <SSD1306_DrawChar+0xd2>
	}

	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	3b20      	subs	r3, #32
 8002e2a:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	2b60      	cmp	r3, #96	@ 0x60
 8002e30:	d905      	bls.n	8002e3e <SSD1306_DrawChar+0x3e>
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	2b7a      	cmp	r3, #122	@ 0x7a
 8002e36:	d802      	bhi.n	8002e3e <SSD1306_DrawChar+0x3e>
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	3b20      	subs	r3, #32
 8002e3c:	73fb      	strb	r3, [r7, #15]
	if (ch >= 123)             newC -= 26;	// remap the rest to align with the font table
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	2b7a      	cmp	r3, #122	@ 0x7a
 8002e42:	d902      	bls.n	8002e4a <SSD1306_DrawChar+0x4a>
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	3b1a      	subs	r3, #26
 8002e48:	73fb      	strb	r3, [r7, #15]

	if (newC > 126) return ERROR;	// char is unable to be rendered
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b7e      	cmp	r3, #126	@ 0x7e
 8002e4e:	d901      	bls.n	8002e54 <SSD1306_DrawChar+0x54>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e03e      	b.n	8002ed2 <SSD1306_DrawChar+0xd2>

	uint8_t len = ALPHNUM[newC*8];
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4a21      	ldr	r2, [pc, #132]	@ (8002ee0 <SSD1306_DrawChar+0xe0>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < len; i++) {
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73bb      	strb	r3, [r7, #14]
 8002e62:	e029      	b.n	8002eb8 <SSD1306_DrawChar+0xb8>
		if (!hssd->draw_inverted)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7c9b      	ldrb	r3, [r3, #18]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d110      	bne.n	8002e8e <SSD1306_DrawChar+0x8e>
			hssd->vram[hssd->str_cursor + i] = ALPHNUM[(newC*8)+1 + i];
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	7bbb      	ldrb	r3, [r7, #14]
 8002e74:	441a      	add	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	8a09      	ldrh	r1, [r1, #16]
 8002e7e:	4608      	mov	r0, r1
 8002e80:	7bb9      	ldrb	r1, [r7, #14]
 8002e82:	4401      	add	r1, r0
 8002e84:	440b      	add	r3, r1
 8002e86:	4916      	ldr	r1, [pc, #88]	@ (8002ee0 <SSD1306_DrawChar+0xe0>)
 8002e88:	5c8a      	ldrb	r2, [r1, r2]
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e011      	b.n	8002eb2 <SSD1306_DrawChar+0xb2>
		else
			hssd->vram[hssd->str_cursor + i] = ALPHNUM[(newC*8)+1 + i] ^ 0xFF;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	7bbb      	ldrb	r3, [r7, #14]
 8002e96:	4413      	add	r3, r2
 8002e98:	4a11      	ldr	r2, [pc, #68]	@ (8002ee0 <SSD1306_DrawChar+0xe0>)
 8002e9a:	5cd2      	ldrb	r2, [r2, r3]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	8a09      	ldrh	r1, [r1, #16]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	7bb9      	ldrb	r1, [r7, #14]
 8002ea8:	4401      	add	r1, r0
 8002eaa:	440b      	add	r3, r1
 8002eac:	43d2      	mvns	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8002eb2:	7bbb      	ldrb	r3, [r7, #14]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	73bb      	strb	r3, [r7, #14]
 8002eb8:	7bba      	ldrb	r2, [r7, #14]
 8002eba:	7b7b      	ldrb	r3, [r7, #13]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3d1      	bcc.n	8002e64 <SSD1306_DrawChar+0x64>
	}
	//memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
	hssd->str_cursor += len;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8a1a      	ldrh	r2, [r3, #16]
 8002ec4:	7b7b      	ldrb	r3, [r7, #13]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	0801b378 	.word	0x0801b378

08002ee4 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	71fb      	strb	r3, [r7, #7]
	uint8_t start_line = hssd->str_cursor / 120;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8a1b      	ldrh	r3, [r3, #16]
 8002ef6:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <SSD1306_DrawString+0x70>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < length; i++) {
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
 8002f06:	e019      	b.n	8002f3c <SSD1306_DrawString+0x58>
		if (hssd->str_cursor / 128 > start_line) break;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8a1b      	ldrh	r3, [r3, #16]
 8002f0c:	09db      	lsrs	r3, r3, #7
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	7dbb      	ldrb	r3, [r7, #22]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d816      	bhi.n	8002f46 <SSD1306_DrawString+0x62>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x00;
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff ff6c 	bl	8002e00 <SSD1306_DrawChar>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <SSD1306_DrawString+0x52>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8a1a      	ldrh	r2, [r3, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
 8002f3c:	7dfa      	ldrb	r2, [r7, #23]
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3e1      	bcc.n	8002f08 <SSD1306_DrawString+0x24>
 8002f44:	e000      	b.n	8002f48 <SSD1306_DrawString+0x64>
		if (hssd->str_cursor / 128 > start_line) break;
 8002f46:	bf00      	nop
	}

	return SUCCESS;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	88888889 	.word	0x88888889

08002f58 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6898      	ldr	r0, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	899b      	ldrh	r3, [r3, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f005 f872 	bl	8008058 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	1cf9      	adds	r1, r7, #3
 8002f7a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f00f f964 	bl	801224c <HAL_SPI_Transmit>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <ST7789_SendByte_Command+0x36>
		return ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6898      	ldr	r0, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	899b      	ldrh	r3, [r3, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f005 f852 	bl	8008058 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	1cf9      	adds	r1, r7, #3
 8002fba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f00f f944 	bl	801224c <HAL_SPI_Transmit>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <ST7789_SendByte_Data+0x36>
		return ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

	hst7789->update_sequence = 2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	751a      	strb	r2, [r3, #20]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f107 0109 	add.w	r1, r7, #9
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f00f fb17 	bl	8012628 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 8002ffa:	200a      	movs	r0, #10
 8002ffc:	f000 fba4 	bl	8003748 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 8003000:	2313      	movs	r3, #19
 8003002:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8003004:	2301      	movs	r3, #1
 8003006:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8003008:	e02c      	b.n	8003064 <ST7789_Init+0x8c>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	4a1a      	ldr	r2, [pc, #104]	@ (8003078 <ST7789_Init+0xa0>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	3301      	adds	r3, #1
 8003016:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	4a17      	ldr	r2, [pc, #92]	@ (8003078 <ST7789_Init+0xa0>)
 800301c:	5cd3      	ldrb	r3, [r2, r3]
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff99 	bl	8002f58 <ST7789_SendByte_Command>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <ST7789_Init+0x5a>
 800302c:	897b      	ldrh	r3, [r7, #10]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	e01e      	b.n	8003070 <ST7789_Init+0x98>
	    cmd_idx++;
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	3301      	adds	r3, #1
 8003036:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 8003038:	e00f      	b.n	800305a <ST7789_Init+0x82>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 800303a:	897b      	ldrh	r3, [r7, #10]
 800303c:	4a0e      	ldr	r2, [pc, #56]	@ (8003078 <ST7789_Init+0xa0>)
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ffa8 	bl	8002f98 <ST7789_SendByte_Data>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <ST7789_Init+0x7c>
 800304e:	897b      	ldrh	r3, [r7, #10]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e00d      	b.n	8003070 <ST7789_Init+0x98>
				cmd_idx++;
 8003054:	897b      	ldrh	r3, [r7, #10]
 8003056:	3301      	adds	r3, #1
 8003058:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 800305a:	89bb      	ldrh	r3, [r7, #12]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	81ba      	strh	r2, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ea      	bne.n	800303a <ST7789_Init+0x62>
	while (n_commands--) {
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	1e5a      	subs	r2, r3, #1
 8003068:	81fa      	strh	r2, [r7, #14]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1cd      	bne.n	800300a <ST7789_Init+0x32>
	    }
	}
	return SUCCESS;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	0801b5d0 	.word	0x0801b5d0

0800307c <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	817b      	strh	r3, [r7, #10]
 800308e:	460b      	mov	r3, r1
 8003090:	813b      	strh	r3, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 8003096:	212a      	movs	r1, #42	@ 0x2a
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff ff5d 	bl	8002f58 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	4619      	mov	r1, r3
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff ff75 	bl	8002f98 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 80030ae:	897b      	ldrh	r3, [r7, #10]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4619      	mov	r1, r3
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff ff6f 	bl	8002f98 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	3b01      	subs	r3, #1
 80030be:	121b      	asrs	r3, r3, #8
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4619      	mov	r1, r3
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7ff ff67 	bl	8002f98 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	4619      	mov	r1, r3
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7ff ff5f 	bl	8002f98 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 80030da:	212b      	movs	r1, #43	@ 0x2b
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7ff ff3b 	bl	8002f58 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 80030e2:	893b      	ldrh	r3, [r7, #8]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	4619      	mov	r1, r3
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff ff53 	bl	8002f98 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4619      	mov	r1, r3
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ff4d 	bl	8002f98 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 80030fe:	8b3b      	ldrh	r3, [r7, #24]
 8003100:	3b01      	subs	r3, #1
 8003102:	121b      	asrs	r3, r3, #8
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff ff45 	bl	8002f98 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 800310e:	8b3b      	ldrh	r3, [r7, #24]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4619      	mov	r1, r3
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff ff3d 	bl	8002f98 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 800311e:	212c      	movs	r1, #44	@ 0x2c
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff ff19 	bl	8002f58 <ST7789_SendByte_Command>
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <ST7789_UpdateSector>:

uint8_t ST7789_UpdateSector(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af02      	add	r7, sp, #8
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	70fb      	strb	r3, [r7, #3]
	// Check for bounds/busy
	if (hst7789->spi_state == 1) return ERROR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	791b      	ldrb	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <ST7789_UpdateSector+0x18>
 8003142:	2301      	movs	r3, #1
 8003144:	e04b      	b.n	80031de <ST7789_UpdateSector+0xb0>
	if (screen_section > 2) return ERROR;
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <ST7789_UpdateSector+0x22>
 800314c:	2301      	movs	r3, #1
 800314e:	e046      	b.n	80031de <ST7789_UpdateSector+0xb0>

	// Flag as busy
	hst7789->spi_state = 1;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	b29b      	uxth	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	0152      	lsls	r2, r2, #5
 800315e:	1ad2      	subs	r2, r2, r3
 8003160:	0092      	lsls	r2, r2, #2
 8003162:	4413      	add	r3, r2
 8003164:	b29a      	uxth	r2, r3
 8003166:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	23f0      	movs	r3, #240	@ 0xf0
 800316e:	2100      	movs	r1, #0
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff83 	bl	800307c <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6898      	ldr	r0, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	899b      	ldrh	r3, [r3, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	4619      	mov	r1, r3
 8003182:	f004 ff69 	bl	8008058 <HAL_GPIO_WritePin>


	if (screen_section != 2) {
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d013      	beq.n	80031b4 <ST7789_UpdateSector+0x86>
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800319a:	fb01 f202 	mul.w	r2, r1, r2
 800319e:	4413      	add	r3, r2
 80031a0:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80031a4:	4619      	mov	r1, r3
 80031a6:	f00f fa3f 	bl	8012628 <HAL_SPI_Transmit_DMA>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d015      	beq.n	80031dc <ST7789_UpdateSector+0xae>
			return ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e014      	b.n	80031de <ST7789_UpdateSector+0xb0>
	} else {
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0x8340))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80031c2:	fb01 f202 	mul.w	r2, r1, r2
 80031c6:	4413      	add	r3, r2
 80031c8:	f248 3240 	movw	r2, #33600	@ 0x8340
 80031cc:	4619      	mov	r1, r3
 80031ce:	f00f fa2b 	bl	8012628 <HAL_SPI_Transmit_DMA>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <ST7789_UpdateSector+0xae>
			return ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <ST7789_UpdateSector+0xb0>
	}
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <ST7789_UpdateAutomatic>:

uint8_t ST7789_UpdateAutomatic(ST7789_HandleTypeDef *hst7789) {
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
	// Reset the sector counter
	hst7789->update_sequence = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	751a      	strb	r2, [r3, #20]

	// perform a screen update
	if (ST7789_UpdateSector(hst7789, hst7789->update_sequence)) return ERROR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7d1b      	ldrb	r3, [r3, #20]
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ff97 	bl	800312e <ST7789_UpdateSector>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <ST7789_UpdateAutomatic+0x24>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <ST7789_UpdateAutomatic+0x26>

	return SUCCESS;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	// fill VRAM with black
	memset(hst7789->vram, 0x00, LCD_WIDTH*LCD_HEIGHT*2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f017 fbce 	bl	801a9c8 <memset>
	return SUCCESS;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <ST7789_Draw_NOSIG>:

uint8_t ST7789_Draw_NOSIG(ST7789_HandleTypeDef *hst7789) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

	// Clear the area
	uint32_t cursor = LCD_WIDTH*(LCD_HEIGHT - 7*FONTSCALE_NOSIGNAL)*2 + (LCD_WIDTH - 7*FONTSCALE_NOSIGNAL);
 8003240:	4b46      	ldr	r3, [pc, #280]	@ (800335c <ST7789_Draw_NOSIG+0x124>)
 8003242:	617b      	str	r3, [r7, #20]
	for (uint32_t x = 0; x < 66*FONTSCALE_NOSIGNAL; x++) {
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	e012      	b.n	8003270 <ST7789_Draw_NOSIG+0x38>
		memset(hst7789->vram + cursor - x*LCD_WIDTH*2, 0x00, 24*FONTSCALE_NOSIGNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6919      	ldr	r1, [r3, #16]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	015b      	lsls	r3, r3, #5
 8003258:	461a      	mov	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	440b      	add	r3, r1
 8003260:	2260      	movs	r2, #96	@ 0x60
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f017 fbaf 	bl	801a9c8 <memset>
	for (uint32_t x = 0; x < 66*FONTSCALE_NOSIGNAL; x++) {
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3301      	adds	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8003276:	d3e8      	bcc.n	800324a <ST7789_Draw_NOSIG+0x12>
	}

	// Draw the NO SIGNAL symbol
		cursor = LCD_WIDTH*(LCD_HEIGHT - 9*FONTSCALE_NOSIGNAL)*2 + (LCD_WIDTH - 4*FONTSCALE_NOSIGNAL);
 8003278:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <ST7789_Draw_NOSIG+0x128>)
 800327a:	617b      	str	r3, [r7, #20]
		for (uint8_t c = 0; c < 9; c++) {		// Loop chars
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	e064      	b.n	800334c <ST7789_Draw_NOSIG+0x114>
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003282:	2300      	movs	r3, #0
 8003284:	73bb      	strb	r3, [r7, #14]
 8003286:	e05b      	b.n	8003340 <ST7789_Draw_NOSIG+0x108>
				uint8_t line_byte = TXT_NOSIGNAL[c*7 + l];
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	1a9a      	subs	r2, r3, r2
 8003290:	7bbb      	ldrb	r3, [r7, #14]
 8003292:	4413      	add	r3, r2
 8003294:	4a33      	ldr	r2, [pc, #204]	@ (8003364 <ST7789_Draw_NOSIG+0x12c>)
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	72bb      	strb	r3, [r7, #10]

				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800329a:	2300      	movs	r3, #0
 800329c:	737b      	strb	r3, [r7, #13]
 800329e:	e045      	b.n	800332c <ST7789_Draw_NOSIG+0xf4>
					if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 80032a0:	7aba      	ldrb	r2, [r7, #10]
 80032a2:	7b7b      	ldrb	r3, [r7, #13]
 80032a4:	fa42 f303 	asr.w	r3, r2, r3
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d03a      	beq.n	8003326 <ST7789_Draw_NOSIG+0xee>
						for (uint8_t y = 0; y < FONTSCALE_NOSIGNAL; y++) {
 80032b0:	2300      	movs	r3, #0
 80032b2:	733b      	strb	r3, [r7, #12]
 80032b4:	e034      	b.n	8003320 <ST7789_Draw_NOSIG+0xe8>
							for (uint8_t x = 0; x < FONTSCALE_NOSIGNAL; x++) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	72fb      	strb	r3, [r7, #11]
 80032ba:	e02b      	b.n	8003314 <ST7789_Draw_NOSIG+0xdc>
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_NOSIGNAL)*2 + cursor    ] = 0xFF;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6919      	ldr	r1, [r3, #16]
 80032c0:	7afa      	ldrb	r2, [r7, #11]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	461a      	mov	r2, r3
 80032cc:	7b3b      	ldrb	r3, [r7, #12]
 80032ce:	441a      	add	r2, r3
 80032d0:	7b7b      	ldrb	r3, [r7, #13]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	461a      	mov	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4413      	add	r3, r2
 80032de:	440b      	add	r3, r1
 80032e0:	22ff      	movs	r2, #255	@ 0xff
 80032e2:	701a      	strb	r2, [r3, #0]
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_NOSIGNAL)*2 + cursor + 1] = 0xFF;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6919      	ldr	r1, [r3, #16]
 80032e8:	7afa      	ldrb	r2, [r7, #11]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	461a      	mov	r2, r3
 80032f4:	7b3b      	ldrb	r3, [r7, #12]
 80032f6:	441a      	add	r2, r3
 80032f8:	7b7b      	ldrb	r3, [r7, #13]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	461a      	mov	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4413      	add	r3, r2
 8003306:	3301      	adds	r3, #1
 8003308:	440b      	add	r3, r1
 800330a:	22ff      	movs	r2, #255	@ 0xff
 800330c:	701a      	strb	r2, [r3, #0]
							for (uint8_t x = 0; x < FONTSCALE_NOSIGNAL; x++) {
 800330e:	7afb      	ldrb	r3, [r7, #11]
 8003310:	3301      	adds	r3, #1
 8003312:	72fb      	strb	r3, [r7, #11]
 8003314:	7afb      	ldrb	r3, [r7, #11]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d9d0      	bls.n	80032bc <ST7789_Draw_NOSIG+0x84>
						for (uint8_t y = 0; y < FONTSCALE_NOSIGNAL; y++) {
 800331a:	7b3b      	ldrb	r3, [r7, #12]
 800331c:	3301      	adds	r3, #1
 800331e:	733b      	strb	r3, [r7, #12]
 8003320:	7b3b      	ldrb	r3, [r7, #12]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d9c7      	bls.n	80032b6 <ST7789_Draw_NOSIG+0x7e>
				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 8003326:	7b7b      	ldrb	r3, [r7, #13]
 8003328:	3301      	adds	r3, #1
 800332a:	737b      	strb	r3, [r7, #13]
 800332c:	7b7b      	ldrb	r3, [r7, #13]
 800332e:	2b07      	cmp	r3, #7
 8003330:	d9b6      	bls.n	80032a0 <ST7789_Draw_NOSIG+0x68>
							}
						}
					}
				}
				cursor -= LCD_WIDTH*FONTSCALE_NOSIGNAL*2;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8003338:	617b      	str	r3, [r7, #20]
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 800333a:	7bbb      	ldrb	r3, [r7, #14]
 800333c:	3301      	adds	r3, #1
 800333e:	73bb      	strb	r3, [r7, #14]
 8003340:	7bbb      	ldrb	r3, [r7, #14]
 8003342:	2b06      	cmp	r3, #6
 8003344:	d9a0      	bls.n	8003288 <ST7789_Draw_NOSIG+0x50>
		for (uint8_t c = 0; c < 9; c++) {		// Loop chars
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	3301      	adds	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b08      	cmp	r3, #8
 8003350:	d997      	bls.n	8003282 <ST7789_Draw_NOSIG+0x4a>
			}
		}

		return SUCCESS;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00022454 	.word	0x00022454
 8003360:	00021560 	.word	0x00021560
 8003364:	0801b62c 	.word	0x0801b62c

08003368 <ST7789_Draw_DATA>:

uint8_t ST7789_Draw_DATA(ST7789_HandleTypeDef *hst7789, uint32_t frametime_ms) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	@ 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]

	uint16_t ms = frametime_ms;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if (ms > 999)
 8003376:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003378:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800337c:	d302      	bcc.n	8003384 <ST7789_Draw_DATA+0x1c>
		ms = 999;
 800337e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8003382:	84fb      	strh	r3, [r7, #38]	@ 0x26

	uint8_t digits[3] = {
 8003384:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003386:	4a94      	ldr	r2, [pc, #592]	@ (80035d8 <ST7789_Draw_DATA+0x270>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b92      	ldr	r3, [pc, #584]	@ (80035dc <ST7789_Draw_DATA+0x274>)
 8003392:	fba3 1302 	umull	r1, r3, r3, r2
 8003396:	08d9      	lsrs	r1, r3, #3
 8003398:	460b      	mov	r3, r1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	733b      	strb	r3, [r7, #12]
 80033a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80033aa:	4a8c      	ldr	r2, [pc, #560]	@ (80035dc <ST7789_Draw_DATA+0x274>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	4b89      	ldr	r3, [pc, #548]	@ (80035dc <ST7789_Draw_DATA+0x274>)
 80033b6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ba:	08d9      	lsrs	r1, r3, #3
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	737b      	strb	r3, [r7, #13]
 80033cc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80033ce:	4b83      	ldr	r3, [pc, #524]	@ (80035dc <ST7789_Draw_DATA+0x274>)
 80033d0:	fba3 1302 	umull	r1, r3, r3, r2
 80033d4:	08d9      	lsrs	r1, r3, #3
 80033d6:	460b      	mov	r3, r1
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	73bb      	strb	r3, [r7, #14]
			(ms / 10)  % 10,
			 ms        % 10
	};

	// Clear the corner
	uint32_t cursor = (LCD_WIDTH*(LCD_HEIGHT-2) + 2)*2;
 80033e6:	4b7e      	ldr	r3, [pc, #504]	@ (80035e0 <ST7789_Draw_DATA+0x278>)
 80033e8:	623b      	str	r3, [r7, #32]
	for (uint32_t x = 0; x < 44*FONTSCALE_FRAMETIME; x++) {
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	e012      	b.n	8003416 <ST7789_Draw_DATA+0xae>
		memset(hst7789->vram + cursor - x*LCD_WIDTH*2, 0x00, 24*FONTSCALE_FRAMETIME);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6919      	ldr	r1, [r3, #16]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	015b      	lsls	r3, r3, #5
 80033fe:	461a      	mov	r2, r3
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	440b      	add	r3, r1
 8003406:	2218      	movs	r2, #24
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f017 fadc 	bl	801a9c8 <memset>
	for (uint32_t x = 0; x < 44*FONTSCALE_FRAMETIME; x++) {
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	2b2b      	cmp	r3, #43	@ 0x2b
 800341a:	d9e9      	bls.n	80033f0 <ST7789_Draw_DATA+0x88>
	}


	// Draw the MS symbol
	cursor = (LCD_WIDTH*(LCD_HEIGHT-2) + 2)*2;
 800341c:	4b70      	ldr	r3, [pc, #448]	@ (80035e0 <ST7789_Draw_DATA+0x278>)
 800341e:	623b      	str	r3, [r7, #32]
	for (uint8_t c = 0; c < 3; c++) {		// Loop chars
 8003420:	2300      	movs	r3, #0
 8003422:	76fb      	strb	r3, [r7, #27]
 8003424:	e062      	b.n	80034ec <ST7789_Draw_DATA+0x184>
		for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003426:	2300      	movs	r3, #0
 8003428:	76bb      	strb	r3, [r7, #26]
 800342a:	e059      	b.n	80034e0 <ST7789_Draw_DATA+0x178>
			uint8_t line_byte = TXT_MS[c*7 + l];
 800342c:	7efa      	ldrb	r2, [r7, #27]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	1a9a      	subs	r2, r3, r2
 8003434:	7ebb      	ldrb	r3, [r7, #26]
 8003436:	4413      	add	r3, r2
 8003438:	4a6a      	ldr	r2, [pc, #424]	@ (80035e4 <ST7789_Draw_DATA+0x27c>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	743b      	strb	r3, [r7, #16]

			for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800343e:	2300      	movs	r3, #0
 8003440:	767b      	strb	r3, [r7, #25]
 8003442:	e043      	b.n	80034cc <ST7789_Draw_DATA+0x164>
				if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 8003444:	7c3a      	ldrb	r2, [r7, #16]
 8003446:	7e7b      	ldrb	r3, [r7, #25]
 8003448:	fa42 f303 	asr.w	r3, r2, r3
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d038      	beq.n	80034c6 <ST7789_Draw_DATA+0x15e>
					for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003454:	2300      	movs	r3, #0
 8003456:	763b      	strb	r3, [r7, #24]
 8003458:	e032      	b.n	80034c0 <ST7789_Draw_DATA+0x158>
						for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]
 800345e:	e029      	b.n	80034b4 <ST7789_Draw_DATA+0x14c>
							hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor    ] = 0xFF;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6919      	ldr	r1, [r3, #16]
 8003464:	7dfa      	ldrb	r2, [r7, #23]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	461a      	mov	r2, r3
 8003470:	7e3b      	ldrb	r3, [r7, #24]
 8003472:	441a      	add	r2, r3
 8003474:	7e7b      	ldrb	r3, [r7, #25]
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	461a      	mov	r2, r3
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	4413      	add	r3, r2
 8003480:	440b      	add	r3, r1
 8003482:	22ff      	movs	r2, #255	@ 0xff
 8003484:	701a      	strb	r2, [r3, #0]
							hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor + 1] = 0xFF;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6919      	ldr	r1, [r3, #16]
 800348a:	7dfa      	ldrb	r2, [r7, #23]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	461a      	mov	r2, r3
 8003496:	7e3b      	ldrb	r3, [r7, #24]
 8003498:	441a      	add	r2, r3
 800349a:	7e7b      	ldrb	r3, [r7, #25]
 800349c:	4413      	add	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	461a      	mov	r2, r3
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	4413      	add	r3, r2
 80034a6:	3301      	adds	r3, #1
 80034a8:	440b      	add	r3, r1
 80034aa:	22ff      	movs	r2, #255	@ 0xff
 80034ac:	701a      	strb	r2, [r3, #0]
						for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	3301      	adds	r3, #1
 80034b2:	75fb      	strb	r3, [r7, #23]
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0d2      	beq.n	8003460 <ST7789_Draw_DATA+0xf8>
					for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 80034ba:	7e3b      	ldrb	r3, [r7, #24]
 80034bc:	3301      	adds	r3, #1
 80034be:	763b      	strb	r3, [r7, #24]
 80034c0:	7e3b      	ldrb	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0c9      	beq.n	800345a <ST7789_Draw_DATA+0xf2>
			for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 80034c6:	7e7b      	ldrb	r3, [r7, #25]
 80034c8:	3301      	adds	r3, #1
 80034ca:	767b      	strb	r3, [r7, #25]
 80034cc:	7e7b      	ldrb	r3, [r7, #25]
 80034ce:	2b07      	cmp	r3, #7
 80034d0:	d9b8      	bls.n	8003444 <ST7789_Draw_DATA+0xdc>
						}
					}
				}
			}
			cursor -= LCD_WIDTH*FONTSCALE_FRAMETIME*2;
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034d8:	623b      	str	r3, [r7, #32]
		for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80034da:	7ebb      	ldrb	r3, [r7, #26]
 80034dc:	3301      	adds	r3, #1
 80034de:	76bb      	strb	r3, [r7, #26]
 80034e0:	7ebb      	ldrb	r3, [r7, #26]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d9a2      	bls.n	800342c <ST7789_Draw_DATA+0xc4>
	for (uint8_t c = 0; c < 3; c++) {		// Loop chars
 80034e6:	7efb      	ldrb	r3, [r7, #27]
 80034e8:	3301      	adds	r3, #1
 80034ea:	76fb      	strb	r3, [r7, #27]
 80034ec:	7efb      	ldrb	r3, [r7, #27]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d999      	bls.n	8003426 <ST7789_Draw_DATA+0xbe>
		}
	}

	// Draw the Digits
	for (uint8_t c = 0; c < 3; c++) {		// Loop digits
 80034f2:	2300      	movs	r3, #0
 80034f4:	75bb      	strb	r3, [r7, #22]
 80034f6:	e067      	b.n	80035c8 <ST7789_Draw_DATA+0x260>
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80034f8:	2300      	movs	r3, #0
 80034fa:	757b      	strb	r3, [r7, #21]
 80034fc:	e05e      	b.n	80035bc <ST7789_Draw_DATA+0x254>
				uint8_t line_byte = TXT_NUM[digits[c]*7 + l];
 80034fe:	7dbb      	ldrb	r3, [r7, #22]
 8003500:	3328      	adds	r3, #40	@ 0x28
 8003502:	443b      	add	r3, r7
 8003504:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8003508:	461a      	mov	r2, r3
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1a9a      	subs	r2, r3, r2
 8003510:	7d7b      	ldrb	r3, [r7, #21]
 8003512:	4413      	add	r3, r2
 8003514:	4a34      	ldr	r2, [pc, #208]	@ (80035e8 <ST7789_Draw_DATA+0x280>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	747b      	strb	r3, [r7, #17]

				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800351a:	2300      	movs	r3, #0
 800351c:	753b      	strb	r3, [r7, #20]
 800351e:	e043      	b.n	80035a8 <ST7789_Draw_DATA+0x240>
					if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 8003520:	7c7a      	ldrb	r2, [r7, #17]
 8003522:	7d3b      	ldrb	r3, [r7, #20]
 8003524:	fa42 f303 	asr.w	r3, r2, r3
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d038      	beq.n	80035a2 <ST7789_Draw_DATA+0x23a>
						for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003530:	2300      	movs	r3, #0
 8003532:	74fb      	strb	r3, [r7, #19]
 8003534:	e032      	b.n	800359c <ST7789_Draw_DATA+0x234>
							for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 8003536:	2300      	movs	r3, #0
 8003538:	74bb      	strb	r3, [r7, #18]
 800353a:	e029      	b.n	8003590 <ST7789_Draw_DATA+0x228>
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor    ] = 0xFF;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6919      	ldr	r1, [r3, #16]
 8003540:	7cba      	ldrb	r2, [r7, #18]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	461a      	mov	r2, r3
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	441a      	add	r2, r3
 8003550:	7d3b      	ldrb	r3, [r7, #20]
 8003552:	4413      	add	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	461a      	mov	r2, r3
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	4413      	add	r3, r2
 800355c:	440b      	add	r3, r1
 800355e:	22ff      	movs	r2, #255	@ 0xff
 8003560:	701a      	strb	r2, [r3, #0]
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor + 1] = 0xFF;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	7cba      	ldrb	r2, [r7, #18]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	461a      	mov	r2, r3
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	441a      	add	r2, r3
 8003576:	7d3b      	ldrb	r3, [r7, #20]
 8003578:	4413      	add	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	461a      	mov	r2, r3
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	4413      	add	r3, r2
 8003582:	3301      	adds	r3, #1
 8003584:	440b      	add	r3, r1
 8003586:	22ff      	movs	r2, #255	@ 0xff
 8003588:	701a      	strb	r2, [r3, #0]
							for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 800358a:	7cbb      	ldrb	r3, [r7, #18]
 800358c:	3301      	adds	r3, #1
 800358e:	74bb      	strb	r3, [r7, #18]
 8003590:	7cbb      	ldrb	r3, [r7, #18]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0d2      	beq.n	800353c <ST7789_Draw_DATA+0x1d4>
						for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	3301      	adds	r3, #1
 800359a:	74fb      	strb	r3, [r7, #19]
 800359c:	7cfb      	ldrb	r3, [r7, #19]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0c9      	beq.n	8003536 <ST7789_Draw_DATA+0x1ce>
				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 80035a2:	7d3b      	ldrb	r3, [r7, #20]
 80035a4:	3301      	adds	r3, #1
 80035a6:	753b      	strb	r3, [r7, #20]
 80035a8:	7d3b      	ldrb	r3, [r7, #20]
 80035aa:	2b07      	cmp	r3, #7
 80035ac:	d9b8      	bls.n	8003520 <ST7789_Draw_DATA+0x1b8>
							}
						}
					}
				}
				cursor -= LCD_WIDTH*FONTSCALE_FRAMETIME*2;
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80035b4:	623b      	str	r3, [r7, #32]
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 80035b6:	7d7b      	ldrb	r3, [r7, #21]
 80035b8:	3301      	adds	r3, #1
 80035ba:	757b      	strb	r3, [r7, #21]
 80035bc:	7d7b      	ldrb	r3, [r7, #21]
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d99d      	bls.n	80034fe <ST7789_Draw_DATA+0x196>
	for (uint8_t c = 0; c < 3; c++) {		// Loop digits
 80035c2:	7dbb      	ldrb	r3, [r7, #22]
 80035c4:	3301      	adds	r3, #1
 80035c6:	75bb      	strb	r3, [r7, #22]
 80035c8:	7dbb      	ldrb	r3, [r7, #22]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d994      	bls.n	80034f8 <ST7789_Draw_DATA+0x190>
			}
		}

	return SUCCESS;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	@ 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	51eb851f 	.word	0x51eb851f
 80035dc:	cccccccd 	.word	0xcccccccd
 80035e0:	00025444 	.word	0x00025444
 80035e4:	0801b66c 	.word	0x0801b66c
 80035e8:	0801b684 	.word	0x0801b684

080035ec <ST7789_DMATransmitCplt>:

void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	// Flag idle
	hst7789->spi_state = 0;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	711a      	strb	r2, [r3, #4]

	// Check the state of the update sequence
	if (hst7789->update_sequence < 2) {
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7d1b      	ldrb	r3, [r3, #20]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d80b      	bhi.n	800361a <ST7789_DMATransmitCplt+0x2e>
		// Immediately start the next update in the sequence
		hst7789->update_sequence++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7d1b      	ldrb	r3, [r3, #20]
 8003606:	3301      	adds	r3, #1
 8003608:	b2da      	uxtb	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	751a      	strb	r2, [r3, #20]
		ST7789_UpdateSector(hst7789, hst7789->update_sequence);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7d1b      	ldrb	r3, [r3, #20]
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fd8a 	bl	800312e <ST7789_UpdateSector>
	}
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800362a:	2003      	movs	r0, #3
 800362c:	f001 fc3e 	bl	8004eac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003630:	f00b fe14 	bl	800f25c <HAL_RCC_GetSysClockFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b15      	ldr	r3, [pc, #84]	@ (800368c <HAL_Init+0x68>)
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	4913      	ldr	r1, [pc, #76]	@ (8003690 <HAL_Init+0x6c>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
 800364c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800364e:	4b0f      	ldr	r3, [pc, #60]	@ (800368c <HAL_Init+0x68>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	4a0e      	ldr	r2, [pc, #56]	@ (8003690 <HAL_Init+0x6c>)
 8003658:	5cd3      	ldrb	r3, [r2, r3]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	4a0b      	ldr	r2, [pc, #44]	@ (8003694 <HAL_Init+0x70>)
 8003666:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003668:	4a0b      	ldr	r2, [pc, #44]	@ (8003698 <HAL_Init+0x74>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800366e:	200f      	movs	r0, #15
 8003670:	f000 f814 	bl	800369c <HAL_InitTick>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e002      	b.n	8003684 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800367e:	f7fe fd1f 	bl	80020c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	58024400 	.word	0x58024400
 8003690:	0801b334 	.word	0x0801b334
 8003694:	24000244 	.word	0x24000244
 8003698:	24000240 	.word	0x24000240

0800369c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80036a4:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_InitTick+0x60>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e021      	b.n	80036f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80036b0:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <HAL_InitTick+0x64>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_InitTick+0x60>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036be:	fbb3 f3f1 	udiv	r3, r3, r1
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fc23 	bl	8004f12 <HAL_SYSTICK_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00e      	b.n	80036f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b0f      	cmp	r3, #15
 80036da:	d80a      	bhi.n	80036f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036dc:	2200      	movs	r2, #0
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f001 fbed 	bl	8004ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036e8:	4a06      	ldr	r2, [pc, #24]	@ (8003704 <HAL_InitTick+0x68>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	2400024c 	.word	0x2400024c
 8003700:	24000240 	.word	0x24000240
 8003704:	24000248 	.word	0x24000248

08003708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_IncTick+0x20>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	4b06      	ldr	r3, [pc, #24]	@ (800372c <HAL_IncTick+0x24>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4413      	add	r3, r2
 8003718:	4a04      	ldr	r2, [pc, #16]	@ (800372c <HAL_IncTick+0x24>)
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	2400024c 	.word	0x2400024c
 800372c:	240470ec 	.word	0x240470ec

08003730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return uwTick;
 8003734:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <HAL_GetTick+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	240470ec 	.word	0x240470ec

08003748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003750:	f7ff ffee 	bl	8003730 <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d005      	beq.n	800376e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <HAL_Delay+0x44>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800376e:	bf00      	nop
 8003770:	f7ff ffde 	bl	8003730 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	429a      	cmp	r2, r3
 800377e:	d8f7      	bhi.n	8003770 <HAL_Delay+0x28>
  {
  }
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2400024c 	.word	0x2400024c

08003790 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003794:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <HAL_GetREVID+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0c1b      	lsrs	r3, r3, #16
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	5c001000 	.word	0x5c001000

080037a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	609a      	str	r2, [r3, #8]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <LL_ADC_SetChannelPreselection+0x24>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	2201      	movs	r2, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	e015      	b.n	8003860 <LL_ADC_SetChannelPreselection+0x50>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e003      	b.n	8003856 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2201      	movs	r2, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	69d2      	ldr	r2, [r2, #28]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003876:	b480      	push	{r7}
 8003878:	b087      	sub	sp, #28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3360      	adds	r3, #96	@ 0x60
 8003888:	461a      	mov	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	430b      	orrs	r3, r1
 80038a4:	431a      	orrs	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	611a      	str	r2, [r3, #16]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3360      	adds	r3, #96	@ 0x60
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	431a      	orrs	r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	601a      	str	r2, [r3, #0]
  }
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3330      	adds	r3, #48	@ 0x30
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	4413      	add	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	211f      	movs	r1, #31
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	0e9b      	lsrs	r3, r3, #26
 800397c:	f003 011f 	and.w	r1, r3, #31
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	431a      	orrs	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60da      	str	r2, [r3, #12]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b087      	sub	sp, #28
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3314      	adds	r3, #20
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	0e5b      	lsrs	r3, r3, #25
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	4413      	add	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0d1b      	lsrs	r3, r3, #20
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2107      	movs	r1, #7
 80039f0:	fa01 f303 	lsl.w	r3, r1, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	401a      	ands	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	0d1b      	lsrs	r3, r3, #20
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	431a      	orrs	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f003 0318 	and.w	r3, r3, #24
 8003a3a:	4908      	ldr	r1, [pc, #32]	@ (8003a5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a3c:	40d9      	lsrs	r1, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	400b      	ands	r3, r1
 8003a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	000fffff 	.word	0x000fffff

08003a60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6093      	str	r3, [r2, #8]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	5fffffc0 	.word	0x5fffffc0

08003aa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab4:	d101      	bne.n	8003aba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <LL_ADC_EnableInternalRegulator+0x24>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	6fffffc0 	.word	0x6fffffc0

08003af0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b04:	d101      	bne.n	8003b0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <LL_ADC_Enable+0x24>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	7fffffc0 	.word	0x7fffffc0

08003b40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <LL_ADC_IsEnabled+0x18>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <LL_ADC_IsEnabled+0x1a>
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <LL_ADC_REG_StartConversion+0x24>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	f043 0204 	orr.w	r2, r3, #4
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	7fffffc0 	.word	0x7fffffc0

08003b90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d101      	bne.n	8003ba8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d101      	bne.n	8003bce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b089      	sub	sp, #36	@ 0x24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e18f      	b.n	8003f16 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fe fa75 	bl	80020f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff3f 	bl	8003aa0 <LL_ADC_IsDeepPowerDownEnabled>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ff25 	bl	8003a7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff5a 	bl	8003af0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d114      	bne.n	8003c6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff ff3e 	bl	8003ac8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c4c:	4b87      	ldr	r3, [pc, #540]	@ (8003e6c <HAL_ADC_Init+0x290>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	4a87      	ldr	r2, [pc, #540]	@ (8003e70 <HAL_ADC_Init+0x294>)
 8003c54:	fba2 2303 	umull	r2, r3, r2, r3
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c5e:	e002      	b.n	8003c66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f9      	bne.n	8003c60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff3d 	bl	8003af0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c80:	f043 0210 	orr.w	r2, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	f043 0201 	orr.w	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff77 	bl	8003b90 <LL_ADC_REG_IsConversionOngoing>
 8003ca2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f040 8129 	bne.w	8003f04 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f040 8125 	bne.w	8003f04 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003cc2:	f043 0202 	orr.w	r2, r3, #2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff36 	bl	8003b40 <LL_ADC_IsEnabled>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d136      	bne.n	8003d48 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a65      	ldr	r2, [pc, #404]	@ (8003e74 <HAL_ADC_Init+0x298>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_ADC_Init+0x112>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a63      	ldr	r2, [pc, #396]	@ (8003e78 <HAL_ADC_Init+0x29c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10e      	bne.n	8003d0c <HAL_ADC_Init+0x130>
 8003cee:	4861      	ldr	r0, [pc, #388]	@ (8003e74 <HAL_ADC_Init+0x298>)
 8003cf0:	f7ff ff26 	bl	8003b40 <LL_ADC_IsEnabled>
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	4860      	ldr	r0, [pc, #384]	@ (8003e78 <HAL_ADC_Init+0x29c>)
 8003cf8:	f7ff ff22 	bl	8003b40 <LL_ADC_IsEnabled>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4323      	orrs	r3, r4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e008      	b.n	8003d1e <HAL_ADC_Init+0x142>
 8003d0c:	485b      	ldr	r0, [pc, #364]	@ (8003e7c <HAL_ADC_Init+0x2a0>)
 8003d0e:	f7ff ff17 	bl	8003b40 <LL_ADC_IsEnabled>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d012      	beq.n	8003d48 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a53      	ldr	r2, [pc, #332]	@ (8003e74 <HAL_ADC_Init+0x298>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_ADC_Init+0x15a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a51      	ldr	r2, [pc, #324]	@ (8003e78 <HAL_ADC_Init+0x29c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_Init+0x15e>
 8003d36:	4a52      	ldr	r2, [pc, #328]	@ (8003e80 <HAL_ADC_Init+0x2a4>)
 8003d38:	e000      	b.n	8003d3c <HAL_ADC_Init+0x160>
 8003d3a:	4a52      	ldr	r2, [pc, #328]	@ (8003e84 <HAL_ADC_Init+0x2a8>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f7ff fd30 	bl	80037a8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003d48:	f7ff fd22 	bl	8003790 <HAL_GetREVID>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d914      	bls.n	8003d80 <HAL_ADC_Init+0x1a4>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d110      	bne.n	8003d80 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7d5b      	ldrb	r3, [r3, #21]
 8003d62:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d68:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7f1b      	ldrb	r3, [r3, #28]
 8003d74:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d76:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d78:	f043 030c 	orr.w	r3, r3, #12
 8003d7c:	61bb      	str	r3, [r7, #24]
 8003d7e:	e00d      	b.n	8003d9c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7d5b      	ldrb	r3, [r3, #21]
 8003d84:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d8a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d90:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7f1b      	ldrb	r3, [r3, #28]
 8003d96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7f1b      	ldrb	r3, [r3, #28]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	045b      	lsls	r3, r3, #17
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8003e88 <HAL_ADC_Init+0x2ac>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	69b9      	ldr	r1, [r7, #24]
 8003dde:	430b      	orrs	r3, r1
 8003de0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fed2 	bl	8003b90 <LL_ADC_REG_IsConversionOngoing>
 8003dec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fedf 	bl	8003bb6 <LL_ADC_INJ_IsConversionOngoing>
 8003df8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d15f      	bne.n	8003ec0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d15c      	bne.n	8003ec0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7d1b      	ldrb	r3, [r3, #20]
 8003e0a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e8c <HAL_ADC_Init+0x2b0>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	69b9      	ldr	r1, [r7, #24]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d130      	bne.n	8003e94 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	4b14      	ldr	r3, [pc, #80]	@ (8003e90 <HAL_ADC_Init+0x2b4>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e46:	3a01      	subs	r2, #1
 8003e48:	0411      	lsls	r1, r2, #16
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003e54:	4311      	orrs	r1, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	611a      	str	r2, [r3, #16]
 8003e68:	e01c      	b.n	8003ea4 <HAL_ADC_Init+0x2c8>
 8003e6a:	bf00      	nop
 8003e6c:	24000240 	.word	0x24000240
 8003e70:	053e2d63 	.word	0x053e2d63
 8003e74:	40022000 	.word	0x40022000
 8003e78:	40022100 	.word	0x40022100
 8003e7c:	58026000 	.word	0x58026000
 8003e80:	40022300 	.word	0x40022300
 8003e84:	58026300 	.word	0x58026300
 8003e88:	fff0c003 	.word	0xfff0c003
 8003e8c:	ffffbffc 	.word	0xffffbffc
 8003e90:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fd16 	bl	80048ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	f023 010f 	bic.w	r1, r3, #15
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	1e5a      	subs	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ee0:	e007      	b.n	8003ef2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 020f 	bic.w	r2, r2, #15
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f02:	e007      	b.n	8003f14 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f08:	f043 0210 	orr.w	r2, r3, #16
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3724      	adds	r7, #36	@ 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd90      	pop	{r4, r7, pc}
 8003f1e:	bf00      	nop

08003f20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a55      	ldr	r2, [pc, #340]	@ (8004088 <HAL_ADC_Start_DMA+0x168>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_ADC_Start_DMA+0x20>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a54      	ldr	r2, [pc, #336]	@ (800408c <HAL_ADC_Start_DMA+0x16c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_Start_DMA+0x24>
 8003f40:	4b53      	ldr	r3, [pc, #332]	@ (8004090 <HAL_ADC_Start_DMA+0x170>)
 8003f42:	e000      	b.n	8003f46 <HAL_ADC_Start_DMA+0x26>
 8003f44:	4b53      	ldr	r3, [pc, #332]	@ (8004094 <HAL_ADC_Start_DMA+0x174>)
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fd8a 	bl	8003a60 <LL_ADC_GetMultimode>
 8003f4c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fe1c 	bl	8003b90 <LL_ADC_REG_IsConversionOngoing>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f040 808c 	bne.w	8004078 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_Start_DMA+0x4e>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e087      	b.n	800407e <HAL_ADC_Start_DMA+0x15e>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	d002      	beq.n	8003f88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	d170      	bne.n	800406a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fb91 	bl	80046b0 <ADC_Enable>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d163      	bne.n	8004060 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_ADC_Start_DMA+0x178>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a37      	ldr	r2, [pc, #220]	@ (800408c <HAL_ADC_Start_DMA+0x16c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d002      	beq.n	8003fb8 <HAL_ADC_Start_DMA+0x98>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	e000      	b.n	8003fba <HAL_ADC_Start_DMA+0x9a>
 8003fb8:	4b33      	ldr	r3, [pc, #204]	@ (8004088 <HAL_ADC_Start_DMA+0x168>)
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d002      	beq.n	8003fc8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe4:	f023 0206 	bic.w	r2, r3, #6
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fec:	e002      	b.n	8003ff4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff8:	4a28      	ldr	r2, [pc, #160]	@ (800409c <HAL_ADC_Start_DMA+0x17c>)
 8003ffa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004000:	4a27      	ldr	r2, [pc, #156]	@ (80040a0 <HAL_ADC_Start_DMA+0x180>)
 8004002:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004008:	4a26      	ldr	r2, [pc, #152]	@ (80040a4 <HAL_ADC_Start_DMA+0x184>)
 800400a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	221c      	movs	r2, #28
 8004012:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0210 	orr.w	r2, r2, #16
 800402a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f7ff fcb0 	bl	800399c <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3340      	adds	r3, #64	@ 0x40
 8004046:	4619      	mov	r1, r3
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f001 fb42 	bl	80056d4 <HAL_DMA_Start_IT>
 8004050:	4603      	mov	r3, r0
 8004052:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fd85 	bl	8003b68 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800405e:	e00d      	b.n	800407c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8004068:	e008      	b.n	800407c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004076:	e001      	b.n	800407c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004078:	2302      	movs	r3, #2
 800407a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40022000 	.word	0x40022000
 800408c:	40022100 	.word	0x40022100
 8004090:	40022300 	.word	0x40022300
 8004094:	58026300 	.word	0x58026300
 8004098:	fffff0fe 	.word	0xfffff0fe
 800409c:	080047c5 	.word	0x080047c5
 80040a0:	0800489d 	.word	0x0800489d
 80040a4:	080048b9 	.word	0x080048b9

080040a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b08d      	sub	sp, #52	@ 0x34
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a65      	ldr	r2, [pc, #404]	@ (8004280 <HAL_ADC_ConfigChannel+0x1b0>)
 80040ea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x2a>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e2c7      	b.n	800468a <HAL_ADC_ConfigChannel+0x5ba>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fd42 	bl	8003b90 <LL_ADC_REG_IsConversionOngoing>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 82ac 	bne.w	800466c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	db2c      	blt.n	8004176 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004124:	2b00      	cmp	r3, #0
 8004126:	d108      	bne.n	800413a <HAL_ADC_ConfigChannel+0x6a>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	0e9b      	lsrs	r3, r3, #26
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2201      	movs	r2, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	e016      	b.n	8004168 <HAL_ADC_ConfigChannel+0x98>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	613b      	str	r3, [r7, #16]
  return result;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8004152:	2320      	movs	r3, #32
 8004154:	e003      	b.n	800415e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2201      	movs	r2, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	69d1      	ldr	r1, [r2, #28]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	430b      	orrs	r3, r1
 8004174:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	f7ff fbde 	bl	8003944 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fcff 	bl	8003b90 <LL_ADC_REG_IsConversionOngoing>
 8004192:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fd0c 	bl	8003bb6 <LL_ADC_INJ_IsConversionOngoing>
 800419e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 80b8 	bne.w	8004318 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 80b4 	bne.w	8004318 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	461a      	mov	r2, r3
 80041be:	f7ff fc00 	bl	80039c2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041c2:	4b30      	ldr	r3, [pc, #192]	@ (8004284 <HAL_ADC_ConfigChannel+0x1b4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80041ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041ce:	d10b      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x118>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	089b      	lsrs	r3, r3, #2
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	e01d      	b.n	8004224 <HAL_ADC_ConfigChannel+0x154>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_ADC_ConfigChannel+0x13e>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	e00a      	b.n	8004224 <HAL_ADC_ConfigChannel+0x154>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	089b      	lsrs	r3, r3, #2
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b04      	cmp	r3, #4
 800422c:	d02c      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6919      	ldr	r1, [r3, #16]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f7ff fb1b 	bl	8003876 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6919      	ldr	r1, [r3, #16]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	7e5b      	ldrb	r3, [r3, #25]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d102      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x186>
 8004250:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004254:	e000      	b.n	8004258 <HAL_ADC_ConfigChannel+0x188>
 8004256:	2300      	movs	r3, #0
 8004258:	461a      	mov	r2, r3
 800425a:	f7ff fb45 	bl	80038e8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6919      	ldr	r1, [r3, #16]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	7e1b      	ldrb	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d102      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x1a4>
 800426e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004272:	e000      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1a6>
 8004274:	2300      	movs	r3, #0
 8004276:	461a      	mov	r2, r3
 8004278:	f7ff fb1d 	bl	80038b6 <LL_ADC_SetDataRightShift>
 800427c:	e04c      	b.n	8004318 <HAL_ADC_ConfigChannel+0x248>
 800427e:	bf00      	nop
 8004280:	47ff0000 	.word	0x47ff0000
 8004284:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800428e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	069b      	lsls	r3, r3, #26
 8004298:	429a      	cmp	r2, r3
 800429a:	d107      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042aa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	069b      	lsls	r3, r3, #26
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042ce:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	069b      	lsls	r3, r3, #26
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d107      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042f2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	069b      	lsls	r3, r3, #26
 8004304:	429a      	cmp	r2, r3
 8004306:	d107      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004316:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fc0f 	bl	8003b40 <LL_ADC_IsEnabled>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 81aa 	bne.w	800467e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6819      	ldr	r1, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	461a      	mov	r2, r3
 8004338:	f7ff fb6e 	bl	8003a18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4a87      	ldr	r2, [pc, #540]	@ (8004560 <HAL_ADC_ConfigChannel+0x490>)
 8004342:	4293      	cmp	r3, r2
 8004344:	f040 809a 	bne.w	800447c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4984      	ldr	r1, [pc, #528]	@ (8004564 <HAL_ADC_ConfigChannel+0x494>)
 8004352:	428b      	cmp	r3, r1
 8004354:	d147      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x316>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4983      	ldr	r1, [pc, #524]	@ (8004568 <HAL_ADC_ConfigChannel+0x498>)
 800435c:	428b      	cmp	r3, r1
 800435e:	d040      	beq.n	80043e2 <HAL_ADC_ConfigChannel+0x312>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4981      	ldr	r1, [pc, #516]	@ (800456c <HAL_ADC_ConfigChannel+0x49c>)
 8004366:	428b      	cmp	r3, r1
 8004368:	d039      	beq.n	80043de <HAL_ADC_ConfigChannel+0x30e>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4980      	ldr	r1, [pc, #512]	@ (8004570 <HAL_ADC_ConfigChannel+0x4a0>)
 8004370:	428b      	cmp	r3, r1
 8004372:	d032      	beq.n	80043da <HAL_ADC_ConfigChannel+0x30a>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	497e      	ldr	r1, [pc, #504]	@ (8004574 <HAL_ADC_ConfigChannel+0x4a4>)
 800437a:	428b      	cmp	r3, r1
 800437c:	d02b      	beq.n	80043d6 <HAL_ADC_ConfigChannel+0x306>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	497d      	ldr	r1, [pc, #500]	@ (8004578 <HAL_ADC_ConfigChannel+0x4a8>)
 8004384:	428b      	cmp	r3, r1
 8004386:	d024      	beq.n	80043d2 <HAL_ADC_ConfigChannel+0x302>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	497b      	ldr	r1, [pc, #492]	@ (800457c <HAL_ADC_ConfigChannel+0x4ac>)
 800438e:	428b      	cmp	r3, r1
 8004390:	d01d      	beq.n	80043ce <HAL_ADC_ConfigChannel+0x2fe>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	497a      	ldr	r1, [pc, #488]	@ (8004580 <HAL_ADC_ConfigChannel+0x4b0>)
 8004398:	428b      	cmp	r3, r1
 800439a:	d016      	beq.n	80043ca <HAL_ADC_ConfigChannel+0x2fa>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4978      	ldr	r1, [pc, #480]	@ (8004584 <HAL_ADC_ConfigChannel+0x4b4>)
 80043a2:	428b      	cmp	r3, r1
 80043a4:	d00f      	beq.n	80043c6 <HAL_ADC_ConfigChannel+0x2f6>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4977      	ldr	r1, [pc, #476]	@ (8004588 <HAL_ADC_ConfigChannel+0x4b8>)
 80043ac:	428b      	cmp	r3, r1
 80043ae:	d008      	beq.n	80043c2 <HAL_ADC_ConfigChannel+0x2f2>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4975      	ldr	r1, [pc, #468]	@ (800458c <HAL_ADC_ConfigChannel+0x4bc>)
 80043b6:	428b      	cmp	r3, r1
 80043b8:	d101      	bne.n	80043be <HAL_ADC_ConfigChannel+0x2ee>
 80043ba:	4b75      	ldr	r3, [pc, #468]	@ (8004590 <HAL_ADC_ConfigChannel+0x4c0>)
 80043bc:	e05a      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043be:	2300      	movs	r3, #0
 80043c0:	e058      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043c2:	4b74      	ldr	r3, [pc, #464]	@ (8004594 <HAL_ADC_ConfigChannel+0x4c4>)
 80043c4:	e056      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043c6:	4b74      	ldr	r3, [pc, #464]	@ (8004598 <HAL_ADC_ConfigChannel+0x4c8>)
 80043c8:	e054      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004584 <HAL_ADC_ConfigChannel+0x4b4>)
 80043cc:	e052      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004580 <HAL_ADC_ConfigChannel+0x4b0>)
 80043d0:	e050      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043d2:	4b72      	ldr	r3, [pc, #456]	@ (800459c <HAL_ADC_ConfigChannel+0x4cc>)
 80043d4:	e04e      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043d6:	4b72      	ldr	r3, [pc, #456]	@ (80045a0 <HAL_ADC_ConfigChannel+0x4d0>)
 80043d8:	e04c      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043da:	4b72      	ldr	r3, [pc, #456]	@ (80045a4 <HAL_ADC_ConfigChannel+0x4d4>)
 80043dc:	e04a      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043de:	4b72      	ldr	r3, [pc, #456]	@ (80045a8 <HAL_ADC_ConfigChannel+0x4d8>)
 80043e0:	e048      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e046      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4970      	ldr	r1, [pc, #448]	@ (80045ac <HAL_ADC_ConfigChannel+0x4dc>)
 80043ec:	428b      	cmp	r3, r1
 80043ee:	d140      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x3a2>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	495c      	ldr	r1, [pc, #368]	@ (8004568 <HAL_ADC_ConfigChannel+0x498>)
 80043f6:	428b      	cmp	r3, r1
 80043f8:	d039      	beq.n	800446e <HAL_ADC_ConfigChannel+0x39e>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	495b      	ldr	r1, [pc, #364]	@ (800456c <HAL_ADC_ConfigChannel+0x49c>)
 8004400:	428b      	cmp	r3, r1
 8004402:	d032      	beq.n	800446a <HAL_ADC_ConfigChannel+0x39a>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4959      	ldr	r1, [pc, #356]	@ (8004570 <HAL_ADC_ConfigChannel+0x4a0>)
 800440a:	428b      	cmp	r3, r1
 800440c:	d02b      	beq.n	8004466 <HAL_ADC_ConfigChannel+0x396>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4958      	ldr	r1, [pc, #352]	@ (8004574 <HAL_ADC_ConfigChannel+0x4a4>)
 8004414:	428b      	cmp	r3, r1
 8004416:	d024      	beq.n	8004462 <HAL_ADC_ConfigChannel+0x392>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4956      	ldr	r1, [pc, #344]	@ (8004578 <HAL_ADC_ConfigChannel+0x4a8>)
 800441e:	428b      	cmp	r3, r1
 8004420:	d01d      	beq.n	800445e <HAL_ADC_ConfigChannel+0x38e>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4955      	ldr	r1, [pc, #340]	@ (800457c <HAL_ADC_ConfigChannel+0x4ac>)
 8004428:	428b      	cmp	r3, r1
 800442a:	d016      	beq.n	800445a <HAL_ADC_ConfigChannel+0x38a>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4953      	ldr	r1, [pc, #332]	@ (8004580 <HAL_ADC_ConfigChannel+0x4b0>)
 8004432:	428b      	cmp	r3, r1
 8004434:	d00f      	beq.n	8004456 <HAL_ADC_ConfigChannel+0x386>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4952      	ldr	r1, [pc, #328]	@ (8004584 <HAL_ADC_ConfigChannel+0x4b4>)
 800443c:	428b      	cmp	r3, r1
 800443e:	d008      	beq.n	8004452 <HAL_ADC_ConfigChannel+0x382>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4951      	ldr	r1, [pc, #324]	@ (800458c <HAL_ADC_ConfigChannel+0x4bc>)
 8004446:	428b      	cmp	r3, r1
 8004448:	d101      	bne.n	800444e <HAL_ADC_ConfigChannel+0x37e>
 800444a:	4b51      	ldr	r3, [pc, #324]	@ (8004590 <HAL_ADC_ConfigChannel+0x4c0>)
 800444c:	e012      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 800444e:	2300      	movs	r3, #0
 8004450:	e010      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 8004452:	4b51      	ldr	r3, [pc, #324]	@ (8004598 <HAL_ADC_ConfigChannel+0x4c8>)
 8004454:	e00e      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 8004456:	4b4b      	ldr	r3, [pc, #300]	@ (8004584 <HAL_ADC_ConfigChannel+0x4b4>)
 8004458:	e00c      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 800445a:	4b49      	ldr	r3, [pc, #292]	@ (8004580 <HAL_ADC_ConfigChannel+0x4b0>)
 800445c:	e00a      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 800445e:	4b4f      	ldr	r3, [pc, #316]	@ (800459c <HAL_ADC_ConfigChannel+0x4cc>)
 8004460:	e008      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 8004462:	4b4f      	ldr	r3, [pc, #316]	@ (80045a0 <HAL_ADC_ConfigChannel+0x4d0>)
 8004464:	e006      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 8004466:	4b4f      	ldr	r3, [pc, #316]	@ (80045a4 <HAL_ADC_ConfigChannel+0x4d4>)
 8004468:	e004      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 800446a:	4b4f      	ldr	r3, [pc, #316]	@ (80045a8 <HAL_ADC_ConfigChannel+0x4d8>)
 800446c:	e002      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_ADC_ConfigChannel+0x3a4>
 8004472:	2300      	movs	r3, #0
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7ff f9ca 	bl	8003810 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f280 80fc 	bge.w	800467e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a36      	ldr	r2, [pc, #216]	@ (8004564 <HAL_ADC_ConfigChannel+0x494>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_ADC_ConfigChannel+0x3ca>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a45      	ldr	r2, [pc, #276]	@ (80045ac <HAL_ADC_ConfigChannel+0x4dc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_ADC_ConfigChannel+0x3ce>
 800449a:	4b45      	ldr	r3, [pc, #276]	@ (80045b0 <HAL_ADC_ConfigChannel+0x4e0>)
 800449c:	e000      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x3d0>
 800449e:	4b45      	ldr	r3, [pc, #276]	@ (80045b4 <HAL_ADC_ConfigChannel+0x4e4>)
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff f9a7 	bl	80037f4 <LL_ADC_GetCommonPathInternalCh>
 80044a6:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004564 <HAL_ADC_ConfigChannel+0x494>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_ADC_ConfigChannel+0x3ec>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3d      	ldr	r2, [pc, #244]	@ (80045ac <HAL_ADC_ConfigChannel+0x4dc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d10e      	bne.n	80044da <HAL_ADC_ConfigChannel+0x40a>
 80044bc:	4829      	ldr	r0, [pc, #164]	@ (8004564 <HAL_ADC_ConfigChannel+0x494>)
 80044be:	f7ff fb3f 	bl	8003b40 <LL_ADC_IsEnabled>
 80044c2:	4604      	mov	r4, r0
 80044c4:	4839      	ldr	r0, [pc, #228]	@ (80045ac <HAL_ADC_ConfigChannel+0x4dc>)
 80044c6:	f7ff fb3b 	bl	8003b40 <LL_ADC_IsEnabled>
 80044ca:	4603      	mov	r3, r0
 80044cc:	4323      	orrs	r3, r4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e008      	b.n	80044ec <HAL_ADC_ConfigChannel+0x41c>
 80044da:	4837      	ldr	r0, [pc, #220]	@ (80045b8 <HAL_ADC_ConfigChannel+0x4e8>)
 80044dc:	f7ff fb30 	bl	8003b40 <LL_ADC_IsEnabled>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf0c      	ite	eq
 80044e6:	2301      	moveq	r3, #1
 80044e8:	2300      	movne	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80b3 	beq.w	8004658 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a31      	ldr	r2, [pc, #196]	@ (80045bc <HAL_ADC_ConfigChannel+0x4ec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d165      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x4f8>
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d160      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2b      	ldr	r2, [pc, #172]	@ (80045b8 <HAL_ADC_ConfigChannel+0x4e8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	f040 80b6 	bne.w	800467e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a13      	ldr	r2, [pc, #76]	@ (8004564 <HAL_ADC_ConfigChannel+0x494>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_ADC_ConfigChannel+0x456>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a22      	ldr	r2, [pc, #136]	@ (80045ac <HAL_ADC_ConfigChannel+0x4dc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_ADC_ConfigChannel+0x45a>
 8004526:	4a22      	ldr	r2, [pc, #136]	@ (80045b0 <HAL_ADC_ConfigChannel+0x4e0>)
 8004528:	e000      	b.n	800452c <HAL_ADC_ConfigChannel+0x45c>
 800452a:	4a22      	ldr	r2, [pc, #136]	@ (80045b4 <HAL_ADC_ConfigChannel+0x4e4>)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7ff f94a 	bl	80037ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800453a:	4b21      	ldr	r3, [pc, #132]	@ (80045c0 <HAL_ADC_ConfigChannel+0x4f0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	4a20      	ldr	r2, [pc, #128]	@ (80045c4 <HAL_ADC_ConfigChannel+0x4f4>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	3301      	adds	r3, #1
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800454e:	e002      	b.n	8004556 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1f9      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800455c:	e08f      	b.n	800467e <HAL_ADC_ConfigChannel+0x5ae>
 800455e:	bf00      	nop
 8004560:	47ff0000 	.word	0x47ff0000
 8004564:	40022000 	.word	0x40022000
 8004568:	04300002 	.word	0x04300002
 800456c:	08600004 	.word	0x08600004
 8004570:	0c900008 	.word	0x0c900008
 8004574:	10c00010 	.word	0x10c00010
 8004578:	14f00020 	.word	0x14f00020
 800457c:	2a000400 	.word	0x2a000400
 8004580:	2e300800 	.word	0x2e300800
 8004584:	32601000 	.word	0x32601000
 8004588:	43210000 	.word	0x43210000
 800458c:	4b840000 	.word	0x4b840000
 8004590:	4fb80000 	.word	0x4fb80000
 8004594:	47520000 	.word	0x47520000
 8004598:	36902000 	.word	0x36902000
 800459c:	25b00200 	.word	0x25b00200
 80045a0:	21800100 	.word	0x21800100
 80045a4:	1d500080 	.word	0x1d500080
 80045a8:	19200040 	.word	0x19200040
 80045ac:	40022100 	.word	0x40022100
 80045b0:	40022300 	.word	0x40022300
 80045b4:	58026300 	.word	0x58026300
 80045b8:	58026000 	.word	0x58026000
 80045bc:	cb840000 	.word	0xcb840000
 80045c0:	24000240 	.word	0x24000240
 80045c4:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a31      	ldr	r2, [pc, #196]	@ (8004694 <HAL_ADC_ConfigChannel+0x5c4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d11e      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x540>
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d119      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004698 <HAL_ADC_ConfigChannel+0x5c8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d14b      	bne.n	800467e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2c      	ldr	r2, [pc, #176]	@ (800469c <HAL_ADC_ConfigChannel+0x5cc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_ADC_ConfigChannel+0x52a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2a      	ldr	r2, [pc, #168]	@ (80046a0 <HAL_ADC_ConfigChannel+0x5d0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_ADC_ConfigChannel+0x52e>
 80045fa:	4a2a      	ldr	r2, [pc, #168]	@ (80046a4 <HAL_ADC_ConfigChannel+0x5d4>)
 80045fc:	e000      	b.n	8004600 <HAL_ADC_ConfigChannel+0x530>
 80045fe:	4a2a      	ldr	r2, [pc, #168]	@ (80046a8 <HAL_ADC_ConfigChannel+0x5d8>)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004606:	4619      	mov	r1, r3
 8004608:	4610      	mov	r0, r2
 800460a:	f7ff f8e0 	bl	80037ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800460e:	e036      	b.n	800467e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a25      	ldr	r2, [pc, #148]	@ (80046ac <HAL_ADC_ConfigChannel+0x5dc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d131      	bne.n	800467e <HAL_ADC_ConfigChannel+0x5ae>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d12c      	bne.n	800467e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1b      	ldr	r2, [pc, #108]	@ (8004698 <HAL_ADC_ConfigChannel+0x5c8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d127      	bne.n	800467e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1a      	ldr	r2, [pc, #104]	@ (800469c <HAL_ADC_ConfigChannel+0x5cc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_ADC_ConfigChannel+0x572>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a18      	ldr	r2, [pc, #96]	@ (80046a0 <HAL_ADC_ConfigChannel+0x5d0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d101      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x576>
 8004642:	4a18      	ldr	r2, [pc, #96]	@ (80046a4 <HAL_ADC_ConfigChannel+0x5d4>)
 8004644:	e000      	b.n	8004648 <HAL_ADC_ConfigChannel+0x578>
 8004646:	4a18      	ldr	r2, [pc, #96]	@ (80046a8 <HAL_ADC_ConfigChannel+0x5d8>)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f7ff f8bc 	bl	80037ce <LL_ADC_SetCommonPathInternalCh>
 8004656:	e012      	b.n	800467e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800466a:	e008      	b.n	800467e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004686:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800468a:	4618      	mov	r0, r3
 800468c:	3734      	adds	r7, #52	@ 0x34
 800468e:	46bd      	mov	sp, r7
 8004690:	bd90      	pop	{r4, r7, pc}
 8004692:	bf00      	nop
 8004694:	c7520000 	.word	0xc7520000
 8004698:	58026000 	.word	0x58026000
 800469c:	40022000 	.word	0x40022000
 80046a0:	40022100 	.word	0x40022100
 80046a4:	40022300 	.word	0x40022300
 80046a8:	58026300 	.word	0x58026300
 80046ac:	cfb80000 	.word	0xcfb80000

080046b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fa3f 	bl	8003b40 <LL_ADC_IsEnabled>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d16e      	bne.n	80047a6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	4b38      	ldr	r3, [pc, #224]	@ (80047b0 <ADC_Enable+0x100>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046da:	f043 0210 	orr.w	r2, r3, #16
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e05a      	b.n	80047a8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fa0e 	bl	8003b18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046fc:	f7ff f818 	bl	8003730 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2b      	ldr	r2, [pc, #172]	@ (80047b4 <ADC_Enable+0x104>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <ADC_Enable+0x66>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a29      	ldr	r2, [pc, #164]	@ (80047b8 <ADC_Enable+0x108>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <ADC_Enable+0x6a>
 8004716:	4b29      	ldr	r3, [pc, #164]	@ (80047bc <ADC_Enable+0x10c>)
 8004718:	e000      	b.n	800471c <ADC_Enable+0x6c>
 800471a:	4b29      	ldr	r3, [pc, #164]	@ (80047c0 <ADC_Enable+0x110>)
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f99f 	bl	8003a60 <LL_ADC_GetMultimode>
 8004722:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a23      	ldr	r2, [pc, #140]	@ (80047b8 <ADC_Enable+0x108>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d002      	beq.n	8004734 <ADC_Enable+0x84>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	e000      	b.n	8004736 <ADC_Enable+0x86>
 8004734:	4b1f      	ldr	r3, [pc, #124]	@ (80047b4 <ADC_Enable+0x104>)
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d130      	bne.n	80047a6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004744:	e028      	b.n	8004798 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff f9f8 	bl	8003b40 <LL_ADC_IsEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f9dc 	bl	8003b18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004760:	f7fe ffe6 	bl	8003730 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d914      	bls.n	8004798 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d00d      	beq.n	8004798 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004780:	f043 0210 	orr.w	r2, r3, #16
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478c:	f043 0201 	orr.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e007      	b.n	80047a8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d1cf      	bne.n	8004746 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	8000003f 	.word	0x8000003f
 80047b4:	40022000 	.word	0x40022000
 80047b8:	40022100 	.word	0x40022100
 80047bc:	40022300 	.word	0x40022300
 80047c0:	58026300 	.word	0x58026300

080047c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d14b      	bne.n	8004876 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d021      	beq.n	800483c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff f88e 	bl	800391e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d032      	beq.n	800486e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d12b      	bne.n	800486e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11f      	bne.n	800486e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	f043 0201 	orr.w	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
 800483a:	e018      	b.n	800486e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d111      	bne.n	800486e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d105      	bne.n	800486e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004866:	f043 0201 	orr.w	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7fd f8c6 	bl	8001a00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004874:	e00e      	b.n	8004894 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff fc1a 	bl	80040bc <HAL_ADC_ErrorCallback>
}
 8004888:	e004      	b.n	8004894 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4798      	blx	r3
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7ff fbfc 	bl	80040a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b0:	bf00      	nop
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7ff fbec 	bl	80040bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ae4 <ADC_ConfigureBoostMode+0x1f8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <ADC_ConfigureBoostMode+0x1c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a79      	ldr	r2, [pc, #484]	@ (8004ae8 <ADC_ConfigureBoostMode+0x1fc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d109      	bne.n	800491c <ADC_ConfigureBoostMode+0x30>
 8004908:	4b78      	ldr	r3, [pc, #480]	@ (8004aec <ADC_ConfigureBoostMode+0x200>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e008      	b.n	800492e <ADC_ConfigureBoostMode+0x42>
 800491c:	4b74      	ldr	r3, [pc, #464]	@ (8004af0 <ADC_ConfigureBoostMode+0x204>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01c      	beq.n	800496c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004932:	f00a fe0d 	bl	800f550 <HAL_RCC_GetHCLKFreq>
 8004936:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004940:	d010      	beq.n	8004964 <ADC_ConfigureBoostMode+0x78>
 8004942:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004946:	d873      	bhi.n	8004a30 <ADC_ConfigureBoostMode+0x144>
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494c:	d002      	beq.n	8004954 <ADC_ConfigureBoostMode+0x68>
 800494e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004952:	d16d      	bne.n	8004a30 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	60fb      	str	r3, [r7, #12]
        break;
 8004962:	e068      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	60fb      	str	r3, [r7, #12]
        break;
 800496a:	e064      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800496c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	f00c f852 	bl	8010a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8004978:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004982:	d051      	beq.n	8004a28 <ADC_ConfigureBoostMode+0x13c>
 8004984:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004988:	d854      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 800498a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800498e:	d047      	beq.n	8004a20 <ADC_ConfigureBoostMode+0x134>
 8004990:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004994:	d84e      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 8004996:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800499a:	d03d      	beq.n	8004a18 <ADC_ConfigureBoostMode+0x12c>
 800499c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049a0:	d848      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 80049a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049a6:	d033      	beq.n	8004a10 <ADC_ConfigureBoostMode+0x124>
 80049a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049ac:	d842      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 80049ae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049b2:	d029      	beq.n	8004a08 <ADC_ConfigureBoostMode+0x11c>
 80049b4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049b8:	d83c      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 80049ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80049be:	d01a      	beq.n	80049f6 <ADC_ConfigureBoostMode+0x10a>
 80049c0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80049c4:	d836      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 80049c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049ca:	d014      	beq.n	80049f6 <ADC_ConfigureBoostMode+0x10a>
 80049cc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80049d0:	d830      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 80049d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049d6:	d00e      	beq.n	80049f6 <ADC_ConfigureBoostMode+0x10a>
 80049d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049dc:	d82a      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 80049de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049e2:	d008      	beq.n	80049f6 <ADC_ConfigureBoostMode+0x10a>
 80049e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80049e8:	d824      	bhi.n	8004a34 <ADC_ConfigureBoostMode+0x148>
 80049ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049ee:	d002      	beq.n	80049f6 <ADC_ConfigureBoostMode+0x10a>
 80049f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049f4:	d11e      	bne.n	8004a34 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0c9b      	lsrs	r3, r3, #18
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	60fb      	str	r3, [r7, #12]
        break;
 8004a06:	e016      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	60fb      	str	r3, [r7, #12]
        break;
 8004a0e:	e012      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	60fb      	str	r3, [r7, #12]
        break;
 8004a16:	e00e      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	099b      	lsrs	r3, r3, #6
 8004a1c:	60fb      	str	r3, [r7, #12]
        break;
 8004a1e:	e00a      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	09db      	lsrs	r3, r3, #7
 8004a24:	60fb      	str	r3, [r7, #12]
        break;
 8004a26:	e006      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	60fb      	str	r3, [r7, #12]
        break;
 8004a2e:	e002      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a34:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004a36:	f7fe feab 	bl	8003790 <HAL_GetREVID>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d815      	bhi.n	8004a70 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <ADC_ConfigureBoostMode+0x208>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d908      	bls.n	8004a5e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a5a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a5c:	e03e      	b.n	8004adc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	e035      	b.n	8004adc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <ADC_ConfigureBoostMode+0x20c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d808      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a8c:	609a      	str	r2, [r3, #8]
}
 8004a8e:	e025      	b.n	8004adc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a1a      	ldr	r2, [pc, #104]	@ (8004afc <ADC_ConfigureBoostMode+0x210>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d80a      	bhi.n	8004aae <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aaa:	609a      	str	r2, [r3, #8]
}
 8004aac:	e016      	b.n	8004adc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a13      	ldr	r2, [pc, #76]	@ (8004b00 <ADC_ConfigureBoostMode+0x214>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d80a      	bhi.n	8004acc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac8:	609a      	str	r2, [r3, #8]
}
 8004aca:	e007      	b.n	8004adc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004ada:	609a      	str	r2, [r3, #8]
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40022000 	.word	0x40022000
 8004ae8:	40022100 	.word	0x40022100
 8004aec:	40022300 	.word	0x40022300
 8004af0:	58026300 	.word	0x58026300
 8004af4:	01312d00 	.word	0x01312d00
 8004af8:	005f5e10 	.word	0x005f5e10
 8004afc:	00bebc20 	.word	0x00bebc20
 8004b00:	017d7840 	.word	0x017d7840

08004b04 <LL_ADC_IsEnabled>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <LL_ADC_IsEnabled+0x18>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <LL_ADC_IsEnabled+0x1a>
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d101      	bne.n	8004b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b09f      	sub	sp, #124	@ 0x7c
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e0be      	b.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5c      	ldr	r2, [pc, #368]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d102      	bne.n	8004b8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b88:	4b5b      	ldr	r3, [pc, #364]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	e001      	b.n	8004b92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e09d      	b.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ffb9 	bl	8004b2a <LL_ADC_REG_IsConversionOngoing>
 8004bb8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff ffb3 	bl	8004b2a <LL_ADC_REG_IsConversionOngoing>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d17f      	bne.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d17c      	bne.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a47      	ldr	r2, [pc, #284]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a46      	ldr	r2, [pc, #280]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d101      	bne.n	8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004be4:	4b45      	ldr	r3, [pc, #276]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004be6:	e000      	b.n	8004bea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004be8:	4b45      	ldr	r3, [pc, #276]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bea:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d039      	beq.n	8004c68 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c04:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3a      	ldr	r2, [pc, #232]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a38      	ldr	r2, [pc, #224]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d10e      	bne.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004c1a:	4836      	ldr	r0, [pc, #216]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c1c:	f7ff ff72 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c20:	4604      	mov	r4, r0
 8004c22:	4835      	ldr	r0, [pc, #212]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c24:	f7ff ff6e 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4323      	orrs	r3, r4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e008      	b.n	8004c4a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004c38:	4832      	ldr	r0, [pc, #200]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c3a:	f7ff ff63 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d047      	beq.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	4b2d      	ldr	r3, [pc, #180]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	6811      	ldr	r1, [r2, #0]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	6892      	ldr	r2, [r2, #8]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	431a      	orrs	r2, r3
 8004c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c64:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c66:	e03a      	b.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d10e      	bne.n	8004ca6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004c88:	481a      	ldr	r0, [pc, #104]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004c8a:	f7ff ff3b 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4819      	ldr	r0, [pc, #100]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004c92:	f7ff ff37 	bl	8004b04 <LL_ADC_IsEnabled>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4323      	orrs	r3, r4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bf0c      	ite	eq
 8004c9e:	2301      	moveq	r3, #1
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	e008      	b.n	8004cb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ca6:	4817      	ldr	r0, [pc, #92]	@ (8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ca8:	f7ff ff2c 	bl	8004b04 <LL_ADC_IsEnabled>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d010      	beq.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	4b11      	ldr	r3, [pc, #68]	@ (8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cc6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cc8:	e009      	b.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004cdc:	e000      	b.n	8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cde:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ce8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	377c      	adds	r7, #124	@ 0x7c
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd90      	pop	{r4, r7, pc}
 8004cf4:	40022000 	.word	0x40022000
 8004cf8:	40022100 	.word	0x40022100
 8004cfc:	40022300 	.word	0x40022300
 8004d00:	58026300 	.word	0x58026300
 8004d04:	58026000 	.word	0x58026000
 8004d08:	fffff0e0 	.word	0xfffff0e0

08004d0c <__NVIC_SetPriorityGrouping>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <__NVIC_SetPriorityGrouping+0x40>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d28:	4013      	ands	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d34:	4b06      	ldr	r3, [pc, #24]	@ (8004d50 <__NVIC_SetPriorityGrouping+0x44>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d3a:	4a04      	ldr	r2, [pc, #16]	@ (8004d4c <__NVIC_SetPriorityGrouping+0x40>)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	60d3      	str	r3, [r2, #12]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	e000ed00 	.word	0xe000ed00
 8004d50:	05fa0000 	.word	0x05fa0000

08004d54 <__NVIC_GetPriorityGrouping>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d58:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <__NVIC_GetPriorityGrouping+0x18>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	f003 0307 	and.w	r3, r3, #7
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <__NVIC_EnableIRQ>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	db0b      	blt.n	8004d9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	f003 021f 	and.w	r2, r3, #31
 8004d88:	4907      	ldr	r1, [pc, #28]	@ (8004da8 <__NVIC_EnableIRQ+0x38>)
 8004d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2001      	movs	r0, #1
 8004d92:	fa00 f202 	lsl.w	r2, r0, r2
 8004d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	e000e100 	.word	0xe000e100

08004dac <__NVIC_SetPriority>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	db0a      	blt.n	8004dd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	490c      	ldr	r1, [pc, #48]	@ (8004df8 <__NVIC_SetPriority+0x4c>)
 8004dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dca:	0112      	lsls	r2, r2, #4
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	440b      	add	r3, r1
 8004dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004dd4:	e00a      	b.n	8004dec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	4908      	ldr	r1, [pc, #32]	@ (8004dfc <__NVIC_SetPriority+0x50>)
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	3b04      	subs	r3, #4
 8004de4:	0112      	lsls	r2, r2, #4
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	440b      	add	r3, r1
 8004dea:	761a      	strb	r2, [r3, #24]
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000e100 	.word	0xe000e100
 8004dfc:	e000ed00 	.word	0xe000ed00

08004e00 <NVIC_EncodePriority>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	b089      	sub	sp, #36	@ 0x24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f1c3 0307 	rsb	r3, r3, #7
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	bf28      	it	cs
 8004e1e:	2304      	movcs	r3, #4
 8004e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3304      	adds	r3, #4
 8004e26:	2b06      	cmp	r3, #6
 8004e28:	d902      	bls.n	8004e30 <NVIC_EncodePriority+0x30>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	3b03      	subs	r3, #3
 8004e2e:	e000      	b.n	8004e32 <NVIC_EncodePriority+0x32>
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43da      	mvns	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	401a      	ands	r2, r3
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e48:	f04f 31ff 	mov.w	r1, #4294967295
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	43d9      	mvns	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e58:	4313      	orrs	r3, r2
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3724      	adds	r7, #36	@ 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e78:	d301      	bcc.n	8004e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e00f      	b.n	8004e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea8 <SysTick_Config+0x40>)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e86:	210f      	movs	r1, #15
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	f7ff ff8e 	bl	8004dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <SysTick_Config+0x40>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e96:	4b04      	ldr	r3, [pc, #16]	@ (8004ea8 <SysTick_Config+0x40>)
 8004e98:	2207      	movs	r2, #7
 8004e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	e000e010 	.word	0xe000e010

08004eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff ff29 	bl	8004d0c <__NVIC_SetPriorityGrouping>
}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	4603      	mov	r3, r0
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ed0:	f7ff ff40 	bl	8004d54 <__NVIC_GetPriorityGrouping>
 8004ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	6978      	ldr	r0, [r7, #20]
 8004edc:	f7ff ff90 	bl	8004e00 <NVIC_EncodePriority>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff ff5f 	bl	8004dac <__NVIC_SetPriority>
}
 8004eee:	bf00      	nop
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	4603      	mov	r3, r0
 8004efe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff ff33 	bl	8004d70 <__NVIC_EnableIRQ>
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ffa4 	bl	8004e68 <SysTick_Config>
 8004f20:	4603      	mov	r3, r0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004f30:	f3bf 8f5f 	dmb	sy
}
 8004f34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004f36:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <HAL_MPU_Disable+0x28>)
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	4a06      	ldr	r2, [pc, #24]	@ (8004f54 <HAL_MPU_Disable+0x28>)
 8004f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004f42:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <HAL_MPU_Disable+0x2c>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	e000ed00 	.word	0xe000ed00
 8004f58:	e000ed90 	.word	0xe000ed90

08004f5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004f64:	4a0b      	ldr	r2, [pc, #44]	@ (8004f94 <HAL_MPU_Enable+0x38>)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <HAL_MPU_Enable+0x3c>)
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	4a09      	ldr	r2, [pc, #36]	@ (8004f98 <HAL_MPU_Enable+0x3c>)
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004f7a:	f3bf 8f4f 	dsb	sy
}
 8004f7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f80:	f3bf 8f6f 	isb	sy
}
 8004f84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000ed90 	.word	0xe000ed90
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	785a      	ldrb	r2, [r3, #1]
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <HAL_MPU_ConfigRegion+0x7c>)
 8004faa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004fac:	4b1a      	ldr	r3, [pc, #104]	@ (8005018 <HAL_MPU_ConfigRegion+0x7c>)
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	@ (8005018 <HAL_MPU_ConfigRegion+0x7c>)
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004fb8:	4a17      	ldr	r2, [pc, #92]	@ (8005018 <HAL_MPU_ConfigRegion+0x7c>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	7b1b      	ldrb	r3, [r3, #12]
 8004fc4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	7adb      	ldrb	r3, [r3, #11]
 8004fca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7a9b      	ldrb	r3, [r3, #10]
 8004fd2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7b5b      	ldrb	r3, [r3, #13]
 8004fda:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	7b9b      	ldrb	r3, [r3, #14]
 8004fe2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	7bdb      	ldrb	r3, [r3, #15]
 8004fea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	7a5b      	ldrb	r3, [r3, #9]
 8004ff2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	7a1b      	ldrb	r3, [r3, #8]
 8004ffa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004ffc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005004:	4a04      	ldr	r2, [pc, #16]	@ (8005018 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005006:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005008:	6113      	str	r3, [r2, #16]
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000ed90 	.word	0xe000ed90

0800501c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005024:	f7fe fb84 	bl	8003730 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e316      	b.n	8005662 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a66      	ldr	r2, [pc, #408]	@ (80051d4 <HAL_DMA_Init+0x1b8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d04a      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a65      	ldr	r2, [pc, #404]	@ (80051d8 <HAL_DMA_Init+0x1bc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d045      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a63      	ldr	r2, [pc, #396]	@ (80051dc <HAL_DMA_Init+0x1c0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d040      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a62      	ldr	r2, [pc, #392]	@ (80051e0 <HAL_DMA_Init+0x1c4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d03b      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a60      	ldr	r2, [pc, #384]	@ (80051e4 <HAL_DMA_Init+0x1c8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d036      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a5f      	ldr	r2, [pc, #380]	@ (80051e8 <HAL_DMA_Init+0x1cc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d031      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a5d      	ldr	r2, [pc, #372]	@ (80051ec <HAL_DMA_Init+0x1d0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d02c      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a5c      	ldr	r2, [pc, #368]	@ (80051f0 <HAL_DMA_Init+0x1d4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d027      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a5a      	ldr	r2, [pc, #360]	@ (80051f4 <HAL_DMA_Init+0x1d8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d022      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a59      	ldr	r2, [pc, #356]	@ (80051f8 <HAL_DMA_Init+0x1dc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d01d      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a57      	ldr	r2, [pc, #348]	@ (80051fc <HAL_DMA_Init+0x1e0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d018      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a56      	ldr	r2, [pc, #344]	@ (8005200 <HAL_DMA_Init+0x1e4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a54      	ldr	r2, [pc, #336]	@ (8005204 <HAL_DMA_Init+0x1e8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00e      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a53      	ldr	r2, [pc, #332]	@ (8005208 <HAL_DMA_Init+0x1ec>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d009      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a51      	ldr	r2, [pc, #324]	@ (800520c <HAL_DMA_Init+0x1f0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_DMA_Init+0xb8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a50      	ldr	r2, [pc, #320]	@ (8005210 <HAL_DMA_Init+0x1f4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <HAL_DMA_Init+0xbc>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <HAL_DMA_Init+0xbe>
 80050d8:	2300      	movs	r3, #0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 813b 	beq.w	8005356 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a37      	ldr	r2, [pc, #220]	@ (80051d4 <HAL_DMA_Init+0x1b8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d04a      	beq.n	8005190 <HAL_DMA_Init+0x174>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a36      	ldr	r2, [pc, #216]	@ (80051d8 <HAL_DMA_Init+0x1bc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d045      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a34      	ldr	r2, [pc, #208]	@ (80051dc <HAL_DMA_Init+0x1c0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d040      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a33      	ldr	r2, [pc, #204]	@ (80051e0 <HAL_DMA_Init+0x1c4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d03b      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a31      	ldr	r2, [pc, #196]	@ (80051e4 <HAL_DMA_Init+0x1c8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d036      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a30      	ldr	r2, [pc, #192]	@ (80051e8 <HAL_DMA_Init+0x1cc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d031      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2e      	ldr	r2, [pc, #184]	@ (80051ec <HAL_DMA_Init+0x1d0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d02c      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2d      	ldr	r2, [pc, #180]	@ (80051f0 <HAL_DMA_Init+0x1d4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d027      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2b      	ldr	r2, [pc, #172]	@ (80051f4 <HAL_DMA_Init+0x1d8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d022      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2a      	ldr	r2, [pc, #168]	@ (80051f8 <HAL_DMA_Init+0x1dc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d01d      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a28      	ldr	r2, [pc, #160]	@ (80051fc <HAL_DMA_Init+0x1e0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d018      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a27      	ldr	r2, [pc, #156]	@ (8005200 <HAL_DMA_Init+0x1e4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d013      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a25      	ldr	r2, [pc, #148]	@ (8005204 <HAL_DMA_Init+0x1e8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00e      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a24      	ldr	r2, [pc, #144]	@ (8005208 <HAL_DMA_Init+0x1ec>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d009      	beq.n	8005190 <HAL_DMA_Init+0x174>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a22      	ldr	r2, [pc, #136]	@ (800520c <HAL_DMA_Init+0x1f0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d004      	beq.n	8005190 <HAL_DMA_Init+0x174>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a21      	ldr	r2, [pc, #132]	@ (8005210 <HAL_DMA_Init+0x1f4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d108      	bne.n	80051a2 <HAL_DMA_Init+0x186>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e007      	b.n	80051b2 <HAL_DMA_Init+0x196>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051b2:	e02f      	b.n	8005214 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051b4:	f7fe fabc 	bl	8003730 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d928      	bls.n	8005214 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2203      	movs	r2, #3
 80051cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e246      	b.n	8005662 <HAL_DMA_Init+0x646>
 80051d4:	40020010 	.word	0x40020010
 80051d8:	40020028 	.word	0x40020028
 80051dc:	40020040 	.word	0x40020040
 80051e0:	40020058 	.word	0x40020058
 80051e4:	40020070 	.word	0x40020070
 80051e8:	40020088 	.word	0x40020088
 80051ec:	400200a0 	.word	0x400200a0
 80051f0:	400200b8 	.word	0x400200b8
 80051f4:	40020410 	.word	0x40020410
 80051f8:	40020428 	.word	0x40020428
 80051fc:	40020440 	.word	0x40020440
 8005200:	40020458 	.word	0x40020458
 8005204:	40020470 	.word	0x40020470
 8005208:	40020488 	.word	0x40020488
 800520c:	400204a0 	.word	0x400204a0
 8005210:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1c8      	bne.n	80051b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4b83      	ldr	r3, [pc, #524]	@ (800543c <HAL_DMA_Init+0x420>)
 800522e:	4013      	ands	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800523a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005246:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005252:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	2b04      	cmp	r3, #4
 8005266:	d107      	bne.n	8005278 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005270:	4313      	orrs	r3, r2
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005278:	4b71      	ldr	r3, [pc, #452]	@ (8005440 <HAL_DMA_Init+0x424>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4b71      	ldr	r3, [pc, #452]	@ (8005444 <HAL_DMA_Init+0x428>)
 800527e:	4013      	ands	r3, r2
 8005280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005284:	d328      	bcc.n	80052d8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b28      	cmp	r3, #40	@ 0x28
 800528c:	d903      	bls.n	8005296 <HAL_DMA_Init+0x27a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b2e      	cmp	r3, #46	@ 0x2e
 8005294:	d917      	bls.n	80052c6 <HAL_DMA_Init+0x2aa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b3e      	cmp	r3, #62	@ 0x3e
 800529c:	d903      	bls.n	80052a6 <HAL_DMA_Init+0x28a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b42      	cmp	r3, #66	@ 0x42
 80052a4:	d90f      	bls.n	80052c6 <HAL_DMA_Init+0x2aa>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b46      	cmp	r3, #70	@ 0x46
 80052ac:	d903      	bls.n	80052b6 <HAL_DMA_Init+0x29a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b48      	cmp	r3, #72	@ 0x48
 80052b4:	d907      	bls.n	80052c6 <HAL_DMA_Init+0x2aa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80052bc:	d905      	bls.n	80052ca <HAL_DMA_Init+0x2ae>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b52      	cmp	r3, #82	@ 0x52
 80052c4:	d801      	bhi.n	80052ca <HAL_DMA_Init+0x2ae>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <HAL_DMA_Init+0x2b0>
 80052ca:	2300      	movs	r3, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052d6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d117      	bne.n	8005332 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f002 fb4d 	bl	80079b4 <DMA_CheckFifoParam>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2240      	movs	r2, #64	@ 0x40
 8005324:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e197      	b.n	8005662 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f002 fa88 	bl	8007850 <DMA_CalcBaseAndBitshift>
 8005340:	4603      	mov	r3, r0
 8005342:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	223f      	movs	r2, #63	@ 0x3f
 800534e:	409a      	lsls	r2, r3
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	e0cd      	b.n	80054f2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a3b      	ldr	r2, [pc, #236]	@ (8005448 <HAL_DMA_Init+0x42c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d022      	beq.n	80053a6 <HAL_DMA_Init+0x38a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a39      	ldr	r2, [pc, #228]	@ (800544c <HAL_DMA_Init+0x430>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01d      	beq.n	80053a6 <HAL_DMA_Init+0x38a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a38      	ldr	r2, [pc, #224]	@ (8005450 <HAL_DMA_Init+0x434>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d018      	beq.n	80053a6 <HAL_DMA_Init+0x38a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a36      	ldr	r2, [pc, #216]	@ (8005454 <HAL_DMA_Init+0x438>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <HAL_DMA_Init+0x38a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a35      	ldr	r2, [pc, #212]	@ (8005458 <HAL_DMA_Init+0x43c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00e      	beq.n	80053a6 <HAL_DMA_Init+0x38a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a33      	ldr	r2, [pc, #204]	@ (800545c <HAL_DMA_Init+0x440>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_DMA_Init+0x38a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a32      	ldr	r2, [pc, #200]	@ (8005460 <HAL_DMA_Init+0x444>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d004      	beq.n	80053a6 <HAL_DMA_Init+0x38a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a30      	ldr	r2, [pc, #192]	@ (8005464 <HAL_DMA_Init+0x448>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_DMA_Init+0x38e>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <HAL_DMA_Init+0x390>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8097 	beq.w	80054e0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a24      	ldr	r2, [pc, #144]	@ (8005448 <HAL_DMA_Init+0x42c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d021      	beq.n	8005400 <HAL_DMA_Init+0x3e4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a22      	ldr	r2, [pc, #136]	@ (800544c <HAL_DMA_Init+0x430>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01c      	beq.n	8005400 <HAL_DMA_Init+0x3e4>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a21      	ldr	r2, [pc, #132]	@ (8005450 <HAL_DMA_Init+0x434>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d017      	beq.n	8005400 <HAL_DMA_Init+0x3e4>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005454 <HAL_DMA_Init+0x438>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d012      	beq.n	8005400 <HAL_DMA_Init+0x3e4>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1e      	ldr	r2, [pc, #120]	@ (8005458 <HAL_DMA_Init+0x43c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00d      	beq.n	8005400 <HAL_DMA_Init+0x3e4>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1c      	ldr	r2, [pc, #112]	@ (800545c <HAL_DMA_Init+0x440>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d008      	beq.n	8005400 <HAL_DMA_Init+0x3e4>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005460 <HAL_DMA_Init+0x444>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <HAL_DMA_Init+0x3e4>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a19      	ldr	r2, [pc, #100]	@ (8005464 <HAL_DMA_Init+0x448>)
 80053fe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4b13      	ldr	r3, [pc, #76]	@ (8005468 <HAL_DMA_Init+0x44c>)
 800541c:	4013      	ands	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b40      	cmp	r3, #64	@ 0x40
 8005426:	d021      	beq.n	800546c <HAL_DMA_Init+0x450>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b80      	cmp	r3, #128	@ 0x80
 800542e:	d102      	bne.n	8005436 <HAL_DMA_Init+0x41a>
 8005430:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005434:	e01b      	b.n	800546e <HAL_DMA_Init+0x452>
 8005436:	2300      	movs	r3, #0
 8005438:	e019      	b.n	800546e <HAL_DMA_Init+0x452>
 800543a:	bf00      	nop
 800543c:	fe10803f 	.word	0xfe10803f
 8005440:	5c001000 	.word	0x5c001000
 8005444:	ffff0000 	.word	0xffff0000
 8005448:	58025408 	.word	0x58025408
 800544c:	5802541c 	.word	0x5802541c
 8005450:	58025430 	.word	0x58025430
 8005454:	58025444 	.word	0x58025444
 8005458:	58025458 	.word	0x58025458
 800545c:	5802546c 	.word	0x5802546c
 8005460:	58025480 	.word	0x58025480
 8005464:	58025494 	.word	0x58025494
 8005468:	fffe000f 	.word	0xfffe000f
 800546c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68d2      	ldr	r2, [r2, #12]
 8005472:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800547c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800548c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005494:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800549c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	4b6e      	ldr	r3, [pc, #440]	@ (800566c <HAL_DMA_Init+0x650>)
 80054b4:	4413      	add	r3, r2
 80054b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005670 <HAL_DMA_Init+0x654>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	009a      	lsls	r2, r3, #2
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f002 f9c3 	bl	8007850 <DMA_CalcBaseAndBitshift>
 80054ca:	4603      	mov	r3, r0
 80054cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2201      	movs	r2, #1
 80054d8:	409a      	lsls	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	e008      	b.n	80054f2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2240      	movs	r2, #64	@ 0x40
 80054e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2203      	movs	r2, #3
 80054ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e0b7      	b.n	8005662 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a5f      	ldr	r2, [pc, #380]	@ (8005674 <HAL_DMA_Init+0x658>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d072      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a5d      	ldr	r2, [pc, #372]	@ (8005678 <HAL_DMA_Init+0x65c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d06d      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a5c      	ldr	r2, [pc, #368]	@ (800567c <HAL_DMA_Init+0x660>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d068      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a5a      	ldr	r2, [pc, #360]	@ (8005680 <HAL_DMA_Init+0x664>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d063      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a59      	ldr	r2, [pc, #356]	@ (8005684 <HAL_DMA_Init+0x668>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d05e      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a57      	ldr	r2, [pc, #348]	@ (8005688 <HAL_DMA_Init+0x66c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d059      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a56      	ldr	r2, [pc, #344]	@ (800568c <HAL_DMA_Init+0x670>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d054      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a54      	ldr	r2, [pc, #336]	@ (8005690 <HAL_DMA_Init+0x674>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d04f      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a53      	ldr	r2, [pc, #332]	@ (8005694 <HAL_DMA_Init+0x678>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d04a      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a51      	ldr	r2, [pc, #324]	@ (8005698 <HAL_DMA_Init+0x67c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d045      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a50      	ldr	r2, [pc, #320]	@ (800569c <HAL_DMA_Init+0x680>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d040      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a4e      	ldr	r2, [pc, #312]	@ (80056a0 <HAL_DMA_Init+0x684>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d03b      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a4d      	ldr	r2, [pc, #308]	@ (80056a4 <HAL_DMA_Init+0x688>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d036      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a4b      	ldr	r2, [pc, #300]	@ (80056a8 <HAL_DMA_Init+0x68c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d031      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a4a      	ldr	r2, [pc, #296]	@ (80056ac <HAL_DMA_Init+0x690>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d02c      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a48      	ldr	r2, [pc, #288]	@ (80056b0 <HAL_DMA_Init+0x694>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d027      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a47      	ldr	r2, [pc, #284]	@ (80056b4 <HAL_DMA_Init+0x698>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d022      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a45      	ldr	r2, [pc, #276]	@ (80056b8 <HAL_DMA_Init+0x69c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a44      	ldr	r2, [pc, #272]	@ (80056bc <HAL_DMA_Init+0x6a0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d018      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a42      	ldr	r2, [pc, #264]	@ (80056c0 <HAL_DMA_Init+0x6a4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a41      	ldr	r2, [pc, #260]	@ (80056c4 <HAL_DMA_Init+0x6a8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a3f      	ldr	r2, [pc, #252]	@ (80056c8 <HAL_DMA_Init+0x6ac>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a3e      	ldr	r2, [pc, #248]	@ (80056cc <HAL_DMA_Init+0x6b0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_Init+0x5c6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a3c      	ldr	r2, [pc, #240]	@ (80056d0 <HAL_DMA_Init+0x6b4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <HAL_DMA_Init+0x5ca>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <HAL_DMA_Init+0x5cc>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d032      	beq.n	8005652 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f002 fa5d 	bl	8007aac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b80      	cmp	r3, #128	@ 0x80
 80055f8:	d102      	bne.n	8005600 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005614:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d010      	beq.n	8005640 <HAL_DMA_Init+0x624>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b08      	cmp	r3, #8
 8005624:	d80c      	bhi.n	8005640 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f002 fada 	bl	8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	e008      	b.n	8005652 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	a7fdabf8 	.word	0xa7fdabf8
 8005670:	cccccccd 	.word	0xcccccccd
 8005674:	40020010 	.word	0x40020010
 8005678:	40020028 	.word	0x40020028
 800567c:	40020040 	.word	0x40020040
 8005680:	40020058 	.word	0x40020058
 8005684:	40020070 	.word	0x40020070
 8005688:	40020088 	.word	0x40020088
 800568c:	400200a0 	.word	0x400200a0
 8005690:	400200b8 	.word	0x400200b8
 8005694:	40020410 	.word	0x40020410
 8005698:	40020428 	.word	0x40020428
 800569c:	40020440 	.word	0x40020440
 80056a0:	40020458 	.word	0x40020458
 80056a4:	40020470 	.word	0x40020470
 80056a8:	40020488 	.word	0x40020488
 80056ac:	400204a0 	.word	0x400204a0
 80056b0:	400204b8 	.word	0x400204b8
 80056b4:	58025408 	.word	0x58025408
 80056b8:	5802541c 	.word	0x5802541c
 80056bc:	58025430 	.word	0x58025430
 80056c0:	58025444 	.word	0x58025444
 80056c4:	58025458 	.word	0x58025458
 80056c8:	5802546c 	.word	0x5802546c
 80056cc:	58025480 	.word	0x58025480
 80056d0:	58025494 	.word	0x58025494

080056d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e226      	b.n	8005b3e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_DMA_Start_IT+0x2a>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e21f      	b.n	8005b3e <HAL_DMA_Start_IT+0x46a>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 820a 	bne.w	8005b28 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a68      	ldr	r2, [pc, #416]	@ (80058c8 <HAL_DMA_Start_IT+0x1f4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d04a      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a66      	ldr	r2, [pc, #408]	@ (80058cc <HAL_DMA_Start_IT+0x1f8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d045      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a65      	ldr	r2, [pc, #404]	@ (80058d0 <HAL_DMA_Start_IT+0x1fc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d040      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a63      	ldr	r2, [pc, #396]	@ (80058d4 <HAL_DMA_Start_IT+0x200>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d03b      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a62      	ldr	r2, [pc, #392]	@ (80058d8 <HAL_DMA_Start_IT+0x204>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d036      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a60      	ldr	r2, [pc, #384]	@ (80058dc <HAL_DMA_Start_IT+0x208>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d031      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a5f      	ldr	r2, [pc, #380]	@ (80058e0 <HAL_DMA_Start_IT+0x20c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d02c      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a5d      	ldr	r2, [pc, #372]	@ (80058e4 <HAL_DMA_Start_IT+0x210>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d027      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a5c      	ldr	r2, [pc, #368]	@ (80058e8 <HAL_DMA_Start_IT+0x214>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d022      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a5a      	ldr	r2, [pc, #360]	@ (80058ec <HAL_DMA_Start_IT+0x218>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01d      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a59      	ldr	r2, [pc, #356]	@ (80058f0 <HAL_DMA_Start_IT+0x21c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d018      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a57      	ldr	r2, [pc, #348]	@ (80058f4 <HAL_DMA_Start_IT+0x220>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d013      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a56      	ldr	r2, [pc, #344]	@ (80058f8 <HAL_DMA_Start_IT+0x224>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a54      	ldr	r2, [pc, #336]	@ (80058fc <HAL_DMA_Start_IT+0x228>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a53      	ldr	r2, [pc, #332]	@ (8005900 <HAL_DMA_Start_IT+0x22c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_DMA_Start_IT+0xee>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a51      	ldr	r2, [pc, #324]	@ (8005904 <HAL_DMA_Start_IT+0x230>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d108      	bne.n	80057d4 <HAL_DMA_Start_IT+0x100>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e007      	b.n	80057e4 <HAL_DMA_Start_IT+0x110>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f001 fe84 	bl	80074f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a34      	ldr	r2, [pc, #208]	@ (80058c8 <HAL_DMA_Start_IT+0x1f4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d04a      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a33      	ldr	r2, [pc, #204]	@ (80058cc <HAL_DMA_Start_IT+0x1f8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d045      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a31      	ldr	r2, [pc, #196]	@ (80058d0 <HAL_DMA_Start_IT+0x1fc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d040      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a30      	ldr	r2, [pc, #192]	@ (80058d4 <HAL_DMA_Start_IT+0x200>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d03b      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a2e      	ldr	r2, [pc, #184]	@ (80058d8 <HAL_DMA_Start_IT+0x204>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d036      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a2d      	ldr	r2, [pc, #180]	@ (80058dc <HAL_DMA_Start_IT+0x208>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d031      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a2b      	ldr	r2, [pc, #172]	@ (80058e0 <HAL_DMA_Start_IT+0x20c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d02c      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a2a      	ldr	r2, [pc, #168]	@ (80058e4 <HAL_DMA_Start_IT+0x210>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d027      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a28      	ldr	r2, [pc, #160]	@ (80058e8 <HAL_DMA_Start_IT+0x214>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d022      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a27      	ldr	r2, [pc, #156]	@ (80058ec <HAL_DMA_Start_IT+0x218>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d01d      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a25      	ldr	r2, [pc, #148]	@ (80058f0 <HAL_DMA_Start_IT+0x21c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d018      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a24      	ldr	r2, [pc, #144]	@ (80058f4 <HAL_DMA_Start_IT+0x220>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d013      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a22      	ldr	r2, [pc, #136]	@ (80058f8 <HAL_DMA_Start_IT+0x224>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00e      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a21      	ldr	r2, [pc, #132]	@ (80058fc <HAL_DMA_Start_IT+0x228>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1f      	ldr	r2, [pc, #124]	@ (8005900 <HAL_DMA_Start_IT+0x22c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_DMA_Start_IT+0x1bc>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1e      	ldr	r2, [pc, #120]	@ (8005904 <HAL_DMA_Start_IT+0x230>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Start_IT+0x1c0>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_DMA_Start_IT+0x1c2>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d036      	beq.n	8005908 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f023 021e 	bic.w	r2, r3, #30
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0216 	orr.w	r2, r2, #22
 80058ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d03e      	beq.n	8005934 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0208 	orr.w	r2, r2, #8
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e035      	b.n	8005934 <HAL_DMA_Start_IT+0x260>
 80058c8:	40020010 	.word	0x40020010
 80058cc:	40020028 	.word	0x40020028
 80058d0:	40020040 	.word	0x40020040
 80058d4:	40020058 	.word	0x40020058
 80058d8:	40020070 	.word	0x40020070
 80058dc:	40020088 	.word	0x40020088
 80058e0:	400200a0 	.word	0x400200a0
 80058e4:	400200b8 	.word	0x400200b8
 80058e8:	40020410 	.word	0x40020410
 80058ec:	40020428 	.word	0x40020428
 80058f0:	40020440 	.word	0x40020440
 80058f4:	40020458 	.word	0x40020458
 80058f8:	40020470 	.word	0x40020470
 80058fc:	40020488 	.word	0x40020488
 8005900:	400204a0 	.word	0x400204a0
 8005904:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f023 020e 	bic.w	r2, r3, #14
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 020a 	orr.w	r2, r2, #10
 800591a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0204 	orr.w	r2, r2, #4
 8005932:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a83      	ldr	r2, [pc, #524]	@ (8005b48 <HAL_DMA_Start_IT+0x474>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d072      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a82      	ldr	r2, [pc, #520]	@ (8005b4c <HAL_DMA_Start_IT+0x478>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d06d      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a80      	ldr	r2, [pc, #512]	@ (8005b50 <HAL_DMA_Start_IT+0x47c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d068      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a7f      	ldr	r2, [pc, #508]	@ (8005b54 <HAL_DMA_Start_IT+0x480>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d063      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a7d      	ldr	r2, [pc, #500]	@ (8005b58 <HAL_DMA_Start_IT+0x484>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d05e      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a7c      	ldr	r2, [pc, #496]	@ (8005b5c <HAL_DMA_Start_IT+0x488>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d059      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a7a      	ldr	r2, [pc, #488]	@ (8005b60 <HAL_DMA_Start_IT+0x48c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d054      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a79      	ldr	r2, [pc, #484]	@ (8005b64 <HAL_DMA_Start_IT+0x490>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d04f      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a77      	ldr	r2, [pc, #476]	@ (8005b68 <HAL_DMA_Start_IT+0x494>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d04a      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a76      	ldr	r2, [pc, #472]	@ (8005b6c <HAL_DMA_Start_IT+0x498>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d045      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a74      	ldr	r2, [pc, #464]	@ (8005b70 <HAL_DMA_Start_IT+0x49c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d040      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a73      	ldr	r2, [pc, #460]	@ (8005b74 <HAL_DMA_Start_IT+0x4a0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d03b      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a71      	ldr	r2, [pc, #452]	@ (8005b78 <HAL_DMA_Start_IT+0x4a4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d036      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a70      	ldr	r2, [pc, #448]	@ (8005b7c <HAL_DMA_Start_IT+0x4a8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d031      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a6e      	ldr	r2, [pc, #440]	@ (8005b80 <HAL_DMA_Start_IT+0x4ac>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02c      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a6d      	ldr	r2, [pc, #436]	@ (8005b84 <HAL_DMA_Start_IT+0x4b0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d027      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a6b      	ldr	r2, [pc, #428]	@ (8005b88 <HAL_DMA_Start_IT+0x4b4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d022      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a6a      	ldr	r2, [pc, #424]	@ (8005b8c <HAL_DMA_Start_IT+0x4b8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01d      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a68      	ldr	r2, [pc, #416]	@ (8005b90 <HAL_DMA_Start_IT+0x4bc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d018      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a67      	ldr	r2, [pc, #412]	@ (8005b94 <HAL_DMA_Start_IT+0x4c0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a65      	ldr	r2, [pc, #404]	@ (8005b98 <HAL_DMA_Start_IT+0x4c4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a64      	ldr	r2, [pc, #400]	@ (8005b9c <HAL_DMA_Start_IT+0x4c8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a62      	ldr	r2, [pc, #392]	@ (8005ba0 <HAL_DMA_Start_IT+0x4cc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <HAL_DMA_Start_IT+0x350>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a61      	ldr	r2, [pc, #388]	@ (8005ba4 <HAL_DMA_Start_IT+0x4d0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d101      	bne.n	8005a28 <HAL_DMA_Start_IT+0x354>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <HAL_DMA_Start_IT+0x356>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01a      	beq.n	8005a64 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a4a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a62:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a37      	ldr	r2, [pc, #220]	@ (8005b48 <HAL_DMA_Start_IT+0x474>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d04a      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a36      	ldr	r2, [pc, #216]	@ (8005b4c <HAL_DMA_Start_IT+0x478>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d045      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a34      	ldr	r2, [pc, #208]	@ (8005b50 <HAL_DMA_Start_IT+0x47c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d040      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a33      	ldr	r2, [pc, #204]	@ (8005b54 <HAL_DMA_Start_IT+0x480>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d03b      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a31      	ldr	r2, [pc, #196]	@ (8005b58 <HAL_DMA_Start_IT+0x484>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d036      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a30      	ldr	r2, [pc, #192]	@ (8005b5c <HAL_DMA_Start_IT+0x488>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d031      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8005b60 <HAL_DMA_Start_IT+0x48c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d02c      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2d      	ldr	r2, [pc, #180]	@ (8005b64 <HAL_DMA_Start_IT+0x490>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d027      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8005b68 <HAL_DMA_Start_IT+0x494>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d022      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b6c <HAL_DMA_Start_IT+0x498>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d01d      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a28      	ldr	r2, [pc, #160]	@ (8005b70 <HAL_DMA_Start_IT+0x49c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d018      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a27      	ldr	r2, [pc, #156]	@ (8005b74 <HAL_DMA_Start_IT+0x4a0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a25      	ldr	r2, [pc, #148]	@ (8005b78 <HAL_DMA_Start_IT+0x4a4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00e      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a24      	ldr	r2, [pc, #144]	@ (8005b7c <HAL_DMA_Start_IT+0x4a8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a22      	ldr	r2, [pc, #136]	@ (8005b80 <HAL_DMA_Start_IT+0x4ac>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_DMA_Start_IT+0x430>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a21      	ldr	r2, [pc, #132]	@ (8005b84 <HAL_DMA_Start_IT+0x4b0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d108      	bne.n	8005b16 <HAL_DMA_Start_IT+0x442>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e012      	b.n	8005b3c <HAL_DMA_Start_IT+0x468>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0201 	orr.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e009      	b.n	8005b3c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40020010 	.word	0x40020010
 8005b4c:	40020028 	.word	0x40020028
 8005b50:	40020040 	.word	0x40020040
 8005b54:	40020058 	.word	0x40020058
 8005b58:	40020070 	.word	0x40020070
 8005b5c:	40020088 	.word	0x40020088
 8005b60:	400200a0 	.word	0x400200a0
 8005b64:	400200b8 	.word	0x400200b8
 8005b68:	40020410 	.word	0x40020410
 8005b6c:	40020428 	.word	0x40020428
 8005b70:	40020440 	.word	0x40020440
 8005b74:	40020458 	.word	0x40020458
 8005b78:	40020470 	.word	0x40020470
 8005b7c:	40020488 	.word	0x40020488
 8005b80:	400204a0 	.word	0x400204a0
 8005b84:	400204b8 	.word	0x400204b8
 8005b88:	58025408 	.word	0x58025408
 8005b8c:	5802541c 	.word	0x5802541c
 8005b90:	58025430 	.word	0x58025430
 8005b94:	58025444 	.word	0x58025444
 8005b98:	58025458 	.word	0x58025458
 8005b9c:	5802546c 	.word	0x5802546c
 8005ba0:	58025480 	.word	0x58025480
 8005ba4:	58025494 	.word	0x58025494

08005ba8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005bb0:	f7fd fdbe 	bl	8003730 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e2dc      	b.n	800617a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d008      	beq.n	8005bde <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2280      	movs	r2, #128	@ 0x80
 8005bd0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e2cd      	b.n	800617a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a76      	ldr	r2, [pc, #472]	@ (8005dbc <HAL_DMA_Abort+0x214>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d04a      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a74      	ldr	r2, [pc, #464]	@ (8005dc0 <HAL_DMA_Abort+0x218>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d045      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a73      	ldr	r2, [pc, #460]	@ (8005dc4 <HAL_DMA_Abort+0x21c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d040      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a71      	ldr	r2, [pc, #452]	@ (8005dc8 <HAL_DMA_Abort+0x220>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d03b      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a70      	ldr	r2, [pc, #448]	@ (8005dcc <HAL_DMA_Abort+0x224>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d036      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a6e      	ldr	r2, [pc, #440]	@ (8005dd0 <HAL_DMA_Abort+0x228>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d031      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a6d      	ldr	r2, [pc, #436]	@ (8005dd4 <HAL_DMA_Abort+0x22c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d02c      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a6b      	ldr	r2, [pc, #428]	@ (8005dd8 <HAL_DMA_Abort+0x230>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d027      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a6a      	ldr	r2, [pc, #424]	@ (8005ddc <HAL_DMA_Abort+0x234>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d022      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a68      	ldr	r2, [pc, #416]	@ (8005de0 <HAL_DMA_Abort+0x238>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01d      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a67      	ldr	r2, [pc, #412]	@ (8005de4 <HAL_DMA_Abort+0x23c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d018      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a65      	ldr	r2, [pc, #404]	@ (8005de8 <HAL_DMA_Abort+0x240>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a64      	ldr	r2, [pc, #400]	@ (8005dec <HAL_DMA_Abort+0x244>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00e      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a62      	ldr	r2, [pc, #392]	@ (8005df0 <HAL_DMA_Abort+0x248>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d009      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a61      	ldr	r2, [pc, #388]	@ (8005df4 <HAL_DMA_Abort+0x24c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_DMA_Abort+0xd6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a5f      	ldr	r2, [pc, #380]	@ (8005df8 <HAL_DMA_Abort+0x250>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d101      	bne.n	8005c82 <HAL_DMA_Abort+0xda>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <HAL_DMA_Abort+0xdc>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d013      	beq.n	8005cb0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 021e 	bic.w	r2, r2, #30
 8005c96:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ca6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	e00a      	b.n	8005cc6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 020e 	bic.w	r2, r2, #14
 8005cbe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a3c      	ldr	r2, [pc, #240]	@ (8005dbc <HAL_DMA_Abort+0x214>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d072      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a3a      	ldr	r2, [pc, #232]	@ (8005dc0 <HAL_DMA_Abort+0x218>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d06d      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a39      	ldr	r2, [pc, #228]	@ (8005dc4 <HAL_DMA_Abort+0x21c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d068      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a37      	ldr	r2, [pc, #220]	@ (8005dc8 <HAL_DMA_Abort+0x220>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d063      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a36      	ldr	r2, [pc, #216]	@ (8005dcc <HAL_DMA_Abort+0x224>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d05e      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a34      	ldr	r2, [pc, #208]	@ (8005dd0 <HAL_DMA_Abort+0x228>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d059      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a33      	ldr	r2, [pc, #204]	@ (8005dd4 <HAL_DMA_Abort+0x22c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d054      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a31      	ldr	r2, [pc, #196]	@ (8005dd8 <HAL_DMA_Abort+0x230>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d04f      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a30      	ldr	r2, [pc, #192]	@ (8005ddc <HAL_DMA_Abort+0x234>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d04a      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2e      	ldr	r2, [pc, #184]	@ (8005de0 <HAL_DMA_Abort+0x238>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d045      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8005de4 <HAL_DMA_Abort+0x23c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d040      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a2b      	ldr	r2, [pc, #172]	@ (8005de8 <HAL_DMA_Abort+0x240>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d03b      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2a      	ldr	r2, [pc, #168]	@ (8005dec <HAL_DMA_Abort+0x244>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d036      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a28      	ldr	r2, [pc, #160]	@ (8005df0 <HAL_DMA_Abort+0x248>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d031      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a27      	ldr	r2, [pc, #156]	@ (8005df4 <HAL_DMA_Abort+0x24c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d02c      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a25      	ldr	r2, [pc, #148]	@ (8005df8 <HAL_DMA_Abort+0x250>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d027      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a24      	ldr	r2, [pc, #144]	@ (8005dfc <HAL_DMA_Abort+0x254>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d022      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a22      	ldr	r2, [pc, #136]	@ (8005e00 <HAL_DMA_Abort+0x258>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01d      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a21      	ldr	r2, [pc, #132]	@ (8005e04 <HAL_DMA_Abort+0x25c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d018      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1f      	ldr	r2, [pc, #124]	@ (8005e08 <HAL_DMA_Abort+0x260>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1e      	ldr	r2, [pc, #120]	@ (8005e0c <HAL_DMA_Abort+0x264>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e10 <HAL_DMA_Abort+0x268>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e14 <HAL_DMA_Abort+0x26c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_DMA_Abort+0x20e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a19      	ldr	r2, [pc, #100]	@ (8005e18 <HAL_DMA_Abort+0x270>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d132      	bne.n	8005e1c <HAL_DMA_Abort+0x274>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e031      	b.n	8005e1e <HAL_DMA_Abort+0x276>
 8005dba:	bf00      	nop
 8005dbc:	40020010 	.word	0x40020010
 8005dc0:	40020028 	.word	0x40020028
 8005dc4:	40020040 	.word	0x40020040
 8005dc8:	40020058 	.word	0x40020058
 8005dcc:	40020070 	.word	0x40020070
 8005dd0:	40020088 	.word	0x40020088
 8005dd4:	400200a0 	.word	0x400200a0
 8005dd8:	400200b8 	.word	0x400200b8
 8005ddc:	40020410 	.word	0x40020410
 8005de0:	40020428 	.word	0x40020428
 8005de4:	40020440 	.word	0x40020440
 8005de8:	40020458 	.word	0x40020458
 8005dec:	40020470 	.word	0x40020470
 8005df0:	40020488 	.word	0x40020488
 8005df4:	400204a0 	.word	0x400204a0
 8005df8:	400204b8 	.word	0x400204b8
 8005dfc:	58025408 	.word	0x58025408
 8005e00:	5802541c 	.word	0x5802541c
 8005e04:	58025430 	.word	0x58025430
 8005e08:	58025444 	.word	0x58025444
 8005e0c:	58025458 	.word	0x58025458
 8005e10:	5802546c 	.word	0x5802546c
 8005e14:	58025480 	.word	0x58025480
 8005e18:	58025494 	.word	0x58025494
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a6d      	ldr	r2, [pc, #436]	@ (8005fec <HAL_DMA_Abort+0x444>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d04a      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6b      	ldr	r2, [pc, #428]	@ (8005ff0 <HAL_DMA_Abort+0x448>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d045      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6a      	ldr	r2, [pc, #424]	@ (8005ff4 <HAL_DMA_Abort+0x44c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d040      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a68      	ldr	r2, [pc, #416]	@ (8005ff8 <HAL_DMA_Abort+0x450>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d03b      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a67      	ldr	r2, [pc, #412]	@ (8005ffc <HAL_DMA_Abort+0x454>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d036      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a65      	ldr	r2, [pc, #404]	@ (8006000 <HAL_DMA_Abort+0x458>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d031      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a64      	ldr	r2, [pc, #400]	@ (8006004 <HAL_DMA_Abort+0x45c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d02c      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a62      	ldr	r2, [pc, #392]	@ (8006008 <HAL_DMA_Abort+0x460>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d027      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a61      	ldr	r2, [pc, #388]	@ (800600c <HAL_DMA_Abort+0x464>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d022      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5f      	ldr	r2, [pc, #380]	@ (8006010 <HAL_DMA_Abort+0x468>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01d      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8006014 <HAL_DMA_Abort+0x46c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5c      	ldr	r2, [pc, #368]	@ (8006018 <HAL_DMA_Abort+0x470>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5b      	ldr	r2, [pc, #364]	@ (800601c <HAL_DMA_Abort+0x474>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a59      	ldr	r2, [pc, #356]	@ (8006020 <HAL_DMA_Abort+0x478>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a58      	ldr	r2, [pc, #352]	@ (8006024 <HAL_DMA_Abort+0x47c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_DMA_Abort+0x32a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a56      	ldr	r2, [pc, #344]	@ (8006028 <HAL_DMA_Abort+0x480>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d108      	bne.n	8005ee4 <HAL_DMA_Abort+0x33c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e007      	b.n	8005ef4 <HAL_DMA_Abort+0x34c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ef4:	e013      	b.n	8005f1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ef6:	f7fd fc1b 	bl	8003730 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b05      	cmp	r3, #5
 8005f02:	d90c      	bls.n	8005f1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e12d      	b.n	800617a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e5      	bne.n	8005ef6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8005fec <HAL_DMA_Abort+0x444>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d04a      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff0 <HAL_DMA_Abort+0x448>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d045      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a2c      	ldr	r2, [pc, #176]	@ (8005ff4 <HAL_DMA_Abort+0x44c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d040      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ff8 <HAL_DMA_Abort+0x450>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d03b      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a29      	ldr	r2, [pc, #164]	@ (8005ffc <HAL_DMA_Abort+0x454>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d036      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a27      	ldr	r2, [pc, #156]	@ (8006000 <HAL_DMA_Abort+0x458>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d031      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a26      	ldr	r2, [pc, #152]	@ (8006004 <HAL_DMA_Abort+0x45c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d02c      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a24      	ldr	r2, [pc, #144]	@ (8006008 <HAL_DMA_Abort+0x460>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d027      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a23      	ldr	r2, [pc, #140]	@ (800600c <HAL_DMA_Abort+0x464>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d022      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a21      	ldr	r2, [pc, #132]	@ (8006010 <HAL_DMA_Abort+0x468>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d01d      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a20      	ldr	r2, [pc, #128]	@ (8006014 <HAL_DMA_Abort+0x46c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d018      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8006018 <HAL_DMA_Abort+0x470>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800601c <HAL_DMA_Abort+0x474>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00e      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8006020 <HAL_DMA_Abort+0x478>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1a      	ldr	r2, [pc, #104]	@ (8006024 <HAL_DMA_Abort+0x47c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d004      	beq.n	8005fca <HAL_DMA_Abort+0x422>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a18      	ldr	r2, [pc, #96]	@ (8006028 <HAL_DMA_Abort+0x480>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d101      	bne.n	8005fce <HAL_DMA_Abort+0x426>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <HAL_DMA_Abort+0x428>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d02b      	beq.n	800602c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	223f      	movs	r2, #63	@ 0x3f
 8005fe4:	409a      	lsls	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	609a      	str	r2, [r3, #8]
 8005fea:	e02a      	b.n	8006042 <HAL_DMA_Abort+0x49a>
 8005fec:	40020010 	.word	0x40020010
 8005ff0:	40020028 	.word	0x40020028
 8005ff4:	40020040 	.word	0x40020040
 8005ff8:	40020058 	.word	0x40020058
 8005ffc:	40020070 	.word	0x40020070
 8006000:	40020088 	.word	0x40020088
 8006004:	400200a0 	.word	0x400200a0
 8006008:	400200b8 	.word	0x400200b8
 800600c:	40020410 	.word	0x40020410
 8006010:	40020428 	.word	0x40020428
 8006014:	40020440 	.word	0x40020440
 8006018:	40020458 	.word	0x40020458
 800601c:	40020470 	.word	0x40020470
 8006020:	40020488 	.word	0x40020488
 8006024:	400204a0 	.word	0x400204a0
 8006028:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006030:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	2201      	movs	r2, #1
 800603c:	409a      	lsls	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a4f      	ldr	r2, [pc, #316]	@ (8006184 <HAL_DMA_Abort+0x5dc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d072      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a4d      	ldr	r2, [pc, #308]	@ (8006188 <HAL_DMA_Abort+0x5e0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d06d      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a4c      	ldr	r2, [pc, #304]	@ (800618c <HAL_DMA_Abort+0x5e4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d068      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a4a      	ldr	r2, [pc, #296]	@ (8006190 <HAL_DMA_Abort+0x5e8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d063      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a49      	ldr	r2, [pc, #292]	@ (8006194 <HAL_DMA_Abort+0x5ec>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d05e      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a47      	ldr	r2, [pc, #284]	@ (8006198 <HAL_DMA_Abort+0x5f0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d059      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a46      	ldr	r2, [pc, #280]	@ (800619c <HAL_DMA_Abort+0x5f4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d054      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a44      	ldr	r2, [pc, #272]	@ (80061a0 <HAL_DMA_Abort+0x5f8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d04f      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a43      	ldr	r2, [pc, #268]	@ (80061a4 <HAL_DMA_Abort+0x5fc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d04a      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a41      	ldr	r2, [pc, #260]	@ (80061a8 <HAL_DMA_Abort+0x600>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d045      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a40      	ldr	r2, [pc, #256]	@ (80061ac <HAL_DMA_Abort+0x604>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d040      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a3e      	ldr	r2, [pc, #248]	@ (80061b0 <HAL_DMA_Abort+0x608>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d03b      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a3d      	ldr	r2, [pc, #244]	@ (80061b4 <HAL_DMA_Abort+0x60c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d036      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a3b      	ldr	r2, [pc, #236]	@ (80061b8 <HAL_DMA_Abort+0x610>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d031      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a3a      	ldr	r2, [pc, #232]	@ (80061bc <HAL_DMA_Abort+0x614>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d02c      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a38      	ldr	r2, [pc, #224]	@ (80061c0 <HAL_DMA_Abort+0x618>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d027      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a37      	ldr	r2, [pc, #220]	@ (80061c4 <HAL_DMA_Abort+0x61c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d022      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a35      	ldr	r2, [pc, #212]	@ (80061c8 <HAL_DMA_Abort+0x620>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01d      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a34      	ldr	r2, [pc, #208]	@ (80061cc <HAL_DMA_Abort+0x624>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d018      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a32      	ldr	r2, [pc, #200]	@ (80061d0 <HAL_DMA_Abort+0x628>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a31      	ldr	r2, [pc, #196]	@ (80061d4 <HAL_DMA_Abort+0x62c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00e      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2f      	ldr	r2, [pc, #188]	@ (80061d8 <HAL_DMA_Abort+0x630>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a2e      	ldr	r2, [pc, #184]	@ (80061dc <HAL_DMA_Abort+0x634>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_DMA_Abort+0x58a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2c      	ldr	r2, [pc, #176]	@ (80061e0 <HAL_DMA_Abort+0x638>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d101      	bne.n	8006136 <HAL_DMA_Abort+0x58e>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <HAL_DMA_Abort+0x590>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006144:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00c      	beq.n	8006168 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800615c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006166:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40020010 	.word	0x40020010
 8006188:	40020028 	.word	0x40020028
 800618c:	40020040 	.word	0x40020040
 8006190:	40020058 	.word	0x40020058
 8006194:	40020070 	.word	0x40020070
 8006198:	40020088 	.word	0x40020088
 800619c:	400200a0 	.word	0x400200a0
 80061a0:	400200b8 	.word	0x400200b8
 80061a4:	40020410 	.word	0x40020410
 80061a8:	40020428 	.word	0x40020428
 80061ac:	40020440 	.word	0x40020440
 80061b0:	40020458 	.word	0x40020458
 80061b4:	40020470 	.word	0x40020470
 80061b8:	40020488 	.word	0x40020488
 80061bc:	400204a0 	.word	0x400204a0
 80061c0:	400204b8 	.word	0x400204b8
 80061c4:	58025408 	.word	0x58025408
 80061c8:	5802541c 	.word	0x5802541c
 80061cc:	58025430 	.word	0x58025430
 80061d0:	58025444 	.word	0x58025444
 80061d4:	58025458 	.word	0x58025458
 80061d8:	5802546c 	.word	0x5802546c
 80061dc:	58025480 	.word	0x58025480
 80061e0:	58025494 	.word	0x58025494

080061e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e237      	b.n	8006666 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d004      	beq.n	800620c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2280      	movs	r2, #128	@ 0x80
 8006206:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e22c      	b.n	8006666 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a5c      	ldr	r2, [pc, #368]	@ (8006384 <HAL_DMA_Abort_IT+0x1a0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d04a      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a5b      	ldr	r2, [pc, #364]	@ (8006388 <HAL_DMA_Abort_IT+0x1a4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d045      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a59      	ldr	r2, [pc, #356]	@ (800638c <HAL_DMA_Abort_IT+0x1a8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d040      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a58      	ldr	r2, [pc, #352]	@ (8006390 <HAL_DMA_Abort_IT+0x1ac>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d03b      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a56      	ldr	r2, [pc, #344]	@ (8006394 <HAL_DMA_Abort_IT+0x1b0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d036      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a55      	ldr	r2, [pc, #340]	@ (8006398 <HAL_DMA_Abort_IT+0x1b4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d031      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a53      	ldr	r2, [pc, #332]	@ (800639c <HAL_DMA_Abort_IT+0x1b8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02c      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a52      	ldr	r2, [pc, #328]	@ (80063a0 <HAL_DMA_Abort_IT+0x1bc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d027      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a50      	ldr	r2, [pc, #320]	@ (80063a4 <HAL_DMA_Abort_IT+0x1c0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d022      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a4f      	ldr	r2, [pc, #316]	@ (80063a8 <HAL_DMA_Abort_IT+0x1c4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d01d      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a4d      	ldr	r2, [pc, #308]	@ (80063ac <HAL_DMA_Abort_IT+0x1c8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d018      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a4c      	ldr	r2, [pc, #304]	@ (80063b0 <HAL_DMA_Abort_IT+0x1cc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a4a      	ldr	r2, [pc, #296]	@ (80063b4 <HAL_DMA_Abort_IT+0x1d0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00e      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a49      	ldr	r2, [pc, #292]	@ (80063b8 <HAL_DMA_Abort_IT+0x1d4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a47      	ldr	r2, [pc, #284]	@ (80063bc <HAL_DMA_Abort_IT+0x1d8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_DMA_Abort_IT+0xc8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a46      	ldr	r2, [pc, #280]	@ (80063c0 <HAL_DMA_Abort_IT+0x1dc>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d101      	bne.n	80062b0 <HAL_DMA_Abort_IT+0xcc>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_DMA_Abort_IT+0xce>
 80062b0:	2300      	movs	r3, #0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8086 	beq.w	80063c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2204      	movs	r2, #4
 80062bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006384 <HAL_DMA_Abort_IT+0x1a0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d04a      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006388 <HAL_DMA_Abort_IT+0x1a4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d045      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2c      	ldr	r2, [pc, #176]	@ (800638c <HAL_DMA_Abort_IT+0x1a8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d040      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006390 <HAL_DMA_Abort_IT+0x1ac>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d03b      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a29      	ldr	r2, [pc, #164]	@ (8006394 <HAL_DMA_Abort_IT+0x1b0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d036      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a28      	ldr	r2, [pc, #160]	@ (8006398 <HAL_DMA_Abort_IT+0x1b4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d031      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a26      	ldr	r2, [pc, #152]	@ (800639c <HAL_DMA_Abort_IT+0x1b8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d02c      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a25      	ldr	r2, [pc, #148]	@ (80063a0 <HAL_DMA_Abort_IT+0x1bc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d027      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a23      	ldr	r2, [pc, #140]	@ (80063a4 <HAL_DMA_Abort_IT+0x1c0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d022      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a22      	ldr	r2, [pc, #136]	@ (80063a8 <HAL_DMA_Abort_IT+0x1c4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d01d      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a20      	ldr	r2, [pc, #128]	@ (80063ac <HAL_DMA_Abort_IT+0x1c8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d018      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1f      	ldr	r2, [pc, #124]	@ (80063b0 <HAL_DMA_Abort_IT+0x1cc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1d      	ldr	r2, [pc, #116]	@ (80063b4 <HAL_DMA_Abort_IT+0x1d0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00e      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <HAL_DMA_Abort_IT+0x1d4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d009      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1a      	ldr	r2, [pc, #104]	@ (80063bc <HAL_DMA_Abort_IT+0x1d8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <HAL_DMA_Abort_IT+0x17c>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a19      	ldr	r2, [pc, #100]	@ (80063c0 <HAL_DMA_Abort_IT+0x1dc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d108      	bne.n	8006372 <HAL_DMA_Abort_IT+0x18e>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	e178      	b.n	8006664 <HAL_DMA_Abort_IT+0x480>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e16f      	b.n	8006664 <HAL_DMA_Abort_IT+0x480>
 8006384:	40020010 	.word	0x40020010
 8006388:	40020028 	.word	0x40020028
 800638c:	40020040 	.word	0x40020040
 8006390:	40020058 	.word	0x40020058
 8006394:	40020070 	.word	0x40020070
 8006398:	40020088 	.word	0x40020088
 800639c:	400200a0 	.word	0x400200a0
 80063a0:	400200b8 	.word	0x400200b8
 80063a4:	40020410 	.word	0x40020410
 80063a8:	40020428 	.word	0x40020428
 80063ac:	40020440 	.word	0x40020440
 80063b0:	40020458 	.word	0x40020458
 80063b4:	40020470 	.word	0x40020470
 80063b8:	40020488 	.word	0x40020488
 80063bc:	400204a0 	.word	0x400204a0
 80063c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 020e 	bic.w	r2, r2, #14
 80063d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a6c      	ldr	r2, [pc, #432]	@ (800658c <HAL_DMA_Abort_IT+0x3a8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d04a      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a6b      	ldr	r2, [pc, #428]	@ (8006590 <HAL_DMA_Abort_IT+0x3ac>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d045      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a69      	ldr	r2, [pc, #420]	@ (8006594 <HAL_DMA_Abort_IT+0x3b0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d040      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a68      	ldr	r2, [pc, #416]	@ (8006598 <HAL_DMA_Abort_IT+0x3b4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d03b      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a66      	ldr	r2, [pc, #408]	@ (800659c <HAL_DMA_Abort_IT+0x3b8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d036      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a65      	ldr	r2, [pc, #404]	@ (80065a0 <HAL_DMA_Abort_IT+0x3bc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d031      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a63      	ldr	r2, [pc, #396]	@ (80065a4 <HAL_DMA_Abort_IT+0x3c0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d02c      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a62      	ldr	r2, [pc, #392]	@ (80065a8 <HAL_DMA_Abort_IT+0x3c4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d027      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a60      	ldr	r2, [pc, #384]	@ (80065ac <HAL_DMA_Abort_IT+0x3c8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d022      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a5f      	ldr	r2, [pc, #380]	@ (80065b0 <HAL_DMA_Abort_IT+0x3cc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d01d      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a5d      	ldr	r2, [pc, #372]	@ (80065b4 <HAL_DMA_Abort_IT+0x3d0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d018      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a5c      	ldr	r2, [pc, #368]	@ (80065b8 <HAL_DMA_Abort_IT+0x3d4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5a      	ldr	r2, [pc, #360]	@ (80065bc <HAL_DMA_Abort_IT+0x3d8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00e      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a59      	ldr	r2, [pc, #356]	@ (80065c0 <HAL_DMA_Abort_IT+0x3dc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d009      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a57      	ldr	r2, [pc, #348]	@ (80065c4 <HAL_DMA_Abort_IT+0x3e0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <HAL_DMA_Abort_IT+0x290>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a56      	ldr	r2, [pc, #344]	@ (80065c8 <HAL_DMA_Abort_IT+0x3e4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d108      	bne.n	8006486 <HAL_DMA_Abort_IT+0x2a2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e007      	b.n	8006496 <HAL_DMA_Abort_IT+0x2b2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0201 	bic.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3c      	ldr	r2, [pc, #240]	@ (800658c <HAL_DMA_Abort_IT+0x3a8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d072      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006590 <HAL_DMA_Abort_IT+0x3ac>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d06d      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a39      	ldr	r2, [pc, #228]	@ (8006594 <HAL_DMA_Abort_IT+0x3b0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d068      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a37      	ldr	r2, [pc, #220]	@ (8006598 <HAL_DMA_Abort_IT+0x3b4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d063      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a36      	ldr	r2, [pc, #216]	@ (800659c <HAL_DMA_Abort_IT+0x3b8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d05e      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a34      	ldr	r2, [pc, #208]	@ (80065a0 <HAL_DMA_Abort_IT+0x3bc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d059      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a33      	ldr	r2, [pc, #204]	@ (80065a4 <HAL_DMA_Abort_IT+0x3c0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d054      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a31      	ldr	r2, [pc, #196]	@ (80065a8 <HAL_DMA_Abort_IT+0x3c4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d04f      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a30      	ldr	r2, [pc, #192]	@ (80065ac <HAL_DMA_Abort_IT+0x3c8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d04a      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a2e      	ldr	r2, [pc, #184]	@ (80065b0 <HAL_DMA_Abort_IT+0x3cc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d045      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a2d      	ldr	r2, [pc, #180]	@ (80065b4 <HAL_DMA_Abort_IT+0x3d0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d040      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a2b      	ldr	r2, [pc, #172]	@ (80065b8 <HAL_DMA_Abort_IT+0x3d4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d03b      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a2a      	ldr	r2, [pc, #168]	@ (80065bc <HAL_DMA_Abort_IT+0x3d8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d036      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a28      	ldr	r2, [pc, #160]	@ (80065c0 <HAL_DMA_Abort_IT+0x3dc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d031      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a27      	ldr	r2, [pc, #156]	@ (80065c4 <HAL_DMA_Abort_IT+0x3e0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d02c      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a25      	ldr	r2, [pc, #148]	@ (80065c8 <HAL_DMA_Abort_IT+0x3e4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d027      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a24      	ldr	r2, [pc, #144]	@ (80065cc <HAL_DMA_Abort_IT+0x3e8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a22      	ldr	r2, [pc, #136]	@ (80065d0 <HAL_DMA_Abort_IT+0x3ec>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01d      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a21      	ldr	r2, [pc, #132]	@ (80065d4 <HAL_DMA_Abort_IT+0x3f0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a1f      	ldr	r2, [pc, #124]	@ (80065d8 <HAL_DMA_Abort_IT+0x3f4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a1e      	ldr	r2, [pc, #120]	@ (80065dc <HAL_DMA_Abort_IT+0x3f8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1c      	ldr	r2, [pc, #112]	@ (80065e0 <HAL_DMA_Abort_IT+0x3fc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1b      	ldr	r2, [pc, #108]	@ (80065e4 <HAL_DMA_Abort_IT+0x400>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_DMA_Abort_IT+0x3a2>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a19      	ldr	r2, [pc, #100]	@ (80065e8 <HAL_DMA_Abort_IT+0x404>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d132      	bne.n	80065ec <HAL_DMA_Abort_IT+0x408>
 8006586:	2301      	movs	r3, #1
 8006588:	e031      	b.n	80065ee <HAL_DMA_Abort_IT+0x40a>
 800658a:	bf00      	nop
 800658c:	40020010 	.word	0x40020010
 8006590:	40020028 	.word	0x40020028
 8006594:	40020040 	.word	0x40020040
 8006598:	40020058 	.word	0x40020058
 800659c:	40020070 	.word	0x40020070
 80065a0:	40020088 	.word	0x40020088
 80065a4:	400200a0 	.word	0x400200a0
 80065a8:	400200b8 	.word	0x400200b8
 80065ac:	40020410 	.word	0x40020410
 80065b0:	40020428 	.word	0x40020428
 80065b4:	40020440 	.word	0x40020440
 80065b8:	40020458 	.word	0x40020458
 80065bc:	40020470 	.word	0x40020470
 80065c0:	40020488 	.word	0x40020488
 80065c4:	400204a0 	.word	0x400204a0
 80065c8:	400204b8 	.word	0x400204b8
 80065cc:	58025408 	.word	0x58025408
 80065d0:	5802541c 	.word	0x5802541c
 80065d4:	58025430 	.word	0x58025430
 80065d8:	58025444 	.word	0x58025444
 80065dc:	58025458 	.word	0x58025458
 80065e0:	5802546c 	.word	0x5802546c
 80065e4:	58025480 	.word	0x58025480
 80065e8:	58025494 	.word	0x58025494
 80065ec:	2300      	movs	r3, #0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d028      	beq.n	8006644 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006600:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006606:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	2201      	movs	r2, #1
 8006612:	409a      	lsls	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006620:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00c      	beq.n	8006644 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006638:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006642:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop

08006670 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	@ 0x28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800667c:	4b67      	ldr	r3, [pc, #412]	@ (800681c <HAL_DMA_IRQHandler+0x1ac>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a67      	ldr	r2, [pc, #412]	@ (8006820 <HAL_DMA_IRQHandler+0x1b0>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	0a9b      	lsrs	r3, r3, #10
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006694:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a5f      	ldr	r2, [pc, #380]	@ (8006824 <HAL_DMA_IRQHandler+0x1b4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d04a      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006828 <HAL_DMA_IRQHandler+0x1b8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d045      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a5c      	ldr	r2, [pc, #368]	@ (800682c <HAL_DMA_IRQHandler+0x1bc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d040      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a5a      	ldr	r2, [pc, #360]	@ (8006830 <HAL_DMA_IRQHandler+0x1c0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d03b      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a59      	ldr	r2, [pc, #356]	@ (8006834 <HAL_DMA_IRQHandler+0x1c4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d036      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a57      	ldr	r2, [pc, #348]	@ (8006838 <HAL_DMA_IRQHandler+0x1c8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d031      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a56      	ldr	r2, [pc, #344]	@ (800683c <HAL_DMA_IRQHandler+0x1cc>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d02c      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a54      	ldr	r2, [pc, #336]	@ (8006840 <HAL_DMA_IRQHandler+0x1d0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d027      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a53      	ldr	r2, [pc, #332]	@ (8006844 <HAL_DMA_IRQHandler+0x1d4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d022      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a51      	ldr	r2, [pc, #324]	@ (8006848 <HAL_DMA_IRQHandler+0x1d8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01d      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a50      	ldr	r2, [pc, #320]	@ (800684c <HAL_DMA_IRQHandler+0x1dc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d018      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a4e      	ldr	r2, [pc, #312]	@ (8006850 <HAL_DMA_IRQHandler+0x1e0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a4d      	ldr	r2, [pc, #308]	@ (8006854 <HAL_DMA_IRQHandler+0x1e4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a4b      	ldr	r2, [pc, #300]	@ (8006858 <HAL_DMA_IRQHandler+0x1e8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a4a      	ldr	r2, [pc, #296]	@ (800685c <HAL_DMA_IRQHandler+0x1ec>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_DMA_IRQHandler+0xd2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a48      	ldr	r2, [pc, #288]	@ (8006860 <HAL_DMA_IRQHandler+0x1f0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d101      	bne.n	8006746 <HAL_DMA_IRQHandler+0xd6>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <HAL_DMA_IRQHandler+0xd8>
 8006746:	2300      	movs	r3, #0
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 842b 	beq.w	8006fa4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	2208      	movs	r2, #8
 8006758:	409a      	lsls	r2, r3
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	4013      	ands	r3, r2
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 80a2 	beq.w	80068a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a2e      	ldr	r2, [pc, #184]	@ (8006824 <HAL_DMA_IRQHandler+0x1b4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d04a      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a2d      	ldr	r2, [pc, #180]	@ (8006828 <HAL_DMA_IRQHandler+0x1b8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d045      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a2b      	ldr	r2, [pc, #172]	@ (800682c <HAL_DMA_IRQHandler+0x1bc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d040      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a2a      	ldr	r2, [pc, #168]	@ (8006830 <HAL_DMA_IRQHandler+0x1c0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d03b      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a28      	ldr	r2, [pc, #160]	@ (8006834 <HAL_DMA_IRQHandler+0x1c4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d036      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a27      	ldr	r2, [pc, #156]	@ (8006838 <HAL_DMA_IRQHandler+0x1c8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d031      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a25      	ldr	r2, [pc, #148]	@ (800683c <HAL_DMA_IRQHandler+0x1cc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d02c      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a24      	ldr	r2, [pc, #144]	@ (8006840 <HAL_DMA_IRQHandler+0x1d0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d027      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a22      	ldr	r2, [pc, #136]	@ (8006844 <HAL_DMA_IRQHandler+0x1d4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d022      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a21      	ldr	r2, [pc, #132]	@ (8006848 <HAL_DMA_IRQHandler+0x1d8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d01d      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1f      	ldr	r2, [pc, #124]	@ (800684c <HAL_DMA_IRQHandler+0x1dc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d018      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006850 <HAL_DMA_IRQHandler+0x1e0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d013      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006854 <HAL_DMA_IRQHandler+0x1e4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00e      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006858 <HAL_DMA_IRQHandler+0x1e8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d009      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a19      	ldr	r2, [pc, #100]	@ (800685c <HAL_DMA_IRQHandler+0x1ec>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <HAL_DMA_IRQHandler+0x194>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a18      	ldr	r2, [pc, #96]	@ (8006860 <HAL_DMA_IRQHandler+0x1f0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d12f      	bne.n	8006864 <HAL_DMA_IRQHandler+0x1f4>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	bf14      	ite	ne
 8006812:	2301      	movne	r3, #1
 8006814:	2300      	moveq	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	e02e      	b.n	8006878 <HAL_DMA_IRQHandler+0x208>
 800681a:	bf00      	nop
 800681c:	24000240 	.word	0x24000240
 8006820:	1b4e81b5 	.word	0x1b4e81b5
 8006824:	40020010 	.word	0x40020010
 8006828:	40020028 	.word	0x40020028
 800682c:	40020040 	.word	0x40020040
 8006830:	40020058 	.word	0x40020058
 8006834:	40020070 	.word	0x40020070
 8006838:	40020088 	.word	0x40020088
 800683c:	400200a0 	.word	0x400200a0
 8006840:	400200b8 	.word	0x400200b8
 8006844:	40020410 	.word	0x40020410
 8006848:	40020428 	.word	0x40020428
 800684c:	40020440 	.word	0x40020440
 8006850:	40020458 	.word	0x40020458
 8006854:	40020470 	.word	0x40020470
 8006858:	40020488 	.word	0x40020488
 800685c:	400204a0 	.word	0x400204a0
 8006860:	400204b8 	.word	0x400204b8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	bf14      	ite	ne
 8006872:	2301      	movne	r3, #1
 8006874:	2300      	moveq	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d015      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0204 	bic.w	r2, r2, #4
 800688a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	2208      	movs	r2, #8
 8006896:	409a      	lsls	r2, r3
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a0:	f043 0201 	orr.w	r2, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	fa22 f303 	lsr.w	r3, r2, r3
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d06e      	beq.n	800699c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a69      	ldr	r2, [pc, #420]	@ (8006a68 <HAL_DMA_IRQHandler+0x3f8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d04a      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a67      	ldr	r2, [pc, #412]	@ (8006a6c <HAL_DMA_IRQHandler+0x3fc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d045      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a66      	ldr	r2, [pc, #408]	@ (8006a70 <HAL_DMA_IRQHandler+0x400>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d040      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a64      	ldr	r2, [pc, #400]	@ (8006a74 <HAL_DMA_IRQHandler+0x404>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d03b      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a63      	ldr	r2, [pc, #396]	@ (8006a78 <HAL_DMA_IRQHandler+0x408>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d036      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a61      	ldr	r2, [pc, #388]	@ (8006a7c <HAL_DMA_IRQHandler+0x40c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d031      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a60      	ldr	r2, [pc, #384]	@ (8006a80 <HAL_DMA_IRQHandler+0x410>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d02c      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a5e      	ldr	r2, [pc, #376]	@ (8006a84 <HAL_DMA_IRQHandler+0x414>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d027      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a5d      	ldr	r2, [pc, #372]	@ (8006a88 <HAL_DMA_IRQHandler+0x418>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d022      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a5b      	ldr	r2, [pc, #364]	@ (8006a8c <HAL_DMA_IRQHandler+0x41c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01d      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a5a      	ldr	r2, [pc, #360]	@ (8006a90 <HAL_DMA_IRQHandler+0x420>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d018      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a58      	ldr	r2, [pc, #352]	@ (8006a94 <HAL_DMA_IRQHandler+0x424>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a57      	ldr	r2, [pc, #348]	@ (8006a98 <HAL_DMA_IRQHandler+0x428>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a55      	ldr	r2, [pc, #340]	@ (8006a9c <HAL_DMA_IRQHandler+0x42c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a54      	ldr	r2, [pc, #336]	@ (8006aa0 <HAL_DMA_IRQHandler+0x430>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_DMA_IRQHandler+0x2ee>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a52      	ldr	r2, [pc, #328]	@ (8006aa4 <HAL_DMA_IRQHandler+0x434>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d10a      	bne.n	8006974 <HAL_DMA_IRQHandler+0x304>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006968:	2b00      	cmp	r3, #0
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e003      	b.n	800697c <HAL_DMA_IRQHandler+0x30c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00d      	beq.n	800699c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	2201      	movs	r2, #1
 800698a:	409a      	lsls	r2, r3
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006994:	f043 0202 	orr.w	r2, r3, #2
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a0:	f003 031f 	and.w	r3, r3, #31
 80069a4:	2204      	movs	r2, #4
 80069a6:	409a      	lsls	r2, r3
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 808f 	beq.w	8006ad0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <HAL_DMA_IRQHandler+0x3f8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d04a      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a6c <HAL_DMA_IRQHandler+0x3fc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d045      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a29      	ldr	r2, [pc, #164]	@ (8006a70 <HAL_DMA_IRQHandler+0x400>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d040      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a27      	ldr	r2, [pc, #156]	@ (8006a74 <HAL_DMA_IRQHandler+0x404>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d03b      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a26      	ldr	r2, [pc, #152]	@ (8006a78 <HAL_DMA_IRQHandler+0x408>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d036      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a24      	ldr	r2, [pc, #144]	@ (8006a7c <HAL_DMA_IRQHandler+0x40c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d031      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a23      	ldr	r2, [pc, #140]	@ (8006a80 <HAL_DMA_IRQHandler+0x410>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d02c      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a21      	ldr	r2, [pc, #132]	@ (8006a84 <HAL_DMA_IRQHandler+0x414>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d027      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a20      	ldr	r2, [pc, #128]	@ (8006a88 <HAL_DMA_IRQHandler+0x418>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d022      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1e      	ldr	r2, [pc, #120]	@ (8006a8c <HAL_DMA_IRQHandler+0x41c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01d      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a90 <HAL_DMA_IRQHandler+0x420>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d018      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1b      	ldr	r2, [pc, #108]	@ (8006a94 <HAL_DMA_IRQHandler+0x424>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a98 <HAL_DMA_IRQHandler+0x428>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00e      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a18      	ldr	r2, [pc, #96]	@ (8006a9c <HAL_DMA_IRQHandler+0x42c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a17      	ldr	r2, [pc, #92]	@ (8006aa0 <HAL_DMA_IRQHandler+0x430>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <HAL_DMA_IRQHandler+0x3e2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <HAL_DMA_IRQHandler+0x434>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d12a      	bne.n	8006aa8 <HAL_DMA_IRQHandler+0x438>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bf14      	ite	ne
 8006a60:	2301      	movne	r3, #1
 8006a62:	2300      	moveq	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	e023      	b.n	8006ab0 <HAL_DMA_IRQHandler+0x440>
 8006a68:	40020010 	.word	0x40020010
 8006a6c:	40020028 	.word	0x40020028
 8006a70:	40020040 	.word	0x40020040
 8006a74:	40020058 	.word	0x40020058
 8006a78:	40020070 	.word	0x40020070
 8006a7c:	40020088 	.word	0x40020088
 8006a80:	400200a0 	.word	0x400200a0
 8006a84:	400200b8 	.word	0x400200b8
 8006a88:	40020410 	.word	0x40020410
 8006a8c:	40020428 	.word	0x40020428
 8006a90:	40020440 	.word	0x40020440
 8006a94:	40020458 	.word	0x40020458
 8006a98:	40020470 	.word	0x40020470
 8006a9c:	40020488 	.word	0x40020488
 8006aa0:	400204a0 	.word	0x400204a0
 8006aa4:	400204b8 	.word	0x400204b8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00d      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab8:	f003 031f 	and.w	r3, r3, #31
 8006abc:	2204      	movs	r2, #4
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac8:	f043 0204 	orr.w	r2, r3, #4
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2210      	movs	r2, #16
 8006ada:	409a      	lsls	r2, r3
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80a6 	beq.w	8006c32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a85      	ldr	r2, [pc, #532]	@ (8006d00 <HAL_DMA_IRQHandler+0x690>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d04a      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a83      	ldr	r2, [pc, #524]	@ (8006d04 <HAL_DMA_IRQHandler+0x694>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d045      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a82      	ldr	r2, [pc, #520]	@ (8006d08 <HAL_DMA_IRQHandler+0x698>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d040      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a80      	ldr	r2, [pc, #512]	@ (8006d0c <HAL_DMA_IRQHandler+0x69c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d03b      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a7f      	ldr	r2, [pc, #508]	@ (8006d10 <HAL_DMA_IRQHandler+0x6a0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d036      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a7d      	ldr	r2, [pc, #500]	@ (8006d14 <HAL_DMA_IRQHandler+0x6a4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d031      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a7c      	ldr	r2, [pc, #496]	@ (8006d18 <HAL_DMA_IRQHandler+0x6a8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d02c      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a7a      	ldr	r2, [pc, #488]	@ (8006d1c <HAL_DMA_IRQHandler+0x6ac>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d027      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a79      	ldr	r2, [pc, #484]	@ (8006d20 <HAL_DMA_IRQHandler+0x6b0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d022      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a77      	ldr	r2, [pc, #476]	@ (8006d24 <HAL_DMA_IRQHandler+0x6b4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d01d      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a76      	ldr	r2, [pc, #472]	@ (8006d28 <HAL_DMA_IRQHandler+0x6b8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d018      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a74      	ldr	r2, [pc, #464]	@ (8006d2c <HAL_DMA_IRQHandler+0x6bc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d013      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a73      	ldr	r2, [pc, #460]	@ (8006d30 <HAL_DMA_IRQHandler+0x6c0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00e      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a71      	ldr	r2, [pc, #452]	@ (8006d34 <HAL_DMA_IRQHandler+0x6c4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d009      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a70      	ldr	r2, [pc, #448]	@ (8006d38 <HAL_DMA_IRQHandler+0x6c8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x516>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a6e      	ldr	r2, [pc, #440]	@ (8006d3c <HAL_DMA_IRQHandler+0x6cc>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d10a      	bne.n	8006b9c <HAL_DMA_IRQHandler+0x52c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0308 	and.w	r3, r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf14      	ite	ne
 8006b94:	2301      	movne	r3, #1
 8006b96:	2300      	moveq	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	e009      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x540>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bf14      	ite	ne
 8006baa:	2301      	movne	r3, #1
 8006bac:	2300      	moveq	r3, #0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d03e      	beq.n	8006c32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d018      	beq.n	8006c04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d108      	bne.n	8006bf2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d024      	beq.n	8006c32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
 8006bf0:	e01f      	b.n	8006c32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01b      	beq.n	8006c32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
 8006c02:	e016      	b.n	8006c32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d107      	bne.n	8006c22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0208 	bic.w	r2, r2, #8
 8006c20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	409a      	lsls	r2, r3
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8110 	beq.w	8006e68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006d00 <HAL_DMA_IRQHandler+0x690>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d04a      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2b      	ldr	r2, [pc, #172]	@ (8006d04 <HAL_DMA_IRQHandler+0x694>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d045      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a29      	ldr	r2, [pc, #164]	@ (8006d08 <HAL_DMA_IRQHandler+0x698>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d040      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a28      	ldr	r2, [pc, #160]	@ (8006d0c <HAL_DMA_IRQHandler+0x69c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d03b      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a26      	ldr	r2, [pc, #152]	@ (8006d10 <HAL_DMA_IRQHandler+0x6a0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d036      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a25      	ldr	r2, [pc, #148]	@ (8006d14 <HAL_DMA_IRQHandler+0x6a4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d031      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a23      	ldr	r2, [pc, #140]	@ (8006d18 <HAL_DMA_IRQHandler+0x6a8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d02c      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a22      	ldr	r2, [pc, #136]	@ (8006d1c <HAL_DMA_IRQHandler+0x6ac>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d027      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a20      	ldr	r2, [pc, #128]	@ (8006d20 <HAL_DMA_IRQHandler+0x6b0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d022      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d24 <HAL_DMA_IRQHandler+0x6b4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01d      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <HAL_DMA_IRQHandler+0x6b8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1c      	ldr	r2, [pc, #112]	@ (8006d2c <HAL_DMA_IRQHandler+0x6bc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006d30 <HAL_DMA_IRQHandler+0x6c0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a19      	ldr	r2, [pc, #100]	@ (8006d34 <HAL_DMA_IRQHandler+0x6c4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a17      	ldr	r2, [pc, #92]	@ (8006d38 <HAL_DMA_IRQHandler+0x6c8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x678>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a16      	ldr	r2, [pc, #88]	@ (8006d3c <HAL_DMA_IRQHandler+0x6cc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d12b      	bne.n	8006d40 <HAL_DMA_IRQHandler+0x6d0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bf14      	ite	ne
 8006cf6:	2301      	movne	r3, #1
 8006cf8:	2300      	moveq	r3, #0
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	e02a      	b.n	8006d54 <HAL_DMA_IRQHandler+0x6e4>
 8006cfe:	bf00      	nop
 8006d00:	40020010 	.word	0x40020010
 8006d04:	40020028 	.word	0x40020028
 8006d08:	40020040 	.word	0x40020040
 8006d0c:	40020058 	.word	0x40020058
 8006d10:	40020070 	.word	0x40020070
 8006d14:	40020088 	.word	0x40020088
 8006d18:	400200a0 	.word	0x400200a0
 8006d1c:	400200b8 	.word	0x400200b8
 8006d20:	40020410 	.word	0x40020410
 8006d24:	40020428 	.word	0x40020428
 8006d28:	40020440 	.word	0x40020440
 8006d2c:	40020458 	.word	0x40020458
 8006d30:	40020470 	.word	0x40020470
 8006d34:	40020488 	.word	0x40020488
 8006d38:	400204a0 	.word	0x400204a0
 8006d3c:	400204b8 	.word	0x400204b8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bf14      	ite	ne
 8006d4e:	2301      	movne	r3, #1
 8006d50:	2300      	moveq	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8087 	beq.w	8006e68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2220      	movs	r2, #32
 8006d64:	409a      	lsls	r2, r3
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d139      	bne.n	8006dea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0216 	bic.w	r2, r2, #22
 8006d84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695a      	ldr	r2, [r3, #20]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d103      	bne.n	8006da6 <HAL_DMA_IRQHandler+0x736>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0208 	bic.w	r2, r2, #8
 8006db4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	223f      	movs	r2, #63	@ 0x3f
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 834a 	beq.w	8007474 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	4798      	blx	r3
          }
          return;
 8006de8:	e344      	b.n	8007474 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d018      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d108      	bne.n	8006e18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d02c      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3
 8006e16:	e027      	b.n	8006e68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d023      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
 8006e28:	e01e      	b.n	8006e68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10f      	bne.n	8006e58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0210 	bic.w	r2, r2, #16
 8006e46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 8306 	beq.w	800747e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8088 	beq.w	8006f90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2204      	movs	r2, #4
 8006e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a7a      	ldr	r2, [pc, #488]	@ (8007078 <HAL_DMA_IRQHandler+0xa08>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d04a      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a79      	ldr	r2, [pc, #484]	@ (800707c <HAL_DMA_IRQHandler+0xa0c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d045      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a77      	ldr	r2, [pc, #476]	@ (8007080 <HAL_DMA_IRQHandler+0xa10>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d040      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a76      	ldr	r2, [pc, #472]	@ (8007084 <HAL_DMA_IRQHandler+0xa14>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d03b      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a74      	ldr	r2, [pc, #464]	@ (8007088 <HAL_DMA_IRQHandler+0xa18>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d036      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a73      	ldr	r2, [pc, #460]	@ (800708c <HAL_DMA_IRQHandler+0xa1c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d031      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a71      	ldr	r2, [pc, #452]	@ (8007090 <HAL_DMA_IRQHandler+0xa20>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d02c      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a70      	ldr	r2, [pc, #448]	@ (8007094 <HAL_DMA_IRQHandler+0xa24>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d027      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a6e      	ldr	r2, [pc, #440]	@ (8007098 <HAL_DMA_IRQHandler+0xa28>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d022      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800709c <HAL_DMA_IRQHandler+0xa2c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d01d      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80070a0 <HAL_DMA_IRQHandler+0xa30>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d018      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a6a      	ldr	r2, [pc, #424]	@ (80070a4 <HAL_DMA_IRQHandler+0xa34>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d013      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a68      	ldr	r2, [pc, #416]	@ (80070a8 <HAL_DMA_IRQHandler+0xa38>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00e      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a67      	ldr	r2, [pc, #412]	@ (80070ac <HAL_DMA_IRQHandler+0xa3c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d009      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a65      	ldr	r2, [pc, #404]	@ (80070b0 <HAL_DMA_IRQHandler+0xa40>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x8b8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a64      	ldr	r2, [pc, #400]	@ (80070b4 <HAL_DMA_IRQHandler+0xa44>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d108      	bne.n	8006f3a <HAL_DMA_IRQHandler+0x8ca>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e007      	b.n	8006f4a <HAL_DMA_IRQHandler+0x8da>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0201 	bic.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d307      	bcc.n	8006f66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f2      	bne.n	8006f4a <HAL_DMA_IRQHandler+0x8da>
 8006f64:	e000      	b.n	8006f68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006f66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2203      	movs	r2, #3
 8006f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006f7e:	e003      	b.n	8006f88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8272 	beq.w	800747e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
 8006fa2:	e26c      	b.n	800747e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a43      	ldr	r2, [pc, #268]	@ (80070b8 <HAL_DMA_IRQHandler+0xa48>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d022      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x984>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a42      	ldr	r2, [pc, #264]	@ (80070bc <HAL_DMA_IRQHandler+0xa4c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d01d      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x984>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a40      	ldr	r2, [pc, #256]	@ (80070c0 <HAL_DMA_IRQHandler+0xa50>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d018      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x984>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80070c4 <HAL_DMA_IRQHandler+0xa54>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d013      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x984>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a3d      	ldr	r2, [pc, #244]	@ (80070c8 <HAL_DMA_IRQHandler+0xa58>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00e      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x984>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a3c      	ldr	r2, [pc, #240]	@ (80070cc <HAL_DMA_IRQHandler+0xa5c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d009      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x984>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a3a      	ldr	r2, [pc, #232]	@ (80070d0 <HAL_DMA_IRQHandler+0xa60>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x984>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a39      	ldr	r2, [pc, #228]	@ (80070d4 <HAL_DMA_IRQHandler+0xa64>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d101      	bne.n	8006ff8 <HAL_DMA_IRQHandler+0x988>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <HAL_DMA_IRQHandler+0x98a>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 823f 	beq.w	800747e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800700c:	f003 031f 	and.w	r3, r3, #31
 8007010:	2204      	movs	r2, #4
 8007012:	409a      	lsls	r2, r3
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	4013      	ands	r3, r2
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80cd 	beq.w	80071b8 <HAL_DMA_IRQHandler+0xb48>
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80c7 	beq.w	80071b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	2204      	movs	r2, #4
 8007034:	409a      	lsls	r2, r3
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d049      	beq.n	80070d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 8210 	beq.w	8007478 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007060:	e20a      	b.n	8007478 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8206 	beq.w	8007478 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007074:	e200      	b.n	8007478 <HAL_DMA_IRQHandler+0xe08>
 8007076:	bf00      	nop
 8007078:	40020010 	.word	0x40020010
 800707c:	40020028 	.word	0x40020028
 8007080:	40020040 	.word	0x40020040
 8007084:	40020058 	.word	0x40020058
 8007088:	40020070 	.word	0x40020070
 800708c:	40020088 	.word	0x40020088
 8007090:	400200a0 	.word	0x400200a0
 8007094:	400200b8 	.word	0x400200b8
 8007098:	40020410 	.word	0x40020410
 800709c:	40020428 	.word	0x40020428
 80070a0:	40020440 	.word	0x40020440
 80070a4:	40020458 	.word	0x40020458
 80070a8:	40020470 	.word	0x40020470
 80070ac:	40020488 	.word	0x40020488
 80070b0:	400204a0 	.word	0x400204a0
 80070b4:	400204b8 	.word	0x400204b8
 80070b8:	58025408 	.word	0x58025408
 80070bc:	5802541c 	.word	0x5802541c
 80070c0:	58025430 	.word	0x58025430
 80070c4:	58025444 	.word	0x58025444
 80070c8:	58025458 	.word	0x58025458
 80070cc:	5802546c 	.word	0x5802546c
 80070d0:	58025480 	.word	0x58025480
 80070d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d160      	bne.n	80071a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a7f      	ldr	r2, [pc, #508]	@ (80072e4 <HAL_DMA_IRQHandler+0xc74>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d04a      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a7d      	ldr	r2, [pc, #500]	@ (80072e8 <HAL_DMA_IRQHandler+0xc78>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d045      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a7c      	ldr	r2, [pc, #496]	@ (80072ec <HAL_DMA_IRQHandler+0xc7c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d040      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a7a      	ldr	r2, [pc, #488]	@ (80072f0 <HAL_DMA_IRQHandler+0xc80>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d03b      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a79      	ldr	r2, [pc, #484]	@ (80072f4 <HAL_DMA_IRQHandler+0xc84>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d036      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a77      	ldr	r2, [pc, #476]	@ (80072f8 <HAL_DMA_IRQHandler+0xc88>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d031      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a76      	ldr	r2, [pc, #472]	@ (80072fc <HAL_DMA_IRQHandler+0xc8c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d02c      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a74      	ldr	r2, [pc, #464]	@ (8007300 <HAL_DMA_IRQHandler+0xc90>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d027      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a73      	ldr	r2, [pc, #460]	@ (8007304 <HAL_DMA_IRQHandler+0xc94>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d022      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a71      	ldr	r2, [pc, #452]	@ (8007308 <HAL_DMA_IRQHandler+0xc98>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01d      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a70      	ldr	r2, [pc, #448]	@ (800730c <HAL_DMA_IRQHandler+0xc9c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d018      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a6e      	ldr	r2, [pc, #440]	@ (8007310 <HAL_DMA_IRQHandler+0xca0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d013      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a6d      	ldr	r2, [pc, #436]	@ (8007314 <HAL_DMA_IRQHandler+0xca4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00e      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a6b      	ldr	r2, [pc, #428]	@ (8007318 <HAL_DMA_IRQHandler+0xca8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d009      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6a      	ldr	r2, [pc, #424]	@ (800731c <HAL_DMA_IRQHandler+0xcac>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d004      	beq.n	8007182 <HAL_DMA_IRQHandler+0xb12>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a68      	ldr	r2, [pc, #416]	@ (8007320 <HAL_DMA_IRQHandler+0xcb0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d108      	bne.n	8007194 <HAL_DMA_IRQHandler+0xb24>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0208 	bic.w	r2, r2, #8
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e007      	b.n	80071a4 <HAL_DMA_IRQHandler+0xb34>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0204 	bic.w	r2, r2, #4
 80071a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8165 	beq.w	8007478 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071b6:	e15f      	b.n	8007478 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071bc:	f003 031f 	and.w	r3, r3, #31
 80071c0:	2202      	movs	r2, #2
 80071c2:	409a      	lsls	r2, r3
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80c5 	beq.w	8007358 <HAL_DMA_IRQHandler+0xce8>
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80bf 	beq.w	8007358 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071de:	f003 031f 	and.w	r3, r3, #31
 80071e2:	2202      	movs	r2, #2
 80071e4:	409a      	lsls	r2, r3
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d018      	beq.n	8007226 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 813a 	beq.w	800747c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007210:	e134      	b.n	800747c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 8130 	beq.w	800747c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007224:	e12a      	b.n	800747c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	f040 8089 	bne.w	8007344 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a2b      	ldr	r2, [pc, #172]	@ (80072e4 <HAL_DMA_IRQHandler+0xc74>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d04a      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a29      	ldr	r2, [pc, #164]	@ (80072e8 <HAL_DMA_IRQHandler+0xc78>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d045      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a28      	ldr	r2, [pc, #160]	@ (80072ec <HAL_DMA_IRQHandler+0xc7c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d040      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a26      	ldr	r2, [pc, #152]	@ (80072f0 <HAL_DMA_IRQHandler+0xc80>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d03b      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a25      	ldr	r2, [pc, #148]	@ (80072f4 <HAL_DMA_IRQHandler+0xc84>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d036      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a23      	ldr	r2, [pc, #140]	@ (80072f8 <HAL_DMA_IRQHandler+0xc88>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d031      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a22      	ldr	r2, [pc, #136]	@ (80072fc <HAL_DMA_IRQHandler+0xc8c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d02c      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a20      	ldr	r2, [pc, #128]	@ (8007300 <HAL_DMA_IRQHandler+0xc90>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d027      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1f      	ldr	r2, [pc, #124]	@ (8007304 <HAL_DMA_IRQHandler+0xc94>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d022      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1d      	ldr	r2, [pc, #116]	@ (8007308 <HAL_DMA_IRQHandler+0xc98>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d01d      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1c      	ldr	r2, [pc, #112]	@ (800730c <HAL_DMA_IRQHandler+0xc9c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d018      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007310 <HAL_DMA_IRQHandler+0xca0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d013      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a19      	ldr	r2, [pc, #100]	@ (8007314 <HAL_DMA_IRQHandler+0xca4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d00e      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a17      	ldr	r2, [pc, #92]	@ (8007318 <HAL_DMA_IRQHandler+0xca8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d009      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a16      	ldr	r2, [pc, #88]	@ (800731c <HAL_DMA_IRQHandler+0xcac>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d004      	beq.n	80072d2 <HAL_DMA_IRQHandler+0xc62>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a14      	ldr	r2, [pc, #80]	@ (8007320 <HAL_DMA_IRQHandler+0xcb0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d128      	bne.n	8007324 <HAL_DMA_IRQHandler+0xcb4>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0214 	bic.w	r2, r2, #20
 80072e0:	601a      	str	r2, [r3, #0]
 80072e2:	e027      	b.n	8007334 <HAL_DMA_IRQHandler+0xcc4>
 80072e4:	40020010 	.word	0x40020010
 80072e8:	40020028 	.word	0x40020028
 80072ec:	40020040 	.word	0x40020040
 80072f0:	40020058 	.word	0x40020058
 80072f4:	40020070 	.word	0x40020070
 80072f8:	40020088 	.word	0x40020088
 80072fc:	400200a0 	.word	0x400200a0
 8007300:	400200b8 	.word	0x400200b8
 8007304:	40020410 	.word	0x40020410
 8007308:	40020428 	.word	0x40020428
 800730c:	40020440 	.word	0x40020440
 8007310:	40020458 	.word	0x40020458
 8007314:	40020470 	.word	0x40020470
 8007318:	40020488 	.word	0x40020488
 800731c:	400204a0 	.word	0x400204a0
 8007320:	400204b8 	.word	0x400204b8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 020a 	bic.w	r2, r2, #10
 8007332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8097 	beq.w	800747c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007356:	e091      	b.n	800747c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	2208      	movs	r2, #8
 8007362:	409a      	lsls	r2, r3
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	4013      	ands	r3, r2
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8088 	beq.w	800747e <HAL_DMA_IRQHandler+0xe0e>
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f003 0308 	and.w	r3, r3, #8
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8082 	beq.w	800747e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a41      	ldr	r2, [pc, #260]	@ (8007484 <HAL_DMA_IRQHandler+0xe14>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d04a      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a3f      	ldr	r2, [pc, #252]	@ (8007488 <HAL_DMA_IRQHandler+0xe18>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d045      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a3e      	ldr	r2, [pc, #248]	@ (800748c <HAL_DMA_IRQHandler+0xe1c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d040      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a3c      	ldr	r2, [pc, #240]	@ (8007490 <HAL_DMA_IRQHandler+0xe20>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d03b      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a3b      	ldr	r2, [pc, #236]	@ (8007494 <HAL_DMA_IRQHandler+0xe24>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d036      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a39      	ldr	r2, [pc, #228]	@ (8007498 <HAL_DMA_IRQHandler+0xe28>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d031      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a38      	ldr	r2, [pc, #224]	@ (800749c <HAL_DMA_IRQHandler+0xe2c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d02c      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a36      	ldr	r2, [pc, #216]	@ (80074a0 <HAL_DMA_IRQHandler+0xe30>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d027      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a35      	ldr	r2, [pc, #212]	@ (80074a4 <HAL_DMA_IRQHandler+0xe34>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d022      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a33      	ldr	r2, [pc, #204]	@ (80074a8 <HAL_DMA_IRQHandler+0xe38>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01d      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a32      	ldr	r2, [pc, #200]	@ (80074ac <HAL_DMA_IRQHandler+0xe3c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d018      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a30      	ldr	r2, [pc, #192]	@ (80074b0 <HAL_DMA_IRQHandler+0xe40>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2f      	ldr	r2, [pc, #188]	@ (80074b4 <HAL_DMA_IRQHandler+0xe44>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a2d      	ldr	r2, [pc, #180]	@ (80074b8 <HAL_DMA_IRQHandler+0xe48>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a2c      	ldr	r2, [pc, #176]	@ (80074bc <HAL_DMA_IRQHandler+0xe4c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_DMA_IRQHandler+0xdaa>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a2a      	ldr	r2, [pc, #168]	@ (80074c0 <HAL_DMA_IRQHandler+0xe50>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d108      	bne.n	800742c <HAL_DMA_IRQHandler+0xdbc>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 021c 	bic.w	r2, r2, #28
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e007      	b.n	800743c <HAL_DMA_IRQHandler+0xdcc>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 020e 	bic.w	r2, r2, #14
 800743a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	2201      	movs	r2, #1
 8007446:	409a      	lsls	r2, r3
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
 8007472:	e004      	b.n	800747e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007474:	bf00      	nop
 8007476:	e002      	b.n	800747e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007478:	bf00      	nop
 800747a:	e000      	b.n	800747e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800747c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800747e:	3728      	adds	r7, #40	@ 0x28
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	40020010 	.word	0x40020010
 8007488:	40020028 	.word	0x40020028
 800748c:	40020040 	.word	0x40020040
 8007490:	40020058 	.word	0x40020058
 8007494:	40020070 	.word	0x40020070
 8007498:	40020088 	.word	0x40020088
 800749c:	400200a0 	.word	0x400200a0
 80074a0:	400200b8 	.word	0x400200b8
 80074a4:	40020410 	.word	0x40020410
 80074a8:	40020428 	.word	0x40020428
 80074ac:	40020440 	.word	0x40020440
 80074b0:	40020458 	.word	0x40020458
 80074b4:	40020470 	.word	0x40020470
 80074b8:	40020488 	.word	0x40020488
 80074bc:	400204a0 	.word	0x400204a0
 80074c0:	400204b8 	.word	0x400204b8

080074c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074d2:	b2db      	uxtb	r3, r3
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
 8007504:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800750a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007510:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a7f      	ldr	r2, [pc, #508]	@ (8007714 <DMA_SetConfig+0x21c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d072      	beq.n	8007602 <DMA_SetConfig+0x10a>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a7d      	ldr	r2, [pc, #500]	@ (8007718 <DMA_SetConfig+0x220>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d06d      	beq.n	8007602 <DMA_SetConfig+0x10a>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a7c      	ldr	r2, [pc, #496]	@ (800771c <DMA_SetConfig+0x224>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d068      	beq.n	8007602 <DMA_SetConfig+0x10a>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a7a      	ldr	r2, [pc, #488]	@ (8007720 <DMA_SetConfig+0x228>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d063      	beq.n	8007602 <DMA_SetConfig+0x10a>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a79      	ldr	r2, [pc, #484]	@ (8007724 <DMA_SetConfig+0x22c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d05e      	beq.n	8007602 <DMA_SetConfig+0x10a>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a77      	ldr	r2, [pc, #476]	@ (8007728 <DMA_SetConfig+0x230>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d059      	beq.n	8007602 <DMA_SetConfig+0x10a>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a76      	ldr	r2, [pc, #472]	@ (800772c <DMA_SetConfig+0x234>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d054      	beq.n	8007602 <DMA_SetConfig+0x10a>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a74      	ldr	r2, [pc, #464]	@ (8007730 <DMA_SetConfig+0x238>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d04f      	beq.n	8007602 <DMA_SetConfig+0x10a>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a73      	ldr	r2, [pc, #460]	@ (8007734 <DMA_SetConfig+0x23c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d04a      	beq.n	8007602 <DMA_SetConfig+0x10a>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a71      	ldr	r2, [pc, #452]	@ (8007738 <DMA_SetConfig+0x240>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d045      	beq.n	8007602 <DMA_SetConfig+0x10a>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a70      	ldr	r2, [pc, #448]	@ (800773c <DMA_SetConfig+0x244>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d040      	beq.n	8007602 <DMA_SetConfig+0x10a>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a6e      	ldr	r2, [pc, #440]	@ (8007740 <DMA_SetConfig+0x248>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d03b      	beq.n	8007602 <DMA_SetConfig+0x10a>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a6d      	ldr	r2, [pc, #436]	@ (8007744 <DMA_SetConfig+0x24c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d036      	beq.n	8007602 <DMA_SetConfig+0x10a>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a6b      	ldr	r2, [pc, #428]	@ (8007748 <DMA_SetConfig+0x250>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d031      	beq.n	8007602 <DMA_SetConfig+0x10a>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a6a      	ldr	r2, [pc, #424]	@ (800774c <DMA_SetConfig+0x254>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d02c      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a68      	ldr	r2, [pc, #416]	@ (8007750 <DMA_SetConfig+0x258>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d027      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a67      	ldr	r2, [pc, #412]	@ (8007754 <DMA_SetConfig+0x25c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d022      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a65      	ldr	r2, [pc, #404]	@ (8007758 <DMA_SetConfig+0x260>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01d      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a64      	ldr	r2, [pc, #400]	@ (800775c <DMA_SetConfig+0x264>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d018      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a62      	ldr	r2, [pc, #392]	@ (8007760 <DMA_SetConfig+0x268>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a61      	ldr	r2, [pc, #388]	@ (8007764 <DMA_SetConfig+0x26c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00e      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a5f      	ldr	r2, [pc, #380]	@ (8007768 <DMA_SetConfig+0x270>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a5e      	ldr	r2, [pc, #376]	@ (800776c <DMA_SetConfig+0x274>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <DMA_SetConfig+0x10a>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a5c      	ldr	r2, [pc, #368]	@ (8007770 <DMA_SetConfig+0x278>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d101      	bne.n	8007606 <DMA_SetConfig+0x10e>
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <DMA_SetConfig+0x110>
 8007606:	2300      	movs	r3, #0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00d      	beq.n	8007628 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007614:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007626:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a39      	ldr	r2, [pc, #228]	@ (8007714 <DMA_SetConfig+0x21c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d04a      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a38      	ldr	r2, [pc, #224]	@ (8007718 <DMA_SetConfig+0x220>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d045      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a36      	ldr	r2, [pc, #216]	@ (800771c <DMA_SetConfig+0x224>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d040      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a35      	ldr	r2, [pc, #212]	@ (8007720 <DMA_SetConfig+0x228>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d03b      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a33      	ldr	r2, [pc, #204]	@ (8007724 <DMA_SetConfig+0x22c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d036      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a32      	ldr	r2, [pc, #200]	@ (8007728 <DMA_SetConfig+0x230>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d031      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a30      	ldr	r2, [pc, #192]	@ (800772c <DMA_SetConfig+0x234>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d02c      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2f      	ldr	r2, [pc, #188]	@ (8007730 <DMA_SetConfig+0x238>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d027      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2d      	ldr	r2, [pc, #180]	@ (8007734 <DMA_SetConfig+0x23c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d022      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2c      	ldr	r2, [pc, #176]	@ (8007738 <DMA_SetConfig+0x240>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d01d      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2a      	ldr	r2, [pc, #168]	@ (800773c <DMA_SetConfig+0x244>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d018      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a29      	ldr	r2, [pc, #164]	@ (8007740 <DMA_SetConfig+0x248>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d013      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a27      	ldr	r2, [pc, #156]	@ (8007744 <DMA_SetConfig+0x24c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00e      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a26      	ldr	r2, [pc, #152]	@ (8007748 <DMA_SetConfig+0x250>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d009      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a24      	ldr	r2, [pc, #144]	@ (800774c <DMA_SetConfig+0x254>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <DMA_SetConfig+0x1d0>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a23      	ldr	r2, [pc, #140]	@ (8007750 <DMA_SetConfig+0x258>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d101      	bne.n	80076cc <DMA_SetConfig+0x1d4>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e000      	b.n	80076ce <DMA_SetConfig+0x1d6>
 80076cc:	2300      	movs	r3, #0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d059      	beq.n	8007786 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076d6:	f003 031f 	and.w	r3, r3, #31
 80076da:	223f      	movs	r2, #63	@ 0x3f
 80076dc:	409a      	lsls	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80076f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	2b40      	cmp	r3, #64	@ 0x40
 8007700:	d138      	bne.n	8007774 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007712:	e086      	b.n	8007822 <DMA_SetConfig+0x32a>
 8007714:	40020010 	.word	0x40020010
 8007718:	40020028 	.word	0x40020028
 800771c:	40020040 	.word	0x40020040
 8007720:	40020058 	.word	0x40020058
 8007724:	40020070 	.word	0x40020070
 8007728:	40020088 	.word	0x40020088
 800772c:	400200a0 	.word	0x400200a0
 8007730:	400200b8 	.word	0x400200b8
 8007734:	40020410 	.word	0x40020410
 8007738:	40020428 	.word	0x40020428
 800773c:	40020440 	.word	0x40020440
 8007740:	40020458 	.word	0x40020458
 8007744:	40020470 	.word	0x40020470
 8007748:	40020488 	.word	0x40020488
 800774c:	400204a0 	.word	0x400204a0
 8007750:	400204b8 	.word	0x400204b8
 8007754:	58025408 	.word	0x58025408
 8007758:	5802541c 	.word	0x5802541c
 800775c:	58025430 	.word	0x58025430
 8007760:	58025444 	.word	0x58025444
 8007764:	58025458 	.word	0x58025458
 8007768:	5802546c 	.word	0x5802546c
 800776c:	58025480 	.word	0x58025480
 8007770:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	60da      	str	r2, [r3, #12]
}
 8007784:	e04d      	b.n	8007822 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a29      	ldr	r2, [pc, #164]	@ (8007830 <DMA_SetConfig+0x338>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d022      	beq.n	80077d6 <DMA_SetConfig+0x2de>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a27      	ldr	r2, [pc, #156]	@ (8007834 <DMA_SetConfig+0x33c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d01d      	beq.n	80077d6 <DMA_SetConfig+0x2de>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a26      	ldr	r2, [pc, #152]	@ (8007838 <DMA_SetConfig+0x340>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d018      	beq.n	80077d6 <DMA_SetConfig+0x2de>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a24      	ldr	r2, [pc, #144]	@ (800783c <DMA_SetConfig+0x344>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d013      	beq.n	80077d6 <DMA_SetConfig+0x2de>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a23      	ldr	r2, [pc, #140]	@ (8007840 <DMA_SetConfig+0x348>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00e      	beq.n	80077d6 <DMA_SetConfig+0x2de>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a21      	ldr	r2, [pc, #132]	@ (8007844 <DMA_SetConfig+0x34c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d009      	beq.n	80077d6 <DMA_SetConfig+0x2de>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a20      	ldr	r2, [pc, #128]	@ (8007848 <DMA_SetConfig+0x350>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d004      	beq.n	80077d6 <DMA_SetConfig+0x2de>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a1e      	ldr	r2, [pc, #120]	@ (800784c <DMA_SetConfig+0x354>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d101      	bne.n	80077da <DMA_SetConfig+0x2e2>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <DMA_SetConfig+0x2e4>
 80077da:	2300      	movs	r3, #0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d020      	beq.n	8007822 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077e4:	f003 031f 	and.w	r3, r3, #31
 80077e8:	2201      	movs	r2, #1
 80077ea:	409a      	lsls	r2, r3
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2b40      	cmp	r3, #64	@ 0x40
 80077fe:	d108      	bne.n	8007812 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	60da      	str	r2, [r3, #12]
}
 8007810:	e007      	b.n	8007822 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	60da      	str	r2, [r3, #12]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	58025408 	.word	0x58025408
 8007834:	5802541c 	.word	0x5802541c
 8007838:	58025430 	.word	0x58025430
 800783c:	58025444 	.word	0x58025444
 8007840:	58025458 	.word	0x58025458
 8007844:	5802546c 	.word	0x5802546c
 8007848:	58025480 	.word	0x58025480
 800784c:	58025494 	.word	0x58025494

08007850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a42      	ldr	r2, [pc, #264]	@ (8007968 <DMA_CalcBaseAndBitshift+0x118>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d04a      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a41      	ldr	r2, [pc, #260]	@ (800796c <DMA_CalcBaseAndBitshift+0x11c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d045      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a3f      	ldr	r2, [pc, #252]	@ (8007970 <DMA_CalcBaseAndBitshift+0x120>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d040      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a3e      	ldr	r2, [pc, #248]	@ (8007974 <DMA_CalcBaseAndBitshift+0x124>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d03b      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a3c      	ldr	r2, [pc, #240]	@ (8007978 <DMA_CalcBaseAndBitshift+0x128>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d036      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a3b      	ldr	r2, [pc, #236]	@ (800797c <DMA_CalcBaseAndBitshift+0x12c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d031      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a39      	ldr	r2, [pc, #228]	@ (8007980 <DMA_CalcBaseAndBitshift+0x130>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d02c      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a38      	ldr	r2, [pc, #224]	@ (8007984 <DMA_CalcBaseAndBitshift+0x134>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d027      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a36      	ldr	r2, [pc, #216]	@ (8007988 <DMA_CalcBaseAndBitshift+0x138>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d022      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a35      	ldr	r2, [pc, #212]	@ (800798c <DMA_CalcBaseAndBitshift+0x13c>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d01d      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a33      	ldr	r2, [pc, #204]	@ (8007990 <DMA_CalcBaseAndBitshift+0x140>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d018      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a32      	ldr	r2, [pc, #200]	@ (8007994 <DMA_CalcBaseAndBitshift+0x144>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d013      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a30      	ldr	r2, [pc, #192]	@ (8007998 <DMA_CalcBaseAndBitshift+0x148>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00e      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a2f      	ldr	r2, [pc, #188]	@ (800799c <DMA_CalcBaseAndBitshift+0x14c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d009      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a2d      	ldr	r2, [pc, #180]	@ (80079a0 <DMA_CalcBaseAndBitshift+0x150>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d004      	beq.n	80078f8 <DMA_CalcBaseAndBitshift+0xa8>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a2c      	ldr	r2, [pc, #176]	@ (80079a4 <DMA_CalcBaseAndBitshift+0x154>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d101      	bne.n	80078fc <DMA_CalcBaseAndBitshift+0xac>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e000      	b.n	80078fe <DMA_CalcBaseAndBitshift+0xae>
 80078fc:	2300      	movs	r3, #0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d024      	beq.n	800794c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	3b10      	subs	r3, #16
 800790a:	4a27      	ldr	r2, [pc, #156]	@ (80079a8 <DMA_CalcBaseAndBitshift+0x158>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	091b      	lsrs	r3, r3, #4
 8007912:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	4a24      	ldr	r2, [pc, #144]	@ (80079ac <DMA_CalcBaseAndBitshift+0x15c>)
 800791c:	5cd3      	ldrb	r3, [r2, r3]
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b03      	cmp	r3, #3
 8007928:	d908      	bls.n	800793c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	4b1f      	ldr	r3, [pc, #124]	@ (80079b0 <DMA_CalcBaseAndBitshift+0x160>)
 8007932:	4013      	ands	r3, r2
 8007934:	1d1a      	adds	r2, r3, #4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	659a      	str	r2, [r3, #88]	@ 0x58
 800793a:	e00d      	b.n	8007958 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	461a      	mov	r2, r3
 8007942:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <DMA_CalcBaseAndBitshift+0x160>)
 8007944:	4013      	ands	r3, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6593      	str	r3, [r2, #88]	@ 0x58
 800794a:	e005      	b.n	8007958 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	40020010 	.word	0x40020010
 800796c:	40020028 	.word	0x40020028
 8007970:	40020040 	.word	0x40020040
 8007974:	40020058 	.word	0x40020058
 8007978:	40020070 	.word	0x40020070
 800797c:	40020088 	.word	0x40020088
 8007980:	400200a0 	.word	0x400200a0
 8007984:	400200b8 	.word	0x400200b8
 8007988:	40020410 	.word	0x40020410
 800798c:	40020428 	.word	0x40020428
 8007990:	40020440 	.word	0x40020440
 8007994:	40020458 	.word	0x40020458
 8007998:	40020470 	.word	0x40020470
 800799c:	40020488 	.word	0x40020488
 80079a0:	400204a0 	.word	0x400204a0
 80079a4:	400204b8 	.word	0x400204b8
 80079a8:	aaaaaaab 	.word	0xaaaaaaab
 80079ac:	0801b6cc 	.word	0x0801b6cc
 80079b0:	fffffc00 	.word	0xfffffc00

080079b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d120      	bne.n	8007a0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d858      	bhi.n	8007a82 <DMA_CheckFifoParam+0xce>
 80079d0:	a201      	add	r2, pc, #4	@ (adr r2, 80079d8 <DMA_CheckFifoParam+0x24>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	080079e9 	.word	0x080079e9
 80079dc:	080079fb 	.word	0x080079fb
 80079e0:	080079e9 	.word	0x080079e9
 80079e4:	08007a83 	.word	0x08007a83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d048      	beq.n	8007a86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80079f8:	e045      	b.n	8007a86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a02:	d142      	bne.n	8007a8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a08:	e03f      	b.n	8007a8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a12:	d123      	bne.n	8007a5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d838      	bhi.n	8007a8e <DMA_CheckFifoParam+0xda>
 8007a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <DMA_CheckFifoParam+0x70>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a3b 	.word	0x08007a3b
 8007a2c:	08007a35 	.word	0x08007a35
 8007a30:	08007a4d 	.word	0x08007a4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
        break;
 8007a38:	e030      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d025      	beq.n	8007a92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a4a:	e022      	b.n	8007a92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a54:	d11f      	bne.n	8007a96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a5a:	e01c      	b.n	8007a96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d902      	bls.n	8007a6a <DMA_CheckFifoParam+0xb6>
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d003      	beq.n	8007a70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a68:	e018      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a6e:	e015      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00e      	beq.n	8007a9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a80:	e00b      	b.n	8007a9a <DMA_CheckFifoParam+0xe6>
        break;
 8007a82:	bf00      	nop
 8007a84:	e00a      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>
        break;
 8007a86:	bf00      	nop
 8007a88:	e008      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>
        break;
 8007a8a:	bf00      	nop
 8007a8c:	e006      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>
        break;
 8007a8e:	bf00      	nop
 8007a90:	e004      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>
        break;
 8007a92:	bf00      	nop
 8007a94:	e002      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>
        break;
 8007a96:	bf00      	nop
 8007a98:	e000      	b.n	8007a9c <DMA_CheckFifoParam+0xe8>
    break;
 8007a9a:	bf00      	nop
    }
  }

  return status;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop

08007aac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a38      	ldr	r2, [pc, #224]	@ (8007ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d022      	beq.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a36      	ldr	r2, [pc, #216]	@ (8007ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d01d      	beq.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a35      	ldr	r2, [pc, #212]	@ (8007ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d018      	beq.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a33      	ldr	r2, [pc, #204]	@ (8007bac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d013      	beq.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a32      	ldr	r2, [pc, #200]	@ (8007bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00e      	beq.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a30      	ldr	r2, [pc, #192]	@ (8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d009      	beq.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a2f      	ldr	r2, [pc, #188]	@ (8007bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d004      	beq.n	8007b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a2d      	ldr	r2, [pc, #180]	@ (8007bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d101      	bne.n	8007b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01a      	beq.n	8007b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	3b08      	subs	r3, #8
 8007b1c:	4a28      	ldr	r2, [pc, #160]	@ (8007bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b22:	091b      	lsrs	r3, r3, #4
 8007b24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4b26      	ldr	r3, [pc, #152]	@ (8007bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	461a      	mov	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a24      	ldr	r2, [pc, #144]	@ (8007bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b38:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 031f 	and.w	r3, r3, #31
 8007b40:	2201      	movs	r2, #1
 8007b42:	409a      	lsls	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b48:	e024      	b.n	8007b94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	3b10      	subs	r3, #16
 8007b52:	4a1e      	ldr	r2, [pc, #120]	@ (8007bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b54:	fba2 2303 	umull	r2, r3, r2, r3
 8007b58:	091b      	lsrs	r3, r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d806      	bhi.n	8007b72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d902      	bls.n	8007b72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4b18      	ldr	r3, [pc, #96]	@ (8007bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a16      	ldr	r2, [pc, #88]	@ (8007bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007b84:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	58025408 	.word	0x58025408
 8007ba4:	5802541c 	.word	0x5802541c
 8007ba8:	58025430 	.word	0x58025430
 8007bac:	58025444 	.word	0x58025444
 8007bb0:	58025458 	.word	0x58025458
 8007bb4:	5802546c 	.word	0x5802546c
 8007bb8:	58025480 	.word	0x58025480
 8007bbc:	58025494 	.word	0x58025494
 8007bc0:	cccccccd 	.word	0xcccccccd
 8007bc4:	16009600 	.word	0x16009600
 8007bc8:	58025880 	.word	0x58025880
 8007bcc:	aaaaaaab 	.word	0xaaaaaaab
 8007bd0:	400204b8 	.word	0x400204b8
 8007bd4:	4002040f 	.word	0x4002040f
 8007bd8:	10008200 	.word	0x10008200
 8007bdc:	40020880 	.word	0x40020880

08007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d04a      	beq.n	8007c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d847      	bhi.n	8007c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a25      	ldr	r2, [pc, #148]	@ (8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d022      	beq.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a24      	ldr	r2, [pc, #144]	@ (8007c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d01d      	beq.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a22      	ldr	r2, [pc, #136]	@ (8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d018      	beq.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a21      	ldr	r2, [pc, #132]	@ (8007ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d013      	beq.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a1f      	ldr	r2, [pc, #124]	@ (8007ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00e      	beq.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a1e      	ldr	r2, [pc, #120]	@ (8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d009      	beq.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d101      	bne.n	8007c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e000      	b.n	8007c52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c50:	2300      	movs	r3, #0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4b17      	ldr	r3, [pc, #92]	@ (8007cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	461a      	mov	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a15      	ldr	r2, [pc, #84]	@ (8007cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c68:	671a      	str	r2, [r3, #112]	@ 0x70
 8007c6a:	e009      	b.n	8007c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4b14      	ldr	r3, [pc, #80]	@ (8007cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a11      	ldr	r2, [pc, #68]	@ (8007cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	2201      	movs	r2, #1
 8007c86:	409a      	lsls	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	58025408 	.word	0x58025408
 8007c9c:	5802541c 	.word	0x5802541c
 8007ca0:	58025430 	.word	0x58025430
 8007ca4:	58025444 	.word	0x58025444
 8007ca8:	58025458 	.word	0x58025458
 8007cac:	5802546c 	.word	0x5802546c
 8007cb0:	58025480 	.word	0x58025480
 8007cb4:	58025494 	.word	0x58025494
 8007cb8:	1600963f 	.word	0x1600963f
 8007cbc:	58025940 	.word	0x58025940
 8007cc0:	1000823f 	.word	0x1000823f
 8007cc4:	40020940 	.word	0x40020940

08007cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b089      	sub	sp, #36	@ 0x24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cd6:	4b89      	ldr	r3, [pc, #548]	@ (8007efc <HAL_GPIO_Init+0x234>)
 8007cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cda:	e194      	b.n	8008006 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce8:	4013      	ands	r3, r2
 8007cea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8186 	beq.w	8008000 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f003 0303 	and.w	r3, r3, #3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d005      	beq.n	8007d0c <HAL_GPIO_Init+0x44>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d130      	bne.n	8007d6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	2203      	movs	r2, #3
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4013      	ands	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d42:	2201      	movs	r2, #1
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	091b      	lsrs	r3, r3, #4
 8007d58:	f003 0201 	and.w	r2, r3, #1
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d017      	beq.n	8007daa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	2203      	movs	r2, #3
 8007d86:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d123      	bne.n	8007dfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	08da      	lsrs	r2, r3, #3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3208      	adds	r2, #8
 8007dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	220f      	movs	r2, #15
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	691a      	ldr	r2, [r3, #16]
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	08da      	lsrs	r2, r3, #3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3208      	adds	r2, #8
 8007df8:	69b9      	ldr	r1, [r7, #24]
 8007dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	2203      	movs	r2, #3
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	43db      	mvns	r3, r3
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	4013      	ands	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f003 0203 	and.w	r2, r3, #3
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	fa02 f303 	lsl.w	r3, r2, r3
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80e0 	beq.w	8008000 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e40:	4b2f      	ldr	r3, [pc, #188]	@ (8007f00 <HAL_GPIO_Init+0x238>)
 8007e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e46:	4a2e      	ldr	r2, [pc, #184]	@ (8007f00 <HAL_GPIO_Init+0x238>)
 8007e48:	f043 0302 	orr.w	r3, r3, #2
 8007e4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007e50:	4b2b      	ldr	r3, [pc, #172]	@ (8007f00 <HAL_GPIO_Init+0x238>)
 8007e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e5e:	4a29      	ldr	r2, [pc, #164]	@ (8007f04 <HAL_GPIO_Init+0x23c>)
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	3302      	adds	r3, #2
 8007e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	220f      	movs	r2, #15
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a20      	ldr	r2, [pc, #128]	@ (8007f08 <HAL_GPIO_Init+0x240>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d052      	beq.n	8007f30 <HAL_GPIO_Init+0x268>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007f0c <HAL_GPIO_Init+0x244>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d031      	beq.n	8007ef6 <HAL_GPIO_Init+0x22e>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a1e      	ldr	r2, [pc, #120]	@ (8007f10 <HAL_GPIO_Init+0x248>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d02b      	beq.n	8007ef2 <HAL_GPIO_Init+0x22a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f14 <HAL_GPIO_Init+0x24c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d025      	beq.n	8007eee <HAL_GPIO_Init+0x226>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f18 <HAL_GPIO_Init+0x250>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01f      	beq.n	8007eea <HAL_GPIO_Init+0x222>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a1b      	ldr	r2, [pc, #108]	@ (8007f1c <HAL_GPIO_Init+0x254>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d019      	beq.n	8007ee6 <HAL_GPIO_Init+0x21e>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8007f20 <HAL_GPIO_Init+0x258>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <HAL_GPIO_Init+0x21a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a19      	ldr	r2, [pc, #100]	@ (8007f24 <HAL_GPIO_Init+0x25c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00d      	beq.n	8007ede <HAL_GPIO_Init+0x216>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a18      	ldr	r2, [pc, #96]	@ (8007f28 <HAL_GPIO_Init+0x260>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d007      	beq.n	8007eda <HAL_GPIO_Init+0x212>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a17      	ldr	r2, [pc, #92]	@ (8007f2c <HAL_GPIO_Init+0x264>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d101      	bne.n	8007ed6 <HAL_GPIO_Init+0x20e>
 8007ed2:	2309      	movs	r3, #9
 8007ed4:	e02d      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007ed6:	230a      	movs	r3, #10
 8007ed8:	e02b      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007eda:	2308      	movs	r3, #8
 8007edc:	e029      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007ede:	2307      	movs	r3, #7
 8007ee0:	e027      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007ee2:	2306      	movs	r3, #6
 8007ee4:	e025      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007ee6:	2305      	movs	r3, #5
 8007ee8:	e023      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007eea:	2304      	movs	r3, #4
 8007eec:	e021      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e01f      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e01d      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e01b      	b.n	8007f32 <HAL_GPIO_Init+0x26a>
 8007efa:	bf00      	nop
 8007efc:	58000080 	.word	0x58000080
 8007f00:	58024400 	.word	0x58024400
 8007f04:	58000400 	.word	0x58000400
 8007f08:	58020000 	.word	0x58020000
 8007f0c:	58020400 	.word	0x58020400
 8007f10:	58020800 	.word	0x58020800
 8007f14:	58020c00 	.word	0x58020c00
 8007f18:	58021000 	.word	0x58021000
 8007f1c:	58021400 	.word	0x58021400
 8007f20:	58021800 	.word	0x58021800
 8007f24:	58021c00 	.word	0x58021c00
 8007f28:	58022000 	.word	0x58022000
 8007f2c:	58022400 	.word	0x58022400
 8007f30:	2300      	movs	r3, #0
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	f002 0203 	and.w	r2, r2, #3
 8007f38:	0092      	lsls	r2, r2, #2
 8007f3a:	4093      	lsls	r3, r2
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f42:	4938      	ldr	r1, [pc, #224]	@ (8008024 <HAL_GPIO_Init+0x35c>)
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	089b      	lsrs	r3, r3, #2
 8007f48:	3302      	adds	r3, #2
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	43db      	mvns	r3, r3
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	3301      	adds	r3, #1
 8008004:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	fa22 f303 	lsr.w	r3, r2, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	f47f ae63 	bne.w	8007cdc <HAL_GPIO_Init+0x14>
  }
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	3724      	adds	r7, #36	@ 0x24
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	58000400 	.word	0x58000400

08008028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	887b      	ldrh	r3, [r7, #2]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008040:	2301      	movs	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
 8008044:	e001      	b.n	800804a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	807b      	strh	r3, [r7, #2]
 8008064:	4613      	mov	r3, r2
 8008066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008068:	787b      	ldrb	r3, [r7, #1]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800806e:	887a      	ldrh	r2, [r7, #2]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008074:	e003      	b.n	800807e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008076:	887b      	ldrh	r3, [r7, #2]
 8008078:	041a      	lsls	r2, r3, #16
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	619a      	str	r2, [r3, #24]
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e08b      	b.n	80081b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fa f8b6 	bl	8002224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2224      	movs	r2, #36	@ 0x24
 80080bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0201 	bic.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80080dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80080ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d107      	bne.n	8008106 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008102:	609a      	str	r2, [r3, #8]
 8008104:	e006      	b.n	8008114 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008112:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	2b02      	cmp	r3, #2
 800811a:	d108      	bne.n	800812e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800812a:	605a      	str	r2, [r3, #4]
 800812c:	e007      	b.n	800813e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800813c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6859      	ldr	r1, [r3, #4]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4b1d      	ldr	r3, [pc, #116]	@ (80081c0 <HAL_I2C_Init+0x134>)
 800814a:	430b      	orrs	r3, r1
 800814c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800815c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	69d9      	ldr	r1, [r3, #28]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a1a      	ldr	r2, [r3, #32]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	02008000 	.word	0x02008000

080081c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	607a      	str	r2, [r7, #4]
 80081ce:	461a      	mov	r2, r3
 80081d0:	460b      	mov	r3, r1
 80081d2:	817b      	strh	r3, [r7, #10]
 80081d4:	4613      	mov	r3, r2
 80081d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b20      	cmp	r3, #32
 80081e2:	f040 80fd 	bne.w	80083e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_I2C_Master_Transmit+0x30>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e0f6      	b.n	80083e2 <HAL_I2C_Master_Transmit+0x21e>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80081fc:	f7fb fa98 	bl	8003730 <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2319      	movs	r3, #25
 8008208:	2201      	movs	r2, #1
 800820a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f002 f89e 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e0e1      	b.n	80083e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2221      	movs	r2, #33	@ 0x21
 8008222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2210      	movs	r2, #16
 800822a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	893a      	ldrh	r2, [r7, #8]
 800823e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800824a:	b29b      	uxth	r3, r3
 800824c:	2bff      	cmp	r3, #255	@ 0xff
 800824e:	d906      	bls.n	800825e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	22ff      	movs	r2, #255	@ 0xff
 8008254:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008256:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	e007      	b.n	800826e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800826c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d024      	beq.n	80082c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827a:	781a      	ldrb	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	b29a      	uxth	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	3301      	adds	r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	8979      	ldrh	r1, [r7, #10]
 80082b2:	4b4e      	ldr	r3, [pc, #312]	@ (80083ec <HAL_I2C_Master_Transmit+0x228>)
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f002 fa0d 	bl	800a6d8 <I2C_TransferConfig>
 80082be:	e066      	b.n	800838e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	8979      	ldrh	r1, [r7, #10]
 80082c8:	4b48      	ldr	r3, [pc, #288]	@ (80083ec <HAL_I2C_Master_Transmit+0x228>)
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f002 fa02 	bl	800a6d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80082d4:	e05b      	b.n	800838e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	6a39      	ldr	r1, [r7, #32]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f002 f891 	bl	800a402 <I2C_WaitOnTXISFlagUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e07b      	b.n	80083e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ee:	781a      	ldrb	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008304:	b29b      	uxth	r3, r3
 8008306:	3b01      	subs	r3, #1
 8008308:	b29a      	uxth	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008312:	3b01      	subs	r3, #1
 8008314:	b29a      	uxth	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d034      	beq.n	800838e <HAL_I2C_Master_Transmit+0x1ca>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008328:	2b00      	cmp	r3, #0
 800832a:	d130      	bne.n	800838e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	2200      	movs	r2, #0
 8008334:	2180      	movs	r1, #128	@ 0x80
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f002 f80a 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e04d      	b.n	80083e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800834a:	b29b      	uxth	r3, r3
 800834c:	2bff      	cmp	r3, #255	@ 0xff
 800834e:	d90e      	bls.n	800836e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	22ff      	movs	r2, #255	@ 0xff
 8008354:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800835a:	b2da      	uxtb	r2, r3
 800835c:	8979      	ldrh	r1, [r7, #10]
 800835e:	2300      	movs	r3, #0
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f002 f9b6 	bl	800a6d8 <I2C_TransferConfig>
 800836c:	e00f      	b.n	800838e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008372:	b29a      	uxth	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800837c:	b2da      	uxtb	r2, r3
 800837e:	8979      	ldrh	r1, [r7, #10]
 8008380:	2300      	movs	r3, #0
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f002 f9a5 	bl	800a6d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008392:	b29b      	uxth	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d19e      	bne.n	80082d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	6a39      	ldr	r1, [r7, #32]
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f002 f877 	bl	800a490 <I2C_WaitOnSTOPFlagUntilTimeout>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e01a      	b.n	80083e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2220      	movs	r2, #32
 80083b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6859      	ldr	r1, [r3, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b0c      	ldr	r3, [pc, #48]	@ (80083f0 <HAL_I2C_Master_Transmit+0x22c>)
 80083c0:	400b      	ands	r3, r1
 80083c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	e000      	b.n	80083e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80083e0:	2302      	movs	r3, #2
  }
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	80002000 	.word	0x80002000
 80083f0:	fe00e800 	.word	0xfe00e800

080083f4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08a      	sub	sp, #40	@ 0x28
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	461a      	mov	r2, r3
 8008400:	460b      	mov	r3, r1
 8008402:	817b      	strh	r3, [r7, #10]
 8008404:	4613      	mov	r3, r2
 8008406:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b20      	cmp	r3, #32
 8008416:	f040 80ef 	bne.w	80085f8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008428:	d101      	bne.n	800842e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800842a:	2302      	movs	r3, #2
 800842c:	e0e5      	b.n	80085fa <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_I2C_Master_Transmit_DMA+0x48>
 8008438:	2302      	movs	r3, #2
 800843a:	e0de      	b.n	80085fa <HAL_I2C_Master_Transmit_DMA+0x206>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2221      	movs	r2, #33	@ 0x21
 8008448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2210      	movs	r2, #16
 8008450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	893a      	ldrh	r2, [r7, #8]
 8008464:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4a66      	ldr	r2, [pc, #408]	@ (8008604 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800846a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4a66      	ldr	r2, [pc, #408]	@ (8008608 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8008470:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008476:	b29b      	uxth	r3, r3
 8008478:	2bff      	cmp	r3, #255	@ 0xff
 800847a:	d906      	bls.n	800848a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	22ff      	movs	r2, #255	@ 0xff
 8008480:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008482:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	e007      	b.n	800849a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800848e:	b29a      	uxth	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008494:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008498:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01a      	beq.n	80084d8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	781a      	ldrb	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084bc:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d074      	beq.n	80085ca <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d022      	beq.n	800852e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ec:	4a47      	ldr	r2, [pc, #284]	@ (800860c <HAL_I2C_Master_Transmit_DMA+0x218>)
 80084ee:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f4:	4a46      	ldr	r2, [pc, #280]	@ (8008610 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80084f6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fc:	2200      	movs	r2, #0
 80084fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008504:	2200      	movs	r2, #0
 8008506:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008510:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008518:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800851e:	f7fd f8d9 	bl	80056d4 <HAL_DMA_Start_IT>
 8008522:	4603      	mov	r3, r0
 8008524:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d13a      	bne.n	80085a2 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800852c:	e013      	b.n	8008556 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2220      	movs	r2, #32
 8008532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008542:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e051      	b.n	80085fa <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800855a:	b2db      	uxtb	r3, r3
 800855c:	3301      	adds	r3, #1
 800855e:	b2da      	uxtb	r2, r3
 8008560:	8979      	ldrh	r1, [r7, #10]
 8008562:	4b2c      	ldr	r3, [pc, #176]	@ (8008614 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f002 f8b5 	bl	800a6d8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008588:	2110      	movs	r1, #16
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f002 f8d6 	bl	800a73c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	e028      	b.n	80085f4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b6:	f043 0210 	orr.w	r2, r3, #16
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e017      	b.n	80085fa <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4a12      	ldr	r2, [pc, #72]	@ (8008618 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80085ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	8979      	ldrh	r1, [r7, #10]
 80085d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008614 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f002 f87a 	bl	800a6d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80085ec:	2101      	movs	r1, #1
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f002 f8a4 	bl	800a73c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	e000      	b.n	80085fa <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80085f8:	2302      	movs	r3, #2
  }
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3720      	adds	r7, #32
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	ffff0000 	.word	0xffff0000
 8008608:	08008c53 	.word	0x08008c53
 800860c:	0800a00b 	.word	0x0800a00b
 8008610:	0800a0a1 	.word	0x0800a0a1
 8008614:	80002000 	.word	0x80002000
 8008618:	080087e3 	.word	0x080087e3

0800861c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	68f9      	ldr	r1, [r7, #12]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
  }
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	0a1b      	lsrs	r3, r3, #8
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d010      	beq.n	8008696 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	09db      	lsrs	r3, r3, #7
 8008678:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00a      	beq.n	8008696 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008684:	f043 0201 	orr.w	r2, r3, #1
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008694:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	0a9b      	lsrs	r3, r3, #10
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d010      	beq.n	80086c4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	09db      	lsrs	r3, r3, #7
 80086a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b2:	f043 0208 	orr.w	r2, r3, #8
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80086c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	0a5b      	lsrs	r3, r3, #9
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d010      	beq.n	80086f2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	09db      	lsrs	r3, r3, #7
 80086d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e0:	f043 0202 	orr.w	r2, r3, #2
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 030b 	and.w	r3, r3, #11
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 fb45 	bl	8009d94 <I2C_ITError>
  }
}
 800870a:	bf00      	nop
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800871a:	bf00      	nop
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
 800876e:	4613      	mov	r3, r2
 8008770:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b088      	sub	sp, #32
 80087e6:	af02      	add	r7, sp, #8
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <I2C_Master_ISR_IT+0x1e>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e120      	b.n	8008a42 <I2C_Master_ISR_IT+0x260>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	091b      	lsrs	r3, r3, #4
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d013      	beq.n	800883c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	091b      	lsrs	r3, r3, #4
 8008818:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00d      	beq.n	800883c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2210      	movs	r2, #16
 8008826:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882c:	f043 0204 	orr.w	r2, r3, #4
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f001 fbc4 	bl	8009fc2 <I2C_Flush_TXDR>
 800883a:	e0ed      	b.n	8008a18 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d023      	beq.n	8008890 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01d      	beq.n	8008890 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f023 0304 	bic.w	r3, r3, #4
 800885a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008878:	3b01      	subs	r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008884:	b29b      	uxth	r3, r3
 8008886:	3b01      	subs	r3, #1
 8008888:	b29a      	uxth	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800888e:	e0c3      	b.n	8008a18 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	099b      	lsrs	r3, r3, #6
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d12a      	bne.n	80088f2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	085b      	lsrs	r3, r3, #1
 80088a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d024      	beq.n	80088f2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01e      	beq.n	80088f2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80ac 	beq.w	8008a18 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c4:	781a      	ldrb	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	3b01      	subs	r3, #1
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80088f0:	e092      	b.n	8008a18 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	09db      	lsrs	r3, r3, #7
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d05d      	beq.n	80089ba <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	099b      	lsrs	r3, r3, #6
 8008902:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008906:	2b00      	cmp	r3, #0
 8008908:	d057      	beq.n	80089ba <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800890e:	b29b      	uxth	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d040      	beq.n	8008996 <I2C_Master_ISR_IT+0x1b4>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008918:	2b00      	cmp	r3, #0
 800891a:	d13c      	bne.n	8008996 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008928:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800892e:	b29b      	uxth	r3, r3
 8008930:	2bff      	cmp	r3, #255	@ 0xff
 8008932:	d90e      	bls.n	8008952 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	22ff      	movs	r2, #255	@ 0xff
 8008938:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800893e:	b2da      	uxtb	r2, r3
 8008940:	8a79      	ldrh	r1, [r7, #18]
 8008942:	2300      	movs	r3, #0
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f001 fec4 	bl	800a6d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008950:	e032      	b.n	80089b8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008956:	b29a      	uxth	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008960:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008964:	d00b      	beq.n	800897e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800896a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008970:	8a79      	ldrh	r1, [r7, #18]
 8008972:	2000      	movs	r0, #0
 8008974:	9000      	str	r0, [sp, #0]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f001 feae 	bl	800a6d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800897c:	e01c      	b.n	80089b8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008982:	b2da      	uxtb	r2, r3
 8008984:	8a79      	ldrh	r1, [r7, #18]
 8008986:	2300      	movs	r3, #0
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f001 fea2 	bl	800a6d8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008994:	e010      	b.n	80089b8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089a4:	d003      	beq.n	80089ae <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 fdde 	bl	8009568 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089ac:	e034      	b.n	8008a18 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80089ae:	2140      	movs	r1, #64	@ 0x40
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f001 f9ef 	bl	8009d94 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089b6:	e02f      	b.n	8008a18 <I2C_Master_ISR_IT+0x236>
 80089b8:	e02e      	b.n	8008a18 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	099b      	lsrs	r3, r3, #6
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d028      	beq.n	8008a18 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	099b      	lsrs	r3, r3, #6
 80089ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d022      	beq.n	8008a18 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d119      	bne.n	8008a10 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089ea:	d015      	beq.n	8008a18 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089f4:	d108      	bne.n	8008a08 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a04:	605a      	str	r2, [r3, #4]
 8008a06:	e007      	b.n	8008a18 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fdad 	bl	8009568 <I2C_ITMasterSeqCplt>
 8008a0e:	e003      	b.n	8008a18 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008a10:	2140      	movs	r1, #64	@ 0x40
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f001 f9be 	bl	8009d94 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d009      	beq.n	8008a38 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008a30:	6979      	ldr	r1, [r7, #20]
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fe34 	bl	80096a0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b086      	sub	sp, #24
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <I2C_Slave_ISR_IT+0x24>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e0ed      	b.n	8008c4a <I2C_Slave_ISR_IT+0x200>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	095b      	lsrs	r3, r3, #5
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008a8e:	6939      	ldr	r1, [r7, #16]
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 fecf 	bl	8009834 <I2C_ITSlaveCplt>
 8008a96:	e0d3      	b.n	8008c40 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	091b      	lsrs	r3, r3, #4
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d04d      	beq.n	8008b40 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	091b      	lsrs	r3, r3, #4
 8008aa8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d047      	beq.n	8008b40 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d128      	bne.n	8008b0c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b28      	cmp	r3, #40	@ 0x28
 8008ac4:	d108      	bne.n	8008ad8 <I2C_Slave_ISR_IT+0x8e>
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008acc:	d104      	bne.n	8008ad8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ace:	6939      	ldr	r1, [r7, #16]
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f001 f909 	bl	8009ce8 <I2C_ITListenCplt>
 8008ad6:	e032      	b.n	8008b3e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b29      	cmp	r3, #41	@ 0x29
 8008ae2:	d10e      	bne.n	8008b02 <I2C_Slave_ISR_IT+0xb8>
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008aea:	d00a      	beq.n	8008b02 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2210      	movs	r2, #16
 8008af2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f001 fa64 	bl	8009fc2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 fd71 	bl	80095e2 <I2C_ITSlaveSeqCplt>
 8008b00:	e01d      	b.n	8008b3e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2210      	movs	r2, #16
 8008b08:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008b0a:	e096      	b.n	8008c3a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2210      	movs	r2, #16
 8008b12:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b18:	f043 0204 	orr.w	r2, r3, #4
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <I2C_Slave_ISR_IT+0xe6>
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b2c:	f040 8085 	bne.w	8008c3a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b34:	4619      	mov	r1, r3
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f001 f92c 	bl	8009d94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008b3c:	e07d      	b.n	8008c3a <I2C_Slave_ISR_IT+0x1f0>
 8008b3e:	e07c      	b.n	8008c3a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	089b      	lsrs	r3, r3, #2
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d030      	beq.n	8008bae <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	089b      	lsrs	r3, r3, #2
 8008b50:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d02a      	beq.n	8008bae <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d018      	beq.n	8008b94 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6c:	b2d2      	uxtb	r2, r2
 8008b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d14f      	bne.n	8008c3e <I2C_Slave_ISR_IT+0x1f4>
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ba4:	d04b      	beq.n	8008c3e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 fd1b 	bl	80095e2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008bac:	e047      	b.n	8008c3e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	08db      	lsrs	r3, r3, #3
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	08db      	lsrs	r3, r3, #3
 8008bbe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008bc6:	6939      	ldr	r1, [r7, #16]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 fc49 	bl	8009460 <I2C_ITAddrCplt>
 8008bce:	e037      	b.n	8008c40 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	085b      	lsrs	r3, r3, #1
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d031      	beq.n	8008c40 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d02b      	beq.n	8008c40 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d018      	beq.n	8008c24 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf6:	781a      	ldrb	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008c22:	e00d      	b.n	8008c40 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c2a:	d002      	beq.n	8008c32 <I2C_Slave_ISR_IT+0x1e8>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fcd5 	bl	80095e2 <I2C_ITSlaveSeqCplt>
 8008c38:	e002      	b.n	8008c40 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008c3a:	bf00      	nop
 8008c3c:	e000      	b.n	8008c40 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8008c3e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b088      	sub	sp, #32
 8008c56:	af02      	add	r7, sp, #8
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d101      	bne.n	8008c6c <I2C_Master_ISR_DMA+0x1a>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	e0e1      	b.n	8008e30 <I2C_Master_ISR_DMA+0x1de>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	091b      	lsrs	r3, r3, #4
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d017      	beq.n	8008cb0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	091b      	lsrs	r3, r3, #4
 8008c84:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d011      	beq.n	8008cb0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2210      	movs	r2, #16
 8008c92:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c98:	f043 0204 	orr.w	r2, r3, #4
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008ca0:	2120      	movs	r1, #32
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f001 fd4a 	bl	800a73c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f001 f98a 	bl	8009fc2 <I2C_Flush_TXDR>
 8008cae:	e0ba      	b.n	8008e26 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	09db      	lsrs	r3, r3, #7
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d072      	beq.n	8008da2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	099b      	lsrs	r3, r3, #6
 8008cc0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d06c      	beq.n	8008da2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cd6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d04e      	beq.n	8008d80 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2bff      	cmp	r3, #255	@ 0xff
 8008cf8:	d906      	bls.n	8008d08 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	22ff      	movs	r2, #255	@ 0xff
 8008cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008d00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	e010      	b.n	8008d2a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008d1a:	d003      	beq.n	8008d24 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d20:	617b      	str	r3, [r7, #20]
 8008d22:	e002      	b.n	8008d2a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008d24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d28:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	8a79      	ldrh	r1, [r7, #18]
 8008d32:	2300      	movs	r3, #0
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f001 fccd 	bl	800a6d8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b22      	cmp	r3, #34	@ 0x22
 8008d5a:	d108      	bne.n	8008d6e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d6a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008d6c:	e05b      	b.n	8008e26 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008d7e:	e052      	b.n	8008e26 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d8e:	d003      	beq.n	8008d98 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fbe9 	bl	8009568 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008d96:	e046      	b.n	8008e26 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008d98:	2140      	movs	r1, #64	@ 0x40
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 fffa 	bl	8009d94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008da0:	e041      	b.n	8008e26 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	099b      	lsrs	r3, r3, #6
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d029      	beq.n	8008e02 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	099b      	lsrs	r3, r3, #6
 8008db2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d023      	beq.n	8008e02 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d119      	bne.n	8008df8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dd2:	d027      	beq.n	8008e24 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ddc:	d108      	bne.n	8008df0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dec:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008dee:	e019      	b.n	8008e24 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 fbb9 	bl	8009568 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008df6:	e015      	b.n	8008e24 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008df8:	2140      	movs	r1, #64	@ 0x40
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 ffca 	bl	8009d94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008e00:	e010      	b.n	8008e24 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	095b      	lsrs	r3, r3, #5
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d005      	beq.n	8008e26 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 fc3f 	bl	80096a0 <I2C_ITMasterCplt>
 8008e22:	e000      	b.n	8008e26 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008e24:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af02      	add	r7, sp, #8
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008e44:	4b92      	ldr	r3, [pc, #584]	@ (8009090 <I2C_Mem_ISR_DMA+0x258>)
 8008e46:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d101      	bne.n	8008e56 <I2C_Mem_ISR_DMA+0x1e>
 8008e52:	2302      	movs	r3, #2
 8008e54:	e118      	b.n	8009088 <I2C_Mem_ISR_DMA+0x250>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	091b      	lsrs	r3, r3, #4
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d017      	beq.n	8008e9a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	091b      	lsrs	r3, r3, #4
 8008e6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d011      	beq.n	8008e9a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2210      	movs	r2, #16
 8008e7c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e82:	f043 0204 	orr.w	r2, r3, #4
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008e8a:	2120      	movs	r1, #32
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f001 fc55 	bl	800a73c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f001 f895 	bl	8009fc2 <I2C_Flush_TXDR>
 8008e98:	e0f1      	b.n	800907e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	085b      	lsrs	r3, r3, #1
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00f      	beq.n	8008ec6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008eba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec2:	651a      	str	r2, [r3, #80]	@ 0x50
 8008ec4:	e0db      	b.n	800907e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	09db      	lsrs	r3, r3, #7
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d060      	beq.n	8008f94 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	099b      	lsrs	r3, r3, #6
 8008ed6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d05a      	beq.n	8008f94 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ede:	2101      	movs	r1, #1
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f001 fcaf 	bl	800a844 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008ee6:	2110      	movs	r1, #16
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f001 fc27 	bl	800a73c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d048      	beq.n	8008f8a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	2bff      	cmp	r3, #255	@ 0xff
 8008f00:	d910      	bls.n	8008f24 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	22ff      	movs	r2, #255	@ 0xff
 8008f06:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f0c:	b299      	uxth	r1, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	2300      	movs	r3, #0
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f001 fbdb 	bl	800a6d8 <I2C_TransferConfig>
 8008f22:	e011      	b.n	8008f48 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f32:	b299      	uxth	r1, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f001 fbc8 	bl	800a6d8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b22      	cmp	r3, #34	@ 0x22
 8008f64:	d108      	bne.n	8008f78 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008f76:	e082      	b.n	800907e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f86:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008f88:	e079      	b.n	800907e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008f8a:	2140      	movs	r1, #64	@ 0x40
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 ff01 	bl	8009d94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008f92:	e074      	b.n	800907e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	099b      	lsrs	r3, r3, #6
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d05e      	beq.n	800905e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	099b      	lsrs	r3, r3, #6
 8008fa4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d058      	beq.n	800905e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008fac:	2101      	movs	r1, #1
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f001 fc48 	bl	800a844 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008fb4:	2110      	movs	r1, #16
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f001 fbc0 	bl	800a73c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b22      	cmp	r3, #34	@ 0x22
 8008fc6:	d101      	bne.n	8008fcc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8008fc8:	4b32      	ldr	r3, [pc, #200]	@ (8009094 <I2C_Mem_ISR_DMA+0x25c>)
 8008fca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2bff      	cmp	r3, #255	@ 0xff
 8008fd4:	d910      	bls.n	8008ff8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	22ff      	movs	r2, #255	@ 0xff
 8008fda:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe0:	b299      	uxth	r1, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f001 fb71 	bl	800a6d8 <I2C_TransferConfig>
 8008ff6:	e011      	b.n	800901c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009006:	b299      	uxth	r1, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800900c:	b2da      	uxtb	r2, r3
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f001 fb5e 	bl	800a6d8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009020:	b29a      	uxth	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b22      	cmp	r3, #34	@ 0x22
 8009038:	d108      	bne.n	800904c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009048:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800904a:	e018      	b.n	800907e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800905a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800905c:	e00f      	b.n	800907e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	095b      	lsrs	r3, r3, #5
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d009      	beq.n	800907e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	095b      	lsrs	r3, r3, #5
 800906e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009072:	2b00      	cmp	r3, #0
 8009074:	d003      	beq.n	800907e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 fb11 	bl	80096a0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	80002000 	.word	0x80002000
 8009094:	80002400 	.word	0x80002400

08009098 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d101      	bne.n	80090bc <I2C_Slave_ISR_DMA+0x24>
 80090b8:	2302      	movs	r3, #2
 80090ba:	e1cc      	b.n	8009456 <I2C_Slave_ISR_DMA+0x3be>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	095b      	lsrs	r3, r3, #5
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00a      	beq.n	80090e6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	095b      	lsrs	r3, r3, #5
 80090d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d004      	beq.n	80090e6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 fba8 	bl	8009834 <I2C_ITSlaveCplt>
 80090e4:	e1b2      	b.n	800944c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	091b      	lsrs	r3, r3, #4
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 819c 	beq.w	800942c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	091b      	lsrs	r3, r3, #4
 80090f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8195 	beq.w	800942c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	0b9b      	lsrs	r3, r3, #14
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	0bdb      	lsrs	r3, r3, #15
 8009112:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8181 	beq.w	800941e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d07c      	beq.n	800921e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	0bdb      	lsrs	r3, r3, #15
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d076      	beq.n	800921e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a75      	ldr	r2, [pc, #468]	@ (800930c <I2C_Slave_ISR_DMA+0x274>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d059      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a73      	ldr	r2, [pc, #460]	@ (8009310 <I2C_Slave_ISR_DMA+0x278>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d053      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a71      	ldr	r2, [pc, #452]	@ (8009314 <I2C_Slave_ISR_DMA+0x27c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d04d      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a6f      	ldr	r2, [pc, #444]	@ (8009318 <I2C_Slave_ISR_DMA+0x280>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d047      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a6d      	ldr	r2, [pc, #436]	@ (800931c <I2C_Slave_ISR_DMA+0x284>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d041      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a6b      	ldr	r2, [pc, #428]	@ (8009320 <I2C_Slave_ISR_DMA+0x288>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d03b      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a69      	ldr	r2, [pc, #420]	@ (8009324 <I2C_Slave_ISR_DMA+0x28c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d035      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a67      	ldr	r2, [pc, #412]	@ (8009328 <I2C_Slave_ISR_DMA+0x290>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d02f      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a65      	ldr	r2, [pc, #404]	@ (800932c <I2C_Slave_ISR_DMA+0x294>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d029      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a63      	ldr	r2, [pc, #396]	@ (8009330 <I2C_Slave_ISR_DMA+0x298>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d023      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a61      	ldr	r2, [pc, #388]	@ (8009334 <I2C_Slave_ISR_DMA+0x29c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d01d      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a5f      	ldr	r2, [pc, #380]	@ (8009338 <I2C_Slave_ISR_DMA+0x2a0>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d017      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a5d      	ldr	r2, [pc, #372]	@ (800933c <I2C_Slave_ISR_DMA+0x2a4>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d011      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a5b      	ldr	r2, [pc, #364]	@ (8009340 <I2C_Slave_ISR_DMA+0x2a8>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d00b      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a59      	ldr	r2, [pc, #356]	@ (8009344 <I2C_Slave_ISR_DMA+0x2ac>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d005      	beq.n	80091f0 <I2C_Slave_ISR_DMA+0x158>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a57      	ldr	r2, [pc, #348]	@ (8009348 <I2C_Slave_ISR_DMA+0x2b0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d109      	bne.n	8009204 <I2C_Slave_ISR_DMA+0x16c>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bf0c      	ite	eq
 80091fc:	2301      	moveq	r3, #1
 80091fe:	2300      	movne	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	e008      	b.n	8009216 <I2C_Slave_ISR_DMA+0x17e>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	bf0c      	ite	eq
 8009210:	2301      	moveq	r3, #1
 8009212:	2300      	movne	r3, #0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800921a:	2301      	movs	r3, #1
 800921c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 809f 	beq.w	8009366 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	0b9b      	lsrs	r3, r3, #14
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 8098 	beq.w	8009366 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a33      	ldr	r2, [pc, #204]	@ (800930c <I2C_Slave_ISR_DMA+0x274>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d059      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a31      	ldr	r2, [pc, #196]	@ (8009310 <I2C_Slave_ISR_DMA+0x278>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d053      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a2f      	ldr	r2, [pc, #188]	@ (8009314 <I2C_Slave_ISR_DMA+0x27c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d04d      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a2d      	ldr	r2, [pc, #180]	@ (8009318 <I2C_Slave_ISR_DMA+0x280>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d047      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a2b      	ldr	r2, [pc, #172]	@ (800931c <I2C_Slave_ISR_DMA+0x284>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d041      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a29      	ldr	r2, [pc, #164]	@ (8009320 <I2C_Slave_ISR_DMA+0x288>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d03b      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a27      	ldr	r2, [pc, #156]	@ (8009324 <I2C_Slave_ISR_DMA+0x28c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d035      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a25      	ldr	r2, [pc, #148]	@ (8009328 <I2C_Slave_ISR_DMA+0x290>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d02f      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a23      	ldr	r2, [pc, #140]	@ (800932c <I2C_Slave_ISR_DMA+0x294>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d029      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a21      	ldr	r2, [pc, #132]	@ (8009330 <I2C_Slave_ISR_DMA+0x298>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d023      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009334 <I2C_Slave_ISR_DMA+0x29c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d01d      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009338 <I2C_Slave_ISR_DMA+0x2a0>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d017      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1b      	ldr	r2, [pc, #108]	@ (800933c <I2C_Slave_ISR_DMA+0x2a4>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d011      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a19      	ldr	r2, [pc, #100]	@ (8009340 <I2C_Slave_ISR_DMA+0x2a8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00b      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a17      	ldr	r2, [pc, #92]	@ (8009344 <I2C_Slave_ISR_DMA+0x2ac>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d005      	beq.n	80092f6 <I2C_Slave_ISR_DMA+0x25e>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a15      	ldr	r2, [pc, #84]	@ (8009348 <I2C_Slave_ISR_DMA+0x2b0>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d12a      	bne.n	800934c <I2C_Slave_ISR_DMA+0x2b4>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bf0c      	ite	eq
 8009302:	2301      	moveq	r3, #1
 8009304:	2300      	movne	r3, #0
 8009306:	b2db      	uxtb	r3, r3
 8009308:	e029      	b.n	800935e <I2C_Slave_ISR_DMA+0x2c6>
 800930a:	bf00      	nop
 800930c:	40020010 	.word	0x40020010
 8009310:	40020028 	.word	0x40020028
 8009314:	40020040 	.word	0x40020040
 8009318:	40020058 	.word	0x40020058
 800931c:	40020070 	.word	0x40020070
 8009320:	40020088 	.word	0x40020088
 8009324:	400200a0 	.word	0x400200a0
 8009328:	400200b8 	.word	0x400200b8
 800932c:	40020410 	.word	0x40020410
 8009330:	40020428 	.word	0x40020428
 8009334:	40020440 	.word	0x40020440
 8009338:	40020458 	.word	0x40020458
 800933c:	40020470 	.word	0x40020470
 8009340:	40020488 	.word	0x40020488
 8009344:	400204a0 	.word	0x400204a0
 8009348:	400204b8 	.word	0x400204b8
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bf0c      	ite	eq
 8009358:	2301      	moveq	r3, #1
 800935a:	2300      	movne	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8009362:	2301      	movs	r3, #1
 8009364:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d128      	bne.n	80093be <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b28      	cmp	r3, #40	@ 0x28
 8009376:	d108      	bne.n	800938a <I2C_Slave_ISR_DMA+0x2f2>
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800937e:	d104      	bne.n	800938a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 fcb0 	bl	8009ce8 <I2C_ITListenCplt>
 8009388:	e048      	b.n	800941c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b29      	cmp	r3, #41	@ 0x29
 8009394:	d10e      	bne.n	80093b4 <I2C_Slave_ISR_DMA+0x31c>
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800939c:	d00a      	beq.n	80093b4 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2210      	movs	r2, #16
 80093a4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 fe0b 	bl	8009fc2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f918 	bl	80095e2 <I2C_ITSlaveSeqCplt>
 80093b2:	e033      	b.n	800941c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2210      	movs	r2, #16
 80093ba:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80093bc:	e034      	b.n	8009428 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2210      	movs	r2, #16
 80093c4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ca:	f043 0204 	orr.w	r2, r3, #4
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093d8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <I2C_Slave_ISR_DMA+0x350>
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093e6:	d11f      	bne.n	8009428 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	2b21      	cmp	r3, #33	@ 0x21
 80093ec:	d002      	beq.n	80093f4 <I2C_Slave_ISR_DMA+0x35c>
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	2b29      	cmp	r3, #41	@ 0x29
 80093f2:	d103      	bne.n	80093fc <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2221      	movs	r2, #33	@ 0x21
 80093f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80093fa:	e008      	b.n	800940e <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	2b22      	cmp	r3, #34	@ 0x22
 8009400:	d002      	beq.n	8009408 <I2C_Slave_ISR_DMA+0x370>
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	2b2a      	cmp	r3, #42	@ 0x2a
 8009406:	d102      	bne.n	800940e <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2222      	movs	r2, #34	@ 0x22
 800940c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009412:	4619      	mov	r1, r3
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f000 fcbd 	bl	8009d94 <I2C_ITError>
      if (treatdmanack == 1U)
 800941a:	e005      	b.n	8009428 <I2C_Slave_ISR_DMA+0x390>
 800941c:	e004      	b.n	8009428 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2210      	movs	r2, #16
 8009424:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009426:	e011      	b.n	800944c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8009428:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800942a:	e00f      	b.n	800944c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	08db      	lsrs	r3, r3, #3
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	08db      	lsrs	r3, r3, #3
 800943c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 f80a 	bl	8009460 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3720      	adds	r7, #32
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop

08009460 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009476:	2b28      	cmp	r3, #40	@ 0x28
 8009478:	d16a      	bne.n	8009550 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	0c1b      	lsrs	r3, r3, #16
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	0c1b      	lsrs	r3, r3, #16
 8009492:	b29b      	uxth	r3, r3
 8009494:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8009498:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094a6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80094b4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d138      	bne.n	8009530 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80094be:	897b      	ldrh	r3, [r7, #10]
 80094c0:	09db      	lsrs	r3, r3, #7
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	89bb      	ldrh	r3, [r7, #12]
 80094c6:	4053      	eors	r3, r2
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	f003 0306 	and.w	r3, r3, #6
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d11c      	bne.n	800950c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80094d2:	897b      	ldrh	r3, [r7, #10]
 80094d4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d13b      	bne.n	8009560 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2208      	movs	r2, #8
 80094f4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80094fe:	89ba      	ldrh	r2, [r7, #12]
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff f92c 	bl	8008762 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800950a:	e029      	b.n	8009560 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800950c:	893b      	ldrh	r3, [r7, #8]
 800950e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009510:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 f995 	bl	800a844 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009522:	89ba      	ldrh	r2, [r7, #12]
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff f91a 	bl	8008762 <HAL_I2C_AddrCallback>
}
 800952e:	e017      	b.n	8009560 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009530:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 f985 	bl	800a844 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009542:	89ba      	ldrh	r2, [r7, #12]
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff f90a 	bl	8008762 <HAL_I2C_AddrCallback>
}
 800954e:	e007      	b.n	8009560 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2208      	movs	r2, #8
 8009556:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009560:	bf00      	nop
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b21      	cmp	r3, #33	@ 0x21
 8009582:	d115      	bne.n	80095b0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2211      	movs	r2, #17
 8009590:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009598:	2101      	movs	r1, #1
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 f952 	bl	800a844 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff f8b2 	bl	8008712 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80095ae:	e014      	b.n	80095da <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2212      	movs	r2, #18
 80095bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80095c4:	2102      	movs	r1, #2
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 f93c 	bl	800a844 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff f8a6 	bl	8008726 <HAL_I2C_MasterRxCpltCallback>
}
 80095da:	bf00      	nop
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	0b9b      	lsrs	r3, r3, #14
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d008      	beq.n	8009618 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e00d      	b.n	8009634 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	0bdb      	lsrs	r3, r3, #15
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009632:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b29      	cmp	r3, #41	@ 0x29
 800963e:	d112      	bne.n	8009666 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2228      	movs	r2, #40	@ 0x28
 8009644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2221      	movs	r2, #33	@ 0x21
 800964c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800964e:	2101      	movs	r1, #1
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 f8f7 	bl	800a844 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff f86b 	bl	800873a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009664:	e017      	b.n	8009696 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009670:	d111      	bne.n	8009696 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2228      	movs	r2, #40	@ 0x28
 8009676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2222      	movs	r2, #34	@ 0x22
 800967e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009680:	2102      	movs	r1, #2
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 f8de 	bl	800a844 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff f85c 	bl	800874e <HAL_I2C_SlaveRxCpltCallback>
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2220      	movs	r2, #32
 80096b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b21      	cmp	r3, #33	@ 0x21
 80096c0:	d107      	bne.n	80096d2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80096c2:	2101      	movs	r1, #1
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 f8bd 	bl	800a844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2211      	movs	r2, #17
 80096ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80096d0:	e00c      	b.n	80096ec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b22      	cmp	r3, #34	@ 0x22
 80096dc:	d106      	bne.n	80096ec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80096de:	2102      	movs	r1, #2
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f001 f8af 	bl	800a844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2212      	movs	r2, #18
 80096ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6859      	ldr	r1, [r3, #4]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4b4d      	ldr	r3, [pc, #308]	@ (800982c <I2C_ITMasterCplt+0x18c>)
 80096f8:	400b      	ands	r3, r1
 80096fa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a4a      	ldr	r2, [pc, #296]	@ (8009830 <I2C_ITMasterCplt+0x190>)
 8009706:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	091b      	lsrs	r3, r3, #4
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d009      	beq.n	8009728 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2210      	movs	r2, #16
 800971a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009720:	f043 0204 	orr.w	r2, r3, #4
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b60      	cmp	r3, #96	@ 0x60
 8009732:	d10b      	bne.n	800974c <I2C_ITMasterCplt+0xac>
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	089b      	lsrs	r3, r3, #2
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009746:	b2db      	uxtb	r3, r3
 8009748:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800974a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fc38 	bl	8009fc2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009756:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b60      	cmp	r3, #96	@ 0x60
 8009762:	d002      	beq.n	800976a <I2C_ITMasterCplt+0xca>
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d006      	beq.n	8009778 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fb0f 	bl	8009d94 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009776:	e054      	b.n	8009822 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b21      	cmp	r3, #33	@ 0x21
 8009782:	d124      	bne.n	80097ce <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2220      	movs	r2, #32
 8009788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b40      	cmp	r3, #64	@ 0x40
 800979c:	d10b      	bne.n	80097b6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fe ffef 	bl	8008792 <HAL_I2C_MemTxCpltCallback>
}
 80097b4:	e035      	b.n	8009822 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7fe ffa3 	bl	8008712 <HAL_I2C_MasterTxCpltCallback>
}
 80097cc:	e029      	b.n	8009822 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b22      	cmp	r3, #34	@ 0x22
 80097d8:	d123      	bne.n	8009822 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2220      	movs	r2, #32
 80097de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2b40      	cmp	r3, #64	@ 0x40
 80097f2:	d10b      	bne.n	800980c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7fe ffce 	bl	80087a6 <HAL_I2C_MemRxCpltCallback>
}
 800980a:	e00a      	b.n	8009822 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fe ff82 	bl	8008726 <HAL_I2C_MasterRxCpltCallback>
}
 8009822:	bf00      	nop
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	fe00e800 	.word	0xfe00e800
 8009830:	ffff0000 	.word	0xffff0000

08009834 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009856:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2220      	movs	r2, #32
 800985e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	2b21      	cmp	r3, #33	@ 0x21
 8009864:	d002      	beq.n	800986c <I2C_ITSlaveCplt+0x38>
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	2b29      	cmp	r3, #41	@ 0x29
 800986a:	d108      	bne.n	800987e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800986c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 ffe7 	bl	800a844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2221      	movs	r2, #33	@ 0x21
 800987a:	631a      	str	r2, [r3, #48]	@ 0x30
 800987c:	e019      	b.n	80098b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800987e:	7afb      	ldrb	r3, [r7, #11]
 8009880:	2b22      	cmp	r3, #34	@ 0x22
 8009882:	d002      	beq.n	800988a <I2C_ITSlaveCplt+0x56>
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	2b2a      	cmp	r3, #42	@ 0x2a
 8009888:	d108      	bne.n	800989c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800988a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 ffd8 	bl	800a844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2222      	movs	r2, #34	@ 0x22
 8009898:	631a      	str	r2, [r3, #48]	@ 0x30
 800989a:	e00a      	b.n	80098b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800989c:	7afb      	ldrb	r3, [r7, #11]
 800989e:	2b28      	cmp	r3, #40	@ 0x28
 80098a0:	d107      	bne.n	80098b2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80098a2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 ffcc 	bl	800a844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098c0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6859      	ldr	r1, [r3, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4b80      	ldr	r3, [pc, #512]	@ (8009ad0 <I2C_ITSlaveCplt+0x29c>)
 80098ce:	400b      	ands	r3, r1
 80098d0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fb75 	bl	8009fc2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	0b9b      	lsrs	r3, r3, #14
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d07a      	beq.n	80099da <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80098f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8112 	beq.w	8009b22 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a73      	ldr	r2, [pc, #460]	@ (8009ad4 <I2C_ITSlaveCplt+0x2a0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d059      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a71      	ldr	r2, [pc, #452]	@ (8009ad8 <I2C_ITSlaveCplt+0x2a4>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d053      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a6f      	ldr	r2, [pc, #444]	@ (8009adc <I2C_ITSlaveCplt+0x2a8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d04d      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a6d      	ldr	r2, [pc, #436]	@ (8009ae0 <I2C_ITSlaveCplt+0x2ac>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d047      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a6b      	ldr	r2, [pc, #428]	@ (8009ae4 <I2C_ITSlaveCplt+0x2b0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d041      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a69      	ldr	r2, [pc, #420]	@ (8009ae8 <I2C_ITSlaveCplt+0x2b4>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d03b      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a67      	ldr	r2, [pc, #412]	@ (8009aec <I2C_ITSlaveCplt+0x2b8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d035      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a65      	ldr	r2, [pc, #404]	@ (8009af0 <I2C_ITSlaveCplt+0x2bc>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d02f      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a63      	ldr	r2, [pc, #396]	@ (8009af4 <I2C_ITSlaveCplt+0x2c0>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d029      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a61      	ldr	r2, [pc, #388]	@ (8009af8 <I2C_ITSlaveCplt+0x2c4>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d023      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a5f      	ldr	r2, [pc, #380]	@ (8009afc <I2C_ITSlaveCplt+0x2c8>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d01d      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a5d      	ldr	r2, [pc, #372]	@ (8009b00 <I2C_ITSlaveCplt+0x2cc>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d017      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a5b      	ldr	r2, [pc, #364]	@ (8009b04 <I2C_ITSlaveCplt+0x2d0>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d011      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a59      	ldr	r2, [pc, #356]	@ (8009b08 <I2C_ITSlaveCplt+0x2d4>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00b      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a57      	ldr	r2, [pc, #348]	@ (8009b0c <I2C_ITSlaveCplt+0x2d8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d005      	beq.n	80099be <I2C_ITSlaveCplt+0x18a>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a55      	ldr	r2, [pc, #340]	@ (8009b10 <I2C_ITSlaveCplt+0x2dc>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d105      	bne.n	80099ca <I2C_ITSlaveCplt+0x196>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	e004      	b.n	80099d4 <I2C_ITSlaveCplt+0x1a0>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80099d8:	e0a3      	b.n	8009b22 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	0bdb      	lsrs	r3, r3, #15
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 809d 	beq.w	8009b22 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80099f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8090 	beq.w	8009b22 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a32      	ldr	r2, [pc, #200]	@ (8009ad4 <I2C_ITSlaveCplt+0x2a0>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d059      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a30      	ldr	r2, [pc, #192]	@ (8009ad8 <I2C_ITSlaveCplt+0x2a4>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d053      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a2e      	ldr	r2, [pc, #184]	@ (8009adc <I2C_ITSlaveCplt+0x2a8>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d04d      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8009ae0 <I2C_ITSlaveCplt+0x2ac>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d047      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a2a      	ldr	r2, [pc, #168]	@ (8009ae4 <I2C_ITSlaveCplt+0x2b0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d041      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a28      	ldr	r2, [pc, #160]	@ (8009ae8 <I2C_ITSlaveCplt+0x2b4>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d03b      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a26      	ldr	r2, [pc, #152]	@ (8009aec <I2C_ITSlaveCplt+0x2b8>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d035      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a24      	ldr	r2, [pc, #144]	@ (8009af0 <I2C_ITSlaveCplt+0x2bc>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d02f      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a22      	ldr	r2, [pc, #136]	@ (8009af4 <I2C_ITSlaveCplt+0x2c0>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d029      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a20      	ldr	r2, [pc, #128]	@ (8009af8 <I2C_ITSlaveCplt+0x2c4>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d023      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1e      	ldr	r2, [pc, #120]	@ (8009afc <I2C_ITSlaveCplt+0x2c8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d01d      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8009b00 <I2C_ITSlaveCplt+0x2cc>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d017      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a1a      	ldr	r2, [pc, #104]	@ (8009b04 <I2C_ITSlaveCplt+0x2d0>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d011      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a18      	ldr	r2, [pc, #96]	@ (8009b08 <I2C_ITSlaveCplt+0x2d4>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00b      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <I2C_ITSlaveCplt+0x2d8>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d005      	beq.n	8009ac2 <I2C_ITSlaveCplt+0x28e>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a14      	ldr	r2, [pc, #80]	@ (8009b10 <I2C_ITSlaveCplt+0x2dc>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d128      	bne.n	8009b14 <I2C_ITSlaveCplt+0x2e0>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	e027      	b.n	8009b1e <I2C_ITSlaveCplt+0x2ea>
 8009ace:	bf00      	nop
 8009ad0:	fe00e800 	.word	0xfe00e800
 8009ad4:	40020010 	.word	0x40020010
 8009ad8:	40020028 	.word	0x40020028
 8009adc:	40020040 	.word	0x40020040
 8009ae0:	40020058 	.word	0x40020058
 8009ae4:	40020070 	.word	0x40020070
 8009ae8:	40020088 	.word	0x40020088
 8009aec:	400200a0 	.word	0x400200a0
 8009af0:	400200b8 	.word	0x400200b8
 8009af4:	40020410 	.word	0x40020410
 8009af8:	40020428 	.word	0x40020428
 8009afc:	40020440 	.word	0x40020440
 8009b00:	40020458 	.word	0x40020458
 8009b04:	40020470 	.word	0x40020470
 8009b08:	40020488 	.word	0x40020488
 8009b0c:	400204a0 	.word	0x400204a0
 8009b10:	400204b8 	.word	0x400204b8
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	089b      	lsrs	r3, r3, #2
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d020      	beq.n	8009b70 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f023 0304 	bic.w	r3, r3, #4
 8009b34:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00c      	beq.n	8009b70 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d005      	beq.n	8009b86 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b7e:	f043 0204 	orr.w	r2, r3, #4
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	091b      	lsrs	r3, r3, #4
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d04a      	beq.n	8009c28 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	091b      	lsrs	r3, r3, #4
 8009b96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d044      	beq.n	8009c28 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d128      	bne.n	8009bfa <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b28      	cmp	r3, #40	@ 0x28
 8009bb2:	d108      	bne.n	8009bc6 <I2C_ITSlaveCplt+0x392>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bba:	d104      	bne.n	8009bc6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009bbc:	6979      	ldr	r1, [r7, #20]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f892 	bl	8009ce8 <I2C_ITListenCplt>
 8009bc4:	e030      	b.n	8009c28 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b29      	cmp	r3, #41	@ 0x29
 8009bd0:	d10e      	bne.n	8009bf0 <I2C_ITSlaveCplt+0x3bc>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009bd8:	d00a      	beq.n	8009bf0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2210      	movs	r2, #16
 8009be0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f9ed 	bl	8009fc2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff fcfa 	bl	80095e2 <I2C_ITSlaveSeqCplt>
 8009bee:	e01b      	b.n	8009c28 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2210      	movs	r2, #16
 8009bf6:	61da      	str	r2, [r3, #28]
 8009bf8:	e016      	b.n	8009c28 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2210      	movs	r2, #16
 8009c00:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c06:	f043 0204 	orr.w	r2, r3, #4
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <I2C_ITSlaveCplt+0x3e8>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c1a:	d105      	bne.n	8009c28 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f8b6 	bl	8009d94 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d010      	beq.n	8009c60 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f8a5 	bl	8009d94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b28      	cmp	r3, #40	@ 0x28
 8009c54:	d141      	bne.n	8009cda <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009c56:	6979      	ldr	r1, [r7, #20]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f845 	bl	8009ce8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009c5e:	e03c      	b.n	8009cda <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c68:	d014      	beq.n	8009c94 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff fcb9 	bl	80095e2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a1c      	ldr	r2, [pc, #112]	@ (8009ce4 <I2C_ITSlaveCplt+0x4b0>)
 8009c74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7fe fd76 	bl	800877e <HAL_I2C_ListenCpltCallback>
}
 8009c92:	e022      	b.n	8009cda <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b22      	cmp	r3, #34	@ 0x22
 8009c9e:	d10e      	bne.n	8009cbe <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7fe fd49 	bl	800874e <HAL_I2C_SlaveRxCpltCallback>
}
 8009cbc:	e00d      	b.n	8009cda <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2220      	movs	r2, #32
 8009cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7fe fd30 	bl	800873a <HAL_I2C_SlaveTxCpltCallback>
}
 8009cda:	bf00      	nop
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	ffff0000 	.word	0xffff0000

08009ce8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a26      	ldr	r2, [pc, #152]	@ (8009d90 <I2C_ITListenCplt+0xa8>)
 8009cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	089b      	lsrs	r3, r3, #2
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d022      	beq.n	8009d66 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2a:	b2d2      	uxtb	r2, r2
 8009d2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d012      	beq.n	8009d66 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d44:	3b01      	subs	r3, #1
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3b01      	subs	r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d5e:	f043 0204 	orr.w	r2, r3, #4
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009d66:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fd6a 	bl	800a844 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2210      	movs	r2, #16
 8009d76:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7fe fcfc 	bl	800877e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009d86:	bf00      	nop
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	ffff0000 	.word	0xffff0000

08009d94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009da4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a6d      	ldr	r2, [pc, #436]	@ (8009f68 <I2C_ITError+0x1d4>)
 8009db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	2b28      	cmp	r3, #40	@ 0x28
 8009dca:	d005      	beq.n	8009dd8 <I2C_ITError+0x44>
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	2b29      	cmp	r3, #41	@ 0x29
 8009dd0:	d002      	beq.n	8009dd8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dd6:	d10b      	bne.n	8009df0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009dd8:	2103      	movs	r1, #3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fd32 	bl	800a844 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2228      	movs	r2, #40	@ 0x28
 8009de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a60      	ldr	r2, [pc, #384]	@ (8009f6c <I2C_ITError+0x1d8>)
 8009dec:	635a      	str	r2, [r3, #52]	@ 0x34
 8009dee:	e030      	b.n	8009e52 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009df0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fd25 	bl	800a844 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f8e1 	bl	8009fc2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b60      	cmp	r3, #96	@ 0x60
 8009e0a:	d01f      	beq.n	8009e4c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	d114      	bne.n	8009e4c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	f003 0310 	and.w	r3, r3, #16
 8009e2c:	2b10      	cmp	r3, #16
 8009e2e:	d109      	bne.n	8009e44 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2210      	movs	r2, #16
 8009e36:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3c:	f043 0204 	orr.w	r2, r3, #4
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2220      	movs	r2, #32
 8009e4a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e56:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d039      	beq.n	8009ed4 <I2C_ITError+0x140>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b11      	cmp	r3, #17
 8009e64:	d002      	beq.n	8009e6c <I2C_ITError+0xd8>
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b21      	cmp	r3, #33	@ 0x21
 8009e6a:	d133      	bne.n	8009ed4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e7a:	d107      	bne.n	8009e8c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009e8a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fd fb17 	bl	80074c4 <HAL_DMA_GetState>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d017      	beq.n	8009ecc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea0:	4a33      	ldr	r2, [pc, #204]	@ (8009f70 <I2C_ITError+0x1dc>)
 8009ea2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fc f997 	bl	80061e4 <HAL_DMA_Abort_IT>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d04d      	beq.n	8009f58 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009eca:	e045      	b.n	8009f58 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f851 	bl	8009f74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ed2:	e041      	b.n	8009f58 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d039      	beq.n	8009f50 <I2C_ITError+0x1bc>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b12      	cmp	r3, #18
 8009ee0:	d002      	beq.n	8009ee8 <I2C_ITError+0x154>
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b22      	cmp	r3, #34	@ 0x22
 8009ee6:	d133      	bne.n	8009f50 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ef2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ef6:	d107      	bne.n	8009f08 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f06:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fd fad9 	bl	80074c4 <HAL_DMA_GetState>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d017      	beq.n	8009f48 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f1c:	4a14      	ldr	r2, [pc, #80]	@ (8009f70 <I2C_ITError+0x1dc>)
 8009f1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fc f959 	bl	80061e4 <HAL_DMA_Abort_IT>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d011      	beq.n	8009f5c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009f42:	4610      	mov	r0, r2
 8009f44:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f46:	e009      	b.n	8009f5c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f813 	bl	8009f74 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f4e:	e005      	b.n	8009f5c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f80f 	bl	8009f74 <I2C_TreatErrorCallback>
  }
}
 8009f56:	e002      	b.n	8009f5e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f58:	bf00      	nop
 8009f5a:	e000      	b.n	8009f5e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f5c:	bf00      	nop
}
 8009f5e:	bf00      	nop
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	ffff0000 	.word	0xffff0000
 8009f6c:	08008a4b 	.word	0x08008a4b
 8009f70:	0800a315 	.word	0x0800a315

08009f74 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b60      	cmp	r3, #96	@ 0x60
 8009f86:	d10e      	bne.n	8009fa6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7fe fc15 	bl	80087ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009fa4:	e009      	b.n	8009fba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7fe fc00 	bl	80087ba <HAL_I2C_ErrorCallback>
}
 8009fba:	bf00      	nop
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	f003 0302 	and.w	r3, r3, #2
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d103      	bne.n	8009fe0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d007      	beq.n	8009ffe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	699a      	ldr	r2, [r3, #24]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0201 	orr.w	r2, r2, #1
 8009ffc:	619a      	str	r2, [r3, #24]
  }
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a016:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a026:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d104      	bne.n	800a03c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a032:	2120      	movs	r1, #32
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 fb81 	bl	800a73c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a03a:	e02d      	b.n	800a098 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a044:	441a      	add	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a04e:	b29b      	uxth	r3, r3
 800a050:	2bff      	cmp	r3, #255	@ 0xff
 800a052:	d903      	bls.n	800a05c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	22ff      	movs	r2, #255	@ 0xff
 800a058:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a05a:	e004      	b.n	800a066 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a060:	b29a      	uxth	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06e:	4619      	mov	r1, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3328      	adds	r3, #40	@ 0x28
 800a076:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a07c:	f7fb fb2a 	bl	80056d4 <HAL_DMA_Start_IT>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d004      	beq.n	800a090 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a086:	2110      	movs	r1, #16
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7ff fe83 	bl	8009d94 <I2C_ITError>
}
 800a08e:	e003      	b.n	800a098 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a090:	2140      	movs	r1, #64	@ 0x40
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f000 fb52 	bl	800a73c <I2C_Enable_IRQ>
}
 800a098:	bf00      	nop
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d076      	beq.n	800a1a8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a71      	ldr	r2, [pc, #452]	@ (800a288 <I2C_DMAError+0x1e8>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d059      	beq.n	800a17a <I2C_DMAError+0xda>
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a6f      	ldr	r2, [pc, #444]	@ (800a28c <I2C_DMAError+0x1ec>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d053      	beq.n	800a17a <I2C_DMAError+0xda>
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a6d      	ldr	r2, [pc, #436]	@ (800a290 <I2C_DMAError+0x1f0>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d04d      	beq.n	800a17a <I2C_DMAError+0xda>
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a6b      	ldr	r2, [pc, #428]	@ (800a294 <I2C_DMAError+0x1f4>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d047      	beq.n	800a17a <I2C_DMAError+0xda>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a69      	ldr	r2, [pc, #420]	@ (800a298 <I2C_DMAError+0x1f8>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d041      	beq.n	800a17a <I2C_DMAError+0xda>
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a67      	ldr	r2, [pc, #412]	@ (800a29c <I2C_DMAError+0x1fc>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d03b      	beq.n	800a17a <I2C_DMAError+0xda>
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a65      	ldr	r2, [pc, #404]	@ (800a2a0 <I2C_DMAError+0x200>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d035      	beq.n	800a17a <I2C_DMAError+0xda>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a63      	ldr	r2, [pc, #396]	@ (800a2a4 <I2C_DMAError+0x204>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d02f      	beq.n	800a17a <I2C_DMAError+0xda>
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a61      	ldr	r2, [pc, #388]	@ (800a2a8 <I2C_DMAError+0x208>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d029      	beq.n	800a17a <I2C_DMAError+0xda>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a5f      	ldr	r2, [pc, #380]	@ (800a2ac <I2C_DMAError+0x20c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d023      	beq.n	800a17a <I2C_DMAError+0xda>
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a5d      	ldr	r2, [pc, #372]	@ (800a2b0 <I2C_DMAError+0x210>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d01d      	beq.n	800a17a <I2C_DMAError+0xda>
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a5b      	ldr	r2, [pc, #364]	@ (800a2b4 <I2C_DMAError+0x214>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d017      	beq.n	800a17a <I2C_DMAError+0xda>
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a59      	ldr	r2, [pc, #356]	@ (800a2b8 <I2C_DMAError+0x218>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d011      	beq.n	800a17a <I2C_DMAError+0xda>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a57      	ldr	r2, [pc, #348]	@ (800a2bc <I2C_DMAError+0x21c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00b      	beq.n	800a17a <I2C_DMAError+0xda>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a55      	ldr	r2, [pc, #340]	@ (800a2c0 <I2C_DMAError+0x220>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d005      	beq.n	800a17a <I2C_DMAError+0xda>
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a53      	ldr	r2, [pc, #332]	@ (800a2c4 <I2C_DMAError+0x224>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d109      	bne.n	800a18e <I2C_DMAError+0xee>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	bf0c      	ite	eq
 800a186:	2301      	moveq	r3, #1
 800a188:	2300      	movne	r3, #0
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	e008      	b.n	800a1a0 <I2C_DMAError+0x100>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	bf0c      	ite	eq
 800a19a:	2301      	moveq	r3, #1
 800a19c:	2300      	movne	r3, #0
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 8098 	beq.w	800a2e2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a33      	ldr	r2, [pc, #204]	@ (800a288 <I2C_DMAError+0x1e8>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d059      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a31      	ldr	r2, [pc, #196]	@ (800a28c <I2C_DMAError+0x1ec>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d053      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a2f      	ldr	r2, [pc, #188]	@ (800a290 <I2C_DMAError+0x1f0>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d04d      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a2d      	ldr	r2, [pc, #180]	@ (800a294 <I2C_DMAError+0x1f4>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d047      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a2b      	ldr	r2, [pc, #172]	@ (800a298 <I2C_DMAError+0x1f8>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d041      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a29      	ldr	r2, [pc, #164]	@ (800a29c <I2C_DMAError+0x1fc>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d03b      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a27      	ldr	r2, [pc, #156]	@ (800a2a0 <I2C_DMAError+0x200>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d035      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a25      	ldr	r2, [pc, #148]	@ (800a2a4 <I2C_DMAError+0x204>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d02f      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a23      	ldr	r2, [pc, #140]	@ (800a2a8 <I2C_DMAError+0x208>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d029      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a21      	ldr	r2, [pc, #132]	@ (800a2ac <I2C_DMAError+0x20c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d023      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b0 <I2C_DMAError+0x210>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d01d      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b4 <I2C_DMAError+0x214>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d017      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a1b      	ldr	r2, [pc, #108]	@ (800a2b8 <I2C_DMAError+0x218>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d011      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a19      	ldr	r2, [pc, #100]	@ (800a2bc <I2C_DMAError+0x21c>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d00b      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a17      	ldr	r2, [pc, #92]	@ (800a2c0 <I2C_DMAError+0x220>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d005      	beq.n	800a272 <I2C_DMAError+0x1d2>
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a15      	ldr	r2, [pc, #84]	@ (800a2c4 <I2C_DMAError+0x224>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d12a      	bne.n	800a2c8 <I2C_DMAError+0x228>
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	bf0c      	ite	eq
 800a27e:	2301      	moveq	r3, #1
 800a280:	2300      	movne	r3, #0
 800a282:	b2db      	uxtb	r3, r3
 800a284:	e029      	b.n	800a2da <I2C_DMAError+0x23a>
 800a286:	bf00      	nop
 800a288:	40020010 	.word	0x40020010
 800a28c:	40020028 	.word	0x40020028
 800a290:	40020040 	.word	0x40020040
 800a294:	40020058 	.word	0x40020058
 800a298:	40020070 	.word	0x40020070
 800a29c:	40020088 	.word	0x40020088
 800a2a0:	400200a0 	.word	0x400200a0
 800a2a4:	400200b8 	.word	0x400200b8
 800a2a8:	40020410 	.word	0x40020410
 800a2ac:	40020428 	.word	0x40020428
 800a2b0:	40020440 	.word	0x40020440
 800a2b4:	40020458 	.word	0x40020458
 800a2b8:	40020470 	.word	0x40020470
 800a2bc:	40020488 	.word	0x40020488
 800a2c0:	400204a0 	.word	0x400204a0
 800a2c4:	400204b8 	.word	0x400204b8
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bf0c      	ite	eq
 800a2d4:	2301      	moveq	r3, #1
 800a2d6:	2300      	movne	r3, #0
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7fd f8fc 	bl	80074e0 <HAL_DMA_GetError>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d00e      	beq.n	800a30c <I2C_DMAError+0x26c>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a302:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a304:	2110      	movs	r1, #16
 800a306:	68b8      	ldr	r0, [r7, #8]
 800a308:	f7ff fd44 	bl	8009d94 <I2C_ITError>
  }
}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a320:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32e:	2200      	movs	r2, #0
 800a330:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a33e:	2200      	movs	r2, #0
 800a340:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff fe16 	bl	8009f74 <I2C_TreatErrorCallback>
}
 800a348:	bf00      	nop
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	4613      	mov	r3, r2
 800a35e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a360:	e03b      	b.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f000 f8d6 	bl	800a518 <I2C_IsErrorOccurred>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e041      	b.n	800a3fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a37c:	d02d      	beq.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a37e:	f7f9 f9d7 	bl	8003730 <HAL_GetTick>
 800a382:	4602      	mov	r2, r0
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	683a      	ldr	r2, [r7, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d302      	bcc.n	800a394 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d122      	bne.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4013      	ands	r3, r2
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	bf0c      	ite	eq
 800a3a4:	2301      	moveq	r3, #1
 800a3a6:	2300      	movne	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d113      	bne.n	800a3da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3b6:	f043 0220 	orr.w	r2, r3, #32
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e00f      	b.n	800a3fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	699a      	ldr	r2, [r3, #24]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	bf0c      	ite	eq
 800a3ea:	2301      	moveq	r3, #1
 800a3ec:	2300      	movne	r3, #0
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d0b4      	beq.n	800a362 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a40e:	e033      	b.n	800a478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 f87f 	bl	800a518 <I2C_IsErrorOccurred>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e031      	b.n	800a488 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42a:	d025      	beq.n	800a478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42c:	f7f9 f980 	bl	8003730 <HAL_GetTick>
 800a430:	4602      	mov	r2, r0
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d302      	bcc.n	800a442 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d11a      	bne.n	800a478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d013      	beq.n	800a478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a454:	f043 0220 	orr.w	r2, r3, #32
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2220      	movs	r2, #32
 800a460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e007      	b.n	800a488 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b02      	cmp	r3, #2
 800a484:	d1c4      	bne.n	800a410 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a49c:	e02f      	b.n	800a4fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 f838 	bl	800a518 <I2C_IsErrorOccurred>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e02d      	b.n	800a50e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b2:	f7f9 f93d 	bl	8003730 <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d302      	bcc.n	800a4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d11a      	bne.n	800a4fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	f003 0320 	and.w	r3, r3, #32
 800a4d2:	2b20      	cmp	r3, #32
 800a4d4:	d013      	beq.n	800a4fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4da:	f043 0220 	orr.w	r2, r3, #32
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e007      	b.n	800a50e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b20      	cmp	r3, #32
 800a50a:	d1c8      	bne.n	800a49e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08a      	sub	sp, #40	@ 0x28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	f003 0310 	and.w	r3, r3, #16
 800a540:	2b00      	cmp	r3, #0
 800a542:	d068      	beq.n	800a616 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2210      	movs	r2, #16
 800a54a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a54c:	e049      	b.n	800a5e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a554:	d045      	beq.n	800a5e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a556:	f7f9 f8eb 	bl	8003730 <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	429a      	cmp	r2, r3
 800a564:	d302      	bcc.n	800a56c <I2C_IsErrorOccurred+0x54>
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d13a      	bne.n	800a5e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a576:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a57e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a58a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a58e:	d121      	bne.n	800a5d4 <I2C_IsErrorOccurred+0xbc>
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a596:	d01d      	beq.n	800a5d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a598:	7cfb      	ldrb	r3, [r7, #19]
 800a59a:	2b20      	cmp	r3, #32
 800a59c:	d01a      	beq.n	800a5d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a5ae:	f7f9 f8bf 	bl	8003730 <HAL_GetTick>
 800a5b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5b4:	e00e      	b.n	800a5d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a5b6:	f7f9 f8bb 	bl	8003730 <HAL_GetTick>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	2b19      	cmp	r3, #25
 800a5c2:	d907      	bls.n	800a5d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	f043 0320 	orr.w	r3, r3, #32
 800a5ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a5d2:	e006      	b.n	800a5e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	d1e9      	bne.n	800a5b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	f003 0320 	and.w	r3, r3, #32
 800a5ec:	2b20      	cmp	r3, #32
 800a5ee:	d003      	beq.n	800a5f8 <I2C_IsErrorOccurred+0xe0>
 800a5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0aa      	beq.n	800a54e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d103      	bne.n	800a608 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2220      	movs	r2, #32
 800a606:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	f043 0304 	orr.w	r3, r3, #4
 800a60e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00b      	beq.n	800a640 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	f043 0301 	orr.w	r3, r3, #1
 800a62e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00b      	beq.n	800a662 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	f043 0308 	orr.w	r3, r3, #8
 800a650:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a65a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00b      	beq.n	800a684 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	f043 0302 	orr.w	r3, r3, #2
 800a672:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a67c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01c      	beq.n	800a6c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f7ff fc98 	bl	8009fc2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6859      	ldr	r1, [r3, #4]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d4 <I2C_IsErrorOccurred+0x1bc>)
 800a69e:	400b      	ands	r3, r1
 800a6a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3728      	adds	r7, #40	@ 0x28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	fe00e800 	.word	0xfe00e800

0800a6d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	607b      	str	r3, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	817b      	strh	r3, [r7, #10]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6ea:	897b      	ldrh	r3, [r7, #10]
 800a6ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6f0:	7a7b      	ldrb	r3, [r7, #9]
 800a6f2:	041b      	lsls	r3, r3, #16
 800a6f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6f8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	4313      	orrs	r3, r2
 800a702:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a706:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	0d5b      	lsrs	r3, r3, #21
 800a712:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a716:	4b08      	ldr	r3, [pc, #32]	@ (800a738 <I2C_TransferConfig+0x60>)
 800a718:	430b      	orrs	r3, r1
 800a71a:	43db      	mvns	r3, r3
 800a71c:	ea02 0103 	and.w	r1, r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	430a      	orrs	r2, r1
 800a728:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a72a:	bf00      	nop
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	03ff63ff 	.word	0x03ff63ff

0800a73c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a750:	4a39      	ldr	r2, [pc, #228]	@ (800a838 <I2C_Enable_IRQ+0xfc>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d032      	beq.n	800a7bc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800a75a:	4a38      	ldr	r2, [pc, #224]	@ (800a83c <I2C_Enable_IRQ+0x100>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d02d      	beq.n	800a7bc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800a764:	4a36      	ldr	r2, [pc, #216]	@ (800a840 <I2C_Enable_IRQ+0x104>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d028      	beq.n	800a7bc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a76a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da03      	bge.n	800a77a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a778:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a77a:	887b      	ldrh	r3, [r7, #2]
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	2b00      	cmp	r3, #0
 800a782:	d003      	beq.n	800a78c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a78a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a78c:	887b      	ldrh	r3, [r7, #2]
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a79c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a79e:	887b      	ldrh	r3, [r7, #2]
 800a7a0:	2b10      	cmp	r3, #16
 800a7a2:	d103      	bne.n	800a7ac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a7aa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a7ac:	887b      	ldrh	r3, [r7, #2]
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	d133      	bne.n	800a81a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f043 0320 	orr.w	r3, r3, #32
 800a7b8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a7ba:	e02e      	b.n	800a81a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a7bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	da03      	bge.n	800a7cc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a7ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a7cc:	887b      	ldrh	r3, [r7, #2]
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800a7dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a7de:	887b      	ldrh	r3, [r7, #2]
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800a7ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a7f0:	887b      	ldrh	r3, [r7, #2]
 800a7f2:	2b10      	cmp	r3, #16
 800a7f4:	d103      	bne.n	800a7fe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a7fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a7fe:	887b      	ldrh	r3, [r7, #2]
 800a800:	2b20      	cmp	r3, #32
 800a802:	d103      	bne.n	800a80c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a80a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a80c:	887b      	ldrh	r3, [r7, #2]
 800a80e:	2b40      	cmp	r3, #64	@ 0x40
 800a810:	d103      	bne.n	800a81a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a818:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6819      	ldr	r1, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	430a      	orrs	r2, r1
 800a828:	601a      	str	r2, [r3, #0]
}
 800a82a:	bf00      	nop
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	08008c53 	.word	0x08008c53
 800a83c:	08009099 	.word	0x08009099
 800a840:	08008e39 	.word	0x08008e39

0800a844 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a854:	887b      	ldrh	r3, [r7, #2]
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00f      	beq.n	800a87e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800a864:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a872:	2b28      	cmp	r3, #40	@ 0x28
 800a874:	d003      	beq.n	800a87e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a87c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a87e:	887b      	ldrh	r3, [r7, #2]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00f      	beq.n	800a8a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800a88e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a896:	b2db      	uxtb	r3, r3
 800a898:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a89c:	2b28      	cmp	r3, #40	@ 0x28
 800a89e:	d003      	beq.n	800a8a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800a8a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a8a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	da03      	bge.n	800a8b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800a8b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a8b8:	887b      	ldrh	r3, [r7, #2]
 800a8ba:	2b10      	cmp	r3, #16
 800a8bc:	d103      	bne.n	800a8c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800a8c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a8c6:	887b      	ldrh	r3, [r7, #2]
 800a8c8:	2b20      	cmp	r3, #32
 800a8ca:	d103      	bne.n	800a8d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f043 0320 	orr.w	r3, r3, #32
 800a8d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a8d4:	887b      	ldrh	r3, [r7, #2]
 800a8d6:	2b40      	cmp	r3, #64	@ 0x40
 800a8d8:	d103      	bne.n	800a8e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6819      	ldr	r1, [r3, #0]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	43da      	mvns	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	400a      	ands	r2, r1
 800a8f2:	601a      	str	r2, [r3, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b20      	cmp	r3, #32
 800a914:	d138      	bne.n	800a988 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a920:	2302      	movs	r3, #2
 800a922:	e032      	b.n	800a98a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2224      	movs	r2, #36	@ 0x24
 800a930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f022 0201 	bic.w	r2, r2, #1
 800a942:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a952:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6819      	ldr	r1, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f042 0201 	orr.w	r2, r2, #1
 800a972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2220      	movs	r2, #32
 800a978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	e000      	b.n	800a98a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a988:	2302      	movs	r3, #2
  }
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a996:	b480      	push	{r7}
 800a998:	b085      	sub	sp, #20
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d139      	bne.n	800aa20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d101      	bne.n	800a9ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	e033      	b.n	800aa22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2224      	movs	r2, #36	@ 0x24
 800a9c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 0201 	bic.w	r2, r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a9e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	021b      	lsls	r3, r3, #8
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0201 	orr.w	r2, r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e000      	b.n	800aa22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aa20:	2302      	movs	r3, #2
  }
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
	...

0800aa30 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e070      	b.n	800ab24 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d106      	bne.n	800aa5c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7f7 fcea 	bl	8002430 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0201 	bic.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aa92:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aaa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aab2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aac2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a19      	ldr	r2, [pc, #100]	@ (800ab2c <HAL_JPEG_Init+0xfc>)
 800aac8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a18      	ldr	r2, [pc, #96]	@ (800ab30 <HAL_JPEG_Init+0x100>)
 800aace:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fd75 	bl	800b5cc <JPEG_Set_HuffEnc_Mem>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d004      	beq.n	800aaf2 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e018      	b.n	800ab24 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab00:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	0801b8b4 	.word	0x0801b8b4
 800ab30:	0801b8f4 	.word	0x0801b8f4

0800ab34 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <HAL_JPEG_GetInfo+0x16>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e083      	b.n	800ac56 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f003 0303 	and.w	r3, r3, #3
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d103      	bne.n	800ab64 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2210      	movs	r2, #16
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	e017      	b.n	800ab94 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d103      	bne.n	800ab7a <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2200      	movs	r2, #0
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	e00c      	b.n	800ab94 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f003 0303 	and.w	r3, r3, #3
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d103      	bne.n	800ab90 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2230      	movs	r2, #48	@ 0x30
 800ab8c:	601a      	str	r2, [r3, #0]
 800ab8e:	e001      	b.n	800ab94 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e060      	b.n	800ac56 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	0c1b      	lsrs	r3, r3, #16
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	0c1b      	lsrs	r3, r3, #16
 800abaa:	b29a      	uxth	r2, r3
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b10      	cmp	r3, #16
 800abb6:	d003      	beq.n	800abc0 <HAL_JPEG_GetInfo+0x8c>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b30      	cmp	r3, #48	@ 0x30
 800abbe:	d140      	bne.n	800ac42 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	091b      	lsrs	r3, r3, #4
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	091b      	lsrs	r3, r3, #4
 800abd6:	f003 030f 	and.w	r3, r3, #15
 800abda:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	091b      	lsrs	r3, r3, #4
 800abe4:	f003 030f 	and.w	r3, r3, #15
 800abe8:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d109      	bne.n	800ac04 <HAL_JPEG_GetInfo+0xd0>
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d106      	bne.n	800ac04 <HAL_JPEG_GetInfo+0xd0>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2202      	movs	r2, #2
 800ac00:	605a      	str	r2, [r3, #4]
 800ac02:	e01d      	b.n	800ac40 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d109      	bne.n	800ac1e <HAL_JPEG_GetInfo+0xea>
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d106      	bne.n	800ac1e <HAL_JPEG_GetInfo+0xea>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d103      	bne.n	800ac1e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	605a      	str	r2, [r3, #4]
 800ac1c:	e010      	b.n	800ac40 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	d109      	bne.n	800ac38 <HAL_JPEG_GetInfo+0x104>
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d106      	bne.n	800ac38 <HAL_JPEG_GetInfo+0x104>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d103      	bne.n	800ac38 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2201      	movs	r2, #1
 800ac34:	605a      	str	r2, [r3, #4]
 800ac36:	e003      	b.n	800ac40 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800ac3e:	e003      	b.n	800ac48 <HAL_JPEG_GetInfo+0x114>
 800ac40:	e002      	b.n	800ac48 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2200      	movs	r2, #0
 800ac46:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f001 fdb1 	bl	800c7b0 <JPEG_GetQuality>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d005      	beq.n	800ac7e <HAL_JPEG_Decode_DMA+0x20>
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <HAL_JPEG_Decode_DMA+0x20>
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e04c      	b.n	800ad1c <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_JPEG_Decode_DMA+0x32>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e045      	b.n	800ad1c <HAL_JPEG_Decode_DMA+0xbe>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d134      	bne.n	800ad0e <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2204      	movs	r2, #4
 800aca8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acb0:	f023 020f 	bic.w	r2, r3, #15
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acbc:	f043 020e 	orr.w	r2, r3, #14
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	69ba      	ldr	r2, [r7, #24]
 800acda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 fef1 	bl	800bad0 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f001 fa12 	bl	800c118 <JPEG_DMA_StartProcess>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00f      	beq.n	800ad1a <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2206      	movs	r2, #6
 800acfe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e006      	b.n	800ad1c <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800ad16:	2302      	movs	r3, #2
 800ad18:	e000      	b.n	800ad1c <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad36:	f003 030c 	and.w	r3, r3, #12
 800ad3a:	2b0c      	cmp	r3, #12
 800ad3c:	d116      	bne.n	800ad6c <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	f003 0301 	and.w	r3, r3, #1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d005      	beq.n	800ad54 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	f003 0302 	and.w	r3, r3, #2
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d033      	beq.n	800adc6 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad62:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	655a      	str	r2, [r3, #84]	@ 0x54
 800ad6a:	e02c      	b.n	800adc6 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad70:	f003 030c 	and.w	r3, r3, #12
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d126      	bne.n	800adc6 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d009      	beq.n	800ad96 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f043 0306 	orr.w	r3, r3, #6
 800ad94:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d009      	beq.n	800adb4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ada4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800adb2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	43da      	mvns	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	400a      	ands	r2, r1
 800adc4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_JPEG_Abort>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Abort(JPEG_HandleTypeDef *hjpeg)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t tmpContext;
  tmpContext = hjpeg->Context;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade0:	60fb      	str	r3, [r7, #12]

  /*Reset the Context operation and method*/
  hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ade6:	4b4e      	ldr	r3, [pc, #312]	@ (800af20 <HAL_JPEG_Abort+0x14c>)
 800ade8:	4013      	ands	r3, r2
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	6553      	str	r3, [r2, #84]	@ 0x54

  if ((tmpContext & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f003 030c 	and.w	r3, r3, #12
 800adf4:	2b0c      	cmp	r3, #12
 800adf6:	d125      	bne.n	800ae44 <HAL_JPEG_Abort+0x70>
  {
    /* Stop the DMA In/out Xfer*/
    if (HAL_MDMA_Abort(hjpeg->hdmaout) != HAL_OK)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adfc:	4618      	mov	r0, r3
 800adfe:	f001 fe54 	bl	800caaa <HAL_MDMA_Abort>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00a      	beq.n	800ae1e <HAL_JPEG_Abort+0x4a>
    {
      if (hjpeg->hdmaout->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae0e:	2b40      	cmp	r3, #64	@ 0x40
 800ae10:	d105      	bne.n	800ae1e <HAL_JPEG_Abort+0x4a>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae16:	f043 0204 	orr.w	r2, r3, #4
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
    if (HAL_MDMA_Abort(hjpeg->hdmain) != HAL_OK)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae22:	4618      	mov	r0, r3
 800ae24:	f001 fe41 	bl	800caaa <HAL_MDMA_Abort>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00a      	beq.n	800ae44 <HAL_JPEG_Abort+0x70>
    {
      if (hjpeg->hdmain->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae34:	2b40      	cmp	r3, #64	@ 0x40
 800ae36:	d105      	bne.n	800ae44 <HAL_JPEG_Abort+0x70>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae3c:	f043 0204 	orr.w	r2, r3, #4
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	651a      	str	r2, [r3, #80]	@ 0x50
    }

  }

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 0201 	bic.w	r2, r2, #1
 800ae52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae54:	f7f8 fc6c 	bl	8003730 <HAL_GetTick>
 800ae58:	60b8      	str	r0, [r7, #8]

  /* Check if the JPEG Codec is effectively disabled */
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800ae5a:	e012      	b.n	800ae82 <HAL_JPEG_Abort+0xae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > JPEG_TIMEOUT_VALUE)
 800ae5c:	f7f8 fc68 	bl	8003730 <HAL_GetTick>
 800ae60:	4602      	mov	r2, r0
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae6a:	d90a      	bls.n	800ae82 <HAL_JPEG_Abort+0xae>
    {
      /* Update error code */
      hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae70:	f043 0208 	orr.w	r2, r3, #8
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Change the DMA state */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2206      	movs	r2, #6
 800ae7c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ae80:	e006      	b.n	800ae90 <HAL_JPEG_Abort+0xbc>
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e5      	bne.n	800ae5c <HAL_JPEG_Abort+0x88>
    }
  }

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ae9e:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aeae:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aebe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Reset the Context Pause*/
  hjpeg->Context &= ~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aee0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Change the DMA state*/
  if (hjpeg->ErrorCode != HAL_JPEG_ERROR_NONE)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d009      	beq.n	800af04 <HAL_JPEG_Abort+0x130>
  {
    hjpeg->State = HAL_JPEG_STATE_ERROR;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2206      	movs	r2, #6
 800aef4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e008      	b.n	800af16 <HAL_JPEG_Abort+0x142>
  }
  else
  {
    hjpeg->State = HAL_JPEG_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_OK;
 800af14:	2300      	movs	r3, #0
  }

}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	ffff7ff0 	.word	0xffff7ff0

0800af24 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800af2e:	bf00      	nop
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b083      	sub	sp, #12
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800af72:	b2db      	uxtb	r3, r3
 800af74:	3b03      	subs	r3, #3
 800af76:	2b01      	cmp	r3, #1
 800af78:	d813      	bhi.n	800afa2 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af7e:	f003 030c 	and.w	r3, r3, #12
 800af82:	2b08      	cmp	r3, #8
 800af84:	d103      	bne.n	800af8e <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fe16 	bl	800bbb8 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800af8c:	e00b      	b.n	800afa6 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af92:	f003 030c 	and.w	r3, r3, #12
 800af96:	2b0c      	cmp	r3, #12
 800af98:	d105      	bne.n	800afa6 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f001 f956 	bl	800c24c <JPEG_DMA_ContinueProcess>
      break;
 800afa0:	e001      	b.n	800afa6 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800afa2:	bf00      	nop
 800afa4:	e000      	b.n	800afa8 <HAL_JPEG_IRQHandler+0x44>
      break;
 800afa6:	bf00      	nop
  }
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b08b      	sub	sp, #44	@ 0x2c
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800afc2:	2300      	movs	r3, #0
 800afc4:	61fb      	str	r3, [r7, #28]
 800afc6:	e020      	b.n	800b00a <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	4413      	add	r3, r2
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800afd2:	6a3a      	ldr	r2, [r7, #32]
 800afd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd6:	4413      	add	r3, r2
 800afd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afdc:	d90f      	bls.n	800affe <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e055      	b.n	800b08e <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	68b9      	ldr	r1, [r7, #8]
 800afe8:	6a3b      	ldr	r3, [r7, #32]
 800afea:	440b      	add	r3, r1
 800afec:	3201      	adds	r2, #1
 800afee:	b2d2      	uxtb	r2, r2
 800aff0:	701a      	strb	r2, [r3, #0]
      p++;
 800aff2:	6a3b      	ldr	r3, [r7, #32]
 800aff4:	3301      	adds	r3, #1
 800aff6:	623b      	str	r3, [r7, #32]
      i--;
 800aff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affa:	3b01      	subs	r3, #1
 800affc:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800affe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1ee      	bne.n	800afe2 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	3301      	adds	r3, #1
 800b008:	61fb      	str	r3, [r7, #28]
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	2b0f      	cmp	r3, #15
 800b00e:	d9db      	bls.n	800afc8 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	4413      	add	r3, r2
 800b016:	2200      	movs	r2, #0
 800b018:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	6a3a      	ldr	r2, [r7, #32]
 800b01e:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	617b      	str	r3, [r7, #20]
  p = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800b02e:	e027      	b.n	800b080 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800b030:	6a3b      	ldr	r3, [r7, #32]
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	4413      	add	r3, r2
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	601a      	str	r2, [r3, #0]
      p++;
 800b03c:	6a3b      	ldr	r3, [r7, #32]
 800b03e:	3301      	adds	r3, #1
 800b040:	623b      	str	r3, [r7, #32]
      code++;
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	3301      	adds	r3, #1
 800b046:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	4413      	add	r3, r2
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	461a      	mov	r2, r3
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	4293      	cmp	r3, r2
 800b056:	d0eb      	beq.n	800b030 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	2b1f      	cmp	r3, #31
 800b05c:	d901      	bls.n	800b062 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	e015      	b.n	800b08e <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800b062:	2201      	movs	r2, #1
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	fa02 f303 	lsl.w	r3, r2, r3
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d301      	bcc.n	800b074 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e00c      	b.n	800b08e <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	005b      	lsls	r3, r3, #1
 800b078:	61bb      	str	r3, [r7, #24]
    si++;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	3301      	adds	r3, #1
 800b07e:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	4413      	add	r3, r2
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1dd      	bne.n	800b048 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	372c      	adds	r7, #44	@ 0x2c
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b0a6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b0aa:	6018      	str	r0, [r3, #0]
 800b0ac:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b0b0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b0b4:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800b0b6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b0ba:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	f107 0308 	add.w	r3, r7, #8
 800b0c4:	f107 020c 	add.w	r2, r7, #12
 800b0c8:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800b0cc:	f7ff ff70 	bl	800afb0 <JPEG_Bits_To_SizeCodes>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800b0d6:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800b0de:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800b0e2:	e075      	b.n	800b1d0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800b0ea:	e067      	b.n	800b1bc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800b0ec:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b0f0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b0fa:	4413      	add	r3, r2
 800b0fc:	3310      	adds	r3, #16
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800b104:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d103      	bne.n	800b114 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800b10c:	23a0      	movs	r3, #160	@ 0xa0
 800b10e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800b112:	e021      	b.n	800b158 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800b114:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b118:	2bf0      	cmp	r3, #240	@ 0xf0
 800b11a:	d103      	bne.n	800b124 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800b11c:	23a1      	movs	r3, #161	@ 0xa1
 800b11e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800b122:	e019      	b.n	800b158 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800b124:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b128:	091b      	lsrs	r3, r3, #4
 800b12a:	f003 030f 	and.w	r3, r3, #15
 800b12e:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800b132:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b136:	f003 030f 	and.w	r3, r3, #15
 800b13a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800b13e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	461a      	mov	r2, r3
 800b14c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b150:	4413      	add	r3, r2
 800b152:	3b01      	subs	r3, #1
 800b154:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800b158:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b15c:	2ba1      	cmp	r3, #161	@ 0xa1
 800b15e:	d901      	bls.n	800b164 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800b160:	2301      	movs	r3, #1
 800b162:	e035      	b.n	800b1d0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b164:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b168:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b16c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800b170:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b174:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b178:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b17c:	6819      	ldr	r1, [r3, #0]
 800b17e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b182:	3328      	adds	r3, #40	@ 0x28
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	440b      	add	r3, r1
 800b188:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800b18a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b18e:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800b192:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b196:	4413      	add	r3, r2
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	b2d9      	uxtb	r1, r3
 800b19e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b1a2:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b1ac:	4413      	add	r3, r2
 800b1ae:	460a      	mov	r2, r1
 800b1b0:	701a      	strb	r2, [r3, #0]
      k++;
 800b1b2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800b1bc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b1c0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d38e      	bcc.n	800b0ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b1e6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b1ea:	6018      	str	r0, [r3, #0]
 800b1ec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b1f0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b1f4:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800b1f6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b1fa:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b1fe:	6818      	ldr	r0, [r3, #0]
 800b200:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800b204:	f107 0208 	add.w	r2, r7, #8
 800b208:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800b20c:	f7ff fed0 	bl	800afb0 <JPEG_Bits_To_SizeCodes>
 800b210:	4603      	mov	r3, r0
 800b212:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800b216:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800b21e:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800b222:	e048      	b.n	800b2b6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800b22a:	e03d      	b.n	800b2a8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800b22c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b230:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b23a:	4413      	add	r3, r2
 800b23c:	3310      	adds	r3, #16
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800b244:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b248:	2b0b      	cmp	r3, #11
 800b24a:	d901      	bls.n	800b250 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800b24c:	2301      	movs	r3, #1
 800b24e:	e032      	b.n	800b2b6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b250:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b254:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800b258:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800b25c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b260:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b264:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b268:	6819      	ldr	r1, [r3, #0]
 800b26a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b26e:	3302      	adds	r3, #2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	440b      	add	r3, r1
 800b274:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800b276:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b27a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800b27e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b282:	4413      	add	r3, r2
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	3b01      	subs	r3, #1
 800b288:	b2d9      	uxtb	r1, r3
 800b28a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b28e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b298:	4413      	add	r3, r2
 800b29a:	460a      	mov	r2, r1
 800b29c:	701a      	strb	r2, [r3, #0]
      k++;
 800b29e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800b2a8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800b2ac:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d3bb      	bcc.n	800b22c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b09a      	sub	sp, #104	@ 0x68
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d106      	bne.n	800b2e8 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800b2e2:	3318      	adds	r3, #24
 800b2e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2e6:	e00f      	b.n	800b308 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d106      	bne.n	800b304 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800b2fe:	3318      	adds	r3, #24
 800b300:	663b      	str	r3, [r7, #96]	@ 0x60
 800b302:	e001      	b.n	800b308 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	e059      	b.n	800b3bc <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d055      	beq.n	800b3ba <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800b30e:	f107 0314 	add.w	r3, r7, #20
 800b312:	4619      	mov	r1, r3
 800b314:	68b8      	ldr	r0, [r7, #8]
 800b316:	f7ff ff60 	bl	800b1da <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800b320:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800b328:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b32c:	e046      	b.n	800b3bc <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800b32e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b330:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800b332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b334:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b338:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b33a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b33c:	3304      	adds	r3, #4
 800b33e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800b340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b342:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b346:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800b348:	230c      	movs	r3, #12
 800b34a:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800b34c:	e032      	b.n	800b3b4 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800b34e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b350:	3b01      	subs	r3, #1
 800b352:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800b354:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b356:	3b04      	subs	r3, #4
 800b358:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b35a:	f107 0214 	add.w	r2, r7, #20
 800b35e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b360:	4413      	add	r3, r2
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	021b      	lsls	r3, r3, #8
 800b366:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b36a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b36c:	3302      	adds	r3, #2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	3368      	adds	r3, #104	@ 0x68
 800b372:	443b      	add	r3, r7
 800b374:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	4313      	orrs	r3, r2
 800b37c:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800b37e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b380:	3b01      	subs	r3, #1
 800b382:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b384:	f107 0214 	add.w	r2, r7, #20
 800b388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b38a:	4413      	add	r3, r2
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	021b      	lsls	r3, r3, #8
 800b390:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b396:	3302      	adds	r3, #2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	3368      	adds	r3, #104	@ 0x68
 800b39c:	443b      	add	r3, r7
 800b39e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800b3a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3aa:	041a      	lsls	r2, r3, #16
 800b3ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3ae:	431a      	orrs	r2, r3
 800b3b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3b2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800b3b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d8c9      	bhi.n	800b34e <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3768      	adds	r7, #104	@ 0x68
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3d0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b3d4:	6018      	str	r0, [r3, #0]
 800b3d6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3da:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b3de:	6019      	str	r1, [r3, #0]
 800b3e0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3e4:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800b3e8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800b3ea:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b3ee:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3fa:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800b3fe:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800b402:	6812      	ldr	r2, [r2, #0]
 800b404:	429a      	cmp	r2, r3
 800b406:	d10c      	bne.n	800b422 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800b408:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b40c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b418:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b41c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800b420:	e01d      	b.n	800b45e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800b422:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b426:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800b432:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800b436:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800b43a:	6812      	ldr	r2, [r2, #0]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d10c      	bne.n	800b45a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800b440:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b444:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800b450:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b454:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800b458:	e001      	b.n	800b45e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e0a8      	b.n	800b5b0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800b45e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b462:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 80a0 	beq.w	800b5ae <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800b46e:	f107 0214 	add.w	r2, r7, #20
 800b472:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b476:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b47a:	4611      	mov	r1, r2
 800b47c:	6818      	ldr	r0, [r3, #0]
 800b47e:	f7ff fe0c 	bl	800b09a <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800b482:	4603      	mov	r3, r0
 800b484:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800b488:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800b490:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800b494:	e08c      	b.n	800b5b0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800b496:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b49a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800b4a4:	e00e      	b.n	800b4c4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800b4a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4aa:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b4ae:	601a      	str	r2, [r3, #0]
      addressDef++;
 800b4b0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800b4ba:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b4be:	3301      	adds	r3, #1
 800b4c0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800b4c4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d9ec      	bls.n	800b4a6 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800b4cc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4d0:	4a3a      	ldr	r2, [pc, #232]	@ (800b5bc <JPEG_Set_HuffAC_Mem+0x1f8>)
 800b4d2:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b4d4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4d8:	3304      	adds	r3, #4
 800b4da:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800b4de:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4e2:	4a37      	ldr	r2, [pc, #220]	@ (800b5c0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800b4e4:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b4e6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800b4f0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4f4:	4a33      	ldr	r2, [pc, #204]	@ (800b5c4 <JPEG_Set_HuffAC_Mem+0x200>)
 800b4f6:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b4f8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800b502:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b506:	4a30      	ldr	r2, [pc, #192]	@ (800b5c8 <JPEG_Set_HuffAC_Mem+0x204>)
 800b508:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800b50a:	23a2      	movs	r3, #162	@ 0xa2
 800b50c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800b510:	e049      	b.n	800b5a6 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800b512:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b516:	3b01      	subs	r3, #1
 800b518:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800b51c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b520:	3b04      	subs	r3, #4
 800b522:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b526:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b52a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800b52e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b532:	4413      	add	r3, r2
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b53c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b540:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800b544:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b548:	3328      	adds	r3, #40	@ 0x28
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	440b      	add	r3, r1
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	b2db      	uxtb	r3, r3
 800b552:	4313      	orrs	r3, r2
 800b554:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800b558:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b55c:	3b01      	subs	r3, #1
 800b55e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b562:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b566:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800b56a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b56e:	4413      	add	r3, r2
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	021b      	lsls	r3, r3, #8
 800b574:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b578:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b57c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800b580:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b584:	3328      	adds	r3, #40	@ 0x28
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	440b      	add	r3, r1
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	4313      	orrs	r3, r2
 800b590:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800b594:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800b598:	041a      	lsls	r2, r3, #16
 800b59a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b5a4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800b5a6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d8b1      	bhi.n	800b512 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0fd10fd0 	.word	0x0fd10fd0
 800b5c0:	0fd30fd2 	.word	0x0fd30fd2
 800b5c4:	0fd50fd4 	.word	0x0fd50fd4
 800b5c8:	0fd70fd6 	.word	0x0fd70fd6

0800b5cc <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f84d 	bl	800b674 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	491f      	ldr	r1, [pc, #124]	@ (800b664 <JPEG_Set_HuffEnc_Mem+0x98>)
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7ff feec 	bl	800b3c4 <JPEG_Set_HuffAC_Mem>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	e030      	b.n	800b65c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800b602:	461a      	mov	r2, r3
 800b604:	4918      	ldr	r1, [pc, #96]	@ (800b668 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff fedc 	bl	800b3c4 <JPEG_Set_HuffAC_Mem>
 800b60c:	4603      	mov	r3, r0
 800b60e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	e020      	b.n	800b65c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800b622:	461a      	mov	r2, r3
 800b624:	4911      	ldr	r1, [pc, #68]	@ (800b66c <JPEG_Set_HuffEnc_Mem+0xa0>)
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff fe4a 	bl	800b2c0 <JPEG_Set_HuffDC_Mem>
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800b636:	7bfb      	ldrb	r3, [r7, #15]
 800b638:	e010      	b.n	800b65c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800b642:	461a      	mov	r2, r3
 800b644:	490a      	ldr	r1, [pc, #40]	@ (800b670 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff fe3a 	bl	800b2c0 <JPEG_Set_HuffDC_Mem>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	e000      	b.n	800b65c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	0801b70c 	.word	0x0801b70c
 800b668:	0801b7c0 	.word	0x0801b7c0
 800b66c:	0801b6d4 	.word	0x0801b6d4
 800b670:	0801b6f0 	.word	0x0801b6f0

0800b674 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800b674:	b480      	push	{r7}
 800b676:	b08b      	sub	sp, #44	@ 0x2c
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800b67c:	4b80      	ldr	r3, [pc, #512]	@ (800b880 <JPEG_Set_Huff_DHTMem+0x20c>)
 800b67e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800b680:	4b80      	ldr	r3, [pc, #512]	@ (800b884 <JPEG_Set_Huff_DHTMem+0x210>)
 800b682:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800b684:	4b80      	ldr	r3, [pc, #512]	@ (800b888 <JPEG_Set_Huff_DHTMem+0x214>)
 800b686:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800b688:	4b80      	ldr	r3, [pc, #512]	@ (800b88c <JPEG_Set_Huff_DHTMem+0x218>)
 800b68a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b694:	330c      	adds	r3, #12
 800b696:	623b      	str	r3, [r7, #32]
  index = 16;
 800b698:	2310      	movs	r3, #16
 800b69a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b69c:	e01d      	b.n	800b6da <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	5cd3      	ldrb	r3, [r2, r3]
 800b6a6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6aa:	3b02      	subs	r3, #2
 800b6ac:	6979      	ldr	r1, [r7, #20]
 800b6ae:	5ccb      	ldrb	r3, [r1, r3]
 800b6b0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b6b2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b6:	3b03      	subs	r3, #3
 800b6b8:	6979      	ldr	r1, [r7, #20]
 800b6ba:	5ccb      	ldrb	r3, [r1, r3]
 800b6bc:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b6be:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800b6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6c2:	3a04      	subs	r2, #4
 800b6c4:	6979      	ldr	r1, [r7, #20]
 800b6c6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b6c8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	601a      	str	r2, [r3, #0]
    address--;
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	3b04      	subs	r3, #4
 800b6d2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d6:	3b04      	subs	r3, #4
 800b6d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6dc:	2b03      	cmp	r3, #3
 800b6de:	d8de      	bhi.n	800b69e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b6e8:	3318      	adds	r3, #24
 800b6ea:	623b      	str	r3, [r7, #32]
  index = 12;
 800b6ec:	230c      	movs	r3, #12
 800b6ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b6f0:	e021      	b.n	800b736 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	7c1b      	ldrb	r3, [r3, #16]
 800b6fc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b700:	3b02      	subs	r3, #2
 800b702:	6979      	ldr	r1, [r7, #20]
 800b704:	440b      	add	r3, r1
 800b706:	7c1b      	ldrb	r3, [r3, #16]
 800b708:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b70a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	3b03      	subs	r3, #3
 800b710:	6979      	ldr	r1, [r7, #20]
 800b712:	440b      	add	r3, r1
 800b714:	7c1b      	ldrb	r3, [r3, #16]
 800b716:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800b718:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800b71a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b71c:	3a04      	subs	r2, #4
 800b71e:	6979      	ldr	r1, [r7, #20]
 800b720:	440a      	add	r2, r1
 800b722:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800b724:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	601a      	str	r2, [r3, #0]
    address--;
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	3b04      	subs	r3, #4
 800b72e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b732:	3b04      	subs	r3, #4
 800b734:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b738:	2b03      	cmp	r3, #3
 800b73a:	d8da      	bhi.n	800b6f2 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b744:	3328      	adds	r3, #40	@ 0x28
 800b746:	623b      	str	r3, [r7, #32]
  index = 16;
 800b748:	2310      	movs	r3, #16
 800b74a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b74c:	e01d      	b.n	800b78a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b750:	3b01      	subs	r3, #1
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	5cd3      	ldrb	r3, [r2, r3]
 800b756:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75a:	3b02      	subs	r3, #2
 800b75c:	69f9      	ldr	r1, [r7, #28]
 800b75e:	5ccb      	ldrb	r3, [r1, r3]
 800b760:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b762:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b766:	3b03      	subs	r3, #3
 800b768:	69f9      	ldr	r1, [r7, #28]
 800b76a:	5ccb      	ldrb	r3, [r1, r3]
 800b76c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b76e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800b770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b772:	3a04      	subs	r2, #4
 800b774:	69f9      	ldr	r1, [r7, #28]
 800b776:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b778:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	601a      	str	r2, [r3, #0]
    address--;
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	3b04      	subs	r3, #4
 800b782:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b786:	3b04      	subs	r3, #4
 800b788:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d8de      	bhi.n	800b74e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b798:	33cc      	adds	r3, #204	@ 0xcc
 800b79a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	4b3b      	ldr	r3, [pc, #236]	@ (800b890 <JPEG_Set_Huff_DHTMem+0x21c>)
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800b7ac:	021a      	lsls	r2, r3, #8
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	69fa      	ldr	r2, [r7, #28]
 800b7b4:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800b7c2:	6a3b      	ldr	r3, [r7, #32]
 800b7c4:	3b04      	subs	r3, #4
 800b7c6:	623b      	str	r3, [r7, #32]
  index = 160;
 800b7c8:	23a0      	movs	r3, #160	@ 0xa0
 800b7ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b7cc:	e021      	b.n	800b812 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	69fa      	ldr	r2, [r7, #28]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	7c1b      	ldrb	r3, [r3, #16]
 800b7d8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	3b02      	subs	r3, #2
 800b7de:	69f9      	ldr	r1, [r7, #28]
 800b7e0:	440b      	add	r3, r1
 800b7e2:	7c1b      	ldrb	r3, [r3, #16]
 800b7e4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b7e6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	3b03      	subs	r3, #3
 800b7ec:	69f9      	ldr	r1, [r7, #28]
 800b7ee:	440b      	add	r3, r1
 800b7f0:	7c1b      	ldrb	r3, [r3, #16]
 800b7f2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800b7f4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800b7f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7f8:	3a04      	subs	r2, #4
 800b7fa:	69f9      	ldr	r1, [r7, #28]
 800b7fc:	440a      	add	r2, r1
 800b7fe:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800b800:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	601a      	str	r2, [r3, #0]
    address--;
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	3b04      	subs	r3, #4
 800b80a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80e:	3b04      	subs	r3, #4
 800b810:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b814:	2b03      	cmp	r3, #3
 800b816:	d8da      	bhi.n	800b7ce <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b820:	33cc      	adds	r3, #204	@ 0xcc
 800b822:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	b29b      	uxth	r3, r3
 800b82a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	785b      	ldrb	r3, [r3, #1]
 800b830:	061a      	lsls	r2, r3, #24
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	431a      	orrs	r2, r3
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	041b      	lsls	r3, r3, #16
 800b83c:	4313      	orrs	r3, r2
 800b83e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b84e:	33dc      	adds	r3, #220	@ 0xdc
 800b850:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	4b0e      	ldr	r3, [pc, #56]	@ (800b890 <JPEG_Set_Huff_DHTMem+0x21c>)
 800b858:	4013      	ands	r3, r2
 800b85a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	7bdb      	ldrb	r3, [r3, #15]
 800b860:	021a      	lsls	r2, r3, #8
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4313      	orrs	r3, r2
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	7b92      	ldrb	r2, [r2, #14]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	3b04      	subs	r3, #4
 800b878:	623b      	str	r3, [r7, #32]
  index = 12;
 800b87a:	230c      	movs	r3, #12
 800b87c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b87e:	e027      	b.n	800b8d0 <JPEG_Set_Huff_DHTMem+0x25c>
 800b880:	0801b70c 	.word	0x0801b70c
 800b884:	0801b7c0 	.word	0x0801b7c0
 800b888:	0801b6d4 	.word	0x0801b6d4
 800b88c:	0801b6f0 	.word	0x0801b6f0
 800b890:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b896:	3301      	adds	r3, #1
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	5cd3      	ldrb	r3, [r2, r3]
 800b89c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800b89e:	6939      	ldr	r1, [r7, #16]
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a2:	440b      	add	r3, r1
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b8a8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	6939      	ldr	r1, [r7, #16]
 800b8b0:	5ccb      	ldrb	r3, [r1, r3]
 800b8b2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800b8b4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800b8b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b8:	3a02      	subs	r2, #2
 800b8ba:	6939      	ldr	r1, [r7, #16]
 800b8bc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800b8be:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	601a      	str	r2, [r3, #0]
    address--;
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	3b04      	subs	r3, #4
 800b8c8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8cc:	3b04      	subs	r3, #4
 800b8ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d8de      	bhi.n	800b894 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b8de:	33dc      	adds	r3, #220	@ 0xdc
 800b8e0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	7c5b      	ldrb	r3, [r3, #17]
 800b8ee:	061a      	lsls	r2, r3, #24
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	7c1b      	ldrb	r3, [r3, #16]
 800b8f8:	041b      	lsls	r3, r3, #16
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b90c:	33e8      	adds	r3, #232	@ 0xe8
 800b90e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	4b6d      	ldr	r3, [pc, #436]	@ (800bacc <JPEG_Set_Huff_DHTMem+0x458>)
 800b916:	4013      	ands	r3, r2
 800b918:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	7edb      	ldrb	r3, [r3, #27]
 800b91e:	021a      	lsls	r2, r3, #8
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4313      	orrs	r3, r2
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	7e92      	ldrb	r2, [r2, #26]
 800b928:	4313      	orrs	r3, r2
 800b92a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b92c:	6a3b      	ldr	r3, [r7, #32]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	3b04      	subs	r3, #4
 800b936:	623b      	str	r3, [r7, #32]
  index = 8;
 800b938:	2308      	movs	r3, #8
 800b93a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b93c:	e021      	b.n	800b982 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800b93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b940:	3301      	adds	r3, #1
 800b942:	693a      	ldr	r2, [r7, #16]
 800b944:	4413      	add	r3, r2
 800b946:	7c1b      	ldrb	r3, [r3, #16]
 800b948:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800b94a:	6939      	ldr	r1, [r7, #16]
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	440b      	add	r3, r1
 800b950:	3310      	adds	r3, #16
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800b956:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	3b01      	subs	r3, #1
 800b95c:	6939      	ldr	r1, [r7, #16]
 800b95e:	440b      	add	r3, r1
 800b960:	7c1b      	ldrb	r3, [r3, #16]
 800b962:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800b964:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800b966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b968:	3a02      	subs	r2, #2
 800b96a:	6939      	ldr	r1, [r7, #16]
 800b96c:	440a      	add	r2, r1
 800b96e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800b970:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800b972:	6a3b      	ldr	r3, [r7, #32]
 800b974:	601a      	str	r2, [r3, #0]
    address--;
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	3b04      	subs	r3, #4
 800b97a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800b97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97e:	3b04      	subs	r3, #4
 800b980:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b984:	2b03      	cmp	r3, #3
 800b986:	d8da      	bhi.n	800b93e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b990:	33e8      	adds	r3, #232	@ 0xe8
 800b992:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	785b      	ldrb	r3, [r3, #1]
 800b9a0:	061a      	lsls	r2, r3, #24
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	431a      	orrs	r2, r3
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	041b      	lsls	r3, r3, #16
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b9b0:	6a3b      	ldr	r3, [r7, #32]
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b9be:	33f8      	adds	r3, #248	@ 0xf8
 800b9c0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	4b41      	ldr	r3, [pc, #260]	@ (800bacc <JPEG_Set_Huff_DHTMem+0x458>)
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	7bdb      	ldrb	r3, [r3, #15]
 800b9d0:	021a      	lsls	r2, r3, #8
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	69ba      	ldr	r2, [r7, #24]
 800b9d8:	7b92      	ldrb	r2, [r2, #14]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	60fb      	str	r3, [r7, #12]
  *address = value;
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	3b04      	subs	r3, #4
 800b9e8:	623b      	str	r3, [r7, #32]
  index = 12;
 800b9ea:	230c      	movs	r3, #12
 800b9ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b9ee:	e01d      	b.n	800ba2c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	5cd3      	ldrb	r3, [r2, r3]
 800b9f8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800b9fa:	69b9      	ldr	r1, [r7, #24]
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fe:	440b      	add	r3, r1
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ba04:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ba06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	69b9      	ldr	r1, [r7, #24]
 800ba0c:	5ccb      	ldrb	r3, [r1, r3]
 800ba0e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800ba10:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800ba12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba14:	3a02      	subs	r2, #2
 800ba16:	69b9      	ldr	r1, [r7, #24]
 800ba18:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ba1a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	601a      	str	r2, [r3, #0]
    address--;
 800ba20:	6a3b      	ldr	r3, [r7, #32]
 800ba22:	3b04      	subs	r3, #4
 800ba24:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ba26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba28:	3b04      	subs	r3, #4
 800ba2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d8de      	bhi.n	800b9f0 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ba3a:	33f8      	adds	r3, #248	@ 0xf8
 800ba3c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	7c5b      	ldrb	r3, [r3, #17]
 800ba4a:	061a      	lsls	r2, r3, #24
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	7c1b      	ldrb	r3, [r3, #16]
 800ba54:	041b      	lsls	r3, r3, #16
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ba68:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800ba6c:	623b      	str	r3, [r7, #32]
  index = 160;
 800ba6e:	23a0      	movs	r3, #160	@ 0xa0
 800ba70:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ba72:	e021      	b.n	800bab8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ba74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba76:	3301      	adds	r3, #1
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	7c1b      	ldrb	r3, [r3, #16]
 800ba7e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ba80:	69b9      	ldr	r1, [r7, #24]
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	440b      	add	r3, r1
 800ba86:	3310      	adds	r3, #16
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ba8c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba90:	3b01      	subs	r3, #1
 800ba92:	69b9      	ldr	r1, [r7, #24]
 800ba94:	440b      	add	r3, r1
 800ba96:	7c1b      	ldrb	r3, [r3, #16]
 800ba98:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ba9a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800ba9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba9e:	3a02      	subs	r2, #2
 800baa0:	69b9      	ldr	r1, [r7, #24]
 800baa2:	440a      	add	r2, r1
 800baa4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800baa6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	601a      	str	r2, [r3, #0]
    address--;
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	3b04      	subs	r3, #4
 800bab0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800bab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab4:	3b04      	subs	r3, #4
 800bab6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baba:	2b03      	cmp	r3, #3
 800babc:	d8da      	bhi.n	800ba74 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800babe:	bf00      	nop
 800bac0:	bf00      	nop
 800bac2:	372c      	adds	r7, #44	@ 0x2c
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	ffff0000 	.word	0xffff0000

0800bad0 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800badc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bae8:	f003 0303 	and.w	r3, r3, #3
 800baec:	2b02      	cmp	r3, #2
 800baee:	d108      	bne.n	800bb02 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0208 	orr.w	r2, r2, #8
 800bafe:	605a      	str	r2, [r3, #4]
 800bb00:	e007      	b.n	800bb12 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 0208 	bic.w	r2, r2, #8
 800bb10:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f022 0201 	bic.w	r2, r2, #1
 800bb20:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800bb30:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb40:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb50:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bb60:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f042 0201 	orr.w	r2, r2, #1
 800bb70:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb76:	f003 030c 	and.w	r3, r3, #12
 800bb7a:	2b08      	cmp	r3, #8
 800bb7c:	d108      	bne.n	800bb90 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800bb8c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800bb8e:	e00d      	b.n	800bbac <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb94:	f003 030c 	and.w	r3, r3, #12
 800bb98:	2b0c      	cmp	r3, #12
 800bb9a:	d107      	bne.n	800bbac <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bbaa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbc4:	f003 0303 	and.w	r3, r3, #3
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d125      	bne.n	800bc18 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d01e      	beq.n	800bc18 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7fe ffa7 	bl	800ab34 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff f996 	bl	800af24 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc16:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d116      	bne.n	800bc52 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc2a:	f003 0302 	and.w	r3, r3, #2
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d004      	beq.n	800bc3c <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800bc32:	2108      	movs	r1, #8
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f988 	bl	800bf4a <JPEG_ReadInputData>
 800bc3a:	e00a      	b.n	800bc52 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc42:	f003 0304 	and.w	r3, r3, #4
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f97c 	bl	800bf4a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d116      	bne.n	800bc8c <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc64:	f003 0308 	and.w	r3, r3, #8
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d004      	beq.n	800bc76 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800bc6c:	2108      	movs	r1, #8
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f864 	bl	800bd3c <JPEG_StoreOutputData>
 800bc74:	e00a      	b.n	800bc8c <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc7c:	f003 0310 	and.w	r3, r3, #16
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d003      	beq.n	800bc8c <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800bc84:	2101      	movs	r1, #1
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f858 	bl	800bd3c <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	d14b      	bne.n	800bd32 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f022 0201 	bic.w	r2, r2, #1
 800bca8:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcae:	f003 030c 	and.w	r3, r3, #12
 800bcb2:	2b08      	cmp	r3, #8
 800bcb4:	d107      	bne.n	800bcc6 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800bcc4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bcd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00a      	beq.n	800bcf4 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	69d9      	ldr	r1, [r3, #28]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce6:	461a      	mov	r2, r3
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f7f5 fe61 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcf8:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcfe:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f003 0303 	and.w	r3, r3, #3
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d103      	bne.n	800bd28 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7f5 fe25 	bl	8001970 <HAL_JPEG_DecodeCpltCallback>
 800bd26:	e002      	b.n	800bd2e <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7ff f906 	bl	800af3a <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e000      	b.n	800bd34 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	440b      	add	r3, r1
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d34b      	bcc.n	800bdf0 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	617b      	str	r3, [r7, #20]
 800bd5c:	e031      	b.n	800bdc2 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd64:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	69da      	ldr	r2, [r3, #28]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd6e:	4413      	add	r3, r2
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	b2d2      	uxtb	r2, r2
 800bd74:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	0a19      	lsrs	r1, r3, #8
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	69da      	ldr	r2, [r3, #28]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd82:	3301      	adds	r3, #1
 800bd84:	4413      	add	r3, r2
 800bd86:	b2ca      	uxtb	r2, r1
 800bd88:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	0c19      	lsrs	r1, r3, #16
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	69da      	ldr	r2, [r3, #28]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd96:	3302      	adds	r3, #2
 800bd98:	4413      	add	r3, r2
 800bd9a:	b2ca      	uxtb	r2, r1
 800bd9c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	0e19      	lsrs	r1, r3, #24
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	69da      	ldr	r2, [r3, #28]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdaa:	3303      	adds	r3, #3
 800bdac:	4413      	add	r3, r2
 800bdae:	b2ca      	uxtb	r2, r1
 800bdb0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb6:	1d1a      	adds	r2, r3, #4
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d3c9      	bcc.n	800bd5e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	f040 80b5 	bne.w	800bf42 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	69d9      	ldr	r1, [r3, #28]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde0:	461a      	mov	r2, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7f5 fde4 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800bdee:	e0a8      	b.n	800bf42 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	f240 80a2 	bls.w	800bf42 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	089b      	lsrs	r3, r3, #2
 800be0a:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800be0c:	2300      	movs	r3, #0
 800be0e:	617b      	str	r3, [r7, #20]
 800be10:	e031      	b.n	800be76 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be18:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	69da      	ldr	r2, [r3, #28]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be22:	4413      	add	r3, r2
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	b2d2      	uxtb	r2, r2
 800be28:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	0a19      	lsrs	r1, r3, #8
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	69da      	ldr	r2, [r3, #28]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be36:	3301      	adds	r3, #1
 800be38:	4413      	add	r3, r2
 800be3a:	b2ca      	uxtb	r2, r1
 800be3c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	0c19      	lsrs	r1, r3, #16
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	69da      	ldr	r2, [r3, #28]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be4a:	3302      	adds	r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	b2ca      	uxtb	r2, r1
 800be50:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	0e19      	lsrs	r1, r3, #24
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	69da      	ldr	r2, [r3, #28]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5e:	3303      	adds	r3, #3
 800be60:	4413      	add	r3, r2
 800be62:	b2ca      	uxtb	r2, r1
 800be64:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be6a:	1d1a      	adds	r2, r3, #4
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	3301      	adds	r3, #1
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d3c9      	bcc.n	800be12 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be86:	429a      	cmp	r2, r3
 800be88:	d10b      	bne.n	800bea2 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	69d9      	ldr	r1, [r3, #28]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be92:	461a      	mov	r2, r3
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7f5 fd8b 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800bea0:	e04f      	b.n	800bf42 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beb4:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800beb6:	2300      	movs	r3, #0
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	e015      	b.n	800bee8 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	fa22 f103 	lsr.w	r1, r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	69da      	ldr	r2, [r3, #28]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed2:	4413      	add	r3, r2
 800bed4:	b2ca      	uxtb	r2, r1
 800bed6:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	3301      	adds	r3, #1
 800bee6:	617b      	str	r3, [r7, #20]
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	429a      	cmp	r2, r3
 800beee:	d3e5      	bcc.n	800bebc <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	69d9      	ldr	r1, [r3, #28]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef8:	461a      	mov	r2, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7f5 fd58 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f1c3 0304 	rsb	r3, r3, #4
 800bf0c:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	617b      	str	r3, [r7, #20]
 800bf12:	e013      	b.n	800bf3c <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	fa22 f103 	lsr.w	r1, r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	69da      	ldr	r2, [r3, #28]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf26:	4413      	add	r3, r2
 800bf28:	b2ca      	uxtb	r2, r1
 800bf2a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	617b      	str	r3, [r7, #20]
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d9e8      	bls.n	800bf14 <JPEG_StoreOutputData+0x1d8>
}
 800bf42:	bf00      	nop
 800bf44:	3718      	adds	r7, #24
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b088      	sub	sp, #32
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <JPEG_ReadInputData+0x1c>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d104      	bne.n	800bf70 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800bf66:	2101      	movs	r1, #1
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f7fe fedb 	bl	800ad24 <HAL_JPEG_Pause>
 800bf6e:	e028      	b.n	800bfc2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a1b      	ldr	r3, [r3, #32]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d906      	bls.n	800bf8a <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a1b      	ldr	r3, [r3, #32]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	61fb      	str	r3, [r7, #28]
 800bf88:	e01b      	b.n	800bfc2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d115      	bne.n	800bfc2 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a1b      	ldr	r3, [r3, #32]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7fe ffd6 	bl	800af4e <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa6:	2b04      	cmp	r3, #4
 800bfa8:	d905      	bls.n	800bfb6 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfae:	f023 0203 	bic.w	r2, r3, #3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc0:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f040 809f 	bne.w	800c10e <JPEG_ReadInputData+0x1c4>
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f000 809b 	beq.w	800c10e <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800bfd8:	69fb      	ldr	r3, [r7, #28]
 800bfda:	089b      	lsrs	r3, r3, #2
 800bfdc:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d335      	bcc.n	800c052 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	e02d      	b.n	800c048 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	4413      	add	r3, r2
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	699a      	ldr	r2, [r3, #24]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3301      	adds	r3, #1
 800c006:	4413      	add	r3, r2
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c00c:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6999      	ldr	r1, [r3, #24]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	3302      	adds	r3, #2
 800c018:	440b      	add	r3, r1
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c01e:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	699a      	ldr	r2, [r3, #24]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3303      	adds	r3, #3
 800c02a:	4413      	add	r3, r2
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c034:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c036:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a1b      	ldr	r3, [r3, #32]
 800c03c:	1d1a      	adds	r2, r3, #4
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	3301      	adds	r3, #1
 800c046:	61bb      	str	r3, [r7, #24]
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d3cd      	bcc.n	800bfec <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800c050:	e05d      	b.n	800c10e <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d035      	beq.n	800c0c4 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800c058:	2300      	movs	r3, #0
 800c05a:	61bb      	str	r3, [r7, #24]
 800c05c:	e02d      	b.n	800c0ba <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	699a      	ldr	r2, [r3, #24]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	4413      	add	r3, r2
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	699a      	ldr	r2, [r3, #24]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3301      	adds	r3, #1
 800c078:	4413      	add	r3, r2
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c07e:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6999      	ldr	r1, [r3, #24]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	3302      	adds	r3, #2
 800c08a:	440b      	add	r3, r1
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c090:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	699a      	ldr	r2, [r3, #24]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3303      	adds	r3, #3
 800c09c:	4413      	add	r3, r2
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c0a6:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c0a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	1d1a      	adds	r2, r3, #4
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	61bb      	str	r3, [r7, #24]
 800c0ba:	69ba      	ldr	r2, [r7, #24]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d3cd      	bcc.n	800c05e <JPEG_ReadInputData+0x114>
}
 800c0c2:	e024      	b.n	800c10e <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	61bb      	str	r3, [r7, #24]
 800c0cc:	e017      	b.n	800c0fe <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	699a      	ldr	r2, [r3, #24]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	f003 0303 	and.w	r3, r3, #3
 800c0e2:	00db      	lsls	r3, r3, #3
 800c0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	61bb      	str	r3, [r7, #24]
 800c0fe:	69ba      	ldr	r2, [r7, #24]
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	429a      	cmp	r2, r3
 800c104:	d3e3      	bcc.n	800c0ce <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800c10e:	bf00      	nop
 800c110:	3720      	adds	r7, #32
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
	...

0800c118 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c118:	b590      	push	{r4, r7, lr}
 800c11a:	b087      	sub	sp, #28
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c126:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c12e:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	429a      	cmp	r2, r3
 800c138:	d804      	bhi.n	800c144 <JPEG_DMA_StartProcess+0x2c>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	429a      	cmp	r2, r3
 800c142:	d901      	bls.n	800c148 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	e074      	b.n	800c232 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c14c:	4a3b      	ldr	r2, [pc, #236]	@ (800c23c <JPEG_DMA_StartProcess+0x124>)
 800c14e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c154:	4a3a      	ldr	r2, [pc, #232]	@ (800c240 <JPEG_DMA_StartProcess+0x128>)
 800c156:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c15c:	4a39      	ldr	r2, [pc, #228]	@ (800c244 <JPEG_DMA_StartProcess+0x12c>)
 800c15e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c164:	4a36      	ldr	r2, [pc, #216]	@ (800c240 <JPEG_DMA_StartProcess+0x128>)
 800c166:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c16c:	4a36      	ldr	r2, [pc, #216]	@ (800c248 <JPEG_DMA_StartProcess+0x130>)
 800c16e:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d002      	beq.n	800c17c <JPEG_DMA_StartProcess+0x64>
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d107      	bne.n	800c18c <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c180:	f043 0204 	orr.w	r2, r3, #4
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c188:	2301      	movs	r3, #1
 800c18a:	e052      	b.n	800c232 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c194:	68f9      	ldr	r1, [r7, #12]
 800c196:	fbb3 f1f1 	udiv	r1, r3, r1
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	fb00 f101 	mul.w	r1, r0, r1
 800c1a0:	1a5b      	subs	r3, r3, r1
 800c1a2:	1ad2      	subs	r2, r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	fbb3 f1f1 	udiv	r1, r3, r1
 800c1b6:	68b8      	ldr	r0, [r7, #8]
 800c1b8:	fb00 f101 	mul.w	r1, r0, r1
 800c1bc:	1a5b      	subs	r3, r3, r1
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3344      	adds	r3, #68	@ 0x44
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	69db      	ldr	r3, [r3, #28]
 800c1d4:	461c      	mov	r4, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1da:	2201      	movs	r2, #1
 800c1dc:	9200      	str	r2, [sp, #0]
 800c1de:	4622      	mov	r2, r4
 800c1e0:	f000 fbe2 	bl	800c9a8 <HAL_MDMA_Start_IT>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d007      	beq.n	800c1fa <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1ee:	f043 0204 	orr.w	r2, r3, #4
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e01b      	b.n	800c232 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	699b      	ldr	r3, [r3, #24]
 800c202:	4619      	mov	r1, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	3340      	adds	r3, #64	@ 0x40
 800c20a:	461c      	mov	r4, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c210:	2201      	movs	r2, #1
 800c212:	9200      	str	r2, [sp, #0]
 800c214:	4622      	mov	r2, r4
 800c216:	f000 fbc7 	bl	800c9a8 <HAL_MDMA_Start_IT>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d007      	beq.n	800c230 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c224:	f043 0204 	orr.w	r2, r3, #4
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e000      	b.n	800c232 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	bd90      	pop	{r4, r7, pc}
 800c23a:	bf00      	nop
 800c23c:	0800c54b 	.word	0x0800c54b
 800c240:	0800c739 	.word	0x0800c739
 800c244:	0800c677 	.word	0x0800c677
 800c248:	0800c789 	.word	0x0800c789

0800c24c <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c258:	f003 0303 	and.w	r3, r3, #3
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d125      	bne.n	800c2ac <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d01e      	beq.n	800c2ac <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	3304      	adds	r3, #4
 800c272:	4619      	mov	r1, r3
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7fe fc5d 	bl	800ab34 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3304      	adds	r3, #4
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7fe fe4c 	bl	800af24 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c29a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2aa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2b2:	f003 0320 	and.w	r3, r3, #32
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d039      	beq.n	800c32e <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2be:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f022 0201 	bic.w	r2, r2, #1
 800c2d4:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c2e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c2f4:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b02      	cmp	r3, #2
 800c302:	d104      	bne.n	800c30e <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 fc29 	bl	800cb60 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d105      	bne.n	800c328 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fc1d 	bl	800cb60 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800c326:	e002      	b.n	800c32e <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f804 	bl	800c336 <JPEG_DMA_EndProcess>
}
 800c32e:	bf00      	nop
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	695b      	ldr	r3, [r3, #20]
 800c34a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d10a      	bne.n	800c376 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	69d9      	ldr	r1, [r3, #28]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c368:	461a      	mov	r2, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7f5 fb20 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c37c:	f003 0310 	and.w	r3, r3, #16
 800c380:	2b00      	cmp	r3, #0
 800c382:	d134      	bne.n	800c3ee <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00a      	beq.n	800c3a2 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	69d9      	ldr	r1, [r3, #28]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c394:	461a      	mov	r2, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7f5 fb0a 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f022 0201 	bic.w	r2, r2, #1
 800c3b0:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3b6:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3bc:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f003 0303 	and.w	r3, r3, #3
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d103      	bne.n	800c3e6 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7f5 fac6 	bl	8001970 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800c3e4:	e00c      	b.n	800c400 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7fe fda7 	bl	800af3a <HAL_JPEG_EncodeCpltCallback>
}
 800c3ec:	e008      	b.n	800c400 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f804 	bl	800c408 <JPEG_DMA_PollResidualData>
}
 800c400:	bf00      	nop
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c410:	2310      	movs	r3, #16
 800c412:	617b      	str	r3, [r7, #20]
 800c414:	e04f      	b.n	800c4b6 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c41a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d146      	bne.n	800c4b0 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c428:	f003 0310 	and.w	r3, r3, #16
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d03f      	beq.n	800c4b0 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c436:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	69da      	ldr	r2, [r3, #28]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c440:	4413      	add	r3, r2
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	b2d2      	uxtb	r2, r2
 800c446:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	0a19      	lsrs	r1, r3, #8
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	69da      	ldr	r2, [r3, #28]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c454:	3301      	adds	r3, #1
 800c456:	4413      	add	r3, r2
 800c458:	b2ca      	uxtb	r2, r1
 800c45a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	0c19      	lsrs	r1, r3, #16
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	69da      	ldr	r2, [r3, #28]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c468:	3302      	adds	r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	b2ca      	uxtb	r2, r1
 800c46e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	0e19      	lsrs	r1, r3, #24
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	69da      	ldr	r2, [r3, #28]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47c:	3303      	adds	r3, #3
 800c47e:	4413      	add	r3, r2
 800c480:	b2ca      	uxtb	r2, r1
 800c482:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c488:	1d1a      	adds	r2, r3, #4
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c496:	429a      	cmp	r2, r3
 800c498:	d10a      	bne.n	800c4b0 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	69d9      	ldr	r1, [r3, #28]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7f5 fa83 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	617b      	str	r3, [r7, #20]
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1ac      	bne.n	800c416 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c0:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4c8:	f003 0310 	and.w	r3, r3, #16
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d004      	beq.n	800c4da <JPEG_DMA_PollResidualData+0xd2>
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d133      	bne.n	800c542 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f022 0201 	bic.w	r2, r2, #1
 800c4e8:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00a      	beq.n	800c508 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	69d9      	ldr	r1, [r3, #28]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7f5 fa57 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c50c:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c512:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	f003 0303 	and.w	r3, r3, #3
 800c530:	2b02      	cmp	r3, #2
 800c532:	d103      	bne.n	800c53c <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7f5 fa1b 	bl	8001970 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800c53a:	e002      	b.n	800c542 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7fe fcfc 	bl	800af3a <HAL_JPEG_EncodeCpltCallback>
}
 800c542:	bf00      	nop
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800c54a:	b590      	push	{r4, r7, lr}
 800c54c:	b087      	sub	sp, #28
 800c54e:	af02      	add	r7, sp, #8
 800c550:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c556:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c566:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c56c:	f248 030c 	movw	r3, #32780	@ 0x800c
 800c570:	4013      	ands	r3, r2
 800c572:	2b0c      	cmp	r3, #12
 800c574:	d17c      	bne.n	800c670 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57c:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c58c:	1ad2      	subs	r2, r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	4619      	mov	r1, r3
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f7fe fcd8 	bl	800af4e <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d81f      	bhi.n	800c5e8 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10d      	bne.n	800c5ca <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5b2:	f043 0204 	orr.w	r2, r3, #4
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2206      	movs	r2, #6
 800c5be:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	f7f5 f9e4 	bl	8001990 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800c5c8:	e052      	b.n	800c670 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d2:	68b9      	ldr	r1, [r7, #8]
 800c5d4:	fbb3 f1f1 	udiv	r1, r3, r1
 800c5d8:	68b8      	ldr	r0, [r7, #8]
 800c5da:	fb00 f101 	mul.w	r1, r0, r1
 800c5de:	1a5b      	subs	r3, r3, r1
 800c5e0:	1ad2      	subs	r2, r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	629a      	str	r2, [r3, #40]	@ 0x28
 800c5e6:	e010      	b.n	800c60a <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00c      	beq.n	800c60a <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f4:	f003 0303 	and.w	r3, r3, #3
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d006      	beq.n	800c60a <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c600:	089b      	lsrs	r3, r3, #2
 800c602:	3301      	adds	r3, #1
 800c604:	009a      	lsls	r2, r3, #2
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c60e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d124      	bne.n	800c660 <JPEG_MDMAInCpltCallback+0x116>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d020      	beq.n	800c660 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	4619      	mov	r1, r3
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3340      	adds	r3, #64	@ 0x40
 800c62e:	461c      	mov	r4, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c634:	2201      	movs	r2, #1
 800c636:	9200      	str	r2, [sp, #0]
 800c638:	4622      	mov	r2, r4
 800c63a:	f000 f9b5 	bl	800c9a8 <HAL_MDMA_Start_IT>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00d      	beq.n	800c660 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c648:	f043 0204 	orr.w	r2, r3, #4
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2206      	movs	r2, #6
 800c654:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7f5 f999 	bl	8001990 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800c65e:	e007      	b.n	800c670 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c66e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	bd90      	pop	{r4, r7, pc}

0800c676 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800c676:	b590      	push	{r4, r7, lr}
 800c678:	b087      	sub	sp, #28
 800c67a:	af02      	add	r7, sp, #8
 800c67c:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c682:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c692:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c698:	f248 030c 	movw	r3, #32780	@ 0x800c
 800c69c:	4013      	ands	r3, r2
 800c69e:	2b0c      	cmp	r3, #12
 800c6a0:	d147      	bne.n	800c732 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a8:	f003 0320 	and.w	r3, r3, #32
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d138      	bne.n	800c722 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c6be:	1ad2      	subs	r2, r2, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	69d9      	ldr	r1, [r3, #28]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f7f5 f96e 	bl	80019b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d120      	bne.n	800c722 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3344      	adds	r3, #68	@ 0x44
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	69db      	ldr	r3, [r3, #28]
 800c6f0:	461c      	mov	r4, r3
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	9200      	str	r2, [sp, #0]
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	f000 f954 	bl	800c9a8 <HAL_MDMA_Start_IT>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00d      	beq.n	800c722 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c70a:	f043 0204 	orr.w	r2, r3, #4
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2206      	movs	r2, #6
 800c716:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f7f5 f938 	bl	8001990 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800c720:	e007      	b.n	800c732 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c730:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	bd90      	pop	{r4, r7, pc}

0800c738 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c744:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f022 0201 	bic.w	r2, r2, #1
 800c754:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c764:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2201      	movs	r2, #1
 800c76a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c772:	f043 0204 	orr.w	r2, r3, #4
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f7f5 f908 	bl	8001990 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800c780:	bf00      	nop
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c794:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c79a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d002      	beq.n	800c7a8 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f7ff fdc7 	bl	800c336 <JPEG_DMA_EndProcess>
  }
}
 800c7a8:	bf00      	nop
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b08b      	sub	sp, #44	@ 0x2c
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3350      	adds	r3, #80	@ 0x50
 800c7c2:	61bb      	str	r3, [r7, #24]

  i = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c7c8:	e042      	b.n	800c850 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	61fb      	str	r3, [r7, #28]
 800c7d4:	e033      	b.n	800c83e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d103      	bne.n	800c7f2 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	3364      	adds	r3, #100	@ 0x64
 800c7ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7f0:	e022      	b.n	800c838 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	2264      	movs	r2, #100	@ 0x64
 800c7f6:	fb02 f303 	mul.w	r3, r2, r3
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c7fe:	6a38      	ldr	r0, [r7, #32]
 800c800:	69f9      	ldr	r1, [r7, #28]
 800c802:	4401      	add	r1, r0
 800c804:	4818      	ldr	r0, [pc, #96]	@ (800c868 <JPEG_GetQuality+0xb8>)
 800c806:	5c41      	ldrb	r1, [r0, r1]
 800c808:	440a      	add	r2, r1
 800c80a:	7812      	ldrb	r2, [r2, #0]
 800c80c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c810:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2b64      	cmp	r3, #100	@ 0x64
 800c816:	d807      	bhi.n	800c828 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800c81e:	085b      	lsrs	r3, r3, #1
 800c820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c822:	4413      	add	r3, r2
 800c824:	627b      	str	r3, [r7, #36]	@ 0x24
 800c826:	e007      	b.n	800c838 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800c828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c834:	4413      	add	r3, r2
 800c836:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	3301      	adds	r3, #1
 800c83c:	61fb      	str	r3, [r7, #28]
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	2b03      	cmp	r3, #3
 800c842:	d9c8      	bls.n	800c7d6 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800c844:	6a3b      	ldr	r3, [r7, #32]
 800c846:	3304      	adds	r3, #4
 800c848:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	3304      	adds	r3, #4
 800c84e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800c850:	6a3b      	ldr	r3, [r7, #32]
 800c852:	2b3c      	cmp	r3, #60	@ 0x3c
 800c854:	d9b9      	bls.n	800c7ca <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	099b      	lsrs	r3, r3, #6
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	372c      	adds	r7, #44	@ 0x2c
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	0801b874 	.word	0x0801b874

0800c86c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c874:	f7f6 ff5c 	bl	8003730 <HAL_GetTick>
 800c878:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	e03b      	b.n	800c8fc <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2202      	movs	r2, #2
 800c890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68da      	ldr	r2, [r3, #12]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f022 0201 	bic.w	r2, r2, #1
 800c8a2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c8a4:	e00f      	b.n	800c8c6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800c8a6:	f7f6 ff43 	bl	8003730 <HAL_GetTick>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	2b05      	cmp	r3, #5
 800c8b2:	d908      	bls.n	800c8c6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2240      	movs	r2, #64	@ 0x40
 800c8b8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2203      	movs	r2, #3
 800c8be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e01a      	b.n	800c8fc <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	f003 0301 	and.w	r3, r3, #1
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1e8      	bne.n	800c8a6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 fb2f 	bl	800cf38 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800c904:	b480      	push	{r7}
 800c906:	b087      	sub	sp, #28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d101      	bne.n	800c91e <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800c91a:	2301      	movs	r3, #1
 800c91c:	e03e      	b.n	800c99c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c924:	2b01      	cmp	r3, #1
 800c926:	d101      	bne.n	800c92c <HAL_MDMA_ConfigPostRequestMask+0x28>
 800c928:	2302      	movs	r3, #2
 800c92a:	e037      	b.n	800c99c <HAL_MDMA_ConfigPostRequestMask+0x98>
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d126      	bne.n	800c98e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d11c      	bne.n	800c988 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d108      	bne.n	800c976 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	691a      	ldr	r2, [r3, #16]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c972:	611a      	str	r2, [r3, #16]
 800c974:	e00d      	b.n	800c992 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	691a      	ldr	r2, [r3, #16]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c984:	611a      	str	r2, [r3, #16]
 800c986:	e004      	b.n	800c992 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	75fb      	strb	r3, [r7, #23]
 800c98c:	e001      	b.n	800c992 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2200      	movs	r2, #0
 800c996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	371c      	adds	r7, #28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af02      	add	r7, sp, #8
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d101      	bne.n	800c9c0 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e070      	b.n	800caa2 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d101      	bne.n	800c9ce <HAL_MDMA_Start_IT+0x26>
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	e069      	b.n	800caa2 <HAL_MDMA_Start_IT+0xfa>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d158      	bne.n	800ca94 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2202      	movs	r2, #2
 800c9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68da      	ldr	r2, [r3, #12]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f022 0201 	bic.w	r2, r2, #1
 800c9fe:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	68b9      	ldr	r1, [r7, #8]
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f000 fa24 	bl	800ce58 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68da      	ldr	r2, [r3, #12]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f042 0206 	orr.w	r2, r2, #6
 800ca1e:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d007      	beq.n	800ca38 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68da      	ldr	r2, [r3, #12]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f042 0210 	orr.w	r2, r2, #16
 800ca36:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d007      	beq.n	800ca50 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68da      	ldr	r2, [r3, #12]
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f042 0208 	orr.w	r2, r2, #8
 800ca4e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d007      	beq.n	800ca68 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68da      	ldr	r2, [r3, #12]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f042 0220 	orr.w	r2, r2, #32
 800ca66:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68da      	ldr	r2, [r3, #12]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f042 0201 	orr.w	r2, r2, #1
 800ca76:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca80:	d10e      	bne.n	800caa0 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68da      	ldr	r2, [r3, #12]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ca90:	60da      	str	r2, [r3, #12]
 800ca92:	e005      	b.n	800caa0 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	e000      	b.n	800caa2 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800cab2:	f7f6 fe3d 	bl	8003730 <HAL_GetTick>
 800cab6:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e04a      	b.n	800cb58 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cac8:	b2db      	uxtb	r3, r3
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d008      	beq.n	800cae0 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2280      	movs	r2, #128	@ 0x80
 800cad2:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	e03b      	b.n	800cb58 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68da      	ldr	r2, [r3, #12]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800caee:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68da      	ldr	r2, [r3, #12]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f022 0201 	bic.w	r2, r2, #1
 800cafe:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cb00:	e016      	b.n	800cb30 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800cb02:	f7f6 fe15 	bl	8003730 <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	2b05      	cmp	r3, #5
 800cb0e:	d90f      	bls.n	800cb30 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2203      	movs	r2, #3
 800cb28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e013      	b.n	800cb58 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e1      	bne.n	800cb02 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	221f      	movs	r2, #31
 800cb44:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e017      	b.n	800cba2 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d004      	beq.n	800cb88 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2280      	movs	r2, #128	@ 0x80
 800cb82:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800cb84:	2301      	movs	r3, #1
 800cb86:	e00c      	b.n	800cba2 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2204      	movs	r2, #4
 800cb8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68da      	ldr	r2, [r3, #12]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f022 0201 	bic.w	r2, r2, #1
 800cb9e:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
	...

0800cbb0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cbbc:	4b91      	ldr	r3, [pc, #580]	@ (800ce04 <HAL_MDMA_IRQHandler+0x254>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a91      	ldr	r2, [pc, #580]	@ (800ce08 <HAL_MDMA_IRQHandler+0x258>)
 800cbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc6:	0a9b      	lsrs	r3, r3, #10
 800cbc8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	4b8e      	ldr	r3, [pc, #568]	@ (800ce0c <HAL_MDMA_IRQHandler+0x25c>)
 800cbd2:	4413      	add	r3, r2
 800cbd4:	099b      	lsrs	r3, r3, #6
 800cbd6:	f003 031f 	and.w	r3, r3, #31
 800cbda:	2201      	movs	r2, #1
 800cbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800cbe2:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	4013      	ands	r3, r2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 812d 	beq.w	800ce4c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d054      	beq.n	800ccaa <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	f003 0302 	and.w	r3, r3, #2
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d04d      	beq.n	800ccaa <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68da      	ldr	r2, [r3, #12]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f022 0202 	bic.w	r2, r2, #2
 800cc1c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d106      	bne.n	800cc3e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc34:	f043 0201 	orr.w	r2, r3, #1
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	669a      	str	r2, [r3, #104]	@ 0x68
 800cc3c:	e005      	b.n	800cc4a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc42:	f043 0202 	orr.w	r2, r3, #2
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d005      	beq.n	800cc60 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc58:	f043 0204 	orr.w	r2, r3, #4
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d005      	beq.n	800cc76 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc6e:	f043 0208 	orr.w	r2, r3, #8
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d005      	beq.n	800cc8c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc84:	f043 0210 	orr.w	r2, r3, #16
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d005      	beq.n	800cca2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc9a:	f043 0220 	orr.w	r2, r3, #32
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2201      	movs	r2, #1
 800cca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0310 	and.w	r3, r3, #16
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d012      	beq.n	800ccde <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	f003 0320 	and.w	r3, r3, #32
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00b      	beq.n	800ccde <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2210      	movs	r2, #16
 800cccc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f003 0308 	and.w	r3, r3, #8
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d012      	beq.n	800cd12 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	f003 0310 	and.w	r3, r3, #16
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2208      	movs	r2, #8
 800cd00:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d003      	beq.n	800cd12 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0304 	and.w	r3, r3, #4
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d012      	beq.n	800cd46 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	f003 0308 	and.w	r3, r3, #8
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00b      	beq.n	800cd46 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2204      	movs	r2, #4
 800cd34:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d003      	beq.n	800cd46 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 0302 	and.w	r3, r3, #2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d039      	beq.n	800cdc8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	f003 0304 	and.w	r3, r3, #4
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d032      	beq.n	800cdc8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68da      	ldr	r2, [r3, #12]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800cd70:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b04      	cmp	r3, #4
 800cd7c:	d110      	bne.n	800cda0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d05c      	beq.n	800ce50 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	4798      	blx	r3
        }
        return;
 800cd9e:	e057      	b.n	800ce50 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2202      	movs	r2, #2
 800cda6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d040      	beq.n	800ce52 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2204      	movs	r2, #4
 800cdd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68da      	ldr	r2, [r3, #12]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f022 0201 	bic.w	r2, r2, #1
 800cde6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	3301      	adds	r3, #1
 800cdec:	60bb      	str	r3, [r7, #8]
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d30d      	bcc.n	800ce10 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1f2      	bne.n	800cde8 <HAL_MDMA_IRQHandler+0x238>
 800ce02:	e006      	b.n	800ce12 <HAL_MDMA_IRQHandler+0x262>
 800ce04:	24000240 	.word	0x24000240
 800ce08:	1b4e81b5 	.word	0x1b4e81b5
 800ce0c:	adffffc0 	.word	0xadffffc0
        break;
 800ce10:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	f003 0301 	and.w	r3, r3, #1
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d004      	beq.n	800ce32 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2203      	movs	r2, #3
 800ce2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ce30:	e003      	b.n	800ce3a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2201      	movs	r2, #1
 800ce36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d007      	beq.n	800ce52 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	4798      	blx	r3
 800ce4a:	e002      	b.n	800ce52 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800ce4c:	bf00      	nop
 800ce4e:	e000      	b.n	800ce52 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800ce50:	bf00      	nop
    }
  }
}
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	695a      	ldr	r2, [r3, #20]
 800ce6c:	4b31      	ldr	r3, [pc, #196]	@ (800cf34 <MDMA_SetConfig+0xdc>)
 800ce6e:	4013      	ands	r3, r2
 800ce70:	683a      	ldr	r2, [r7, #0]
 800ce72:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	6812      	ldr	r2, [r2, #0]
 800ce7a:	430b      	orrs	r3, r1
 800ce7c:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	695b      	ldr	r3, [r3, #20]
 800ce84:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	051a      	lsls	r2, r3, #20
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	430a      	orrs	r2, r1
 800ce94:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	221f      	movs	r2, #31
 800ce9c:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ceb4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cebc:	d002      	beq.n	800cec4 <MDMA_SetConfig+0x6c>
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d108      	bne.n	800ced6 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ced2:	629a      	str	r2, [r3, #40]	@ 0x28
 800ced4:	e007      	b.n	800cee6 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800cee4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ceec:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cef4:	d002      	beq.n	800cefc <MDMA_SetConfig+0xa4>
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d108      	bne.n	800cf0e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800cf0a:	629a      	str	r2, [r3, #40]	@ 0x28
 800cf0c:	e007      	b.n	800cf1e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800cf1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800cf28:	bf00      	nop
 800cf2a:	371c      	adds	r7, #28
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	fffe0000 	.word	0xfffe0000

0800cf38 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	68d9      	ldr	r1, [r3, #12]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	691a      	ldr	r2, [r3, #16]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	430a      	orrs	r2, r1
 800cf4e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	695a      	ldr	r2, [r3, #20]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cf5e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a1b      	ldr	r3, [r3, #32]
 800cf64:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800cf6a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf70:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800cf76:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800cf80:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800cf8c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cf8e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf98:	d107      	bne.n	800cfaa <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	691a      	ldr	r2, [r3, #16]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800cfa8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	da11      	bge.n	800cfde <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	695a      	ldr	r2, [r3, #20]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800cfc8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfce:	425b      	negs	r3, r3
 800cfd0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	b292      	uxth	r2, r2
 800cfda:	621a      	str	r2, [r3, #32]
 800cfdc:	e006      	b.n	800cfec <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	b292      	uxth	r2, r2
 800cfea:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	da15      	bge.n	800d020 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	695a      	ldr	r2, [r3, #20]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800d002:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d008:	425b      	negs	r3, r3
 800d00a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6a19      	ldr	r1, [r3, #32]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	041a      	lsls	r2, r3, #16
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	430a      	orrs	r2, r1
 800d01c:	621a      	str	r2, [r3, #32]
 800d01e:	e009      	b.n	800d034 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	6a19      	ldr	r1, [r3, #32]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d02a:	041a      	lsls	r2, r3, #16
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	430a      	orrs	r2, r1
 800d032:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d03c:	d006      	beq.n	800d04c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685a      	ldr	r2, [r3, #4]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	b2d2      	uxtb	r2, r2
 800d048:	629a      	str	r2, [r3, #40]	@ 0x28
 800d04a:	e003      	b.n	800d054 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2200      	movs	r2, #0
 800d052:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2200      	movs	r2, #0
 800d05a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800d05c:	bf00      	nop
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b086      	sub	sp, #24
 800d06c:	af02      	add	r7, sp, #8
 800d06e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e0fe      	b.n	800d278 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	d106      	bne.n	800d094 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f00d f88a 	bl	801a1a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2203      	movs	r2, #3
 800d098:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f008 fd58 	bl	8015b56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6818      	ldr	r0, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	7c1a      	ldrb	r2, [r3, #16]
 800d0ae:	f88d 2000 	strb.w	r2, [sp]
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0b6:	f008 fc29 	bl	801590c <USB_CoreInit>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d005      	beq.n	800d0cc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e0d5      	b.n	800d278 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f008 fd50 	bl	8015b78 <USB_SetCurrentMode>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d005      	beq.n	800d0ea <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e0c6      	b.n	800d278 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	73fb      	strb	r3, [r7, #15]
 800d0ee:	e04a      	b.n	800d186 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d0f0:	7bfa      	ldrb	r2, [r7, #15]
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	4413      	add	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	440b      	add	r3, r1
 800d0fe:	3315      	adds	r3, #21
 800d100:	2201      	movs	r2, #1
 800d102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d104:	7bfa      	ldrb	r2, [r7, #15]
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	4613      	mov	r3, r2
 800d10a:	00db      	lsls	r3, r3, #3
 800d10c:	4413      	add	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	440b      	add	r3, r1
 800d112:	3314      	adds	r3, #20
 800d114:	7bfa      	ldrb	r2, [r7, #15]
 800d116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d118:	7bfa      	ldrb	r2, [r7, #15]
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	b298      	uxth	r0, r3
 800d11e:	6879      	ldr	r1, [r7, #4]
 800d120:	4613      	mov	r3, r2
 800d122:	00db      	lsls	r3, r3, #3
 800d124:	4413      	add	r3, r2
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	440b      	add	r3, r1
 800d12a:	332e      	adds	r3, #46	@ 0x2e
 800d12c:	4602      	mov	r2, r0
 800d12e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d130:	7bfa      	ldrb	r2, [r7, #15]
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	4613      	mov	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	440b      	add	r3, r1
 800d13e:	3318      	adds	r3, #24
 800d140:	2200      	movs	r2, #0
 800d142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d144:	7bfa      	ldrb	r2, [r7, #15]
 800d146:	6879      	ldr	r1, [r7, #4]
 800d148:	4613      	mov	r3, r2
 800d14a:	00db      	lsls	r3, r3, #3
 800d14c:	4413      	add	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	440b      	add	r3, r1
 800d152:	331c      	adds	r3, #28
 800d154:	2200      	movs	r2, #0
 800d156:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d158:	7bfa      	ldrb	r2, [r7, #15]
 800d15a:	6879      	ldr	r1, [r7, #4]
 800d15c:	4613      	mov	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	4413      	add	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	440b      	add	r3, r1
 800d166:	3320      	adds	r3, #32
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d16c:	7bfa      	ldrb	r2, [r7, #15]
 800d16e:	6879      	ldr	r1, [r7, #4]
 800d170:	4613      	mov	r3, r2
 800d172:	00db      	lsls	r3, r3, #3
 800d174:	4413      	add	r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	440b      	add	r3, r1
 800d17a:	3324      	adds	r3, #36	@ 0x24
 800d17c:	2200      	movs	r2, #0
 800d17e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d180:	7bfb      	ldrb	r3, [r7, #15]
 800d182:	3301      	adds	r3, #1
 800d184:	73fb      	strb	r3, [r7, #15]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	791b      	ldrb	r3, [r3, #4]
 800d18a:	7bfa      	ldrb	r2, [r7, #15]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d3af      	bcc.n	800d0f0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d190:	2300      	movs	r3, #0
 800d192:	73fb      	strb	r3, [r7, #15]
 800d194:	e044      	b.n	800d220 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d196:	7bfa      	ldrb	r2, [r7, #15]
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	4613      	mov	r3, r2
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	4413      	add	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	440b      	add	r3, r1
 800d1a4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d1ac:	7bfa      	ldrb	r2, [r7, #15]
 800d1ae:	6879      	ldr	r1, [r7, #4]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	00db      	lsls	r3, r3, #3
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	440b      	add	r3, r1
 800d1ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800d1be:	7bfa      	ldrb	r2, [r7, #15]
 800d1c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d1c2:	7bfa      	ldrb	r2, [r7, #15]
 800d1c4:	6879      	ldr	r1, [r7, #4]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	4413      	add	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	440b      	add	r3, r1
 800d1d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d1d8:	7bfa      	ldrb	r2, [r7, #15]
 800d1da:	6879      	ldr	r1, [r7, #4]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	00db      	lsls	r3, r3, #3
 800d1e0:	4413      	add	r3, r2
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	440b      	add	r3, r1
 800d1e6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d1ee:	7bfa      	ldrb	r2, [r7, #15]
 800d1f0:	6879      	ldr	r1, [r7, #4]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	4413      	add	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	440b      	add	r3, r1
 800d1fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d204:	7bfa      	ldrb	r2, [r7, #15]
 800d206:	6879      	ldr	r1, [r7, #4]
 800d208:	4613      	mov	r3, r2
 800d20a:	00db      	lsls	r3, r3, #3
 800d20c:	4413      	add	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	440b      	add	r3, r1
 800d212:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d216:	2200      	movs	r2, #0
 800d218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
 800d21c:	3301      	adds	r3, #1
 800d21e:	73fb      	strb	r3, [r7, #15]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	791b      	ldrb	r3, [r3, #4]
 800d224:	7bfa      	ldrb	r2, [r7, #15]
 800d226:	429a      	cmp	r2, r3
 800d228:	d3b5      	bcc.n	800d196 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6818      	ldr	r0, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	7c1a      	ldrb	r2, [r3, #16]
 800d232:	f88d 2000 	strb.w	r2, [sp]
 800d236:	3304      	adds	r3, #4
 800d238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d23a:	f008 fce9 	bl	8015c10 <USB_DevInit>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d005      	beq.n	800d250 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2202      	movs	r2, #2
 800d248:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e013      	b.n	800d278 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	7b1b      	ldrb	r3, [r3, #12]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d102      	bne.n	800d26c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f001 f96e 	bl	800e548 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4618      	mov	r0, r3
 800d272:	f009 fd2c 	bl	8016cce <USB_DevDisconnect>

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d294:	2b01      	cmp	r3, #1
 800d296:	d101      	bne.n	800d29c <HAL_PCD_Start+0x1c>
 800d298:	2302      	movs	r3, #2
 800d29a:	e022      	b.n	800d2e2 <HAL_PCD_Start+0x62>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d009      	beq.n	800d2c4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d105      	bne.n	800d2c4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f008 fc33 	bl	8015b34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f009 fcda 	bl	8016c8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d2ea:	b590      	push	{r4, r7, lr}
 800d2ec:	b08d      	sub	sp, #52	@ 0x34
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f8:	6a3b      	ldr	r3, [r7, #32]
 800d2fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4618      	mov	r0, r3
 800d302:	f009 fd98 	bl	8016e36 <USB_GetMode>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f040 84b9 	bne.w	800dc80 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4618      	mov	r0, r3
 800d314:	f009 fcfc 	bl	8016d10 <USB_ReadInterrupts>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f000 84af 	beq.w	800dc7e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	0a1b      	lsrs	r3, r3, #8
 800d32a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f009 fce9 	bl	8016d10 <USB_ReadInterrupts>
 800d33e:	4603      	mov	r3, r0
 800d340:	f003 0302 	and.w	r3, r3, #2
 800d344:	2b02      	cmp	r3, #2
 800d346:	d107      	bne.n	800d358 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	695a      	ldr	r2, [r3, #20]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f002 0202 	and.w	r2, r2, #2
 800d356:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f009 fcd7 	bl	8016d10 <USB_ReadInterrupts>
 800d362:	4603      	mov	r3, r0
 800d364:	f003 0310 	and.w	r3, r3, #16
 800d368:	2b10      	cmp	r3, #16
 800d36a:	d161      	bne.n	800d430 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	699a      	ldr	r2, [r3, #24]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f022 0210 	bic.w	r2, r2, #16
 800d37a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	6a1b      	ldr	r3, [r3, #32]
 800d380:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	f003 020f 	and.w	r2, r3, #15
 800d388:	4613      	mov	r3, r2
 800d38a:	00db      	lsls	r3, r3, #3
 800d38c:	4413      	add	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	4413      	add	r3, r2
 800d398:	3304      	adds	r3, #4
 800d39a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800d3a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d3a6:	d124      	bne.n	800d3f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d035      	beq.n	800d420 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	091b      	lsrs	r3, r3, #4
 800d3bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d3be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	6a38      	ldr	r0, [r7, #32]
 800d3c8:	f009 fb0e 	bl	80169e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	68da      	ldr	r2, [r3, #12]
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	091b      	lsrs	r3, r3, #4
 800d3d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3d8:	441a      	add	r2, r3
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	695a      	ldr	r2, [r3, #20]
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	091b      	lsrs	r3, r3, #4
 800d3e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3ea:	441a      	add	r2, r3
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	615a      	str	r2, [r3, #20]
 800d3f0:	e016      	b.n	800d420 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800d3f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d3fc:	d110      	bne.n	800d420 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d404:	2208      	movs	r2, #8
 800d406:	4619      	mov	r1, r3
 800d408:	6a38      	ldr	r0, [r7, #32]
 800d40a:	f009 faed 	bl	80169e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	695a      	ldr	r2, [r3, #20]
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	091b      	lsrs	r3, r3, #4
 800d416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d41a:	441a      	add	r2, r3
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	699a      	ldr	r2, [r3, #24]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f042 0210 	orr.w	r2, r2, #16
 800d42e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4618      	mov	r0, r3
 800d436:	f009 fc6b 	bl	8016d10 <USB_ReadInterrupts>
 800d43a:	4603      	mov	r3, r0
 800d43c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d440:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d444:	f040 80a7 	bne.w	800d596 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800d448:	2300      	movs	r3, #0
 800d44a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4618      	mov	r0, r3
 800d452:	f009 fc70 	bl	8016d36 <USB_ReadDevAllOutEpInterrupt>
 800d456:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800d458:	e099      	b.n	800d58e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800d45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45c:	f003 0301 	and.w	r3, r3, #1
 800d460:	2b00      	cmp	r3, #0
 800d462:	f000 808e 	beq.w	800d582 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d46c:	b2d2      	uxtb	r2, r2
 800d46e:	4611      	mov	r1, r2
 800d470:	4618      	mov	r0, r3
 800d472:	f009 fc94 	bl	8016d9e <USB_ReadDevOutEPInterrupt>
 800d476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	f003 0301 	and.w	r3, r3, #1
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d00c      	beq.n	800d49c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d484:	015a      	lsls	r2, r3, #5
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	4413      	add	r3, r2
 800d48a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d48e:	461a      	mov	r2, r3
 800d490:	2301      	movs	r3, #1
 800d492:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d494:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 fed0 	bl	800e23c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	f003 0308 	and.w	r3, r3, #8
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00c      	beq.n	800d4c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a8:	015a      	lsls	r2, r3, #5
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	2308      	movs	r3, #8
 800d4b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d4b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 ffa6 	bl	800e40c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	f003 0310 	and.w	r3, r3, #16
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d008      	beq.n	800d4dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4cc:	015a      	lsls	r2, r3, #5
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	2310      	movs	r3, #16
 800d4da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d030      	beq.n	800d548 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	695b      	ldr	r3, [r3, #20]
 800d4ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ee:	2b80      	cmp	r3, #128	@ 0x80
 800d4f0:	d109      	bne.n	800d506 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	69fa      	ldr	r2, [r7, #28]
 800d4fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d500:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d504:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800d506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d508:	4613      	mov	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	4413      	add	r3, r2
 800d518:	3304      	adds	r3, #4
 800d51a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	78db      	ldrb	r3, [r3, #3]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d108      	bne.n	800d536 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	2200      	movs	r2, #0
 800d528:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f00c ff5f 	bl	801a3f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d542:	461a      	mov	r2, r3
 800d544:	2302      	movs	r3, #2
 800d546:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	f003 0320 	and.w	r3, r3, #32
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d008      	beq.n	800d564 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d554:	015a      	lsls	r2, r3, #5
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	4413      	add	r3, r2
 800d55a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d55e:	461a      	mov	r2, r3
 800d560:	2320      	movs	r3, #32
 800d562:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d009      	beq.n	800d582 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	015a      	lsls	r2, r3, #5
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	4413      	add	r3, r2
 800d576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d57a:	461a      	mov	r2, r3
 800d57c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d580:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d584:	3301      	adds	r3, #1
 800d586:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58a:	085b      	lsrs	r3, r3, #1
 800d58c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	2b00      	cmp	r3, #0
 800d592:	f47f af62 	bne.w	800d45a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f009 fbb8 	bl	8016d10 <USB_ReadInterrupts>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d5a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d5aa:	f040 80db 	bne.w	800d764 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f009 fbd9 	bl	8016d6a <USB_ReadDevAllInEpInterrupt>
 800d5b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800d5be:	e0cd      	b.n	800d75c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f000 80c2 	beq.w	800d750 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5d2:	b2d2      	uxtb	r2, r2
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f009 fbff 	bl	8016dda <USB_ReadDevInEPInterrupt>
 800d5dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	f003 0301 	and.w	r3, r3, #1
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d057      	beq.n	800d698 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	f003 030f 	and.w	r3, r3, #15
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	43db      	mvns	r3, r3
 800d602:	69f9      	ldr	r1, [r7, #28]
 800d604:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d608:	4013      	ands	r3, r2
 800d60a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60e:	015a      	lsls	r2, r3, #5
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	4413      	add	r3, r2
 800d614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d618:	461a      	mov	r2, r3
 800d61a:	2301      	movs	r3, #1
 800d61c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	799b      	ldrb	r3, [r3, #6]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d132      	bne.n	800d68c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d626:	6879      	ldr	r1, [r7, #4]
 800d628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d62a:	4613      	mov	r3, r2
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	4413      	add	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	440b      	add	r3, r1
 800d634:	3320      	adds	r3, #32
 800d636:	6819      	ldr	r1, [r3, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d63c:	4613      	mov	r3, r2
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	4413      	add	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	4403      	add	r3, r0
 800d646:	331c      	adds	r3, #28
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4419      	add	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d650:	4613      	mov	r3, r2
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	4413      	add	r3, r2
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	4403      	add	r3, r0
 800d65a:	3320      	adds	r3, #32
 800d65c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d660:	2b00      	cmp	r3, #0
 800d662:	d113      	bne.n	800d68c <HAL_PCD_IRQHandler+0x3a2>
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d668:	4613      	mov	r3, r2
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	4413      	add	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	440b      	add	r3, r1
 800d672:	3324      	adds	r3, #36	@ 0x24
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d108      	bne.n	800d68c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6818      	ldr	r0, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d684:	461a      	mov	r2, r3
 800d686:	2101      	movs	r1, #1
 800d688:	f009 fc08 	bl	8016e9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f00c fe29 	bl	801a2ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	f003 0308 	and.w	r3, r3, #8
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d008      	beq.n	800d6b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a4:	015a      	lsls	r2, r3, #5
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	f003 0310 	and.w	r3, r3, #16
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d008      	beq.n	800d6d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	015a      	lsls	r2, r3, #5
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	2310      	movs	r3, #16
 800d6ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d008      	beq.n	800d6ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6dc:	015a      	lsls	r2, r3, #5
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	2340      	movs	r3, #64	@ 0x40
 800d6ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	f003 0302 	and.w	r3, r3, #2
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d023      	beq.n	800d73e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d6f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d6f8:	6a38      	ldr	r0, [r7, #32]
 800d6fa:	f008 fbe7 	bl	8015ecc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800d6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d700:	4613      	mov	r3, r2
 800d702:	00db      	lsls	r3, r3, #3
 800d704:	4413      	add	r3, r2
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	3310      	adds	r3, #16
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	4413      	add	r3, r2
 800d70e:	3304      	adds	r3, #4
 800d710:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	78db      	ldrb	r3, [r3, #3]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d108      	bne.n	800d72c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	2200      	movs	r2, #0
 800d71e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d722:	b2db      	uxtb	r3, r3
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f00c fe76 	bl	801a418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d738:	461a      	mov	r2, r3
 800d73a:	2302      	movs	r3, #2
 800d73c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d744:	2b00      	cmp	r3, #0
 800d746:	d003      	beq.n	800d750 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fcea 	bl	800e124 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d752:	3301      	adds	r3, #1
 800d754:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d758:	085b      	lsrs	r3, r3, #1
 800d75a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f47f af2e 	bne.w	800d5c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4618      	mov	r0, r3
 800d76a:	f009 fad1 	bl	8016d10 <USB_ReadInterrupts>
 800d76e:	4603      	mov	r3, r0
 800d770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d778:	d122      	bne.n	800d7c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	69fa      	ldr	r2, [r7, #28]
 800d784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d788:	f023 0301 	bic.w	r3, r3, #1
 800d78c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800d794:	2b01      	cmp	r3, #1
 800d796:	d108      	bne.n	800d7aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fef4 	bl	800e590 <HAL_PCDEx_LPM_Callback>
 800d7a8:	e002      	b.n	800d7b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f00c fe14 	bl	801a3d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	695a      	ldr	r2, [r3, #20]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800d7be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f009 faa3 	bl	8016d10 <USB_ReadInterrupts>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7d4:	d112      	bne.n	800d7fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f003 0301 	and.w	r3, r3, #1
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d102      	bne.n	800d7ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f00c fdd0 	bl	801a38c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	695a      	ldr	r2, [r3, #20]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800d7fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4618      	mov	r0, r3
 800d802:	f009 fa85 	bl	8016d10 <USB_ReadInterrupts>
 800d806:	4603      	mov	r3, r0
 800d808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d80c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d810:	d121      	bne.n	800d856 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	695a      	ldr	r2, [r3, #20]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800d820:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d111      	bne.n	800d850 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d83a:	089b      	lsrs	r3, r3, #2
 800d83c:	f003 020f 	and.w	r2, r3, #15
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d846:	2101      	movs	r1, #1
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fea1 	bl	800e590 <HAL_PCDEx_LPM_Callback>
 800d84e:	e002      	b.n	800d856 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f00c fd9b 	bl	801a38c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f009 fa58 	bl	8016d10 <USB_ReadInterrupts>
 800d860:	4603      	mov	r3, r0
 800d862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d86a:	f040 80b7 	bne.w	800d9dc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	69fa      	ldr	r2, [r7, #28]
 800d878:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d87c:	f023 0301 	bic.w	r3, r3, #1
 800d880:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2110      	movs	r1, #16
 800d888:	4618      	mov	r0, r3
 800d88a:	f008 fb1f 	bl	8015ecc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d88e:	2300      	movs	r3, #0
 800d890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d892:	e046      	b.n	800d922 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d896:	015a      	lsls	r2, r3, #5
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	4413      	add	r3, r2
 800d89c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d8a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8aa:	015a      	lsls	r2, r3, #5
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8b8:	0151      	lsls	r1, r2, #5
 800d8ba:	69fa      	ldr	r2, [r7, #28]
 800d8bc:	440a      	add	r2, r1
 800d8be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d8c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d8c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ca:	015a      	lsls	r2, r3, #5
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d8da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8de:	015a      	lsls	r2, r3, #5
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ec:	0151      	lsls	r1, r2, #5
 800d8ee:	69fa      	ldr	r2, [r7, #28]
 800d8f0:	440a      	add	r2, r1
 800d8f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d8fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fe:	015a      	lsls	r2, r3, #5
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	4413      	add	r3, r2
 800d904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d90c:	0151      	lsls	r1, r2, #5
 800d90e:	69fa      	ldr	r2, [r7, #28]
 800d910:	440a      	add	r2, r1
 800d912:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d916:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d91a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91e:	3301      	adds	r3, #1
 800d920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	791b      	ldrb	r3, [r3, #4]
 800d926:	461a      	mov	r2, r3
 800d928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d3b2      	bcc.n	800d894 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d934:	69db      	ldr	r3, [r3, #28]
 800d936:	69fa      	ldr	r2, [r7, #28]
 800d938:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d93c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800d940:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	7bdb      	ldrb	r3, [r3, #15]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d016      	beq.n	800d978 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d954:	69fa      	ldr	r2, [r7, #28]
 800d956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d95a:	f043 030b 	orr.w	r3, r3, #11
 800d95e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d96a:	69fa      	ldr	r2, [r7, #28]
 800d96c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d970:	f043 030b 	orr.w	r3, r3, #11
 800d974:	6453      	str	r3, [r2, #68]	@ 0x44
 800d976:	e015      	b.n	800d9a4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d97e:	695a      	ldr	r2, [r3, #20]
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d986:	4619      	mov	r1, r3
 800d988:	f242 032b 	movw	r3, #8235	@ 0x202b
 800d98c:	4313      	orrs	r3, r2
 800d98e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	69fa      	ldr	r2, [r7, #28]
 800d99a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d99e:	f043 030b 	orr.w	r3, r3, #11
 800d9a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	69fa      	ldr	r2, [r7, #28]
 800d9ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d9b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800d9b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6818      	ldr	r0, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f009 fa68 	bl	8016e9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	695a      	ldr	r2, [r3, #20]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800d9da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f009 f995 	bl	8016d10 <USB_ReadInterrupts>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d9ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9f0:	d123      	bne.n	800da3a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f009 fa2c 	bl	8016e54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4618      	mov	r0, r3
 800da02:	f008 fadc 	bl	8015fbe <USB_GetDevSpeed>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681c      	ldr	r4, [r3, #0]
 800da12:	f001 fd9d 	bl	800f550 <HAL_RCC_GetHCLKFreq>
 800da16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800da1c:	461a      	mov	r2, r3
 800da1e:	4620      	mov	r0, r4
 800da20:	f007 ffe6 	bl	80159f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f00c fc88 	bl	801a33a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	695a      	ldr	r2, [r3, #20]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800da38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4618      	mov	r0, r3
 800da40:	f009 f966 	bl	8016d10 <USB_ReadInterrupts>
 800da44:	4603      	mov	r3, r0
 800da46:	f003 0308 	and.w	r3, r3, #8
 800da4a:	2b08      	cmp	r3, #8
 800da4c:	d10a      	bne.n	800da64 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f00c fc65 	bl	801a31e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	695a      	ldr	r2, [r3, #20]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f002 0208 	and.w	r2, r2, #8
 800da62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4618      	mov	r0, r3
 800da6a:	f009 f951 	bl	8016d10 <USB_ReadInterrupts>
 800da6e:	4603      	mov	r3, r0
 800da70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da74:	2b80      	cmp	r3, #128	@ 0x80
 800da76:	d123      	bne.n	800dac0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	699b      	ldr	r3, [r3, #24]
 800da7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800da84:	2301      	movs	r3, #1
 800da86:	627b      	str	r3, [r7, #36]	@ 0x24
 800da88:	e014      	b.n	800dab4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800da8a:	6879      	ldr	r1, [r7, #4]
 800da8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da8e:	4613      	mov	r3, r2
 800da90:	00db      	lsls	r3, r3, #3
 800da92:	4413      	add	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	440b      	add	r3, r1
 800da98:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d105      	bne.n	800daae <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800daa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f000 fb0a 	bl	800e0c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800daae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab0:	3301      	adds	r3, #1
 800dab2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	791b      	ldrb	r3, [r3, #4]
 800dab8:	461a      	mov	r2, r3
 800daba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d3e4      	bcc.n	800da8a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f009 f923 	bl	8016d10 <USB_ReadInterrupts>
 800daca:	4603      	mov	r3, r0
 800dacc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dad0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dad4:	d13c      	bne.n	800db50 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dad6:	2301      	movs	r3, #1
 800dad8:	627b      	str	r3, [r7, #36]	@ 0x24
 800dada:	e02b      	b.n	800db34 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800dadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dade:	015a      	lsls	r2, r3, #5
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	4413      	add	r3, r2
 800dae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800daec:	6879      	ldr	r1, [r7, #4]
 800daee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daf0:	4613      	mov	r3, r2
 800daf2:	00db      	lsls	r3, r3, #3
 800daf4:	4413      	add	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	440b      	add	r3, r1
 800dafa:	3318      	adds	r3, #24
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d115      	bne.n	800db2e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800db02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800db04:	2b00      	cmp	r3, #0
 800db06:	da12      	bge.n	800db2e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db0c:	4613      	mov	r3, r2
 800db0e:	00db      	lsls	r3, r3, #3
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	440b      	add	r3, r1
 800db16:	3317      	adds	r3, #23
 800db18:	2201      	movs	r2, #1
 800db1a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800db1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db24:	b2db      	uxtb	r3, r3
 800db26:	4619      	mov	r1, r3
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 faca 	bl	800e0c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800db2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db30:	3301      	adds	r3, #1
 800db32:	627b      	str	r3, [r7, #36]	@ 0x24
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	791b      	ldrb	r3, [r3, #4]
 800db38:	461a      	mov	r2, r3
 800db3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d3cd      	bcc.n	800dadc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	695a      	ldr	r2, [r3, #20]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800db4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4618      	mov	r0, r3
 800db56:	f009 f8db 	bl	8016d10 <USB_ReadInterrupts>
 800db5a:	4603      	mov	r3, r0
 800db5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800db60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db64:	d156      	bne.n	800dc14 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800db66:	2301      	movs	r3, #1
 800db68:	627b      	str	r3, [r7, #36]	@ 0x24
 800db6a:	e045      	b.n	800dbf8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800db6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db6e:	015a      	lsls	r2, r3, #5
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	4413      	add	r3, r2
 800db74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800db7c:	6879      	ldr	r1, [r7, #4]
 800db7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db80:	4613      	mov	r3, r2
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	4413      	add	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	440b      	add	r3, r1
 800db8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	2b01      	cmp	r3, #1
 800db92:	d12e      	bne.n	800dbf2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800db94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800db96:	2b00      	cmp	r3, #0
 800db98:	da2b      	bge.n	800dbf2 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	0c1a      	lsrs	r2, r3, #16
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800dba4:	4053      	eors	r3, r2
 800dba6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d121      	bne.n	800dbf2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800dbae:	6879      	ldr	r1, [r7, #4]
 800dbb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	00db      	lsls	r3, r3, #3
 800dbb6:	4413      	add	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	440b      	add	r3, r1
 800dbbc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	699b      	ldr	r3, [r3, #24]
 800dbc8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800dbd0:	6a3b      	ldr	r3, [r7, #32]
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10a      	bne.n	800dbf2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	69fa      	ldr	r2, [r7, #28]
 800dbe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dbee:	6053      	str	r3, [r2, #4]
            break;
 800dbf0:	e008      	b.n	800dc04 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	791b      	ldrb	r3, [r3, #4]
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d3b3      	bcc.n	800db6c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	695a      	ldr	r2, [r3, #20]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800dc12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f009 f879 	bl	8016d10 <USB_ReadInterrupts>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dc24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc28:	d10a      	bne.n	800dc40 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f00c fc06 	bl	801a43c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	695a      	ldr	r2, [r3, #20]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800dc3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4618      	mov	r0, r3
 800dc46:	f009 f863 	bl	8016d10 <USB_ReadInterrupts>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	f003 0304 	and.w	r3, r3, #4
 800dc50:	2b04      	cmp	r3, #4
 800dc52:	d115      	bne.n	800dc80 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	f003 0304 	and.w	r3, r3, #4
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d002      	beq.n	800dc6c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f00c fbf6 	bl	801a458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6859      	ldr	r1, [r3, #4]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	69ba      	ldr	r2, [r7, #24]
 800dc78:	430a      	orrs	r2, r1
 800dc7a:	605a      	str	r2, [r3, #4]
 800dc7c:	e000      	b.n	800dc80 <HAL_PCD_IRQHandler+0x996>
      return;
 800dc7e:	bf00      	nop
    }
  }
}
 800dc80:	3734      	adds	r7, #52	@ 0x34
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd90      	pop	{r4, r7, pc}

0800dc86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b082      	sub	sp, #8
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	460b      	mov	r3, r1
 800dc90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d101      	bne.n	800dca0 <HAL_PCD_SetAddress+0x1a>
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	e012      	b.n	800dcc6 <HAL_PCD_SetAddress+0x40>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	78fa      	ldrb	r2, [r7, #3]
 800dcac:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	78fa      	ldrb	r2, [r7, #3]
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f008 ffc2 	bl	8016c40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	4608      	mov	r0, r1
 800dcd8:	4611      	mov	r1, r2
 800dcda:	461a      	mov	r2, r3
 800dcdc:	4603      	mov	r3, r0
 800dcde:	70fb      	strb	r3, [r7, #3]
 800dce0:	460b      	mov	r3, r1
 800dce2:	803b      	strh	r3, [r7, #0]
 800dce4:	4613      	mov	r3, r2
 800dce6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dcec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	da0f      	bge.n	800dd14 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dcf4:	78fb      	ldrb	r3, [r7, #3]
 800dcf6:	f003 020f 	and.w	r2, r3, #15
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	00db      	lsls	r3, r3, #3
 800dcfe:	4413      	add	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	3310      	adds	r3, #16
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	4413      	add	r3, r2
 800dd08:	3304      	adds	r3, #4
 800dd0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	705a      	strb	r2, [r3, #1]
 800dd12:	e00f      	b.n	800dd34 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dd14:	78fb      	ldrb	r3, [r7, #3]
 800dd16:	f003 020f 	and.w	r2, r3, #15
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	00db      	lsls	r3, r3, #3
 800dd1e:	4413      	add	r3, r2
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	4413      	add	r3, r2
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800dd34:	78fb      	ldrb	r3, [r7, #3]
 800dd36:	f003 030f 	and.w	r3, r3, #15
 800dd3a:	b2da      	uxtb	r2, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800dd40:	883b      	ldrh	r3, [r7, #0]
 800dd42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	78ba      	ldrb	r2, [r7, #2]
 800dd4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	785b      	ldrb	r3, [r3, #1]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d004      	beq.n	800dd62 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800dd62:	78bb      	ldrb	r3, [r7, #2]
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d102      	bne.n	800dd6e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d101      	bne.n	800dd7c <HAL_PCD_EP_Open+0xae>
 800dd78:	2302      	movs	r3, #2
 800dd7a:	e00e      	b.n	800dd9a <HAL_PCD_EP_Open+0xcc>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68f9      	ldr	r1, [r7, #12]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f008 f93c 	bl	8016008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800dd98:	7afb      	ldrb	r3, [r7, #11]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ddae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	da0f      	bge.n	800ddd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ddb6:	78fb      	ldrb	r3, [r7, #3]
 800ddb8:	f003 020f 	and.w	r2, r3, #15
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	00db      	lsls	r3, r3, #3
 800ddc0:	4413      	add	r3, r2
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	3310      	adds	r3, #16
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	4413      	add	r3, r2
 800ddca:	3304      	adds	r3, #4
 800ddcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	705a      	strb	r2, [r3, #1]
 800ddd4:	e00f      	b.n	800ddf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ddd6:	78fb      	ldrb	r3, [r7, #3]
 800ddd8:	f003 020f 	and.w	r2, r3, #15
 800dddc:	4613      	mov	r3, r2
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	4413      	add	r3, r2
 800ddec:	3304      	adds	r3, #4
 800ddee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ddf6:	78fb      	ldrb	r3, [r7, #3]
 800ddf8:	f003 030f 	and.w	r3, r3, #15
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d101      	bne.n	800de10 <HAL_PCD_EP_Close+0x6e>
 800de0c:	2302      	movs	r3, #2
 800de0e:	e00e      	b.n	800de2e <HAL_PCD_EP_Close+0x8c>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	68f9      	ldr	r1, [r7, #12]
 800de1e:	4618      	mov	r0, r3
 800de20:	f008 f97a 	bl	8016118 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b086      	sub	sp, #24
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	607a      	str	r2, [r7, #4]
 800de40:	603b      	str	r3, [r7, #0]
 800de42:	460b      	mov	r3, r1
 800de44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800de46:	7afb      	ldrb	r3, [r7, #11]
 800de48:	f003 020f 	and.w	r2, r3, #15
 800de4c:	4613      	mov	r3, r2
 800de4e:	00db      	lsls	r3, r3, #3
 800de50:	4413      	add	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	4413      	add	r3, r2
 800de5c:	3304      	adds	r3, #4
 800de5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2200      	movs	r2, #0
 800de70:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2200      	movs	r2, #0
 800de76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800de78:	7afb      	ldrb	r3, [r7, #11]
 800de7a:	f003 030f 	and.w	r3, r3, #15
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	799b      	ldrb	r3, [r3, #6]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d102      	bne.n	800de92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6818      	ldr	r0, [r3, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	799b      	ldrb	r3, [r3, #6]
 800de9a:	461a      	mov	r2, r3
 800de9c:	6979      	ldr	r1, [r7, #20]
 800de9e:	f008 fa17 	bl	80162d0 <USB_EPStartXfer>

  return HAL_OK;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3718      	adds	r7, #24
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	460b      	mov	r3, r1
 800deb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800deb8:	78fb      	ldrb	r3, [r7, #3]
 800deba:	f003 020f 	and.w	r2, r3, #15
 800debe:	6879      	ldr	r1, [r7, #4]
 800dec0:	4613      	mov	r3, r2
 800dec2:	00db      	lsls	r3, r3, #3
 800dec4:	4413      	add	r3, r2
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	440b      	add	r3, r1
 800deca:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800dece:	681b      	ldr	r3, [r3, #0]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	607a      	str	r2, [r7, #4]
 800dee6:	603b      	str	r3, [r7, #0]
 800dee8:	460b      	mov	r3, r1
 800deea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800deec:	7afb      	ldrb	r3, [r7, #11]
 800deee:	f003 020f 	and.w	r2, r3, #15
 800def2:	4613      	mov	r3, r2
 800def4:	00db      	lsls	r3, r3, #3
 800def6:	4413      	add	r3, r2
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	3310      	adds	r3, #16
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	4413      	add	r3, r2
 800df00:	3304      	adds	r3, #4
 800df02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	683a      	ldr	r2, [r7, #0]
 800df0e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2200      	movs	r2, #0
 800df14:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2201      	movs	r2, #1
 800df1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800df1c:	7afb      	ldrb	r3, [r7, #11]
 800df1e:	f003 030f 	and.w	r3, r3, #15
 800df22:	b2da      	uxtb	r2, r3
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	799b      	ldrb	r3, [r3, #6]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d102      	bne.n	800df36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6818      	ldr	r0, [r3, #0]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	799b      	ldrb	r3, [r3, #6]
 800df3e:	461a      	mov	r2, r3
 800df40:	6979      	ldr	r1, [r7, #20]
 800df42:	f008 f9c5 	bl	80162d0 <USB_EPStartXfer>

  return HAL_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3718      	adds	r7, #24
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800df5c:	78fb      	ldrb	r3, [r7, #3]
 800df5e:	f003 030f 	and.w	r3, r3, #15
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	7912      	ldrb	r2, [r2, #4]
 800df66:	4293      	cmp	r3, r2
 800df68:	d901      	bls.n	800df6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e04f      	b.n	800e00e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800df6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df72:	2b00      	cmp	r3, #0
 800df74:	da0f      	bge.n	800df96 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800df76:	78fb      	ldrb	r3, [r7, #3]
 800df78:	f003 020f 	and.w	r2, r3, #15
 800df7c:	4613      	mov	r3, r2
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	4413      	add	r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	3310      	adds	r3, #16
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	4413      	add	r3, r2
 800df8a:	3304      	adds	r3, #4
 800df8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2201      	movs	r2, #1
 800df92:	705a      	strb	r2, [r3, #1]
 800df94:	e00d      	b.n	800dfb2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800df96:	78fa      	ldrb	r2, [r7, #3]
 800df98:	4613      	mov	r3, r2
 800df9a:	00db      	lsls	r3, r3, #3
 800df9c:	4413      	add	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dfb8:	78fb      	ldrb	r3, [r7, #3]
 800dfba:	f003 030f 	and.w	r3, r3, #15
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d101      	bne.n	800dfd2 <HAL_PCD_EP_SetStall+0x82>
 800dfce:	2302      	movs	r3, #2
 800dfd0:	e01d      	b.n	800e00e <HAL_PCD_EP_SetStall+0xbe>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68f9      	ldr	r1, [r7, #12]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f008 fd59 	bl	8016a98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dfe6:	78fb      	ldrb	r3, [r7, #3]
 800dfe8:	f003 030f 	and.w	r3, r3, #15
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d109      	bne.n	800e004 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6818      	ldr	r0, [r3, #0]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	7999      	ldrb	r1, [r3, #6]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dffe:	461a      	mov	r2, r3
 800e000:	f008 ff4c 	bl	8016e9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	460b      	mov	r3, r1
 800e020:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e022:	78fb      	ldrb	r3, [r7, #3]
 800e024:	f003 030f 	and.w	r3, r3, #15
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	7912      	ldrb	r2, [r2, #4]
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d901      	bls.n	800e034 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e030:	2301      	movs	r3, #1
 800e032:	e042      	b.n	800e0ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	da0f      	bge.n	800e05c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e03c:	78fb      	ldrb	r3, [r7, #3]
 800e03e:	f003 020f 	and.w	r2, r3, #15
 800e042:	4613      	mov	r3, r2
 800e044:	00db      	lsls	r3, r3, #3
 800e046:	4413      	add	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	3310      	adds	r3, #16
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	4413      	add	r3, r2
 800e050:	3304      	adds	r3, #4
 800e052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2201      	movs	r2, #1
 800e058:	705a      	strb	r2, [r3, #1]
 800e05a:	e00f      	b.n	800e07c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e05c:	78fb      	ldrb	r3, [r7, #3]
 800e05e:	f003 020f 	and.w	r2, r3, #15
 800e062:	4613      	mov	r3, r2
 800e064:	00db      	lsls	r3, r3, #3
 800e066:	4413      	add	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	4413      	add	r3, r2
 800e072:	3304      	adds	r3, #4
 800e074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e082:	78fb      	ldrb	r3, [r7, #3]
 800e084:	f003 030f 	and.w	r3, r3, #15
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e094:	2b01      	cmp	r3, #1
 800e096:	d101      	bne.n	800e09c <HAL_PCD_EP_ClrStall+0x86>
 800e098:	2302      	movs	r3, #2
 800e09a:	e00e      	b.n	800e0ba <HAL_PCD_EP_ClrStall+0xa4>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68f9      	ldr	r1, [r7, #12]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f008 fd62 	bl	8016b74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b084      	sub	sp, #16
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800e0ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	da0c      	bge.n	800e0f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e0d6:	78fb      	ldrb	r3, [r7, #3]
 800e0d8:	f003 020f 	and.w	r2, r3, #15
 800e0dc:	4613      	mov	r3, r2
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	4413      	add	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	3310      	adds	r3, #16
 800e0e6:	687a      	ldr	r2, [r7, #4]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	60fb      	str	r3, [r7, #12]
 800e0ee:	e00c      	b.n	800e10a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e0f0:	78fb      	ldrb	r3, [r7, #3]
 800e0f2:	f003 020f 	and.w	r2, r3, #15
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	00db      	lsls	r3, r3, #3
 800e0fa:	4413      	add	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	4413      	add	r3, r2
 800e106:	3304      	adds	r3, #4
 800e108:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	68f9      	ldr	r1, [r7, #12]
 800e110:	4618      	mov	r0, r3
 800e112:	f008 fb81 	bl	8016818 <USB_EPStopXfer>
 800e116:	4603      	mov	r3, r0
 800e118:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e11a:	7afb      	ldrb	r3, [r7, #11]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b08a      	sub	sp, #40	@ 0x28
 800e128:	af02      	add	r7, sp, #8
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	4613      	mov	r3, r2
 800e13c:	00db      	lsls	r3, r3, #3
 800e13e:	4413      	add	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	3310      	adds	r3, #16
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	4413      	add	r3, r2
 800e148:	3304      	adds	r3, #4
 800e14a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	695a      	ldr	r2, [r3, #20]
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	691b      	ldr	r3, [r3, #16]
 800e154:	429a      	cmp	r2, r3
 800e156:	d901      	bls.n	800e15c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e158:	2301      	movs	r3, #1
 800e15a:	e06b      	b.n	800e234 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	691a      	ldr	r2, [r3, #16]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	695b      	ldr	r3, [r3, #20]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	69fa      	ldr	r2, [r7, #28]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d902      	bls.n	800e178 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	3303      	adds	r3, #3
 800e17c:	089b      	lsrs	r3, r3, #2
 800e17e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e180:	e02a      	b.n	800e1d8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	691a      	ldr	r2, [r3, #16]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	695b      	ldr	r3, [r3, #20]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	69fa      	ldr	r2, [r7, #28]
 800e194:	429a      	cmp	r2, r3
 800e196:	d902      	bls.n	800e19e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	3303      	adds	r3, #3
 800e1a2:	089b      	lsrs	r3, r3, #2
 800e1a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	68d9      	ldr	r1, [r3, #12]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e1b6:	9300      	str	r3, [sp, #0]
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	6978      	ldr	r0, [r7, #20]
 800e1bc:	f008 fbd6 	bl	801696c <USB_WritePacket>

    ep->xfer_buff  += len;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	68da      	ldr	r2, [r3, #12]
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	441a      	add	r2, r3
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	695a      	ldr	r2, [r3, #20]
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	441a      	add	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	015a      	lsls	r2, r3, #5
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	4413      	add	r3, r2
 800e1e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1e4:	699b      	ldr	r3, [r3, #24]
 800e1e6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e1e8:	69ba      	ldr	r2, [r7, #24]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d809      	bhi.n	800e202 <PCD_WriteEmptyTxFifo+0xde>
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	695a      	ldr	r2, [r3, #20]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d203      	bcs.n	800e202 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	691b      	ldr	r3, [r3, #16]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1bf      	bne.n	800e182 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	691a      	ldr	r2, [r3, #16]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d811      	bhi.n	800e232 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	f003 030f 	and.w	r3, r3, #15
 800e214:	2201      	movs	r2, #1
 800e216:	fa02 f303 	lsl.w	r3, r2, r3
 800e21a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	43db      	mvns	r3, r3
 800e228:	6939      	ldr	r1, [r7, #16]
 800e22a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e22e:	4013      	ands	r3, r2
 800e230:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3720      	adds	r7, #32
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	333c      	adds	r3, #60	@ 0x3c
 800e254:	3304      	adds	r3, #4
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	015a      	lsls	r2, r3, #5
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	4413      	add	r3, r2
 800e262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	799b      	ldrb	r3, [r3, #6]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d17b      	bne.n	800e36a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	f003 0308 	and.w	r3, r3, #8
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d015      	beq.n	800e2a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	4a61      	ldr	r2, [pc, #388]	@ (800e404 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e280:	4293      	cmp	r3, r2
 800e282:	f240 80b9 	bls.w	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 80b3 	beq.w	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	015a      	lsls	r2, r3, #5
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	4413      	add	r3, r2
 800e29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e29e:	461a      	mov	r2, r3
 800e2a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2a4:	6093      	str	r3, [r2, #8]
 800e2a6:	e0a7      	b.n	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	f003 0320 	and.w	r3, r3, #32
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d009      	beq.n	800e2c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	015a      	lsls	r2, r3, #5
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2be:	461a      	mov	r2, r3
 800e2c0:	2320      	movs	r3, #32
 800e2c2:	6093      	str	r3, [r2, #8]
 800e2c4:	e098      	b.n	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f040 8093 	bne.w	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	4a4b      	ldr	r2, [pc, #300]	@ (800e404 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d90f      	bls.n	800e2fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00a      	beq.n	800e2fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	015a      	lsls	r2, r3, #5
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	4413      	add	r3, r2
 800e2ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2f6:	6093      	str	r3, [r2, #8]
 800e2f8:	e07e      	b.n	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	00db      	lsls	r3, r3, #3
 800e300:	4413      	add	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	4413      	add	r3, r2
 800e30c:	3304      	adds	r3, #4
 800e30e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6a1a      	ldr	r2, [r3, #32]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	0159      	lsls	r1, r3, #5
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	440b      	add	r3, r1
 800e31c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e326:	1ad2      	subs	r2, r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d114      	bne.n	800e35c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d109      	bne.n	800e34e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e344:	461a      	mov	r2, r3
 800e346:	2101      	movs	r1, #1
 800e348:	f008 fda8 	bl	8016e9c <USB_EP0_OutStart>
 800e34c:	e006      	b.n	800e35c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	695b      	ldr	r3, [r3, #20]
 800e356:	441a      	add	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	4619      	mov	r1, r3
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f00b ffa6 	bl	801a2b4 <HAL_PCD_DataOutStageCallback>
 800e368:	e046      	b.n	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	4a26      	ldr	r2, [pc, #152]	@ (800e408 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d124      	bne.n	800e3bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00a      	beq.n	800e392 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	015a      	lsls	r2, r3, #5
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	4413      	add	r3, r2
 800e384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e388:	461a      	mov	r2, r3
 800e38a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e38e:	6093      	str	r3, [r2, #8]
 800e390:	e032      	b.n	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	f003 0320 	and.w	r3, r3, #32
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d008      	beq.n	800e3ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	015a      	lsls	r2, r3, #5
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	2320      	movs	r3, #32
 800e3ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f00b ff7d 	bl	801a2b4 <HAL_PCD_DataOutStageCallback>
 800e3ba:	e01d      	b.n	800e3f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d114      	bne.n	800e3ec <PCD_EP_OutXfrComplete_int+0x1b0>
 800e3c2:	6879      	ldr	r1, [r7, #4]
 800e3c4:	683a      	ldr	r2, [r7, #0]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	4413      	add	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	440b      	add	r3, r1
 800e3d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d108      	bne.n	800e3ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6818      	ldr	r0, [r3, #0]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	f008 fd58 	bl	8016e9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f00b ff5e 	bl	801a2b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3720      	adds	r7, #32
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	4f54300a 	.word	0x4f54300a
 800e408:	4f54310a 	.word	0x4f54310a

0800e40c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	333c      	adds	r3, #60	@ 0x3c
 800e424:	3304      	adds	r3, #4
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	015a      	lsls	r2, r3, #5
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	4413      	add	r3, r2
 800e432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	4a15      	ldr	r2, [pc, #84]	@ (800e494 <PCD_EP_OutSetupPacket_int+0x88>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d90e      	bls.n	800e460 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d009      	beq.n	800e460 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	015a      	lsls	r2, r3, #5
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	4413      	add	r3, r2
 800e454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e458:	461a      	mov	r2, r3
 800e45a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e45e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f00b ff15 	bl	801a290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	4a0a      	ldr	r2, [pc, #40]	@ (800e494 <PCD_EP_OutSetupPacket_int+0x88>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d90c      	bls.n	800e488 <PCD_EP_OutSetupPacket_int+0x7c>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	799b      	ldrb	r3, [r3, #6]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d108      	bne.n	800e488 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6818      	ldr	r0, [r3, #0]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e480:	461a      	mov	r2, r3
 800e482:	2101      	movs	r1, #1
 800e484:	f008 fd0a 	bl	8016e9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800e488:	2300      	movs	r3, #0
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	4f54300a 	.word	0x4f54300a

0800e498 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	70fb      	strb	r3, [r7, #3]
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800e4b0:	78fb      	ldrb	r3, [r7, #3]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d107      	bne.n	800e4c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e4b6:	883b      	ldrh	r3, [r7, #0]
 800e4b8:	0419      	lsls	r1, r3, #16
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	430a      	orrs	r2, r1
 800e4c2:	629a      	str	r2, [r3, #40]	@ 0x28
 800e4c4:	e028      	b.n	800e518 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4cc:	0c1b      	lsrs	r3, r3, #16
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	73fb      	strb	r3, [r7, #15]
 800e4d8:	e00d      	b.n	800e4f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
 800e4e0:	3340      	adds	r3, #64	@ 0x40
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	0c1b      	lsrs	r3, r3, #16
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	73fb      	strb	r3, [r7, #15]
 800e4f6:	7bfa      	ldrb	r2, [r7, #15]
 800e4f8:	78fb      	ldrb	r3, [r7, #3]
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d3ec      	bcc.n	800e4da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e500:	883b      	ldrh	r3, [r7, #0]
 800e502:	0418      	lsls	r0, r3, #16
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6819      	ldr	r1, [r3, #0]
 800e508:	78fb      	ldrb	r3, [r7, #3]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	4302      	orrs	r2, r0
 800e510:	3340      	adds	r3, #64	@ 0x40
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	440b      	add	r3, r1
 800e516:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e518:	2300      	movs	r3, #0
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3714      	adds	r7, #20
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr

0800e526 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e526:	b480      	push	{r7}
 800e528:	b083      	sub	sp, #12
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
 800e52e:	460b      	mov	r3, r1
 800e530:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	887a      	ldrh	r2, [r7, #2]
 800e538:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800e53a:	2300      	movs	r3, #0
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2201      	movs	r2, #1
 800e55a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2200      	movs	r2, #0
 800e562:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	699b      	ldr	r3, [r3, #24]
 800e56a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e576:	4b05      	ldr	r3, [pc, #20]	@ (800e58c <HAL_PCDEx_ActivateLPM+0x44>)
 800e578:	4313      	orrs	r3, r2
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3714      	adds	r7, #20
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr
 800e58c:	10000003 	.word	0x10000003

0800e590 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	460b      	mov	r3, r1
 800e59a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e59c:	bf00      	nop
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e5b0:	4b19      	ldr	r3, [pc, #100]	@ (800e618 <HAL_PWREx_ConfigSupply+0x70>)
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	f003 0304 	and.w	r3, r3, #4
 800e5b8:	2b04      	cmp	r3, #4
 800e5ba:	d00a      	beq.n	800e5d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e5bc:	4b16      	ldr	r3, [pc, #88]	@ (800e618 <HAL_PWREx_ConfigSupply+0x70>)
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	f003 0307 	and.w	r3, r3, #7
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d001      	beq.n	800e5ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e01f      	b.n	800e60e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	e01d      	b.n	800e60e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e5d2:	4b11      	ldr	r3, [pc, #68]	@ (800e618 <HAL_PWREx_ConfigSupply+0x70>)
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	f023 0207 	bic.w	r2, r3, #7
 800e5da:	490f      	ldr	r1, [pc, #60]	@ (800e618 <HAL_PWREx_ConfigSupply+0x70>)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e5e2:	f7f5 f8a5 	bl	8003730 <HAL_GetTick>
 800e5e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e5e8:	e009      	b.n	800e5fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e5ea:	f7f5 f8a1 	bl	8003730 <HAL_GetTick>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e5f8:	d901      	bls.n	800e5fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e007      	b.n	800e60e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e5fe:	4b06      	ldr	r3, [pc, #24]	@ (800e618 <HAL_PWREx_ConfigSupply+0x70>)
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e60a:	d1ee      	bne.n	800e5ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	58024800 	.word	0x58024800

0800e61c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800e61c:	b480      	push	{r7}
 800e61e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800e620:	4b05      	ldr	r3, [pc, #20]	@ (800e638 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	4a04      	ldr	r2, [pc, #16]	@ (800e638 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800e626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e62a:	60d3      	str	r3, [r2, #12]
}
 800e62c:	bf00      	nop
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	58024800 	.word	0x58024800

0800e63c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b08c      	sub	sp, #48	@ 0x30
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d102      	bne.n	800e650 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e64a:	2301      	movs	r3, #1
 800e64c:	f000 bc48 	b.w	800eee0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f003 0301 	and.w	r3, r3, #1
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f000 8088 	beq.w	800e76e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e65e:	4b99      	ldr	r3, [pc, #612]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e668:	4b96      	ldr	r3, [pc, #600]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e66c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e670:	2b10      	cmp	r3, #16
 800e672:	d007      	beq.n	800e684 <HAL_RCC_OscConfig+0x48>
 800e674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e676:	2b18      	cmp	r3, #24
 800e678:	d111      	bne.n	800e69e <HAL_RCC_OscConfig+0x62>
 800e67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e67c:	f003 0303 	and.w	r3, r3, #3
 800e680:	2b02      	cmp	r3, #2
 800e682:	d10c      	bne.n	800e69e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e684:	4b8f      	ldr	r3, [pc, #572]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d06d      	beq.n	800e76c <HAL_RCC_OscConfig+0x130>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d169      	bne.n	800e76c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e698:	2301      	movs	r3, #1
 800e69a:	f000 bc21 	b.w	800eee0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6a6:	d106      	bne.n	800e6b6 <HAL_RCC_OscConfig+0x7a>
 800e6a8:	4b86      	ldr	r3, [pc, #536]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a85      	ldr	r2, [pc, #532]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e6b2:	6013      	str	r3, [r2, #0]
 800e6b4:	e02e      	b.n	800e714 <HAL_RCC_OscConfig+0xd8>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10c      	bne.n	800e6d8 <HAL_RCC_OscConfig+0x9c>
 800e6be:	4b81      	ldr	r3, [pc, #516]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4a80      	ldr	r2, [pc, #512]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	4b7e      	ldr	r3, [pc, #504]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a7d      	ldr	r2, [pc, #500]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e6d4:	6013      	str	r3, [r2, #0]
 800e6d6:	e01d      	b.n	800e714 <HAL_RCC_OscConfig+0xd8>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6e0:	d10c      	bne.n	800e6fc <HAL_RCC_OscConfig+0xc0>
 800e6e2:	4b78      	ldr	r3, [pc, #480]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4a77      	ldr	r2, [pc, #476]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e6ec:	6013      	str	r3, [r2, #0]
 800e6ee:	4b75      	ldr	r3, [pc, #468]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a74      	ldr	r2, [pc, #464]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e6f8:	6013      	str	r3, [r2, #0]
 800e6fa:	e00b      	b.n	800e714 <HAL_RCC_OscConfig+0xd8>
 800e6fc:	4b71      	ldr	r3, [pc, #452]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a70      	ldr	r2, [pc, #448]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e706:	6013      	str	r3, [r2, #0]
 800e708:	4b6e      	ldr	r3, [pc, #440]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a6d      	ldr	r2, [pc, #436]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e70e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d013      	beq.n	800e744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e71c:	f7f5 f808 	bl	8003730 <HAL_GetTick>
 800e720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e722:	e008      	b.n	800e736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e724:	f7f5 f804 	bl	8003730 <HAL_GetTick>
 800e728:	4602      	mov	r2, r0
 800e72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	2b64      	cmp	r3, #100	@ 0x64
 800e730:	d901      	bls.n	800e736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e732:	2303      	movs	r3, #3
 800e734:	e3d4      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e736:	4b63      	ldr	r3, [pc, #396]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d0f0      	beq.n	800e724 <HAL_RCC_OscConfig+0xe8>
 800e742:	e014      	b.n	800e76e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e744:	f7f4 fff4 	bl	8003730 <HAL_GetTick>
 800e748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e74a:	e008      	b.n	800e75e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e74c:	f7f4 fff0 	bl	8003730 <HAL_GetTick>
 800e750:	4602      	mov	r2, r0
 800e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	2b64      	cmp	r3, #100	@ 0x64
 800e758:	d901      	bls.n	800e75e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e75a:	2303      	movs	r3, #3
 800e75c:	e3c0      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e75e:	4b59      	ldr	r3, [pc, #356]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1f0      	bne.n	800e74c <HAL_RCC_OscConfig+0x110>
 800e76a:	e000      	b.n	800e76e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e76c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f003 0302 	and.w	r3, r3, #2
 800e776:	2b00      	cmp	r3, #0
 800e778:	f000 80ca 	beq.w	800e910 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e77c:	4b51      	ldr	r3, [pc, #324]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e77e:	691b      	ldr	r3, [r3, #16]
 800e780:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e784:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e786:	4b4f      	ldr	r3, [pc, #316]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e78a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e78c:	6a3b      	ldr	r3, [r7, #32]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d007      	beq.n	800e7a2 <HAL_RCC_OscConfig+0x166>
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	2b18      	cmp	r3, #24
 800e796:	d156      	bne.n	800e846 <HAL_RCC_OscConfig+0x20a>
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	f003 0303 	and.w	r3, r3, #3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d151      	bne.n	800e846 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e7a2:	4b48      	ldr	r3, [pc, #288]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f003 0304 	and.w	r3, r3, #4
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d005      	beq.n	800e7ba <HAL_RCC_OscConfig+0x17e>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d101      	bne.n	800e7ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e392      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e7ba:	4b42      	ldr	r3, [pc, #264]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f023 0219 	bic.w	r2, r3, #25
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	493f      	ldr	r1, [pc, #252]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7cc:	f7f4 ffb0 	bl	8003730 <HAL_GetTick>
 800e7d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e7d2:	e008      	b.n	800e7e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e7d4:	f7f4 ffac 	bl	8003730 <HAL_GetTick>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d901      	bls.n	800e7e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e7e2:	2303      	movs	r3, #3
 800e7e4:	e37c      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e7e6:	4b37      	ldr	r3, [pc, #220]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f003 0304 	and.w	r3, r3, #4
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d0f0      	beq.n	800e7d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7f2:	f7f4 ffcd 	bl	8003790 <HAL_GetREVID>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d817      	bhi.n	800e830 <HAL_RCC_OscConfig+0x1f4>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	691b      	ldr	r3, [r3, #16]
 800e804:	2b40      	cmp	r3, #64	@ 0x40
 800e806:	d108      	bne.n	800e81a <HAL_RCC_OscConfig+0x1de>
 800e808:	4b2e      	ldr	r3, [pc, #184]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e810:	4a2c      	ldr	r2, [pc, #176]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e816:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e818:	e07a      	b.n	800e910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e81a:	4b2a      	ldr	r3, [pc, #168]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	031b      	lsls	r3, r3, #12
 800e828:	4926      	ldr	r1, [pc, #152]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e82a:	4313      	orrs	r3, r2
 800e82c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e82e:	e06f      	b.n	800e910 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e830:	4b24      	ldr	r3, [pc, #144]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	061b      	lsls	r3, r3, #24
 800e83e:	4921      	ldr	r1, [pc, #132]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e840:	4313      	orrs	r3, r2
 800e842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e844:	e064      	b.n	800e910 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d047      	beq.n	800e8de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e84e:	4b1d      	ldr	r3, [pc, #116]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f023 0219 	bic.w	r2, r3, #25
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	491a      	ldr	r1, [pc, #104]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e85c:	4313      	orrs	r3, r2
 800e85e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e860:	f7f4 ff66 	bl	8003730 <HAL_GetTick>
 800e864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e866:	e008      	b.n	800e87a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e868:	f7f4 ff62 	bl	8003730 <HAL_GetTick>
 800e86c:	4602      	mov	r2, r0
 800e86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	2b02      	cmp	r3, #2
 800e874:	d901      	bls.n	800e87a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e876:	2303      	movs	r3, #3
 800e878:	e332      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e87a:	4b12      	ldr	r3, [pc, #72]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f003 0304 	and.w	r3, r3, #4
 800e882:	2b00      	cmp	r3, #0
 800e884:	d0f0      	beq.n	800e868 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e886:	f7f4 ff83 	bl	8003790 <HAL_GetREVID>
 800e88a:	4603      	mov	r3, r0
 800e88c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e890:	4293      	cmp	r3, r2
 800e892:	d819      	bhi.n	800e8c8 <HAL_RCC_OscConfig+0x28c>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	2b40      	cmp	r3, #64	@ 0x40
 800e89a:	d108      	bne.n	800e8ae <HAL_RCC_OscConfig+0x272>
 800e89c:	4b09      	ldr	r3, [pc, #36]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800e8a4:	4a07      	ldr	r2, [pc, #28]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e8a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8aa:	6053      	str	r3, [r2, #4]
 800e8ac:	e030      	b.n	800e910 <HAL_RCC_OscConfig+0x2d4>
 800e8ae:	4b05      	ldr	r3, [pc, #20]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	031b      	lsls	r3, r3, #12
 800e8bc:	4901      	ldr	r1, [pc, #4]	@ (800e8c4 <HAL_RCC_OscConfig+0x288>)
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	604b      	str	r3, [r1, #4]
 800e8c2:	e025      	b.n	800e910 <HAL_RCC_OscConfig+0x2d4>
 800e8c4:	58024400 	.word	0x58024400
 800e8c8:	4b9a      	ldr	r3, [pc, #616]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	061b      	lsls	r3, r3, #24
 800e8d6:	4997      	ldr	r1, [pc, #604]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	604b      	str	r3, [r1, #4]
 800e8dc:	e018      	b.n	800e910 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e8de:	4b95      	ldr	r3, [pc, #596]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a94      	ldr	r2, [pc, #592]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e8e4:	f023 0301 	bic.w	r3, r3, #1
 800e8e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8ea:	f7f4 ff21 	bl	8003730 <HAL_GetTick>
 800e8ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e8f0:	e008      	b.n	800e904 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e8f2:	f7f4 ff1d 	bl	8003730 <HAL_GetTick>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	d901      	bls.n	800e904 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e900:	2303      	movs	r3, #3
 800e902:	e2ed      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e904:	4b8b      	ldr	r3, [pc, #556]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f003 0304 	and.w	r3, r3, #4
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d1f0      	bne.n	800e8f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f003 0310 	and.w	r3, r3, #16
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f000 80a9 	beq.w	800ea70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e91e:	4b85      	ldr	r3, [pc, #532]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e928:	4b82      	ldr	r3, [pc, #520]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e92c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	2b08      	cmp	r3, #8
 800e932:	d007      	beq.n	800e944 <HAL_RCC_OscConfig+0x308>
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	2b18      	cmp	r3, #24
 800e938:	d13a      	bne.n	800e9b0 <HAL_RCC_OscConfig+0x374>
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	f003 0303 	and.w	r3, r3, #3
 800e940:	2b01      	cmp	r3, #1
 800e942:	d135      	bne.n	800e9b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e944:	4b7b      	ldr	r3, [pc, #492]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d005      	beq.n	800e95c <HAL_RCC_OscConfig+0x320>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	69db      	ldr	r3, [r3, #28]
 800e954:	2b80      	cmp	r3, #128	@ 0x80
 800e956:	d001      	beq.n	800e95c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e958:	2301      	movs	r3, #1
 800e95a:	e2c1      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e95c:	f7f4 ff18 	bl	8003790 <HAL_GetREVID>
 800e960:	4603      	mov	r3, r0
 800e962:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e966:	4293      	cmp	r3, r2
 800e968:	d817      	bhi.n	800e99a <HAL_RCC_OscConfig+0x35e>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	2b20      	cmp	r3, #32
 800e970:	d108      	bne.n	800e984 <HAL_RCC_OscConfig+0x348>
 800e972:	4b70      	ldr	r3, [pc, #448]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800e97a:	4a6e      	ldr	r2, [pc, #440]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e97c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e980:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e982:	e075      	b.n	800ea70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e984:	4b6b      	ldr	r3, [pc, #428]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6a1b      	ldr	r3, [r3, #32]
 800e990:	069b      	lsls	r3, r3, #26
 800e992:	4968      	ldr	r1, [pc, #416]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e994:	4313      	orrs	r3, r2
 800e996:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e998:	e06a      	b.n	800ea70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e99a:	4b66      	ldr	r3, [pc, #408]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	061b      	lsls	r3, r3, #24
 800e9a8:	4962      	ldr	r1, [pc, #392]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e9ae:	e05f      	b.n	800ea70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	69db      	ldr	r3, [r3, #28]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d042      	beq.n	800ea3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e9b8:	4b5e      	ldr	r3, [pc, #376]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a5d      	ldr	r2, [pc, #372]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e9be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9c4:	f7f4 feb4 	bl	8003730 <HAL_GetTick>
 800e9c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e9ca:	e008      	b.n	800e9de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e9cc:	f7f4 feb0 	bl	8003730 <HAL_GetTick>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d901      	bls.n	800e9de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e9da:	2303      	movs	r3, #3
 800e9dc:	e280      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e9de:	4b55      	ldr	r3, [pc, #340]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d0f0      	beq.n	800e9cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e9ea:	f7f4 fed1 	bl	8003790 <HAL_GetREVID>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d817      	bhi.n	800ea28 <HAL_RCC_OscConfig+0x3ec>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a1b      	ldr	r3, [r3, #32]
 800e9fc:	2b20      	cmp	r3, #32
 800e9fe:	d108      	bne.n	800ea12 <HAL_RCC_OscConfig+0x3d6>
 800ea00:	4b4c      	ldr	r3, [pc, #304]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ea08:	4a4a      	ldr	r2, [pc, #296]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea0e:	6053      	str	r3, [r2, #4]
 800ea10:	e02e      	b.n	800ea70 <HAL_RCC_OscConfig+0x434>
 800ea12:	4b48      	ldr	r3, [pc, #288]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a1b      	ldr	r3, [r3, #32]
 800ea1e:	069b      	lsls	r3, r3, #26
 800ea20:	4944      	ldr	r1, [pc, #272]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea22:	4313      	orrs	r3, r2
 800ea24:	604b      	str	r3, [r1, #4]
 800ea26:	e023      	b.n	800ea70 <HAL_RCC_OscConfig+0x434>
 800ea28:	4b42      	ldr	r3, [pc, #264]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a1b      	ldr	r3, [r3, #32]
 800ea34:	061b      	lsls	r3, r3, #24
 800ea36:	493f      	ldr	r1, [pc, #252]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	60cb      	str	r3, [r1, #12]
 800ea3c:	e018      	b.n	800ea70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ea3e:	4b3d      	ldr	r3, [pc, #244]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4a3c      	ldr	r2, [pc, #240]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea4a:	f7f4 fe71 	bl	8003730 <HAL_GetTick>
 800ea4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ea50:	e008      	b.n	800ea64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ea52:	f7f4 fe6d 	bl	8003730 <HAL_GetTick>
 800ea56:	4602      	mov	r2, r0
 800ea58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d901      	bls.n	800ea64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ea60:	2303      	movs	r3, #3
 800ea62:	e23d      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ea64:	4b33      	ldr	r3, [pc, #204]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1f0      	bne.n	800ea52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f003 0308 	and.w	r3, r3, #8
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d036      	beq.n	800eaea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	695b      	ldr	r3, [r3, #20]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d019      	beq.n	800eab8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ea84:	4b2b      	ldr	r3, [pc, #172]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea88:	4a2a      	ldr	r2, [pc, #168]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800ea8a:	f043 0301 	orr.w	r3, r3, #1
 800ea8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea90:	f7f4 fe4e 	bl	8003730 <HAL_GetTick>
 800ea94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea96:	e008      	b.n	800eaaa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ea98:	f7f4 fe4a 	bl	8003730 <HAL_GetTick>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	2b02      	cmp	r3, #2
 800eaa4:	d901      	bls.n	800eaaa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800eaa6:	2303      	movs	r3, #3
 800eaa8:	e21a      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eaaa:	4b22      	ldr	r3, [pc, #136]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800eaac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaae:	f003 0302 	and.w	r3, r3, #2
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0f0      	beq.n	800ea98 <HAL_RCC_OscConfig+0x45c>
 800eab6:	e018      	b.n	800eaea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eab8:	4b1e      	ldr	r3, [pc, #120]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800eaba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eabc:	4a1d      	ldr	r2, [pc, #116]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800eabe:	f023 0301 	bic.w	r3, r3, #1
 800eac2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eac4:	f7f4 fe34 	bl	8003730 <HAL_GetTick>
 800eac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eaca:	e008      	b.n	800eade <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eacc:	f7f4 fe30 	bl	8003730 <HAL_GetTick>
 800ead0:	4602      	mov	r2, r0
 800ead2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d901      	bls.n	800eade <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800eada:	2303      	movs	r3, #3
 800eadc:	e200      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eade:	4b15      	ldr	r3, [pc, #84]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800eae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eae2:	f003 0302 	and.w	r3, r3, #2
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1f0      	bne.n	800eacc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f003 0320 	and.w	r3, r3, #32
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d039      	beq.n	800eb6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d01c      	beq.n	800eb38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800eafe:	4b0d      	ldr	r3, [pc, #52]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a0c      	ldr	r2, [pc, #48]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800eb04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eb08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800eb0a:	f7f4 fe11 	bl	8003730 <HAL_GetTick>
 800eb0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800eb10:	e008      	b.n	800eb24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eb12:	f7f4 fe0d 	bl	8003730 <HAL_GetTick>
 800eb16:	4602      	mov	r2, r0
 800eb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	2b02      	cmp	r3, #2
 800eb1e:	d901      	bls.n	800eb24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800eb20:	2303      	movs	r3, #3
 800eb22:	e1dd      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800eb24:	4b03      	ldr	r3, [pc, #12]	@ (800eb34 <HAL_RCC_OscConfig+0x4f8>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d0f0      	beq.n	800eb12 <HAL_RCC_OscConfig+0x4d6>
 800eb30:	e01b      	b.n	800eb6a <HAL_RCC_OscConfig+0x52e>
 800eb32:	bf00      	nop
 800eb34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eb38:	4b9b      	ldr	r3, [pc, #620]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4a9a      	ldr	r2, [pc, #616]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800eb3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800eb44:	f7f4 fdf4 	bl	8003730 <HAL_GetTick>
 800eb48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eb4a:	e008      	b.n	800eb5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eb4c:	f7f4 fdf0 	bl	8003730 <HAL_GetTick>
 800eb50:	4602      	mov	r2, r0
 800eb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb54:	1ad3      	subs	r3, r2, r3
 800eb56:	2b02      	cmp	r3, #2
 800eb58:	d901      	bls.n	800eb5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800eb5a:	2303      	movs	r3, #3
 800eb5c:	e1c0      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eb5e:	4b92      	ldr	r3, [pc, #584]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1f0      	bne.n	800eb4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f003 0304 	and.w	r3, r3, #4
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	f000 8081 	beq.w	800ec7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800eb78:	4b8c      	ldr	r3, [pc, #560]	@ (800edac <HAL_RCC_OscConfig+0x770>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4a8b      	ldr	r2, [pc, #556]	@ (800edac <HAL_RCC_OscConfig+0x770>)
 800eb7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eb82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800eb84:	f7f4 fdd4 	bl	8003730 <HAL_GetTick>
 800eb88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb8a:	e008      	b.n	800eb9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb8c:	f7f4 fdd0 	bl	8003730 <HAL_GetTick>
 800eb90:	4602      	mov	r2, r0
 800eb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb94:	1ad3      	subs	r3, r2, r3
 800eb96:	2b64      	cmp	r3, #100	@ 0x64
 800eb98:	d901      	bls.n	800eb9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800eb9a:	2303      	movs	r3, #3
 800eb9c:	e1a0      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb9e:	4b83      	ldr	r3, [pc, #524]	@ (800edac <HAL_RCC_OscConfig+0x770>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d0f0      	beq.n	800eb8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d106      	bne.n	800ebc0 <HAL_RCC_OscConfig+0x584>
 800ebb2:	4b7d      	ldr	r3, [pc, #500]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebb6:	4a7c      	ldr	r2, [pc, #496]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebb8:	f043 0301 	orr.w	r3, r3, #1
 800ebbc:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebbe:	e02d      	b.n	800ec1c <HAL_RCC_OscConfig+0x5e0>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10c      	bne.n	800ebe2 <HAL_RCC_OscConfig+0x5a6>
 800ebc8:	4b77      	ldr	r3, [pc, #476]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebcc:	4a76      	ldr	r2, [pc, #472]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebce:	f023 0301 	bic.w	r3, r3, #1
 800ebd2:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebd4:	4b74      	ldr	r3, [pc, #464]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebd8:	4a73      	ldr	r2, [pc, #460]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebda:	f023 0304 	bic.w	r3, r3, #4
 800ebde:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebe0:	e01c      	b.n	800ec1c <HAL_RCC_OscConfig+0x5e0>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	2b05      	cmp	r3, #5
 800ebe8:	d10c      	bne.n	800ec04 <HAL_RCC_OscConfig+0x5c8>
 800ebea:	4b6f      	ldr	r3, [pc, #444]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebee:	4a6e      	ldr	r2, [pc, #440]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebf0:	f043 0304 	orr.w	r3, r3, #4
 800ebf4:	6713      	str	r3, [r2, #112]	@ 0x70
 800ebf6:	4b6c      	ldr	r3, [pc, #432]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebfa:	4a6b      	ldr	r2, [pc, #428]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ebfc:	f043 0301 	orr.w	r3, r3, #1
 800ec00:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec02:	e00b      	b.n	800ec1c <HAL_RCC_OscConfig+0x5e0>
 800ec04:	4b68      	ldr	r3, [pc, #416]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ec06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec08:	4a67      	ldr	r2, [pc, #412]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ec0a:	f023 0301 	bic.w	r3, r3, #1
 800ec0e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec10:	4b65      	ldr	r3, [pc, #404]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ec12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec14:	4a64      	ldr	r2, [pc, #400]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ec16:	f023 0304 	bic.w	r3, r3, #4
 800ec1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d015      	beq.n	800ec50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec24:	f7f4 fd84 	bl	8003730 <HAL_GetTick>
 800ec28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec2a:	e00a      	b.n	800ec42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec2c:	f7f4 fd80 	bl	8003730 <HAL_GetTick>
 800ec30:	4602      	mov	r2, r0
 800ec32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec34:	1ad3      	subs	r3, r2, r3
 800ec36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d901      	bls.n	800ec42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ec3e:	2303      	movs	r3, #3
 800ec40:	e14e      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec42:	4b59      	ldr	r3, [pc, #356]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ec44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec46:	f003 0302 	and.w	r3, r3, #2
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d0ee      	beq.n	800ec2c <HAL_RCC_OscConfig+0x5f0>
 800ec4e:	e014      	b.n	800ec7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec50:	f7f4 fd6e 	bl	8003730 <HAL_GetTick>
 800ec54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ec56:	e00a      	b.n	800ec6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec58:	f7f4 fd6a 	bl	8003730 <HAL_GetTick>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec60:	1ad3      	subs	r3, r2, r3
 800ec62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d901      	bls.n	800ec6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e138      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ec6e:	4b4e      	ldr	r3, [pc, #312]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ec70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec72:	f003 0302 	and.w	r3, r3, #2
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1ee      	bne.n	800ec58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f000 812d 	beq.w	800eede <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ec84:	4b48      	ldr	r3, [pc, #288]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ec8c:	2b18      	cmp	r3, #24
 800ec8e:	f000 80bd 	beq.w	800ee0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec96:	2b02      	cmp	r3, #2
 800ec98:	f040 809e 	bne.w	800edd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec9c:	4b42      	ldr	r3, [pc, #264]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a41      	ldr	r2, [pc, #260]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800eca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eca8:	f7f4 fd42 	bl	8003730 <HAL_GetTick>
 800ecac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ecae:	e008      	b.n	800ecc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ecb0:	f7f4 fd3e 	bl	8003730 <HAL_GetTick>
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb8:	1ad3      	subs	r3, r2, r3
 800ecba:	2b02      	cmp	r3, #2
 800ecbc:	d901      	bls.n	800ecc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	e10e      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ecc2:	4b39      	ldr	r3, [pc, #228]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1f0      	bne.n	800ecb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ecce:	4b36      	ldr	r3, [pc, #216]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ecd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ecd2:	4b37      	ldr	r3, [pc, #220]	@ (800edb0 <HAL_RCC_OscConfig+0x774>)
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ecde:	0112      	lsls	r2, r2, #4
 800ece0:	430a      	orrs	r2, r1
 800ece2:	4931      	ldr	r1, [pc, #196]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ece4:	4313      	orrs	r3, r2
 800ece6:	628b      	str	r3, [r1, #40]	@ 0x28
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecec:	3b01      	subs	r3, #1
 800ecee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	025b      	lsls	r3, r3, #9
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	431a      	orrs	r2, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed02:	3b01      	subs	r3, #1
 800ed04:	041b      	lsls	r3, r3, #16
 800ed06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ed0a:	431a      	orrs	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed10:	3b01      	subs	r3, #1
 800ed12:	061b      	lsls	r3, r3, #24
 800ed14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ed18:	4923      	ldr	r1, [pc, #140]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ed1e:	4b22      	ldr	r3, [pc, #136]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed22:	4a21      	ldr	r2, [pc, #132]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed24:	f023 0301 	bic.w	r3, r3, #1
 800ed28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ed2a:	4b1f      	ldr	r3, [pc, #124]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed2e:	4b21      	ldr	r3, [pc, #132]	@ (800edb4 <HAL_RCC_OscConfig+0x778>)
 800ed30:	4013      	ands	r3, r2
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ed36:	00d2      	lsls	r2, r2, #3
 800ed38:	491b      	ldr	r1, [pc, #108]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ed3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed42:	f023 020c 	bic.w	r2, r3, #12
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed4a:	4917      	ldr	r1, [pc, #92]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ed50:	4b15      	ldr	r3, [pc, #84]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed54:	f023 0202 	bic.w	r2, r3, #2
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed5c:	4912      	ldr	r1, [pc, #72]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ed62:	4b11      	ldr	r3, [pc, #68]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed66:	4a10      	ldr	r2, [pc, #64]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed6e:	4b0e      	ldr	r3, [pc, #56]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed72:	4a0d      	ldr	r2, [pc, #52]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ed7a:	4b0b      	ldr	r3, [pc, #44]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed7e:	4a0a      	ldr	r2, [pc, #40]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ed84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ed86:	4b08      	ldr	r3, [pc, #32]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8a:	4a07      	ldr	r2, [pc, #28]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed8c:	f043 0301 	orr.w	r3, r3, #1
 800ed90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed92:	4b05      	ldr	r3, [pc, #20]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a04      	ldr	r2, [pc, #16]	@ (800eda8 <HAL_RCC_OscConfig+0x76c>)
 800ed98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ed9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed9e:	f7f4 fcc7 	bl	8003730 <HAL_GetTick>
 800eda2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eda4:	e011      	b.n	800edca <HAL_RCC_OscConfig+0x78e>
 800eda6:	bf00      	nop
 800eda8:	58024400 	.word	0x58024400
 800edac:	58024800 	.word	0x58024800
 800edb0:	fffffc0c 	.word	0xfffffc0c
 800edb4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800edb8:	f7f4 fcba 	bl	8003730 <HAL_GetTick>
 800edbc:	4602      	mov	r2, r0
 800edbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc0:	1ad3      	subs	r3, r2, r3
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	d901      	bls.n	800edca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800edc6:	2303      	movs	r3, #3
 800edc8:	e08a      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800edca:	4b47      	ldr	r3, [pc, #284]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0f0      	beq.n	800edb8 <HAL_RCC_OscConfig+0x77c>
 800edd6:	e082      	b.n	800eede <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800edd8:	4b43      	ldr	r3, [pc, #268]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4a42      	ldr	r2, [pc, #264]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800edde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ede2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ede4:	f7f4 fca4 	bl	8003730 <HAL_GetTick>
 800ede8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800edea:	e008      	b.n	800edfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800edec:	f7f4 fca0 	bl	8003730 <HAL_GetTick>
 800edf0:	4602      	mov	r2, r0
 800edf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf4:	1ad3      	subs	r3, r2, r3
 800edf6:	2b02      	cmp	r3, #2
 800edf8:	d901      	bls.n	800edfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800edfa:	2303      	movs	r3, #3
 800edfc:	e070      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800edfe:	4b3a      	ldr	r3, [pc, #232]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1f0      	bne.n	800edec <HAL_RCC_OscConfig+0x7b0>
 800ee0a:	e068      	b.n	800eede <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ee0c:	4b36      	ldr	r3, [pc, #216]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800ee0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ee12:	4b35      	ldr	r3, [pc, #212]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800ee14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d031      	beq.n	800ee84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	f003 0203 	and.w	r2, r3, #3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d12a      	bne.n	800ee84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	091b      	lsrs	r3, r3, #4
 800ee32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d122      	bne.n	800ee84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d11a      	bne.n	800ee84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	0a5b      	lsrs	r3, r3, #9
 800ee52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d111      	bne.n	800ee84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	0c1b      	lsrs	r3, r3, #16
 800ee64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d108      	bne.n	800ee84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	0e1b      	lsrs	r3, r3, #24
 800ee76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d001      	beq.n	800ee88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ee84:	2301      	movs	r3, #1
 800ee86:	e02b      	b.n	800eee0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ee88:	4b17      	ldr	r3, [pc, #92]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800ee8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee8c:	08db      	lsrs	r3, r3, #3
 800ee8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee98:	693a      	ldr	r2, [r7, #16]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d01f      	beq.n	800eede <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ee9e:	4b12      	ldr	r3, [pc, #72]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800eea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea2:	4a11      	ldr	r2, [pc, #68]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800eea4:	f023 0301 	bic.w	r3, r3, #1
 800eea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800eeaa:	f7f4 fc41 	bl	8003730 <HAL_GetTick>
 800eeae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800eeb0:	bf00      	nop
 800eeb2:	f7f4 fc3d 	bl	8003730 <HAL_GetTick>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d0f9      	beq.n	800eeb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800eebe:	4b0a      	ldr	r3, [pc, #40]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800eec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eec2:	4b0a      	ldr	r3, [pc, #40]	@ (800eeec <HAL_RCC_OscConfig+0x8b0>)
 800eec4:	4013      	ands	r3, r2
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800eeca:	00d2      	lsls	r2, r2, #3
 800eecc:	4906      	ldr	r1, [pc, #24]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800eece:	4313      	orrs	r3, r2
 800eed0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800eed2:	4b05      	ldr	r3, [pc, #20]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800eed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed6:	4a04      	ldr	r2, [pc, #16]	@ (800eee8 <HAL_RCC_OscConfig+0x8ac>)
 800eed8:	f043 0301 	orr.w	r3, r3, #1
 800eedc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800eede:	2300      	movs	r3, #0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3730      	adds	r7, #48	@ 0x30
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	58024400 	.word	0x58024400
 800eeec:	ffff0007 	.word	0xffff0007

0800eef0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d101      	bne.n	800ef04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ef00:	2301      	movs	r3, #1
 800ef02:	e19c      	b.n	800f23e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ef04:	4b8a      	ldr	r3, [pc, #552]	@ (800f130 <HAL_RCC_ClockConfig+0x240>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f003 030f 	and.w	r3, r3, #15
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d910      	bls.n	800ef34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef12:	4b87      	ldr	r3, [pc, #540]	@ (800f130 <HAL_RCC_ClockConfig+0x240>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f023 020f 	bic.w	r2, r3, #15
 800ef1a:	4985      	ldr	r1, [pc, #532]	@ (800f130 <HAL_RCC_ClockConfig+0x240>)
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef22:	4b83      	ldr	r3, [pc, #524]	@ (800f130 <HAL_RCC_ClockConfig+0x240>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f003 030f 	and.w	r3, r3, #15
 800ef2a:	683a      	ldr	r2, [r7, #0]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d001      	beq.n	800ef34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ef30:	2301      	movs	r3, #1
 800ef32:	e184      	b.n	800f23e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d010      	beq.n	800ef62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	691a      	ldr	r2, [r3, #16]
 800ef44:	4b7b      	ldr	r3, [pc, #492]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800ef46:	699b      	ldr	r3, [r3, #24]
 800ef48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d908      	bls.n	800ef62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ef50:	4b78      	ldr	r3, [pc, #480]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800ef52:	699b      	ldr	r3, [r3, #24]
 800ef54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	691b      	ldr	r3, [r3, #16]
 800ef5c:	4975      	ldr	r1, [pc, #468]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 0308 	and.w	r3, r3, #8
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d010      	beq.n	800ef90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	695a      	ldr	r2, [r3, #20]
 800ef72:	4b70      	ldr	r3, [pc, #448]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800ef74:	69db      	ldr	r3, [r3, #28]
 800ef76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d908      	bls.n	800ef90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ef7e:	4b6d      	ldr	r3, [pc, #436]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800ef80:	69db      	ldr	r3, [r3, #28]
 800ef82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	496a      	ldr	r1, [pc, #424]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f003 0310 	and.w	r3, r3, #16
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d010      	beq.n	800efbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	699a      	ldr	r2, [r3, #24]
 800efa0:	4b64      	ldr	r3, [pc, #400]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800efa2:	69db      	ldr	r3, [r3, #28]
 800efa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d908      	bls.n	800efbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800efac:	4b61      	ldr	r3, [pc, #388]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800efae:	69db      	ldr	r3, [r3, #28]
 800efb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	699b      	ldr	r3, [r3, #24]
 800efb8:	495e      	ldr	r1, [pc, #376]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800efba:	4313      	orrs	r3, r2
 800efbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f003 0320 	and.w	r3, r3, #32
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d010      	beq.n	800efec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	69da      	ldr	r2, [r3, #28]
 800efce:	4b59      	ldr	r3, [pc, #356]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d908      	bls.n	800efec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800efda:	4b56      	ldr	r3, [pc, #344]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	69db      	ldr	r3, [r3, #28]
 800efe6:	4953      	ldr	r1, [pc, #332]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800efe8:	4313      	orrs	r3, r2
 800efea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f003 0302 	and.w	r3, r3, #2
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d010      	beq.n	800f01a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	68da      	ldr	r2, [r3, #12]
 800effc:	4b4d      	ldr	r3, [pc, #308]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800effe:	699b      	ldr	r3, [r3, #24]
 800f000:	f003 030f 	and.w	r3, r3, #15
 800f004:	429a      	cmp	r2, r3
 800f006:	d908      	bls.n	800f01a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f008:	4b4a      	ldr	r3, [pc, #296]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f00a:	699b      	ldr	r3, [r3, #24]
 800f00c:	f023 020f 	bic.w	r2, r3, #15
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	4947      	ldr	r1, [pc, #284]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f016:	4313      	orrs	r3, r2
 800f018:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f003 0301 	and.w	r3, r3, #1
 800f022:	2b00      	cmp	r3, #0
 800f024:	d055      	beq.n	800f0d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f026:	4b43      	ldr	r3, [pc, #268]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f028:	699b      	ldr	r3, [r3, #24]
 800f02a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	4940      	ldr	r1, [pc, #256]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f034:	4313      	orrs	r3, r2
 800f036:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d107      	bne.n	800f050 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f040:	4b3c      	ldr	r3, [pc, #240]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d121      	bne.n	800f090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f04c:	2301      	movs	r3, #1
 800f04e:	e0f6      	b.n	800f23e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	2b03      	cmp	r3, #3
 800f056:	d107      	bne.n	800f068 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f058:	4b36      	ldr	r3, [pc, #216]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f060:	2b00      	cmp	r3, #0
 800f062:	d115      	bne.n	800f090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f064:	2301      	movs	r3, #1
 800f066:	e0ea      	b.n	800f23e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d107      	bne.n	800f080 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f070:	4b30      	ldr	r3, [pc, #192]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d109      	bne.n	800f090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e0de      	b.n	800f23e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f080:	4b2c      	ldr	r3, [pc, #176]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f003 0304 	and.w	r3, r3, #4
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d101      	bne.n	800f090 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f08c:	2301      	movs	r3, #1
 800f08e:	e0d6      	b.n	800f23e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f090:	4b28      	ldr	r3, [pc, #160]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	f023 0207 	bic.w	r2, r3, #7
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	4925      	ldr	r1, [pc, #148]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f0a2:	f7f4 fb45 	bl	8003730 <HAL_GetTick>
 800f0a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f0a8:	e00a      	b.n	800f0c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f0aa:	f7f4 fb41 	bl	8003730 <HAL_GetTick>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d901      	bls.n	800f0c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e0be      	b.n	800f23e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f0c0:	4b1c      	ldr	r3, [pc, #112]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	00db      	lsls	r3, r3, #3
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d1eb      	bne.n	800f0aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f003 0302 	and.w	r3, r3, #2
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d010      	beq.n	800f100 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	68da      	ldr	r2, [r3, #12]
 800f0e2:	4b14      	ldr	r3, [pc, #80]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f0e4:	699b      	ldr	r3, [r3, #24]
 800f0e6:	f003 030f 	and.w	r3, r3, #15
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d208      	bcs.n	800f100 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f0ee:	4b11      	ldr	r3, [pc, #68]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f0f0:	699b      	ldr	r3, [r3, #24]
 800f0f2:	f023 020f 	bic.w	r2, r3, #15
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	490e      	ldr	r1, [pc, #56]	@ (800f134 <HAL_RCC_ClockConfig+0x244>)
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f100:	4b0b      	ldr	r3, [pc, #44]	@ (800f130 <HAL_RCC_ClockConfig+0x240>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f003 030f 	and.w	r3, r3, #15
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d214      	bcs.n	800f138 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f10e:	4b08      	ldr	r3, [pc, #32]	@ (800f130 <HAL_RCC_ClockConfig+0x240>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f023 020f 	bic.w	r2, r3, #15
 800f116:	4906      	ldr	r1, [pc, #24]	@ (800f130 <HAL_RCC_ClockConfig+0x240>)
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	4313      	orrs	r3, r2
 800f11c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f11e:	4b04      	ldr	r3, [pc, #16]	@ (800f130 <HAL_RCC_ClockConfig+0x240>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f003 030f 	and.w	r3, r3, #15
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d005      	beq.n	800f138 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f12c:	2301      	movs	r3, #1
 800f12e:	e086      	b.n	800f23e <HAL_RCC_ClockConfig+0x34e>
 800f130:	52002000 	.word	0x52002000
 800f134:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f003 0304 	and.w	r3, r3, #4
 800f140:	2b00      	cmp	r3, #0
 800f142:	d010      	beq.n	800f166 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	691a      	ldr	r2, [r3, #16]
 800f148:	4b3f      	ldr	r3, [pc, #252]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f14a:	699b      	ldr	r3, [r3, #24]
 800f14c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f150:	429a      	cmp	r2, r3
 800f152:	d208      	bcs.n	800f166 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f154:	4b3c      	ldr	r3, [pc, #240]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f156:	699b      	ldr	r3, [r3, #24]
 800f158:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	4939      	ldr	r1, [pc, #228]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f162:	4313      	orrs	r3, r2
 800f164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f003 0308 	and.w	r3, r3, #8
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d010      	beq.n	800f194 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	695a      	ldr	r2, [r3, #20]
 800f176:	4b34      	ldr	r3, [pc, #208]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f178:	69db      	ldr	r3, [r3, #28]
 800f17a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f17e:	429a      	cmp	r2, r3
 800f180:	d208      	bcs.n	800f194 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f182:	4b31      	ldr	r3, [pc, #196]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f184:	69db      	ldr	r3, [r3, #28]
 800f186:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	695b      	ldr	r3, [r3, #20]
 800f18e:	492e      	ldr	r1, [pc, #184]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f190:	4313      	orrs	r3, r2
 800f192:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f003 0310 	and.w	r3, r3, #16
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d010      	beq.n	800f1c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	699a      	ldr	r2, [r3, #24]
 800f1a4:	4b28      	ldr	r3, [pc, #160]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f1a6:	69db      	ldr	r3, [r3, #28]
 800f1a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d208      	bcs.n	800f1c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f1b0:	4b25      	ldr	r3, [pc, #148]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f1b2:	69db      	ldr	r3, [r3, #28]
 800f1b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	4922      	ldr	r1, [pc, #136]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f003 0320 	and.w	r3, r3, #32
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d010      	beq.n	800f1f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	69da      	ldr	r2, [r3, #28]
 800f1d2:	4b1d      	ldr	r3, [pc, #116]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f1d4:	6a1b      	ldr	r3, [r3, #32]
 800f1d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d208      	bcs.n	800f1f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f1de:	4b1a      	ldr	r3, [pc, #104]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f1e0:	6a1b      	ldr	r3, [r3, #32]
 800f1e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	69db      	ldr	r3, [r3, #28]
 800f1ea:	4917      	ldr	r1, [pc, #92]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f1f0:	f000 f834 	bl	800f25c <HAL_RCC_GetSysClockFreq>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	4b14      	ldr	r3, [pc, #80]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f1f8:	699b      	ldr	r3, [r3, #24]
 800f1fa:	0a1b      	lsrs	r3, r3, #8
 800f1fc:	f003 030f 	and.w	r3, r3, #15
 800f200:	4912      	ldr	r1, [pc, #72]	@ (800f24c <HAL_RCC_ClockConfig+0x35c>)
 800f202:	5ccb      	ldrb	r3, [r1, r3]
 800f204:	f003 031f 	and.w	r3, r3, #31
 800f208:	fa22 f303 	lsr.w	r3, r2, r3
 800f20c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f20e:	4b0e      	ldr	r3, [pc, #56]	@ (800f248 <HAL_RCC_ClockConfig+0x358>)
 800f210:	699b      	ldr	r3, [r3, #24]
 800f212:	f003 030f 	and.w	r3, r3, #15
 800f216:	4a0d      	ldr	r2, [pc, #52]	@ (800f24c <HAL_RCC_ClockConfig+0x35c>)
 800f218:	5cd3      	ldrb	r3, [r2, r3]
 800f21a:	f003 031f 	and.w	r3, r3, #31
 800f21e:	693a      	ldr	r2, [r7, #16]
 800f220:	fa22 f303 	lsr.w	r3, r2, r3
 800f224:	4a0a      	ldr	r2, [pc, #40]	@ (800f250 <HAL_RCC_ClockConfig+0x360>)
 800f226:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f228:	4a0a      	ldr	r2, [pc, #40]	@ (800f254 <HAL_RCC_ClockConfig+0x364>)
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800f22e:	4b0a      	ldr	r3, [pc, #40]	@ (800f258 <HAL_RCC_ClockConfig+0x368>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	4618      	mov	r0, r3
 800f234:	f7f4 fa32 	bl	800369c <HAL_InitTick>
 800f238:	4603      	mov	r3, r0
 800f23a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3718      	adds	r7, #24
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	58024400 	.word	0x58024400
 800f24c:	0801b334 	.word	0x0801b334
 800f250:	24000244 	.word	0x24000244
 800f254:	24000240 	.word	0x24000240
 800f258:	24000248 	.word	0x24000248

0800f25c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b089      	sub	sp, #36	@ 0x24
 800f260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f262:	4bb3      	ldr	r3, [pc, #716]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f264:	691b      	ldr	r3, [r3, #16]
 800f266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f26a:	2b18      	cmp	r3, #24
 800f26c:	f200 8155 	bhi.w	800f51a <HAL_RCC_GetSysClockFreq+0x2be>
 800f270:	a201      	add	r2, pc, #4	@ (adr r2, 800f278 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f276:	bf00      	nop
 800f278:	0800f2dd 	.word	0x0800f2dd
 800f27c:	0800f51b 	.word	0x0800f51b
 800f280:	0800f51b 	.word	0x0800f51b
 800f284:	0800f51b 	.word	0x0800f51b
 800f288:	0800f51b 	.word	0x0800f51b
 800f28c:	0800f51b 	.word	0x0800f51b
 800f290:	0800f51b 	.word	0x0800f51b
 800f294:	0800f51b 	.word	0x0800f51b
 800f298:	0800f303 	.word	0x0800f303
 800f29c:	0800f51b 	.word	0x0800f51b
 800f2a0:	0800f51b 	.word	0x0800f51b
 800f2a4:	0800f51b 	.word	0x0800f51b
 800f2a8:	0800f51b 	.word	0x0800f51b
 800f2ac:	0800f51b 	.word	0x0800f51b
 800f2b0:	0800f51b 	.word	0x0800f51b
 800f2b4:	0800f51b 	.word	0x0800f51b
 800f2b8:	0800f309 	.word	0x0800f309
 800f2bc:	0800f51b 	.word	0x0800f51b
 800f2c0:	0800f51b 	.word	0x0800f51b
 800f2c4:	0800f51b 	.word	0x0800f51b
 800f2c8:	0800f51b 	.word	0x0800f51b
 800f2cc:	0800f51b 	.word	0x0800f51b
 800f2d0:	0800f51b 	.word	0x0800f51b
 800f2d4:	0800f51b 	.word	0x0800f51b
 800f2d8:	0800f30f 	.word	0x0800f30f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2dc:	4b94      	ldr	r3, [pc, #592]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f003 0320 	and.w	r3, r3, #32
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d009      	beq.n	800f2fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2e8:	4b91      	ldr	r3, [pc, #580]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	08db      	lsrs	r3, r3, #3
 800f2ee:	f003 0303 	and.w	r3, r3, #3
 800f2f2:	4a90      	ldr	r2, [pc, #576]	@ (800f534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800f2f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800f2fa:	e111      	b.n	800f520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f2fc:	4b8d      	ldr	r3, [pc, #564]	@ (800f534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f2fe:	61bb      	str	r3, [r7, #24]
      break;
 800f300:	e10e      	b.n	800f520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800f302:	4b8d      	ldr	r3, [pc, #564]	@ (800f538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f304:	61bb      	str	r3, [r7, #24]
      break;
 800f306:	e10b      	b.n	800f520 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800f308:	4b8c      	ldr	r3, [pc, #560]	@ (800f53c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f30a:	61bb      	str	r3, [r7, #24]
      break;
 800f30c:	e108      	b.n	800f520 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f30e:	4b88      	ldr	r3, [pc, #544]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f312:	f003 0303 	and.w	r3, r3, #3
 800f316:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f318:	4b85      	ldr	r3, [pc, #532]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f31c:	091b      	lsrs	r3, r3, #4
 800f31e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f322:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f324:	4b82      	ldr	r3, [pc, #520]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f328:	f003 0301 	and.w	r3, r3, #1
 800f32c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f32e:	4b80      	ldr	r3, [pc, #512]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f332:	08db      	lsrs	r3, r3, #3
 800f334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	fb02 f303 	mul.w	r3, r2, r3
 800f33e:	ee07 3a90 	vmov	s15, r3
 800f342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f346:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f000 80e1 	beq.w	800f514 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2b02      	cmp	r3, #2
 800f356:	f000 8083 	beq.w	800f460 <HAL_RCC_GetSysClockFreq+0x204>
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	f200 80a1 	bhi.w	800f4a4 <HAL_RCC_GetSysClockFreq+0x248>
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d003      	beq.n	800f370 <HAL_RCC_GetSysClockFreq+0x114>
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d056      	beq.n	800f41c <HAL_RCC_GetSysClockFreq+0x1c0>
 800f36e:	e099      	b.n	800f4a4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f370:	4b6f      	ldr	r3, [pc, #444]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 0320 	and.w	r3, r3, #32
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d02d      	beq.n	800f3d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f37c:	4b6c      	ldr	r3, [pc, #432]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	08db      	lsrs	r3, r3, #3
 800f382:	f003 0303 	and.w	r3, r3, #3
 800f386:	4a6b      	ldr	r2, [pc, #428]	@ (800f534 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f388:	fa22 f303 	lsr.w	r3, r2, r3
 800f38c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	ee07 3a90 	vmov	s15, r3
 800f394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	ee07 3a90 	vmov	s15, r3
 800f39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3a6:	4b62      	ldr	r3, [pc, #392]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3ae:	ee07 3a90 	vmov	s15, r3
 800f3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800f3ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800f540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800f3d6:	e087      	b.n	800f4e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	ee07 3a90 	vmov	s15, r3
 800f3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800f544 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3ea:	4b51      	ldr	r3, [pc, #324]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3f2:	ee07 3a90 	vmov	s15, r3
 800f3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800f3fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800f540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f40a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f41a:	e065      	b.n	800f4e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	ee07 3a90 	vmov	s15, r3
 800f422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f426:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800f548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f42e:	4b40      	ldr	r3, [pc, #256]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f436:	ee07 3a90 	vmov	s15, r3
 800f43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f43e:	ed97 6a02 	vldr	s12, [r7, #8]
 800f442:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f44e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f45a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f45e:	e043      	b.n	800f4e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	ee07 3a90 	vmov	s15, r3
 800f466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f46a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800f54c <HAL_RCC_GetSysClockFreq+0x2f0>
 800f46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f472:	4b2f      	ldr	r3, [pc, #188]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f47a:	ee07 3a90 	vmov	s15, r3
 800f47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f482:	ed97 6a02 	vldr	s12, [r7, #8]
 800f486:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800f540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f49e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f4a2:	e021      	b.n	800f4e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	ee07 3a90 	vmov	s15, r3
 800f4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f548 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4b6:	4b1e      	ldr	r3, [pc, #120]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4be:	ee07 3a90 	vmov	s15, r3
 800f4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800f4ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800f540 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f4e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f4e8:	4b11      	ldr	r3, [pc, #68]	@ (800f530 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4ec:	0a5b      	lsrs	r3, r3, #9
 800f4ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	ee07 3a90 	vmov	s15, r3
 800f4fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f500:	edd7 6a07 	vldr	s13, [r7, #28]
 800f504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f50c:	ee17 3a90 	vmov	r3, s15
 800f510:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800f512:	e005      	b.n	800f520 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800f514:	2300      	movs	r3, #0
 800f516:	61bb      	str	r3, [r7, #24]
      break;
 800f518:	e002      	b.n	800f520 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800f51a:	4b07      	ldr	r3, [pc, #28]	@ (800f538 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f51c:	61bb      	str	r3, [r7, #24]
      break;
 800f51e:	bf00      	nop
  }

  return sysclockfreq;
 800f520:	69bb      	ldr	r3, [r7, #24]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3724      	adds	r7, #36	@ 0x24
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	58024400 	.word	0x58024400
 800f534:	03d09000 	.word	0x03d09000
 800f538:	003d0900 	.word	0x003d0900
 800f53c:	017d7840 	.word	0x017d7840
 800f540:	46000000 	.word	0x46000000
 800f544:	4c742400 	.word	0x4c742400
 800f548:	4a742400 	.word	0x4a742400
 800f54c:	4bbebc20 	.word	0x4bbebc20

0800f550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f556:	f7ff fe81 	bl	800f25c <HAL_RCC_GetSysClockFreq>
 800f55a:	4602      	mov	r2, r0
 800f55c:	4b10      	ldr	r3, [pc, #64]	@ (800f5a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800f55e:	699b      	ldr	r3, [r3, #24]
 800f560:	0a1b      	lsrs	r3, r3, #8
 800f562:	f003 030f 	and.w	r3, r3, #15
 800f566:	490f      	ldr	r1, [pc, #60]	@ (800f5a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800f568:	5ccb      	ldrb	r3, [r1, r3]
 800f56a:	f003 031f 	and.w	r3, r3, #31
 800f56e:	fa22 f303 	lsr.w	r3, r2, r3
 800f572:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f574:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800f576:	699b      	ldr	r3, [r3, #24]
 800f578:	f003 030f 	and.w	r3, r3, #15
 800f57c:	4a09      	ldr	r2, [pc, #36]	@ (800f5a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800f57e:	5cd3      	ldrb	r3, [r2, r3]
 800f580:	f003 031f 	and.w	r3, r3, #31
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	fa22 f303 	lsr.w	r3, r2, r3
 800f58a:	4a07      	ldr	r2, [pc, #28]	@ (800f5a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800f58c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f58e:	4a07      	ldr	r2, [pc, #28]	@ (800f5ac <HAL_RCC_GetHCLKFreq+0x5c>)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f594:	4b04      	ldr	r3, [pc, #16]	@ (800f5a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800f596:	681b      	ldr	r3, [r3, #0]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3708      	adds	r7, #8
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	58024400 	.word	0x58024400
 800f5a4:	0801b334 	.word	0x0801b334
 800f5a8:	24000244 	.word	0x24000244
 800f5ac:	24000240 	.word	0x24000240

0800f5b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f5b4:	f7ff ffcc 	bl	800f550 <HAL_RCC_GetHCLKFreq>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	4b06      	ldr	r3, [pc, #24]	@ (800f5d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f5bc:	69db      	ldr	r3, [r3, #28]
 800f5be:	091b      	lsrs	r3, r3, #4
 800f5c0:	f003 0307 	and.w	r3, r3, #7
 800f5c4:	4904      	ldr	r1, [pc, #16]	@ (800f5d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f5c6:	5ccb      	ldrb	r3, [r1, r3]
 800f5c8:	f003 031f 	and.w	r3, r3, #31
 800f5cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	58024400 	.word	0x58024400
 800f5d8:	0801b334 	.word	0x0801b334

0800f5dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f5e0:	f7ff ffb6 	bl	800f550 <HAL_RCC_GetHCLKFreq>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	4b06      	ldr	r3, [pc, #24]	@ (800f600 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f5e8:	69db      	ldr	r3, [r3, #28]
 800f5ea:	0a1b      	lsrs	r3, r3, #8
 800f5ec:	f003 0307 	and.w	r3, r3, #7
 800f5f0:	4904      	ldr	r1, [pc, #16]	@ (800f604 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f5f2:	5ccb      	ldrb	r3, [r1, r3]
 800f5f4:	f003 031f 	and.w	r3, r3, #31
 800f5f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	58024400 	.word	0x58024400
 800f604:	0801b334 	.word	0x0801b334

0800f608 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f60c:	b0ca      	sub	sp, #296	@ 0x128
 800f60e:	af00      	add	r7, sp, #0
 800f610:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f614:	2300      	movs	r3, #0
 800f616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f61a:	2300      	movs	r3, #0
 800f61c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f628:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800f62c:	2500      	movs	r5, #0
 800f62e:	ea54 0305 	orrs.w	r3, r4, r5
 800f632:	d049      	beq.n	800f6c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f63a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f63e:	d02f      	beq.n	800f6a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f640:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f644:	d828      	bhi.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f64a:	d01a      	beq.n	800f682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f64c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f650:	d822      	bhi.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f652:	2b00      	cmp	r3, #0
 800f654:	d003      	beq.n	800f65e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f65a:	d007      	beq.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f65c:	e01c      	b.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f65e:	4bb8      	ldr	r3, [pc, #736]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f662:	4ab7      	ldr	r2, [pc, #732]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f668:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f66a:	e01a      	b.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f670:	3308      	adds	r3, #8
 800f672:	2102      	movs	r1, #2
 800f674:	4618      	mov	r0, r3
 800f676:	f002 fb61 	bl	8011d3c <RCCEx_PLL2_Config>
 800f67a:	4603      	mov	r3, r0
 800f67c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f680:	e00f      	b.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f686:	3328      	adds	r3, #40	@ 0x28
 800f688:	2102      	movs	r1, #2
 800f68a:	4618      	mov	r0, r3
 800f68c:	f002 fc08 	bl	8011ea0 <RCCEx_PLL3_Config>
 800f690:	4603      	mov	r3, r0
 800f692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f696:	e004      	b.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f69e:	e000      	b.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f6a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10a      	bne.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f6aa:	4ba5      	ldr	r3, [pc, #660]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f6b8:	4aa1      	ldr	r2, [pc, #644]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6ba:	430b      	orrs	r3, r1
 800f6bc:	6513      	str	r3, [r2, #80]	@ 0x50
 800f6be:	e003      	b.n	800f6c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800f6d4:	f04f 0900 	mov.w	r9, #0
 800f6d8:	ea58 0309 	orrs.w	r3, r8, r9
 800f6dc:	d047      	beq.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6e4:	2b04      	cmp	r3, #4
 800f6e6:	d82a      	bhi.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f6e8:	a201      	add	r2, pc, #4	@ (adr r2, 800f6f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ee:	bf00      	nop
 800f6f0:	0800f705 	.word	0x0800f705
 800f6f4:	0800f713 	.word	0x0800f713
 800f6f8:	0800f729 	.word	0x0800f729
 800f6fc:	0800f747 	.word	0x0800f747
 800f700:	0800f747 	.word	0x0800f747
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f704:	4b8e      	ldr	r3, [pc, #568]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f708:	4a8d      	ldr	r2, [pc, #564]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f70a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f70e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f710:	e01a      	b.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f716:	3308      	adds	r3, #8
 800f718:	2100      	movs	r1, #0
 800f71a:	4618      	mov	r0, r3
 800f71c:	f002 fb0e 	bl	8011d3c <RCCEx_PLL2_Config>
 800f720:	4603      	mov	r3, r0
 800f722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f726:	e00f      	b.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f72c:	3328      	adds	r3, #40	@ 0x28
 800f72e:	2100      	movs	r1, #0
 800f730:	4618      	mov	r0, r3
 800f732:	f002 fbb5 	bl	8011ea0 <RCCEx_PLL3_Config>
 800f736:	4603      	mov	r3, r0
 800f738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f73c:	e004      	b.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f744:	e000      	b.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f746:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d10a      	bne.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f750:	4b7b      	ldr	r3, [pc, #492]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f754:	f023 0107 	bic.w	r1, r3, #7
 800f758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f75c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f75e:	4a78      	ldr	r2, [pc, #480]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f760:	430b      	orrs	r3, r1
 800f762:	6513      	str	r3, [r2, #80]	@ 0x50
 800f764:	e003      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f76a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f776:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800f77a:	f04f 0b00 	mov.w	fp, #0
 800f77e:	ea5a 030b 	orrs.w	r3, sl, fp
 800f782:	d04c      	beq.n	800f81e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f78a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f78e:	d030      	beq.n	800f7f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f794:	d829      	bhi.n	800f7ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f796:	2bc0      	cmp	r3, #192	@ 0xc0
 800f798:	d02d      	beq.n	800f7f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f79a:	2bc0      	cmp	r3, #192	@ 0xc0
 800f79c:	d825      	bhi.n	800f7ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f79e:	2b80      	cmp	r3, #128	@ 0x80
 800f7a0:	d018      	beq.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f7a2:	2b80      	cmp	r3, #128	@ 0x80
 800f7a4:	d821      	bhi.n	800f7ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d002      	beq.n	800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f7aa:	2b40      	cmp	r3, #64	@ 0x40
 800f7ac:	d007      	beq.n	800f7be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f7ae:	e01c      	b.n	800f7ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7b0:	4b63      	ldr	r3, [pc, #396]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b4:	4a62      	ldr	r2, [pc, #392]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f7b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f7ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f7bc:	e01c      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7c2:	3308      	adds	r3, #8
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f002 fab8 	bl	8011d3c <RCCEx_PLL2_Config>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f7d2:	e011      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7d8:	3328      	adds	r3, #40	@ 0x28
 800f7da:	2100      	movs	r1, #0
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f002 fb5f 	bl	8011ea0 <RCCEx_PLL3_Config>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f7e8:	e006      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f7f0:	e002      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f7f2:	bf00      	nop
 800f7f4:	e000      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f7f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d10a      	bne.n	800f816 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f800:	4b4f      	ldr	r3, [pc, #316]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f804:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800f808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f80c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f80e:	4a4c      	ldr	r2, [pc, #304]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f810:	430b      	orrs	r3, r1
 800f812:	6513      	str	r3, [r2, #80]	@ 0x50
 800f814:	e003      	b.n	800f81e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f81a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f826:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800f82a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800f82e:	2300      	movs	r3, #0
 800f830:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800f834:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800f838:	460b      	mov	r3, r1
 800f83a:	4313      	orrs	r3, r2
 800f83c:	d053      	beq.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f846:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f84a:	d035      	beq.n	800f8b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f84c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f850:	d82e      	bhi.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f852:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f856:	d031      	beq.n	800f8bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f858:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f85c:	d828      	bhi.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f85e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f862:	d01a      	beq.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f868:	d822      	bhi.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d003      	beq.n	800f876 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f86e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f872:	d007      	beq.n	800f884 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f874:	e01c      	b.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f876:	4b32      	ldr	r3, [pc, #200]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f87a:	4a31      	ldr	r2, [pc, #196]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f87c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f882:	e01c      	b.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f888:	3308      	adds	r3, #8
 800f88a:	2100      	movs	r1, #0
 800f88c:	4618      	mov	r0, r3
 800f88e:	f002 fa55 	bl	8011d3c <RCCEx_PLL2_Config>
 800f892:	4603      	mov	r3, r0
 800f894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f898:	e011      	b.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f89e:	3328      	adds	r3, #40	@ 0x28
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f002 fafc 	bl	8011ea0 <RCCEx_PLL3_Config>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f8ae:	e006      	b.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f8b6:	e002      	b.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f8b8:	bf00      	nop
 800f8ba:	e000      	b.n	800f8be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f8bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d10b      	bne.n	800f8de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f8c6:	4b1e      	ldr	r3, [pc, #120]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f8c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800f8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f8d6:	4a1a      	ldr	r2, [pc, #104]	@ (800f940 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f8d8:	430b      	orrs	r3, r1
 800f8da:	6593      	str	r3, [r2, #88]	@ 0x58
 800f8dc:	e003      	b.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f8e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800f8f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800f8fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800f900:	460b      	mov	r3, r1
 800f902:	4313      	orrs	r3, r2
 800f904:	d056      	beq.n	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f90a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f90e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f912:	d038      	beq.n	800f986 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f918:	d831      	bhi.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f91a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f91e:	d034      	beq.n	800f98a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f920:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f924:	d82b      	bhi.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f92a:	d01d      	beq.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f92c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f930:	d825      	bhi.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f932:	2b00      	cmp	r3, #0
 800f934:	d006      	beq.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f93a:	d00a      	beq.n	800f952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f93c:	e01f      	b.n	800f97e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f93e:	bf00      	nop
 800f940:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f944:	4ba2      	ldr	r3, [pc, #648]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f948:	4aa1      	ldr	r2, [pc, #644]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f94a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f94e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f950:	e01c      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f956:	3308      	adds	r3, #8
 800f958:	2100      	movs	r1, #0
 800f95a:	4618      	mov	r0, r3
 800f95c:	f002 f9ee 	bl	8011d3c <RCCEx_PLL2_Config>
 800f960:	4603      	mov	r3, r0
 800f962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f966:	e011      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f96c:	3328      	adds	r3, #40	@ 0x28
 800f96e:	2100      	movs	r1, #0
 800f970:	4618      	mov	r0, r3
 800f972:	f002 fa95 	bl	8011ea0 <RCCEx_PLL3_Config>
 800f976:	4603      	mov	r3, r0
 800f978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f97c:	e006      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f97e:	2301      	movs	r3, #1
 800f980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f984:	e002      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f986:	bf00      	nop
 800f988:	e000      	b.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f98a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f98c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10b      	bne.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f994:	4b8e      	ldr	r3, [pc, #568]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f998:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800f99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f9a4:	4a8a      	ldr	r2, [pc, #552]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f9a6:	430b      	orrs	r3, r1
 800f9a8:	6593      	str	r3, [r2, #88]	@ 0x58
 800f9aa:	e003      	b.n	800f9b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f9b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800f9c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800f9ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	d03a      	beq.n	800fa4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f9da:	2b30      	cmp	r3, #48	@ 0x30
 800f9dc:	d01f      	beq.n	800fa1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f9de:	2b30      	cmp	r3, #48	@ 0x30
 800f9e0:	d819      	bhi.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f9e2:	2b20      	cmp	r3, #32
 800f9e4:	d00c      	beq.n	800fa00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f9e6:	2b20      	cmp	r3, #32
 800f9e8:	d815      	bhi.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d019      	beq.n	800fa22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f9ee:	2b10      	cmp	r3, #16
 800f9f0:	d111      	bne.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f9f2:	4b77      	ldr	r3, [pc, #476]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9f6:	4a76      	ldr	r2, [pc, #472]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f9f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f9fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f9fe:	e011      	b.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fa00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa04:	3308      	adds	r3, #8
 800fa06:	2102      	movs	r1, #2
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f002 f997 	bl	8011d3c <RCCEx_PLL2_Config>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800fa14:	e006      	b.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fa16:	2301      	movs	r3, #1
 800fa18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fa1c:	e002      	b.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800fa1e:	bf00      	nop
 800fa20:	e000      	b.n	800fa24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800fa22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10a      	bne.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800fa2c:	4b68      	ldr	r3, [pc, #416]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800fa34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa3a:	4a65      	ldr	r2, [pc, #404]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa3c:	430b      	orrs	r3, r1
 800fa3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fa40:	e003      	b.n	800fa4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800fa4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800fa56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800fa60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800fa64:	460b      	mov	r3, r1
 800fa66:	4313      	orrs	r3, r2
 800fa68:	d051      	beq.n	800fb0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800fa6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fa74:	d035      	beq.n	800fae2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800fa76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fa7a:	d82e      	bhi.n	800fada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fa7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fa80:	d031      	beq.n	800fae6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800fa82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fa86:	d828      	bhi.n	800fada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fa88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa8c:	d01a      	beq.n	800fac4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800fa8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa92:	d822      	bhi.n	800fada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d003      	beq.n	800faa0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800fa98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa9c:	d007      	beq.n	800faae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800fa9e:	e01c      	b.n	800fada <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800faa0:	4b4b      	ldr	r3, [pc, #300]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800faa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa4:	4a4a      	ldr	r2, [pc, #296]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800faa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800faaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800faac:	e01c      	b.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800faae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fab2:	3308      	adds	r3, #8
 800fab4:	2100      	movs	r1, #0
 800fab6:	4618      	mov	r0, r3
 800fab8:	f002 f940 	bl	8011d3c <RCCEx_PLL2_Config>
 800fabc:	4603      	mov	r3, r0
 800fabe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fac2:	e011      	b.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fac8:	3328      	adds	r3, #40	@ 0x28
 800faca:	2100      	movs	r1, #0
 800facc:	4618      	mov	r0, r3
 800face:	f002 f9e7 	bl	8011ea0 <RCCEx_PLL3_Config>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fad8:	e006      	b.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fada:	2301      	movs	r3, #1
 800fadc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fae0:	e002      	b.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800fae2:	bf00      	nop
 800fae4:	e000      	b.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800fae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800faec:	2b00      	cmp	r3, #0
 800faee:	d10a      	bne.n	800fb06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800faf0:	4b37      	ldr	r3, [pc, #220]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800faf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800faf4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800faf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fafc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fafe:	4a34      	ldr	r2, [pc, #208]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fb00:	430b      	orrs	r3, r1
 800fb02:	6513      	str	r3, [r2, #80]	@ 0x50
 800fb04:	e003      	b.n	800fb0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fb0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800fb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800fb1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fb1e:	2300      	movs	r3, #0
 800fb20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800fb24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800fb28:	460b      	mov	r3, r1
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	d056      	beq.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800fb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fb38:	d033      	beq.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800fb3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fb3e:	d82c      	bhi.n	800fb9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fb40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fb44:	d02f      	beq.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800fb46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fb4a:	d826      	bhi.n	800fb9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fb4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fb50:	d02b      	beq.n	800fbaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800fb52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fb56:	d820      	bhi.n	800fb9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fb58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb5c:	d012      	beq.n	800fb84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800fb5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb62:	d81a      	bhi.n	800fb9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d022      	beq.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800fb68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb6c:	d115      	bne.n	800fb9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb72:	3308      	adds	r3, #8
 800fb74:	2101      	movs	r1, #1
 800fb76:	4618      	mov	r0, r3
 800fb78:	f002 f8e0 	bl	8011d3c <RCCEx_PLL2_Config>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fb82:	e015      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb88:	3328      	adds	r3, #40	@ 0x28
 800fb8a:	2101      	movs	r1, #1
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f002 f987 	bl	8011ea0 <RCCEx_PLL3_Config>
 800fb92:	4603      	mov	r3, r0
 800fb94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fb98:	e00a      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fba0:	e006      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fba2:	bf00      	nop
 800fba4:	e004      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fba6:	bf00      	nop
 800fba8:	e002      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fbaa:	bf00      	nop
 800fbac:	e000      	b.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fbae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d10d      	bne.n	800fbd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800fbb8:	4b05      	ldr	r3, [pc, #20]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fbba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800fbc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fbc6:	4a02      	ldr	r2, [pc, #8]	@ (800fbd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fbc8:	430b      	orrs	r3, r1
 800fbca:	6513      	str	r3, [r2, #80]	@ 0x50
 800fbcc:	e006      	b.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800fbce:	bf00      	nop
 800fbd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fbd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800fbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800fbe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800fbec:	2300      	movs	r3, #0
 800fbee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fbf2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	d055      	beq.n	800fca8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800fbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fc04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc08:	d033      	beq.n	800fc72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800fc0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc0e:	d82c      	bhi.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fc10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc14:	d02f      	beq.n	800fc76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800fc16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc1a:	d826      	bhi.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fc1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc20:	d02b      	beq.n	800fc7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800fc22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc26:	d820      	bhi.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fc28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc2c:	d012      	beq.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800fc2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc32:	d81a      	bhi.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d022      	beq.n	800fc7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800fc38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc3c:	d115      	bne.n	800fc6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc42:	3308      	adds	r3, #8
 800fc44:	2101      	movs	r1, #1
 800fc46:	4618      	mov	r0, r3
 800fc48:	f002 f878 	bl	8011d3c <RCCEx_PLL2_Config>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fc52:	e015      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fc54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc58:	3328      	adds	r3, #40	@ 0x28
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f002 f91f 	bl	8011ea0 <RCCEx_PLL3_Config>
 800fc62:	4603      	mov	r3, r0
 800fc64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fc68:	e00a      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fc70:	e006      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fc72:	bf00      	nop
 800fc74:	e004      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fc76:	bf00      	nop
 800fc78:	e002      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fc7a:	bf00      	nop
 800fc7c:	e000      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fc7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10b      	bne.n	800fca0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800fc88:	4ba3      	ldr	r3, [pc, #652]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800fc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fc98:	4a9f      	ldr	r2, [pc, #636]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc9a:	430b      	orrs	r3, r1
 800fc9c:	6593      	str	r3, [r2, #88]	@ 0x58
 800fc9e:	e003      	b.n	800fca8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800fca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800fcb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fcb8:	2300      	movs	r3, #0
 800fcba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800fcbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	d037      	beq.n	800fd38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800fcc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcd2:	d00e      	beq.n	800fcf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800fcd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fcd8:	d816      	bhi.n	800fd08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d018      	beq.n	800fd10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800fcde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fce2:	d111      	bne.n	800fd08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fce4:	4b8c      	ldr	r3, [pc, #560]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fce8:	4a8b      	ldr	r2, [pc, #556]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fcee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fcf0:	e00f      	b.n	800fd12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcf6:	3308      	adds	r3, #8
 800fcf8:	2101      	movs	r1, #1
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f002 f81e 	bl	8011d3c <RCCEx_PLL2_Config>
 800fd00:	4603      	mov	r3, r0
 800fd02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fd06:	e004      	b.n	800fd12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fd0e:	e000      	b.n	800fd12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800fd10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d10a      	bne.n	800fd30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800fd1a:	4b7f      	ldr	r3, [pc, #508]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800fd22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd28:	4a7b      	ldr	r2, [pc, #492]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd2a:	430b      	orrs	r3, r1
 800fd2c:	6513      	str	r3, [r2, #80]	@ 0x50
 800fd2e:	e003      	b.n	800fd38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fd38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800fd44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fd48:	2300      	movs	r3, #0
 800fd4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fd4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800fd52:	460b      	mov	r3, r1
 800fd54:	4313      	orrs	r3, r2
 800fd56:	d039      	beq.n	800fdcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800fd58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd5e:	2b03      	cmp	r3, #3
 800fd60:	d81c      	bhi.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800fd62:	a201      	add	r2, pc, #4	@ (adr r2, 800fd68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800fd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd68:	0800fda5 	.word	0x0800fda5
 800fd6c:	0800fd79 	.word	0x0800fd79
 800fd70:	0800fd87 	.word	0x0800fd87
 800fd74:	0800fda5 	.word	0x0800fda5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd78:	4b67      	ldr	r3, [pc, #412]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7c:	4a66      	ldr	r2, [pc, #408]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fd82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fd84:	e00f      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd8a:	3308      	adds	r3, #8
 800fd8c:	2102      	movs	r1, #2
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f001 ffd4 	bl	8011d3c <RCCEx_PLL2_Config>
 800fd94:	4603      	mov	r3, r0
 800fd96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fd9a:	e004      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fda2:	e000      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800fda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fda6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10a      	bne.n	800fdc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fdae:	4b5a      	ldr	r3, [pc, #360]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fdb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdb2:	f023 0103 	bic.w	r1, r3, #3
 800fdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fdbc:	4a56      	ldr	r2, [pc, #344]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fdbe:	430b      	orrs	r3, r1
 800fdc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fdc2:	e003      	b.n	800fdcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fdc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fdcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800fdd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fddc:	2300      	movs	r3, #0
 800fdde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800fde2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800fde6:	460b      	mov	r3, r1
 800fde8:	4313      	orrs	r3, r2
 800fdea:	f000 809f 	beq.w	800ff2c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fdee:	4b4b      	ldr	r3, [pc, #300]	@ (800ff1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a4a      	ldr	r2, [pc, #296]	@ (800ff1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fdf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fdf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fdfa:	f7f3 fc99 	bl	8003730 <HAL_GetTick>
 800fdfe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fe02:	e00b      	b.n	800fe1c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe04:	f7f3 fc94 	bl	8003730 <HAL_GetTick>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800fe0e:	1ad3      	subs	r3, r2, r3
 800fe10:	2b64      	cmp	r3, #100	@ 0x64
 800fe12:	d903      	bls.n	800fe1c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800fe14:	2303      	movs	r3, #3
 800fe16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fe1a:	e005      	b.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fe1c:	4b3f      	ldr	r3, [pc, #252]	@ (800ff1c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d0ed      	beq.n	800fe04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800fe28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d179      	bne.n	800ff24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fe30:	4b39      	ldr	r3, [pc, #228]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fe34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fe3c:	4053      	eors	r3, r2
 800fe3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d015      	beq.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fe46:	4b34      	ldr	r3, [pc, #208]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fe4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fe52:	4b31      	ldr	r3, [pc, #196]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe56:	4a30      	ldr	r2, [pc, #192]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fe5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fe5e:	4b2e      	ldr	r3, [pc, #184]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe62:	4a2d      	ldr	r2, [pc, #180]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fe68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800fe6a:	4a2b      	ldr	r2, [pc, #172]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fe6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fe70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fe72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fe7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe7e:	d118      	bne.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe80:	f7f3 fc56 	bl	8003730 <HAL_GetTick>
 800fe84:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fe88:	e00d      	b.n	800fea6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fe8a:	f7f3 fc51 	bl	8003730 <HAL_GetTick>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800fe94:	1ad2      	subs	r2, r2, r3
 800fe96:	f241 3388 	movw	r3, #5000	@ 0x1388
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d903      	bls.n	800fea6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800fe9e:	2303      	movs	r3, #3
 800fea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800fea4:	e005      	b.n	800feb2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fea6:	4b1c      	ldr	r3, [pc, #112]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feaa:	f003 0302 	and.w	r3, r3, #2
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d0eb      	beq.n	800fe8a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800feb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d129      	bne.n	800ff0e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800feba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800febe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800feca:	d10e      	bne.n	800feea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800fecc:	4b12      	ldr	r3, [pc, #72]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fece:	691b      	ldr	r3, [r3, #16]
 800fed0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800fed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fedc:	091a      	lsrs	r2, r3, #4
 800fede:	4b10      	ldr	r3, [pc, #64]	@ (800ff20 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800fee0:	4013      	ands	r3, r2
 800fee2:	4a0d      	ldr	r2, [pc, #52]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fee4:	430b      	orrs	r3, r1
 800fee6:	6113      	str	r3, [r2, #16]
 800fee8:	e005      	b.n	800fef6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800feea:	4b0b      	ldr	r3, [pc, #44]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	4a0a      	ldr	r2, [pc, #40]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fef0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fef4:	6113      	str	r3, [r2, #16]
 800fef6:	4b08      	ldr	r3, [pc, #32]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fef8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800fefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fefe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ff02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ff06:	4a04      	ldr	r2, [pc, #16]	@ (800ff18 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ff08:	430b      	orrs	r3, r1
 800ff0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ff0c:	e00e      	b.n	800ff2c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ff0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ff16:	e009      	b.n	800ff2c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ff18:	58024400 	.word	0x58024400
 800ff1c:	58024800 	.word	0x58024800
 800ff20:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ff2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	f002 0301 	and.w	r3, r2, #1
 800ff38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ff42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ff46:	460b      	mov	r3, r1
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	f000 8089 	beq.w	8010060 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ff4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff54:	2b28      	cmp	r3, #40	@ 0x28
 800ff56:	d86b      	bhi.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ff58:	a201      	add	r2, pc, #4	@ (adr r2, 800ff60 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ff5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff5e:	bf00      	nop
 800ff60:	08010039 	.word	0x08010039
 800ff64:	08010031 	.word	0x08010031
 800ff68:	08010031 	.word	0x08010031
 800ff6c:	08010031 	.word	0x08010031
 800ff70:	08010031 	.word	0x08010031
 800ff74:	08010031 	.word	0x08010031
 800ff78:	08010031 	.word	0x08010031
 800ff7c:	08010031 	.word	0x08010031
 800ff80:	08010005 	.word	0x08010005
 800ff84:	08010031 	.word	0x08010031
 800ff88:	08010031 	.word	0x08010031
 800ff8c:	08010031 	.word	0x08010031
 800ff90:	08010031 	.word	0x08010031
 800ff94:	08010031 	.word	0x08010031
 800ff98:	08010031 	.word	0x08010031
 800ff9c:	08010031 	.word	0x08010031
 800ffa0:	0801001b 	.word	0x0801001b
 800ffa4:	08010031 	.word	0x08010031
 800ffa8:	08010031 	.word	0x08010031
 800ffac:	08010031 	.word	0x08010031
 800ffb0:	08010031 	.word	0x08010031
 800ffb4:	08010031 	.word	0x08010031
 800ffb8:	08010031 	.word	0x08010031
 800ffbc:	08010031 	.word	0x08010031
 800ffc0:	08010039 	.word	0x08010039
 800ffc4:	08010031 	.word	0x08010031
 800ffc8:	08010031 	.word	0x08010031
 800ffcc:	08010031 	.word	0x08010031
 800ffd0:	08010031 	.word	0x08010031
 800ffd4:	08010031 	.word	0x08010031
 800ffd8:	08010031 	.word	0x08010031
 800ffdc:	08010031 	.word	0x08010031
 800ffe0:	08010039 	.word	0x08010039
 800ffe4:	08010031 	.word	0x08010031
 800ffe8:	08010031 	.word	0x08010031
 800ffec:	08010031 	.word	0x08010031
 800fff0:	08010031 	.word	0x08010031
 800fff4:	08010031 	.word	0x08010031
 800fff8:	08010031 	.word	0x08010031
 800fffc:	08010031 	.word	0x08010031
 8010000:	08010039 	.word	0x08010039
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010008:	3308      	adds	r3, #8
 801000a:	2101      	movs	r1, #1
 801000c:	4618      	mov	r0, r3
 801000e:	f001 fe95 	bl	8011d3c <RCCEx_PLL2_Config>
 8010012:	4603      	mov	r3, r0
 8010014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010018:	e00f      	b.n	801003a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801001a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801001e:	3328      	adds	r3, #40	@ 0x28
 8010020:	2101      	movs	r1, #1
 8010022:	4618      	mov	r0, r3
 8010024:	f001 ff3c 	bl	8011ea0 <RCCEx_PLL3_Config>
 8010028:	4603      	mov	r3, r0
 801002a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801002e:	e004      	b.n	801003a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010030:	2301      	movs	r3, #1
 8010032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010036:	e000      	b.n	801003a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8010038:	bf00      	nop
    }

    if (ret == HAL_OK)
 801003a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801003e:	2b00      	cmp	r3, #0
 8010040:	d10a      	bne.n	8010058 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010042:	4bbf      	ldr	r3, [pc, #764]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010046:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801004a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801004e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010050:	4abb      	ldr	r2, [pc, #748]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010052:	430b      	orrs	r3, r1
 8010054:	6553      	str	r3, [r2, #84]	@ 0x54
 8010056:	e003      	b.n	8010060 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801005c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010068:	f002 0302 	and.w	r3, r2, #2
 801006c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010070:	2300      	movs	r3, #0
 8010072:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010076:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801007a:	460b      	mov	r3, r1
 801007c:	4313      	orrs	r3, r2
 801007e:	d041      	beq.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010086:	2b05      	cmp	r3, #5
 8010088:	d824      	bhi.n	80100d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801008a:	a201      	add	r2, pc, #4	@ (adr r2, 8010090 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801008c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010090:	080100dd 	.word	0x080100dd
 8010094:	080100a9 	.word	0x080100a9
 8010098:	080100bf 	.word	0x080100bf
 801009c:	080100dd 	.word	0x080100dd
 80100a0:	080100dd 	.word	0x080100dd
 80100a4:	080100dd 	.word	0x080100dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80100a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100ac:	3308      	adds	r3, #8
 80100ae:	2101      	movs	r1, #1
 80100b0:	4618      	mov	r0, r3
 80100b2:	f001 fe43 	bl	8011d3c <RCCEx_PLL2_Config>
 80100b6:	4603      	mov	r3, r0
 80100b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80100bc:	e00f      	b.n	80100de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80100be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100c2:	3328      	adds	r3, #40	@ 0x28
 80100c4:	2101      	movs	r1, #1
 80100c6:	4618      	mov	r0, r3
 80100c8:	f001 feea 	bl	8011ea0 <RCCEx_PLL3_Config>
 80100cc:	4603      	mov	r3, r0
 80100ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80100d2:	e004      	b.n	80100de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80100d4:	2301      	movs	r3, #1
 80100d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80100da:	e000      	b.n	80100de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80100dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d10a      	bne.n	80100fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80100e6:	4b96      	ldr	r3, [pc, #600]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80100e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100ea:	f023 0107 	bic.w	r1, r3, #7
 80100ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100f4:	4a92      	ldr	r2, [pc, #584]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80100f6:	430b      	orrs	r3, r1
 80100f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80100fa:	e003      	b.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	f002 0304 	and.w	r3, r2, #4
 8010110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010114:	2300      	movs	r3, #0
 8010116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801011a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801011e:	460b      	mov	r3, r1
 8010120:	4313      	orrs	r3, r2
 8010122:	d044      	beq.n	80101ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801012c:	2b05      	cmp	r3, #5
 801012e:	d825      	bhi.n	801017c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8010130:	a201      	add	r2, pc, #4	@ (adr r2, 8010138 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8010132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010136:	bf00      	nop
 8010138:	08010185 	.word	0x08010185
 801013c:	08010151 	.word	0x08010151
 8010140:	08010167 	.word	0x08010167
 8010144:	08010185 	.word	0x08010185
 8010148:	08010185 	.word	0x08010185
 801014c:	08010185 	.word	0x08010185
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010154:	3308      	adds	r3, #8
 8010156:	2101      	movs	r1, #1
 8010158:	4618      	mov	r0, r3
 801015a:	f001 fdef 	bl	8011d3c <RCCEx_PLL2_Config>
 801015e:	4603      	mov	r3, r0
 8010160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010164:	e00f      	b.n	8010186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801016a:	3328      	adds	r3, #40	@ 0x28
 801016c:	2101      	movs	r1, #1
 801016e:	4618      	mov	r0, r3
 8010170:	f001 fe96 	bl	8011ea0 <RCCEx_PLL3_Config>
 8010174:	4603      	mov	r3, r0
 8010176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801017a:	e004      	b.n	8010186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010182:	e000      	b.n	8010186 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8010184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801018a:	2b00      	cmp	r3, #0
 801018c:	d10b      	bne.n	80101a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801018e:	4b6c      	ldr	r3, [pc, #432]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010192:	f023 0107 	bic.w	r1, r3, #7
 8010196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801019a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801019e:	4a68      	ldr	r2, [pc, #416]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80101a0:	430b      	orrs	r3, r1
 80101a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80101a4:	e003      	b.n	80101ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80101aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80101ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b6:	f002 0320 	and.w	r3, r2, #32
 80101ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80101be:	2300      	movs	r3, #0
 80101c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80101c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80101c8:	460b      	mov	r3, r1
 80101ca:	4313      	orrs	r3, r2
 80101cc:	d055      	beq.n	801027a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80101ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80101da:	d033      	beq.n	8010244 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80101dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80101e0:	d82c      	bhi.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80101e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101e6:	d02f      	beq.n	8010248 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80101e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80101ec:	d826      	bhi.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80101ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80101f2:	d02b      	beq.n	801024c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80101f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80101f8:	d820      	bhi.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80101fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101fe:	d012      	beq.n	8010226 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8010200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010204:	d81a      	bhi.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010206:	2b00      	cmp	r3, #0
 8010208:	d022      	beq.n	8010250 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801020a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801020e:	d115      	bne.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010214:	3308      	adds	r3, #8
 8010216:	2100      	movs	r1, #0
 8010218:	4618      	mov	r0, r3
 801021a:	f001 fd8f 	bl	8011d3c <RCCEx_PLL2_Config>
 801021e:	4603      	mov	r3, r0
 8010220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010224:	e015      	b.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801022a:	3328      	adds	r3, #40	@ 0x28
 801022c:	2102      	movs	r1, #2
 801022e:	4618      	mov	r0, r3
 8010230:	f001 fe36 	bl	8011ea0 <RCCEx_PLL3_Config>
 8010234:	4603      	mov	r3, r0
 8010236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801023a:	e00a      	b.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801023c:	2301      	movs	r3, #1
 801023e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010242:	e006      	b.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010244:	bf00      	nop
 8010246:	e004      	b.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010248:	bf00      	nop
 801024a:	e002      	b.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801024c:	bf00      	nop
 801024e:	e000      	b.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010256:	2b00      	cmp	r3, #0
 8010258:	d10b      	bne.n	8010272 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801025a:	4b39      	ldr	r3, [pc, #228]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801025c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801025e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8010262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801026a:	4a35      	ldr	r2, [pc, #212]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801026c:	430b      	orrs	r3, r1
 801026e:	6553      	str	r3, [r2, #84]	@ 0x54
 8010270:	e003      	b.n	801027a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801027a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8010286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801028a:	2300      	movs	r3, #0
 801028c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010290:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8010294:	460b      	mov	r3, r1
 8010296:	4313      	orrs	r3, r2
 8010298:	d058      	beq.n	801034c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801029a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801029e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80102a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80102a6:	d033      	beq.n	8010310 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80102a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80102ac:	d82c      	bhi.n	8010308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80102ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102b2:	d02f      	beq.n	8010314 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80102b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102b8:	d826      	bhi.n	8010308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80102ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80102be:	d02b      	beq.n	8010318 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80102c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80102c4:	d820      	bhi.n	8010308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80102c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102ca:	d012      	beq.n	80102f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80102cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102d0:	d81a      	bhi.n	8010308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d022      	beq.n	801031c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80102d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102da:	d115      	bne.n	8010308 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80102dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102e0:	3308      	adds	r3, #8
 80102e2:	2100      	movs	r1, #0
 80102e4:	4618      	mov	r0, r3
 80102e6:	f001 fd29 	bl	8011d3c <RCCEx_PLL2_Config>
 80102ea:	4603      	mov	r3, r0
 80102ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80102f0:	e015      	b.n	801031e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80102f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102f6:	3328      	adds	r3, #40	@ 0x28
 80102f8:	2102      	movs	r1, #2
 80102fa:	4618      	mov	r0, r3
 80102fc:	f001 fdd0 	bl	8011ea0 <RCCEx_PLL3_Config>
 8010300:	4603      	mov	r3, r0
 8010302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010306:	e00a      	b.n	801031e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010308:	2301      	movs	r3, #1
 801030a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801030e:	e006      	b.n	801031e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010310:	bf00      	nop
 8010312:	e004      	b.n	801031e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010314:	bf00      	nop
 8010316:	e002      	b.n	801031e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010318:	bf00      	nop
 801031a:	e000      	b.n	801031e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801031c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801031e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010322:	2b00      	cmp	r3, #0
 8010324:	d10e      	bne.n	8010344 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010326:	4b06      	ldr	r3, [pc, #24]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801032a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801032e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010332:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010336:	4a02      	ldr	r2, [pc, #8]	@ (8010340 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010338:	430b      	orrs	r3, r1
 801033a:	6593      	str	r3, [r2, #88]	@ 0x58
 801033c:	e006      	b.n	801034c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801033e:	bf00      	nop
 8010340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801034c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8010358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801035c:	2300      	movs	r3, #0
 801035e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010362:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8010366:	460b      	mov	r3, r1
 8010368:	4313      	orrs	r3, r2
 801036a:	d055      	beq.n	8010418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801036c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010374:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8010378:	d033      	beq.n	80103e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801037a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801037e:	d82c      	bhi.n	80103da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010384:	d02f      	beq.n	80103e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8010386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801038a:	d826      	bhi.n	80103da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801038c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010390:	d02b      	beq.n	80103ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8010392:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8010396:	d820      	bhi.n	80103da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801039c:	d012      	beq.n	80103c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801039e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80103a2:	d81a      	bhi.n	80103da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d022      	beq.n	80103ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80103a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80103ac:	d115      	bne.n	80103da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80103ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103b2:	3308      	adds	r3, #8
 80103b4:	2100      	movs	r1, #0
 80103b6:	4618      	mov	r0, r3
 80103b8:	f001 fcc0 	bl	8011d3c <RCCEx_PLL2_Config>
 80103bc:	4603      	mov	r3, r0
 80103be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80103c2:	e015      	b.n	80103f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80103c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103c8:	3328      	adds	r3, #40	@ 0x28
 80103ca:	2102      	movs	r1, #2
 80103cc:	4618      	mov	r0, r3
 80103ce:	f001 fd67 	bl	8011ea0 <RCCEx_PLL3_Config>
 80103d2:	4603      	mov	r3, r0
 80103d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80103d8:	e00a      	b.n	80103f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80103da:	2301      	movs	r3, #1
 80103dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80103e0:	e006      	b.n	80103f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80103e2:	bf00      	nop
 80103e4:	e004      	b.n	80103f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80103e6:	bf00      	nop
 80103e8:	e002      	b.n	80103f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80103ea:	bf00      	nop
 80103ec:	e000      	b.n	80103f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80103ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80103f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d10b      	bne.n	8010410 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80103f8:	4ba1      	ldr	r3, [pc, #644]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80103fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8010400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010404:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010408:	4a9d      	ldr	r2, [pc, #628]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801040a:	430b      	orrs	r3, r1
 801040c:	6593      	str	r3, [r2, #88]	@ 0x58
 801040e:	e003      	b.n	8010418 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	f002 0308 	and.w	r3, r2, #8
 8010424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010428:	2300      	movs	r3, #0
 801042a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801042e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8010432:	460b      	mov	r3, r1
 8010434:	4313      	orrs	r3, r2
 8010436:	d01e      	beq.n	8010476 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801043c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010444:	d10c      	bne.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801044a:	3328      	adds	r3, #40	@ 0x28
 801044c:	2102      	movs	r1, #2
 801044e:	4618      	mov	r0, r3
 8010450:	f001 fd26 	bl	8011ea0 <RCCEx_PLL3_Config>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d002      	beq.n	8010460 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801045a:	2301      	movs	r3, #1
 801045c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010460:	4b87      	ldr	r3, [pc, #540]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010464:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801046c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010470:	4a83      	ldr	r2, [pc, #524]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010472:	430b      	orrs	r3, r1
 8010474:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801047a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047e:	f002 0310 	and.w	r3, r2, #16
 8010482:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010486:	2300      	movs	r3, #0
 8010488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801048c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8010490:	460b      	mov	r3, r1
 8010492:	4313      	orrs	r3, r2
 8010494:	d01e      	beq.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8010496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801049a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801049e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80104a2:	d10c      	bne.n	80104be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80104a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104a8:	3328      	adds	r3, #40	@ 0x28
 80104aa:	2102      	movs	r1, #2
 80104ac:	4618      	mov	r0, r3
 80104ae:	f001 fcf7 	bl	8011ea0 <RCCEx_PLL3_Config>
 80104b2:	4603      	mov	r3, r0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80104b8:	2301      	movs	r3, #1
 80104ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80104be:	4b70      	ldr	r3, [pc, #448]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80104c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80104c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80104ce:	4a6c      	ldr	r2, [pc, #432]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80104d0:	430b      	orrs	r3, r1
 80104d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80104d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80104e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80104e4:	2300      	movs	r3, #0
 80104e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80104ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80104ee:	460b      	mov	r3, r1
 80104f0:	4313      	orrs	r3, r2
 80104f2:	d03e      	beq.n	8010572 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80104f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80104fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010500:	d022      	beq.n	8010548 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8010502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010506:	d81b      	bhi.n	8010540 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8010508:	2b00      	cmp	r3, #0
 801050a:	d003      	beq.n	8010514 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801050c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010510:	d00b      	beq.n	801052a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8010512:	e015      	b.n	8010540 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010518:	3308      	adds	r3, #8
 801051a:	2100      	movs	r1, #0
 801051c:	4618      	mov	r0, r3
 801051e:	f001 fc0d 	bl	8011d3c <RCCEx_PLL2_Config>
 8010522:	4603      	mov	r3, r0
 8010524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010528:	e00f      	b.n	801054a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801052a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801052e:	3328      	adds	r3, #40	@ 0x28
 8010530:	2102      	movs	r1, #2
 8010532:	4618      	mov	r0, r3
 8010534:	f001 fcb4 	bl	8011ea0 <RCCEx_PLL3_Config>
 8010538:	4603      	mov	r3, r0
 801053a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801053e:	e004      	b.n	801054a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010540:	2301      	movs	r3, #1
 8010542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010546:	e000      	b.n	801054a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8010548:	bf00      	nop
    }

    if (ret == HAL_OK)
 801054a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10b      	bne.n	801056a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010552:	4b4b      	ldr	r3, [pc, #300]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010556:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801055a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801055e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010562:	4a47      	ldr	r2, [pc, #284]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010564:	430b      	orrs	r3, r1
 8010566:	6593      	str	r3, [r2, #88]	@ 0x58
 8010568:	e003      	b.n	8010572 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801056a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801056e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801057e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010580:	2300      	movs	r3, #0
 8010582:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010584:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8010588:	460b      	mov	r3, r1
 801058a:	4313      	orrs	r3, r2
 801058c:	d03b      	beq.n	8010606 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801058e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010596:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801059a:	d01f      	beq.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801059c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80105a0:	d818      	bhi.n	80105d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80105a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105a6:	d003      	beq.n	80105b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80105a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80105ac:	d007      	beq.n	80105be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80105ae:	e011      	b.n	80105d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105b0:	4b33      	ldr	r3, [pc, #204]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80105b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105b4:	4a32      	ldr	r2, [pc, #200]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80105b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80105ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80105bc:	e00f      	b.n	80105de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80105be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105c2:	3328      	adds	r3, #40	@ 0x28
 80105c4:	2101      	movs	r1, #1
 80105c6:	4618      	mov	r0, r3
 80105c8:	f001 fc6a 	bl	8011ea0 <RCCEx_PLL3_Config>
 80105cc:	4603      	mov	r3, r0
 80105ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80105d2:	e004      	b.n	80105de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80105d4:	2301      	movs	r3, #1
 80105d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80105da:	e000      	b.n	80105de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80105dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80105de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d10b      	bne.n	80105fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80105e6:	4b26      	ldr	r3, [pc, #152]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80105e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80105ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105f6:	4a22      	ldr	r2, [pc, #136]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80105f8:	430b      	orrs	r3, r1
 80105fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80105fc:	e003      	b.n	8010606 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8010612:	673b      	str	r3, [r7, #112]	@ 0x70
 8010614:	2300      	movs	r3, #0
 8010616:	677b      	str	r3, [r7, #116]	@ 0x74
 8010618:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801061c:	460b      	mov	r3, r1
 801061e:	4313      	orrs	r3, r2
 8010620:	d034      	beq.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8010622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010628:	2b00      	cmp	r3, #0
 801062a:	d003      	beq.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801062c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010630:	d007      	beq.n	8010642 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8010632:	e011      	b.n	8010658 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010634:	4b12      	ldr	r3, [pc, #72]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010638:	4a11      	ldr	r2, [pc, #68]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801063a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801063e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010640:	e00e      	b.n	8010660 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010646:	3308      	adds	r3, #8
 8010648:	2102      	movs	r1, #2
 801064a:	4618      	mov	r0, r3
 801064c:	f001 fb76 	bl	8011d3c <RCCEx_PLL2_Config>
 8010650:	4603      	mov	r3, r0
 8010652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010656:	e003      	b.n	8010660 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8010658:	2301      	movs	r3, #1
 801065a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801065e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010664:	2b00      	cmp	r3, #0
 8010666:	d10d      	bne.n	8010684 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010668:	4b05      	ldr	r3, [pc, #20]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801066a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801066c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010676:	4a02      	ldr	r2, [pc, #8]	@ (8010680 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010678:	430b      	orrs	r3, r1
 801067a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801067c:	e006      	b.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801067e:	bf00      	nop
 8010680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010688:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801068c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010694:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8010698:	66bb      	str	r3, [r7, #104]	@ 0x68
 801069a:	2300      	movs	r3, #0
 801069c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801069e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80106a2:	460b      	mov	r3, r1
 80106a4:	4313      	orrs	r3, r2
 80106a6:	d00c      	beq.n	80106c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80106a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106ac:	3328      	adds	r3, #40	@ 0x28
 80106ae:	2102      	movs	r1, #2
 80106b0:	4618      	mov	r0, r3
 80106b2:	f001 fbf5 	bl	8011ea0 <RCCEx_PLL3_Config>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d002      	beq.n	80106c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80106bc:	2301      	movs	r3, #1
 80106be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80106c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80106ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80106d0:	2300      	movs	r3, #0
 80106d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80106d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80106d8:	460b      	mov	r3, r1
 80106da:	4313      	orrs	r3, r2
 80106dc:	d038      	beq.n	8010750 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80106de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80106ea:	d018      	beq.n	801071e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80106ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80106f0:	d811      	bhi.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80106f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80106f6:	d014      	beq.n	8010722 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80106f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80106fc:	d80b      	bhi.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d011      	beq.n	8010726 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8010702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010706:	d106      	bne.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010708:	4bc3      	ldr	r3, [pc, #780]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801070a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801070c:	4ac2      	ldr	r2, [pc, #776]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801070e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8010714:	e008      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010716:	2301      	movs	r3, #1
 8010718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801071c:	e004      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801071e:	bf00      	nop
 8010720:	e002      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010722:	bf00      	nop
 8010724:	e000      	b.n	8010728 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801072c:	2b00      	cmp	r3, #0
 801072e:	d10b      	bne.n	8010748 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010730:	4bb9      	ldr	r3, [pc, #740]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010734:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801073c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010740:	4ab5      	ldr	r2, [pc, #724]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010742:	430b      	orrs	r3, r1
 8010744:	6553      	str	r3, [r2, #84]	@ 0x54
 8010746:	e003      	b.n	8010750 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801074c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010758:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801075c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801075e:	2300      	movs	r3, #0
 8010760:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010762:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8010766:	460b      	mov	r3, r1
 8010768:	4313      	orrs	r3, r2
 801076a:	d009      	beq.n	8010780 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801076c:	4baa      	ldr	r3, [pc, #680]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801076e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010770:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801077a:	4aa7      	ldr	r2, [pc, #668]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801077c:	430b      	orrs	r3, r1
 801077e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010788:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801078c:	653b      	str	r3, [r7, #80]	@ 0x50
 801078e:	2300      	movs	r3, #0
 8010790:	657b      	str	r3, [r7, #84]	@ 0x54
 8010792:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8010796:	460b      	mov	r3, r1
 8010798:	4313      	orrs	r3, r2
 801079a:	d00a      	beq.n	80107b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801079c:	4b9e      	ldr	r3, [pc, #632]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801079e:	691b      	ldr	r3, [r3, #16]
 80107a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80107a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80107ac:	4a9a      	ldr	r2, [pc, #616]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80107ae:	430b      	orrs	r3, r1
 80107b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80107b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80107be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107c0:	2300      	movs	r3, #0
 80107c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80107c8:	460b      	mov	r3, r1
 80107ca:	4313      	orrs	r3, r2
 80107cc:	d009      	beq.n	80107e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80107ce:	4b92      	ldr	r3, [pc, #584]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80107d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80107d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107dc:	4a8e      	ldr	r2, [pc, #568]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80107de:	430b      	orrs	r3, r1
 80107e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80107e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80107ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80107f0:	2300      	movs	r3, #0
 80107f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80107f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80107f8:	460b      	mov	r3, r1
 80107fa:	4313      	orrs	r3, r2
 80107fc:	d00e      	beq.n	801081c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80107fe:	4b86      	ldr	r3, [pc, #536]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010800:	691b      	ldr	r3, [r3, #16]
 8010802:	4a85      	ldr	r2, [pc, #532]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010804:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010808:	6113      	str	r3, [r2, #16]
 801080a:	4b83      	ldr	r3, [pc, #524]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801080c:	6919      	ldr	r1, [r3, #16]
 801080e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010812:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010816:	4a80      	ldr	r2, [pc, #512]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010818:	430b      	orrs	r3, r1
 801081a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801081c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8010828:	63bb      	str	r3, [r7, #56]	@ 0x38
 801082a:	2300      	movs	r3, #0
 801082c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801082e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8010832:	460b      	mov	r3, r1
 8010834:	4313      	orrs	r3, r2
 8010836:	d009      	beq.n	801084c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010838:	4b77      	ldr	r3, [pc, #476]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801083a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801083c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8010840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010846:	4a74      	ldr	r2, [pc, #464]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010848:	430b      	orrs	r3, r1
 801084a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801084c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8010858:	633b      	str	r3, [r7, #48]	@ 0x30
 801085a:	2300      	movs	r3, #0
 801085c:	637b      	str	r3, [r7, #52]	@ 0x34
 801085e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8010862:	460b      	mov	r3, r1
 8010864:	4313      	orrs	r3, r2
 8010866:	d00a      	beq.n	801087e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010868:	4b6b      	ldr	r3, [pc, #428]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801086a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801086c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8010870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010878:	4a67      	ldr	r2, [pc, #412]	@ (8010a18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801087a:	430b      	orrs	r3, r1
 801087c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801087e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010886:	2100      	movs	r1, #0
 8010888:	62b9      	str	r1, [r7, #40]	@ 0x28
 801088a:	f003 0301 	and.w	r3, r3, #1
 801088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010890:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8010894:	460b      	mov	r3, r1
 8010896:	4313      	orrs	r3, r2
 8010898:	d011      	beq.n	80108be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801089a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801089e:	3308      	adds	r3, #8
 80108a0:	2100      	movs	r1, #0
 80108a2:	4618      	mov	r0, r3
 80108a4:	f001 fa4a 	bl	8011d3c <RCCEx_PLL2_Config>
 80108a8:	4603      	mov	r3, r0
 80108aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80108ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d003      	beq.n	80108be <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80108be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c6:	2100      	movs	r1, #0
 80108c8:	6239      	str	r1, [r7, #32]
 80108ca:	f003 0302 	and.w	r3, r3, #2
 80108ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80108d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80108d4:	460b      	mov	r3, r1
 80108d6:	4313      	orrs	r3, r2
 80108d8:	d011      	beq.n	80108fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80108da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108de:	3308      	adds	r3, #8
 80108e0:	2101      	movs	r1, #1
 80108e2:	4618      	mov	r0, r3
 80108e4:	f001 fa2a 	bl	8011d3c <RCCEx_PLL2_Config>
 80108e8:	4603      	mov	r3, r0
 80108ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80108ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d003      	beq.n	80108fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80108fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80108fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010906:	2100      	movs	r1, #0
 8010908:	61b9      	str	r1, [r7, #24]
 801090a:	f003 0304 	and.w	r3, r3, #4
 801090e:	61fb      	str	r3, [r7, #28]
 8010910:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010914:	460b      	mov	r3, r1
 8010916:	4313      	orrs	r3, r2
 8010918:	d011      	beq.n	801093e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801091a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801091e:	3308      	adds	r3, #8
 8010920:	2102      	movs	r1, #2
 8010922:	4618      	mov	r0, r3
 8010924:	f001 fa0a 	bl	8011d3c <RCCEx_PLL2_Config>
 8010928:	4603      	mov	r3, r0
 801092a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801092e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010932:	2b00      	cmp	r3, #0
 8010934:	d003      	beq.n	801093e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801093a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801093e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010946:	2100      	movs	r1, #0
 8010948:	6139      	str	r1, [r7, #16]
 801094a:	f003 0308 	and.w	r3, r3, #8
 801094e:	617b      	str	r3, [r7, #20]
 8010950:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010954:	460b      	mov	r3, r1
 8010956:	4313      	orrs	r3, r2
 8010958:	d011      	beq.n	801097e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801095a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801095e:	3328      	adds	r3, #40	@ 0x28
 8010960:	2100      	movs	r1, #0
 8010962:	4618      	mov	r0, r3
 8010964:	f001 fa9c 	bl	8011ea0 <RCCEx_PLL3_Config>
 8010968:	4603      	mov	r3, r0
 801096a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801096e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010972:	2b00      	cmp	r3, #0
 8010974:	d003      	beq.n	801097e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801097a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801097e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010986:	2100      	movs	r1, #0
 8010988:	60b9      	str	r1, [r7, #8]
 801098a:	f003 0310 	and.w	r3, r3, #16
 801098e:	60fb      	str	r3, [r7, #12]
 8010990:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010994:	460b      	mov	r3, r1
 8010996:	4313      	orrs	r3, r2
 8010998:	d011      	beq.n	80109be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801099a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801099e:	3328      	adds	r3, #40	@ 0x28
 80109a0:	2101      	movs	r1, #1
 80109a2:	4618      	mov	r0, r3
 80109a4:	f001 fa7c 	bl	8011ea0 <RCCEx_PLL3_Config>
 80109a8:	4603      	mov	r3, r0
 80109aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80109ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d003      	beq.n	80109be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80109be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c6:	2100      	movs	r1, #0
 80109c8:	6039      	str	r1, [r7, #0]
 80109ca:	f003 0320 	and.w	r3, r3, #32
 80109ce:	607b      	str	r3, [r7, #4]
 80109d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80109d4:	460b      	mov	r3, r1
 80109d6:	4313      	orrs	r3, r2
 80109d8:	d011      	beq.n	80109fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80109da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109de:	3328      	adds	r3, #40	@ 0x28
 80109e0:	2102      	movs	r1, #2
 80109e2:	4618      	mov	r0, r3
 80109e4:	f001 fa5c 	bl	8011ea0 <RCCEx_PLL3_Config>
 80109e8:	4603      	mov	r3, r0
 80109ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80109ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d003      	beq.n	80109fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80109fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8010a06:	2300      	movs	r3, #0
 8010a08:	e000      	b.n	8010a0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8010a0a:	2301      	movs	r3, #1
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8010a12:	46bd      	mov	sp, r7
 8010a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a18:	58024400 	.word	0x58024400

08010a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b090      	sub	sp, #64	@ 0x40
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a2a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8010a2e:	430b      	orrs	r3, r1
 8010a30:	f040 8094 	bne.w	8010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8010a34:	4b9e      	ldr	r3, [pc, #632]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a38:	f003 0307 	and.w	r3, r3, #7
 8010a3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a40:	2b04      	cmp	r3, #4
 8010a42:	f200 8087 	bhi.w	8010b54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8010a46:	a201      	add	r2, pc, #4	@ (adr r2, 8010a4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4c:	08010a61 	.word	0x08010a61
 8010a50:	08010a89 	.word	0x08010a89
 8010a54:	08010ab1 	.word	0x08010ab1
 8010a58:	08010b4d 	.word	0x08010b4d
 8010a5c:	08010ad9 	.word	0x08010ad9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010a60:	4b93      	ldr	r3, [pc, #588]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010a68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010a6c:	d108      	bne.n	8010a80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a72:	4618      	mov	r0, r3
 8010a74:	f001 f810 	bl	8011a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a7c:	f000 bd45 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a80:	2300      	movs	r3, #0
 8010a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a84:	f000 bd41 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a88:	4b89      	ldr	r3, [pc, #548]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010a90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010a94:	d108      	bne.n	8010aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a96:	f107 0318 	add.w	r3, r7, #24
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f000 fd54 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010aa4:	f000 bd31 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010aac:	f000 bd2d 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010ab0:	4b7f      	ldr	r3, [pc, #508]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010abc:	d108      	bne.n	8010ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010abe:	f107 030c 	add.w	r3, r7, #12
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f000 fe94 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010acc:	f000 bd1d 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ad4:	f000 bd19 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010ad8:	4b75      	ldr	r3, [pc, #468]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010adc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010ae0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010ae2:	4b73      	ldr	r3, [pc, #460]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f003 0304 	and.w	r3, r3, #4
 8010aea:	2b04      	cmp	r3, #4
 8010aec:	d10c      	bne.n	8010b08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d109      	bne.n	8010b08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010af4:	4b6e      	ldr	r3, [pc, #440]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	08db      	lsrs	r3, r3, #3
 8010afa:	f003 0303 	and.w	r3, r3, #3
 8010afe:	4a6d      	ldr	r2, [pc, #436]	@ (8010cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010b00:	fa22 f303 	lsr.w	r3, r2, r3
 8010b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b06:	e01f      	b.n	8010b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010b08:	4b69      	ldr	r3, [pc, #420]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b14:	d106      	bne.n	8010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8010b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010b1c:	d102      	bne.n	8010b24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010b1e:	4b66      	ldr	r3, [pc, #408]	@ (8010cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b22:	e011      	b.n	8010b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010b24:	4b62      	ldr	r3, [pc, #392]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b30:	d106      	bne.n	8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8010b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010b38:	d102      	bne.n	8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010b3a:	4b60      	ldr	r3, [pc, #384]	@ (8010cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b3e:	e003      	b.n	8010b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010b40:	2300      	movs	r3, #0
 8010b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010b44:	f000 bce1 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010b48:	f000 bcdf 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010b4c:	4b5c      	ldr	r3, [pc, #368]	@ (8010cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b50:	f000 bcdb 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010b54:	2300      	movs	r3, #0
 8010b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b58:	f000 bcd7 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b60:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8010b64:	430b      	orrs	r3, r1
 8010b66:	f040 80ad 	bne.w	8010cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010b6a:	4b51      	ldr	r3, [pc, #324]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b6e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8010b72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b7a:	d056      	beq.n	8010c2a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b82:	f200 8090 	bhi.w	8010ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b88:	2bc0      	cmp	r3, #192	@ 0xc0
 8010b8a:	f000 8088 	beq.w	8010c9e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b90:	2bc0      	cmp	r3, #192	@ 0xc0
 8010b92:	f200 8088 	bhi.w	8010ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b98:	2b80      	cmp	r3, #128	@ 0x80
 8010b9a:	d032      	beq.n	8010c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b9e:	2b80      	cmp	r3, #128	@ 0x80
 8010ba0:	f200 8081 	bhi.w	8010ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d003      	beq.n	8010bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8010baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bac:	2b40      	cmp	r3, #64	@ 0x40
 8010bae:	d014      	beq.n	8010bda <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010bb0:	e079      	b.n	8010ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010bbe:	d108      	bne.n	8010bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f000 ff67 	bl	8011a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bce:	f000 bc9c 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bd6:	f000 bc98 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010bda:	4b35      	ldr	r3, [pc, #212]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010be6:	d108      	bne.n	8010bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010be8:	f107 0318 	add.w	r3, r7, #24
 8010bec:	4618      	mov	r0, r3
 8010bee:	f000 fcab 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010bf2:	69bb      	ldr	r3, [r7, #24]
 8010bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bf6:	f000 bc88 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bfe:	f000 bc84 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c02:	4b2b      	ldr	r3, [pc, #172]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c0e:	d108      	bne.n	8010c22 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c10:	f107 030c 	add.w	r3, r7, #12
 8010c14:	4618      	mov	r0, r3
 8010c16:	f000 fdeb 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c1e:	f000 bc74 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c26:	f000 bc70 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c2a:	4b21      	ldr	r3, [pc, #132]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010c32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c34:	4b1e      	ldr	r3, [pc, #120]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f003 0304 	and.w	r3, r3, #4
 8010c3c:	2b04      	cmp	r3, #4
 8010c3e:	d10c      	bne.n	8010c5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d109      	bne.n	8010c5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010c46:	4b1a      	ldr	r3, [pc, #104]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	08db      	lsrs	r3, r3, #3
 8010c4c:	f003 0303 	and.w	r3, r3, #3
 8010c50:	4a18      	ldr	r2, [pc, #96]	@ (8010cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010c52:	fa22 f303 	lsr.w	r3, r2, r3
 8010c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c58:	e01f      	b.n	8010c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010c5a:	4b15      	ldr	r3, [pc, #84]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010c66:	d106      	bne.n	8010c76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c6e:	d102      	bne.n	8010c76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010c70:	4b11      	ldr	r3, [pc, #68]	@ (8010cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c74:	e011      	b.n	8010c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010c76:	4b0e      	ldr	r3, [pc, #56]	@ (8010cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010c82:	d106      	bne.n	8010c92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c8a:	d102      	bne.n	8010c92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8010cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c90:	e003      	b.n	8010c9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010c92:	2300      	movs	r3, #0
 8010c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010c96:	f000 bc38 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010c9a:	f000 bc36 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010c9e:	4b08      	ldr	r3, [pc, #32]	@ (8010cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ca2:	f000 bc32 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010caa:	f000 bc2e 	b.w	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010cae:	bf00      	nop
 8010cb0:	58024400 	.word	0x58024400
 8010cb4:	03d09000 	.word	0x03d09000
 8010cb8:	003d0900 	.word	0x003d0900
 8010cbc:	017d7840 	.word	0x017d7840
 8010cc0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cc8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8010ccc:	430b      	orrs	r3, r1
 8010cce:	f040 809c 	bne.w	8010e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010cd6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8010cda:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010ce2:	d054      	beq.n	8010d8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010cea:	f200 808b 	bhi.w	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010cf4:	f000 8083 	beq.w	8010dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010cfe:	f200 8081 	bhi.w	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010d08:	d02f      	beq.n	8010d6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010d10:	d878      	bhi.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d004      	beq.n	8010d22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010d1e:	d012      	beq.n	8010d46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010d20:	e070      	b.n	8010e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d22:	4b8a      	ldr	r3, [pc, #552]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d2e:	d107      	bne.n	8010d40 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d34:	4618      	mov	r0, r3
 8010d36:	f000 feaf 	bl	8011a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d3e:	e3e4      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d40:	2300      	movs	r3, #0
 8010d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d44:	e3e1      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d46:	4b81      	ldr	r3, [pc, #516]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010d52:	d107      	bne.n	8010d64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d54:	f107 0318 	add.w	r3, r7, #24
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f000 fbf5 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d62:	e3d2      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d68:	e3cf      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010d6a:	4b78      	ldr	r3, [pc, #480]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010d76:	d107      	bne.n	8010d88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d78:	f107 030c 	add.w	r3, r7, #12
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 fd37 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d86:	e3c0      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d8c:	e3bd      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010d96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010d98:	4b6c      	ldr	r3, [pc, #432]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f003 0304 	and.w	r3, r3, #4
 8010da0:	2b04      	cmp	r3, #4
 8010da2:	d10c      	bne.n	8010dbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d109      	bne.n	8010dbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010daa:	4b68      	ldr	r3, [pc, #416]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	08db      	lsrs	r3, r3, #3
 8010db0:	f003 0303 	and.w	r3, r3, #3
 8010db4:	4a66      	ldr	r2, [pc, #408]	@ (8010f50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010db6:	fa22 f303 	lsr.w	r3, r2, r3
 8010dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dbc:	e01e      	b.n	8010dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010dbe:	4b63      	ldr	r3, [pc, #396]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010dca:	d106      	bne.n	8010dda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010dd2:	d102      	bne.n	8010dda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8010f54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dd8:	e010      	b.n	8010dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010dda:	4b5c      	ldr	r3, [pc, #368]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010de6:	d106      	bne.n	8010df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010dee:	d102      	bne.n	8010df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010df0:	4b59      	ldr	r3, [pc, #356]	@ (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010df4:	e002      	b.n	8010dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010df6:	2300      	movs	r3, #0
 8010df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010dfa:	e386      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010dfc:	e385      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010dfe:	4b57      	ldr	r3, [pc, #348]	@ (8010f5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e02:	e382      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010e04:	2300      	movs	r3, #0
 8010e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e08:	e37f      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e0e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8010e12:	430b      	orrs	r3, r1
 8010e14:	f040 80a7 	bne.w	8010f66 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010e18:	4b4c      	ldr	r3, [pc, #304]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e1c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010e20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010e28:	d055      	beq.n	8010ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010e30:	f200 8096 	bhi.w	8010f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010e3a:	f000 8084 	beq.w	8010f46 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010e44:	f200 808c 	bhi.w	8010f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010e4e:	d030      	beq.n	8010eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010e56:	f200 8083 	bhi.w	8010f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d004      	beq.n	8010e6a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e66:	d012      	beq.n	8010e8e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010e68:	e07a      	b.n	8010f60 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010e6a:	4b38      	ldr	r3, [pc, #224]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010e76:	d107      	bne.n	8010e88 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f000 fe0b 	bl	8011a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e86:	e340      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e8c:	e33d      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010e9a:	d107      	bne.n	8010eac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e9c:	f107 0318 	add.w	r3, r7, #24
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f000 fb51 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010eaa:	e32e      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010eac:	2300      	movs	r3, #0
 8010eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010eb0:	e32b      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010eb2:	4b26      	ldr	r3, [pc, #152]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010ebe:	d107      	bne.n	8010ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ec0:	f107 030c 	add.w	r3, r7, #12
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f000 fc93 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ece:	e31c      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ed4:	e319      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010eda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010ede:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f003 0304 	and.w	r3, r3, #4
 8010ee8:	2b04      	cmp	r3, #4
 8010eea:	d10c      	bne.n	8010f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d109      	bne.n	8010f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ef2:	4b16      	ldr	r3, [pc, #88]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	08db      	lsrs	r3, r3, #3
 8010ef8:	f003 0303 	and.w	r3, r3, #3
 8010efc:	4a14      	ldr	r2, [pc, #80]	@ (8010f50 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010efe:	fa22 f303 	lsr.w	r3, r2, r3
 8010f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f04:	e01e      	b.n	8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010f06:	4b11      	ldr	r3, [pc, #68]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f12:	d106      	bne.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f1a:	d102      	bne.n	8010f22 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f54 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f20:	e010      	b.n	8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010f22:	4b0a      	ldr	r3, [pc, #40]	@ (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010f2e:	d106      	bne.n	8010f3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010f36:	d102      	bne.n	8010f3e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010f38:	4b07      	ldr	r3, [pc, #28]	@ (8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f3c:	e002      	b.n	8010f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010f42:	e2e2      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010f44:	e2e1      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010f46:	4b05      	ldr	r3, [pc, #20]	@ (8010f5c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f4a:	e2de      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010f4c:	58024400 	.word	0x58024400
 8010f50:	03d09000 	.word	0x03d09000
 8010f54:	003d0900 	.word	0x003d0900
 8010f58:	017d7840 	.word	0x017d7840
 8010f5c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010f60:	2300      	movs	r3, #0
 8010f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f64:	e2d1      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f6a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8010f6e:	430b      	orrs	r3, r1
 8010f70:	f040 809c 	bne.w	80110ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010f74:	4b93      	ldr	r3, [pc, #588]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f78:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8010f7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010f84:	d054      	beq.n	8011030 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010f8c:	f200 808b 	bhi.w	80110a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010f96:	f000 8083 	beq.w	80110a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010fa0:	f200 8081 	bhi.w	80110a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010faa:	d02f      	beq.n	801100c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010fb2:	d878      	bhi.n	80110a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d004      	beq.n	8010fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8010fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010fc0:	d012      	beq.n	8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010fc2:	e070      	b.n	80110a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010fc4:	4b7f      	ldr	r3, [pc, #508]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010fd0:	d107      	bne.n	8010fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f000 fd5e 	bl	8011a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010fe0:	e293      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010fe6:	e290      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010fe8:	4b76      	ldr	r3, [pc, #472]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010ff4:	d107      	bne.n	8011006 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ff6:	f107 0318 	add.w	r3, r7, #24
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f000 faa4 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011000:	69bb      	ldr	r3, [r7, #24]
 8011002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011004:	e281      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011006:	2300      	movs	r3, #0
 8011008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801100a:	e27e      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801100c:	4b6d      	ldr	r3, [pc, #436]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011018:	d107      	bne.n	801102a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801101a:	f107 030c 	add.w	r3, r7, #12
 801101e:	4618      	mov	r0, r3
 8011020:	f000 fbe6 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011028:	e26f      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801102a:	2300      	movs	r3, #0
 801102c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801102e:	e26c      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011030:	4b64      	ldr	r3, [pc, #400]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011038:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801103a:	4b62      	ldr	r3, [pc, #392]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f003 0304 	and.w	r3, r3, #4
 8011042:	2b04      	cmp	r3, #4
 8011044:	d10c      	bne.n	8011060 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011048:	2b00      	cmp	r3, #0
 801104a:	d109      	bne.n	8011060 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801104c:	4b5d      	ldr	r3, [pc, #372]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	08db      	lsrs	r3, r3, #3
 8011052:	f003 0303 	and.w	r3, r3, #3
 8011056:	4a5c      	ldr	r2, [pc, #368]	@ (80111c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011058:	fa22 f303 	lsr.w	r3, r2, r3
 801105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801105e:	e01e      	b.n	801109e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011060:	4b58      	ldr	r3, [pc, #352]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011068:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801106c:	d106      	bne.n	801107c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801106e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011074:	d102      	bne.n	801107c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011076:	4b55      	ldr	r3, [pc, #340]	@ (80111cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801107a:	e010      	b.n	801109e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801107c:	4b51      	ldr	r3, [pc, #324]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011088:	d106      	bne.n	8011098 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801108a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801108c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011090:	d102      	bne.n	8011098 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011092:	4b4f      	ldr	r3, [pc, #316]	@ (80111d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011096:	e002      	b.n	801109e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011098:	2300      	movs	r3, #0
 801109a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801109c:	e235      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801109e:	e234      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80110a0:	4b4c      	ldr	r3, [pc, #304]	@ (80111d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80110a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110a4:	e231      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80110a6:	2300      	movs	r3, #0
 80110a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110aa:	e22e      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80110ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110b0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80110b4:	430b      	orrs	r3, r1
 80110b6:	f040 808f 	bne.w	80111d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80110ba:	4b42      	ldr	r3, [pc, #264]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80110bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110be:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80110c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80110c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80110ca:	d06b      	beq.n	80111a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80110cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80110d2:	d874      	bhi.n	80111be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80110d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80110da:	d056      	beq.n	801118a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80110dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80110e2:	d86c      	bhi.n	80111be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80110e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80110ea:	d03b      	beq.n	8011164 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80110ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80110f2:	d864      	bhi.n	80111be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80110f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80110fa:	d021      	beq.n	8011140 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80110fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011102:	d85c      	bhi.n	80111be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011106:	2b00      	cmp	r3, #0
 8011108:	d004      	beq.n	8011114 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801110a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801110c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011110:	d004      	beq.n	801111c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8011112:	e054      	b.n	80111be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8011114:	f7fe fa4c 	bl	800f5b0 <HAL_RCC_GetPCLK1Freq>
 8011118:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801111a:	e1f6      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801111c:	4b29      	ldr	r3, [pc, #164]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011128:	d107      	bne.n	801113a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801112a:	f107 0318 	add.w	r3, r7, #24
 801112e:	4618      	mov	r0, r3
 8011130:	f000 fa0a 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011138:	e1e7      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801113a:	2300      	movs	r3, #0
 801113c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801113e:	e1e4      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011140:	4b20      	ldr	r3, [pc, #128]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801114c:	d107      	bne.n	801115e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801114e:	f107 030c 	add.w	r3, r7, #12
 8011152:	4618      	mov	r0, r3
 8011154:	f000 fb4c 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801115c:	e1d5      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801115e:	2300      	movs	r3, #0
 8011160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011162:	e1d2      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011164:	4b17      	ldr	r3, [pc, #92]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f003 0304 	and.w	r3, r3, #4
 801116c:	2b04      	cmp	r3, #4
 801116e:	d109      	bne.n	8011184 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011170:	4b14      	ldr	r3, [pc, #80]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	08db      	lsrs	r3, r3, #3
 8011176:	f003 0303 	and.w	r3, r3, #3
 801117a:	4a13      	ldr	r2, [pc, #76]	@ (80111c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801117c:	fa22 f303 	lsr.w	r3, r2, r3
 8011180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011182:	e1c2      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011184:	2300      	movs	r3, #0
 8011186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011188:	e1bf      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801118a:	4b0e      	ldr	r3, [pc, #56]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011196:	d102      	bne.n	801119e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8011198:	4b0c      	ldr	r3, [pc, #48]	@ (80111cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801119c:	e1b5      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111a2:	e1b2      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80111a4:	4b07      	ldr	r3, [pc, #28]	@ (80111c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80111ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80111b0:	d102      	bne.n	80111b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80111b2:	4b07      	ldr	r3, [pc, #28]	@ (80111d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80111b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111b6:	e1a8      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111b8:	2300      	movs	r3, #0
 80111ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111bc:	e1a5      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80111be:	2300      	movs	r3, #0
 80111c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111c2:	e1a2      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80111c4:	58024400 	.word	0x58024400
 80111c8:	03d09000 	.word	0x03d09000
 80111cc:	003d0900 	.word	0x003d0900
 80111d0:	017d7840 	.word	0x017d7840
 80111d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80111d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111dc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80111e0:	430b      	orrs	r3, r1
 80111e2:	d173      	bne.n	80112cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80111e4:	4b9c      	ldr	r3, [pc, #624]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80111e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80111ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80111ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80111f4:	d02f      	beq.n	8011256 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80111f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80111fc:	d863      	bhi.n	80112c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80111fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011200:	2b00      	cmp	r3, #0
 8011202:	d004      	beq.n	801120e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8011204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801120a:	d012      	beq.n	8011232 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801120c:	e05b      	b.n	80112c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801120e:	4b92      	ldr	r3, [pc, #584]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801121a:	d107      	bne.n	801122c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801121c:	f107 0318 	add.w	r3, r7, #24
 8011220:	4618      	mov	r0, r3
 8011222:	f000 f991 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801122a:	e16e      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801122c:	2300      	movs	r3, #0
 801122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011230:	e16b      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011232:	4b89      	ldr	r3, [pc, #548]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801123a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801123e:	d107      	bne.n	8011250 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011240:	f107 030c 	add.w	r3, r7, #12
 8011244:	4618      	mov	r0, r3
 8011246:	f000 fad3 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801124e:	e15c      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011250:	2300      	movs	r3, #0
 8011252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011254:	e159      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011256:	4b80      	ldr	r3, [pc, #512]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801125a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801125e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011260:	4b7d      	ldr	r3, [pc, #500]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f003 0304 	and.w	r3, r3, #4
 8011268:	2b04      	cmp	r3, #4
 801126a:	d10c      	bne.n	8011286 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801126c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801126e:	2b00      	cmp	r3, #0
 8011270:	d109      	bne.n	8011286 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011272:	4b79      	ldr	r3, [pc, #484]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	08db      	lsrs	r3, r3, #3
 8011278:	f003 0303 	and.w	r3, r3, #3
 801127c:	4a77      	ldr	r2, [pc, #476]	@ (801145c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801127e:	fa22 f303 	lsr.w	r3, r2, r3
 8011282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011284:	e01e      	b.n	80112c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011286:	4b74      	ldr	r3, [pc, #464]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801128e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011292:	d106      	bne.n	80112a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8011294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011296:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801129a:	d102      	bne.n	80112a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801129c:	4b70      	ldr	r3, [pc, #448]	@ (8011460 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112a0:	e010      	b.n	80112c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80112a2:	4b6d      	ldr	r3, [pc, #436]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80112ae:	d106      	bne.n	80112be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80112b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80112b6:	d102      	bne.n	80112be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80112b8:	4b6a      	ldr	r3, [pc, #424]	@ (8011464 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80112ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112bc:	e002      	b.n	80112c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80112be:	2300      	movs	r3, #0
 80112c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80112c2:	e122      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80112c4:	e121      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80112c6:	2300      	movs	r3, #0
 80112c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80112ca:	e11e      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80112cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80112d4:	430b      	orrs	r3, r1
 80112d6:	d133      	bne.n	8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80112d8:	4b5f      	ldr	r3, [pc, #380]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80112da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80112dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80112e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80112e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d004      	beq.n	80112f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80112e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112ee:	d012      	beq.n	8011316 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80112f0:	e023      	b.n	801133a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80112f2:	4b59      	ldr	r3, [pc, #356]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80112fe:	d107      	bne.n	8011310 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011304:	4618      	mov	r0, r3
 8011306:	f000 fbc7 	bl	8011a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801130a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801130c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801130e:	e0fc      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011310:	2300      	movs	r3, #0
 8011312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011314:	e0f9      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011316:	4b50      	ldr	r3, [pc, #320]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801131e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011322:	d107      	bne.n	8011334 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011324:	f107 0318 	add.w	r3, r7, #24
 8011328:	4618      	mov	r0, r3
 801132a:	f000 f90d 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011332:	e0ea      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011334:	2300      	movs	r3, #0
 8011336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011338:	e0e7      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801133a:	2300      	movs	r3, #0
 801133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801133e:	e0e4      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011344:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8011348:	430b      	orrs	r3, r1
 801134a:	f040 808d 	bne.w	8011468 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801134e:	4b42      	ldr	r3, [pc, #264]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011352:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8011356:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801135a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801135e:	d06b      	beq.n	8011438 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011366:	d874      	bhi.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801136a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801136e:	d056      	beq.n	801141e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8011370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011376:	d86c      	bhi.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801137a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801137e:	d03b      	beq.n	80113f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8011380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011382:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011386:	d864      	bhi.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801138a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801138e:	d021      	beq.n	80113d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011396:	d85c      	bhi.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801139a:	2b00      	cmp	r3, #0
 801139c:	d004      	beq.n	80113a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801139e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80113a4:	d004      	beq.n	80113b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80113a6:	e054      	b.n	8011452 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80113a8:	f000 f8b8 	bl	801151c <HAL_RCCEx_GetD3PCLK1Freq>
 80113ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80113ae:	e0ac      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80113b0:	4b29      	ldr	r3, [pc, #164]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80113b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80113bc:	d107      	bne.n	80113ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113be:	f107 0318 	add.w	r3, r7, #24
 80113c2:	4618      	mov	r0, r3
 80113c4:	f000 f8c0 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80113cc:	e09d      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80113ce:	2300      	movs	r3, #0
 80113d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113d2:	e09a      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80113d4:	4b20      	ldr	r3, [pc, #128]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80113dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80113e0:	d107      	bne.n	80113f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113e2:	f107 030c 	add.w	r3, r7, #12
 80113e6:	4618      	mov	r0, r3
 80113e8:	f000 fa02 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80113f0:	e08b      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80113f2:	2300      	movs	r3, #0
 80113f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113f6:	e088      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80113f8:	4b17      	ldr	r3, [pc, #92]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f003 0304 	and.w	r3, r3, #4
 8011400:	2b04      	cmp	r3, #4
 8011402:	d109      	bne.n	8011418 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011404:	4b14      	ldr	r3, [pc, #80]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	08db      	lsrs	r3, r3, #3
 801140a:	f003 0303 	and.w	r3, r3, #3
 801140e:	4a13      	ldr	r2, [pc, #76]	@ (801145c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011410:	fa22 f303 	lsr.w	r3, r2, r3
 8011414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011416:	e078      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011418:	2300      	movs	r3, #0
 801141a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801141c:	e075      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801141e:	4b0e      	ldr	r3, [pc, #56]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801142a:	d102      	bne.n	8011432 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801142c:	4b0c      	ldr	r3, [pc, #48]	@ (8011460 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801142e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011430:	e06b      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011432:	2300      	movs	r3, #0
 8011434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011436:	e068      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011438:	4b07      	ldr	r3, [pc, #28]	@ (8011458 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011444:	d102      	bne.n	801144c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8011446:	4b07      	ldr	r3, [pc, #28]	@ (8011464 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801144a:	e05e      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801144c:	2300      	movs	r3, #0
 801144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011450:	e05b      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8011452:	2300      	movs	r3, #0
 8011454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011456:	e058      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011458:	58024400 	.word	0x58024400
 801145c:	03d09000 	.word	0x03d09000
 8011460:	003d0900 	.word	0x003d0900
 8011464:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011468:	e9d7 2300 	ldrd	r2, r3, [r7]
 801146c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8011470:	430b      	orrs	r3, r1
 8011472:	d148      	bne.n	8011506 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8011474:	4b27      	ldr	r3, [pc, #156]	@ (8011514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801147c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801147e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011484:	d02a      	beq.n	80114dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8011486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801148c:	d838      	bhi.n	8011500 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801148e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011490:	2b00      	cmp	r3, #0
 8011492:	d004      	beq.n	801149e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8011494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801149a:	d00d      	beq.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801149c:	e030      	b.n	8011500 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801149e:	4b1d      	ldr	r3, [pc, #116]	@ (8011514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80114a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80114aa:	d102      	bne.n	80114b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80114ac:	4b1a      	ldr	r3, [pc, #104]	@ (8011518 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80114ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114b0:	e02b      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114b2:	2300      	movs	r3, #0
 80114b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114b6:	e028      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80114b8:	4b16      	ldr	r3, [pc, #88]	@ (8011514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80114c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80114c4:	d107      	bne.n	80114d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80114c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80114ca:	4618      	mov	r0, r3
 80114cc:	f000 fae4 	bl	8011a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80114d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114d4:	e019      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114d6:	2300      	movs	r3, #0
 80114d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114da:	e016      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80114dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80114e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80114e8:	d107      	bne.n	80114fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114ea:	f107 0318 	add.w	r3, r7, #24
 80114ee:	4618      	mov	r0, r3
 80114f0:	f000 f82a 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114f8:	e007      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114fa:	2300      	movs	r3, #0
 80114fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114fe:	e004      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011500:	2300      	movs	r3, #0
 8011502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011504:	e001      	b.n	801150a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8011506:	2300      	movs	r3, #0
 8011508:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801150a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801150c:	4618      	mov	r0, r3
 801150e:	3740      	adds	r7, #64	@ 0x40
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	58024400 	.word	0x58024400
 8011518:	017d7840 	.word	0x017d7840

0801151c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8011520:	f7fe f816 	bl	800f550 <HAL_RCC_GetHCLKFreq>
 8011524:	4602      	mov	r2, r0
 8011526:	4b06      	ldr	r3, [pc, #24]	@ (8011540 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011528:	6a1b      	ldr	r3, [r3, #32]
 801152a:	091b      	lsrs	r3, r3, #4
 801152c:	f003 0307 	and.w	r3, r3, #7
 8011530:	4904      	ldr	r1, [pc, #16]	@ (8011544 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8011532:	5ccb      	ldrb	r3, [r1, r3]
 8011534:	f003 031f 	and.w	r3, r3, #31
 8011538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801153c:	4618      	mov	r0, r3
 801153e:	bd80      	pop	{r7, pc}
 8011540:	58024400 	.word	0x58024400
 8011544:	0801b334 	.word	0x0801b334

08011548 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8011548:	b480      	push	{r7}
 801154a:	b089      	sub	sp, #36	@ 0x24
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011550:	4ba1      	ldr	r3, [pc, #644]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011554:	f003 0303 	and.w	r3, r3, #3
 8011558:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801155a:	4b9f      	ldr	r3, [pc, #636]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801155c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801155e:	0b1b      	lsrs	r3, r3, #12
 8011560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011564:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8011566:	4b9c      	ldr	r3, [pc, #624]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801156a:	091b      	lsrs	r3, r3, #4
 801156c:	f003 0301 	and.w	r3, r3, #1
 8011570:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8011572:	4b99      	ldr	r3, [pc, #612]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011576:	08db      	lsrs	r3, r3, #3
 8011578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801157c:	693a      	ldr	r2, [r7, #16]
 801157e:	fb02 f303 	mul.w	r3, r2, r3
 8011582:	ee07 3a90 	vmov	s15, r3
 8011586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801158a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	2b00      	cmp	r3, #0
 8011592:	f000 8111 	beq.w	80117b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	2b02      	cmp	r3, #2
 801159a:	f000 8083 	beq.w	80116a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	2b02      	cmp	r3, #2
 80115a2:	f200 80a1 	bhi.w	80116e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80115a6:	69bb      	ldr	r3, [r7, #24]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d003      	beq.n	80115b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d056      	beq.n	8011660 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80115b2:	e099      	b.n	80116e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115b4:	4b88      	ldr	r3, [pc, #544]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f003 0320 	and.w	r3, r3, #32
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d02d      	beq.n	801161c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80115c0:	4b85      	ldr	r3, [pc, #532]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	08db      	lsrs	r3, r3, #3
 80115c6:	f003 0303 	and.w	r3, r3, #3
 80115ca:	4a84      	ldr	r2, [pc, #528]	@ (80117dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80115cc:	fa22 f303 	lsr.w	r3, r2, r3
 80115d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	ee07 3a90 	vmov	s15, r3
 80115d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	ee07 3a90 	vmov	s15, r3
 80115e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115ea:	4b7b      	ldr	r3, [pc, #492]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115f2:	ee07 3a90 	vmov	s15, r3
 80115f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80115fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80117e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801160a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801160e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011616:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801161a:	e087      	b.n	801172c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	ee07 3a90 	vmov	s15, r3
 8011622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011626:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80117e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801162a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801162e:	4b6a      	ldr	r3, [pc, #424]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011636:	ee07 3a90 	vmov	s15, r3
 801163a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801163e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011642:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80117e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801164a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801164e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011656:	ee67 7a27 	vmul.f32	s15, s14, s15
 801165a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801165e:	e065      	b.n	801172c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	ee07 3a90 	vmov	s15, r3
 8011666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801166a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80117e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801166e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011672:	4b59      	ldr	r3, [pc, #356]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801167a:	ee07 3a90 	vmov	s15, r3
 801167e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011682:	ed97 6a03 	vldr	s12, [r7, #12]
 8011686:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80117e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801168a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801168e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801169e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80116a2:	e043      	b.n	801172c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	ee07 3a90 	vmov	s15, r3
 80116aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80117ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80116b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116b6:	4b48      	ldr	r3, [pc, #288]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80116b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116be:	ee07 3a90 	vmov	s15, r3
 80116c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80116c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80116ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80117e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80116ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80116d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80116da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80116e6:	e021      	b.n	801172c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	ee07 3a90 	vmov	s15, r3
 80116ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80117e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80116f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116fa:	4b37      	ldr	r3, [pc, #220]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80116fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011702:	ee07 3a90 	vmov	s15, r3
 8011706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801170a:	ed97 6a03 	vldr	s12, [r7, #12]
 801170e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80117e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801171a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801171e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801172a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801172c:	4b2a      	ldr	r3, [pc, #168]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801172e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011730:	0a5b      	lsrs	r3, r3, #9
 8011732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011736:	ee07 3a90 	vmov	s15, r3
 801173a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801173e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011746:	edd7 6a07 	vldr	s13, [r7, #28]
 801174a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801174e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011752:	ee17 2a90 	vmov	r2, s15
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801175a:	4b1f      	ldr	r3, [pc, #124]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801175c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801175e:	0c1b      	lsrs	r3, r3, #16
 8011760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011764:	ee07 3a90 	vmov	s15, r3
 8011768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801176c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011774:	edd7 6a07 	vldr	s13, [r7, #28]
 8011778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011780:	ee17 2a90 	vmov	r2, s15
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011788:	4b13      	ldr	r3, [pc, #76]	@ (80117d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801178c:	0e1b      	lsrs	r3, r3, #24
 801178e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011792:	ee07 3a90 	vmov	s15, r3
 8011796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801179a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801179e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80117a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80117a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80117aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80117ae:	ee17 2a90 	vmov	r2, s15
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80117b6:	e008      	b.n	80117ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2200      	movs	r2, #0
 80117bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2200      	movs	r2, #0
 80117c8:	609a      	str	r2, [r3, #8]
}
 80117ca:	bf00      	nop
 80117cc:	3724      	adds	r7, #36	@ 0x24
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	58024400 	.word	0x58024400
 80117dc:	03d09000 	.word	0x03d09000
 80117e0:	46000000 	.word	0x46000000
 80117e4:	4c742400 	.word	0x4c742400
 80117e8:	4a742400 	.word	0x4a742400
 80117ec:	4bbebc20 	.word	0x4bbebc20

080117f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b089      	sub	sp, #36	@ 0x24
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80117f8:	4ba1      	ldr	r3, [pc, #644]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80117fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117fc:	f003 0303 	and.w	r3, r3, #3
 8011800:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8011802:	4b9f      	ldr	r3, [pc, #636]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011806:	0d1b      	lsrs	r3, r3, #20
 8011808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801180c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801180e:	4b9c      	ldr	r3, [pc, #624]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011812:	0a1b      	lsrs	r3, r3, #8
 8011814:	f003 0301 	and.w	r3, r3, #1
 8011818:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801181a:	4b99      	ldr	r3, [pc, #612]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801181e:	08db      	lsrs	r3, r3, #3
 8011820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011824:	693a      	ldr	r2, [r7, #16]
 8011826:	fb02 f303 	mul.w	r3, r2, r3
 801182a:	ee07 3a90 	vmov	s15, r3
 801182e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011832:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	2b00      	cmp	r3, #0
 801183a:	f000 8111 	beq.w	8011a60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	2b02      	cmp	r3, #2
 8011842:	f000 8083 	beq.w	801194c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	2b02      	cmp	r3, #2
 801184a:	f200 80a1 	bhi.w	8011990 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d003      	beq.n	801185c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8011854:	69bb      	ldr	r3, [r7, #24]
 8011856:	2b01      	cmp	r3, #1
 8011858:	d056      	beq.n	8011908 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801185a:	e099      	b.n	8011990 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801185c:	4b88      	ldr	r3, [pc, #544]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f003 0320 	and.w	r3, r3, #32
 8011864:	2b00      	cmp	r3, #0
 8011866:	d02d      	beq.n	80118c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011868:	4b85      	ldr	r3, [pc, #532]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	08db      	lsrs	r3, r3, #3
 801186e:	f003 0303 	and.w	r3, r3, #3
 8011872:	4a84      	ldr	r2, [pc, #528]	@ (8011a84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8011874:	fa22 f303 	lsr.w	r3, r2, r3
 8011878:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	ee07 3a90 	vmov	s15, r3
 8011880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	ee07 3a90 	vmov	s15, r3
 801188a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801188e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011892:	4b7b      	ldr	r3, [pc, #492]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801189a:	ee07 3a90 	vmov	s15, r3
 801189e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80118a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80118a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8011a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80118aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80118ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80118b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80118b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80118c2:	e087      	b.n	80119d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	ee07 3a90 	vmov	s15, r3
 80118ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8011a8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80118d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80118d6:	4b6a      	ldr	r3, [pc, #424]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80118d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118de:	ee07 3a90 	vmov	s15, r3
 80118e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80118e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80118ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8011a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80118ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80118f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80118f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80118fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011906:	e065      	b.n	80119d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	ee07 3a90 	vmov	s15, r3
 801190e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011912:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8011a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801191a:	4b59      	ldr	r3, [pc, #356]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801191e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011922:	ee07 3a90 	vmov	s15, r3
 8011926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801192a:	ed97 6a03 	vldr	s12, [r7, #12]
 801192e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8011a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801193a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801193e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801194a:	e043      	b.n	80119d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	ee07 3a90 	vmov	s15, r3
 8011952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011956:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8011a94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801195a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801195e:	4b48      	ldr	r3, [pc, #288]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011966:	ee07 3a90 	vmov	s15, r3
 801196a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801196e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011972:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8011a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801197a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801197e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011986:	ee67 7a27 	vmul.f32	s15, s14, s15
 801198a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801198e:	e021      	b.n	80119d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	ee07 3a90 	vmov	s15, r3
 8011996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801199a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801199e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80119a2:	4b37      	ldr	r3, [pc, #220]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80119a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119aa:	ee07 3a90 	vmov	s15, r3
 80119ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80119b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011a88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80119ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80119c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80119d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80119d4:	4b2a      	ldr	r3, [pc, #168]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80119d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80119d8:	0a5b      	lsrs	r3, r3, #9
 80119da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119de:	ee07 3a90 	vmov	s15, r3
 80119e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80119ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80119ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80119f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80119f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80119fa:	ee17 2a90 	vmov	r2, s15
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8011a02:	4b1f      	ldr	r3, [pc, #124]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a06:	0c1b      	lsrs	r3, r3, #16
 8011a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a0c:	ee07 3a90 	vmov	s15, r3
 8011a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011a18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a28:	ee17 2a90 	vmov	r2, s15
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011a30:	4b13      	ldr	r3, [pc, #76]	@ (8011a80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a34:	0e1b      	lsrs	r3, r3, #24
 8011a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a3a:	ee07 3a90 	vmov	s15, r3
 8011a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8011a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a56:	ee17 2a90 	vmov	r2, s15
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011a5e:	e008      	b.n	8011a72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2200      	movs	r2, #0
 8011a64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	609a      	str	r2, [r3, #8]
}
 8011a72:	bf00      	nop
 8011a74:	3724      	adds	r7, #36	@ 0x24
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	58024400 	.word	0x58024400
 8011a84:	03d09000 	.word	0x03d09000
 8011a88:	46000000 	.word	0x46000000
 8011a8c:	4c742400 	.word	0x4c742400
 8011a90:	4a742400 	.word	0x4a742400
 8011a94:	4bbebc20 	.word	0x4bbebc20

08011a98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b089      	sub	sp, #36	@ 0x24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011aa0:	4ba0      	ldr	r3, [pc, #640]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aa4:	f003 0303 	and.w	r3, r3, #3
 8011aa8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8011aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aae:	091b      	lsrs	r3, r3, #4
 8011ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011ab4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8011ab6:	4b9b      	ldr	r3, [pc, #620]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aba:	f003 0301 	and.w	r3, r3, #1
 8011abe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011ac0:	4b98      	ldr	r3, [pc, #608]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ac4:	08db      	lsrs	r3, r3, #3
 8011ac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011aca:	693a      	ldr	r2, [r7, #16]
 8011acc:	fb02 f303 	mul.w	r3, r2, r3
 8011ad0:	ee07 3a90 	vmov	s15, r3
 8011ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ad8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f000 8111 	beq.w	8011d06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011ae4:	69bb      	ldr	r3, [r7, #24]
 8011ae6:	2b02      	cmp	r3, #2
 8011ae8:	f000 8083 	beq.w	8011bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	2b02      	cmp	r3, #2
 8011af0:	f200 80a1 	bhi.w	8011c36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011af4:	69bb      	ldr	r3, [r7, #24]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d003      	beq.n	8011b02 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011afa:	69bb      	ldr	r3, [r7, #24]
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d056      	beq.n	8011bae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011b00:	e099      	b.n	8011c36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b02:	4b88      	ldr	r3, [pc, #544]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f003 0320 	and.w	r3, r3, #32
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d02d      	beq.n	8011b6a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011b0e:	4b85      	ldr	r3, [pc, #532]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	08db      	lsrs	r3, r3, #3
 8011b14:	f003 0303 	and.w	r3, r3, #3
 8011b18:	4a83      	ldr	r2, [pc, #524]	@ (8011d28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8011b1e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	ee07 3a90 	vmov	s15, r3
 8011b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	ee07 3a90 	vmov	s15, r3
 8011b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b38:	4b7a      	ldr	r3, [pc, #488]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b40:	ee07 3a90 	vmov	s15, r3
 8011b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8011b4c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8011d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011b68:	e087      	b.n	8011c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	ee07 3a90 	vmov	s15, r3
 8011b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b74:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8011d30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011b7c:	4b69      	ldr	r3, [pc, #420]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b84:	ee07 3a90 	vmov	s15, r3
 8011b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011b90:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8011d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011bac:	e065      	b.n	8011c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	ee07 3a90 	vmov	s15, r3
 8011bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bb8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8011d34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011bc0:	4b58      	ldr	r3, [pc, #352]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bc8:	ee07 3a90 	vmov	s15, r3
 8011bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8011bd4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8011d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011bf0:	e043      	b.n	8011c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	ee07 3a90 	vmov	s15, r3
 8011bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bfc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8011d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c04:	4b47      	ldr	r3, [pc, #284]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c0c:	ee07 3a90 	vmov	s15, r3
 8011c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8011c18:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8011d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011c34:	e021      	b.n	8011c7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	ee07 3a90 	vmov	s15, r3
 8011c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c40:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011d30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c48:	4b36      	ldr	r3, [pc, #216]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c50:	ee07 3a90 	vmov	s15, r3
 8011c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8011c5c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011c78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c7e:	0a5b      	lsrs	r3, r3, #9
 8011c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c84:	ee07 3a90 	vmov	s15, r3
 8011c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8011c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ca0:	ee17 2a90 	vmov	r2, s15
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cac:	0c1b      	lsrs	r3, r3, #16
 8011cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011cb2:	ee07 3a90 	vmov	s15, r3
 8011cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8011cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cce:	ee17 2a90 	vmov	r2, s15
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011cd6:	4b13      	ldr	r3, [pc, #76]	@ (8011d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cda:	0e1b      	lsrs	r3, r3, #24
 8011cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ce0:	ee07 3a90 	vmov	s15, r3
 8011ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ce8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8011cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cfc:	ee17 2a90 	vmov	r2, s15
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011d04:	e008      	b.n	8011d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	609a      	str	r2, [r3, #8]
}
 8011d18:	bf00      	nop
 8011d1a:	3724      	adds	r7, #36	@ 0x24
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr
 8011d24:	58024400 	.word	0x58024400
 8011d28:	03d09000 	.word	0x03d09000
 8011d2c:	46000000 	.word	0x46000000
 8011d30:	4c742400 	.word	0x4c742400
 8011d34:	4a742400 	.word	0x4a742400
 8011d38:	4bbebc20 	.word	0x4bbebc20

08011d3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011d46:	2300      	movs	r3, #0
 8011d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011d4a:	4b53      	ldr	r3, [pc, #332]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d4e:	f003 0303 	and.w	r3, r3, #3
 8011d52:	2b03      	cmp	r3, #3
 8011d54:	d101      	bne.n	8011d5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011d56:	2301      	movs	r3, #1
 8011d58:	e099      	b.n	8011e8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011d60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d66:	f7f1 fce3 	bl	8003730 <HAL_GetTick>
 8011d6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011d6c:	e008      	b.n	8011d80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011d6e:	f7f1 fcdf 	bl	8003730 <HAL_GetTick>
 8011d72:	4602      	mov	r2, r0
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	1ad3      	subs	r3, r2, r3
 8011d78:	2b02      	cmp	r3, #2
 8011d7a:	d901      	bls.n	8011d80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011d7c:	2303      	movs	r3, #3
 8011d7e:	e086      	b.n	8011e8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011d80:	4b45      	ldr	r3, [pc, #276]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1f0      	bne.n	8011d6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011d8c:	4b42      	ldr	r3, [pc, #264]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	031b      	lsls	r3, r3, #12
 8011d9a:	493f      	ldr	r1, [pc, #252]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	689b      	ldr	r3, [r3, #8]
 8011dae:	3b01      	subs	r3, #1
 8011db0:	025b      	lsls	r3, r3, #9
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	431a      	orrs	r2, r3
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	3b01      	subs	r3, #1
 8011dbc:	041b      	lsls	r3, r3, #16
 8011dbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011dc2:	431a      	orrs	r2, r3
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	691b      	ldr	r3, [r3, #16]
 8011dc8:	3b01      	subs	r3, #1
 8011dca:	061b      	lsls	r3, r3, #24
 8011dcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011dd0:	4931      	ldr	r1, [pc, #196]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011dd6:	4b30      	ldr	r3, [pc, #192]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	695b      	ldr	r3, [r3, #20]
 8011de2:	492d      	ldr	r1, [pc, #180]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011de4:	4313      	orrs	r3, r2
 8011de6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011de8:	4b2b      	ldr	r3, [pc, #172]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dec:	f023 0220 	bic.w	r2, r3, #32
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	699b      	ldr	r3, [r3, #24]
 8011df4:	4928      	ldr	r1, [pc, #160]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011df6:	4313      	orrs	r3, r2
 8011df8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011dfa:	4b27      	ldr	r3, [pc, #156]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dfe:	4a26      	ldr	r2, [pc, #152]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e00:	f023 0310 	bic.w	r3, r3, #16
 8011e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011e06:	4b24      	ldr	r3, [pc, #144]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011e0a:	4b24      	ldr	r3, [pc, #144]	@ (8011e9c <RCCEx_PLL2_Config+0x160>)
 8011e0c:	4013      	ands	r3, r2
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	69d2      	ldr	r2, [r2, #28]
 8011e12:	00d2      	lsls	r2, r2, #3
 8011e14:	4920      	ldr	r1, [pc, #128]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e16:	4313      	orrs	r3, r2
 8011e18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e20:	f043 0310 	orr.w	r3, r3, #16
 8011e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d106      	bne.n	8011e3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e30:	4a19      	ldr	r2, [pc, #100]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011e36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011e38:	e00f      	b.n	8011e5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d106      	bne.n	8011e4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011e40:	4b15      	ldr	r3, [pc, #84]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e44:	4a14      	ldr	r2, [pc, #80]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011e4c:	e005      	b.n	8011e5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011e4e:	4b12      	ldr	r3, [pc, #72]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e52:	4a11      	ldr	r2, [pc, #68]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011e58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011e66:	f7f1 fc63 	bl	8003730 <HAL_GetTick>
 8011e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011e6c:	e008      	b.n	8011e80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011e6e:	f7f1 fc5f 	bl	8003730 <HAL_GetTick>
 8011e72:	4602      	mov	r2, r0
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	2b02      	cmp	r3, #2
 8011e7a:	d901      	bls.n	8011e80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011e7c:	2303      	movs	r3, #3
 8011e7e:	e006      	b.n	8011e8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011e80:	4b05      	ldr	r3, [pc, #20]	@ (8011e98 <RCCEx_PLL2_Config+0x15c>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d0f0      	beq.n	8011e6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3710      	adds	r7, #16
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	bf00      	nop
 8011e98:	58024400 	.word	0x58024400
 8011e9c:	ffff0007 	.word	0xffff0007

08011ea0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011eae:	4b53      	ldr	r3, [pc, #332]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011eb2:	f003 0303 	and.w	r3, r3, #3
 8011eb6:	2b03      	cmp	r3, #3
 8011eb8:	d101      	bne.n	8011ebe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e099      	b.n	8011ff2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011ec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011eca:	f7f1 fc31 	bl	8003730 <HAL_GetTick>
 8011ece:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011ed0:	e008      	b.n	8011ee4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011ed2:	f7f1 fc2d 	bl	8003730 <HAL_GetTick>
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	1ad3      	subs	r3, r2, r3
 8011edc:	2b02      	cmp	r3, #2
 8011ede:	d901      	bls.n	8011ee4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011ee0:	2303      	movs	r3, #3
 8011ee2:	e086      	b.n	8011ff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011ee4:	4b45      	ldr	r3, [pc, #276]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d1f0      	bne.n	8011ed2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011ef0:	4b42      	ldr	r3, [pc, #264]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ef4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	051b      	lsls	r3, r3, #20
 8011efe:	493f      	ldr	r1, [pc, #252]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f00:	4313      	orrs	r3, r2
 8011f02:	628b      	str	r3, [r1, #40]	@ 0x28
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	3b01      	subs	r3, #1
 8011f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	689b      	ldr	r3, [r3, #8]
 8011f12:	3b01      	subs	r3, #1
 8011f14:	025b      	lsls	r3, r3, #9
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	431a      	orrs	r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	041b      	lsls	r3, r3, #16
 8011f22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011f26:	431a      	orrs	r2, r3
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	691b      	ldr	r3, [r3, #16]
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	061b      	lsls	r3, r3, #24
 8011f30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011f34:	4931      	ldr	r1, [pc, #196]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f36:	4313      	orrs	r3, r2
 8011f38:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011f3a:	4b30      	ldr	r3, [pc, #192]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	695b      	ldr	r3, [r3, #20]
 8011f46:	492d      	ldr	r1, [pc, #180]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	699b      	ldr	r3, [r3, #24]
 8011f58:	4928      	ldr	r1, [pc, #160]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011f5e:	4b27      	ldr	r3, [pc, #156]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f62:	4a26      	ldr	r2, [pc, #152]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011f6a:	4b24      	ldr	r3, [pc, #144]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f6e:	4b24      	ldr	r3, [pc, #144]	@ (8012000 <RCCEx_PLL3_Config+0x160>)
 8011f70:	4013      	ands	r3, r2
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	69d2      	ldr	r2, [r2, #28]
 8011f76:	00d2      	lsls	r2, r2, #3
 8011f78:	4920      	ldr	r1, [pc, #128]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f82:	4a1e      	ldr	r2, [pc, #120]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d106      	bne.n	8011f9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011f90:	4b1a      	ldr	r3, [pc, #104]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f94:	4a19      	ldr	r2, [pc, #100]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011f96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8011f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011f9c:	e00f      	b.n	8011fbe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d106      	bne.n	8011fb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011fa4:	4b15      	ldr	r3, [pc, #84]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fa8:	4a14      	ldr	r2, [pc, #80]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011faa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011fb0:	e005      	b.n	8011fbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011fb2:	4b12      	ldr	r3, [pc, #72]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fb6:	4a11      	ldr	r2, [pc, #68]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011fb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011fca:	f7f1 fbb1 	bl	8003730 <HAL_GetTick>
 8011fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011fd0:	e008      	b.n	8011fe4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011fd2:	f7f1 fbad 	bl	8003730 <HAL_GetTick>
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	2b02      	cmp	r3, #2
 8011fde:	d901      	bls.n	8011fe4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011fe0:	2303      	movs	r3, #3
 8011fe2:	e006      	b.n	8011ff2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011fe4:	4b05      	ldr	r3, [pc, #20]	@ (8011ffc <RCCEx_PLL3_Config+0x15c>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d0f0      	beq.n	8011fd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
 8011ffa:	bf00      	nop
 8011ffc:	58024400 	.word	0x58024400
 8012000:	ffff0007 	.word	0xffff0007

08012004 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d101      	bne.n	8012016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012012:	2301      	movs	r3, #1
 8012014:	e10f      	b.n	8012236 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2200      	movs	r2, #0
 801201a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	4a87      	ldr	r2, [pc, #540]	@ (8012240 <HAL_SPI_Init+0x23c>)
 8012022:	4293      	cmp	r3, r2
 8012024:	d00f      	beq.n	8012046 <HAL_SPI_Init+0x42>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	4a86      	ldr	r2, [pc, #536]	@ (8012244 <HAL_SPI_Init+0x240>)
 801202c:	4293      	cmp	r3, r2
 801202e:	d00a      	beq.n	8012046 <HAL_SPI_Init+0x42>
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	4a84      	ldr	r2, [pc, #528]	@ (8012248 <HAL_SPI_Init+0x244>)
 8012036:	4293      	cmp	r3, r2
 8012038:	d005      	beq.n	8012046 <HAL_SPI_Init+0x42>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	2b0f      	cmp	r3, #15
 8012040:	d901      	bls.n	8012046 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8012042:	2301      	movs	r3, #1
 8012044:	e0f7      	b.n	8012236 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 ff6c 	bl	8012f24 <SPI_GetPacketSize>
 801204c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	4a7b      	ldr	r2, [pc, #492]	@ (8012240 <HAL_SPI_Init+0x23c>)
 8012054:	4293      	cmp	r3, r2
 8012056:	d00c      	beq.n	8012072 <HAL_SPI_Init+0x6e>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4a79      	ldr	r2, [pc, #484]	@ (8012244 <HAL_SPI_Init+0x240>)
 801205e:	4293      	cmp	r3, r2
 8012060:	d007      	beq.n	8012072 <HAL_SPI_Init+0x6e>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4a78      	ldr	r2, [pc, #480]	@ (8012248 <HAL_SPI_Init+0x244>)
 8012068:	4293      	cmp	r3, r2
 801206a:	d002      	beq.n	8012072 <HAL_SPI_Init+0x6e>
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	2b08      	cmp	r3, #8
 8012070:	d811      	bhi.n	8012096 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8012076:	4a72      	ldr	r2, [pc, #456]	@ (8012240 <HAL_SPI_Init+0x23c>)
 8012078:	4293      	cmp	r3, r2
 801207a:	d009      	beq.n	8012090 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4a70      	ldr	r2, [pc, #448]	@ (8012244 <HAL_SPI_Init+0x240>)
 8012082:	4293      	cmp	r3, r2
 8012084:	d004      	beq.n	8012090 <HAL_SPI_Init+0x8c>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	4a6f      	ldr	r2, [pc, #444]	@ (8012248 <HAL_SPI_Init+0x244>)
 801208c:	4293      	cmp	r3, r2
 801208e:	d104      	bne.n	801209a <HAL_SPI_Init+0x96>
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2b10      	cmp	r3, #16
 8012094:	d901      	bls.n	801209a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8012096:	2301      	movs	r3, #1
 8012098:	e0cd      	b.n	8012236 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d106      	bne.n	80120b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2200      	movs	r2, #0
 80120aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f7f0 fa7c 	bl	80025ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2202      	movs	r2, #2
 80120b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f022 0201 	bic.w	r2, r2, #1
 80120ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	689b      	ldr	r3, [r3, #8]
 80120d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80120d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	699b      	ldr	r3, [r3, #24]
 80120dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80120e0:	d119      	bne.n	8012116 <HAL_SPI_Init+0x112>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80120ea:	d103      	bne.n	80120f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d008      	beq.n	8012106 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d10c      	bne.n	8012116 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012100:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012104:	d107      	bne.n	8012116 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012114:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801211e:	2b00      	cmp	r3, #0
 8012120:	d00f      	beq.n	8012142 <HAL_SPI_Init+0x13e>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	68db      	ldr	r3, [r3, #12]
 8012126:	2b06      	cmp	r3, #6
 8012128:	d90b      	bls.n	8012142 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	430a      	orrs	r2, r1
 801213e:	601a      	str	r2, [r3, #0]
 8012140:	e007      	b.n	8012152 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	681a      	ldr	r2, [r3, #0]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012150:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	69da      	ldr	r2, [r3, #28]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801215a:	431a      	orrs	r2, r3
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	431a      	orrs	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012164:	ea42 0103 	orr.w	r1, r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	68da      	ldr	r2, [r3, #12]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	430a      	orrs	r2, r1
 8012172:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801217c:	431a      	orrs	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012182:	431a      	orrs	r2, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	699b      	ldr	r3, [r3, #24]
 8012188:	431a      	orrs	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	691b      	ldr	r3, [r3, #16]
 801218e:	431a      	orrs	r2, r3
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	695b      	ldr	r3, [r3, #20]
 8012194:	431a      	orrs	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6a1b      	ldr	r3, [r3, #32]
 801219a:	431a      	orrs	r2, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	685b      	ldr	r3, [r3, #4]
 80121a0:	431a      	orrs	r2, r3
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121a6:	431a      	orrs	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	431a      	orrs	r2, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80121b2:	ea42 0103 	orr.w	r1, r2, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	430a      	orrs	r2, r1
 80121c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d113      	bne.n	80121f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	689b      	ldr	r3, [r3, #8]
 80121d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80121dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	689b      	ldr	r3, [r3, #8]
 80121e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80121f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f022 0201 	bic.w	r2, r2, #1
 8012200:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	685b      	ldr	r3, [r3, #4]
 8012206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801220a:	2b00      	cmp	r3, #0
 801220c:	d00a      	beq.n	8012224 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	68db      	ldr	r3, [r3, #12]
 8012214:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	430a      	orrs	r2, r1
 8012222:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2201      	movs	r2, #1
 8012230:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8012234:	2300      	movs	r3, #0
}
 8012236:	4618      	mov	r0, r3
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	40013000 	.word	0x40013000
 8012244:	40003800 	.word	0x40003800
 8012248:	40003c00 	.word	0x40003c00

0801224c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b088      	sub	sp, #32
 8012250:	af02      	add	r7, sp, #8
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	603b      	str	r3, [r7, #0]
 8012258:	4613      	mov	r3, r2
 801225a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	3320      	adds	r3, #32
 8012262:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012264:	f7f1 fa64 	bl	8003730 <HAL_GetTick>
 8012268:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012270:	b2db      	uxtb	r3, r3
 8012272:	2b01      	cmp	r3, #1
 8012274:	d001      	beq.n	801227a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8012276:	2302      	movs	r3, #2
 8012278:	e1d1      	b.n	801261e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d002      	beq.n	8012286 <HAL_SPI_Transmit+0x3a>
 8012280:	88fb      	ldrh	r3, [r7, #6]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d101      	bne.n	801228a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8012286:	2301      	movs	r3, #1
 8012288:	e1c9      	b.n	801261e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012290:	2b01      	cmp	r3, #1
 8012292:	d101      	bne.n	8012298 <HAL_SPI_Transmit+0x4c>
 8012294:	2302      	movs	r3, #2
 8012296:	e1c2      	b.n	801261e <HAL_SPI_Transmit+0x3d2>
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2201      	movs	r2, #1
 801229c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2203      	movs	r2, #3
 80122a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2200      	movs	r2, #0
 80122ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	68ba      	ldr	r2, [r7, #8]
 80122b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	88fa      	ldrh	r2, [r7, #6]
 80122ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	88fa      	ldrh	r2, [r7, #6]
 80122c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2200      	movs	r2, #0
 80122ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2200      	movs	r2, #0
 80122d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2200      	movs	r2, #0
 80122d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2200      	movs	r2, #0
 80122e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2200      	movs	r2, #0
 80122e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80122f0:	d108      	bne.n	8012304 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012300:	601a      	str	r2, [r3, #0]
 8012302:	e009      	b.n	8012318 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	68db      	ldr	r3, [r3, #12]
 801230a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8012316:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	685a      	ldr	r2, [r3, #4]
 801231e:	4b96      	ldr	r3, [pc, #600]	@ (8012578 <HAL_SPI_Transmit+0x32c>)
 8012320:	4013      	ands	r3, r2
 8012322:	88f9      	ldrh	r1, [r7, #6]
 8012324:	68fa      	ldr	r2, [r7, #12]
 8012326:	6812      	ldr	r2, [r2, #0]
 8012328:	430b      	orrs	r3, r1
 801232a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	f042 0201 	orr.w	r2, r2, #1
 801233a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012344:	d107      	bne.n	8012356 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	681a      	ldr	r2, [r3, #0]
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012354:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	2b0f      	cmp	r3, #15
 801235c:	d947      	bls.n	80123ee <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801235e:	e03f      	b.n	80123e0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	695b      	ldr	r3, [r3, #20]
 8012366:	f003 0302 	and.w	r3, r3, #2
 801236a:	2b02      	cmp	r3, #2
 801236c:	d114      	bne.n	8012398 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	6812      	ldr	r2, [r2, #0]
 8012378:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801237e:	1d1a      	adds	r2, r3, #4
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801238a:	b29b      	uxth	r3, r3
 801238c:	3b01      	subs	r3, #1
 801238e:	b29a      	uxth	r2, r3
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012396:	e023      	b.n	80123e0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012398:	f7f1 f9ca 	bl	8003730 <HAL_GetTick>
 801239c:	4602      	mov	r2, r0
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	1ad3      	subs	r3, r2, r3
 80123a2:	683a      	ldr	r2, [r7, #0]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d803      	bhi.n	80123b0 <HAL_SPI_Transmit+0x164>
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ae:	d102      	bne.n	80123b6 <HAL_SPI_Transmit+0x16a>
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d114      	bne.n	80123e0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80123b6:	68f8      	ldr	r0, [r7, #12]
 80123b8:	f000 fce6 	bl	8012d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80123c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2201      	movs	r2, #1
 80123d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2200      	movs	r2, #0
 80123d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80123dc:	2303      	movs	r3, #3
 80123de:	e11e      	b.n	801261e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d1b9      	bne.n	8012360 <HAL_SPI_Transmit+0x114>
 80123ec:	e0f1      	b.n	80125d2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	68db      	ldr	r3, [r3, #12]
 80123f2:	2b07      	cmp	r3, #7
 80123f4:	f240 80e6 	bls.w	80125c4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80123f8:	e05d      	b.n	80124b6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	695b      	ldr	r3, [r3, #20]
 8012400:	f003 0302 	and.w	r3, r3, #2
 8012404:	2b02      	cmp	r3, #2
 8012406:	d132      	bne.n	801246e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801240e:	b29b      	uxth	r3, r3
 8012410:	2b01      	cmp	r3, #1
 8012412:	d918      	bls.n	8012446 <HAL_SPI_Transmit+0x1fa>
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012418:	2b00      	cmp	r3, #0
 801241a:	d014      	beq.n	8012446 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	6812      	ldr	r2, [r2, #0]
 8012426:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801242c:	1d1a      	adds	r2, r3, #4
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012438:	b29b      	uxth	r3, r3
 801243a:	3b02      	subs	r3, #2
 801243c:	b29a      	uxth	r2, r3
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012444:	e037      	b.n	80124b6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801244a:	881a      	ldrh	r2, [r3, #0]
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012454:	1c9a      	adds	r2, r3, #2
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012460:	b29b      	uxth	r3, r3
 8012462:	3b01      	subs	r3, #1
 8012464:	b29a      	uxth	r2, r3
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801246c:	e023      	b.n	80124b6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801246e:	f7f1 f95f 	bl	8003730 <HAL_GetTick>
 8012472:	4602      	mov	r2, r0
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	1ad3      	subs	r3, r2, r3
 8012478:	683a      	ldr	r2, [r7, #0]
 801247a:	429a      	cmp	r2, r3
 801247c:	d803      	bhi.n	8012486 <HAL_SPI_Transmit+0x23a>
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012484:	d102      	bne.n	801248c <HAL_SPI_Transmit+0x240>
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d114      	bne.n	80124b6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f000 fc7b 	bl	8012d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012498:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2201      	movs	r2, #1
 80124a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2200      	movs	r2, #0
 80124ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80124b2:	2303      	movs	r3, #3
 80124b4:	e0b3      	b.n	801261e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80124bc:	b29b      	uxth	r3, r3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d19b      	bne.n	80123fa <HAL_SPI_Transmit+0x1ae>
 80124c2:	e086      	b.n	80125d2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	695b      	ldr	r3, [r3, #20]
 80124ca:	f003 0302 	and.w	r3, r3, #2
 80124ce:	2b02      	cmp	r3, #2
 80124d0:	d154      	bne.n	801257c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80124d8:	b29b      	uxth	r3, r3
 80124da:	2b03      	cmp	r3, #3
 80124dc:	d918      	bls.n	8012510 <HAL_SPI_Transmit+0x2c4>
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124e2:	2b40      	cmp	r3, #64	@ 0x40
 80124e4:	d914      	bls.n	8012510 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	6812      	ldr	r2, [r2, #0]
 80124f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80124f6:	1d1a      	adds	r2, r3, #4
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012502:	b29b      	uxth	r3, r3
 8012504:	3b04      	subs	r3, #4
 8012506:	b29a      	uxth	r2, r3
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801250e:	e059      	b.n	80125c4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012516:	b29b      	uxth	r3, r3
 8012518:	2b01      	cmp	r3, #1
 801251a:	d917      	bls.n	801254c <HAL_SPI_Transmit+0x300>
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012520:	2b00      	cmp	r3, #0
 8012522:	d013      	beq.n	801254c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012528:	881a      	ldrh	r2, [r3, #0]
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012532:	1c9a      	adds	r2, r3, #2
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801253e:	b29b      	uxth	r3, r3
 8012540:	3b02      	subs	r3, #2
 8012542:	b29a      	uxth	r2, r3
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801254a:	e03b      	b.n	80125c4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	3320      	adds	r3, #32
 8012556:	7812      	ldrb	r2, [r2, #0]
 8012558:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801255e:	1c5a      	adds	r2, r3, #1
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801256a:	b29b      	uxth	r3, r3
 801256c:	3b01      	subs	r3, #1
 801256e:	b29a      	uxth	r2, r3
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012576:	e025      	b.n	80125c4 <HAL_SPI_Transmit+0x378>
 8012578:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801257c:	f7f1 f8d8 	bl	8003730 <HAL_GetTick>
 8012580:	4602      	mov	r2, r0
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	1ad3      	subs	r3, r2, r3
 8012586:	683a      	ldr	r2, [r7, #0]
 8012588:	429a      	cmp	r2, r3
 801258a:	d803      	bhi.n	8012594 <HAL_SPI_Transmit+0x348>
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012592:	d102      	bne.n	801259a <HAL_SPI_Transmit+0x34e>
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d114      	bne.n	80125c4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f000 fbf4 	bl	8012d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80125a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2201      	movs	r2, #1
 80125b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2200      	movs	r2, #0
 80125bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80125c0:	2303      	movs	r3, #3
 80125c2:	e02c      	b.n	801261e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	f47f af79 	bne.w	80124c4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	9300      	str	r3, [sp, #0]
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	2200      	movs	r2, #0
 80125da:	2108      	movs	r1, #8
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f000 fc73 	bl	8012ec8 <SPI_WaitOnFlagUntilTimeout>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d007      	beq.n	80125f8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80125ee:	f043 0220 	orr.w	r2, r3, #32
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f000 fbc5 	bl	8012d88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2201      	movs	r2, #1
 8012602:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2200      	movs	r2, #0
 801260a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012614:	2b00      	cmp	r3, #0
 8012616:	d001      	beq.n	801261c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8012618:	2301      	movs	r3, #1
 801261a:	e000      	b.n	801261e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801261c:	2300      	movs	r3, #0
  }
}
 801261e:	4618      	mov	r0, r3
 8012620:	3718      	adds	r7, #24
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop

08012628 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	4613      	mov	r3, r2
 8012634:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801263c:	b2db      	uxtb	r3, r3
 801263e:	2b01      	cmp	r3, #1
 8012640:	d001      	beq.n	8012646 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8012642:	2302      	movs	r3, #2
 8012644:	e126      	b.n	8012894 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d002      	beq.n	8012652 <HAL_SPI_Transmit_DMA+0x2a>
 801264c:	88fb      	ldrh	r3, [r7, #6]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d101      	bne.n	8012656 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8012652:	2301      	movs	r3, #1
 8012654:	e11e      	b.n	8012894 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801265c:	2b01      	cmp	r3, #1
 801265e:	d101      	bne.n	8012664 <HAL_SPI_Transmit_DMA+0x3c>
 8012660:	2302      	movs	r3, #2
 8012662:	e117      	b.n	8012894 <HAL_SPI_Transmit_DMA+0x26c>
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2201      	movs	r2, #1
 8012668:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2203      	movs	r2, #3
 8012670:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2200      	movs	r2, #0
 8012678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	68ba      	ldr	r2, [r7, #8]
 8012680:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	88fa      	ldrh	r2, [r7, #6]
 8012686:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	88fa      	ldrh	r2, [r7, #6]
 801268e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2200      	movs	r2, #0
 8012696:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	2200      	movs	r2, #0
 801269c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	2200      	movs	r2, #0
 80126a2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2200      	movs	r2, #0
 80126b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	689b      	ldr	r3, [r3, #8]
 80126b8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80126bc:	d108      	bne.n	80126d0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	e009      	b.n	80126e4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	68db      	ldr	r3, [r3, #12]
 80126d6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80126e2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	68db      	ldr	r3, [r3, #12]
 80126e8:	2b0f      	cmp	r3, #15
 80126ea:	d905      	bls.n	80126f8 <HAL_SPI_Transmit_DMA+0xd0>
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80126f0:	699b      	ldr	r3, [r3, #24]
 80126f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80126f6:	d10f      	bne.n	8012718 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80126fc:	2b07      	cmp	r3, #7
 80126fe:	d911      	bls.n	8012724 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012704:	699b      	ldr	r3, [r3, #24]
 8012706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801270a:	d00b      	beq.n	8012724 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012710:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012712:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012716:	d005      	beq.n	8012724 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2200      	movs	r2, #0
 801271c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8012720:	2301      	movs	r3, #1
 8012722:	e0b7      	b.n	8012894 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	2b07      	cmp	r3, #7
 801272a:	d820      	bhi.n	801276e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012730:	699b      	ldr	r3, [r3, #24]
 8012732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012736:	d109      	bne.n	801274c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801273e:	b29b      	uxth	r3, r3
 8012740:	3301      	adds	r3, #1
 8012742:	105b      	asrs	r3, r3, #1
 8012744:	b29a      	uxth	r2, r3
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012750:	699b      	ldr	r3, [r3, #24]
 8012752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012756:	d11e      	bne.n	8012796 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801275e:	b29b      	uxth	r3, r3
 8012760:	3303      	adds	r3, #3
 8012762:	109b      	asrs	r3, r3, #2
 8012764:	b29a      	uxth	r2, r3
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801276c:	e013      	b.n	8012796 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	2b0f      	cmp	r3, #15
 8012774:	d80f      	bhi.n	8012796 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801277a:	699b      	ldr	r3, [r3, #24]
 801277c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012780:	d109      	bne.n	8012796 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012788:	b29b      	uxth	r3, r3
 801278a:	3301      	adds	r3, #1
 801278c:	105b      	asrs	r3, r3, #1
 801278e:	b29a      	uxth	r2, r3
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801279a:	4a40      	ldr	r2, [pc, #256]	@ (801289c <HAL_SPI_Transmit_DMA+0x274>)
 801279c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127a2:	4a3f      	ldr	r2, [pc, #252]	@ (80128a0 <HAL_SPI_Transmit_DMA+0x278>)
 80127a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127aa:	4a3e      	ldr	r2, [pc, #248]	@ (80128a4 <HAL_SPI_Transmit_DMA+0x27c>)
 80127ac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127b2:	2200      	movs	r2, #0
 80127b4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	689a      	ldr	r2, [r3, #8]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80127c4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80127ce:	4619      	mov	r1, r3
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	3320      	adds	r3, #32
 80127d6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80127de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80127e0:	f7f2 ff78 	bl	80056d4 <HAL_DMA_Start_IT>
 80127e4:	4603      	mov	r3, r0
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d011      	beq.n	801280e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80127f0:	f043 0210 	orr.w	r2, r3, #16
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2201      	movs	r2, #1
 80127fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2200      	movs	r2, #0
 8012806:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 801280a:	2301      	movs	r3, #1
 801280c:	e042      	b.n	8012894 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012812:	69db      	ldr	r3, [r3, #28]
 8012814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012818:	d108      	bne.n	801282c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	6859      	ldr	r1, [r3, #4]
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	681a      	ldr	r2, [r3, #0]
 8012824:	4b20      	ldr	r3, [pc, #128]	@ (80128a8 <HAL_SPI_Transmit_DMA+0x280>)
 8012826:	400b      	ands	r3, r1
 8012828:	6053      	str	r3, [r2, #4]
 801282a:	e009      	b.n	8012840 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	685a      	ldr	r2, [r3, #4]
 8012832:	4b1d      	ldr	r3, [pc, #116]	@ (80128a8 <HAL_SPI_Transmit_DMA+0x280>)
 8012834:	4013      	ands	r3, r2
 8012836:	88f9      	ldrh	r1, [r7, #6]
 8012838:	68fa      	ldr	r2, [r7, #12]
 801283a:	6812      	ldr	r2, [r2, #0]
 801283c:	430b      	orrs	r3, r1
 801283e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	689a      	ldr	r2, [r3, #8]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801284e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	691a      	ldr	r2, [r3, #16]
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 801285e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	f042 0201 	orr.w	r2, r2, #1
 801286e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012878:	d107      	bne.n	801288a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012888:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	2200      	movs	r2, #0
 801288e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8012892:	2300      	movs	r3, #0
}
 8012894:	4618      	mov	r0, r3
 8012896:	3710      	adds	r7, #16
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}
 801289c:	08012cf3 	.word	0x08012cf3
 80128a0:	08012cad 	.word	0x08012cad
 80128a4:	08012d0f 	.word	0x08012d0f
 80128a8:	ffff0000 	.word	0xffff0000

080128ac <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b08a      	sub	sp, #40	@ 0x28
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	691b      	ldr	r3, [r3, #16]
 80128ba:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	695b      	ldr	r3, [r3, #20]
 80128c2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80128c4:	6a3a      	ldr	r2, [r7, #32]
 80128c6:	69fb      	ldr	r3, [r7, #28]
 80128c8:	4013      	ands	r3, r2
 80128ca:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	689b      	ldr	r3, [r3, #8]
 80128d2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80128d4:	2300      	movs	r3, #0
 80128d6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80128de:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	3330      	adds	r3, #48	@ 0x30
 80128e6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d010      	beq.n	8012914 <HAL_SPI_IRQHandler+0x68>
 80128f2:	6a3b      	ldr	r3, [r7, #32]
 80128f4:	f003 0308 	and.w	r3, r3, #8
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00b      	beq.n	8012914 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	699a      	ldr	r2, [r3, #24]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801290a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f000 f9c3 	bl	8012c98 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8012912:	e192      	b.n	8012c3a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801291a:	2b00      	cmp	r3, #0
 801291c:	d113      	bne.n	8012946 <HAL_SPI_IRQHandler+0x9a>
 801291e:	69bb      	ldr	r3, [r7, #24]
 8012920:	f003 0320 	and.w	r3, r3, #32
 8012924:	2b00      	cmp	r3, #0
 8012926:	d10e      	bne.n	8012946 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801292e:	2b00      	cmp	r3, #0
 8012930:	d009      	beq.n	8012946 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	4798      	blx	r3
    hspi->RxISR(hspi);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801293e:	6878      	ldr	r0, [r7, #4]
 8012940:	4798      	blx	r3
    handled = 1UL;
 8012942:	2301      	movs	r3, #1
 8012944:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012946:	69bb      	ldr	r3, [r7, #24]
 8012948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801294c:	2b00      	cmp	r3, #0
 801294e:	d10f      	bne.n	8012970 <HAL_SPI_IRQHandler+0xc4>
 8012950:	69bb      	ldr	r3, [r7, #24]
 8012952:	f003 0301 	and.w	r3, r3, #1
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00a      	beq.n	8012970 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801295a:	69bb      	ldr	r3, [r7, #24]
 801295c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012960:	2b00      	cmp	r3, #0
 8012962:	d105      	bne.n	8012970 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	4798      	blx	r3
    handled = 1UL;
 801296c:	2301      	movs	r3, #1
 801296e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	f003 0320 	and.w	r3, r3, #32
 8012976:	2b00      	cmp	r3, #0
 8012978:	d10f      	bne.n	801299a <HAL_SPI_IRQHandler+0xee>
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	f003 0302 	and.w	r3, r3, #2
 8012980:	2b00      	cmp	r3, #0
 8012982:	d00a      	beq.n	801299a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012984:	69bb      	ldr	r3, [r7, #24]
 8012986:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801298a:	2b00      	cmp	r3, #0
 801298c:	d105      	bne.n	801299a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	4798      	blx	r3
    handled = 1UL;
 8012996:	2301      	movs	r3, #1
 8012998:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801299c:	2b00      	cmp	r3, #0
 801299e:	f040 8147 	bne.w	8012c30 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	f003 0308 	and.w	r3, r3, #8
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f000 808b 	beq.w	8012ac4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	699a      	ldr	r2, [r3, #24]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f042 0208 	orr.w	r2, r2, #8
 80129bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	699a      	ldr	r2, [r3, #24]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	f042 0210 	orr.w	r2, r2, #16
 80129cc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	699a      	ldr	r2, [r3, #24]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80129dc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	691a      	ldr	r2, [r3, #16]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f022 0208 	bic.w	r2, r2, #8
 80129ec:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	689b      	ldr	r3, [r3, #8]
 80129f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d13d      	bne.n	8012a78 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80129fc:	e036      	b.n	8012a6c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	68db      	ldr	r3, [r3, #12]
 8012a02:	2b0f      	cmp	r3, #15
 8012a04:	d90b      	bls.n	8012a1e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012a10:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a16:	1d1a      	adds	r2, r3, #4
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	665a      	str	r2, [r3, #100]	@ 0x64
 8012a1c:	e01d      	b.n	8012a5a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	2b07      	cmp	r3, #7
 8012a24:	d90b      	bls.n	8012a3e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a2a:	68fa      	ldr	r2, [r7, #12]
 8012a2c:	8812      	ldrh	r2, [r2, #0]
 8012a2e:	b292      	uxth	r2, r2
 8012a30:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a36:	1c9a      	adds	r2, r3, #2
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	665a      	str	r2, [r3, #100]	@ 0x64
 8012a3c:	e00d      	b.n	8012a5a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a4a:	7812      	ldrb	r2, [r2, #0]
 8012a4c:	b2d2      	uxtb	r2, r2
 8012a4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012a54:	1c5a      	adds	r2, r3, #1
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	3b01      	subs	r3, #1
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d1c2      	bne.n	80129fe <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f000 f985 	bl	8012d88 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2201      	movs	r2, #1
 8012a82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d003      	beq.n	8012a98 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f000 f8f7 	bl	8012c84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012a96:	e0d0      	b.n	8012c3a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012a98:	7cfb      	ldrb	r3, [r7, #19]
 8012a9a:	2b05      	cmp	r3, #5
 8012a9c:	d103      	bne.n	8012aa6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 f8dc 	bl	8012c5c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012aa4:	e0c6      	b.n	8012c34 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012aa6:	7cfb      	ldrb	r3, [r7, #19]
 8012aa8:	2b04      	cmp	r3, #4
 8012aaa:	d103      	bne.n	8012ab4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f000 f8cb 	bl	8012c48 <HAL_SPI_RxCpltCallback>
    return;
 8012ab2:	e0bf      	b.n	8012c34 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012ab4:	7cfb      	ldrb	r3, [r7, #19]
 8012ab6:	2b03      	cmp	r3, #3
 8012ab8:	f040 80bc 	bne.w	8012c34 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7ee ff91 	bl	80019e4 <HAL_SPI_TxCpltCallback>
    return;
 8012ac2:	e0b7      	b.n	8012c34 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012ac4:	69bb      	ldr	r3, [r7, #24]
 8012ac6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	f000 80b5 	beq.w	8012c3a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d00f      	beq.n	8012afa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ae0:	f043 0204 	orr.w	r2, r3, #4
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	699a      	ldr	r2, [r3, #24]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012af8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d00f      	beq.n	8012b24 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b0a:	f043 0201 	orr.w	r2, r3, #1
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	699a      	ldr	r2, [r3, #24]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012b22:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012b24:	69bb      	ldr	r3, [r7, #24]
 8012b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00f      	beq.n	8012b4e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b34:	f043 0208 	orr.w	r2, r3, #8
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	699a      	ldr	r2, [r3, #24]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012b4c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	f003 0320 	and.w	r3, r3, #32
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d00f      	beq.n	8012b78 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	699a      	ldr	r2, [r3, #24]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f042 0220 	orr.w	r2, r2, #32
 8012b76:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d05a      	beq.n	8012c38 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	681a      	ldr	r2, [r3, #0]
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f022 0201 	bic.w	r2, r2, #1
 8012b90:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	6919      	ldr	r1, [r3, #16]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	4b28      	ldr	r3, [pc, #160]	@ (8012c40 <HAL_SPI_IRQHandler+0x394>)
 8012b9e:	400b      	ands	r3, r1
 8012ba0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012ba8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8012bac:	d138      	bne.n	8012c20 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	689a      	ldr	r2, [r3, #8]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8012bbc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d013      	beq.n	8012bee <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012bca:	4a1e      	ldr	r2, [pc, #120]	@ (8012c44 <HAL_SPI_IRQHandler+0x398>)
 8012bcc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7f3 fb06 	bl	80061e4 <HAL_DMA_Abort_IT>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d007      	beq.n	8012bee <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012be4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d020      	beq.n	8012c38 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bfa:	4a12      	ldr	r2, [pc, #72]	@ (8012c44 <HAL_SPI_IRQHandler+0x398>)
 8012bfc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7f3 faee 	bl	80061e4 <HAL_DMA_Abort_IT>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d014      	beq.n	8012c38 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012c1e:	e00b      	b.n	8012c38 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2201      	movs	r2, #1
 8012c24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f000 f82b 	bl	8012c84 <HAL_SPI_ErrorCallback>
    return;
 8012c2e:	e003      	b.n	8012c38 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012c30:	bf00      	nop
 8012c32:	e002      	b.n	8012c3a <HAL_SPI_IRQHandler+0x38e>
    return;
 8012c34:	bf00      	nop
 8012c36:	e000      	b.n	8012c3a <HAL_SPI_IRQHandler+0x38e>
    return;
 8012c38:	bf00      	nop
  }
}
 8012c3a:	3728      	adds	r7, #40	@ 0x28
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	fffffc94 	.word	0xfffffc94
 8012c44:	08012d55 	.word	0x08012d55

08012c48 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012c50:	bf00      	nop
 8012c52:	370c      	adds	r7, #12
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012c64:	bf00      	nop
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr

08012c70 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8012c78:	bf00      	nop
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c84:	b480      	push	{r7}
 8012c86:	b083      	sub	sp, #12
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012c8c:	bf00      	nop
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr

08012c98 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012c98:	b480      	push	{r7}
 8012c9a:	b083      	sub	sp, #12
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012ca0:	bf00      	nop
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr

08012cac <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cb8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	2b07      	cmp	r3, #7
 8012cc4:	d011      	beq.n	8012cea <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012cca:	69db      	ldr	r3, [r3, #28]
 8012ccc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012cd0:	d103      	bne.n	8012cda <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	f7ee fe86 	bl	80019e4 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012cd8:	e007      	b.n	8012cea <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	691a      	ldr	r2, [r3, #16]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f042 0208 	orr.w	r2, r2, #8
 8012ce8:	611a      	str	r2, [r3, #16]
}
 8012cea:	bf00      	nop
 8012cec:	3710      	adds	r7, #16
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012cf2:	b580      	push	{r7, lr}
 8012cf4:	b084      	sub	sp, #16
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cfe:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f7ff ffb5 	bl	8012c70 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012d06:	bf00      	nop
 8012d08:	3710      	adds	r7, #16
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}

08012d0e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012d0e:	b580      	push	{r7, lr}
 8012d10:	b084      	sub	sp, #16
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d1a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7f4 fbdf 	bl	80074e0 <HAL_DMA_GetError>
 8012d22:	4603      	mov	r3, r0
 8012d24:	2b02      	cmp	r3, #2
 8012d26:	d011      	beq.n	8012d4c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f000 f82d 	bl	8012d88 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012d34:	f043 0210 	orr.w	r2, r3, #16
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	2201      	movs	r2, #1
 8012d42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012d46:	68f8      	ldr	r0, [r7, #12]
 8012d48:	f7ff ff9c 	bl	8012c84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012d4c:	bf00      	nop
 8012d4e:	3710      	adds	r7, #16
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	2200      	movs	r2, #0
 8012d66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2201      	movs	r2, #1
 8012d76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012d7a:	68f8      	ldr	r0, [r7, #12]
 8012d7c:	f7ff ff82 	bl	8012c84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012d80:	bf00      	nop
 8012d82:	3710      	adds	r7, #16
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	695b      	ldr	r3, [r3, #20]
 8012d96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	699a      	ldr	r2, [r3, #24]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f042 0208 	orr.w	r2, r2, #8
 8012da6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	699a      	ldr	r2, [r3, #24]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	f042 0210 	orr.w	r2, r2, #16
 8012db6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	681a      	ldr	r2, [r3, #0]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	f022 0201 	bic.w	r2, r2, #1
 8012dc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	6919      	ldr	r1, [r3, #16]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681a      	ldr	r2, [r3, #0]
 8012dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8012ec4 <SPI_CloseTransfer+0x13c>)
 8012dd4:	400b      	ands	r3, r1
 8012dd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	689a      	ldr	r2, [r3, #8]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8012de6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	2b04      	cmp	r3, #4
 8012df2:	d014      	beq.n	8012e1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f003 0320 	and.w	r3, r3, #32
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d00f      	beq.n	8012e1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	699a      	ldr	r2, [r3, #24]
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f042 0220 	orr.w	r2, r2, #32
 8012e1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012e24:	b2db      	uxtb	r3, r3
 8012e26:	2b03      	cmp	r3, #3
 8012e28:	d014      	beq.n	8012e54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d00f      	beq.n	8012e54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e3a:	f043 0204 	orr.w	r2, r3, #4
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	699a      	ldr	r2, [r3, #24]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012e52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00f      	beq.n	8012e7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e64:	f043 0201 	orr.w	r2, r3, #1
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	699a      	ldr	r2, [r3, #24]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012e7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00f      	beq.n	8012ea8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e8e:	f043 0208 	orr.w	r2, r3, #8
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	699a      	ldr	r2, [r3, #24]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012ea6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8012eb8:	bf00      	nop
 8012eba:	3714      	adds	r7, #20
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr
 8012ec4:	fffffc90 	.word	0xfffffc90

08012ec8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b084      	sub	sp, #16
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	603b      	str	r3, [r7, #0]
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012ed8:	e010      	b.n	8012efc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012eda:	f7f0 fc29 	bl	8003730 <HAL_GetTick>
 8012ede:	4602      	mov	r2, r0
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	683a      	ldr	r2, [r7, #0]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d803      	bhi.n	8012ef2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef0:	d102      	bne.n	8012ef8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d101      	bne.n	8012efc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8012ef8:	2303      	movs	r3, #3
 8012efa:	e00f      	b.n	8012f1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	695a      	ldr	r2, [r3, #20]
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	4013      	ands	r3, r2
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	bf0c      	ite	eq
 8012f0c:	2301      	moveq	r3, #1
 8012f0e:	2300      	movne	r3, #0
 8012f10:	b2db      	uxtb	r3, r3
 8012f12:	461a      	mov	r2, r3
 8012f14:	79fb      	ldrb	r3, [r7, #7]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d0df      	beq.n	8012eda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8012f1a:	2300      	movs	r3, #0
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3710      	adds	r7, #16
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012f24:	b480      	push	{r7}
 8012f26:	b085      	sub	sp, #20
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f30:	095b      	lsrs	r3, r3, #5
 8012f32:	3301      	adds	r3, #1
 8012f34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	3307      	adds	r3, #7
 8012f42:	08db      	lsrs	r3, r3, #3
 8012f44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3714      	adds	r7, #20
 8012f52:	46bd      	mov	sp, r7
 8012f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f58:	4770      	bx	lr

08012f5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012f5a:	b580      	push	{r7, lr}
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d101      	bne.n	8012f6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	e049      	b.n	8013000 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d106      	bne.n	8012f86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f7ef fbdb 	bl	800273c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2202      	movs	r2, #2
 8012f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	3304      	adds	r3, #4
 8012f96:	4619      	mov	r1, r3
 8012f98:	4610      	mov	r0, r2
 8012f9a:	f000 fadf 	bl	801355c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2201      	movs	r2, #1
 8012faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2201      	movs	r2, #1
 8012fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2201      	movs	r2, #1
 8012fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2201      	movs	r2, #1
 8012fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2201      	movs	r2, #1
 8012fd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2201      	movs	r2, #1
 8012fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2201      	movs	r2, #1
 8012fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012ffe:	2300      	movs	r3, #0
}
 8013000:	4618      	mov	r0, r3
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}

08013008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013008:	b480      	push	{r7}
 801300a:	b085      	sub	sp, #20
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013016:	b2db      	uxtb	r3, r3
 8013018:	2b01      	cmp	r3, #1
 801301a:	d001      	beq.n	8013020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801301c:	2301      	movs	r3, #1
 801301e:	e054      	b.n	80130ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2202      	movs	r2, #2
 8013024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	68da      	ldr	r2, [r3, #12]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f042 0201 	orr.w	r2, r2, #1
 8013036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	4a26      	ldr	r2, [pc, #152]	@ (80130d8 <HAL_TIM_Base_Start_IT+0xd0>)
 801303e:	4293      	cmp	r3, r2
 8013040:	d022      	beq.n	8013088 <HAL_TIM_Base_Start_IT+0x80>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801304a:	d01d      	beq.n	8013088 <HAL_TIM_Base_Start_IT+0x80>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	4a22      	ldr	r2, [pc, #136]	@ (80130dc <HAL_TIM_Base_Start_IT+0xd4>)
 8013052:	4293      	cmp	r3, r2
 8013054:	d018      	beq.n	8013088 <HAL_TIM_Base_Start_IT+0x80>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	4a21      	ldr	r2, [pc, #132]	@ (80130e0 <HAL_TIM_Base_Start_IT+0xd8>)
 801305c:	4293      	cmp	r3, r2
 801305e:	d013      	beq.n	8013088 <HAL_TIM_Base_Start_IT+0x80>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	4a1f      	ldr	r2, [pc, #124]	@ (80130e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8013066:	4293      	cmp	r3, r2
 8013068:	d00e      	beq.n	8013088 <HAL_TIM_Base_Start_IT+0x80>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	4a1e      	ldr	r2, [pc, #120]	@ (80130e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8013070:	4293      	cmp	r3, r2
 8013072:	d009      	beq.n	8013088 <HAL_TIM_Base_Start_IT+0x80>
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	4a1c      	ldr	r2, [pc, #112]	@ (80130ec <HAL_TIM_Base_Start_IT+0xe4>)
 801307a:	4293      	cmp	r3, r2
 801307c:	d004      	beq.n	8013088 <HAL_TIM_Base_Start_IT+0x80>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	4a1b      	ldr	r2, [pc, #108]	@ (80130f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8013084:	4293      	cmp	r3, r2
 8013086:	d115      	bne.n	80130b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	689a      	ldr	r2, [r3, #8]
 801308e:	4b19      	ldr	r3, [pc, #100]	@ (80130f4 <HAL_TIM_Base_Start_IT+0xec>)
 8013090:	4013      	ands	r3, r2
 8013092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2b06      	cmp	r3, #6
 8013098:	d015      	beq.n	80130c6 <HAL_TIM_Base_Start_IT+0xbe>
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80130a0:	d011      	beq.n	80130c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	681a      	ldr	r2, [r3, #0]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f042 0201 	orr.w	r2, r2, #1
 80130b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130b2:	e008      	b.n	80130c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	681a      	ldr	r2, [r3, #0]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f042 0201 	orr.w	r2, r2, #1
 80130c2:	601a      	str	r2, [r3, #0]
 80130c4:	e000      	b.n	80130c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80130c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80130c8:	2300      	movs	r3, #0
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3714      	adds	r7, #20
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr
 80130d6:	bf00      	nop
 80130d8:	40010000 	.word	0x40010000
 80130dc:	40000400 	.word	0x40000400
 80130e0:	40000800 	.word	0x40000800
 80130e4:	40000c00 	.word	0x40000c00
 80130e8:	40010400 	.word	0x40010400
 80130ec:	40001800 	.word	0x40001800
 80130f0:	40014000 	.word	0x40014000
 80130f4:	00010007 	.word	0x00010007

080130f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b084      	sub	sp, #16
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	68db      	ldr	r3, [r3, #12]
 8013106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	691b      	ldr	r3, [r3, #16]
 801310e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	f003 0302 	and.w	r3, r3, #2
 8013116:	2b00      	cmp	r3, #0
 8013118:	d020      	beq.n	801315c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	f003 0302 	and.w	r3, r3, #2
 8013120:	2b00      	cmp	r3, #0
 8013122:	d01b      	beq.n	801315c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f06f 0202 	mvn.w	r2, #2
 801312c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2201      	movs	r2, #1
 8013132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	699b      	ldr	r3, [r3, #24]
 801313a:	f003 0303 	and.w	r3, r3, #3
 801313e:	2b00      	cmp	r3, #0
 8013140:	d003      	beq.n	801314a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f000 f9ec 	bl	8013520 <HAL_TIM_IC_CaptureCallback>
 8013148:	e005      	b.n	8013156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 f9de 	bl	801350c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f000 f9ef 	bl	8013534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	2200      	movs	r2, #0
 801315a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	f003 0304 	and.w	r3, r3, #4
 8013162:	2b00      	cmp	r3, #0
 8013164:	d020      	beq.n	80131a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f003 0304 	and.w	r3, r3, #4
 801316c:	2b00      	cmp	r3, #0
 801316e:	d01b      	beq.n	80131a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f06f 0204 	mvn.w	r2, #4
 8013178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	2202      	movs	r2, #2
 801317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	699b      	ldr	r3, [r3, #24]
 8013186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801318a:	2b00      	cmp	r3, #0
 801318c:	d003      	beq.n	8013196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f000 f9c6 	bl	8013520 <HAL_TIM_IC_CaptureCallback>
 8013194:	e005      	b.n	80131a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f000 f9b8 	bl	801350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f000 f9c9 	bl	8013534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2200      	movs	r2, #0
 80131a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	f003 0308 	and.w	r3, r3, #8
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d020      	beq.n	80131f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f003 0308 	and.w	r3, r3, #8
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d01b      	beq.n	80131f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	f06f 0208 	mvn.w	r2, #8
 80131c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2204      	movs	r2, #4
 80131ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	69db      	ldr	r3, [r3, #28]
 80131d2:	f003 0303 	and.w	r3, r3, #3
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d003      	beq.n	80131e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f000 f9a0 	bl	8013520 <HAL_TIM_IC_CaptureCallback>
 80131e0:	e005      	b.n	80131ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f000 f992 	bl	801350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f000 f9a3 	bl	8013534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2200      	movs	r2, #0
 80131f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	f003 0310 	and.w	r3, r3, #16
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d020      	beq.n	8013240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	f003 0310 	and.w	r3, r3, #16
 8013204:	2b00      	cmp	r3, #0
 8013206:	d01b      	beq.n	8013240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	f06f 0210 	mvn.w	r2, #16
 8013210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2208      	movs	r2, #8
 8013216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	69db      	ldr	r3, [r3, #28]
 801321e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013222:	2b00      	cmp	r3, #0
 8013224:	d003      	beq.n	801322e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 f97a 	bl	8013520 <HAL_TIM_IC_CaptureCallback>
 801322c:	e005      	b.n	801323a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f000 f96c 	bl	801350c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f000 f97d 	bl	8013534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	2200      	movs	r2, #0
 801323e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	f003 0301 	and.w	r3, r3, #1
 8013246:	2b00      	cmp	r3, #0
 8013248:	d00c      	beq.n	8013264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	f003 0301 	and.w	r3, r3, #1
 8013250:	2b00      	cmp	r3, #0
 8013252:	d007      	beq.n	8013264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f06f 0201 	mvn.w	r2, #1
 801325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 f94a 	bl	80134f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801326a:	2b00      	cmp	r3, #0
 801326c:	d104      	bne.n	8013278 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013274:	2b00      	cmp	r3, #0
 8013276:	d00c      	beq.n	8013292 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801327e:	2b00      	cmp	r3, #0
 8013280:	d007      	beq.n	8013292 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801328a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f000 fb3b 	bl	8013908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013298:	2b00      	cmp	r3, #0
 801329a:	d00c      	beq.n	80132b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d007      	beq.n	80132b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80132ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f000 fb33 	bl	801391c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d00c      	beq.n	80132da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d007      	beq.n	80132da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80132d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f000 f937 	bl	8013548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	f003 0320 	and.w	r3, r3, #32
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d00c      	beq.n	80132fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f003 0320 	and.w	r3, r3, #32
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d007      	beq.n	80132fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	f06f 0220 	mvn.w	r2, #32
 80132f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f000 fafb 	bl	80138f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80132fe:	bf00      	nop
 8013300:	3710      	adds	r7, #16
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
	...

08013308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013312:	2300      	movs	r3, #0
 8013314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801331c:	2b01      	cmp	r3, #1
 801331e:	d101      	bne.n	8013324 <HAL_TIM_ConfigClockSource+0x1c>
 8013320:	2302      	movs	r3, #2
 8013322:	e0dc      	b.n	80134de <HAL_TIM_ConfigClockSource+0x1d6>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2201      	movs	r2, #1
 8013328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2202      	movs	r2, #2
 8013330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	689b      	ldr	r3, [r3, #8]
 801333a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801333c:	68ba      	ldr	r2, [r7, #8]
 801333e:	4b6a      	ldr	r3, [pc, #424]	@ (80134e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013340:	4013      	ands	r3, r2
 8013342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801334a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	68ba      	ldr	r2, [r7, #8]
 8013352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	4a64      	ldr	r2, [pc, #400]	@ (80134ec <HAL_TIM_ConfigClockSource+0x1e4>)
 801335a:	4293      	cmp	r3, r2
 801335c:	f000 80a9 	beq.w	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013360:	4a62      	ldr	r2, [pc, #392]	@ (80134ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8013362:	4293      	cmp	r3, r2
 8013364:	f200 80ae 	bhi.w	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013368:	4a61      	ldr	r2, [pc, #388]	@ (80134f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801336a:	4293      	cmp	r3, r2
 801336c:	f000 80a1 	beq.w	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013370:	4a5f      	ldr	r2, [pc, #380]	@ (80134f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013372:	4293      	cmp	r3, r2
 8013374:	f200 80a6 	bhi.w	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013378:	4a5e      	ldr	r2, [pc, #376]	@ (80134f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801337a:	4293      	cmp	r3, r2
 801337c:	f000 8099 	beq.w	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013380:	4a5c      	ldr	r2, [pc, #368]	@ (80134f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013382:	4293      	cmp	r3, r2
 8013384:	f200 809e 	bhi.w	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013388:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801338c:	f000 8091 	beq.w	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013390:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013394:	f200 8096 	bhi.w	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801339c:	f000 8089 	beq.w	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80133a4:	f200 808e 	bhi.w	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80133ac:	d03e      	beq.n	801342c <HAL_TIM_ConfigClockSource+0x124>
 80133ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80133b2:	f200 8087 	bhi.w	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80133ba:	f000 8086 	beq.w	80134ca <HAL_TIM_ConfigClockSource+0x1c2>
 80133be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80133c2:	d87f      	bhi.n	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133c4:	2b70      	cmp	r3, #112	@ 0x70
 80133c6:	d01a      	beq.n	80133fe <HAL_TIM_ConfigClockSource+0xf6>
 80133c8:	2b70      	cmp	r3, #112	@ 0x70
 80133ca:	d87b      	bhi.n	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133cc:	2b60      	cmp	r3, #96	@ 0x60
 80133ce:	d050      	beq.n	8013472 <HAL_TIM_ConfigClockSource+0x16a>
 80133d0:	2b60      	cmp	r3, #96	@ 0x60
 80133d2:	d877      	bhi.n	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133d4:	2b50      	cmp	r3, #80	@ 0x50
 80133d6:	d03c      	beq.n	8013452 <HAL_TIM_ConfigClockSource+0x14a>
 80133d8:	2b50      	cmp	r3, #80	@ 0x50
 80133da:	d873      	bhi.n	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133dc:	2b40      	cmp	r3, #64	@ 0x40
 80133de:	d058      	beq.n	8013492 <HAL_TIM_ConfigClockSource+0x18a>
 80133e0:	2b40      	cmp	r3, #64	@ 0x40
 80133e2:	d86f      	bhi.n	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133e4:	2b30      	cmp	r3, #48	@ 0x30
 80133e6:	d064      	beq.n	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133e8:	2b30      	cmp	r3, #48	@ 0x30
 80133ea:	d86b      	bhi.n	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133ec:	2b20      	cmp	r3, #32
 80133ee:	d060      	beq.n	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133f0:	2b20      	cmp	r3, #32
 80133f2:	d867      	bhi.n	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d05c      	beq.n	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133f8:	2b10      	cmp	r3, #16
 80133fa:	d05a      	beq.n	80134b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80133fc:	e062      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801340e:	f000 f9c3 	bl	8013798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	689b      	ldr	r3, [r3, #8]
 8013418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	68ba      	ldr	r2, [r7, #8]
 8013428:	609a      	str	r2, [r3, #8]
      break;
 801342a:	e04f      	b.n	80134cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801343c:	f000 f9ac 	bl	8013798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	689a      	ldr	r2, [r3, #8]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801344e:	609a      	str	r2, [r3, #8]
      break;
 8013450:	e03c      	b.n	80134cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801345e:	461a      	mov	r2, r3
 8013460:	f000 f91c 	bl	801369c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2150      	movs	r1, #80	@ 0x50
 801346a:	4618      	mov	r0, r3
 801346c:	f000 f976 	bl	801375c <TIM_ITRx_SetConfig>
      break;
 8013470:	e02c      	b.n	80134cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801347e:	461a      	mov	r2, r3
 8013480:	f000 f93b 	bl	80136fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	2160      	movs	r1, #96	@ 0x60
 801348a:	4618      	mov	r0, r3
 801348c:	f000 f966 	bl	801375c <TIM_ITRx_SetConfig>
      break;
 8013490:	e01c      	b.n	80134cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801349e:	461a      	mov	r2, r3
 80134a0:	f000 f8fc 	bl	801369c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2140      	movs	r1, #64	@ 0x40
 80134aa:	4618      	mov	r0, r3
 80134ac:	f000 f956 	bl	801375c <TIM_ITRx_SetConfig>
      break;
 80134b0:	e00c      	b.n	80134cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	4619      	mov	r1, r3
 80134bc:	4610      	mov	r0, r2
 80134be:	f000 f94d 	bl	801375c <TIM_ITRx_SetConfig>
      break;
 80134c2:	e003      	b.n	80134cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80134c4:	2301      	movs	r3, #1
 80134c6:	73fb      	strb	r3, [r7, #15]
      break;
 80134c8:	e000      	b.n	80134cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80134ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2201      	movs	r2, #1
 80134d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2200      	movs	r2, #0
 80134d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80134dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	ffceff88 	.word	0xffceff88
 80134ec:	00100040 	.word	0x00100040
 80134f0:	00100030 	.word	0x00100030
 80134f4:	00100020 	.word	0x00100020

080134f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80134f8:	b480      	push	{r7}
 80134fa:	b083      	sub	sp, #12
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8013500:	bf00      	nop
 8013502:	370c      	adds	r7, #12
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr

0801350c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013514:	bf00      	nop
 8013516:	370c      	adds	r7, #12
 8013518:	46bd      	mov	sp, r7
 801351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351e:	4770      	bx	lr

08013520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013520:	b480      	push	{r7}
 8013522:	b083      	sub	sp, #12
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013528:	bf00      	nop
 801352a:	370c      	adds	r7, #12
 801352c:	46bd      	mov	sp, r7
 801352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013532:	4770      	bx	lr

08013534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801353c:	bf00      	nop
 801353e:	370c      	adds	r7, #12
 8013540:	46bd      	mov	sp, r7
 8013542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013546:	4770      	bx	lr

08013548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013548:	b480      	push	{r7}
 801354a:	b083      	sub	sp, #12
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013550:	bf00      	nop
 8013552:	370c      	adds	r7, #12
 8013554:	46bd      	mov	sp, r7
 8013556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355a:	4770      	bx	lr

0801355c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801355c:	b480      	push	{r7}
 801355e:	b085      	sub	sp, #20
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	4a43      	ldr	r2, [pc, #268]	@ (801367c <TIM_Base_SetConfig+0x120>)
 8013570:	4293      	cmp	r3, r2
 8013572:	d013      	beq.n	801359c <TIM_Base_SetConfig+0x40>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801357a:	d00f      	beq.n	801359c <TIM_Base_SetConfig+0x40>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	4a40      	ldr	r2, [pc, #256]	@ (8013680 <TIM_Base_SetConfig+0x124>)
 8013580:	4293      	cmp	r3, r2
 8013582:	d00b      	beq.n	801359c <TIM_Base_SetConfig+0x40>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	4a3f      	ldr	r2, [pc, #252]	@ (8013684 <TIM_Base_SetConfig+0x128>)
 8013588:	4293      	cmp	r3, r2
 801358a:	d007      	beq.n	801359c <TIM_Base_SetConfig+0x40>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	4a3e      	ldr	r2, [pc, #248]	@ (8013688 <TIM_Base_SetConfig+0x12c>)
 8013590:	4293      	cmp	r3, r2
 8013592:	d003      	beq.n	801359c <TIM_Base_SetConfig+0x40>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	4a3d      	ldr	r2, [pc, #244]	@ (801368c <TIM_Base_SetConfig+0x130>)
 8013598:	4293      	cmp	r3, r2
 801359a:	d108      	bne.n	80135ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80135a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	685b      	ldr	r3, [r3, #4]
 80135a8:	68fa      	ldr	r2, [r7, #12]
 80135aa:	4313      	orrs	r3, r2
 80135ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4a32      	ldr	r2, [pc, #200]	@ (801367c <TIM_Base_SetConfig+0x120>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d01f      	beq.n	80135f6 <TIM_Base_SetConfig+0x9a>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135bc:	d01b      	beq.n	80135f6 <TIM_Base_SetConfig+0x9a>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	4a2f      	ldr	r2, [pc, #188]	@ (8013680 <TIM_Base_SetConfig+0x124>)
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d017      	beq.n	80135f6 <TIM_Base_SetConfig+0x9a>
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	4a2e      	ldr	r2, [pc, #184]	@ (8013684 <TIM_Base_SetConfig+0x128>)
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d013      	beq.n	80135f6 <TIM_Base_SetConfig+0x9a>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	4a2d      	ldr	r2, [pc, #180]	@ (8013688 <TIM_Base_SetConfig+0x12c>)
 80135d2:	4293      	cmp	r3, r2
 80135d4:	d00f      	beq.n	80135f6 <TIM_Base_SetConfig+0x9a>
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	4a2c      	ldr	r2, [pc, #176]	@ (801368c <TIM_Base_SetConfig+0x130>)
 80135da:	4293      	cmp	r3, r2
 80135dc:	d00b      	beq.n	80135f6 <TIM_Base_SetConfig+0x9a>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4a2b      	ldr	r2, [pc, #172]	@ (8013690 <TIM_Base_SetConfig+0x134>)
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d007      	beq.n	80135f6 <TIM_Base_SetConfig+0x9a>
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	4a2a      	ldr	r2, [pc, #168]	@ (8013694 <TIM_Base_SetConfig+0x138>)
 80135ea:	4293      	cmp	r3, r2
 80135ec:	d003      	beq.n	80135f6 <TIM_Base_SetConfig+0x9a>
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	4a29      	ldr	r2, [pc, #164]	@ (8013698 <TIM_Base_SetConfig+0x13c>)
 80135f2:	4293      	cmp	r3, r2
 80135f4:	d108      	bne.n	8013608 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80135fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	68fa      	ldr	r2, [r7, #12]
 8013604:	4313      	orrs	r3, r2
 8013606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	695b      	ldr	r3, [r3, #20]
 8013612:	4313      	orrs	r3, r2
 8013614:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013616:	683b      	ldr	r3, [r7, #0]
 8013618:	689a      	ldr	r2, [r3, #8]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4a14      	ldr	r2, [pc, #80]	@ (801367c <TIM_Base_SetConfig+0x120>)
 801362a:	4293      	cmp	r3, r2
 801362c:	d00f      	beq.n	801364e <TIM_Base_SetConfig+0xf2>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4a16      	ldr	r2, [pc, #88]	@ (801368c <TIM_Base_SetConfig+0x130>)
 8013632:	4293      	cmp	r3, r2
 8013634:	d00b      	beq.n	801364e <TIM_Base_SetConfig+0xf2>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4a15      	ldr	r2, [pc, #84]	@ (8013690 <TIM_Base_SetConfig+0x134>)
 801363a:	4293      	cmp	r3, r2
 801363c:	d007      	beq.n	801364e <TIM_Base_SetConfig+0xf2>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4a14      	ldr	r2, [pc, #80]	@ (8013694 <TIM_Base_SetConfig+0x138>)
 8013642:	4293      	cmp	r3, r2
 8013644:	d003      	beq.n	801364e <TIM_Base_SetConfig+0xf2>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	4a13      	ldr	r2, [pc, #76]	@ (8013698 <TIM_Base_SetConfig+0x13c>)
 801364a:	4293      	cmp	r3, r2
 801364c:	d103      	bne.n	8013656 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	691a      	ldr	r2, [r3, #16]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f043 0204 	orr.w	r2, r3, #4
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2201      	movs	r2, #1
 8013666:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	68fa      	ldr	r2, [r7, #12]
 801366c:	601a      	str	r2, [r3, #0]
}
 801366e:	bf00      	nop
 8013670:	3714      	adds	r7, #20
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop
 801367c:	40010000 	.word	0x40010000
 8013680:	40000400 	.word	0x40000400
 8013684:	40000800 	.word	0x40000800
 8013688:	40000c00 	.word	0x40000c00
 801368c:	40010400 	.word	0x40010400
 8013690:	40014000 	.word	0x40014000
 8013694:	40014400 	.word	0x40014400
 8013698:	40014800 	.word	0x40014800

0801369c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801369c:	b480      	push	{r7}
 801369e:	b087      	sub	sp, #28
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	6a1b      	ldr	r3, [r3, #32]
 80136ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	6a1b      	ldr	r3, [r3, #32]
 80136b2:	f023 0201 	bic.w	r2, r3, #1
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	699b      	ldr	r3, [r3, #24]
 80136be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80136c0:	693b      	ldr	r3, [r7, #16]
 80136c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80136c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	011b      	lsls	r3, r3, #4
 80136cc:	693a      	ldr	r2, [r7, #16]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	f023 030a 	bic.w	r3, r3, #10
 80136d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80136da:	697a      	ldr	r2, [r7, #20]
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	4313      	orrs	r3, r2
 80136e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	693a      	ldr	r2, [r7, #16]
 80136e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	697a      	ldr	r2, [r7, #20]
 80136ec:	621a      	str	r2, [r3, #32]
}
 80136ee:	bf00      	nop
 80136f0:	371c      	adds	r7, #28
 80136f2:	46bd      	mov	sp, r7
 80136f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f8:	4770      	bx	lr

080136fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80136fa:	b480      	push	{r7}
 80136fc:	b087      	sub	sp, #28
 80136fe:	af00      	add	r7, sp, #0
 8013700:	60f8      	str	r0, [r7, #12]
 8013702:	60b9      	str	r1, [r7, #8]
 8013704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	6a1b      	ldr	r3, [r3, #32]
 801370a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	6a1b      	ldr	r3, [r3, #32]
 8013710:	f023 0210 	bic.w	r2, r3, #16
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	699b      	ldr	r3, [r3, #24]
 801371c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	031b      	lsls	r3, r3, #12
 801372a:	693a      	ldr	r2, [r7, #16]
 801372c:	4313      	orrs	r3, r2
 801372e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013736:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	011b      	lsls	r3, r3, #4
 801373c:	697a      	ldr	r2, [r7, #20]
 801373e:	4313      	orrs	r3, r2
 8013740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	693a      	ldr	r2, [r7, #16]
 8013746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	697a      	ldr	r2, [r7, #20]
 801374c:	621a      	str	r2, [r3, #32]
}
 801374e:	bf00      	nop
 8013750:	371c      	adds	r7, #28
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr
	...

0801375c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801375c:	b480      	push	{r7}
 801375e:	b085      	sub	sp, #20
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	689b      	ldr	r3, [r3, #8]
 801376a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801376c:	68fa      	ldr	r2, [r7, #12]
 801376e:	4b09      	ldr	r3, [pc, #36]	@ (8013794 <TIM_ITRx_SetConfig+0x38>)
 8013770:	4013      	ands	r3, r2
 8013772:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013774:	683a      	ldr	r2, [r7, #0]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	4313      	orrs	r3, r2
 801377a:	f043 0307 	orr.w	r3, r3, #7
 801377e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	609a      	str	r2, [r3, #8]
}
 8013786:	bf00      	nop
 8013788:	3714      	adds	r7, #20
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr
 8013792:	bf00      	nop
 8013794:	ffcfff8f 	.word	0xffcfff8f

08013798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013798:	b480      	push	{r7}
 801379a:	b087      	sub	sp, #28
 801379c:	af00      	add	r7, sp, #0
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	60b9      	str	r1, [r7, #8]
 80137a2:	607a      	str	r2, [r7, #4]
 80137a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	689b      	ldr	r3, [r3, #8]
 80137aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80137b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	021a      	lsls	r2, r3, #8
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	431a      	orrs	r2, r3
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	4313      	orrs	r3, r2
 80137c0:	697a      	ldr	r2, [r7, #20]
 80137c2:	4313      	orrs	r3, r2
 80137c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	697a      	ldr	r2, [r7, #20]
 80137ca:	609a      	str	r2, [r3, #8]
}
 80137cc:	bf00      	nop
 80137ce:	371c      	adds	r7, #28
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80137d8:	b480      	push	{r7}
 80137da:	b085      	sub	sp, #20
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	d101      	bne.n	80137f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80137ec:	2302      	movs	r3, #2
 80137ee:	e06d      	b.n	80138cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2201      	movs	r2, #1
 80137f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2202      	movs	r2, #2
 80137fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	4a30      	ldr	r2, [pc, #192]	@ (80138d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013816:	4293      	cmp	r3, r2
 8013818:	d004      	beq.n	8013824 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	4a2f      	ldr	r2, [pc, #188]	@ (80138dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013820:	4293      	cmp	r3, r2
 8013822:	d108      	bne.n	8013836 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801382a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	68fa      	ldr	r2, [r7, #12]
 8013832:	4313      	orrs	r3, r2
 8013834:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801383c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	68fa      	ldr	r2, [r7, #12]
 8013844:	4313      	orrs	r3, r2
 8013846:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	68fa      	ldr	r2, [r7, #12]
 801384e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	4a20      	ldr	r2, [pc, #128]	@ (80138d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013856:	4293      	cmp	r3, r2
 8013858:	d022      	beq.n	80138a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013862:	d01d      	beq.n	80138a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	4a1d      	ldr	r2, [pc, #116]	@ (80138e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801386a:	4293      	cmp	r3, r2
 801386c:	d018      	beq.n	80138a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4a1c      	ldr	r2, [pc, #112]	@ (80138e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d013      	beq.n	80138a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	4a1a      	ldr	r2, [pc, #104]	@ (80138e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801387e:	4293      	cmp	r3, r2
 8013880:	d00e      	beq.n	80138a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	4a15      	ldr	r2, [pc, #84]	@ (80138dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013888:	4293      	cmp	r3, r2
 801388a:	d009      	beq.n	80138a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4a16      	ldr	r2, [pc, #88]	@ (80138ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013892:	4293      	cmp	r3, r2
 8013894:	d004      	beq.n	80138a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	4a15      	ldr	r2, [pc, #84]	@ (80138f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801389c:	4293      	cmp	r3, r2
 801389e:	d10c      	bne.n	80138ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80138a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	689b      	ldr	r3, [r3, #8]
 80138ac:	68ba      	ldr	r2, [r7, #8]
 80138ae:	4313      	orrs	r3, r2
 80138b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	68ba      	ldr	r2, [r7, #8]
 80138b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2201      	movs	r2, #1
 80138be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80138ca:	2300      	movs	r3, #0
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3714      	adds	r7, #20
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr
 80138d8:	40010000 	.word	0x40010000
 80138dc:	40010400 	.word	0x40010400
 80138e0:	40000400 	.word	0x40000400
 80138e4:	40000800 	.word	0x40000800
 80138e8:	40000c00 	.word	0x40000c00
 80138ec:	40001800 	.word	0x40001800
 80138f0:	40014000 	.word	0x40014000

080138f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80138fc:	bf00      	nop
 80138fe:	370c      	adds	r7, #12
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr

08013908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013908:	b480      	push	{r7}
 801390a:	b083      	sub	sp, #12
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013910:	bf00      	nop
 8013912:	370c      	adds	r7, #12
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr

0801391c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801391c:	b480      	push	{r7}
 801391e:	b083      	sub	sp, #12
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013924:	bf00      	nop
 8013926:	370c      	adds	r7, #12
 8013928:	46bd      	mov	sp, r7
 801392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392e:	4770      	bx	lr

08013930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d101      	bne.n	8013942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801393e:	2301      	movs	r3, #1
 8013940:	e042      	b.n	80139c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013948:	2b00      	cmp	r3, #0
 801394a:	d106      	bne.n	801395a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7ee ff19 	bl	800278c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2224      	movs	r2, #36	@ 0x24
 801395e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	681a      	ldr	r2, [r3, #0]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	f022 0201 	bic.w	r2, r2, #1
 8013970:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013976:	2b00      	cmp	r3, #0
 8013978:	d002      	beq.n	8013980 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f001 fa6a 	bl	8014e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f000 fcff 	bl	8014384 <UART_SetConfig>
 8013986:	4603      	mov	r3, r0
 8013988:	2b01      	cmp	r3, #1
 801398a:	d101      	bne.n	8013990 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801398c:	2301      	movs	r3, #1
 801398e:	e01b      	b.n	80139c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	685a      	ldr	r2, [r3, #4]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801399e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	689a      	ldr	r2, [r3, #8]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80139ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f042 0201 	orr.w	r2, r2, #1
 80139be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f001 fae9 	bl	8014f98 <UART_CheckIdleState>
 80139c6:	4603      	mov	r3, r0
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3708      	adds	r7, #8
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b08a      	sub	sp, #40	@ 0x28
 80139d4:	af02      	add	r7, sp, #8
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	603b      	str	r3, [r7, #0]
 80139dc:	4613      	mov	r3, r2
 80139de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80139e6:	2b20      	cmp	r3, #32
 80139e8:	d17b      	bne.n	8013ae2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d002      	beq.n	80139f6 <HAL_UART_Transmit+0x26>
 80139f0:	88fb      	ldrh	r3, [r7, #6]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d101      	bne.n	80139fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80139f6:	2301      	movs	r3, #1
 80139f8:	e074      	b.n	8013ae4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2200      	movs	r2, #0
 80139fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	2221      	movs	r2, #33	@ 0x21
 8013a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013a0a:	f7ef fe91 	bl	8003730 <HAL_GetTick>
 8013a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	88fa      	ldrh	r2, [r7, #6]
 8013a14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	88fa      	ldrh	r2, [r7, #6]
 8013a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	689b      	ldr	r3, [r3, #8]
 8013a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013a28:	d108      	bne.n	8013a3c <HAL_UART_Transmit+0x6c>
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	691b      	ldr	r3, [r3, #16]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d104      	bne.n	8013a3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013a32:	2300      	movs	r3, #0
 8013a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	61bb      	str	r3, [r7, #24]
 8013a3a:	e003      	b.n	8013a44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013a40:	2300      	movs	r3, #0
 8013a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013a44:	e030      	b.n	8013aa8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	9300      	str	r3, [sp, #0]
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	2180      	movs	r1, #128	@ 0x80
 8013a50:	68f8      	ldr	r0, [r7, #12]
 8013a52:	f001 fb4b 	bl	80150ec <UART_WaitOnFlagUntilTimeout>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d005      	beq.n	8013a68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2220      	movs	r2, #32
 8013a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8013a64:	2303      	movs	r3, #3
 8013a66:	e03d      	b.n	8013ae4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d10b      	bne.n	8013a86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013a6e:	69bb      	ldr	r3, [r7, #24]
 8013a70:	881b      	ldrh	r3, [r3, #0]
 8013a72:	461a      	mov	r2, r3
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013a7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013a7e:	69bb      	ldr	r3, [r7, #24]
 8013a80:	3302      	adds	r3, #2
 8013a82:	61bb      	str	r3, [r7, #24]
 8013a84:	e007      	b.n	8013a96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	781a      	ldrb	r2, [r3, #0]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	3301      	adds	r3, #1
 8013a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	3b01      	subs	r3, #1
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d1c8      	bne.n	8013a46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	9300      	str	r3, [sp, #0]
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	2200      	movs	r2, #0
 8013abc:	2140      	movs	r1, #64	@ 0x40
 8013abe:	68f8      	ldr	r0, [r7, #12]
 8013ac0:	f001 fb14 	bl	80150ec <UART_WaitOnFlagUntilTimeout>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d005      	beq.n	8013ad6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2220      	movs	r2, #32
 8013ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8013ad2:	2303      	movs	r3, #3
 8013ad4:	e006      	b.n	8013ae4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2220      	movs	r2, #32
 8013ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e000      	b.n	8013ae4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013ae2:	2302      	movs	r3, #2
  }
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3720      	adds	r7, #32
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}

08013aec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b08a      	sub	sp, #40	@ 0x28
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	4613      	mov	r3, r2
 8013af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013b00:	2b20      	cmp	r3, #32
 8013b02:	d137      	bne.n	8013b74 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d002      	beq.n	8013b10 <HAL_UART_Receive_DMA+0x24>
 8013b0a:	88fb      	ldrh	r3, [r7, #6]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d101      	bne.n	8013b14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8013b10:	2301      	movs	r3, #1
 8013b12:	e030      	b.n	8013b76 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	2200      	movs	r2, #0
 8013b18:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	4a18      	ldr	r2, [pc, #96]	@ (8013b80 <HAL_UART_Receive_DMA+0x94>)
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d01f      	beq.n	8013b64 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d018      	beq.n	8013b64 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	e853 3f00 	ldrex	r3, [r3]
 8013b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b50:	623b      	str	r3, [r7, #32]
 8013b52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b54:	69f9      	ldr	r1, [r7, #28]
 8013b56:	6a3a      	ldr	r2, [r7, #32]
 8013b58:	e841 2300 	strex	r3, r2, [r1]
 8013b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1e6      	bne.n	8013b32 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013b64:	88fb      	ldrh	r3, [r7, #6]
 8013b66:	461a      	mov	r2, r3
 8013b68:	68b9      	ldr	r1, [r7, #8]
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f001 fb2c 	bl	80151c8 <UART_Start_Receive_DMA>
 8013b70:	4603      	mov	r3, r0
 8013b72:	e000      	b.n	8013b76 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013b74:	2302      	movs	r3, #2
  }
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3728      	adds	r7, #40	@ 0x28
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	58000c00 	.word	0x58000c00

08013b84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b0ba      	sub	sp, #232	@ 0xe8
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	69db      	ldr	r3, [r3, #28]
 8013b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	689b      	ldr	r3, [r3, #8]
 8013ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013baa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013bae:	f640 030f 	movw	r3, #2063	@ 0x80f
 8013bb2:	4013      	ands	r3, r2
 8013bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8013bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d11b      	bne.n	8013bf8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013bc4:	f003 0320 	and.w	r3, r3, #32
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d015      	beq.n	8013bf8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013bd0:	f003 0320 	and.w	r3, r3, #32
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d105      	bne.n	8013be4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d009      	beq.n	8013bf8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	f000 8393 	beq.w	8014314 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	4798      	blx	r3
      }
      return;
 8013bf6:	e38d      	b.n	8014314 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	f000 8123 	beq.w	8013e48 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013c02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013c06:	4b8d      	ldr	r3, [pc, #564]	@ (8013e3c <HAL_UART_IRQHandler+0x2b8>)
 8013c08:	4013      	ands	r3, r2
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d106      	bne.n	8013c1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013c0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013c12:	4b8b      	ldr	r3, [pc, #556]	@ (8013e40 <HAL_UART_IRQHandler+0x2bc>)
 8013c14:	4013      	ands	r3, r2
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f000 8116 	beq.w	8013e48 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c20:	f003 0301 	and.w	r3, r3, #1
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d011      	beq.n	8013c4c <HAL_UART_IRQHandler+0xc8>
 8013c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d00b      	beq.n	8013c4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	2201      	movs	r2, #1
 8013c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c42:	f043 0201 	orr.w	r2, r3, #1
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c50:	f003 0302 	and.w	r3, r3, #2
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d011      	beq.n	8013c7c <HAL_UART_IRQHandler+0xf8>
 8013c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013c5c:	f003 0301 	and.w	r3, r3, #1
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d00b      	beq.n	8013c7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2202      	movs	r2, #2
 8013c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c72:	f043 0204 	orr.w	r2, r3, #4
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013c80:	f003 0304 	and.w	r3, r3, #4
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d011      	beq.n	8013cac <HAL_UART_IRQHandler+0x128>
 8013c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013c8c:	f003 0301 	and.w	r3, r3, #1
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d00b      	beq.n	8013cac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2204      	movs	r2, #4
 8013c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ca2:	f043 0202 	orr.w	r2, r3, #2
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013cb0:	f003 0308 	and.w	r3, r3, #8
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d017      	beq.n	8013ce8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013cbc:	f003 0320 	and.w	r3, r3, #32
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d105      	bne.n	8013cd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013cc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8013e3c <HAL_UART_IRQHandler+0x2b8>)
 8013cca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d00b      	beq.n	8013ce8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2208      	movs	r2, #8
 8013cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013cde:	f043 0208 	orr.w	r2, r3, #8
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d012      	beq.n	8013d1a <HAL_UART_IRQHandler+0x196>
 8013cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013cf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d00c      	beq.n	8013d1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013d08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d10:	f043 0220 	orr.w	r2, r3, #32
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f000 82f9 	beq.w	8014318 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013d2a:	f003 0320 	and.w	r3, r3, #32
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d013      	beq.n	8013d5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013d36:	f003 0320 	and.w	r3, r3, #32
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d105      	bne.n	8013d4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d007      	beq.n	8013d5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d003      	beq.n	8013d5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013d60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	689b      	ldr	r3, [r3, #8]
 8013d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d6e:	2b40      	cmp	r3, #64	@ 0x40
 8013d70:	d005      	beq.n	8013d7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013d76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d054      	beq.n	8013e28 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f001 fb0a 	bl	8015398 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	689b      	ldr	r3, [r3, #8]
 8013d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013d8e:	2b40      	cmp	r3, #64	@ 0x40
 8013d90:	d146      	bne.n	8013e20 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	3308      	adds	r3, #8
 8013d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013da0:	e853 3f00 	ldrex	r3, [r3]
 8013da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8013da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	3308      	adds	r3, #8
 8013dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8013dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8013dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8013dce:	e841 2300 	strex	r3, r2, [r1]
 8013dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8013dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d1d9      	bne.n	8013d92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d017      	beq.n	8013e18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013dee:	4a15      	ldr	r2, [pc, #84]	@ (8013e44 <HAL_UART_IRQHandler+0x2c0>)
 8013df0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7f2 f9f3 	bl	80061e4 <HAL_DMA_Abort_IT>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d019      	beq.n	8013e38 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8013e12:	4610      	mov	r0, r2
 8013e14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e16:	e00f      	b.n	8013e38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 fa9d 	bl	8014358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e1e:	e00b      	b.n	8013e38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f000 fa99 	bl	8014358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e26:	e007      	b.n	8013e38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f000 fa95 	bl	8014358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2200      	movs	r2, #0
 8013e32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8013e36:	e26f      	b.n	8014318 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e38:	bf00      	nop
    return;
 8013e3a:	e26d      	b.n	8014318 <HAL_UART_IRQHandler+0x794>
 8013e3c:	10000001 	.word	0x10000001
 8013e40:	04000120 	.word	0x04000120
 8013e44:	0801564b 	.word	0x0801564b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e4c:	2b01      	cmp	r3, #1
 8013e4e:	f040 8203 	bne.w	8014258 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013e56:	f003 0310 	and.w	r3, r3, #16
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f000 81fc 	beq.w	8014258 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013e64:	f003 0310 	and.w	r3, r3, #16
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	f000 81f5 	beq.w	8014258 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2210      	movs	r2, #16
 8013e74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	689b      	ldr	r3, [r3, #8]
 8013e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013e80:	2b40      	cmp	r3, #64	@ 0x40
 8013e82:	f040 816d 	bne.w	8014160 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	4aa4      	ldr	r2, [pc, #656]	@ (8014120 <HAL_UART_IRQHandler+0x59c>)
 8013e90:	4293      	cmp	r3, r2
 8013e92:	d068      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	4aa1      	ldr	r2, [pc, #644]	@ (8014124 <HAL_UART_IRQHandler+0x5a0>)
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d061      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4a9f      	ldr	r2, [pc, #636]	@ (8014128 <HAL_UART_IRQHandler+0x5a4>)
 8013eac:	4293      	cmp	r3, r2
 8013eae:	d05a      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	4a9c      	ldr	r2, [pc, #624]	@ (801412c <HAL_UART_IRQHandler+0x5a8>)
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	d053      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	4a9a      	ldr	r2, [pc, #616]	@ (8014130 <HAL_UART_IRQHandler+0x5ac>)
 8013ec8:	4293      	cmp	r3, r2
 8013eca:	d04c      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	4a97      	ldr	r2, [pc, #604]	@ (8014134 <HAL_UART_IRQHandler+0x5b0>)
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	d045      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	4a95      	ldr	r2, [pc, #596]	@ (8014138 <HAL_UART_IRQHandler+0x5b4>)
 8013ee4:	4293      	cmp	r3, r2
 8013ee6:	d03e      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4a92      	ldr	r2, [pc, #584]	@ (801413c <HAL_UART_IRQHandler+0x5b8>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d037      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	4a90      	ldr	r2, [pc, #576]	@ (8014140 <HAL_UART_IRQHandler+0x5bc>)
 8013f00:	4293      	cmp	r3, r2
 8013f02:	d030      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4a8d      	ldr	r2, [pc, #564]	@ (8014144 <HAL_UART_IRQHandler+0x5c0>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d029      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	4a8b      	ldr	r2, [pc, #556]	@ (8014148 <HAL_UART_IRQHandler+0x5c4>)
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d022      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	4a88      	ldr	r2, [pc, #544]	@ (801414c <HAL_UART_IRQHandler+0x5c8>)
 8013f2a:	4293      	cmp	r3, r2
 8013f2c:	d01b      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	4a86      	ldr	r2, [pc, #536]	@ (8014150 <HAL_UART_IRQHandler+0x5cc>)
 8013f38:	4293      	cmp	r3, r2
 8013f3a:	d014      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	4a83      	ldr	r2, [pc, #524]	@ (8014154 <HAL_UART_IRQHandler+0x5d0>)
 8013f46:	4293      	cmp	r3, r2
 8013f48:	d00d      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	4a81      	ldr	r2, [pc, #516]	@ (8014158 <HAL_UART_IRQHandler+0x5d4>)
 8013f54:	4293      	cmp	r3, r2
 8013f56:	d006      	beq.n	8013f66 <HAL_UART_IRQHandler+0x3e2>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	4a7e      	ldr	r2, [pc, #504]	@ (801415c <HAL_UART_IRQHandler+0x5d8>)
 8013f62:	4293      	cmp	r3, r2
 8013f64:	d106      	bne.n	8013f74 <HAL_UART_IRQHandler+0x3f0>
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	e005      	b.n	8013f80 <HAL_UART_IRQHandler+0x3fc>
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013f84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	f000 80ad 	beq.w	80140e8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013f94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	f080 80a5 	bcs.w	80140e8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013fae:	69db      	ldr	r3, [r3, #28]
 8013fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013fb4:	f000 8087 	beq.w	80140c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013fc4:	e853 3f00 	ldrex	r3, [r3]
 8013fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8013fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	461a      	mov	r2, r3
 8013fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013fe2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013fe6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013ff2:	e841 2300 	strex	r3, r2, [r1]
 8013ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8013ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d1da      	bne.n	8013fb8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	3308      	adds	r3, #8
 8014008:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801400a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801400c:	e853 3f00 	ldrex	r3, [r3]
 8014010:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8014012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014014:	f023 0301 	bic.w	r3, r3, #1
 8014018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	3308      	adds	r3, #8
 8014022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014026:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801402a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801402c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801402e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014032:	e841 2300 	strex	r3, r2, [r1]
 8014036:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801403a:	2b00      	cmp	r3, #0
 801403c:	d1e1      	bne.n	8014002 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	3308      	adds	r3, #8
 8014044:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014046:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014048:	e853 3f00 	ldrex	r3, [r3]
 801404c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801404e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	3308      	adds	r3, #8
 801405e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8014062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014064:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014066:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801406a:	e841 2300 	strex	r3, r2, [r1]
 801406e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8014070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014072:	2b00      	cmp	r3, #0
 8014074:	d1e3      	bne.n	801403e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2220      	movs	r2, #32
 801407a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2200      	movs	r2, #0
 8014082:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801408a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801408c:	e853 3f00 	ldrex	r3, [r3]
 8014090:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014094:	f023 0310 	bic.w	r3, r3, #16
 8014098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	461a      	mov	r2, r3
 80140a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80140a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80140a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80140ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80140ae:	e841 2300 	strex	r3, r2, [r1]
 80140b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80140b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d1e4      	bne.n	8014084 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7f1 fd71 	bl	8005ba8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2202      	movs	r2, #2
 80140ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80140d8:	b29b      	uxth	r3, r3
 80140da:	1ad3      	subs	r3, r2, r3
 80140dc:	b29b      	uxth	r3, r3
 80140de:	4619      	mov	r1, r3
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 f943 	bl	801436c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80140e6:	e119      	b.n	801431c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80140ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80140f2:	429a      	cmp	r2, r3
 80140f4:	f040 8112 	bne.w	801431c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80140fe:	69db      	ldr	r3, [r3, #28]
 8014100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014104:	f040 810a 	bne.w	801431c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2202      	movs	r2, #2
 801410c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014114:	4619      	mov	r1, r3
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f000 f928 	bl	801436c <HAL_UARTEx_RxEventCallback>
      return;
 801411c:	e0fe      	b.n	801431c <HAL_UART_IRQHandler+0x798>
 801411e:	bf00      	nop
 8014120:	40020010 	.word	0x40020010
 8014124:	40020028 	.word	0x40020028
 8014128:	40020040 	.word	0x40020040
 801412c:	40020058 	.word	0x40020058
 8014130:	40020070 	.word	0x40020070
 8014134:	40020088 	.word	0x40020088
 8014138:	400200a0 	.word	0x400200a0
 801413c:	400200b8 	.word	0x400200b8
 8014140:	40020410 	.word	0x40020410
 8014144:	40020428 	.word	0x40020428
 8014148:	40020440 	.word	0x40020440
 801414c:	40020458 	.word	0x40020458
 8014150:	40020470 	.word	0x40020470
 8014154:	40020488 	.word	0x40020488
 8014158:	400204a0 	.word	0x400204a0
 801415c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801416c:	b29b      	uxth	r3, r3
 801416e:	1ad3      	subs	r3, r2, r3
 8014170:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801417a:	b29b      	uxth	r3, r3
 801417c:	2b00      	cmp	r3, #0
 801417e:	f000 80cf 	beq.w	8014320 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8014182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8014186:	2b00      	cmp	r3, #0
 8014188:	f000 80ca 	beq.w	8014320 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014194:	e853 3f00 	ldrex	r3, [r3]
 8014198:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801419a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801419c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80141a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	461a      	mov	r2, r3
 80141aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80141ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80141b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80141b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80141b6:	e841 2300 	strex	r3, r2, [r1]
 80141ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80141bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d1e4      	bne.n	801418c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	3308      	adds	r3, #8
 80141c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141cc:	e853 3f00 	ldrex	r3, [r3]
 80141d0:	623b      	str	r3, [r7, #32]
   return(result);
 80141d2:	6a3a      	ldr	r2, [r7, #32]
 80141d4:	4b55      	ldr	r3, [pc, #340]	@ (801432c <HAL_UART_IRQHandler+0x7a8>)
 80141d6:	4013      	ands	r3, r2
 80141d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	3308      	adds	r3, #8
 80141e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80141e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80141e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80141ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141ee:	e841 2300 	strex	r3, r2, [r1]
 80141f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80141f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d1e3      	bne.n	80141c2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	2220      	movs	r2, #32
 80141fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2200      	movs	r2, #0
 8014206:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2200      	movs	r2, #0
 801420c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	e853 3f00 	ldrex	r3, [r3]
 801421a:	60fb      	str	r3, [r7, #12]
   return(result);
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f023 0310 	bic.w	r3, r3, #16
 8014222:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	461a      	mov	r2, r3
 801422c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014230:	61fb      	str	r3, [r7, #28]
 8014232:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014234:	69b9      	ldr	r1, [r7, #24]
 8014236:	69fa      	ldr	r2, [r7, #28]
 8014238:	e841 2300 	strex	r3, r2, [r1]
 801423c:	617b      	str	r3, [r7, #20]
   return(result);
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d1e4      	bne.n	801420e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2202      	movs	r2, #2
 8014248:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801424a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801424e:	4619      	mov	r1, r3
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 f88b 	bl	801436c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014256:	e063      	b.n	8014320 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801425c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8014260:	2b00      	cmp	r3, #0
 8014262:	d00e      	beq.n	8014282 <HAL_UART_IRQHandler+0x6fe>
 8014264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801426c:	2b00      	cmp	r3, #0
 801426e:	d008      	beq.n	8014282 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8014278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f001 fa22 	bl	80156c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014280:	e051      	b.n	8014326 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801428a:	2b00      	cmp	r3, #0
 801428c:	d014      	beq.n	80142b8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014296:	2b00      	cmp	r3, #0
 8014298:	d105      	bne.n	80142a6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801429a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801429e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d008      	beq.n	80142b8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d03a      	beq.n	8014324 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	4798      	blx	r3
    }
    return;
 80142b6:	e035      	b.n	8014324 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80142b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80142bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d009      	beq.n	80142d8 <HAL_UART_IRQHandler+0x754>
 80142c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80142c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d003      	beq.n	80142d8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f001 f9cc 	bl	801566e <UART_EndTransmit_IT>
    return;
 80142d6:	e026      	b.n	8014326 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80142d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80142dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d009      	beq.n	80142f8 <HAL_UART_IRQHandler+0x774>
 80142e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80142e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d003      	beq.n	80142f8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f001 f9fb 	bl	80156ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80142f6:	e016      	b.n	8014326 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80142f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80142fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014300:	2b00      	cmp	r3, #0
 8014302:	d010      	beq.n	8014326 <HAL_UART_IRQHandler+0x7a2>
 8014304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014308:	2b00      	cmp	r3, #0
 801430a:	da0c      	bge.n	8014326 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f001 f9e3 	bl	80156d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014312:	e008      	b.n	8014326 <HAL_UART_IRQHandler+0x7a2>
      return;
 8014314:	bf00      	nop
 8014316:	e006      	b.n	8014326 <HAL_UART_IRQHandler+0x7a2>
    return;
 8014318:	bf00      	nop
 801431a:	e004      	b.n	8014326 <HAL_UART_IRQHandler+0x7a2>
      return;
 801431c:	bf00      	nop
 801431e:	e002      	b.n	8014326 <HAL_UART_IRQHandler+0x7a2>
      return;
 8014320:	bf00      	nop
 8014322:	e000      	b.n	8014326 <HAL_UART_IRQHandler+0x7a2>
    return;
 8014324:	bf00      	nop
  }
}
 8014326:	37e8      	adds	r7, #232	@ 0xe8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}
 801432c:	effffffe 	.word	0xeffffffe

08014330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014330:	b480      	push	{r7}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014338:	bf00      	nop
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014360:	bf00      	nop
 8014362:	370c      	adds	r7, #12
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr

0801436c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	460b      	mov	r3, r1
 8014376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014378:	bf00      	nop
 801437a:	370c      	adds	r7, #12
 801437c:	46bd      	mov	sp, r7
 801437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014382:	4770      	bx	lr

08014384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014388:	b092      	sub	sp, #72	@ 0x48
 801438a:	af00      	add	r7, sp, #0
 801438c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801438e:	2300      	movs	r3, #0
 8014390:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	689a      	ldr	r2, [r3, #8]
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	691b      	ldr	r3, [r3, #16]
 801439c:	431a      	orrs	r2, r3
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	695b      	ldr	r3, [r3, #20]
 80143a2:	431a      	orrs	r2, r3
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	69db      	ldr	r3, [r3, #28]
 80143a8:	4313      	orrs	r3, r2
 80143aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80143ac:	697b      	ldr	r3, [r7, #20]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	4bbe      	ldr	r3, [pc, #760]	@ (80146ac <UART_SetConfig+0x328>)
 80143b4:	4013      	ands	r3, r2
 80143b6:	697a      	ldr	r2, [r7, #20]
 80143b8:	6812      	ldr	r2, [r2, #0]
 80143ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80143bc:	430b      	orrs	r3, r1
 80143be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	68da      	ldr	r2, [r3, #12]
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	430a      	orrs	r2, r1
 80143d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	699b      	ldr	r3, [r3, #24]
 80143da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	4ab3      	ldr	r2, [pc, #716]	@ (80146b0 <UART_SetConfig+0x32c>)
 80143e2:	4293      	cmp	r3, r2
 80143e4:	d004      	beq.n	80143f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80143e6:	697b      	ldr	r3, [r7, #20]
 80143e8:	6a1b      	ldr	r3, [r3, #32]
 80143ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80143ec:	4313      	orrs	r3, r2
 80143ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	689a      	ldr	r2, [r3, #8]
 80143f6:	4baf      	ldr	r3, [pc, #700]	@ (80146b4 <UART_SetConfig+0x330>)
 80143f8:	4013      	ands	r3, r2
 80143fa:	697a      	ldr	r2, [r7, #20]
 80143fc:	6812      	ldr	r2, [r2, #0]
 80143fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014400:	430b      	orrs	r3, r1
 8014402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801440a:	f023 010f 	bic.w	r1, r3, #15
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	430a      	orrs	r2, r1
 8014418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	4aa6      	ldr	r2, [pc, #664]	@ (80146b8 <UART_SetConfig+0x334>)
 8014420:	4293      	cmp	r3, r2
 8014422:	d177      	bne.n	8014514 <UART_SetConfig+0x190>
 8014424:	4ba5      	ldr	r3, [pc, #660]	@ (80146bc <UART_SetConfig+0x338>)
 8014426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801442c:	2b28      	cmp	r3, #40	@ 0x28
 801442e:	d86d      	bhi.n	801450c <UART_SetConfig+0x188>
 8014430:	a201      	add	r2, pc, #4	@ (adr r2, 8014438 <UART_SetConfig+0xb4>)
 8014432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014436:	bf00      	nop
 8014438:	080144dd 	.word	0x080144dd
 801443c:	0801450d 	.word	0x0801450d
 8014440:	0801450d 	.word	0x0801450d
 8014444:	0801450d 	.word	0x0801450d
 8014448:	0801450d 	.word	0x0801450d
 801444c:	0801450d 	.word	0x0801450d
 8014450:	0801450d 	.word	0x0801450d
 8014454:	0801450d 	.word	0x0801450d
 8014458:	080144e5 	.word	0x080144e5
 801445c:	0801450d 	.word	0x0801450d
 8014460:	0801450d 	.word	0x0801450d
 8014464:	0801450d 	.word	0x0801450d
 8014468:	0801450d 	.word	0x0801450d
 801446c:	0801450d 	.word	0x0801450d
 8014470:	0801450d 	.word	0x0801450d
 8014474:	0801450d 	.word	0x0801450d
 8014478:	080144ed 	.word	0x080144ed
 801447c:	0801450d 	.word	0x0801450d
 8014480:	0801450d 	.word	0x0801450d
 8014484:	0801450d 	.word	0x0801450d
 8014488:	0801450d 	.word	0x0801450d
 801448c:	0801450d 	.word	0x0801450d
 8014490:	0801450d 	.word	0x0801450d
 8014494:	0801450d 	.word	0x0801450d
 8014498:	080144f5 	.word	0x080144f5
 801449c:	0801450d 	.word	0x0801450d
 80144a0:	0801450d 	.word	0x0801450d
 80144a4:	0801450d 	.word	0x0801450d
 80144a8:	0801450d 	.word	0x0801450d
 80144ac:	0801450d 	.word	0x0801450d
 80144b0:	0801450d 	.word	0x0801450d
 80144b4:	0801450d 	.word	0x0801450d
 80144b8:	080144fd 	.word	0x080144fd
 80144bc:	0801450d 	.word	0x0801450d
 80144c0:	0801450d 	.word	0x0801450d
 80144c4:	0801450d 	.word	0x0801450d
 80144c8:	0801450d 	.word	0x0801450d
 80144cc:	0801450d 	.word	0x0801450d
 80144d0:	0801450d 	.word	0x0801450d
 80144d4:	0801450d 	.word	0x0801450d
 80144d8:	08014505 	.word	0x08014505
 80144dc:	2301      	movs	r3, #1
 80144de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144e2:	e222      	b.n	801492a <UART_SetConfig+0x5a6>
 80144e4:	2304      	movs	r3, #4
 80144e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144ea:	e21e      	b.n	801492a <UART_SetConfig+0x5a6>
 80144ec:	2308      	movs	r3, #8
 80144ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144f2:	e21a      	b.n	801492a <UART_SetConfig+0x5a6>
 80144f4:	2310      	movs	r3, #16
 80144f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80144fa:	e216      	b.n	801492a <UART_SetConfig+0x5a6>
 80144fc:	2320      	movs	r3, #32
 80144fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014502:	e212      	b.n	801492a <UART_SetConfig+0x5a6>
 8014504:	2340      	movs	r3, #64	@ 0x40
 8014506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801450a:	e20e      	b.n	801492a <UART_SetConfig+0x5a6>
 801450c:	2380      	movs	r3, #128	@ 0x80
 801450e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014512:	e20a      	b.n	801492a <UART_SetConfig+0x5a6>
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	4a69      	ldr	r2, [pc, #420]	@ (80146c0 <UART_SetConfig+0x33c>)
 801451a:	4293      	cmp	r3, r2
 801451c:	d130      	bne.n	8014580 <UART_SetConfig+0x1fc>
 801451e:	4b67      	ldr	r3, [pc, #412]	@ (80146bc <UART_SetConfig+0x338>)
 8014520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014522:	f003 0307 	and.w	r3, r3, #7
 8014526:	2b05      	cmp	r3, #5
 8014528:	d826      	bhi.n	8014578 <UART_SetConfig+0x1f4>
 801452a:	a201      	add	r2, pc, #4	@ (adr r2, 8014530 <UART_SetConfig+0x1ac>)
 801452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014530:	08014549 	.word	0x08014549
 8014534:	08014551 	.word	0x08014551
 8014538:	08014559 	.word	0x08014559
 801453c:	08014561 	.word	0x08014561
 8014540:	08014569 	.word	0x08014569
 8014544:	08014571 	.word	0x08014571
 8014548:	2300      	movs	r3, #0
 801454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801454e:	e1ec      	b.n	801492a <UART_SetConfig+0x5a6>
 8014550:	2304      	movs	r3, #4
 8014552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014556:	e1e8      	b.n	801492a <UART_SetConfig+0x5a6>
 8014558:	2308      	movs	r3, #8
 801455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801455e:	e1e4      	b.n	801492a <UART_SetConfig+0x5a6>
 8014560:	2310      	movs	r3, #16
 8014562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014566:	e1e0      	b.n	801492a <UART_SetConfig+0x5a6>
 8014568:	2320      	movs	r3, #32
 801456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801456e:	e1dc      	b.n	801492a <UART_SetConfig+0x5a6>
 8014570:	2340      	movs	r3, #64	@ 0x40
 8014572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014576:	e1d8      	b.n	801492a <UART_SetConfig+0x5a6>
 8014578:	2380      	movs	r3, #128	@ 0x80
 801457a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801457e:	e1d4      	b.n	801492a <UART_SetConfig+0x5a6>
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4a4f      	ldr	r2, [pc, #316]	@ (80146c4 <UART_SetConfig+0x340>)
 8014586:	4293      	cmp	r3, r2
 8014588:	d130      	bne.n	80145ec <UART_SetConfig+0x268>
 801458a:	4b4c      	ldr	r3, [pc, #304]	@ (80146bc <UART_SetConfig+0x338>)
 801458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801458e:	f003 0307 	and.w	r3, r3, #7
 8014592:	2b05      	cmp	r3, #5
 8014594:	d826      	bhi.n	80145e4 <UART_SetConfig+0x260>
 8014596:	a201      	add	r2, pc, #4	@ (adr r2, 801459c <UART_SetConfig+0x218>)
 8014598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801459c:	080145b5 	.word	0x080145b5
 80145a0:	080145bd 	.word	0x080145bd
 80145a4:	080145c5 	.word	0x080145c5
 80145a8:	080145cd 	.word	0x080145cd
 80145ac:	080145d5 	.word	0x080145d5
 80145b0:	080145dd 	.word	0x080145dd
 80145b4:	2300      	movs	r3, #0
 80145b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ba:	e1b6      	b.n	801492a <UART_SetConfig+0x5a6>
 80145bc:	2304      	movs	r3, #4
 80145be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145c2:	e1b2      	b.n	801492a <UART_SetConfig+0x5a6>
 80145c4:	2308      	movs	r3, #8
 80145c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ca:	e1ae      	b.n	801492a <UART_SetConfig+0x5a6>
 80145cc:	2310      	movs	r3, #16
 80145ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145d2:	e1aa      	b.n	801492a <UART_SetConfig+0x5a6>
 80145d4:	2320      	movs	r3, #32
 80145d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145da:	e1a6      	b.n	801492a <UART_SetConfig+0x5a6>
 80145dc:	2340      	movs	r3, #64	@ 0x40
 80145de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145e2:	e1a2      	b.n	801492a <UART_SetConfig+0x5a6>
 80145e4:	2380      	movs	r3, #128	@ 0x80
 80145e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ea:	e19e      	b.n	801492a <UART_SetConfig+0x5a6>
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	4a35      	ldr	r2, [pc, #212]	@ (80146c8 <UART_SetConfig+0x344>)
 80145f2:	4293      	cmp	r3, r2
 80145f4:	d130      	bne.n	8014658 <UART_SetConfig+0x2d4>
 80145f6:	4b31      	ldr	r3, [pc, #196]	@ (80146bc <UART_SetConfig+0x338>)
 80145f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145fa:	f003 0307 	and.w	r3, r3, #7
 80145fe:	2b05      	cmp	r3, #5
 8014600:	d826      	bhi.n	8014650 <UART_SetConfig+0x2cc>
 8014602:	a201      	add	r2, pc, #4	@ (adr r2, 8014608 <UART_SetConfig+0x284>)
 8014604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014608:	08014621 	.word	0x08014621
 801460c:	08014629 	.word	0x08014629
 8014610:	08014631 	.word	0x08014631
 8014614:	08014639 	.word	0x08014639
 8014618:	08014641 	.word	0x08014641
 801461c:	08014649 	.word	0x08014649
 8014620:	2300      	movs	r3, #0
 8014622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014626:	e180      	b.n	801492a <UART_SetConfig+0x5a6>
 8014628:	2304      	movs	r3, #4
 801462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801462e:	e17c      	b.n	801492a <UART_SetConfig+0x5a6>
 8014630:	2308      	movs	r3, #8
 8014632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014636:	e178      	b.n	801492a <UART_SetConfig+0x5a6>
 8014638:	2310      	movs	r3, #16
 801463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801463e:	e174      	b.n	801492a <UART_SetConfig+0x5a6>
 8014640:	2320      	movs	r3, #32
 8014642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014646:	e170      	b.n	801492a <UART_SetConfig+0x5a6>
 8014648:	2340      	movs	r3, #64	@ 0x40
 801464a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801464e:	e16c      	b.n	801492a <UART_SetConfig+0x5a6>
 8014650:	2380      	movs	r3, #128	@ 0x80
 8014652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014656:	e168      	b.n	801492a <UART_SetConfig+0x5a6>
 8014658:	697b      	ldr	r3, [r7, #20]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	4a1b      	ldr	r2, [pc, #108]	@ (80146cc <UART_SetConfig+0x348>)
 801465e:	4293      	cmp	r3, r2
 8014660:	d142      	bne.n	80146e8 <UART_SetConfig+0x364>
 8014662:	4b16      	ldr	r3, [pc, #88]	@ (80146bc <UART_SetConfig+0x338>)
 8014664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014666:	f003 0307 	and.w	r3, r3, #7
 801466a:	2b05      	cmp	r3, #5
 801466c:	d838      	bhi.n	80146e0 <UART_SetConfig+0x35c>
 801466e:	a201      	add	r2, pc, #4	@ (adr r2, 8014674 <UART_SetConfig+0x2f0>)
 8014670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014674:	0801468d 	.word	0x0801468d
 8014678:	08014695 	.word	0x08014695
 801467c:	0801469d 	.word	0x0801469d
 8014680:	080146a5 	.word	0x080146a5
 8014684:	080146d1 	.word	0x080146d1
 8014688:	080146d9 	.word	0x080146d9
 801468c:	2300      	movs	r3, #0
 801468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014692:	e14a      	b.n	801492a <UART_SetConfig+0x5a6>
 8014694:	2304      	movs	r3, #4
 8014696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801469a:	e146      	b.n	801492a <UART_SetConfig+0x5a6>
 801469c:	2308      	movs	r3, #8
 801469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146a2:	e142      	b.n	801492a <UART_SetConfig+0x5a6>
 80146a4:	2310      	movs	r3, #16
 80146a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146aa:	e13e      	b.n	801492a <UART_SetConfig+0x5a6>
 80146ac:	cfff69f3 	.word	0xcfff69f3
 80146b0:	58000c00 	.word	0x58000c00
 80146b4:	11fff4ff 	.word	0x11fff4ff
 80146b8:	40011000 	.word	0x40011000
 80146bc:	58024400 	.word	0x58024400
 80146c0:	40004400 	.word	0x40004400
 80146c4:	40004800 	.word	0x40004800
 80146c8:	40004c00 	.word	0x40004c00
 80146cc:	40005000 	.word	0x40005000
 80146d0:	2320      	movs	r3, #32
 80146d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146d6:	e128      	b.n	801492a <UART_SetConfig+0x5a6>
 80146d8:	2340      	movs	r3, #64	@ 0x40
 80146da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146de:	e124      	b.n	801492a <UART_SetConfig+0x5a6>
 80146e0:	2380      	movs	r3, #128	@ 0x80
 80146e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80146e6:	e120      	b.n	801492a <UART_SetConfig+0x5a6>
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4acb      	ldr	r2, [pc, #812]	@ (8014a1c <UART_SetConfig+0x698>)
 80146ee:	4293      	cmp	r3, r2
 80146f0:	d176      	bne.n	80147e0 <UART_SetConfig+0x45c>
 80146f2:	4bcb      	ldr	r3, [pc, #812]	@ (8014a20 <UART_SetConfig+0x69c>)
 80146f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80146f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80146fa:	2b28      	cmp	r3, #40	@ 0x28
 80146fc:	d86c      	bhi.n	80147d8 <UART_SetConfig+0x454>
 80146fe:	a201      	add	r2, pc, #4	@ (adr r2, 8014704 <UART_SetConfig+0x380>)
 8014700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014704:	080147a9 	.word	0x080147a9
 8014708:	080147d9 	.word	0x080147d9
 801470c:	080147d9 	.word	0x080147d9
 8014710:	080147d9 	.word	0x080147d9
 8014714:	080147d9 	.word	0x080147d9
 8014718:	080147d9 	.word	0x080147d9
 801471c:	080147d9 	.word	0x080147d9
 8014720:	080147d9 	.word	0x080147d9
 8014724:	080147b1 	.word	0x080147b1
 8014728:	080147d9 	.word	0x080147d9
 801472c:	080147d9 	.word	0x080147d9
 8014730:	080147d9 	.word	0x080147d9
 8014734:	080147d9 	.word	0x080147d9
 8014738:	080147d9 	.word	0x080147d9
 801473c:	080147d9 	.word	0x080147d9
 8014740:	080147d9 	.word	0x080147d9
 8014744:	080147b9 	.word	0x080147b9
 8014748:	080147d9 	.word	0x080147d9
 801474c:	080147d9 	.word	0x080147d9
 8014750:	080147d9 	.word	0x080147d9
 8014754:	080147d9 	.word	0x080147d9
 8014758:	080147d9 	.word	0x080147d9
 801475c:	080147d9 	.word	0x080147d9
 8014760:	080147d9 	.word	0x080147d9
 8014764:	080147c1 	.word	0x080147c1
 8014768:	080147d9 	.word	0x080147d9
 801476c:	080147d9 	.word	0x080147d9
 8014770:	080147d9 	.word	0x080147d9
 8014774:	080147d9 	.word	0x080147d9
 8014778:	080147d9 	.word	0x080147d9
 801477c:	080147d9 	.word	0x080147d9
 8014780:	080147d9 	.word	0x080147d9
 8014784:	080147c9 	.word	0x080147c9
 8014788:	080147d9 	.word	0x080147d9
 801478c:	080147d9 	.word	0x080147d9
 8014790:	080147d9 	.word	0x080147d9
 8014794:	080147d9 	.word	0x080147d9
 8014798:	080147d9 	.word	0x080147d9
 801479c:	080147d9 	.word	0x080147d9
 80147a0:	080147d9 	.word	0x080147d9
 80147a4:	080147d1 	.word	0x080147d1
 80147a8:	2301      	movs	r3, #1
 80147aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147ae:	e0bc      	b.n	801492a <UART_SetConfig+0x5a6>
 80147b0:	2304      	movs	r3, #4
 80147b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147b6:	e0b8      	b.n	801492a <UART_SetConfig+0x5a6>
 80147b8:	2308      	movs	r3, #8
 80147ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147be:	e0b4      	b.n	801492a <UART_SetConfig+0x5a6>
 80147c0:	2310      	movs	r3, #16
 80147c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147c6:	e0b0      	b.n	801492a <UART_SetConfig+0x5a6>
 80147c8:	2320      	movs	r3, #32
 80147ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147ce:	e0ac      	b.n	801492a <UART_SetConfig+0x5a6>
 80147d0:	2340      	movs	r3, #64	@ 0x40
 80147d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147d6:	e0a8      	b.n	801492a <UART_SetConfig+0x5a6>
 80147d8:	2380      	movs	r3, #128	@ 0x80
 80147da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80147de:	e0a4      	b.n	801492a <UART_SetConfig+0x5a6>
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	4a8f      	ldr	r2, [pc, #572]	@ (8014a24 <UART_SetConfig+0x6a0>)
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d130      	bne.n	801484c <UART_SetConfig+0x4c8>
 80147ea:	4b8d      	ldr	r3, [pc, #564]	@ (8014a20 <UART_SetConfig+0x69c>)
 80147ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80147ee:	f003 0307 	and.w	r3, r3, #7
 80147f2:	2b05      	cmp	r3, #5
 80147f4:	d826      	bhi.n	8014844 <UART_SetConfig+0x4c0>
 80147f6:	a201      	add	r2, pc, #4	@ (adr r2, 80147fc <UART_SetConfig+0x478>)
 80147f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147fc:	08014815 	.word	0x08014815
 8014800:	0801481d 	.word	0x0801481d
 8014804:	08014825 	.word	0x08014825
 8014808:	0801482d 	.word	0x0801482d
 801480c:	08014835 	.word	0x08014835
 8014810:	0801483d 	.word	0x0801483d
 8014814:	2300      	movs	r3, #0
 8014816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801481a:	e086      	b.n	801492a <UART_SetConfig+0x5a6>
 801481c:	2304      	movs	r3, #4
 801481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014822:	e082      	b.n	801492a <UART_SetConfig+0x5a6>
 8014824:	2308      	movs	r3, #8
 8014826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801482a:	e07e      	b.n	801492a <UART_SetConfig+0x5a6>
 801482c:	2310      	movs	r3, #16
 801482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014832:	e07a      	b.n	801492a <UART_SetConfig+0x5a6>
 8014834:	2320      	movs	r3, #32
 8014836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801483a:	e076      	b.n	801492a <UART_SetConfig+0x5a6>
 801483c:	2340      	movs	r3, #64	@ 0x40
 801483e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014842:	e072      	b.n	801492a <UART_SetConfig+0x5a6>
 8014844:	2380      	movs	r3, #128	@ 0x80
 8014846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801484a:	e06e      	b.n	801492a <UART_SetConfig+0x5a6>
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	4a75      	ldr	r2, [pc, #468]	@ (8014a28 <UART_SetConfig+0x6a4>)
 8014852:	4293      	cmp	r3, r2
 8014854:	d130      	bne.n	80148b8 <UART_SetConfig+0x534>
 8014856:	4b72      	ldr	r3, [pc, #456]	@ (8014a20 <UART_SetConfig+0x69c>)
 8014858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801485a:	f003 0307 	and.w	r3, r3, #7
 801485e:	2b05      	cmp	r3, #5
 8014860:	d826      	bhi.n	80148b0 <UART_SetConfig+0x52c>
 8014862:	a201      	add	r2, pc, #4	@ (adr r2, 8014868 <UART_SetConfig+0x4e4>)
 8014864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014868:	08014881 	.word	0x08014881
 801486c:	08014889 	.word	0x08014889
 8014870:	08014891 	.word	0x08014891
 8014874:	08014899 	.word	0x08014899
 8014878:	080148a1 	.word	0x080148a1
 801487c:	080148a9 	.word	0x080148a9
 8014880:	2300      	movs	r3, #0
 8014882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014886:	e050      	b.n	801492a <UART_SetConfig+0x5a6>
 8014888:	2304      	movs	r3, #4
 801488a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801488e:	e04c      	b.n	801492a <UART_SetConfig+0x5a6>
 8014890:	2308      	movs	r3, #8
 8014892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014896:	e048      	b.n	801492a <UART_SetConfig+0x5a6>
 8014898:	2310      	movs	r3, #16
 801489a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801489e:	e044      	b.n	801492a <UART_SetConfig+0x5a6>
 80148a0:	2320      	movs	r3, #32
 80148a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148a6:	e040      	b.n	801492a <UART_SetConfig+0x5a6>
 80148a8:	2340      	movs	r3, #64	@ 0x40
 80148aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148ae:	e03c      	b.n	801492a <UART_SetConfig+0x5a6>
 80148b0:	2380      	movs	r3, #128	@ 0x80
 80148b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148b6:	e038      	b.n	801492a <UART_SetConfig+0x5a6>
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	4a5b      	ldr	r2, [pc, #364]	@ (8014a2c <UART_SetConfig+0x6a8>)
 80148be:	4293      	cmp	r3, r2
 80148c0:	d130      	bne.n	8014924 <UART_SetConfig+0x5a0>
 80148c2:	4b57      	ldr	r3, [pc, #348]	@ (8014a20 <UART_SetConfig+0x69c>)
 80148c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148c6:	f003 0307 	and.w	r3, r3, #7
 80148ca:	2b05      	cmp	r3, #5
 80148cc:	d826      	bhi.n	801491c <UART_SetConfig+0x598>
 80148ce:	a201      	add	r2, pc, #4	@ (adr r2, 80148d4 <UART_SetConfig+0x550>)
 80148d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148d4:	080148ed 	.word	0x080148ed
 80148d8:	080148f5 	.word	0x080148f5
 80148dc:	080148fd 	.word	0x080148fd
 80148e0:	08014905 	.word	0x08014905
 80148e4:	0801490d 	.word	0x0801490d
 80148e8:	08014915 	.word	0x08014915
 80148ec:	2302      	movs	r3, #2
 80148ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148f2:	e01a      	b.n	801492a <UART_SetConfig+0x5a6>
 80148f4:	2304      	movs	r3, #4
 80148f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148fa:	e016      	b.n	801492a <UART_SetConfig+0x5a6>
 80148fc:	2308      	movs	r3, #8
 80148fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014902:	e012      	b.n	801492a <UART_SetConfig+0x5a6>
 8014904:	2310      	movs	r3, #16
 8014906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801490a:	e00e      	b.n	801492a <UART_SetConfig+0x5a6>
 801490c:	2320      	movs	r3, #32
 801490e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014912:	e00a      	b.n	801492a <UART_SetConfig+0x5a6>
 8014914:	2340      	movs	r3, #64	@ 0x40
 8014916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801491a:	e006      	b.n	801492a <UART_SetConfig+0x5a6>
 801491c:	2380      	movs	r3, #128	@ 0x80
 801491e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014922:	e002      	b.n	801492a <UART_SetConfig+0x5a6>
 8014924:	2380      	movs	r3, #128	@ 0x80
 8014926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801492a:	697b      	ldr	r3, [r7, #20]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	4a3f      	ldr	r2, [pc, #252]	@ (8014a2c <UART_SetConfig+0x6a8>)
 8014930:	4293      	cmp	r3, r2
 8014932:	f040 80f8 	bne.w	8014b26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014936:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801493a:	2b20      	cmp	r3, #32
 801493c:	dc46      	bgt.n	80149cc <UART_SetConfig+0x648>
 801493e:	2b02      	cmp	r3, #2
 8014940:	f2c0 8082 	blt.w	8014a48 <UART_SetConfig+0x6c4>
 8014944:	3b02      	subs	r3, #2
 8014946:	2b1e      	cmp	r3, #30
 8014948:	d87e      	bhi.n	8014a48 <UART_SetConfig+0x6c4>
 801494a:	a201      	add	r2, pc, #4	@ (adr r2, 8014950 <UART_SetConfig+0x5cc>)
 801494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014950:	080149d3 	.word	0x080149d3
 8014954:	08014a49 	.word	0x08014a49
 8014958:	080149db 	.word	0x080149db
 801495c:	08014a49 	.word	0x08014a49
 8014960:	08014a49 	.word	0x08014a49
 8014964:	08014a49 	.word	0x08014a49
 8014968:	080149eb 	.word	0x080149eb
 801496c:	08014a49 	.word	0x08014a49
 8014970:	08014a49 	.word	0x08014a49
 8014974:	08014a49 	.word	0x08014a49
 8014978:	08014a49 	.word	0x08014a49
 801497c:	08014a49 	.word	0x08014a49
 8014980:	08014a49 	.word	0x08014a49
 8014984:	08014a49 	.word	0x08014a49
 8014988:	080149fb 	.word	0x080149fb
 801498c:	08014a49 	.word	0x08014a49
 8014990:	08014a49 	.word	0x08014a49
 8014994:	08014a49 	.word	0x08014a49
 8014998:	08014a49 	.word	0x08014a49
 801499c:	08014a49 	.word	0x08014a49
 80149a0:	08014a49 	.word	0x08014a49
 80149a4:	08014a49 	.word	0x08014a49
 80149a8:	08014a49 	.word	0x08014a49
 80149ac:	08014a49 	.word	0x08014a49
 80149b0:	08014a49 	.word	0x08014a49
 80149b4:	08014a49 	.word	0x08014a49
 80149b8:	08014a49 	.word	0x08014a49
 80149bc:	08014a49 	.word	0x08014a49
 80149c0:	08014a49 	.word	0x08014a49
 80149c4:	08014a49 	.word	0x08014a49
 80149c8:	08014a3b 	.word	0x08014a3b
 80149cc:	2b40      	cmp	r3, #64	@ 0x40
 80149ce:	d037      	beq.n	8014a40 <UART_SetConfig+0x6bc>
 80149d0:	e03a      	b.n	8014a48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80149d2:	f7fc fda3 	bl	801151c <HAL_RCCEx_GetD3PCLK1Freq>
 80149d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80149d8:	e03c      	b.n	8014a54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80149da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fc fdb2 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80149e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149e8:	e034      	b.n	8014a54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80149ea:	f107 0318 	add.w	r3, r7, #24
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7fc fefe 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80149f8:	e02c      	b.n	8014a54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80149fa:	4b09      	ldr	r3, [pc, #36]	@ (8014a20 <UART_SetConfig+0x69c>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	f003 0320 	and.w	r3, r3, #32
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d016      	beq.n	8014a34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014a06:	4b06      	ldr	r3, [pc, #24]	@ (8014a20 <UART_SetConfig+0x69c>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	08db      	lsrs	r3, r3, #3
 8014a0c:	f003 0303 	and.w	r3, r3, #3
 8014a10:	4a07      	ldr	r2, [pc, #28]	@ (8014a30 <UART_SetConfig+0x6ac>)
 8014a12:	fa22 f303 	lsr.w	r3, r2, r3
 8014a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014a18:	e01c      	b.n	8014a54 <UART_SetConfig+0x6d0>
 8014a1a:	bf00      	nop
 8014a1c:	40011400 	.word	0x40011400
 8014a20:	58024400 	.word	0x58024400
 8014a24:	40007800 	.word	0x40007800
 8014a28:	40007c00 	.word	0x40007c00
 8014a2c:	58000c00 	.word	0x58000c00
 8014a30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014a34:	4b9d      	ldr	r3, [pc, #628]	@ (8014cac <UART_SetConfig+0x928>)
 8014a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a38:	e00c      	b.n	8014a54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014a3a:	4b9d      	ldr	r3, [pc, #628]	@ (8014cb0 <UART_SetConfig+0x92c>)
 8014a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a3e:	e009      	b.n	8014a54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a46:	e005      	b.n	8014a54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014a52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	f000 81de 	beq.w	8014e18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a60:	4a94      	ldr	r2, [pc, #592]	@ (8014cb4 <UART_SetConfig+0x930>)
 8014a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a66:	461a      	mov	r2, r3
 8014a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	685a      	ldr	r2, [r3, #4]
 8014a74:	4613      	mov	r3, r2
 8014a76:	005b      	lsls	r3, r3, #1
 8014a78:	4413      	add	r3, r2
 8014a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d305      	bcc.n	8014a8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	685b      	ldr	r3, [r3, #4]
 8014a84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d903      	bls.n	8014a94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014a92:	e1c1      	b.n	8014e18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a96:	2200      	movs	r2, #0
 8014a98:	60bb      	str	r3, [r7, #8]
 8014a9a:	60fa      	str	r2, [r7, #12]
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aa0:	4a84      	ldr	r2, [pc, #528]	@ (8014cb4 <UART_SetConfig+0x930>)
 8014aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	603b      	str	r3, [r7, #0]
 8014aac:	607a      	str	r2, [r7, #4]
 8014aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014ab6:	f7eb fc6b 	bl	8000390 <__aeabi_uldivmod>
 8014aba:	4602      	mov	r2, r0
 8014abc:	460b      	mov	r3, r1
 8014abe:	4610      	mov	r0, r2
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	f04f 0200 	mov.w	r2, #0
 8014ac6:	f04f 0300 	mov.w	r3, #0
 8014aca:	020b      	lsls	r3, r1, #8
 8014acc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014ad0:	0202      	lsls	r2, r0, #8
 8014ad2:	6979      	ldr	r1, [r7, #20]
 8014ad4:	6849      	ldr	r1, [r1, #4]
 8014ad6:	0849      	lsrs	r1, r1, #1
 8014ad8:	2000      	movs	r0, #0
 8014ada:	460c      	mov	r4, r1
 8014adc:	4605      	mov	r5, r0
 8014ade:	eb12 0804 	adds.w	r8, r2, r4
 8014ae2:	eb43 0905 	adc.w	r9, r3, r5
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	2200      	movs	r2, #0
 8014aec:	469a      	mov	sl, r3
 8014aee:	4693      	mov	fp, r2
 8014af0:	4652      	mov	r2, sl
 8014af2:	465b      	mov	r3, fp
 8014af4:	4640      	mov	r0, r8
 8014af6:	4649      	mov	r1, r9
 8014af8:	f7eb fc4a 	bl	8000390 <__aeabi_uldivmod>
 8014afc:	4602      	mov	r2, r0
 8014afe:	460b      	mov	r3, r1
 8014b00:	4613      	mov	r3, r2
 8014b02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014b0a:	d308      	bcc.n	8014b1e <UART_SetConfig+0x79a>
 8014b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014b12:	d204      	bcs.n	8014b1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014b14:	697b      	ldr	r3, [r7, #20]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b1a:	60da      	str	r2, [r3, #12]
 8014b1c:	e17c      	b.n	8014e18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8014b1e:	2301      	movs	r3, #1
 8014b20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014b24:	e178      	b.n	8014e18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	69db      	ldr	r3, [r3, #28]
 8014b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014b2e:	f040 80c5 	bne.w	8014cbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8014b32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014b36:	2b20      	cmp	r3, #32
 8014b38:	dc48      	bgt.n	8014bcc <UART_SetConfig+0x848>
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	db7b      	blt.n	8014c36 <UART_SetConfig+0x8b2>
 8014b3e:	2b20      	cmp	r3, #32
 8014b40:	d879      	bhi.n	8014c36 <UART_SetConfig+0x8b2>
 8014b42:	a201      	add	r2, pc, #4	@ (adr r2, 8014b48 <UART_SetConfig+0x7c4>)
 8014b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b48:	08014bd3 	.word	0x08014bd3
 8014b4c:	08014bdb 	.word	0x08014bdb
 8014b50:	08014c37 	.word	0x08014c37
 8014b54:	08014c37 	.word	0x08014c37
 8014b58:	08014be3 	.word	0x08014be3
 8014b5c:	08014c37 	.word	0x08014c37
 8014b60:	08014c37 	.word	0x08014c37
 8014b64:	08014c37 	.word	0x08014c37
 8014b68:	08014bf3 	.word	0x08014bf3
 8014b6c:	08014c37 	.word	0x08014c37
 8014b70:	08014c37 	.word	0x08014c37
 8014b74:	08014c37 	.word	0x08014c37
 8014b78:	08014c37 	.word	0x08014c37
 8014b7c:	08014c37 	.word	0x08014c37
 8014b80:	08014c37 	.word	0x08014c37
 8014b84:	08014c37 	.word	0x08014c37
 8014b88:	08014c03 	.word	0x08014c03
 8014b8c:	08014c37 	.word	0x08014c37
 8014b90:	08014c37 	.word	0x08014c37
 8014b94:	08014c37 	.word	0x08014c37
 8014b98:	08014c37 	.word	0x08014c37
 8014b9c:	08014c37 	.word	0x08014c37
 8014ba0:	08014c37 	.word	0x08014c37
 8014ba4:	08014c37 	.word	0x08014c37
 8014ba8:	08014c37 	.word	0x08014c37
 8014bac:	08014c37 	.word	0x08014c37
 8014bb0:	08014c37 	.word	0x08014c37
 8014bb4:	08014c37 	.word	0x08014c37
 8014bb8:	08014c37 	.word	0x08014c37
 8014bbc:	08014c37 	.word	0x08014c37
 8014bc0:	08014c37 	.word	0x08014c37
 8014bc4:	08014c37 	.word	0x08014c37
 8014bc8:	08014c29 	.word	0x08014c29
 8014bcc:	2b40      	cmp	r3, #64	@ 0x40
 8014bce:	d02e      	beq.n	8014c2e <UART_SetConfig+0x8aa>
 8014bd0:	e031      	b.n	8014c36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014bd2:	f7fa fced 	bl	800f5b0 <HAL_RCC_GetPCLK1Freq>
 8014bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014bd8:	e033      	b.n	8014c42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014bda:	f7fa fcff 	bl	800f5dc <HAL_RCC_GetPCLK2Freq>
 8014bde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014be0:	e02f      	b.n	8014c42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fc fcae 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014bf0:	e027      	b.n	8014c42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014bf2:	f107 0318 	add.w	r3, r7, #24
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7fc fdfa 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c00:	e01f      	b.n	8014c42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014c02:	4b2d      	ldr	r3, [pc, #180]	@ (8014cb8 <UART_SetConfig+0x934>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	f003 0320 	and.w	r3, r3, #32
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d009      	beq.n	8014c22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8014cb8 <UART_SetConfig+0x934>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	08db      	lsrs	r3, r3, #3
 8014c14:	f003 0303 	and.w	r3, r3, #3
 8014c18:	4a24      	ldr	r2, [pc, #144]	@ (8014cac <UART_SetConfig+0x928>)
 8014c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8014c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014c20:	e00f      	b.n	8014c42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014c22:	4b22      	ldr	r3, [pc, #136]	@ (8014cac <UART_SetConfig+0x928>)
 8014c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c26:	e00c      	b.n	8014c42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014c28:	4b21      	ldr	r3, [pc, #132]	@ (8014cb0 <UART_SetConfig+0x92c>)
 8014c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c2c:	e009      	b.n	8014c42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014c34:	e005      	b.n	8014c42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014c36:	2300      	movs	r3, #0
 8014c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f000 80e7 	beq.w	8014e18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c4e:	4a19      	ldr	r2, [pc, #100]	@ (8014cb4 <UART_SetConfig+0x930>)
 8014c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014c54:	461a      	mov	r2, r3
 8014c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c5c:	005a      	lsls	r2, r3, #1
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	085b      	lsrs	r3, r3, #1
 8014c64:	441a      	add	r2, r3
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c72:	2b0f      	cmp	r3, #15
 8014c74:	d916      	bls.n	8014ca4 <UART_SetConfig+0x920>
 8014c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c7c:	d212      	bcs.n	8014ca4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	f023 030f 	bic.w	r3, r3, #15
 8014c86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c8a:	085b      	lsrs	r3, r3, #1
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	f003 0307 	and.w	r3, r3, #7
 8014c92:	b29a      	uxth	r2, r3
 8014c94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014c96:	4313      	orrs	r3, r2
 8014c98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014ca0:	60da      	str	r2, [r3, #12]
 8014ca2:	e0b9      	b.n	8014e18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014caa:	e0b5      	b.n	8014e18 <UART_SetConfig+0xa94>
 8014cac:	03d09000 	.word	0x03d09000
 8014cb0:	003d0900 	.word	0x003d0900
 8014cb4:	0801b934 	.word	0x0801b934
 8014cb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8014cbc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014cc0:	2b20      	cmp	r3, #32
 8014cc2:	dc49      	bgt.n	8014d58 <UART_SetConfig+0x9d4>
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	db7c      	blt.n	8014dc2 <UART_SetConfig+0xa3e>
 8014cc8:	2b20      	cmp	r3, #32
 8014cca:	d87a      	bhi.n	8014dc2 <UART_SetConfig+0xa3e>
 8014ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8014cd4 <UART_SetConfig+0x950>)
 8014cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cd2:	bf00      	nop
 8014cd4:	08014d5f 	.word	0x08014d5f
 8014cd8:	08014d67 	.word	0x08014d67
 8014cdc:	08014dc3 	.word	0x08014dc3
 8014ce0:	08014dc3 	.word	0x08014dc3
 8014ce4:	08014d6f 	.word	0x08014d6f
 8014ce8:	08014dc3 	.word	0x08014dc3
 8014cec:	08014dc3 	.word	0x08014dc3
 8014cf0:	08014dc3 	.word	0x08014dc3
 8014cf4:	08014d7f 	.word	0x08014d7f
 8014cf8:	08014dc3 	.word	0x08014dc3
 8014cfc:	08014dc3 	.word	0x08014dc3
 8014d00:	08014dc3 	.word	0x08014dc3
 8014d04:	08014dc3 	.word	0x08014dc3
 8014d08:	08014dc3 	.word	0x08014dc3
 8014d0c:	08014dc3 	.word	0x08014dc3
 8014d10:	08014dc3 	.word	0x08014dc3
 8014d14:	08014d8f 	.word	0x08014d8f
 8014d18:	08014dc3 	.word	0x08014dc3
 8014d1c:	08014dc3 	.word	0x08014dc3
 8014d20:	08014dc3 	.word	0x08014dc3
 8014d24:	08014dc3 	.word	0x08014dc3
 8014d28:	08014dc3 	.word	0x08014dc3
 8014d2c:	08014dc3 	.word	0x08014dc3
 8014d30:	08014dc3 	.word	0x08014dc3
 8014d34:	08014dc3 	.word	0x08014dc3
 8014d38:	08014dc3 	.word	0x08014dc3
 8014d3c:	08014dc3 	.word	0x08014dc3
 8014d40:	08014dc3 	.word	0x08014dc3
 8014d44:	08014dc3 	.word	0x08014dc3
 8014d48:	08014dc3 	.word	0x08014dc3
 8014d4c:	08014dc3 	.word	0x08014dc3
 8014d50:	08014dc3 	.word	0x08014dc3
 8014d54:	08014db5 	.word	0x08014db5
 8014d58:	2b40      	cmp	r3, #64	@ 0x40
 8014d5a:	d02e      	beq.n	8014dba <UART_SetConfig+0xa36>
 8014d5c:	e031      	b.n	8014dc2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014d5e:	f7fa fc27 	bl	800f5b0 <HAL_RCC_GetPCLK1Freq>
 8014d62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014d64:	e033      	b.n	8014dce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014d66:	f7fa fc39 	bl	800f5dc <HAL_RCC_GetPCLK2Freq>
 8014d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014d6c:	e02f      	b.n	8014dce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fc fbe8 	bl	8011548 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d7c:	e027      	b.n	8014dce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014d7e:	f107 0318 	add.w	r3, r7, #24
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7fc fd34 	bl	80117f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d8c:	e01f      	b.n	8014dce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8014e44 <UART_SetConfig+0xac0>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	f003 0320 	and.w	r3, r3, #32
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d009      	beq.n	8014dae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8014e44 <UART_SetConfig+0xac0>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	08db      	lsrs	r3, r3, #3
 8014da0:	f003 0303 	and.w	r3, r3, #3
 8014da4:	4a28      	ldr	r2, [pc, #160]	@ (8014e48 <UART_SetConfig+0xac4>)
 8014da6:	fa22 f303 	lsr.w	r3, r2, r3
 8014daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014dac:	e00f      	b.n	8014dce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8014dae:	4b26      	ldr	r3, [pc, #152]	@ (8014e48 <UART_SetConfig+0xac4>)
 8014db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014db2:	e00c      	b.n	8014dce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014db4:	4b25      	ldr	r3, [pc, #148]	@ (8014e4c <UART_SetConfig+0xac8>)
 8014db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014db8:	e009      	b.n	8014dce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014dc0:	e005      	b.n	8014dce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014dcc:	bf00      	nop
    }

    if (pclk != 0U)
 8014dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d021      	beq.n	8014e18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8014e50 <UART_SetConfig+0xacc>)
 8014dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014dde:	461a      	mov	r2, r3
 8014de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014de2:	fbb3 f2f2 	udiv	r2, r3, r2
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	685b      	ldr	r3, [r3, #4]
 8014dea:	085b      	lsrs	r3, r3, #1
 8014dec:	441a      	add	r2, r3
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014df6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dfa:	2b0f      	cmp	r3, #15
 8014dfc:	d909      	bls.n	8014e12 <UART_SetConfig+0xa8e>
 8014dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014e04:	d205      	bcs.n	8014e12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e08:	b29a      	uxth	r2, r3
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	60da      	str	r2, [r3, #12]
 8014e10:	e002      	b.n	8014e18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014e12:	2301      	movs	r3, #1
 8014e14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	2201      	movs	r2, #1
 8014e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	2201      	movs	r2, #1
 8014e24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	2200      	movs	r2, #0
 8014e32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8014e34:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3748      	adds	r7, #72	@ 0x48
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014e42:	bf00      	nop
 8014e44:	58024400 	.word	0x58024400
 8014e48:	03d09000 	.word	0x03d09000
 8014e4c:	003d0900 	.word	0x003d0900
 8014e50:	0801b934 	.word	0x0801b934

08014e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014e54:	b480      	push	{r7}
 8014e56:	b083      	sub	sp, #12
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e60:	f003 0308 	and.w	r3, r3, #8
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d00a      	beq.n	8014e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	685b      	ldr	r3, [r3, #4]
 8014e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	430a      	orrs	r2, r1
 8014e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e82:	f003 0301 	and.w	r3, r3, #1
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d00a      	beq.n	8014ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	685b      	ldr	r3, [r3, #4]
 8014e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	430a      	orrs	r2, r1
 8014e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ea4:	f003 0302 	and.w	r3, r3, #2
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d00a      	beq.n	8014ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	430a      	orrs	r2, r1
 8014ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ec6:	f003 0304 	and.w	r3, r3, #4
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d00a      	beq.n	8014ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	430a      	orrs	r2, r1
 8014ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ee8:	f003 0310 	and.w	r3, r3, #16
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d00a      	beq.n	8014f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	689b      	ldr	r3, [r3, #8]
 8014ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	430a      	orrs	r2, r1
 8014f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f0a:	f003 0320 	and.w	r3, r3, #32
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d00a      	beq.n	8014f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	689b      	ldr	r3, [r3, #8]
 8014f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	430a      	orrs	r2, r1
 8014f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d01a      	beq.n	8014f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	430a      	orrs	r2, r1
 8014f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014f52:	d10a      	bne.n	8014f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	685b      	ldr	r3, [r3, #4]
 8014f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	430a      	orrs	r2, r1
 8014f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d00a      	beq.n	8014f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	430a      	orrs	r2, r1
 8014f8a:	605a      	str	r2, [r3, #4]
  }
}
 8014f8c:	bf00      	nop
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b098      	sub	sp, #96	@ 0x60
 8014f9c:	af02      	add	r7, sp, #8
 8014f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014fa8:	f7ee fbc2 	bl	8003730 <HAL_GetTick>
 8014fac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	f003 0308 	and.w	r3, r3, #8
 8014fb8:	2b08      	cmp	r3, #8
 8014fba:	d12f      	bne.n	801501c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014fc0:	9300      	str	r3, [sp, #0]
 8014fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f000 f88e 	bl	80150ec <UART_WaitOnFlagUntilTimeout>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d022      	beq.n	801501c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fde:	e853 3f00 	ldrex	r3, [r3]
 8014fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8014ff6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ffc:	e841 2300 	strex	r3, r2, [r1]
 8015000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015004:	2b00      	cmp	r3, #0
 8015006:	d1e6      	bne.n	8014fd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2220      	movs	r2, #32
 801500c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2200      	movs	r2, #0
 8015014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015018:	2303      	movs	r3, #3
 801501a:	e063      	b.n	80150e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	f003 0304 	and.w	r3, r3, #4
 8015026:	2b04      	cmp	r3, #4
 8015028:	d149      	bne.n	80150be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801502a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801502e:	9300      	str	r3, [sp, #0]
 8015030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015032:	2200      	movs	r2, #0
 8015034:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015038:	6878      	ldr	r0, [r7, #4]
 801503a:	f000 f857 	bl	80150ec <UART_WaitOnFlagUntilTimeout>
 801503e:	4603      	mov	r3, r0
 8015040:	2b00      	cmp	r3, #0
 8015042:	d03c      	beq.n	80150be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801504c:	e853 3f00 	ldrex	r3, [r3]
 8015050:	623b      	str	r3, [r7, #32]
   return(result);
 8015052:	6a3b      	ldr	r3, [r7, #32]
 8015054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	461a      	mov	r2, r3
 8015060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015062:	633b      	str	r3, [r7, #48]	@ 0x30
 8015064:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801506a:	e841 2300 	strex	r3, r2, [r1]
 801506e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015072:	2b00      	cmp	r3, #0
 8015074:	d1e6      	bne.n	8015044 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	3308      	adds	r3, #8
 801507c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	e853 3f00 	ldrex	r3, [r3]
 8015084:	60fb      	str	r3, [r7, #12]
   return(result);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	f023 0301 	bic.w	r3, r3, #1
 801508c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	3308      	adds	r3, #8
 8015094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015096:	61fa      	str	r2, [r7, #28]
 8015098:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801509a:	69b9      	ldr	r1, [r7, #24]
 801509c:	69fa      	ldr	r2, [r7, #28]
 801509e:	e841 2300 	strex	r3, r2, [r1]
 80150a2:	617b      	str	r3, [r7, #20]
   return(result);
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d1e5      	bne.n	8015076 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	2220      	movs	r2, #32
 80150ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	2200      	movs	r2, #0
 80150b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80150ba:	2303      	movs	r3, #3
 80150bc:	e012      	b.n	80150e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2220      	movs	r2, #32
 80150c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	2220      	movs	r2, #32
 80150ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2200      	movs	r2, #0
 80150d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2200      	movs	r2, #0
 80150d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2200      	movs	r2, #0
 80150de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80150e2:	2300      	movs	r3, #0
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3758      	adds	r7, #88	@ 0x58
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	60b9      	str	r1, [r7, #8]
 80150f6:	603b      	str	r3, [r7, #0]
 80150f8:	4613      	mov	r3, r2
 80150fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80150fc:	e04f      	b.n	801519e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80150fe:	69bb      	ldr	r3, [r7, #24]
 8015100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015104:	d04b      	beq.n	801519e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015106:	f7ee fb13 	bl	8003730 <HAL_GetTick>
 801510a:	4602      	mov	r2, r0
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	1ad3      	subs	r3, r2, r3
 8015110:	69ba      	ldr	r2, [r7, #24]
 8015112:	429a      	cmp	r2, r3
 8015114:	d302      	bcc.n	801511c <UART_WaitOnFlagUntilTimeout+0x30>
 8015116:	69bb      	ldr	r3, [r7, #24]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d101      	bne.n	8015120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801511c:	2303      	movs	r3, #3
 801511e:	e04e      	b.n	80151be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	f003 0304 	and.w	r3, r3, #4
 801512a:	2b00      	cmp	r3, #0
 801512c:	d037      	beq.n	801519e <UART_WaitOnFlagUntilTimeout+0xb2>
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	2b80      	cmp	r3, #128	@ 0x80
 8015132:	d034      	beq.n	801519e <UART_WaitOnFlagUntilTimeout+0xb2>
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	2b40      	cmp	r3, #64	@ 0x40
 8015138:	d031      	beq.n	801519e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	69db      	ldr	r3, [r3, #28]
 8015140:	f003 0308 	and.w	r3, r3, #8
 8015144:	2b08      	cmp	r3, #8
 8015146:	d110      	bne.n	801516a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	2208      	movs	r2, #8
 801514e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015150:	68f8      	ldr	r0, [r7, #12]
 8015152:	f000 f921 	bl	8015398 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	2208      	movs	r2, #8
 801515a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	2200      	movs	r2, #0
 8015162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8015166:	2301      	movs	r3, #1
 8015168:	e029      	b.n	80151be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	69db      	ldr	r3, [r3, #28]
 8015170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015178:	d111      	bne.n	801519e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015184:	68f8      	ldr	r0, [r7, #12]
 8015186:	f000 f907 	bl	8015398 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2220      	movs	r2, #32
 801518e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2200      	movs	r2, #0
 8015196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801519a:	2303      	movs	r3, #3
 801519c:	e00f      	b.n	80151be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	69da      	ldr	r2, [r3, #28]
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	4013      	ands	r3, r2
 80151a8:	68ba      	ldr	r2, [r7, #8]
 80151aa:	429a      	cmp	r2, r3
 80151ac:	bf0c      	ite	eq
 80151ae:	2301      	moveq	r3, #1
 80151b0:	2300      	movne	r3, #0
 80151b2:	b2db      	uxtb	r3, r3
 80151b4:	461a      	mov	r2, r3
 80151b6:	79fb      	ldrb	r3, [r7, #7]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d0a0      	beq.n	80150fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80151bc:	2300      	movs	r3, #0
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3710      	adds	r7, #16
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
	...

080151c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b096      	sub	sp, #88	@ 0x58
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	60f8      	str	r0, [r7, #12]
 80151d0:	60b9      	str	r1, [r7, #8]
 80151d2:	4613      	mov	r3, r2
 80151d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	68ba      	ldr	r2, [r7, #8]
 80151da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	88fa      	ldrh	r2, [r7, #6]
 80151e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	2200      	movs	r2, #0
 80151e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	2222      	movs	r2, #34	@ 0x22
 80151f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d02d      	beq.n	801525a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015204:	4a40      	ldr	r2, [pc, #256]	@ (8015308 <UART_Start_Receive_DMA+0x140>)
 8015206:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801520e:	4a3f      	ldr	r2, [pc, #252]	@ (801530c <UART_Start_Receive_DMA+0x144>)
 8015210:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015218:	4a3d      	ldr	r2, [pc, #244]	@ (8015310 <UART_Start_Receive_DMA+0x148>)
 801521a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015222:	2200      	movs	r2, #0
 8015224:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	3324      	adds	r3, #36	@ 0x24
 8015232:	4619      	mov	r1, r3
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015238:	461a      	mov	r2, r3
 801523a:	88fb      	ldrh	r3, [r7, #6]
 801523c:	f7f0 fa4a 	bl	80056d4 <HAL_DMA_Start_IT>
 8015240:	4603      	mov	r3, r0
 8015242:	2b00      	cmp	r3, #0
 8015244:	d009      	beq.n	801525a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2210      	movs	r2, #16
 801524a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	2220      	movs	r2, #32
 8015252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8015256:	2301      	movs	r3, #1
 8015258:	e051      	b.n	80152fe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	691b      	ldr	r3, [r3, #16]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d018      	beq.n	8015294 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801526a:	e853 3f00 	ldrex	r3, [r3]
 801526e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015276:	657b      	str	r3, [r7, #84]	@ 0x54
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	461a      	mov	r2, r3
 801527e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015282:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015284:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015288:	e841 2300 	strex	r3, r2, [r1]
 801528c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801528e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015290:	2b00      	cmp	r3, #0
 8015292:	d1e6      	bne.n	8015262 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	3308      	adds	r3, #8
 801529a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801529e:	e853 3f00 	ldrex	r3, [r3]
 80152a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80152a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152a6:	f043 0301 	orr.w	r3, r3, #1
 80152aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	3308      	adds	r3, #8
 80152b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80152b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80152b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80152ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80152bc:	e841 2300 	strex	r3, r2, [r1]
 80152c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80152c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d1e5      	bne.n	8015294 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	3308      	adds	r3, #8
 80152ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	e853 3f00 	ldrex	r3, [r3]
 80152d6:	613b      	str	r3, [r7, #16]
   return(result);
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	3308      	adds	r3, #8
 80152e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80152e8:	623a      	str	r2, [r7, #32]
 80152ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152ec:	69f9      	ldr	r1, [r7, #28]
 80152ee:	6a3a      	ldr	r2, [r7, #32]
 80152f0:	e841 2300 	strex	r3, r2, [r1]
 80152f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80152f6:	69bb      	ldr	r3, [r7, #24]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d1e5      	bne.n	80152c8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80152fc:	2300      	movs	r3, #0
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3758      	adds	r7, #88	@ 0x58
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	08015465 	.word	0x08015465
 801530c:	0801558d 	.word	0x0801558d
 8015310:	080155cb 	.word	0x080155cb

08015314 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015314:	b480      	push	{r7}
 8015316:	b08f      	sub	sp, #60	@ 0x3c
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015322:	6a3b      	ldr	r3, [r7, #32]
 8015324:	e853 3f00 	ldrex	r3, [r3]
 8015328:	61fb      	str	r3, [r7, #28]
   return(result);
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015330:	637b      	str	r3, [r7, #52]	@ 0x34
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	461a      	mov	r2, r3
 8015338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801533a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801533c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801533e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015342:	e841 2300 	strex	r3, r2, [r1]
 8015346:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801534a:	2b00      	cmp	r3, #0
 801534c:	d1e6      	bne.n	801531c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	3308      	adds	r3, #8
 8015354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	e853 3f00 	ldrex	r3, [r3]
 801535c:	60bb      	str	r3, [r7, #8]
   return(result);
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8015364:	633b      	str	r3, [r7, #48]	@ 0x30
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	3308      	adds	r3, #8
 801536c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801536e:	61ba      	str	r2, [r7, #24]
 8015370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015372:	6979      	ldr	r1, [r7, #20]
 8015374:	69ba      	ldr	r2, [r7, #24]
 8015376:	e841 2300 	strex	r3, r2, [r1]
 801537a:	613b      	str	r3, [r7, #16]
   return(result);
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d1e5      	bne.n	801534e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2220      	movs	r2, #32
 8015386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801538a:	bf00      	nop
 801538c:	373c      	adds	r7, #60	@ 0x3c
 801538e:	46bd      	mov	sp, r7
 8015390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015394:	4770      	bx	lr
	...

08015398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015398:	b480      	push	{r7}
 801539a:	b095      	sub	sp, #84	@ 0x54
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153a8:	e853 3f00 	ldrex	r3, [r3]
 80153ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80153ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80153b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	461a      	mov	r2, r3
 80153bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80153be:	643b      	str	r3, [r7, #64]	@ 0x40
 80153c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80153c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80153c6:	e841 2300 	strex	r3, r2, [r1]
 80153ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80153cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d1e6      	bne.n	80153a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	3308      	adds	r3, #8
 80153d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153da:	6a3b      	ldr	r3, [r7, #32]
 80153dc:	e853 3f00 	ldrex	r3, [r3]
 80153e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80153e2:	69fa      	ldr	r2, [r7, #28]
 80153e4:	4b1e      	ldr	r3, [pc, #120]	@ (8015460 <UART_EndRxTransfer+0xc8>)
 80153e6:	4013      	ands	r3, r2
 80153e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	3308      	adds	r3, #8
 80153f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80153f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80153f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80153f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153fa:	e841 2300 	strex	r3, r2, [r1]
 80153fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015402:	2b00      	cmp	r3, #0
 8015404:	d1e5      	bne.n	80153d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801540a:	2b01      	cmp	r3, #1
 801540c:	d118      	bne.n	8015440 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	e853 3f00 	ldrex	r3, [r3]
 801541a:	60bb      	str	r3, [r7, #8]
   return(result);
 801541c:	68bb      	ldr	r3, [r7, #8]
 801541e:	f023 0310 	bic.w	r3, r3, #16
 8015422:	647b      	str	r3, [r7, #68]	@ 0x44
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	461a      	mov	r2, r3
 801542a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801542c:	61bb      	str	r3, [r7, #24]
 801542e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015430:	6979      	ldr	r1, [r7, #20]
 8015432:	69ba      	ldr	r2, [r7, #24]
 8015434:	e841 2300 	strex	r3, r2, [r1]
 8015438:	613b      	str	r3, [r7, #16]
   return(result);
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d1e6      	bne.n	801540e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2220      	movs	r2, #32
 8015444:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2200      	movs	r2, #0
 801544c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2200      	movs	r2, #0
 8015452:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8015454:	bf00      	nop
 8015456:	3754      	adds	r7, #84	@ 0x54
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr
 8015460:	effffffe 	.word	0xeffffffe

08015464 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b09c      	sub	sp, #112	@ 0x70
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015470:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	69db      	ldr	r3, [r3, #28]
 8015476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801547a:	d071      	beq.n	8015560 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801547c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801547e:	2200      	movs	r2, #0
 8015480:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801548a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801548c:	e853 3f00 	ldrex	r3, [r3]
 8015490:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015498:	66bb      	str	r3, [r7, #104]	@ 0x68
 801549a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	461a      	mov	r2, r3
 80154a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80154a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80154a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80154a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80154aa:	e841 2300 	strex	r3, r2, [r1]
 80154ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80154b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d1e6      	bne.n	8015484 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80154b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	3308      	adds	r3, #8
 80154bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154c0:	e853 3f00 	ldrex	r3, [r3]
 80154c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80154c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154c8:	f023 0301 	bic.w	r3, r3, #1
 80154cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80154ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	3308      	adds	r3, #8
 80154d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80154d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80154d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80154dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80154de:	e841 2300 	strex	r3, r2, [r1]
 80154e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80154e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d1e5      	bne.n	80154b6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80154ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	3308      	adds	r3, #8
 80154f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154f4:	e853 3f00 	ldrex	r3, [r3]
 80154f8:	623b      	str	r3, [r7, #32]
   return(result);
 80154fa:	6a3b      	ldr	r3, [r7, #32]
 80154fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015500:	663b      	str	r3, [r7, #96]	@ 0x60
 8015502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	3308      	adds	r3, #8
 8015508:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801550a:	633a      	str	r2, [r7, #48]	@ 0x30
 801550c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801550e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015512:	e841 2300 	strex	r3, r2, [r1]
 8015516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801551a:	2b00      	cmp	r3, #0
 801551c:	d1e5      	bne.n	80154ea <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801551e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015520:	2220      	movs	r2, #32
 8015522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801552a:	2b01      	cmp	r3, #1
 801552c:	d118      	bne.n	8015560 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801552e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	e853 3f00 	ldrex	r3, [r3]
 801553a:	60fb      	str	r3, [r7, #12]
   return(result);
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f023 0310 	bic.w	r3, r3, #16
 8015542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	461a      	mov	r2, r3
 801554a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801554c:	61fb      	str	r3, [r7, #28]
 801554e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015550:	69b9      	ldr	r1, [r7, #24]
 8015552:	69fa      	ldr	r2, [r7, #28]
 8015554:	e841 2300 	strex	r3, r2, [r1]
 8015558:	617b      	str	r3, [r7, #20]
   return(result);
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d1e6      	bne.n	801552e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015562:	2200      	movs	r2, #0
 8015564:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801556a:	2b01      	cmp	r3, #1
 801556c:	d107      	bne.n	801557e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801556e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015574:	4619      	mov	r1, r3
 8015576:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015578:	f7fe fef8 	bl	801436c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801557c:	e002      	b.n	8015584 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801557e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015580:	f7ec f9e6 	bl	8001950 <HAL_UART_RxCpltCallback>
}
 8015584:	bf00      	nop
 8015586:	3770      	adds	r7, #112	@ 0x70
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015598:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	2201      	movs	r2, #1
 801559e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	d109      	bne.n	80155bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80155ae:	085b      	lsrs	r3, r3, #1
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	4619      	mov	r1, r3
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f7fe fed9 	bl	801436c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80155ba:	e002      	b.n	80155c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80155bc:	68f8      	ldr	r0, [r7, #12]
 80155be:	f7fe fec1 	bl	8014344 <HAL_UART_RxHalfCpltCallback>
}
 80155c2:	bf00      	nop
 80155c4:	3710      	adds	r7, #16
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80155ca:	b580      	push	{r7, lr}
 80155cc:	b086      	sub	sp, #24
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80155de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80155e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	689b      	ldr	r3, [r3, #8]
 80155ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80155f2:	2b80      	cmp	r3, #128	@ 0x80
 80155f4:	d109      	bne.n	801560a <UART_DMAError+0x40>
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	2b21      	cmp	r3, #33	@ 0x21
 80155fa:	d106      	bne.n	801560a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	2200      	movs	r2, #0
 8015600:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8015604:	6978      	ldr	r0, [r7, #20]
 8015606:	f7ff fe85 	bl	8015314 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	689b      	ldr	r3, [r3, #8]
 8015610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015614:	2b40      	cmp	r3, #64	@ 0x40
 8015616:	d109      	bne.n	801562c <UART_DMAError+0x62>
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2b22      	cmp	r3, #34	@ 0x22
 801561c:	d106      	bne.n	801562c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801561e:	697b      	ldr	r3, [r7, #20]
 8015620:	2200      	movs	r2, #0
 8015622:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8015626:	6978      	ldr	r0, [r7, #20]
 8015628:	f7ff feb6 	bl	8015398 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015632:	f043 0210 	orr.w	r2, r3, #16
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801563c:	6978      	ldr	r0, [r7, #20]
 801563e:	f7fe fe8b 	bl	8014358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015642:	bf00      	nop
 8015644:	3718      	adds	r7, #24
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}

0801564a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b084      	sub	sp, #16
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015656:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	2200      	movs	r2, #0
 801565c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f7fe fe79 	bl	8014358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015666:	bf00      	nop
 8015668:	3710      	adds	r7, #16
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801566e:	b580      	push	{r7, lr}
 8015670:	b088      	sub	sp, #32
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	e853 3f00 	ldrex	r3, [r3]
 8015682:	60bb      	str	r3, [r7, #8]
   return(result);
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801568a:	61fb      	str	r3, [r7, #28]
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	461a      	mov	r2, r3
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	61bb      	str	r3, [r7, #24]
 8015696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015698:	6979      	ldr	r1, [r7, #20]
 801569a:	69ba      	ldr	r2, [r7, #24]
 801569c:	e841 2300 	strex	r3, r2, [r1]
 80156a0:	613b      	str	r3, [r7, #16]
   return(result);
 80156a2:	693b      	ldr	r3, [r7, #16]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d1e6      	bne.n	8015676 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	2220      	movs	r2, #32
 80156ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2200      	movs	r2, #0
 80156b4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f7fe fe3a 	bl	8014330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80156bc:	bf00      	nop
 80156be:	3720      	adds	r7, #32
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80156c4:	b480      	push	{r7}
 80156c6:	b083      	sub	sp, #12
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80156cc:	bf00      	nop
 80156ce:	370c      	adds	r7, #12
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80156e0:	bf00      	nop
 80156e2:	370c      	adds	r7, #12
 80156e4:	46bd      	mov	sp, r7
 80156e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ea:	4770      	bx	lr

080156ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80156ec:	b480      	push	{r7}
 80156ee:	b083      	sub	sp, #12
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80156f4:	bf00      	nop
 80156f6:	370c      	adds	r7, #12
 80156f8:	46bd      	mov	sp, r7
 80156fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fe:	4770      	bx	lr

08015700 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b084      	sub	sp, #16
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801570e:	2b01      	cmp	r3, #1
 8015710:	d101      	bne.n	8015716 <HAL_UARTEx_EnableFifoMode+0x16>
 8015712:	2302      	movs	r3, #2
 8015714:	e02b      	b.n	801576e <HAL_UARTEx_EnableFifoMode+0x6e>
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2201      	movs	r2, #1
 801571a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2224      	movs	r2, #36	@ 0x24
 8015722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	681a      	ldr	r2, [r3, #0]
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	f022 0201 	bic.w	r2, r2, #1
 801573c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015744:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 801574c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	68fa      	ldr	r2, [r7, #12]
 8015754:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f000 f88a 	bl	8015870 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2220      	movs	r2, #32
 8015760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2200      	movs	r2, #0
 8015768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801576c:	2300      	movs	r3, #0
}
 801576e:	4618      	mov	r0, r3
 8015770:	3710      	adds	r7, #16
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}

08015776 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015776:	b580      	push	{r7, lr}
 8015778:	b084      	sub	sp, #16
 801577a:	af00      	add	r7, sp, #0
 801577c:	6078      	str	r0, [r7, #4]
 801577e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015786:	2b01      	cmp	r3, #1
 8015788:	d101      	bne.n	801578e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801578a:	2302      	movs	r3, #2
 801578c:	e02d      	b.n	80157ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2201      	movs	r2, #1
 8015792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2224      	movs	r2, #36	@ 0x24
 801579a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	681a      	ldr	r2, [r3, #0]
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	f022 0201 	bic.w	r2, r2, #1
 80157b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	689b      	ldr	r3, [r3, #8]
 80157bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	683a      	ldr	r2, [r7, #0]
 80157c6:	430a      	orrs	r2, r1
 80157c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f000 f850 	bl	8015870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	68fa      	ldr	r2, [r7, #12]
 80157d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2220      	movs	r2, #32
 80157dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2200      	movs	r2, #0
 80157e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80157e8:	2300      	movs	r3, #0
}
 80157ea:	4618      	mov	r0, r3
 80157ec:	3710      	adds	r7, #16
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}

080157f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80157f2:	b580      	push	{r7, lr}
 80157f4:	b084      	sub	sp, #16
 80157f6:	af00      	add	r7, sp, #0
 80157f8:	6078      	str	r0, [r7, #4]
 80157fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015802:	2b01      	cmp	r3, #1
 8015804:	d101      	bne.n	801580a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015806:	2302      	movs	r3, #2
 8015808:	e02d      	b.n	8015866 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2201      	movs	r2, #1
 801580e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	2224      	movs	r2, #36	@ 0x24
 8015816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	681a      	ldr	r2, [r3, #0]
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	f022 0201 	bic.w	r2, r2, #1
 8015830:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	689b      	ldr	r3, [r3, #8]
 8015838:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	683a      	ldr	r2, [r7, #0]
 8015842:	430a      	orrs	r2, r1
 8015844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f000 f812 	bl	8015870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	68fa      	ldr	r2, [r7, #12]
 8015852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2220      	movs	r2, #32
 8015858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2200      	movs	r2, #0
 8015860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015864:	2300      	movs	r3, #0
}
 8015866:	4618      	mov	r0, r3
 8015868:	3710      	adds	r7, #16
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}
	...

08015870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015870:	b480      	push	{r7}
 8015872:	b085      	sub	sp, #20
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801587c:	2b00      	cmp	r3, #0
 801587e:	d108      	bne.n	8015892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2201      	movs	r2, #1
 8015884:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2201      	movs	r2, #1
 801588c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015890:	e031      	b.n	80158f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015892:	2310      	movs	r3, #16
 8015894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015896:	2310      	movs	r3, #16
 8015898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	689b      	ldr	r3, [r3, #8]
 80158a0:	0e5b      	lsrs	r3, r3, #25
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	f003 0307 	and.w	r3, r3, #7
 80158a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	689b      	ldr	r3, [r3, #8]
 80158b0:	0f5b      	lsrs	r3, r3, #29
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	f003 0307 	and.w	r3, r3, #7
 80158b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80158ba:	7bbb      	ldrb	r3, [r7, #14]
 80158bc:	7b3a      	ldrb	r2, [r7, #12]
 80158be:	4911      	ldr	r1, [pc, #68]	@ (8015904 <UARTEx_SetNbDataToProcess+0x94>)
 80158c0:	5c8a      	ldrb	r2, [r1, r2]
 80158c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80158c6:	7b3a      	ldrb	r2, [r7, #12]
 80158c8:	490f      	ldr	r1, [pc, #60]	@ (8015908 <UARTEx_SetNbDataToProcess+0x98>)
 80158ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80158cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80158d0:	b29a      	uxth	r2, r3
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80158d8:	7bfb      	ldrb	r3, [r7, #15]
 80158da:	7b7a      	ldrb	r2, [r7, #13]
 80158dc:	4909      	ldr	r1, [pc, #36]	@ (8015904 <UARTEx_SetNbDataToProcess+0x94>)
 80158de:	5c8a      	ldrb	r2, [r1, r2]
 80158e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80158e4:	7b7a      	ldrb	r2, [r7, #13]
 80158e6:	4908      	ldr	r1, [pc, #32]	@ (8015908 <UARTEx_SetNbDataToProcess+0x98>)
 80158e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80158ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80158ee:	b29a      	uxth	r2, r3
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80158f6:	bf00      	nop
 80158f8:	3714      	adds	r7, #20
 80158fa:	46bd      	mov	sp, r7
 80158fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015900:	4770      	bx	lr
 8015902:	bf00      	nop
 8015904:	0801b94c 	.word	0x0801b94c
 8015908:	0801b954 	.word	0x0801b954

0801590c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801590c:	b084      	sub	sp, #16
 801590e:	b580      	push	{r7, lr}
 8015910:	b084      	sub	sp, #16
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
 8015916:	f107 001c 	add.w	r0, r7, #28
 801591a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801591e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015922:	2b01      	cmp	r3, #1
 8015924:	d121      	bne.n	801596a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801592a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	68da      	ldr	r2, [r3, #12]
 8015936:	4b2c      	ldr	r3, [pc, #176]	@ (80159e8 <USB_CoreInit+0xdc>)
 8015938:	4013      	ands	r3, r2
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	68db      	ldr	r3, [r3, #12]
 8015942:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801594a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801594e:	2b01      	cmp	r3, #1
 8015950:	d105      	bne.n	801595e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	68db      	ldr	r3, [r3, #12]
 8015956:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f001 fafa 	bl	8016f58 <USB_CoreReset>
 8015964:	4603      	mov	r3, r0
 8015966:	73fb      	strb	r3, [r7, #15]
 8015968:	e01b      	b.n	80159a2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	68db      	ldr	r3, [r3, #12]
 801596e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f001 faee 	bl	8016f58 <USB_CoreReset>
 801597c:	4603      	mov	r3, r0
 801597e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8015980:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8015984:	2b00      	cmp	r3, #0
 8015986:	d106      	bne.n	8015996 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801598c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	639a      	str	r2, [r3, #56]	@ 0x38
 8015994:	e005      	b.n	80159a2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801599a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80159a2:	7fbb      	ldrb	r3, [r7, #30]
 80159a4:	2b01      	cmp	r3, #1
 80159a6:	d116      	bne.n	80159d6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80159b6:	4b0d      	ldr	r3, [pc, #52]	@ (80159ec <USB_CoreInit+0xe0>)
 80159b8:	4313      	orrs	r3, r2
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	689b      	ldr	r3, [r3, #8]
 80159c2:	f043 0206 	orr.w	r2, r3, #6
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	689b      	ldr	r3, [r3, #8]
 80159ce:	f043 0220 	orr.w	r2, r3, #32
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80159d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	3710      	adds	r7, #16
 80159dc:	46bd      	mov	sp, r7
 80159de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80159e2:	b004      	add	sp, #16
 80159e4:	4770      	bx	lr
 80159e6:	bf00      	nop
 80159e8:	ffbdffbf 	.word	0xffbdffbf
 80159ec:	03ee0000 	.word	0x03ee0000

080159f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80159f0:	b480      	push	{r7}
 80159f2:	b087      	sub	sp, #28
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	60f8      	str	r0, [r7, #12]
 80159f8:	60b9      	str	r1, [r7, #8]
 80159fa:	4613      	mov	r3, r2
 80159fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80159fe:	79fb      	ldrb	r3, [r7, #7]
 8015a00:	2b02      	cmp	r3, #2
 8015a02:	d165      	bne.n	8015ad0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8015a04:	68bb      	ldr	r3, [r7, #8]
 8015a06:	4a41      	ldr	r2, [pc, #260]	@ (8015b0c <USB_SetTurnaroundTime+0x11c>)
 8015a08:	4293      	cmp	r3, r2
 8015a0a:	d906      	bls.n	8015a1a <USB_SetTurnaroundTime+0x2a>
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	4a40      	ldr	r2, [pc, #256]	@ (8015b10 <USB_SetTurnaroundTime+0x120>)
 8015a10:	4293      	cmp	r3, r2
 8015a12:	d202      	bcs.n	8015a1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8015a14:	230f      	movs	r3, #15
 8015a16:	617b      	str	r3, [r7, #20]
 8015a18:	e062      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8015b10 <USB_SetTurnaroundTime+0x120>)
 8015a1e:	4293      	cmp	r3, r2
 8015a20:	d306      	bcc.n	8015a30 <USB_SetTurnaroundTime+0x40>
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	4a3b      	ldr	r2, [pc, #236]	@ (8015b14 <USB_SetTurnaroundTime+0x124>)
 8015a26:	4293      	cmp	r3, r2
 8015a28:	d202      	bcs.n	8015a30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015a2a:	230e      	movs	r3, #14
 8015a2c:	617b      	str	r3, [r7, #20]
 8015a2e:	e057      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	4a38      	ldr	r2, [pc, #224]	@ (8015b14 <USB_SetTurnaroundTime+0x124>)
 8015a34:	4293      	cmp	r3, r2
 8015a36:	d306      	bcc.n	8015a46 <USB_SetTurnaroundTime+0x56>
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	4a37      	ldr	r2, [pc, #220]	@ (8015b18 <USB_SetTurnaroundTime+0x128>)
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	d202      	bcs.n	8015a46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8015a40:	230d      	movs	r3, #13
 8015a42:	617b      	str	r3, [r7, #20]
 8015a44:	e04c      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	4a33      	ldr	r2, [pc, #204]	@ (8015b18 <USB_SetTurnaroundTime+0x128>)
 8015a4a:	4293      	cmp	r3, r2
 8015a4c:	d306      	bcc.n	8015a5c <USB_SetTurnaroundTime+0x6c>
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	4a32      	ldr	r2, [pc, #200]	@ (8015b1c <USB_SetTurnaroundTime+0x12c>)
 8015a52:	4293      	cmp	r3, r2
 8015a54:	d802      	bhi.n	8015a5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8015a56:	230c      	movs	r3, #12
 8015a58:	617b      	str	r3, [r7, #20]
 8015a5a:	e041      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8015b1c <USB_SetTurnaroundTime+0x12c>)
 8015a60:	4293      	cmp	r3, r2
 8015a62:	d906      	bls.n	8015a72 <USB_SetTurnaroundTime+0x82>
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	4a2e      	ldr	r2, [pc, #184]	@ (8015b20 <USB_SetTurnaroundTime+0x130>)
 8015a68:	4293      	cmp	r3, r2
 8015a6a:	d802      	bhi.n	8015a72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8015a6c:	230b      	movs	r3, #11
 8015a6e:	617b      	str	r3, [r7, #20]
 8015a70:	e036      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	4a2a      	ldr	r2, [pc, #168]	@ (8015b20 <USB_SetTurnaroundTime+0x130>)
 8015a76:	4293      	cmp	r3, r2
 8015a78:	d906      	bls.n	8015a88 <USB_SetTurnaroundTime+0x98>
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	4a29      	ldr	r2, [pc, #164]	@ (8015b24 <USB_SetTurnaroundTime+0x134>)
 8015a7e:	4293      	cmp	r3, r2
 8015a80:	d802      	bhi.n	8015a88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8015a82:	230a      	movs	r3, #10
 8015a84:	617b      	str	r3, [r7, #20]
 8015a86:	e02b      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	4a26      	ldr	r2, [pc, #152]	@ (8015b24 <USB_SetTurnaroundTime+0x134>)
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	d906      	bls.n	8015a9e <USB_SetTurnaroundTime+0xae>
 8015a90:	68bb      	ldr	r3, [r7, #8]
 8015a92:	4a25      	ldr	r2, [pc, #148]	@ (8015b28 <USB_SetTurnaroundTime+0x138>)
 8015a94:	4293      	cmp	r3, r2
 8015a96:	d202      	bcs.n	8015a9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8015a98:	2309      	movs	r3, #9
 8015a9a:	617b      	str	r3, [r7, #20]
 8015a9c:	e020      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	4a21      	ldr	r2, [pc, #132]	@ (8015b28 <USB_SetTurnaroundTime+0x138>)
 8015aa2:	4293      	cmp	r3, r2
 8015aa4:	d306      	bcc.n	8015ab4 <USB_SetTurnaroundTime+0xc4>
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	4a20      	ldr	r2, [pc, #128]	@ (8015b2c <USB_SetTurnaroundTime+0x13c>)
 8015aaa:	4293      	cmp	r3, r2
 8015aac:	d802      	bhi.n	8015ab4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015aae:	2308      	movs	r3, #8
 8015ab0:	617b      	str	r3, [r7, #20]
 8015ab2:	e015      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8015b2c <USB_SetTurnaroundTime+0x13c>)
 8015ab8:	4293      	cmp	r3, r2
 8015aba:	d906      	bls.n	8015aca <USB_SetTurnaroundTime+0xda>
 8015abc:	68bb      	ldr	r3, [r7, #8]
 8015abe:	4a1c      	ldr	r2, [pc, #112]	@ (8015b30 <USB_SetTurnaroundTime+0x140>)
 8015ac0:	4293      	cmp	r3, r2
 8015ac2:	d202      	bcs.n	8015aca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8015ac4:	2307      	movs	r3, #7
 8015ac6:	617b      	str	r3, [r7, #20]
 8015ac8:	e00a      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015aca:	2306      	movs	r3, #6
 8015acc:	617b      	str	r3, [r7, #20]
 8015ace:	e007      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8015ad0:	79fb      	ldrb	r3, [r7, #7]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d102      	bne.n	8015adc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8015ad6:	2309      	movs	r3, #9
 8015ad8:	617b      	str	r3, [r7, #20]
 8015ada:	e001      	b.n	8015ae0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015adc:	2309      	movs	r3, #9
 8015ade:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	68da      	ldr	r2, [r3, #12]
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	029b      	lsls	r3, r3, #10
 8015af4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8015af8:	431a      	orrs	r2, r3
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015afe:	2300      	movs	r3, #0
}
 8015b00:	4618      	mov	r0, r3
 8015b02:	371c      	adds	r7, #28
 8015b04:	46bd      	mov	sp, r7
 8015b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0a:	4770      	bx	lr
 8015b0c:	00d8acbf 	.word	0x00d8acbf
 8015b10:	00e4e1c0 	.word	0x00e4e1c0
 8015b14:	00f42400 	.word	0x00f42400
 8015b18:	01067380 	.word	0x01067380
 8015b1c:	011a499f 	.word	0x011a499f
 8015b20:	01312cff 	.word	0x01312cff
 8015b24:	014ca43f 	.word	0x014ca43f
 8015b28:	016e3600 	.word	0x016e3600
 8015b2c:	01a6ab1f 	.word	0x01a6ab1f
 8015b30:	01e84800 	.word	0x01e84800

08015b34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015b34:	b480      	push	{r7}
 8015b36:	b083      	sub	sp, #12
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	689b      	ldr	r3, [r3, #8]
 8015b40:	f043 0201 	orr.w	r2, r3, #1
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015b48:	2300      	movs	r3, #0
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	370c      	adds	r7, #12
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b54:	4770      	bx	lr

08015b56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015b56:	b480      	push	{r7}
 8015b58:	b083      	sub	sp, #12
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	689b      	ldr	r3, [r3, #8]
 8015b62:	f023 0201 	bic.w	r2, r3, #1
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015b6a:	2300      	movs	r3, #0
}
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	370c      	adds	r7, #12
 8015b70:	46bd      	mov	sp, r7
 8015b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b76:	4770      	bx	lr

08015b78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b084      	sub	sp, #16
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	460b      	mov	r3, r1
 8015b82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8015b84:	2300      	movs	r3, #0
 8015b86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	68db      	ldr	r3, [r3, #12]
 8015b8c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8015b94:	78fb      	ldrb	r3, [r7, #3]
 8015b96:	2b01      	cmp	r3, #1
 8015b98:	d115      	bne.n	8015bc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8015ba6:	200a      	movs	r0, #10
 8015ba8:	f7ed fdce 	bl	8003748 <HAL_Delay>
      ms += 10U;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	330a      	adds	r3, #10
 8015bb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015bb2:	6878      	ldr	r0, [r7, #4]
 8015bb4:	f001 f93f 	bl	8016e36 <USB_GetMode>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	2b01      	cmp	r3, #1
 8015bbc:	d01e      	beq.n	8015bfc <USB_SetCurrentMode+0x84>
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	2bc7      	cmp	r3, #199	@ 0xc7
 8015bc2:	d9f0      	bls.n	8015ba6 <USB_SetCurrentMode+0x2e>
 8015bc4:	e01a      	b.n	8015bfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8015bc6:	78fb      	ldrb	r3, [r7, #3]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d115      	bne.n	8015bf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	68db      	ldr	r3, [r3, #12]
 8015bd0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8015bd8:	200a      	movs	r0, #10
 8015bda:	f7ed fdb5 	bl	8003748 <HAL_Delay>
      ms += 10U;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	330a      	adds	r3, #10
 8015be2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f001 f926 	bl	8016e36 <USB_GetMode>
 8015bea:	4603      	mov	r3, r0
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d005      	beq.n	8015bfc <USB_SetCurrentMode+0x84>
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	2bc7      	cmp	r3, #199	@ 0xc7
 8015bf4:	d9f0      	bls.n	8015bd8 <USB_SetCurrentMode+0x60>
 8015bf6:	e001      	b.n	8015bfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	e005      	b.n	8015c08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	2bc8      	cmp	r3, #200	@ 0xc8
 8015c00:	d101      	bne.n	8015c06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8015c02:	2301      	movs	r3, #1
 8015c04:	e000      	b.n	8015c08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015c06:	2300      	movs	r3, #0
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3710      	adds	r7, #16
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015c10:	b084      	sub	sp, #16
 8015c12:	b580      	push	{r7, lr}
 8015c14:	b086      	sub	sp, #24
 8015c16:	af00      	add	r7, sp, #0
 8015c18:	6078      	str	r0, [r7, #4]
 8015c1a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8015c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015c22:	2300      	movs	r3, #0
 8015c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	613b      	str	r3, [r7, #16]
 8015c2e:	e009      	b.n	8015c44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	3340      	adds	r3, #64	@ 0x40
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	4413      	add	r3, r2
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	3301      	adds	r3, #1
 8015c42:	613b      	str	r3, [r7, #16]
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	2b0e      	cmp	r3, #14
 8015c48:	d9f2      	bls.n	8015c30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015c4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d11c      	bne.n	8015c8c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	68fa      	ldr	r2, [r7, #12]
 8015c5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c60:	f043 0302 	orr.w	r3, r3, #2
 8015c64:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c6a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	601a      	str	r2, [r3, #0]
 8015c8a:	e005      	b.n	8015c98 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015c9e:	461a      	mov	r2, r3
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015ca4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8015ca8:	2b01      	cmp	r3, #1
 8015caa:	d10d      	bne.n	8015cc8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d104      	bne.n	8015cbe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015cb4:	2100      	movs	r1, #0
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f000 f968 	bl	8015f8c <USB_SetDevSpeed>
 8015cbc:	e008      	b.n	8015cd0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015cbe:	2101      	movs	r1, #1
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	f000 f963 	bl	8015f8c <USB_SetDevSpeed>
 8015cc6:	e003      	b.n	8015cd0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015cc8:	2103      	movs	r1, #3
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f000 f95e 	bl	8015f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015cd0:	2110      	movs	r1, #16
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f000 f8fa 	bl	8015ecc <USB_FlushTxFifo>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d001      	beq.n	8015ce2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8015cde:	2301      	movs	r3, #1
 8015ce0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f000 f924 	bl	8015f30 <USB_FlushRxFifo>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d001      	beq.n	8015cf2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d04:	461a      	mov	r2, r3
 8015d06:	2300      	movs	r3, #0
 8015d08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d10:	461a      	mov	r2, r3
 8015d12:	2300      	movs	r3, #0
 8015d14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015d16:	2300      	movs	r3, #0
 8015d18:	613b      	str	r3, [r7, #16]
 8015d1a:	e043      	b.n	8015da4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	015a      	lsls	r2, r3, #5
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	4413      	add	r3, r2
 8015d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015d32:	d118      	bne.n	8015d66 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d10a      	bne.n	8015d50 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	015a      	lsls	r2, r3, #5
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	4413      	add	r3, r2
 8015d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d46:	461a      	mov	r2, r3
 8015d48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015d4c:	6013      	str	r3, [r2, #0]
 8015d4e:	e013      	b.n	8015d78 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	015a      	lsls	r2, r3, #5
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	4413      	add	r3, r2
 8015d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d5c:	461a      	mov	r2, r3
 8015d5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8015d62:	6013      	str	r3, [r2, #0]
 8015d64:	e008      	b.n	8015d78 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	015a      	lsls	r2, r3, #5
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d72:	461a      	mov	r2, r3
 8015d74:	2300      	movs	r3, #0
 8015d76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	015a      	lsls	r2, r3, #5
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	4413      	add	r3, r2
 8015d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d84:	461a      	mov	r2, r3
 8015d86:	2300      	movs	r3, #0
 8015d88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015d8a:	693b      	ldr	r3, [r7, #16]
 8015d8c:	015a      	lsls	r2, r3, #5
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	4413      	add	r3, r2
 8015d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d96:	461a      	mov	r2, r3
 8015d98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8015d9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	3301      	adds	r3, #1
 8015da2:	613b      	str	r3, [r7, #16]
 8015da4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015da8:	461a      	mov	r2, r3
 8015daa:	693b      	ldr	r3, [r7, #16]
 8015dac:	4293      	cmp	r3, r2
 8015dae:	d3b5      	bcc.n	8015d1c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015db0:	2300      	movs	r3, #0
 8015db2:	613b      	str	r3, [r7, #16]
 8015db4:	e043      	b.n	8015e3e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	015a      	lsls	r2, r3, #5
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	4413      	add	r3, r2
 8015dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015dcc:	d118      	bne.n	8015e00 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d10a      	bne.n	8015dea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	015a      	lsls	r2, r3, #5
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	4413      	add	r3, r2
 8015ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015de0:	461a      	mov	r2, r3
 8015de2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8015de6:	6013      	str	r3, [r2, #0]
 8015de8:	e013      	b.n	8015e12 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	015a      	lsls	r2, r3, #5
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	4413      	add	r3, r2
 8015df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015df6:	461a      	mov	r2, r3
 8015df8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8015dfc:	6013      	str	r3, [r2, #0]
 8015dfe:	e008      	b.n	8015e12 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	015a      	lsls	r2, r3, #5
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	4413      	add	r3, r2
 8015e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	2300      	movs	r3, #0
 8015e10:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	015a      	lsls	r2, r3, #5
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	4413      	add	r3, r2
 8015e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e1e:	461a      	mov	r2, r3
 8015e20:	2300      	movs	r3, #0
 8015e22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	015a      	lsls	r2, r3, #5
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	4413      	add	r3, r2
 8015e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e30:	461a      	mov	r2, r3
 8015e32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8015e36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	613b      	str	r3, [r7, #16]
 8015e3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015e42:	461a      	mov	r2, r3
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	4293      	cmp	r3, r2
 8015e48:	d3b5      	bcc.n	8015db6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015e50:	691b      	ldr	r3, [r3, #16]
 8015e52:	68fa      	ldr	r2, [r7, #12]
 8015e54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8015e5c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	2200      	movs	r2, #0
 8015e62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8015e6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d105      	bne.n	8015e80 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	699b      	ldr	r3, [r3, #24]
 8015e78:	f043 0210 	orr.w	r2, r3, #16
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	699a      	ldr	r2, [r3, #24]
 8015e84:	4b0f      	ldr	r3, [pc, #60]	@ (8015ec4 <USB_DevInit+0x2b4>)
 8015e86:	4313      	orrs	r3, r2
 8015e88:	687a      	ldr	r2, [r7, #4]
 8015e8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015e8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d005      	beq.n	8015ea0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	699b      	ldr	r3, [r3, #24]
 8015e98:	f043 0208 	orr.w	r2, r3, #8
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015ea0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8015ea4:	2b01      	cmp	r3, #1
 8015ea6:	d105      	bne.n	8015eb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	699a      	ldr	r2, [r3, #24]
 8015eac:	4b06      	ldr	r3, [pc, #24]	@ (8015ec8 <USB_DevInit+0x2b8>)
 8015eae:	4313      	orrs	r3, r2
 8015eb0:	687a      	ldr	r2, [r7, #4]
 8015eb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3718      	adds	r7, #24
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015ec0:	b004      	add	sp, #16
 8015ec2:	4770      	bx	lr
 8015ec4:	803c3800 	.word	0x803c3800
 8015ec8:	40000004 	.word	0x40000004

08015ecc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b085      	sub	sp, #20
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	3301      	adds	r3, #1
 8015ede:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015ee6:	d901      	bls.n	8015eec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8015ee8:	2303      	movs	r3, #3
 8015eea:	e01b      	b.n	8015f24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	691b      	ldr	r3, [r3, #16]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	daf2      	bge.n	8015eda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	019b      	lsls	r3, r3, #6
 8015efc:	f043 0220 	orr.w	r2, r3, #32
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	3301      	adds	r3, #1
 8015f08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015f10:	d901      	bls.n	8015f16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8015f12:	2303      	movs	r3, #3
 8015f14:	e006      	b.n	8015f24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	691b      	ldr	r3, [r3, #16]
 8015f1a:	f003 0320 	and.w	r3, r3, #32
 8015f1e:	2b20      	cmp	r3, #32
 8015f20:	d0f0      	beq.n	8015f04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8015f22:	2300      	movs	r3, #0
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	3714      	adds	r7, #20
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2e:	4770      	bx	lr

08015f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015f30:	b480      	push	{r7}
 8015f32:	b085      	sub	sp, #20
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	3301      	adds	r3, #1
 8015f40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015f48:	d901      	bls.n	8015f4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015f4a:	2303      	movs	r3, #3
 8015f4c:	e018      	b.n	8015f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	691b      	ldr	r3, [r3, #16]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	daf2      	bge.n	8015f3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8015f56:	2300      	movs	r3, #0
 8015f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	2210      	movs	r2, #16
 8015f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	3301      	adds	r3, #1
 8015f64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015f6c:	d901      	bls.n	8015f72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8015f6e:	2303      	movs	r3, #3
 8015f70:	e006      	b.n	8015f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	691b      	ldr	r3, [r3, #16]
 8015f76:	f003 0310 	and.w	r3, r3, #16
 8015f7a:	2b10      	cmp	r3, #16
 8015f7c:	d0f0      	beq.n	8015f60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8015f7e:	2300      	movs	r3, #0
}
 8015f80:	4618      	mov	r0, r3
 8015f82:	3714      	adds	r7, #20
 8015f84:	46bd      	mov	sp, r7
 8015f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8a:	4770      	bx	lr

08015f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b085      	sub	sp, #20
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	460b      	mov	r3, r1
 8015f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	78fb      	ldrb	r3, [r7, #3]
 8015fa6:	68f9      	ldr	r1, [r7, #12]
 8015fa8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015fac:	4313      	orrs	r3, r2
 8015fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8015fb0:	2300      	movs	r3, #0
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3714      	adds	r7, #20
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbc:	4770      	bx	lr

08015fbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8015fbe:	b480      	push	{r7}
 8015fc0:	b087      	sub	sp, #28
 8015fc2:	af00      	add	r7, sp, #0
 8015fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015fd0:	689b      	ldr	r3, [r3, #8]
 8015fd2:	f003 0306 	and.w	r3, r3, #6
 8015fd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d102      	bne.n	8015fe4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	75fb      	strb	r3, [r7, #23]
 8015fe2:	e00a      	b.n	8015ffa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	2b02      	cmp	r3, #2
 8015fe8:	d002      	beq.n	8015ff0 <USB_GetDevSpeed+0x32>
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	2b06      	cmp	r3, #6
 8015fee:	d102      	bne.n	8015ff6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015ff0:	2302      	movs	r3, #2
 8015ff2:	75fb      	strb	r3, [r7, #23]
 8015ff4:	e001      	b.n	8015ffa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8015ff6:	230f      	movs	r3, #15
 8015ff8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8015ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	371c      	adds	r7, #28
 8016000:	46bd      	mov	sp, r7
 8016002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016006:	4770      	bx	lr

08016008 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016008:	b480      	push	{r7}
 801600a:	b085      	sub	sp, #20
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	785b      	ldrb	r3, [r3, #1]
 8016020:	2b01      	cmp	r3, #1
 8016022:	d139      	bne.n	8016098 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801602a:	69da      	ldr	r2, [r3, #28]
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	f003 030f 	and.w	r3, r3, #15
 8016034:	2101      	movs	r1, #1
 8016036:	fa01 f303 	lsl.w	r3, r1, r3
 801603a:	b29b      	uxth	r3, r3
 801603c:	68f9      	ldr	r1, [r7, #12]
 801603e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016042:	4313      	orrs	r3, r2
 8016044:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	015a      	lsls	r2, r3, #5
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	4413      	add	r3, r2
 801604e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016058:	2b00      	cmp	r3, #0
 801605a:	d153      	bne.n	8016104 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	015a      	lsls	r2, r3, #5
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	4413      	add	r3, r2
 8016064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016068:	681a      	ldr	r2, [r3, #0]
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	689b      	ldr	r3, [r3, #8]
 801606e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016072:	683b      	ldr	r3, [r7, #0]
 8016074:	791b      	ldrb	r3, [r3, #4]
 8016076:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016078:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	059b      	lsls	r3, r3, #22
 801607e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016080:	431a      	orrs	r2, r3
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	0159      	lsls	r1, r3, #5
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	440b      	add	r3, r1
 801608a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801608e:	4619      	mov	r1, r3
 8016090:	4b20      	ldr	r3, [pc, #128]	@ (8016114 <USB_ActivateEndpoint+0x10c>)
 8016092:	4313      	orrs	r3, r2
 8016094:	600b      	str	r3, [r1, #0]
 8016096:	e035      	b.n	8016104 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801609e:	69da      	ldr	r2, [r3, #28]
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	f003 030f 	and.w	r3, r3, #15
 80160a8:	2101      	movs	r1, #1
 80160aa:	fa01 f303 	lsl.w	r3, r1, r3
 80160ae:	041b      	lsls	r3, r3, #16
 80160b0:	68f9      	ldr	r1, [r7, #12]
 80160b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80160b6:	4313      	orrs	r3, r2
 80160b8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	015a      	lsls	r2, r3, #5
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	4413      	add	r3, r2
 80160c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d119      	bne.n	8016104 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	015a      	lsls	r2, r3, #5
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	4413      	add	r3, r2
 80160d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160dc:	681a      	ldr	r2, [r3, #0]
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	689b      	ldr	r3, [r3, #8]
 80160e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	791b      	ldrb	r3, [r3, #4]
 80160ea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80160ec:	430b      	orrs	r3, r1
 80160ee:	431a      	orrs	r2, r3
 80160f0:	68bb      	ldr	r3, [r7, #8]
 80160f2:	0159      	lsls	r1, r3, #5
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	440b      	add	r3, r1
 80160f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160fc:	4619      	mov	r1, r3
 80160fe:	4b05      	ldr	r3, [pc, #20]	@ (8016114 <USB_ActivateEndpoint+0x10c>)
 8016100:	4313      	orrs	r3, r2
 8016102:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8016104:	2300      	movs	r3, #0
}
 8016106:	4618      	mov	r0, r3
 8016108:	3714      	adds	r7, #20
 801610a:	46bd      	mov	sp, r7
 801610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016110:	4770      	bx	lr
 8016112:	bf00      	nop
 8016114:	10008000 	.word	0x10008000

08016118 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016118:	b480      	push	{r7}
 801611a:	b085      	sub	sp, #20
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	781b      	ldrb	r3, [r3, #0]
 801612a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801612c:	683b      	ldr	r3, [r7, #0]
 801612e:	785b      	ldrb	r3, [r3, #1]
 8016130:	2b01      	cmp	r3, #1
 8016132:	d161      	bne.n	80161f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	015a      	lsls	r2, r3, #5
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	4413      	add	r3, r2
 801613c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016146:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801614a:	d11f      	bne.n	801618c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	015a      	lsls	r2, r3, #5
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	4413      	add	r3, r2
 8016154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	68ba      	ldr	r2, [r7, #8]
 801615c:	0151      	lsls	r1, r2, #5
 801615e:	68fa      	ldr	r2, [r7, #12]
 8016160:	440a      	add	r2, r1
 8016162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016166:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801616a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	015a      	lsls	r2, r3, #5
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	4413      	add	r3, r2
 8016174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	68ba      	ldr	r2, [r7, #8]
 801617c:	0151      	lsls	r1, r2, #5
 801617e:	68fa      	ldr	r2, [r7, #12]
 8016180:	440a      	add	r2, r1
 8016182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016186:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801618a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	781b      	ldrb	r3, [r3, #0]
 8016198:	f003 030f 	and.w	r3, r3, #15
 801619c:	2101      	movs	r1, #1
 801619e:	fa01 f303 	lsl.w	r3, r1, r3
 80161a2:	b29b      	uxth	r3, r3
 80161a4:	43db      	mvns	r3, r3
 80161a6:	68f9      	ldr	r1, [r7, #12]
 80161a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80161ac:	4013      	ands	r3, r2
 80161ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80161b6:	69da      	ldr	r2, [r3, #28]
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	f003 030f 	and.w	r3, r3, #15
 80161c0:	2101      	movs	r1, #1
 80161c2:	fa01 f303 	lsl.w	r3, r1, r3
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	43db      	mvns	r3, r3
 80161ca:	68f9      	ldr	r1, [r7, #12]
 80161cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80161d0:	4013      	ands	r3, r2
 80161d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	015a      	lsls	r2, r3, #5
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	4413      	add	r3, r2
 80161dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80161e0:	681a      	ldr	r2, [r3, #0]
 80161e2:	68bb      	ldr	r3, [r7, #8]
 80161e4:	0159      	lsls	r1, r3, #5
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	440b      	add	r3, r1
 80161ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80161ee:	4619      	mov	r1, r3
 80161f0:	4b35      	ldr	r3, [pc, #212]	@ (80162c8 <USB_DeactivateEndpoint+0x1b0>)
 80161f2:	4013      	ands	r3, r2
 80161f4:	600b      	str	r3, [r1, #0]
 80161f6:	e060      	b.n	80162ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	015a      	lsls	r2, r3, #5
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	4413      	add	r3, r2
 8016200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801620a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801620e:	d11f      	bne.n	8016250 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	015a      	lsls	r2, r3, #5
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	4413      	add	r3, r2
 8016218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	68ba      	ldr	r2, [r7, #8]
 8016220:	0151      	lsls	r1, r2, #5
 8016222:	68fa      	ldr	r2, [r7, #12]
 8016224:	440a      	add	r2, r1
 8016226:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801622a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801622e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	015a      	lsls	r2, r3, #5
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	4413      	add	r3, r2
 8016238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	68ba      	ldr	r2, [r7, #8]
 8016240:	0151      	lsls	r1, r2, #5
 8016242:	68fa      	ldr	r2, [r7, #12]
 8016244:	440a      	add	r2, r1
 8016246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801624a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801624e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016258:	683b      	ldr	r3, [r7, #0]
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	f003 030f 	and.w	r3, r3, #15
 8016260:	2101      	movs	r1, #1
 8016262:	fa01 f303 	lsl.w	r3, r1, r3
 8016266:	041b      	lsls	r3, r3, #16
 8016268:	43db      	mvns	r3, r3
 801626a:	68f9      	ldr	r1, [r7, #12]
 801626c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016270:	4013      	ands	r3, r2
 8016272:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801627a:	69da      	ldr	r2, [r3, #28]
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	f003 030f 	and.w	r3, r3, #15
 8016284:	2101      	movs	r1, #1
 8016286:	fa01 f303 	lsl.w	r3, r1, r3
 801628a:	041b      	lsls	r3, r3, #16
 801628c:	43db      	mvns	r3, r3
 801628e:	68f9      	ldr	r1, [r7, #12]
 8016290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016294:	4013      	ands	r3, r2
 8016296:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	015a      	lsls	r2, r3, #5
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	4413      	add	r3, r2
 80162a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80162a4:	681a      	ldr	r2, [r3, #0]
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	0159      	lsls	r1, r3, #5
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	440b      	add	r3, r1
 80162ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80162b2:	4619      	mov	r1, r3
 80162b4:	4b05      	ldr	r3, [pc, #20]	@ (80162cc <USB_DeactivateEndpoint+0x1b4>)
 80162b6:	4013      	ands	r3, r2
 80162b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80162ba:	2300      	movs	r3, #0
}
 80162bc:	4618      	mov	r0, r3
 80162be:	3714      	adds	r7, #20
 80162c0:	46bd      	mov	sp, r7
 80162c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c6:	4770      	bx	lr
 80162c8:	ec337800 	.word	0xec337800
 80162cc:	eff37800 	.word	0xeff37800

080162d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b08a      	sub	sp, #40	@ 0x28
 80162d4:	af02      	add	r7, sp, #8
 80162d6:	60f8      	str	r0, [r7, #12]
 80162d8:	60b9      	str	r1, [r7, #8]
 80162da:	4613      	mov	r3, r2
 80162dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	781b      	ldrb	r3, [r3, #0]
 80162e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	785b      	ldrb	r3, [r3, #1]
 80162ec:	2b01      	cmp	r3, #1
 80162ee:	f040 8185 	bne.w	80165fc <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80162f2:	68bb      	ldr	r3, [r7, #8]
 80162f4:	691b      	ldr	r3, [r3, #16]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d132      	bne.n	8016360 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80162fa:	69bb      	ldr	r3, [r7, #24]
 80162fc:	015a      	lsls	r2, r3, #5
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	4413      	add	r3, r2
 8016302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016306:	691a      	ldr	r2, [r3, #16]
 8016308:	69bb      	ldr	r3, [r7, #24]
 801630a:	0159      	lsls	r1, r3, #5
 801630c:	69fb      	ldr	r3, [r7, #28]
 801630e:	440b      	add	r3, r1
 8016310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016314:	4619      	mov	r1, r3
 8016316:	4ba7      	ldr	r3, [pc, #668]	@ (80165b4 <USB_EPStartXfer+0x2e4>)
 8016318:	4013      	ands	r3, r2
 801631a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801631c:	69bb      	ldr	r3, [r7, #24]
 801631e:	015a      	lsls	r2, r3, #5
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	4413      	add	r3, r2
 8016324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016328:	691b      	ldr	r3, [r3, #16]
 801632a:	69ba      	ldr	r2, [r7, #24]
 801632c:	0151      	lsls	r1, r2, #5
 801632e:	69fa      	ldr	r2, [r7, #28]
 8016330:	440a      	add	r2, r1
 8016332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016336:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801633a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	015a      	lsls	r2, r3, #5
 8016340:	69fb      	ldr	r3, [r7, #28]
 8016342:	4413      	add	r3, r2
 8016344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016348:	691a      	ldr	r2, [r3, #16]
 801634a:	69bb      	ldr	r3, [r7, #24]
 801634c:	0159      	lsls	r1, r3, #5
 801634e:	69fb      	ldr	r3, [r7, #28]
 8016350:	440b      	add	r3, r1
 8016352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016356:	4619      	mov	r1, r3
 8016358:	4b97      	ldr	r3, [pc, #604]	@ (80165b8 <USB_EPStartXfer+0x2e8>)
 801635a:	4013      	ands	r3, r2
 801635c:	610b      	str	r3, [r1, #16]
 801635e:	e097      	b.n	8016490 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016360:	69bb      	ldr	r3, [r7, #24]
 8016362:	015a      	lsls	r2, r3, #5
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	4413      	add	r3, r2
 8016368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801636c:	691a      	ldr	r2, [r3, #16]
 801636e:	69bb      	ldr	r3, [r7, #24]
 8016370:	0159      	lsls	r1, r3, #5
 8016372:	69fb      	ldr	r3, [r7, #28]
 8016374:	440b      	add	r3, r1
 8016376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801637a:	4619      	mov	r1, r3
 801637c:	4b8e      	ldr	r3, [pc, #568]	@ (80165b8 <USB_EPStartXfer+0x2e8>)
 801637e:	4013      	ands	r3, r2
 8016380:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016382:	69bb      	ldr	r3, [r7, #24]
 8016384:	015a      	lsls	r2, r3, #5
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	4413      	add	r3, r2
 801638a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801638e:	691a      	ldr	r2, [r3, #16]
 8016390:	69bb      	ldr	r3, [r7, #24]
 8016392:	0159      	lsls	r1, r3, #5
 8016394:	69fb      	ldr	r3, [r7, #28]
 8016396:	440b      	add	r3, r1
 8016398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801639c:	4619      	mov	r1, r3
 801639e:	4b85      	ldr	r3, [pc, #532]	@ (80165b4 <USB_EPStartXfer+0x2e4>)
 80163a0:	4013      	ands	r3, r2
 80163a2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80163a4:	69bb      	ldr	r3, [r7, #24]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d11a      	bne.n	80163e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	691a      	ldr	r2, [r3, #16]
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	689b      	ldr	r3, [r3, #8]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d903      	bls.n	80163be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	689a      	ldr	r2, [r3, #8]
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80163be:	69bb      	ldr	r3, [r7, #24]
 80163c0:	015a      	lsls	r2, r3, #5
 80163c2:	69fb      	ldr	r3, [r7, #28]
 80163c4:	4413      	add	r3, r2
 80163c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80163ca:	691b      	ldr	r3, [r3, #16]
 80163cc:	69ba      	ldr	r2, [r7, #24]
 80163ce:	0151      	lsls	r1, r2, #5
 80163d0:	69fa      	ldr	r2, [r7, #28]
 80163d2:	440a      	add	r2, r1
 80163d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80163d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80163dc:	6113      	str	r3, [r2, #16]
 80163de:	e044      	b.n	801646a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	691a      	ldr	r2, [r3, #16]
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	689b      	ldr	r3, [r3, #8]
 80163e8:	4413      	add	r3, r2
 80163ea:	1e5a      	subs	r2, r3, #1
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	689b      	ldr	r3, [r3, #8]
 80163f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80163f4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80163f6:	69bb      	ldr	r3, [r7, #24]
 80163f8:	015a      	lsls	r2, r3, #5
 80163fa:	69fb      	ldr	r3, [r7, #28]
 80163fc:	4413      	add	r3, r2
 80163fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016402:	691a      	ldr	r2, [r3, #16]
 8016404:	8afb      	ldrh	r3, [r7, #22]
 8016406:	04d9      	lsls	r1, r3, #19
 8016408:	4b6c      	ldr	r3, [pc, #432]	@ (80165bc <USB_EPStartXfer+0x2ec>)
 801640a:	400b      	ands	r3, r1
 801640c:	69b9      	ldr	r1, [r7, #24]
 801640e:	0148      	lsls	r0, r1, #5
 8016410:	69f9      	ldr	r1, [r7, #28]
 8016412:	4401      	add	r1, r0
 8016414:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016418:	4313      	orrs	r3, r2
 801641a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	791b      	ldrb	r3, [r3, #4]
 8016420:	2b01      	cmp	r3, #1
 8016422:	d122      	bne.n	801646a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016424:	69bb      	ldr	r3, [r7, #24]
 8016426:	015a      	lsls	r2, r3, #5
 8016428:	69fb      	ldr	r3, [r7, #28]
 801642a:	4413      	add	r3, r2
 801642c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016430:	691b      	ldr	r3, [r3, #16]
 8016432:	69ba      	ldr	r2, [r7, #24]
 8016434:	0151      	lsls	r1, r2, #5
 8016436:	69fa      	ldr	r2, [r7, #28]
 8016438:	440a      	add	r2, r1
 801643a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801643e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8016442:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8016444:	69bb      	ldr	r3, [r7, #24]
 8016446:	015a      	lsls	r2, r3, #5
 8016448:	69fb      	ldr	r3, [r7, #28]
 801644a:	4413      	add	r3, r2
 801644c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016450:	691a      	ldr	r2, [r3, #16]
 8016452:	8afb      	ldrh	r3, [r7, #22]
 8016454:	075b      	lsls	r3, r3, #29
 8016456:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801645a:	69b9      	ldr	r1, [r7, #24]
 801645c:	0148      	lsls	r0, r1, #5
 801645e:	69f9      	ldr	r1, [r7, #28]
 8016460:	4401      	add	r1, r0
 8016462:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016466:	4313      	orrs	r3, r2
 8016468:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801646a:	69bb      	ldr	r3, [r7, #24]
 801646c:	015a      	lsls	r2, r3, #5
 801646e:	69fb      	ldr	r3, [r7, #28]
 8016470:	4413      	add	r3, r2
 8016472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016476:	691a      	ldr	r2, [r3, #16]
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	691b      	ldr	r3, [r3, #16]
 801647c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016480:	69b9      	ldr	r1, [r7, #24]
 8016482:	0148      	lsls	r0, r1, #5
 8016484:	69f9      	ldr	r1, [r7, #28]
 8016486:	4401      	add	r1, r0
 8016488:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801648c:	4313      	orrs	r3, r2
 801648e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016490:	79fb      	ldrb	r3, [r7, #7]
 8016492:	2b01      	cmp	r3, #1
 8016494:	d14b      	bne.n	801652e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	69db      	ldr	r3, [r3, #28]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d009      	beq.n	80164b2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801649e:	69bb      	ldr	r3, [r7, #24]
 80164a0:	015a      	lsls	r2, r3, #5
 80164a2:	69fb      	ldr	r3, [r7, #28]
 80164a4:	4413      	add	r3, r2
 80164a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164aa:	461a      	mov	r2, r3
 80164ac:	68bb      	ldr	r3, [r7, #8]
 80164ae:	69db      	ldr	r3, [r3, #28]
 80164b0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	791b      	ldrb	r3, [r3, #4]
 80164b6:	2b01      	cmp	r3, #1
 80164b8:	d128      	bne.n	801650c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80164ba:	69fb      	ldr	r3, [r7, #28]
 80164bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164c0:	689b      	ldr	r3, [r3, #8]
 80164c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d110      	bne.n	80164ec <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80164ca:	69bb      	ldr	r3, [r7, #24]
 80164cc:	015a      	lsls	r2, r3, #5
 80164ce:	69fb      	ldr	r3, [r7, #28]
 80164d0:	4413      	add	r3, r2
 80164d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	69ba      	ldr	r2, [r7, #24]
 80164da:	0151      	lsls	r1, r2, #5
 80164dc:	69fa      	ldr	r2, [r7, #28]
 80164de:	440a      	add	r2, r1
 80164e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80164e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80164e8:	6013      	str	r3, [r2, #0]
 80164ea:	e00f      	b.n	801650c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80164ec:	69bb      	ldr	r3, [r7, #24]
 80164ee:	015a      	lsls	r2, r3, #5
 80164f0:	69fb      	ldr	r3, [r7, #28]
 80164f2:	4413      	add	r3, r2
 80164f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	69ba      	ldr	r2, [r7, #24]
 80164fc:	0151      	lsls	r1, r2, #5
 80164fe:	69fa      	ldr	r2, [r7, #28]
 8016500:	440a      	add	r2, r1
 8016502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801650a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801650c:	69bb      	ldr	r3, [r7, #24]
 801650e:	015a      	lsls	r2, r3, #5
 8016510:	69fb      	ldr	r3, [r7, #28]
 8016512:	4413      	add	r3, r2
 8016514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	69ba      	ldr	r2, [r7, #24]
 801651c:	0151      	lsls	r1, r2, #5
 801651e:	69fa      	ldr	r2, [r7, #28]
 8016520:	440a      	add	r2, r1
 8016522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016526:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801652a:	6013      	str	r3, [r2, #0]
 801652c:	e169      	b.n	8016802 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801652e:	69bb      	ldr	r3, [r7, #24]
 8016530:	015a      	lsls	r2, r3, #5
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	4413      	add	r3, r2
 8016536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	69ba      	ldr	r2, [r7, #24]
 801653e:	0151      	lsls	r1, r2, #5
 8016540:	69fa      	ldr	r2, [r7, #28]
 8016542:	440a      	add	r2, r1
 8016544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016548:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801654c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	791b      	ldrb	r3, [r3, #4]
 8016552:	2b01      	cmp	r3, #1
 8016554:	d015      	beq.n	8016582 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8016556:	68bb      	ldr	r3, [r7, #8]
 8016558:	691b      	ldr	r3, [r3, #16]
 801655a:	2b00      	cmp	r3, #0
 801655c:	f000 8151 	beq.w	8016802 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	781b      	ldrb	r3, [r3, #0]
 801656c:	f003 030f 	and.w	r3, r3, #15
 8016570:	2101      	movs	r1, #1
 8016572:	fa01 f303 	lsl.w	r3, r1, r3
 8016576:	69f9      	ldr	r1, [r7, #28]
 8016578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801657c:	4313      	orrs	r3, r2
 801657e:	634b      	str	r3, [r1, #52]	@ 0x34
 8016580:	e13f      	b.n	8016802 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016582:	69fb      	ldr	r3, [r7, #28]
 8016584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016588:	689b      	ldr	r3, [r3, #8]
 801658a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801658e:	2b00      	cmp	r3, #0
 8016590:	d116      	bne.n	80165c0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016592:	69bb      	ldr	r3, [r7, #24]
 8016594:	015a      	lsls	r2, r3, #5
 8016596:	69fb      	ldr	r3, [r7, #28]
 8016598:	4413      	add	r3, r2
 801659a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	69ba      	ldr	r2, [r7, #24]
 80165a2:	0151      	lsls	r1, r2, #5
 80165a4:	69fa      	ldr	r2, [r7, #28]
 80165a6:	440a      	add	r2, r1
 80165a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80165ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80165b0:	6013      	str	r3, [r2, #0]
 80165b2:	e015      	b.n	80165e0 <USB_EPStartXfer+0x310>
 80165b4:	e007ffff 	.word	0xe007ffff
 80165b8:	fff80000 	.word	0xfff80000
 80165bc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	015a      	lsls	r2, r3, #5
 80165c4:	69fb      	ldr	r3, [r7, #28]
 80165c6:	4413      	add	r3, r2
 80165c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	69ba      	ldr	r2, [r7, #24]
 80165d0:	0151      	lsls	r1, r2, #5
 80165d2:	69fa      	ldr	r2, [r7, #28]
 80165d4:	440a      	add	r2, r1
 80165d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80165da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80165de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	68d9      	ldr	r1, [r3, #12]
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	781a      	ldrb	r2, [r3, #0]
 80165e8:	68bb      	ldr	r3, [r7, #8]
 80165ea:	691b      	ldr	r3, [r3, #16]
 80165ec:	b298      	uxth	r0, r3
 80165ee:	79fb      	ldrb	r3, [r7, #7]
 80165f0:	9300      	str	r3, [sp, #0]
 80165f2:	4603      	mov	r3, r0
 80165f4:	68f8      	ldr	r0, [r7, #12]
 80165f6:	f000 f9b9 	bl	801696c <USB_WritePacket>
 80165fa:	e102      	b.n	8016802 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80165fc:	69bb      	ldr	r3, [r7, #24]
 80165fe:	015a      	lsls	r2, r3, #5
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	4413      	add	r3, r2
 8016604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016608:	691a      	ldr	r2, [r3, #16]
 801660a:	69bb      	ldr	r3, [r7, #24]
 801660c:	0159      	lsls	r1, r3, #5
 801660e:	69fb      	ldr	r3, [r7, #28]
 8016610:	440b      	add	r3, r1
 8016612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016616:	4619      	mov	r1, r3
 8016618:	4b7c      	ldr	r3, [pc, #496]	@ (801680c <USB_EPStartXfer+0x53c>)
 801661a:	4013      	ands	r3, r2
 801661c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801661e:	69bb      	ldr	r3, [r7, #24]
 8016620:	015a      	lsls	r2, r3, #5
 8016622:	69fb      	ldr	r3, [r7, #28]
 8016624:	4413      	add	r3, r2
 8016626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801662a:	691a      	ldr	r2, [r3, #16]
 801662c:	69bb      	ldr	r3, [r7, #24]
 801662e:	0159      	lsls	r1, r3, #5
 8016630:	69fb      	ldr	r3, [r7, #28]
 8016632:	440b      	add	r3, r1
 8016634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016638:	4619      	mov	r1, r3
 801663a:	4b75      	ldr	r3, [pc, #468]	@ (8016810 <USB_EPStartXfer+0x540>)
 801663c:	4013      	ands	r3, r2
 801663e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8016640:	69bb      	ldr	r3, [r7, #24]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d12f      	bne.n	80166a6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	691b      	ldr	r3, [r3, #16]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d003      	beq.n	8016656 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801664e:	68bb      	ldr	r3, [r7, #8]
 8016650:	689a      	ldr	r2, [r3, #8]
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	689a      	ldr	r2, [r3, #8]
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801665e:	69bb      	ldr	r3, [r7, #24]
 8016660:	015a      	lsls	r2, r3, #5
 8016662:	69fb      	ldr	r3, [r7, #28]
 8016664:	4413      	add	r3, r2
 8016666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801666a:	691a      	ldr	r2, [r3, #16]
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	6a1b      	ldr	r3, [r3, #32]
 8016670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016674:	69b9      	ldr	r1, [r7, #24]
 8016676:	0148      	lsls	r0, r1, #5
 8016678:	69f9      	ldr	r1, [r7, #28]
 801667a:	4401      	add	r1, r0
 801667c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016680:	4313      	orrs	r3, r2
 8016682:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016684:	69bb      	ldr	r3, [r7, #24]
 8016686:	015a      	lsls	r2, r3, #5
 8016688:	69fb      	ldr	r3, [r7, #28]
 801668a:	4413      	add	r3, r2
 801668c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016690:	691b      	ldr	r3, [r3, #16]
 8016692:	69ba      	ldr	r2, [r7, #24]
 8016694:	0151      	lsls	r1, r2, #5
 8016696:	69fa      	ldr	r2, [r7, #28]
 8016698:	440a      	add	r2, r1
 801669a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801669e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80166a2:	6113      	str	r3, [r2, #16]
 80166a4:	e05f      	b.n	8016766 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	691b      	ldr	r3, [r3, #16]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d123      	bne.n	80166f6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80166ae:	69bb      	ldr	r3, [r7, #24]
 80166b0:	015a      	lsls	r2, r3, #5
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	4413      	add	r3, r2
 80166b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80166ba:	691a      	ldr	r2, [r3, #16]
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	689b      	ldr	r3, [r3, #8]
 80166c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80166c4:	69b9      	ldr	r1, [r7, #24]
 80166c6:	0148      	lsls	r0, r1, #5
 80166c8:	69f9      	ldr	r1, [r7, #28]
 80166ca:	4401      	add	r1, r0
 80166cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80166d0:	4313      	orrs	r3, r2
 80166d2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80166d4:	69bb      	ldr	r3, [r7, #24]
 80166d6:	015a      	lsls	r2, r3, #5
 80166d8:	69fb      	ldr	r3, [r7, #28]
 80166da:	4413      	add	r3, r2
 80166dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80166e0:	691b      	ldr	r3, [r3, #16]
 80166e2:	69ba      	ldr	r2, [r7, #24]
 80166e4:	0151      	lsls	r1, r2, #5
 80166e6:	69fa      	ldr	r2, [r7, #28]
 80166e8:	440a      	add	r2, r1
 80166ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80166ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80166f2:	6113      	str	r3, [r2, #16]
 80166f4:	e037      	b.n	8016766 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80166f6:	68bb      	ldr	r3, [r7, #8]
 80166f8:	691a      	ldr	r2, [r3, #16]
 80166fa:	68bb      	ldr	r3, [r7, #8]
 80166fc:	689b      	ldr	r3, [r3, #8]
 80166fe:	4413      	add	r3, r2
 8016700:	1e5a      	subs	r2, r3, #1
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	689b      	ldr	r3, [r3, #8]
 8016706:	fbb2 f3f3 	udiv	r3, r2, r3
 801670a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	689b      	ldr	r3, [r3, #8]
 8016710:	8afa      	ldrh	r2, [r7, #22]
 8016712:	fb03 f202 	mul.w	r2, r3, r2
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801671a:	69bb      	ldr	r3, [r7, #24]
 801671c:	015a      	lsls	r2, r3, #5
 801671e:	69fb      	ldr	r3, [r7, #28]
 8016720:	4413      	add	r3, r2
 8016722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016726:	691a      	ldr	r2, [r3, #16]
 8016728:	8afb      	ldrh	r3, [r7, #22]
 801672a:	04d9      	lsls	r1, r3, #19
 801672c:	4b39      	ldr	r3, [pc, #228]	@ (8016814 <USB_EPStartXfer+0x544>)
 801672e:	400b      	ands	r3, r1
 8016730:	69b9      	ldr	r1, [r7, #24]
 8016732:	0148      	lsls	r0, r1, #5
 8016734:	69f9      	ldr	r1, [r7, #28]
 8016736:	4401      	add	r1, r0
 8016738:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801673c:	4313      	orrs	r3, r2
 801673e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8016740:	69bb      	ldr	r3, [r7, #24]
 8016742:	015a      	lsls	r2, r3, #5
 8016744:	69fb      	ldr	r3, [r7, #28]
 8016746:	4413      	add	r3, r2
 8016748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801674c:	691a      	ldr	r2, [r3, #16]
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	6a1b      	ldr	r3, [r3, #32]
 8016752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016756:	69b9      	ldr	r1, [r7, #24]
 8016758:	0148      	lsls	r0, r1, #5
 801675a:	69f9      	ldr	r1, [r7, #28]
 801675c:	4401      	add	r1, r0
 801675e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016762:	4313      	orrs	r3, r2
 8016764:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8016766:	79fb      	ldrb	r3, [r7, #7]
 8016768:	2b01      	cmp	r3, #1
 801676a:	d10d      	bne.n	8016788 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d009      	beq.n	8016788 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	68d9      	ldr	r1, [r3, #12]
 8016778:	69bb      	ldr	r3, [r7, #24]
 801677a:	015a      	lsls	r2, r3, #5
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	4413      	add	r3, r2
 8016780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016784:	460a      	mov	r2, r1
 8016786:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8016788:	68bb      	ldr	r3, [r7, #8]
 801678a:	791b      	ldrb	r3, [r3, #4]
 801678c:	2b01      	cmp	r3, #1
 801678e:	d128      	bne.n	80167e2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016790:	69fb      	ldr	r3, [r7, #28]
 8016792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016796:	689b      	ldr	r3, [r3, #8]
 8016798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801679c:	2b00      	cmp	r3, #0
 801679e:	d110      	bne.n	80167c2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80167a0:	69bb      	ldr	r3, [r7, #24]
 80167a2:	015a      	lsls	r2, r3, #5
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	4413      	add	r3, r2
 80167a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	69ba      	ldr	r2, [r7, #24]
 80167b0:	0151      	lsls	r1, r2, #5
 80167b2:	69fa      	ldr	r2, [r7, #28]
 80167b4:	440a      	add	r2, r1
 80167b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80167ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80167be:	6013      	str	r3, [r2, #0]
 80167c0:	e00f      	b.n	80167e2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80167c2:	69bb      	ldr	r3, [r7, #24]
 80167c4:	015a      	lsls	r2, r3, #5
 80167c6:	69fb      	ldr	r3, [r7, #28]
 80167c8:	4413      	add	r3, r2
 80167ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	69ba      	ldr	r2, [r7, #24]
 80167d2:	0151      	lsls	r1, r2, #5
 80167d4:	69fa      	ldr	r2, [r7, #28]
 80167d6:	440a      	add	r2, r1
 80167d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80167dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80167e0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80167e2:	69bb      	ldr	r3, [r7, #24]
 80167e4:	015a      	lsls	r2, r3, #5
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	4413      	add	r3, r2
 80167ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	69ba      	ldr	r2, [r7, #24]
 80167f2:	0151      	lsls	r1, r2, #5
 80167f4:	69fa      	ldr	r2, [r7, #28]
 80167f6:	440a      	add	r2, r1
 80167f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80167fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016800:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016802:	2300      	movs	r3, #0
}
 8016804:	4618      	mov	r0, r3
 8016806:	3720      	adds	r7, #32
 8016808:	46bd      	mov	sp, r7
 801680a:	bd80      	pop	{r7, pc}
 801680c:	fff80000 	.word	0xfff80000
 8016810:	e007ffff 	.word	0xe007ffff
 8016814:	1ff80000 	.word	0x1ff80000

08016818 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016818:	b480      	push	{r7}
 801681a:	b087      	sub	sp, #28
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
 8016820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016822:	2300      	movs	r3, #0
 8016824:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8016826:	2300      	movs	r3, #0
 8016828:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	785b      	ldrb	r3, [r3, #1]
 8016832:	2b01      	cmp	r3, #1
 8016834:	d14a      	bne.n	80168cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	015a      	lsls	r2, r3, #5
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	4413      	add	r3, r2
 8016840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801684a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801684e:	f040 8086 	bne.w	801695e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	781b      	ldrb	r3, [r3, #0]
 8016856:	015a      	lsls	r2, r3, #5
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	4413      	add	r3, r2
 801685c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	683a      	ldr	r2, [r7, #0]
 8016864:	7812      	ldrb	r2, [r2, #0]
 8016866:	0151      	lsls	r1, r2, #5
 8016868:	693a      	ldr	r2, [r7, #16]
 801686a:	440a      	add	r2, r1
 801686c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016870:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016874:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	781b      	ldrb	r3, [r3, #0]
 801687a:	015a      	lsls	r2, r3, #5
 801687c:	693b      	ldr	r3, [r7, #16]
 801687e:	4413      	add	r3, r2
 8016880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	683a      	ldr	r2, [r7, #0]
 8016888:	7812      	ldrb	r2, [r2, #0]
 801688a:	0151      	lsls	r1, r2, #5
 801688c:	693a      	ldr	r2, [r7, #16]
 801688e:	440a      	add	r2, r1
 8016890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016894:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016898:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	3301      	adds	r3, #1
 801689e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80168a6:	4293      	cmp	r3, r2
 80168a8:	d902      	bls.n	80168b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80168aa:	2301      	movs	r3, #1
 80168ac:	75fb      	strb	r3, [r7, #23]
          break;
 80168ae:	e056      	b.n	801695e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	781b      	ldrb	r3, [r3, #0]
 80168b4:	015a      	lsls	r2, r3, #5
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	4413      	add	r3, r2
 80168ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80168c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80168c8:	d0e7      	beq.n	801689a <USB_EPStopXfer+0x82>
 80168ca:	e048      	b.n	801695e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	781b      	ldrb	r3, [r3, #0]
 80168d0:	015a      	lsls	r2, r3, #5
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	4413      	add	r3, r2
 80168d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80168e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80168e4:	d13b      	bne.n	801695e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	781b      	ldrb	r3, [r3, #0]
 80168ea:	015a      	lsls	r2, r3, #5
 80168ec:	693b      	ldr	r3, [r7, #16]
 80168ee:	4413      	add	r3, r2
 80168f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	683a      	ldr	r2, [r7, #0]
 80168f8:	7812      	ldrb	r2, [r2, #0]
 80168fa:	0151      	lsls	r1, r2, #5
 80168fc:	693a      	ldr	r2, [r7, #16]
 80168fe:	440a      	add	r2, r1
 8016900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016904:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016908:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	015a      	lsls	r2, r3, #5
 8016910:	693b      	ldr	r3, [r7, #16]
 8016912:	4413      	add	r3, r2
 8016914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	683a      	ldr	r2, [r7, #0]
 801691c:	7812      	ldrb	r2, [r2, #0]
 801691e:	0151      	lsls	r1, r2, #5
 8016920:	693a      	ldr	r2, [r7, #16]
 8016922:	440a      	add	r2, r1
 8016924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016928:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801692c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	3301      	adds	r3, #1
 8016932:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	f242 7210 	movw	r2, #10000	@ 0x2710
 801693a:	4293      	cmp	r3, r2
 801693c:	d902      	bls.n	8016944 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801693e:	2301      	movs	r3, #1
 8016940:	75fb      	strb	r3, [r7, #23]
          break;
 8016942:	e00c      	b.n	801695e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8016944:	683b      	ldr	r3, [r7, #0]
 8016946:	781b      	ldrb	r3, [r3, #0]
 8016948:	015a      	lsls	r2, r3, #5
 801694a:	693b      	ldr	r3, [r7, #16]
 801694c:	4413      	add	r3, r2
 801694e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801695c:	d0e7      	beq.n	801692e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801695e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016960:	4618      	mov	r0, r3
 8016962:	371c      	adds	r7, #28
 8016964:	46bd      	mov	sp, r7
 8016966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696a:	4770      	bx	lr

0801696c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801696c:	b480      	push	{r7}
 801696e:	b089      	sub	sp, #36	@ 0x24
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	4611      	mov	r1, r2
 8016978:	461a      	mov	r2, r3
 801697a:	460b      	mov	r3, r1
 801697c:	71fb      	strb	r3, [r7, #7]
 801697e:	4613      	mov	r3, r2
 8016980:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801698a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801698e:	2b00      	cmp	r3, #0
 8016990:	d123      	bne.n	80169da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8016992:	88bb      	ldrh	r3, [r7, #4]
 8016994:	3303      	adds	r3, #3
 8016996:	089b      	lsrs	r3, r3, #2
 8016998:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801699a:	2300      	movs	r3, #0
 801699c:	61bb      	str	r3, [r7, #24]
 801699e:	e018      	b.n	80169d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80169a0:	79fb      	ldrb	r3, [r7, #7]
 80169a2:	031a      	lsls	r2, r3, #12
 80169a4:	697b      	ldr	r3, [r7, #20]
 80169a6:	4413      	add	r3, r2
 80169a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80169ac:	461a      	mov	r2, r3
 80169ae:	69fb      	ldr	r3, [r7, #28]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	3301      	adds	r3, #1
 80169b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80169ba:	69fb      	ldr	r3, [r7, #28]
 80169bc:	3301      	adds	r3, #1
 80169be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80169c0:	69fb      	ldr	r3, [r7, #28]
 80169c2:	3301      	adds	r3, #1
 80169c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80169c6:	69fb      	ldr	r3, [r7, #28]
 80169c8:	3301      	adds	r3, #1
 80169ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80169cc:	69bb      	ldr	r3, [r7, #24]
 80169ce:	3301      	adds	r3, #1
 80169d0:	61bb      	str	r3, [r7, #24]
 80169d2:	69ba      	ldr	r2, [r7, #24]
 80169d4:	693b      	ldr	r3, [r7, #16]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d3e2      	bcc.n	80169a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80169da:	2300      	movs	r3, #0
}
 80169dc:	4618      	mov	r0, r3
 80169de:	3724      	adds	r7, #36	@ 0x24
 80169e0:	46bd      	mov	sp, r7
 80169e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e6:	4770      	bx	lr

080169e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80169e8:	b480      	push	{r7}
 80169ea:	b08b      	sub	sp, #44	@ 0x2c
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	60f8      	str	r0, [r7, #12]
 80169f0:	60b9      	str	r1, [r7, #8]
 80169f2:	4613      	mov	r3, r2
 80169f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80169fe:	88fb      	ldrh	r3, [r7, #6]
 8016a00:	089b      	lsrs	r3, r3, #2
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8016a06:	88fb      	ldrh	r3, [r7, #6]
 8016a08:	f003 0303 	and.w	r3, r3, #3
 8016a0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8016a0e:	2300      	movs	r3, #0
 8016a10:	623b      	str	r3, [r7, #32]
 8016a12:	e014      	b.n	8016a3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016a14:	69bb      	ldr	r3, [r7, #24]
 8016a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016a1a:	681a      	ldr	r2, [r3, #0]
 8016a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8016a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a22:	3301      	adds	r3, #1
 8016a24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a28:	3301      	adds	r3, #1
 8016a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a2e:	3301      	adds	r3, #1
 8016a30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a34:	3301      	adds	r3, #1
 8016a36:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8016a38:	6a3b      	ldr	r3, [r7, #32]
 8016a3a:	3301      	adds	r3, #1
 8016a3c:	623b      	str	r3, [r7, #32]
 8016a3e:	6a3a      	ldr	r2, [r7, #32]
 8016a40:	697b      	ldr	r3, [r7, #20]
 8016a42:	429a      	cmp	r2, r3
 8016a44:	d3e6      	bcc.n	8016a14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8016a46:	8bfb      	ldrh	r3, [r7, #30]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d01e      	beq.n	8016a8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016a50:	69bb      	ldr	r3, [r7, #24]
 8016a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016a56:	461a      	mov	r2, r3
 8016a58:	f107 0310 	add.w	r3, r7, #16
 8016a5c:	6812      	ldr	r2, [r2, #0]
 8016a5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8016a60:	693a      	ldr	r2, [r7, #16]
 8016a62:	6a3b      	ldr	r3, [r7, #32]
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	00db      	lsls	r3, r3, #3
 8016a68:	fa22 f303 	lsr.w	r3, r2, r3
 8016a6c:	b2da      	uxtb	r2, r3
 8016a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a70:	701a      	strb	r2, [r3, #0]
      i++;
 8016a72:	6a3b      	ldr	r3, [r7, #32]
 8016a74:	3301      	adds	r3, #1
 8016a76:	623b      	str	r3, [r7, #32]
      pDest++;
 8016a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8016a7e:	8bfb      	ldrh	r3, [r7, #30]
 8016a80:	3b01      	subs	r3, #1
 8016a82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8016a84:	8bfb      	ldrh	r3, [r7, #30]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d1ea      	bne.n	8016a60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8016a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	372c      	adds	r7, #44	@ 0x2c
 8016a90:	46bd      	mov	sp, r7
 8016a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a96:	4770      	bx	lr

08016a98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016a98:	b480      	push	{r7}
 8016a9a:	b085      	sub	sp, #20
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
 8016aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	785b      	ldrb	r3, [r3, #1]
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d12c      	bne.n	8016b0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	015a      	lsls	r2, r3, #5
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	4413      	add	r3, r2
 8016abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	db12      	blt.n	8016aec <USB_EPSetStall+0x54>
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d00f      	beq.n	8016aec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	015a      	lsls	r2, r3, #5
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	4413      	add	r3, r2
 8016ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	68ba      	ldr	r2, [r7, #8]
 8016adc:	0151      	lsls	r1, r2, #5
 8016ade:	68fa      	ldr	r2, [r7, #12]
 8016ae0:	440a      	add	r2, r1
 8016ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016ae6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016aea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016aec:	68bb      	ldr	r3, [r7, #8]
 8016aee:	015a      	lsls	r2, r3, #5
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	4413      	add	r3, r2
 8016af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	68ba      	ldr	r2, [r7, #8]
 8016afc:	0151      	lsls	r1, r2, #5
 8016afe:	68fa      	ldr	r2, [r7, #12]
 8016b00:	440a      	add	r2, r1
 8016b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016b06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8016b0a:	6013      	str	r3, [r2, #0]
 8016b0c:	e02b      	b.n	8016b66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016b0e:	68bb      	ldr	r3, [r7, #8]
 8016b10:	015a      	lsls	r2, r3, #5
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	4413      	add	r3, r2
 8016b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	db12      	blt.n	8016b46 <USB_EPSetStall+0xae>
 8016b20:	68bb      	ldr	r3, [r7, #8]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d00f      	beq.n	8016b46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	015a      	lsls	r2, r3, #5
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	4413      	add	r3, r2
 8016b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	68ba      	ldr	r2, [r7, #8]
 8016b36:	0151      	lsls	r1, r2, #5
 8016b38:	68fa      	ldr	r2, [r7, #12]
 8016b3a:	440a      	add	r2, r1
 8016b3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016b40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016b44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	015a      	lsls	r2, r3, #5
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	4413      	add	r3, r2
 8016b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	68ba      	ldr	r2, [r7, #8]
 8016b56:	0151      	lsls	r1, r2, #5
 8016b58:	68fa      	ldr	r2, [r7, #12]
 8016b5a:	440a      	add	r2, r1
 8016b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016b60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8016b64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016b66:	2300      	movs	r3, #0
}
 8016b68:	4618      	mov	r0, r3
 8016b6a:	3714      	adds	r7, #20
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b72:	4770      	bx	lr

08016b74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016b74:	b480      	push	{r7}
 8016b76:	b085      	sub	sp, #20
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016b82:	683b      	ldr	r3, [r7, #0]
 8016b84:	781b      	ldrb	r3, [r3, #0]
 8016b86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016b88:	683b      	ldr	r3, [r7, #0]
 8016b8a:	785b      	ldrb	r3, [r3, #1]
 8016b8c:	2b01      	cmp	r3, #1
 8016b8e:	d128      	bne.n	8016be2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	015a      	lsls	r2, r3, #5
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	4413      	add	r3, r2
 8016b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	68ba      	ldr	r2, [r7, #8]
 8016ba0:	0151      	lsls	r1, r2, #5
 8016ba2:	68fa      	ldr	r2, [r7, #12]
 8016ba4:	440a      	add	r2, r1
 8016ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016baa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016bae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016bb0:	683b      	ldr	r3, [r7, #0]
 8016bb2:	791b      	ldrb	r3, [r3, #4]
 8016bb4:	2b03      	cmp	r3, #3
 8016bb6:	d003      	beq.n	8016bc0 <USB_EPClearStall+0x4c>
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	791b      	ldrb	r3, [r3, #4]
 8016bbc:	2b02      	cmp	r3, #2
 8016bbe:	d138      	bne.n	8016c32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	015a      	lsls	r2, r3, #5
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	68ba      	ldr	r2, [r7, #8]
 8016bd0:	0151      	lsls	r1, r2, #5
 8016bd2:	68fa      	ldr	r2, [r7, #12]
 8016bd4:	440a      	add	r2, r1
 8016bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016bde:	6013      	str	r3, [r2, #0]
 8016be0:	e027      	b.n	8016c32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	015a      	lsls	r2, r3, #5
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	4413      	add	r3, r2
 8016bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	68ba      	ldr	r2, [r7, #8]
 8016bf2:	0151      	lsls	r1, r2, #5
 8016bf4:	68fa      	ldr	r2, [r7, #12]
 8016bf6:	440a      	add	r2, r1
 8016bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016bfc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016c00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	791b      	ldrb	r3, [r3, #4]
 8016c06:	2b03      	cmp	r3, #3
 8016c08:	d003      	beq.n	8016c12 <USB_EPClearStall+0x9e>
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	791b      	ldrb	r3, [r3, #4]
 8016c0e:	2b02      	cmp	r3, #2
 8016c10:	d10f      	bne.n	8016c32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	015a      	lsls	r2, r3, #5
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	4413      	add	r3, r2
 8016c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	68ba      	ldr	r2, [r7, #8]
 8016c22:	0151      	lsls	r1, r2, #5
 8016c24:	68fa      	ldr	r2, [r7, #12]
 8016c26:	440a      	add	r2, r1
 8016c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016c30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016c32:	2300      	movs	r3, #0
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3714      	adds	r7, #20
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016c40:	b480      	push	{r7}
 8016c42:	b085      	sub	sp, #20
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	460b      	mov	r3, r1
 8016c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	68fa      	ldr	r2, [r7, #12]
 8016c5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016c5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8016c62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016c6a:	681a      	ldr	r2, [r3, #0]
 8016c6c:	78fb      	ldrb	r3, [r7, #3]
 8016c6e:	011b      	lsls	r3, r3, #4
 8016c70:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8016c74:	68f9      	ldr	r1, [r7, #12]
 8016c76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016c7a:	4313      	orrs	r3, r2
 8016c7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016c7e:	2300      	movs	r3, #0
}
 8016c80:	4618      	mov	r0, r3
 8016c82:	3714      	adds	r7, #20
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	b085      	sub	sp, #20
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	68fa      	ldr	r2, [r7, #12]
 8016ca2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016ca6:	f023 0303 	bic.w	r3, r3, #3
 8016caa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016cb2:	685b      	ldr	r3, [r3, #4]
 8016cb4:	68fa      	ldr	r2, [r7, #12]
 8016cb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016cba:	f023 0302 	bic.w	r3, r3, #2
 8016cbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016cc0:	2300      	movs	r3, #0
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3714      	adds	r7, #20
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ccc:	4770      	bx	lr

08016cce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8016cce:	b480      	push	{r7}
 8016cd0:	b085      	sub	sp, #20
 8016cd2:	af00      	add	r7, sp, #0
 8016cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	68fa      	ldr	r2, [r7, #12]
 8016ce4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016ce8:	f023 0303 	bic.w	r3, r3, #3
 8016cec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016cf4:	685b      	ldr	r3, [r3, #4]
 8016cf6:	68fa      	ldr	r2, [r7, #12]
 8016cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016cfc:	f043 0302 	orr.w	r3, r3, #2
 8016d00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016d02:	2300      	movs	r3, #0
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3714      	adds	r7, #20
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0e:	4770      	bx	lr

08016d10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8016d10:	b480      	push	{r7}
 8016d12:	b085      	sub	sp, #20
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	695b      	ldr	r3, [r3, #20]
 8016d1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	699b      	ldr	r3, [r3, #24]
 8016d22:	68fa      	ldr	r2, [r7, #12]
 8016d24:	4013      	ands	r3, r2
 8016d26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016d28:	68fb      	ldr	r3, [r7, #12]
}
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	3714      	adds	r7, #20
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d34:	4770      	bx	lr

08016d36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8016d36:	b480      	push	{r7}
 8016d38:	b085      	sub	sp, #20
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d48:	699b      	ldr	r3, [r3, #24]
 8016d4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d52:	69db      	ldr	r3, [r3, #28]
 8016d54:	68ba      	ldr	r2, [r7, #8]
 8016d56:	4013      	ands	r3, r2
 8016d58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016d5a:	68bb      	ldr	r3, [r7, #8]
 8016d5c:	0c1b      	lsrs	r3, r3, #16
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3714      	adds	r7, #20
 8016d62:	46bd      	mov	sp, r7
 8016d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d68:	4770      	bx	lr

08016d6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8016d6a:	b480      	push	{r7}
 8016d6c:	b085      	sub	sp, #20
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d7c:	699b      	ldr	r3, [r3, #24]
 8016d7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016d86:	69db      	ldr	r3, [r3, #28]
 8016d88:	68ba      	ldr	r2, [r7, #8]
 8016d8a:	4013      	ands	r3, r2
 8016d8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	b29b      	uxth	r3, r3
}
 8016d92:	4618      	mov	r0, r3
 8016d94:	3714      	adds	r7, #20
 8016d96:	46bd      	mov	sp, r7
 8016d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9c:	4770      	bx	lr

08016d9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016d9e:	b480      	push	{r7}
 8016da0:	b085      	sub	sp, #20
 8016da2:	af00      	add	r7, sp, #0
 8016da4:	6078      	str	r0, [r7, #4]
 8016da6:	460b      	mov	r3, r1
 8016da8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016dae:	78fb      	ldrb	r3, [r7, #3]
 8016db0:	015a      	lsls	r2, r3, #5
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	4413      	add	r3, r2
 8016db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016dba:	689b      	ldr	r3, [r3, #8]
 8016dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016dc4:	695b      	ldr	r3, [r3, #20]
 8016dc6:	68ba      	ldr	r2, [r7, #8]
 8016dc8:	4013      	ands	r3, r2
 8016dca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016dcc:	68bb      	ldr	r3, [r7, #8]
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3714      	adds	r7, #20
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd8:	4770      	bx	lr

08016dda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016dda:	b480      	push	{r7}
 8016ddc:	b087      	sub	sp, #28
 8016dde:	af00      	add	r7, sp, #0
 8016de0:	6078      	str	r0, [r7, #4]
 8016de2:	460b      	mov	r3, r1
 8016de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016df0:	691b      	ldr	r3, [r3, #16]
 8016df2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016dfc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016dfe:	78fb      	ldrb	r3, [r7, #3]
 8016e00:	f003 030f 	and.w	r3, r3, #15
 8016e04:	68fa      	ldr	r2, [r7, #12]
 8016e06:	fa22 f303 	lsr.w	r3, r2, r3
 8016e0a:	01db      	lsls	r3, r3, #7
 8016e0c:	b2db      	uxtb	r3, r3
 8016e0e:	693a      	ldr	r2, [r7, #16]
 8016e10:	4313      	orrs	r3, r2
 8016e12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016e14:	78fb      	ldrb	r3, [r7, #3]
 8016e16:	015a      	lsls	r2, r3, #5
 8016e18:	697b      	ldr	r3, [r7, #20]
 8016e1a:	4413      	add	r3, r2
 8016e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e20:	689b      	ldr	r3, [r3, #8]
 8016e22:	693a      	ldr	r2, [r7, #16]
 8016e24:	4013      	ands	r3, r2
 8016e26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016e28:	68bb      	ldr	r3, [r7, #8]
}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	371c      	adds	r7, #28
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e34:	4770      	bx	lr

08016e36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8016e36:	b480      	push	{r7}
 8016e38:	b083      	sub	sp, #12
 8016e3a:	af00      	add	r7, sp, #0
 8016e3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	695b      	ldr	r3, [r3, #20]
 8016e42:	f003 0301 	and.w	r3, r3, #1
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	370c      	adds	r7, #12
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e50:	4770      	bx	lr
	...

08016e54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8016e54:	b480      	push	{r7}
 8016e56:	b085      	sub	sp, #20
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e66:	681a      	ldr	r2, [r3, #0]
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e6e:	4619      	mov	r1, r3
 8016e70:	4b09      	ldr	r3, [pc, #36]	@ (8016e98 <USB_ActivateSetup+0x44>)
 8016e72:	4013      	ands	r3, r2
 8016e74:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	68fa      	ldr	r2, [r7, #12]
 8016e80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016e88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016e8a:	2300      	movs	r3, #0
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3714      	adds	r7, #20
 8016e90:	46bd      	mov	sp, r7
 8016e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e96:	4770      	bx	lr
 8016e98:	fffff800 	.word	0xfffff800

08016e9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	b087      	sub	sp, #28
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	60f8      	str	r0, [r7, #12]
 8016ea4:	460b      	mov	r3, r1
 8016ea6:	607a      	str	r2, [r7, #4]
 8016ea8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	333c      	adds	r3, #60	@ 0x3c
 8016eb2:	3304      	adds	r3, #4
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016eb8:	693b      	ldr	r3, [r7, #16]
 8016eba:	4a26      	ldr	r2, [pc, #152]	@ (8016f54 <USB_EP0_OutStart+0xb8>)
 8016ebc:	4293      	cmp	r3, r2
 8016ebe:	d90a      	bls.n	8016ed6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016ed0:	d101      	bne.n	8016ed6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	e037      	b.n	8016f46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016ed6:	697b      	ldr	r3, [r7, #20]
 8016ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016edc:	461a      	mov	r2, r3
 8016ede:	2300      	movs	r3, #0
 8016ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016ee2:	697b      	ldr	r3, [r7, #20]
 8016ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016ee8:	691b      	ldr	r3, [r3, #16]
 8016eea:	697a      	ldr	r2, [r7, #20]
 8016eec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016ef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016ef6:	697b      	ldr	r3, [r7, #20]
 8016ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016efc:	691b      	ldr	r3, [r3, #16]
 8016efe:	697a      	ldr	r2, [r7, #20]
 8016f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016f04:	f043 0318 	orr.w	r3, r3, #24
 8016f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8016f0a:	697b      	ldr	r3, [r7, #20]
 8016f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f10:	691b      	ldr	r3, [r3, #16]
 8016f12:	697a      	ldr	r2, [r7, #20]
 8016f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016f18:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8016f1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8016f1e:	7afb      	ldrb	r3, [r7, #11]
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	d10f      	bne.n	8016f44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016f24:	697b      	ldr	r3, [r7, #20]
 8016f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016f30:	697b      	ldr	r3, [r7, #20]
 8016f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	697a      	ldr	r2, [r7, #20]
 8016f3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016f3e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8016f42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016f44:	2300      	movs	r3, #0
}
 8016f46:	4618      	mov	r0, r3
 8016f48:	371c      	adds	r7, #28
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f50:	4770      	bx	lr
 8016f52:	bf00      	nop
 8016f54:	4f54300a 	.word	0x4f54300a

08016f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016f58:	b480      	push	{r7}
 8016f5a:	b085      	sub	sp, #20
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016f60:	2300      	movs	r3, #0
 8016f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	3301      	adds	r3, #1
 8016f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016f70:	d901      	bls.n	8016f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8016f72:	2303      	movs	r3, #3
 8016f74:	e01b      	b.n	8016fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	691b      	ldr	r3, [r3, #16]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	daf2      	bge.n	8016f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016f7e:	2300      	movs	r3, #0
 8016f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	691b      	ldr	r3, [r3, #16]
 8016f86:	f043 0201 	orr.w	r2, r3, #1
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	3301      	adds	r3, #1
 8016f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016f9a:	d901      	bls.n	8016fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016f9c:	2303      	movs	r3, #3
 8016f9e:	e006      	b.n	8016fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	691b      	ldr	r3, [r3, #16]
 8016fa4:	f003 0301 	and.w	r3, r3, #1
 8016fa8:	2b01      	cmp	r3, #1
 8016faa:	d0f0      	beq.n	8016f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8016fac:	2300      	movs	r3, #0
}
 8016fae:	4618      	mov	r0, r3
 8016fb0:	3714      	adds	r7, #20
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr

08016fba <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 8016fba:	b580      	push	{r7, lr}
 8016fbc:	b082      	sub	sp, #8
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2200      	movs	r2, #0
 8016fec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 8016ff0:	2044      	movs	r0, #68	@ 0x44
 8016ff2:	f003 fc11 	bl	801a818 <malloc>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 8016ffe:	2044      	movs	r0, #68	@ 0x44
 8017000:	f003 fc0a 	bl	801a818 <malloc>
 8017004:	4603      	mov	r3, r0
 8017006:	461a      	mov	r2, r3
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	7e1b      	ldrb	r3, [r3, #24]
 8017010:	461a      	mov	r2, r3
 8017012:	4613      	mov	r3, r2
 8017014:	011b      	lsls	r3, r3, #4
 8017016:	4413      	add	r3, r2
 8017018:	009b      	lsls	r3, r3, #2
 801701a:	4618      	mov	r0, r3
 801701c:	f003 fbfc 	bl	801a818 <malloc>
 8017020:	4603      	mov	r3, r0
 8017022:	461a      	mov	r2, r3
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801702e:	461a      	mov	r2, r3
 8017030:	4613      	mov	r3, r2
 8017032:	011b      	lsls	r3, r3, #4
 8017034:	4413      	add	r3, r2
 8017036:	009b      	lsls	r3, r3, #2
 8017038:	4618      	mov	r0, r3
 801703a:	f003 fbed 	bl	801a818 <malloc>
 801703e:	4603      	mov	r3, r0
 8017040:	461a      	mov	r2, r3
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	6818      	ldr	r0, [r3, #0]
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	689b      	ldr	r3, [r3, #8]
 801704e:	2244      	movs	r2, #68	@ 0x44
 8017050:	4619      	mov	r1, r3
 8017052:	f7fc fd4b 	bl	8013aec <HAL_UART_Receive_DMA>
 8017056:	4603      	mov	r3, r0
}
 8017058:	4618      	mov	r0, r3
 801705a:	3708      	adds	r7, #8
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}

08017060 <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 8017060:	b480      	push	{r7}
 8017062:	b087      	sub	sp, #28
 8017064:	af00      	add	r7, sp, #0
 8017066:	60f8      	str	r0, [r7, #12]
 8017068:	60b9      	str	r1, [r7, #8]
 801706a:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	7e9a      	ldrb	r2, [r3, #26]
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	7e5b      	ldrb	r3, [r3, #25]
 8017074:	429a      	cmp	r2, r3
 8017076:	d101      	bne.n	801707c <XBEE_RXPacket+0x1c>
 8017078:	2301      	movs	r3, #1
 801707a:	e05b      	b.n	8017134 <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	695a      	ldr	r2, [r3, #20]
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	7e9b      	ldrb	r3, [r3, #26]
 8017084:	4619      	mov	r1, r3
 8017086:	460b      	mov	r3, r1
 8017088:	011b      	lsls	r3, r3, #4
 801708a:	440b      	add	r3, r1
 801708c:	009b      	lsls	r3, r3, #2
 801708e:	4413      	add	r3, r2
 8017090:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	7e9b      	ldrb	r3, [r3, #26]
 8017096:	3301      	adds	r3, #1
 8017098:	b2da      	uxtb	r2, r3
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	7e9b      	ldrb	r3, [r3, #26]
 80170a2:	68fa      	ldr	r2, [r7, #12]
 80170a4:	7e12      	ldrb	r2, [r2, #24]
 80170a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80170aa:	fb01 f202 	mul.w	r2, r1, r2
 80170ae:	1a9b      	subs	r3, r3, r2
 80170b0:	b2da      	uxtb	r2, r3
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 80170b6:	2300      	movs	r3, #0
 80170b8:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80170ba:	2300      	movs	r3, #0
 80170bc:	75bb      	strb	r3, [r7, #22]
 80170be:	e00e      	b.n	80170de <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 80170c0:	7dbb      	ldrb	r3, [r7, #22]
 80170c2:	2b03      	cmp	r3, #3
 80170c4:	d007      	beq.n	80170d6 <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 80170c6:	7dbb      	ldrb	r3, [r7, #22]
 80170c8:	693a      	ldr	r2, [r7, #16]
 80170ca:	4413      	add	r3, r2
 80170cc:	781a      	ldrb	r2, [r3, #0]
 80170ce:	7dfb      	ldrb	r3, [r7, #23]
 80170d0:	4053      	eors	r3, r2
 80170d2:	75fb      	strb	r3, [r7, #23]
 80170d4:	e000      	b.n	80170d8 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 80170d6:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80170d8:	7dbb      	ldrb	r3, [r7, #22]
 80170da:	3301      	adds	r3, #1
 80170dc:	75bb      	strb	r3, [r7, #22]
 80170de:	7dbb      	ldrb	r3, [r7, #22]
 80170e0:	2b43      	cmp	r3, #67	@ 0x43
 80170e2:	d9ed      	bls.n	80170c0 <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 80170e4:	693b      	ldr	r3, [r7, #16]
 80170e6:	3303      	adds	r3, #3
 80170e8:	781b      	ldrb	r3, [r3, #0]
 80170ea:	7dfa      	ldrb	r2, [r7, #23]
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d001      	beq.n	80170f4 <XBEE_RXPacket+0x94>
 80170f0:	2301      	movs	r3, #1
 80170f2:	e01f      	b.n	8017134 <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	2200      	movs	r2, #0
 80170f8:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	881b      	ldrh	r3, [r3, #0]
 80170fe:	693a      	ldr	r2, [r7, #16]
 8017100:	3201      	adds	r2, #1
 8017102:	7812      	ldrb	r2, [r2, #0]
 8017104:	4413      	add	r3, r2
 8017106:	b29a      	uxth	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	021b      	lsls	r3, r3, #8
 8017112:	b29a      	uxth	r2, r3
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	881b      	ldrh	r3, [r3, #0]
 801711c:	693a      	ldr	r2, [r7, #16]
 801711e:	3202      	adds	r2, #2
 8017120:	7812      	ldrb	r2, [r2, #0]
 8017122:	4413      	add	r3, r2
 8017124:	b29a      	uxth	r2, r3
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	1d1a      	adds	r2, r3, #4
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	601a      	str	r2, [r3, #0]

	return 0;
 8017132:	2300      	movs	r3, #0
}
 8017134:	4618      	mov	r0, r3
 8017136:	371c      	adds	r7, #28
 8017138:	46bd      	mov	sp, r7
 801713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713e:	4770      	bx	lr

08017140 <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 8017140:	b580      	push	{r7, lr}
 8017142:	b086      	sub	sp, #24
 8017144:	af00      	add	r7, sp, #0
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	4613      	mov	r3, r2
 801714c:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017154:	3301      	adds	r3, #1
 8017156:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801715e:	7dbb      	ldrb	r3, [r7, #22]
 8017160:	fbb3 f1f2 	udiv	r1, r3, r2
 8017164:	fb01 f202 	mul.w	r2, r1, r2
 8017168:	1a9b      	subs	r3, r3, r2
 801716a:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8017172:	7dba      	ldrb	r2, [r7, #22]
 8017174:	429a      	cmp	r2, r3
 8017176:	d101      	bne.n	801717c <XBEE_TXPacket+0x3c>
 8017178:	2301      	movs	r3, #1
 801717a:	e047      	b.n	801720c <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	69da      	ldr	r2, [r3, #28]
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017186:	4619      	mov	r1, r3
 8017188:	460b      	mov	r3, r1
 801718a:	011b      	lsls	r3, r3, #4
 801718c:	440b      	add	r3, r1
 801718e:	009b      	lsls	r3, r3, #2
 8017190:	4413      	add	r3, r2
 8017192:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 8017194:	693b      	ldr	r3, [r7, #16]
 8017196:	22aa      	movs	r2, #170	@ 0xaa
 8017198:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 801719a:	88fb      	ldrh	r3, [r7, #6]
 801719c:	0a1b      	lsrs	r3, r3, #8
 801719e:	b29a      	uxth	r2, r3
 80171a0:	693b      	ldr	r3, [r7, #16]
 80171a2:	3301      	adds	r3, #1
 80171a4:	b2d2      	uxtb	r2, r2
 80171a6:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	3302      	adds	r3, #2
 80171ac:	88fa      	ldrh	r2, [r7, #6]
 80171ae:	b2d2      	uxtb	r2, r2
 80171b0:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 80171b2:	693b      	ldr	r3, [r7, #16]
 80171b4:	3304      	adds	r3, #4
 80171b6:	2240      	movs	r2, #64	@ 0x40
 80171b8:	68b9      	ldr	r1, [r7, #8]
 80171ba:	4618      	mov	r0, r3
 80171bc:	f003 fc50 	bl	801aa60 <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	3303      	adds	r3, #3
 80171c4:	2200      	movs	r2, #0
 80171c6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80171c8:	2300      	movs	r3, #0
 80171ca:	75fb      	strb	r3, [r7, #23]
 80171cc:	e013      	b.n	80171f6 <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 80171ce:	7dfb      	ldrb	r3, [r7, #23]
 80171d0:	2b03      	cmp	r3, #3
 80171d2:	d00c      	beq.n	80171ee <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	3303      	adds	r3, #3
 80171d8:	7819      	ldrb	r1, [r3, #0]
 80171da:	7dfb      	ldrb	r3, [r7, #23]
 80171dc:	693a      	ldr	r2, [r7, #16]
 80171de:	4413      	add	r3, r2
 80171e0:	781a      	ldrb	r2, [r3, #0]
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	3303      	adds	r3, #3
 80171e6:	404a      	eors	r2, r1
 80171e8:	b2d2      	uxtb	r2, r2
 80171ea:	701a      	strb	r2, [r3, #0]
 80171ec:	e000      	b.n	80171f0 <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 80171ee:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80171f0:	7dfb      	ldrb	r3, [r7, #23]
 80171f2:	3301      	adds	r3, #1
 80171f4:	75fb      	strb	r3, [r7, #23]
 80171f6:	7dfb      	ldrb	r3, [r7, #23]
 80171f8:	2b43      	cmp	r3, #67	@ 0x43
 80171fa:	d9e8      	bls.n	80171ce <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	6818      	ldr	r0, [r3, #0]
 8017200:	231e      	movs	r3, #30
 8017202:	2244      	movs	r2, #68	@ 0x44
 8017204:	6939      	ldr	r1, [r7, #16]
 8017206:	f7fc fbe3 	bl	80139d0 <HAL_UART_Transmit>
 801720a:	4603      	mov	r3, r0

}
 801720c:	4618      	mov	r0, r3
 801720e:	3718      	adds	r7, #24
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}

08017214 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8017214:	b580      	push	{r7, lr}
 8017216:	b096      	sub	sp, #88	@ 0x58
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	7e5b      	ldrb	r3, [r3, #25]
 8017220:	3301      	adds	r3, #1
 8017222:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	7e1a      	ldrb	r2, [r3, #24]
 801722a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801722e:	fbb3 f1f2 	udiv	r1, r3, r2
 8017232:	fb01 f202 	mul.w	r2, r1, r2
 8017236:	1a9b      	subs	r3, r3, r2
 8017238:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	7e9b      	ldrb	r3, [r3, #26]
 8017240:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8017244:	429a      	cmp	r2, r3
 8017246:	d101      	bne.n	801724c <XBEE_RX_DMACallback+0x38>
 8017248:	2301      	movs	r3, #1
 801724a:	e097      	b.n	801737c <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	7c1b      	ldrb	r3, [r3, #16]
 8017250:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 8017254:	2300      	movs	r3, #0
 8017256:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 801725a:	2300      	movs	r3, #0
 801725c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8017260:	e027      	b.n	80172b2 <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 8017262:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8017266:	687a      	ldr	r2, [r7, #4]
 8017268:	7c12      	ldrb	r2, [r2, #16]
 801726a:	441a      	add	r2, r3
 801726c:	4b45      	ldr	r3, [pc, #276]	@ (8017384 <XBEE_RX_DMACallback+0x170>)
 801726e:	fb83 1302 	smull	r1, r3, r3, r2
 8017272:	1159      	asrs	r1, r3, #5
 8017274:	17d3      	asrs	r3, r2, #31
 8017276:	1ac9      	subs	r1, r1, r3
 8017278:	460b      	mov	r3, r1
 801727a:	011b      	lsls	r3, r3, #4
 801727c:	440b      	add	r3, r1
 801727e:	009b      	lsls	r3, r3, #2
 8017280:	1ad1      	subs	r1, r2, r3
 8017282:	460b      	mov	r3, r1
 8017284:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	689a      	ldr	r2, [r3, #8]
 801728c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8017290:	4413      	add	r3, r2
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	2baa      	cmp	r3, #170	@ 0xaa
 8017296:	d107      	bne.n	80172a8 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 8017298:	2301      	movs	r3, #1
 801729a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80172a4:	741a      	strb	r2, [r3, #16]
			break;
 80172a6:	e008      	b.n	80172ba <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80172a8:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80172ac:	3301      	adds	r3, #1
 80172ae:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80172b2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80172b6:	2b43      	cmp	r3, #67	@ 0x43
 80172b8:	d9d3      	bls.n	8017262 <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 80172ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d101      	bne.n	80172c6 <XBEE_RX_DMACallback+0xb2>
 80172c2:	2302      	movs	r3, #2
 80172c4:	e05a      	b.n	801737c <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	68da      	ldr	r2, [r3, #12]
 80172ca:	f107 030c 	add.w	r3, r7, #12
 80172ce:	4611      	mov	r1, r2
 80172d0:	2244      	movs	r2, #68	@ 0x44
 80172d2:	4618      	mov	r0, r3
 80172d4:	f003 fbc4 	bl	801aa60 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	68d8      	ldr	r0, [r3, #12]
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	689b      	ldr	r3, [r3, #8]
 80172e0:	687a      	ldr	r2, [r7, #4]
 80172e2:	7c12      	ldrb	r2, [r2, #16]
 80172e4:	1899      	adds	r1, r3, r2
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	7c1b      	ldrb	r3, [r3, #16]
 80172ea:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80172ee:	461a      	mov	r2, r3
 80172f0:	f003 fbb6 	bl	801aa60 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	7c1b      	ldrb	r3, [r3, #16]
 80172f8:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d201      	bcs.n	8017304 <XBEE_RX_DMACallback+0xf0>
		return 2;
 8017300:	2302      	movs	r3, #2
 8017302:	e03b      	b.n	801737c <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8017304:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017308:	b29b      	uxth	r3, r3
 801730a:	687a      	ldr	r2, [r7, #4]
 801730c:	7c12      	ldrb	r2, [r2, #16]
 801730e:	1a9b      	subs	r3, r3, r2
 8017310:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8017314:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017318:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 801731c:	461a      	mov	r2, r3
 801731e:	f107 030c 	add.w	r3, r7, #12
 8017322:	4413      	add	r3, r2
 8017324:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017328:	2100      	movs	r1, #0
 801732a:	4618      	mov	r0, r3
 801732c:	f003 fb4c 	bl	801a9c8 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8017330:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017334:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017338:	1ad3      	subs	r3, r2, r3
 801733a:	3344      	adds	r3, #68	@ 0x44
 801733c:	f107 020c 	add.w	r2, r7, #12
 8017340:	18d0      	adds	r0, r2, r3
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6899      	ldr	r1, [r3, #8]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	7c1b      	ldrb	r3, [r3, #16]
 801734a:	461a      	mov	r2, r3
 801734c:	f003 fb88 	bl	801aa60 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8017356:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	695a      	ldr	r2, [r3, #20]
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	7e5b      	ldrb	r3, [r3, #25]
 8017360:	4619      	mov	r1, r3
 8017362:	460b      	mov	r3, r1
 8017364:	011b      	lsls	r3, r3, #4
 8017366:	440b      	add	r3, r1
 8017368:	009b      	lsls	r3, r3, #2
 801736a:	4413      	add	r3, r2
 801736c:	4618      	mov	r0, r3
 801736e:	f107 030c 	add.w	r3, r7, #12
 8017372:	2244      	movs	r2, #68	@ 0x44
 8017374:	4619      	mov	r1, r3
 8017376:	f003 fb73 	bl	801aa60 <memcpy>

	return 0;
 801737a:	2300      	movs	r3, #0
}
 801737c:	4618      	mov	r0, r3
 801737e:	3758      	adds	r7, #88	@ 0x58
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}
 8017384:	78787879 	.word	0x78787879

08017388 <AllocateValueArr>:
#include "MenuOLED.h"

// FUNCS
// ------------------------------------------------------------------------------------

uint8_t* AllocateValueArr(uint8_t num) {
 8017388:	b580      	push	{r7, lr}
 801738a:	b082      	sub	sp, #8
 801738c:	af00      	add	r7, sp, #0
 801738e:	4603      	mov	r3, r0
 8017390:	71fb      	strb	r3, [r7, #7]
	return (uint8_t*)malloc(sizeof(uint8_t)*num);
 8017392:	79fb      	ldrb	r3, [r7, #7]
 8017394:	4618      	mov	r0, r3
 8017396:	f003 fa3f 	bl	801a818 <malloc>
 801739a:	4603      	mov	r3, r0
}
 801739c:	4618      	mov	r0, r3
 801739e:	3708      	adds	r7, #8
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}

080173a4 <AllocateString>:

uint8_t* AllocateString(uint8_t* src) {
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b09c      	sub	sp, #112	@ 0x70
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
	uint8_t str_tmp[100];
	uint8_t* dst = (uint8_t*)malloc(strlen(src)+1);
 80173ac:	6878      	ldr	r0, [r7, #4]
 80173ae:	f7e8 ff97 	bl	80002e0 <strlen>
 80173b2:	4603      	mov	r3, r0
 80173b4:	3301      	adds	r3, #1
 80173b6:	4618      	mov	r0, r3
 80173b8:	f003 fa2e 	bl	801a818 <malloc>
 80173bc:	4603      	mov	r3, r0
 80173be:	66fb      	str	r3, [r7, #108]	@ 0x6c
	strcpy(dst, src);
 80173c0:	6879      	ldr	r1, [r7, #4]
 80173c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80173c4:	f003 fb44 	bl	801aa50 <strcpy>
	return dst;
 80173c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80173ca:	4618      	mov	r0, r3
 80173cc:	3770      	adds	r7, #112	@ 0x70
 80173ce:	46bd      	mov	sp, r7
 80173d0:	bd80      	pop	{r7, pc}

080173d2 <AllocateStringArr>:

uint8_t** AllocateStringArr(uint8_t num) {
 80173d2:	b580      	push	{r7, lr}
 80173d4:	b082      	sub	sp, #8
 80173d6:	af00      	add	r7, sp, #0
 80173d8:	4603      	mov	r3, r0
 80173da:	71fb      	strb	r3, [r7, #7]
	return (uint8_t**)malloc(sizeof(uint8_t*)*num);
 80173dc:	79fb      	ldrb	r3, [r7, #7]
 80173de:	009b      	lsls	r3, r3, #2
 80173e0:	4618      	mov	r0, r3
 80173e2:	f003 fa19 	bl	801a818 <malloc>
 80173e6:	4603      	mov	r3, r0
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3708      	adds	r7, #8
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}

080173f0 <AllocateProperties>:

Menu_Property* AllocateProperties(uint8_t num) {
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	4603      	mov	r3, r0
 80173f8:	71fb      	strb	r3, [r7, #7]
	return (Menu_Property*)malloc(sizeof(Menu_Property)*num);
 80173fa:	79fa      	ldrb	r2, [r7, #7]
 80173fc:	4613      	mov	r3, r2
 80173fe:	005b      	lsls	r3, r3, #1
 8017400:	4413      	add	r3, r2
 8017402:	009b      	lsls	r3, r3, #2
 8017404:	4618      	mov	r0, r3
 8017406:	f003 fa07 	bl	801a818 <malloc>
 801740a:	4603      	mov	r3, r0
}
 801740c:	4618      	mov	r0, r3
 801740e:	3708      	adds	r7, #8
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}

08017414 <AllocatePages>:

Menu_Page* AllocatePages(uint8_t num) {
 8017414:	b580      	push	{r7, lr}
 8017416:	b082      	sub	sp, #8
 8017418:	af00      	add	r7, sp, #0
 801741a:	4603      	mov	r3, r0
 801741c:	71fb      	strb	r3, [r7, #7]
	return (Menu_Page*)malloc(sizeof(Menu_Page)*num);
 801741e:	79fa      	ldrb	r2, [r7, #7]
 8017420:	4613      	mov	r3, r2
 8017422:	005b      	lsls	r3, r3, #1
 8017424:	4413      	add	r3, r2
 8017426:	009b      	lsls	r3, r3, #2
 8017428:	4618      	mov	r0, r3
 801742a:	f003 f9f5 	bl	801a818 <malloc>
 801742e:	4603      	mov	r3, r0
}
 8017430:	4618      	mov	r0, r3
 8017432:	3708      	adds	r7, #8
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}

08017438 <MENU_Init>:

uint8_t MENU_Init(Menu_HandleTypeDef *hmenu) {
 8017438:	b590      	push	{r4, r7, lr}
 801743a:	b089      	sub	sp, #36	@ 0x24
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
	// a buncha of work incoming

	// Initialize the state packet
	hmenu->state_packet = AllocateValueArr(64);
 8017440:	2040      	movs	r0, #64	@ 0x40
 8017442:	f7ff ffa1 	bl	8017388 <AllocateValueArr>
 8017446:	4602      	mov	r2, r0
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	611a      	str	r2, [r3, #16]
	memset(hmenu->state_packet, 0x00, 64);
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	691b      	ldr	r3, [r3, #16]
 8017450:	2240      	movs	r2, #64	@ 0x40
 8017452:	2100      	movs	r1, #0
 8017454:	4618      	mov	r0, r3
 8017456:	f003 fab7 	bl	801a9c8 <memset>

	// Allocate pages
	hmenu->num_pages = 2;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2202      	movs	r2, #2
 801745e:	721a      	strb	r2, [r3, #8]
	hmenu->pages = AllocatePages(hmenu->num_pages);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	7a1b      	ldrb	r3, [r3, #8]
 8017464:	4618      	mov	r0, r3
 8017466:	f7ff ffd5 	bl	8017414 <AllocatePages>
 801746a:	4602      	mov	r2, r0
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	60da      	str	r2, [r3, #12]

	// PAGE 0 (CAMERA)
	hmenu->pages[0].title = AllocateString("CAMERA");
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	68dc      	ldr	r4, [r3, #12]
 8017474:	4893      	ldr	r0, [pc, #588]	@ (80176c4 <MENU_Init+0x28c>)
 8017476:	f7ff ff95 	bl	80173a4 <AllocateString>
 801747a:	4603      	mov	r3, r0
 801747c:	6023      	str	r3, [r4, #0]

	hmenu->pages[0].num_properties = 3;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	68db      	ldr	r3, [r3, #12]
 8017482:	2203      	movs	r2, #3
 8017484:	711a      	strb	r2, [r3, #4]
	hmenu->pages[0].properties = AllocateProperties(hmenu->pages[0].num_properties);
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	68db      	ldr	r3, [r3, #12]
 801748a:	791a      	ldrb	r2, [r3, #4]
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	68dc      	ldr	r4, [r3, #12]
 8017490:	4610      	mov	r0, r2
 8017492:	f7ff ffad 	bl	80173f0 <AllocateProperties>
 8017496:	4603      	mov	r3, r0
 8017498:	60a3      	str	r3, [r4, #8]

	// Camera Quality
	hmenu->pages[0].properties[0].name = AllocateString("QUALITY");
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	68db      	ldr	r3, [r3, #12]
 801749e:	689c      	ldr	r4, [r3, #8]
 80174a0:	4889      	ldr	r0, [pc, #548]	@ (80176c8 <MENU_Init+0x290>)
 80174a2:	f7ff ff7f 	bl	80173a4 <AllocateString>
 80174a6:	4603      	mov	r3, r0
 80174a8:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].packet_byte = OP_CAMERA_QUALITY;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	68db      	ldr	r3, [r3, #12]
 80174ae:	689b      	ldr	r3, [r3, #8]
 80174b0:	2201      	movs	r2, #1
 80174b2:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[0].num_options = 4;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	68db      	ldr	r3, [r3, #12]
 80174b8:	689b      	ldr	r3, [r3, #8]
 80174ba:	2204      	movs	r2, #4
 80174bc:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[0].option_names = AllocateStringArr(hmenu->pages[0].properties[0].num_options);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	68db      	ldr	r3, [r3, #12]
 80174c2:	689b      	ldr	r3, [r3, #8]
 80174c4:	795a      	ldrb	r2, [r3, #5]
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	68db      	ldr	r3, [r3, #12]
 80174ca:	689c      	ldr	r4, [r3, #8]
 80174cc:	4610      	mov	r0, r2
 80174ce:	f7ff ff80 	bl	80173d2 <AllocateStringArr>
 80174d2:	4603      	mov	r3, r0
 80174d4:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[0].option_names[0] = AllocateString("LOW");
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	68db      	ldr	r3, [r3, #12]
 80174da:	689b      	ldr	r3, [r3, #8]
 80174dc:	689c      	ldr	r4, [r3, #8]
 80174de:	487b      	ldr	r0, [pc, #492]	@ (80176cc <MENU_Init+0x294>)
 80174e0:	f7ff ff60 	bl	80173a4 <AllocateString>
 80174e4:	4603      	mov	r3, r0
 80174e6:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[1] = AllocateString("MED");
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	68db      	ldr	r3, [r3, #12]
 80174ec:	689b      	ldr	r3, [r3, #8]
 80174ee:	689b      	ldr	r3, [r3, #8]
 80174f0:	1d1c      	adds	r4, r3, #4
 80174f2:	4877      	ldr	r0, [pc, #476]	@ (80176d0 <MENU_Init+0x298>)
 80174f4:	f7ff ff56 	bl	80173a4 <AllocateString>
 80174f8:	4603      	mov	r3, r0
 80174fa:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[2] = AllocateString("HIGH");
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	68db      	ldr	r3, [r3, #12]
 8017500:	689b      	ldr	r3, [r3, #8]
 8017502:	689b      	ldr	r3, [r3, #8]
 8017504:	f103 0408 	add.w	r4, r3, #8
 8017508:	4872      	ldr	r0, [pc, #456]	@ (80176d4 <MENU_Init+0x29c>)
 801750a:	f7ff ff4b 	bl	80173a4 <AllocateString>
 801750e:	4603      	mov	r3, r0
 8017510:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[3] = AllocateString("BEST");
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	689b      	ldr	r3, [r3, #8]
 8017518:	689b      	ldr	r3, [r3, #8]
 801751a:	f103 040c 	add.w	r4, r3, #12
 801751e:	486e      	ldr	r0, [pc, #440]	@ (80176d8 <MENU_Init+0x2a0>)
 8017520:	f7ff ff40 	bl	80173a4 <AllocateString>
 8017524:	4603      	mov	r3, r0
 8017526:	6023      	str	r3, [r4, #0]

	// Camera Vertical Shift
	hmenu->pages[0].properties[1].name = AllocateString("SHOW MS");
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	68db      	ldr	r3, [r3, #12]
 801752c:	689b      	ldr	r3, [r3, #8]
 801752e:	f103 040c 	add.w	r4, r3, #12
 8017532:	486a      	ldr	r0, [pc, #424]	@ (80176dc <MENU_Init+0x2a4>)
 8017534:	f7ff ff36 	bl	80173a4 <AllocateString>
 8017538:	4603      	mov	r3, r0
 801753a:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].packet_byte = OP_CAMERA_FRAMETIME;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	68db      	ldr	r3, [r3, #12]
 8017540:	689b      	ldr	r3, [r3, #8]
 8017542:	330c      	adds	r3, #12
 8017544:	2202      	movs	r2, #2
 8017546:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[1].num_options = 2;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	68db      	ldr	r3, [r3, #12]
 801754c:	689b      	ldr	r3, [r3, #8]
 801754e:	330c      	adds	r3, #12
 8017550:	2202      	movs	r2, #2
 8017552:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[1].option_names = AllocateStringArr(hmenu->pages[0].properties[1].num_options);
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	68db      	ldr	r3, [r3, #12]
 8017558:	689b      	ldr	r3, [r3, #8]
 801755a:	330c      	adds	r3, #12
 801755c:	795a      	ldrb	r2, [r3, #5]
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	68db      	ldr	r3, [r3, #12]
 8017562:	689b      	ldr	r3, [r3, #8]
 8017564:	f103 040c 	add.w	r4, r3, #12
 8017568:	4610      	mov	r0, r2
 801756a:	f7ff ff32 	bl	80173d2 <AllocateStringArr>
 801756e:	4603      	mov	r3, r0
 8017570:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[1].option_names[0] = AllocateString("[\x83\x83]");
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	68db      	ldr	r3, [r3, #12]
 8017576:	689b      	ldr	r3, [r3, #8]
 8017578:	330c      	adds	r3, #12
 801757a:	689c      	ldr	r4, [r3, #8]
 801757c:	4858      	ldr	r0, [pc, #352]	@ (80176e0 <MENU_Init+0x2a8>)
 801757e:	f7ff ff11 	bl	80173a4 <AllocateString>
 8017582:	4603      	mov	r3, r0
 8017584:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].option_names[1] = AllocateString("[\x80\x80]");
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	68db      	ldr	r3, [r3, #12]
 801758a:	689b      	ldr	r3, [r3, #8]
 801758c:	330c      	adds	r3, #12
 801758e:	689b      	ldr	r3, [r3, #8]
 8017590:	1d1c      	adds	r4, r3, #4
 8017592:	4854      	ldr	r0, [pc, #336]	@ (80176e4 <MENU_Init+0x2ac>)
 8017594:	f7ff ff06 	bl	80173a4 <AllocateString>
 8017598:	4603      	mov	r3, r0
 801759a:	6023      	str	r3, [r4, #0]

	// Camera Mode
	hmenu->pages[0].properties[2].name = AllocateString("ENCODING");
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	68db      	ldr	r3, [r3, #12]
 80175a0:	689b      	ldr	r3, [r3, #8]
 80175a2:	f103 0418 	add.w	r4, r3, #24
 80175a6:	4850      	ldr	r0, [pc, #320]	@ (80176e8 <MENU_Init+0x2b0>)
 80175a8:	f7ff fefc 	bl	80173a4 <AllocateString>
 80175ac:	4603      	mov	r3, r0
 80175ae:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[2].packet_byte = OP_CAMERA_ENCODING;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	68db      	ldr	r3, [r3, #12]
 80175b4:	689b      	ldr	r3, [r3, #8]
 80175b6:	3318      	adds	r3, #24
 80175b8:	2200      	movs	r2, #0
 80175ba:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[2].num_options = 2;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	68db      	ldr	r3, [r3, #12]
 80175c0:	689b      	ldr	r3, [r3, #8]
 80175c2:	3318      	adds	r3, #24
 80175c4:	2202      	movs	r2, #2
 80175c6:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[2].option_names = AllocateStringArr(hmenu->pages[0].properties[2].num_options);
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	68db      	ldr	r3, [r3, #12]
 80175cc:	689b      	ldr	r3, [r3, #8]
 80175ce:	3318      	adds	r3, #24
 80175d0:	795a      	ldrb	r2, [r3, #5]
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	68db      	ldr	r3, [r3, #12]
 80175d6:	689b      	ldr	r3, [r3, #8]
 80175d8:	f103 0418 	add.w	r4, r3, #24
 80175dc:	4610      	mov	r0, r2
 80175de:	f7ff fef8 	bl	80173d2 <AllocateStringArr>
 80175e2:	4603      	mov	r3, r0
 80175e4:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[2].option_names[0] = AllocateString("JPEG");
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	689b      	ldr	r3, [r3, #8]
 80175ec:	3318      	adds	r3, #24
 80175ee:	689c      	ldr	r4, [r3, #8]
 80175f0:	483e      	ldr	r0, [pc, #248]	@ (80176ec <MENU_Init+0x2b4>)
 80175f2:	f7ff fed7 	bl	80173a4 <AllocateString>
 80175f6:	4603      	mov	r3, r0
 80175f8:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[2].option_names[1] = AllocateString("RAW");
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	68db      	ldr	r3, [r3, #12]
 80175fe:	689b      	ldr	r3, [r3, #8]
 8017600:	3318      	adds	r3, #24
 8017602:	689b      	ldr	r3, [r3, #8]
 8017604:	1d1c      	adds	r4, r3, #4
 8017606:	483a      	ldr	r0, [pc, #232]	@ (80176f0 <MENU_Init+0x2b8>)
 8017608:	f7ff fecc 	bl	80173a4 <AllocateString>
 801760c:	4603      	mov	r3, r0
 801760e:	6023      	str	r3, [r4, #0]

	// PAGE 1 (LIGHTS)
	hmenu->pages[1].title = AllocateString("LIGHTING");
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	68db      	ldr	r3, [r3, #12]
 8017614:	f103 040c 	add.w	r4, r3, #12
 8017618:	4836      	ldr	r0, [pc, #216]	@ (80176f4 <MENU_Init+0x2bc>)
 801761a:	f7ff fec3 	bl	80173a4 <AllocateString>
 801761e:	4603      	mov	r3, r0
 8017620:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].num_properties = 4;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	68db      	ldr	r3, [r3, #12]
 8017626:	330c      	adds	r3, #12
 8017628:	2204      	movs	r2, #4
 801762a:	711a      	strb	r2, [r3, #4]
	hmenu->pages[1].properties = AllocateProperties(hmenu->pages[1].num_properties);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	68db      	ldr	r3, [r3, #12]
 8017630:	330c      	adds	r3, #12
 8017632:	791a      	ldrb	r2, [r3, #4]
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	68db      	ldr	r3, [r3, #12]
 8017638:	f103 040c 	add.w	r4, r3, #12
 801763c:	4610      	mov	r0, r2
 801763e:	f7ff fed7 	bl	80173f0 <AllocateProperties>
 8017642:	4603      	mov	r3, r0
 8017644:	60a3      	str	r3, [r4, #8]

	// Pre-allocate the percent strings
	uint8_t *percentStr[5];
	percentStr[0] = AllocateString("[\x80\x80\x80\x80]");
 8017646:	482c      	ldr	r0, [pc, #176]	@ (80176f8 <MENU_Init+0x2c0>)
 8017648:	f7ff feac 	bl	80173a4 <AllocateString>
 801764c:	4603      	mov	r3, r0
 801764e:	60bb      	str	r3, [r7, #8]
	percentStr[1] = AllocateString("[\x83\x80\x80\x80]");
 8017650:	482a      	ldr	r0, [pc, #168]	@ (80176fc <MENU_Init+0x2c4>)
 8017652:	f7ff fea7 	bl	80173a4 <AllocateString>
 8017656:	4603      	mov	r3, r0
 8017658:	60fb      	str	r3, [r7, #12]
	percentStr[2] = AllocateString("[\x83\x83\x80\x80]");
 801765a:	4829      	ldr	r0, [pc, #164]	@ (8017700 <MENU_Init+0x2c8>)
 801765c:	f7ff fea2 	bl	80173a4 <AllocateString>
 8017660:	4603      	mov	r3, r0
 8017662:	613b      	str	r3, [r7, #16]
	percentStr[3] = AllocateString("[\x83\x83\x83\x80]");
 8017664:	4827      	ldr	r0, [pc, #156]	@ (8017704 <MENU_Init+0x2cc>)
 8017666:	f7ff fe9d 	bl	80173a4 <AllocateString>
 801766a:	4603      	mov	r3, r0
 801766c:	617b      	str	r3, [r7, #20]
	percentStr[4] = AllocateString("[\x83\x83\x83\x83]");
 801766e:	4826      	ldr	r0, [pc, #152]	@ (8017708 <MENU_Init+0x2d0>)
 8017670:	f7ff fe98 	bl	80173a4 <AllocateString>
 8017674:	4603      	mov	r3, r0
 8017676:	61bb      	str	r3, [r7, #24]

	hmenu->pages[1].properties[0].name = AllocateString("HEADLIGHTS");
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	68db      	ldr	r3, [r3, #12]
 801767c:	330c      	adds	r3, #12
 801767e:	689c      	ldr	r4, [r3, #8]
 8017680:	4822      	ldr	r0, [pc, #136]	@ (801770c <MENU_Init+0x2d4>)
 8017682:	f7ff fe8f 	bl	80173a4 <AllocateString>
 8017686:	4603      	mov	r3, r0
 8017688:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].packet_byte = 3;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	68db      	ldr	r3, [r3, #12]
 801768e:	330c      	adds	r3, #12
 8017690:	689b      	ldr	r3, [r3, #8]
 8017692:	2203      	movs	r2, #3
 8017694:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[0].num_options = 5;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	68db      	ldr	r3, [r3, #12]
 801769a:	330c      	adds	r3, #12
 801769c:	689b      	ldr	r3, [r3, #8]
 801769e:	2205      	movs	r2, #5
 80176a0:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[0].option_names = AllocateStringArr(hmenu->pages[1].properties[0].num_options);
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	68db      	ldr	r3, [r3, #12]
 80176a6:	330c      	adds	r3, #12
 80176a8:	689b      	ldr	r3, [r3, #8]
 80176aa:	795a      	ldrb	r2, [r3, #5]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	68db      	ldr	r3, [r3, #12]
 80176b0:	330c      	adds	r3, #12
 80176b2:	689c      	ldr	r4, [r3, #8]
 80176b4:	4610      	mov	r0, r2
 80176b6:	f7ff fe8c 	bl	80173d2 <AllocateStringArr>
 80176ba:	4603      	mov	r3, r0
 80176bc:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 80176be:	2300      	movs	r3, #0
 80176c0:	77fb      	strb	r3, [r7, #31]
 80176c2:	e037      	b.n	8017734 <MENU_Init+0x2fc>
 80176c4:	0801b230 	.word	0x0801b230
 80176c8:	0801b238 	.word	0x0801b238
 80176cc:	0801b240 	.word	0x0801b240
 80176d0:	0801b244 	.word	0x0801b244
 80176d4:	0801b248 	.word	0x0801b248
 80176d8:	0801b250 	.word	0x0801b250
 80176dc:	0801b258 	.word	0x0801b258
 80176e0:	0801b260 	.word	0x0801b260
 80176e4:	0801b268 	.word	0x0801b268
 80176e8:	0801b270 	.word	0x0801b270
 80176ec:	0801b27c 	.word	0x0801b27c
 80176f0:	0801b284 	.word	0x0801b284
 80176f4:	0801b288 	.word	0x0801b288
 80176f8:	0801b294 	.word	0x0801b294
 80176fc:	0801b29c 	.word	0x0801b29c
 8017700:	0801b2a4 	.word	0x0801b2a4
 8017704:	0801b2ac 	.word	0x0801b2ac
 8017708:	0801b2b4 	.word	0x0801b2b4
 801770c:	0801b2bc 	.word	0x0801b2bc
		hmenu->pages[1].properties[0].option_names[i] = percentStr[i];
 8017710:	7ffb      	ldrb	r3, [r7, #31]
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	68d2      	ldr	r2, [r2, #12]
 8017716:	320c      	adds	r2, #12
 8017718:	6892      	ldr	r2, [r2, #8]
 801771a:	6891      	ldr	r1, [r2, #8]
 801771c:	7ffa      	ldrb	r2, [r7, #31]
 801771e:	0092      	lsls	r2, r2, #2
 8017720:	440a      	add	r2, r1
 8017722:	009b      	lsls	r3, r3, #2
 8017724:	3320      	adds	r3, #32
 8017726:	443b      	add	r3, r7
 8017728:	f853 3c18 	ldr.w	r3, [r3, #-24]
 801772c:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 801772e:	7ffb      	ldrb	r3, [r7, #31]
 8017730:	3301      	adds	r3, #1
 8017732:	77fb      	strb	r3, [r7, #31]
 8017734:	7ffb      	ldrb	r3, [r7, #31]
 8017736:	2b04      	cmp	r3, #4
 8017738:	d9ea      	bls.n	8017710 <MENU_Init+0x2d8>

	hmenu->pages[1].properties[1].name = AllocateString("INT. R");
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	68db      	ldr	r3, [r3, #12]
 801773e:	330c      	adds	r3, #12
 8017740:	689b      	ldr	r3, [r3, #8]
 8017742:	f103 040c 	add.w	r4, r3, #12
 8017746:	4864      	ldr	r0, [pc, #400]	@ (80178d8 <MENU_Init+0x4a0>)
 8017748:	f7ff fe2c 	bl	80173a4 <AllocateString>
 801774c:	4603      	mov	r3, r0
 801774e:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].packet_byte = 4;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	68db      	ldr	r3, [r3, #12]
 8017754:	330c      	adds	r3, #12
 8017756:	689b      	ldr	r3, [r3, #8]
 8017758:	330c      	adds	r3, #12
 801775a:	2204      	movs	r2, #4
 801775c:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[1].num_options = 5;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	68db      	ldr	r3, [r3, #12]
 8017762:	330c      	adds	r3, #12
 8017764:	689b      	ldr	r3, [r3, #8]
 8017766:	330c      	adds	r3, #12
 8017768:	2205      	movs	r2, #5
 801776a:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[1].option_names = AllocateStringArr(hmenu->pages[1].properties[1].num_options);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	68db      	ldr	r3, [r3, #12]
 8017770:	330c      	adds	r3, #12
 8017772:	689b      	ldr	r3, [r3, #8]
 8017774:	330c      	adds	r3, #12
 8017776:	795a      	ldrb	r2, [r3, #5]
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	68db      	ldr	r3, [r3, #12]
 801777c:	330c      	adds	r3, #12
 801777e:	689b      	ldr	r3, [r3, #8]
 8017780:	f103 040c 	add.w	r4, r3, #12
 8017784:	4610      	mov	r0, r2
 8017786:	f7ff fe24 	bl	80173d2 <AllocateStringArr>
 801778a:	4603      	mov	r3, r0
 801778c:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 801778e:	2300      	movs	r3, #0
 8017790:	77bb      	strb	r3, [r7, #30]
 8017792:	e012      	b.n	80177ba <MENU_Init+0x382>
		hmenu->pages[1].properties[1].option_names[i] = percentStr[i];
 8017794:	7fbb      	ldrb	r3, [r7, #30]
 8017796:	687a      	ldr	r2, [r7, #4]
 8017798:	68d2      	ldr	r2, [r2, #12]
 801779a:	320c      	adds	r2, #12
 801779c:	6892      	ldr	r2, [r2, #8]
 801779e:	320c      	adds	r2, #12
 80177a0:	6891      	ldr	r1, [r2, #8]
 80177a2:	7fba      	ldrb	r2, [r7, #30]
 80177a4:	0092      	lsls	r2, r2, #2
 80177a6:	440a      	add	r2, r1
 80177a8:	009b      	lsls	r3, r3, #2
 80177aa:	3320      	adds	r3, #32
 80177ac:	443b      	add	r3, r7
 80177ae:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80177b2:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 80177b4:	7fbb      	ldrb	r3, [r7, #30]
 80177b6:	3301      	adds	r3, #1
 80177b8:	77bb      	strb	r3, [r7, #30]
 80177ba:	7fbb      	ldrb	r3, [r7, #30]
 80177bc:	2b04      	cmp	r3, #4
 80177be:	d9e9      	bls.n	8017794 <MENU_Init+0x35c>

	hmenu->pages[1].properties[2].name = AllocateString("INT. G");
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	68db      	ldr	r3, [r3, #12]
 80177c4:	330c      	adds	r3, #12
 80177c6:	689b      	ldr	r3, [r3, #8]
 80177c8:	f103 0418 	add.w	r4, r3, #24
 80177cc:	4843      	ldr	r0, [pc, #268]	@ (80178dc <MENU_Init+0x4a4>)
 80177ce:	f7ff fde9 	bl	80173a4 <AllocateString>
 80177d2:	4603      	mov	r3, r0
 80177d4:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].packet_byte = 5;
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	68db      	ldr	r3, [r3, #12]
 80177da:	330c      	adds	r3, #12
 80177dc:	689b      	ldr	r3, [r3, #8]
 80177de:	3318      	adds	r3, #24
 80177e0:	2205      	movs	r2, #5
 80177e2:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[2].num_options = 5;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	68db      	ldr	r3, [r3, #12]
 80177e8:	330c      	adds	r3, #12
 80177ea:	689b      	ldr	r3, [r3, #8]
 80177ec:	3318      	adds	r3, #24
 80177ee:	2205      	movs	r2, #5
 80177f0:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[2].option_names = AllocateStringArr(hmenu->pages[1].properties[2].num_options);
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	330c      	adds	r3, #12
 80177f8:	689b      	ldr	r3, [r3, #8]
 80177fa:	3318      	adds	r3, #24
 80177fc:	795a      	ldrb	r2, [r3, #5]
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	68db      	ldr	r3, [r3, #12]
 8017802:	330c      	adds	r3, #12
 8017804:	689b      	ldr	r3, [r3, #8]
 8017806:	f103 0418 	add.w	r4, r3, #24
 801780a:	4610      	mov	r0, r2
 801780c:	f7ff fde1 	bl	80173d2 <AllocateStringArr>
 8017810:	4603      	mov	r3, r0
 8017812:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 8017814:	2300      	movs	r3, #0
 8017816:	777b      	strb	r3, [r7, #29]
 8017818:	e012      	b.n	8017840 <MENU_Init+0x408>
		hmenu->pages[1].properties[2].option_names[i] = percentStr[i];
 801781a:	7f7b      	ldrb	r3, [r7, #29]
 801781c:	687a      	ldr	r2, [r7, #4]
 801781e:	68d2      	ldr	r2, [r2, #12]
 8017820:	320c      	adds	r2, #12
 8017822:	6892      	ldr	r2, [r2, #8]
 8017824:	3218      	adds	r2, #24
 8017826:	6891      	ldr	r1, [r2, #8]
 8017828:	7f7a      	ldrb	r2, [r7, #29]
 801782a:	0092      	lsls	r2, r2, #2
 801782c:	440a      	add	r2, r1
 801782e:	009b      	lsls	r3, r3, #2
 8017830:	3320      	adds	r3, #32
 8017832:	443b      	add	r3, r7
 8017834:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8017838:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 801783a:	7f7b      	ldrb	r3, [r7, #29]
 801783c:	3301      	adds	r3, #1
 801783e:	777b      	strb	r3, [r7, #29]
 8017840:	7f7b      	ldrb	r3, [r7, #29]
 8017842:	2b04      	cmp	r3, #4
 8017844:	d9e9      	bls.n	801781a <MENU_Init+0x3e2>

	hmenu->pages[1].properties[3].name = AllocateString("INT. B");
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	68db      	ldr	r3, [r3, #12]
 801784a:	330c      	adds	r3, #12
 801784c:	689b      	ldr	r3, [r3, #8]
 801784e:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8017852:	4823      	ldr	r0, [pc, #140]	@ (80178e0 <MENU_Init+0x4a8>)
 8017854:	f7ff fda6 	bl	80173a4 <AllocateString>
 8017858:	4603      	mov	r3, r0
 801785a:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].packet_byte = 6;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	68db      	ldr	r3, [r3, #12]
 8017860:	330c      	adds	r3, #12
 8017862:	689b      	ldr	r3, [r3, #8]
 8017864:	3324      	adds	r3, #36	@ 0x24
 8017866:	2206      	movs	r2, #6
 8017868:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[3].num_options = 5;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	68db      	ldr	r3, [r3, #12]
 801786e:	330c      	adds	r3, #12
 8017870:	689b      	ldr	r3, [r3, #8]
 8017872:	3324      	adds	r3, #36	@ 0x24
 8017874:	2205      	movs	r2, #5
 8017876:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[3].option_names = AllocateStringArr(hmenu->pages[1].properties[3].num_options);
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	68db      	ldr	r3, [r3, #12]
 801787c:	330c      	adds	r3, #12
 801787e:	689b      	ldr	r3, [r3, #8]
 8017880:	3324      	adds	r3, #36	@ 0x24
 8017882:	795a      	ldrb	r2, [r3, #5]
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	68db      	ldr	r3, [r3, #12]
 8017888:	330c      	adds	r3, #12
 801788a:	689b      	ldr	r3, [r3, #8]
 801788c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8017890:	4610      	mov	r0, r2
 8017892:	f7ff fd9e 	bl	80173d2 <AllocateStringArr>
 8017896:	4603      	mov	r3, r0
 8017898:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 801789a:	2300      	movs	r3, #0
 801789c:	773b      	strb	r3, [r7, #28]
 801789e:	e012      	b.n	80178c6 <MENU_Init+0x48e>
		hmenu->pages[1].properties[3].option_names[i] = percentStr[i];
 80178a0:	7f3b      	ldrb	r3, [r7, #28]
 80178a2:	687a      	ldr	r2, [r7, #4]
 80178a4:	68d2      	ldr	r2, [r2, #12]
 80178a6:	320c      	adds	r2, #12
 80178a8:	6892      	ldr	r2, [r2, #8]
 80178aa:	3224      	adds	r2, #36	@ 0x24
 80178ac:	6891      	ldr	r1, [r2, #8]
 80178ae:	7f3a      	ldrb	r2, [r7, #28]
 80178b0:	0092      	lsls	r2, r2, #2
 80178b2:	440a      	add	r2, r1
 80178b4:	009b      	lsls	r3, r3, #2
 80178b6:	3320      	adds	r3, #32
 80178b8:	443b      	add	r3, r7
 80178ba:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80178be:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 80178c0:	7f3b      	ldrb	r3, [r7, #28]
 80178c2:	3301      	adds	r3, #1
 80178c4:	773b      	strb	r3, [r7, #28]
 80178c6:	7f3b      	ldrb	r3, [r7, #28]
 80178c8:	2b04      	cmp	r3, #4
 80178ca:	d9e9      	bls.n	80178a0 <MENU_Init+0x468>

	return 0;
 80178cc:	2300      	movs	r3, #0
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3724      	adds	r7, #36	@ 0x24
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd90      	pop	{r4, r7, pc}
 80178d6:	bf00      	nop
 80178d8:	0801b2c8 	.word	0x0801b2c8
 80178dc:	0801b2d0 	.word	0x0801b2d0
 80178e0:	0801b2d8 	.word	0x0801b2d8

080178e4 <MENU_Draw>:

uint8_t MENU_Draw(Menu_HandleTypeDef *hmenu, uint32_t delta_t) {
 80178e4:	b5b0      	push	{r4, r5, r7, lr}
 80178e6:	b08c      	sub	sp, #48	@ 0x30
 80178e8:	af02      	add	r7, sp, #8
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	6039      	str	r1, [r7, #0]
	// Do the animations
	if (hmenu->page_anim != 0xFF)
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	7d5b      	ldrb	r3, [r3, #21]
 80178f2:	2bff      	cmp	r3, #255	@ 0xff
 80178f4:	d005      	beq.n	8017902 <MENU_Draw+0x1e>
		hmenu->page_anim++;;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	7d5b      	ldrb	r3, [r3, #21]
 80178fa:	3301      	adds	r3, #1
 80178fc:	b2da      	uxtb	r2, r3
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	755a      	strb	r2, [r3, #21]

	if (hmenu->property_anim != 0xFF)
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	7e1b      	ldrb	r3, [r3, #24]
 8017906:	2bff      	cmp	r3, #255	@ 0xff
 8017908:	d005      	beq.n	8017916 <MENU_Draw+0x32>
		hmenu->property_anim++;
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	7e1b      	ldrb	r3, [r3, #24]
 801790e:	3301      	adds	r3, #1
 8017910:	b2da      	uxtb	r2, r3
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	761a      	strb	r2, [r3, #24]

	Menu_Page 	  activePage = hmenu->pages[hmenu->current_page];
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	68da      	ldr	r2, [r3, #12]
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	7d1b      	ldrb	r3, [r3, #20]
 801791e:	4619      	mov	r1, r3
 8017920:	460b      	mov	r3, r1
 8017922:	005b      	lsls	r3, r3, #1
 8017924:	440b      	add	r3, r1
 8017926:	009b      	lsls	r3, r3, #2
 8017928:	441a      	add	r2, r3
 801792a:	f107 0314 	add.w	r3, r7, #20
 801792e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Menu_Property activeProperty = activePage.properties[hmenu->current_property];
 8017934:	69fa      	ldr	r2, [r7, #28]
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	7d9b      	ldrb	r3, [r3, #22]
 801793a:	4619      	mov	r1, r3
 801793c:	460b      	mov	r3, r1
 801793e:	005b      	lsls	r3, r3, #1
 8017940:	440b      	add	r3, r1
 8017942:	009b      	lsls	r3, r3, #2
 8017944:	441a      	add	r2, r3
 8017946:	f107 0308 	add.w	r3, r7, #8
 801794a:	ca07      	ldmia	r2, {r0, r1, r2}
 801794c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Draw the title on the left
	hmenu->ssdL_handle->str_cursor = (128 - strlen(activePage.title)*6);
 8017950:	697b      	ldr	r3, [r7, #20]
 8017952:	4618      	mov	r0, r3
 8017954:	f7e8 fcc4 	bl	80002e0 <strlen>
 8017958:	4603      	mov	r3, r0
 801795a:	b29b      	uxth	r3, r3
 801795c:	461a      	mov	r2, r3
 801795e:	0052      	lsls	r2, r2, #1
 8017960:	4413      	add	r3, r2
 8017962:	005b      	lsls	r3, r3, #1
 8017964:	b29a      	uxth	r2, r3
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	f1c2 0280 	rsb	r2, r2, #128	@ 0x80
 801796e:	b292      	uxth	r2, r2
 8017970:	821a      	strh	r2, [r3, #16]
	MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6819      	ldr	r1, [r3, #0]
 8017976:	697a      	ldr	r2, [r7, #20]
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	7d5b      	ldrb	r3, [r3, #21]
 801797c:	2000      	movs	r0, #0
 801797e:	9000      	str	r0, [sp, #0]
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f000 f9ca 	bl	8017d1a <MENU_AnimateString>
			activePage.title,
			hmenu->page_anim, 0);


	for (uint8_t i = 0; i < activePage.num_properties; i++) {
 8017986:	2300      	movs	r3, #0
 8017988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801798c:	e0bf      	b.n	8017b0e <MENU_Draw+0x22a>
		// Draw the properties
		// Compute offset using property anim
		hmenu->ssdL_handle->str_cursor = 16 + (2+i)*128;
 801798e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017992:	3302      	adds	r3, #2
 8017994:	b29b      	uxth	r3, r3
 8017996:	01db      	lsls	r3, r3, #7
 8017998:	b29a      	uxth	r2, r3
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	3210      	adds	r2, #16
 80179a0:	b292      	uxth	r2, r2
 80179a2:	821a      	strh	r2, [r3, #16]
		if (i == hmenu->current_property) {
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	7d9b      	ldrb	r3, [r3, #22]
 80179a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d112      	bne.n	80179d6 <MENU_Draw+0xf2>
			uint8_t num_bars = hmenu->property_anim;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	7e1b      	ldrb	r3, [r3, #24]
 80179b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (num_bars > 3) num_bars = 3;
 80179b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80179bc:	2b03      	cmp	r3, #3
 80179be:	d902      	bls.n	80179c6 <MENU_Draw+0xe2>
 80179c0:	2303      	movs	r3, #3
 80179c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			SSD1306_DrawString(hmenu->ssdL_handle, ">> ", num_bars);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80179ce:	4978      	ldr	r1, [pc, #480]	@ (8017bb0 <MENU_Draw+0x2cc>)
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7eb fa87 	bl	8002ee4 <SSD1306_DrawString>
		}

		// De-animate the previous property
		if (i == hmenu->last_property && hmenu->property_anim/2 <= 2) {
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	7ddb      	ldrb	r3, [r3, #23]
 80179da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80179de:	429a      	cmp	r2, r3
 80179e0:	d11a      	bne.n	8017a18 <MENU_Draw+0x134>
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	7e1b      	ldrb	r3, [r3, #24]
 80179e6:	2b05      	cmp	r3, #5
 80179e8:	d816      	bhi.n	8017a18 <MENU_Draw+0x134>
			uint8_t num_bars = 2 - hmenu->property_anim/2;
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	7e1b      	ldrb	r3, [r3, #24]
 80179ee:	085b      	lsrs	r3, r3, #1
 80179f0:	b2db      	uxtb	r3, r3
 80179f2:	f1c3 0302 	rsb	r3, r3, #2
 80179f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			if (num_bars > 2) num_bars = 2;
 80179fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80179fe:	2b02      	cmp	r3, #2
 8017a00:	d902      	bls.n	8017a08 <MENU_Draw+0x124>
 8017a02:	2302      	movs	r3, #2
 8017a04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			SSD1306_DrawString(hmenu->ssdL_handle, ">> ", num_bars);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8017a10:	4967      	ldr	r1, [pc, #412]	@ (8017bb0 <MENU_Draw+0x2cc>)
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7eb fa66 	bl	8002ee4 <SSD1306_DrawString>
		}

		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	6818      	ldr	r0, [r3, #0]
				activePage.properties[i].name,
 8017a1c:	69f9      	ldr	r1, [r7, #28]
 8017a1e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a22:	4613      	mov	r3, r2
 8017a24:	005b      	lsls	r3, r3, #1
 8017a26:	4413      	add	r3, r2
 8017a28:	009b      	lsls	r3, r3, #2
 8017a2a:	440b      	add	r3, r1
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017a2c:	681a      	ldr	r2, [r3, #0]
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	7d59      	ldrb	r1, [r3, #21]
 8017a32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017a36:	3303      	adds	r3, #3
 8017a38:	b2db      	uxtb	r3, r3
 8017a3a:	005b      	lsls	r3, r3, #1
 8017a3c:	b2db      	uxtb	r3, r3
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	460b      	mov	r3, r1
 8017a42:	4601      	mov	r1, r0
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f000 f968 	bl	8017d1a <MENU_AnimateString>
				hmenu->page_anim, 6+i*2);

		// Draw the values these properties have
		uint8_t op_value = hmenu->state_packet[activePage.properties[i].packet_byte];
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	6919      	ldr	r1, [r3, #16]
 8017a4e:	69f8      	ldr	r0, [r7, #28]
 8017a50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a54:	4613      	mov	r3, r2
 8017a56:	005b      	lsls	r3, r3, #1
 8017a58:	4413      	add	r3, r2
 8017a5a:	009b      	lsls	r3, r3, #2
 8017a5c:	4403      	add	r3, r0
 8017a5e:	791b      	ldrb	r3, [r3, #4]
 8017a60:	440b      	add	r3, r1
 8017a62:	781b      	ldrb	r3, [r3, #0]
 8017a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		if (op_value < activePage.properties[i].num_options) {
 8017a68:	69f9      	ldr	r1, [r7, #28]
 8017a6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a6e:	4613      	mov	r3, r2
 8017a70:	005b      	lsls	r3, r3, #1
 8017a72:	4413      	add	r3, r2
 8017a74:	009b      	lsls	r3, r3, #2
 8017a76:	440b      	add	r3, r1
 8017a78:	795b      	ldrb	r3, [r3, #5]
 8017a7a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	d240      	bcs.n	8017b04 <MENU_Draw+0x220>
			hmenu->ssdL_handle->str_cursor = (3+i)*128 - strlen(activePage.properties[i].option_names[op_value])*6;
 8017a82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017a86:	3303      	adds	r3, #3
 8017a88:	b29b      	uxth	r3, r3
 8017a8a:	01db      	lsls	r3, r3, #7
 8017a8c:	b29c      	uxth	r4, r3
 8017a8e:	69f9      	ldr	r1, [r7, #28]
 8017a90:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a94:	4613      	mov	r3, r2
 8017a96:	005b      	lsls	r3, r3, #1
 8017a98:	4413      	add	r3, r2
 8017a9a:	009b      	lsls	r3, r3, #2
 8017a9c:	440b      	add	r3, r1
 8017a9e:	689a      	ldr	r2, [r3, #8]
 8017aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017aa4:	009b      	lsls	r3, r3, #2
 8017aa6:	4413      	add	r3, r2
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7e8 fc18 	bl	80002e0 <strlen>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	b29b      	uxth	r3, r3
 8017ab4:	461a      	mov	r2, r3
 8017ab6:	0052      	lsls	r2, r2, #1
 8017ab8:	4413      	add	r3, r2
 8017aba:	005b      	lsls	r3, r3, #1
 8017abc:	b29a      	uxth	r2, r3
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	1aa2      	subs	r2, r4, r2
 8017ac4:	b292      	uxth	r2, r2
 8017ac6:	821a      	strh	r2, [r3, #16]
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	6818      	ldr	r0, [r3, #0]
					activePage.properties[i].option_names[op_value],
 8017acc:	69f9      	ldr	r1, [r7, #28]
 8017ace:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017ad2:	4613      	mov	r3, r2
 8017ad4:	005b      	lsls	r3, r3, #1
 8017ad6:	4413      	add	r3, r2
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	440b      	add	r3, r1
 8017adc:	689a      	ldr	r2, [r3, #8]
 8017ade:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017ae2:	009b      	lsls	r3, r3, #2
 8017ae4:	4413      	add	r3, r2
			MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8017ae6:	681a      	ldr	r2, [r3, #0]
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	7d59      	ldrb	r1, [r3, #21]
 8017aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017af0:	3303      	adds	r3, #3
 8017af2:	b2db      	uxtb	r3, r3
 8017af4:	005b      	lsls	r3, r3, #1
 8017af6:	b2db      	uxtb	r3, r3
 8017af8:	9300      	str	r3, [sp, #0]
 8017afa:	460b      	mov	r3, r1
 8017afc:	4601      	mov	r1, r0
 8017afe:	6878      	ldr	r0, [r7, #4]
 8017b00:	f000 f90b 	bl	8017d1a <MENU_AnimateString>
	for (uint8_t i = 0; i < activePage.num_properties; i++) {
 8017b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017b08:	3301      	adds	r3, #1
 8017b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017b0e:	7e3b      	ldrb	r3, [r7, #24]
 8017b10:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017b14:	429a      	cmp	r2, r3
 8017b16:	f4ff af3a 	bcc.w	801798e <MENU_Draw+0xaa>
					hmenu->page_anim, 6+i*2);
		}
	}

	// Draw the selected property on the RIGHT
	hmenu->ssdR_handle->str_cursor = 0;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	685b      	ldr	r3, [r3, #4]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	821a      	strh	r2, [r3, #16]
	MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	6859      	ldr	r1, [r3, #4]
 8017b26:	68ba      	ldr	r2, [r7, #8]
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	7e1b      	ldrb	r3, [r3, #24]
 8017b2c:	2001      	movs	r0, #1
 8017b2e:	9000      	str	r0, [sp, #0]
 8017b30:	6878      	ldr	r0, [r7, #4]
 8017b32:	f000 f8f2 	bl	8017d1a <MENU_AnimateString>
				activeProperty.name,
				hmenu->property_anim, 1);

	// Draw the selected option on the right
	uint8_t op_value = hmenu->state_packet[activeProperty.packet_byte];
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	691b      	ldr	r3, [r3, #16]
 8017b3a:	7b3a      	ldrb	r2, [r7, #12]
 8017b3c:	4413      	add	r3, r2
 8017b3e:	781b      	ldrb	r3, [r3, #0]
 8017b40:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if (op_value < activeProperty.num_options) {
 8017b44:	7b7b      	ldrb	r3, [r7, #13]
 8017b46:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8017b4a:	429a      	cmp	r2, r3
 8017b4c:	d22a      	bcs.n	8017ba4 <MENU_Draw+0x2c0>
		hmenu->ssdR_handle->str_cursor = 2*128;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	685b      	ldr	r3, [r3, #4]
 8017b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017b56:	821a      	strh	r2, [r3, #16]
		SSD1306_DrawString(hmenu->ssdR_handle, "> ", 2);
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	685b      	ldr	r3, [r3, #4]
 8017b5c:	2202      	movs	r2, #2
 8017b5e:	4915      	ldr	r1, [pc, #84]	@ (8017bb4 <MENU_Draw+0x2d0>)
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7eb f9bf 	bl	8002ee4 <SSD1306_DrawString>
		SSD1306_DrawString(hmenu->ssdR_handle, activeProperty.option_names[op_value], strlen(activeProperty.option_names[op_value]));
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	685c      	ldr	r4, [r3, #4]
 8017b6a:	693a      	ldr	r2, [r7, #16]
 8017b6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017b70:	009b      	lsls	r3, r3, #2
 8017b72:	4413      	add	r3, r2
 8017b74:	681d      	ldr	r5, [r3, #0]
 8017b76:	693a      	ldr	r2, [r7, #16]
 8017b78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017b7c:	009b      	lsls	r3, r3, #2
 8017b7e:	4413      	add	r3, r2
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	4618      	mov	r0, r3
 8017b84:	f7e8 fbac 	bl	80002e0 <strlen>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	b2db      	uxtb	r3, r3
 8017b8c:	461a      	mov	r2, r3
 8017b8e:	4629      	mov	r1, r5
 8017b90:	4620      	mov	r0, r4
 8017b92:	f7eb f9a7 	bl	8002ee4 <SSD1306_DrawString>
		SSD1306_DrawString(hmenu->ssdR_handle, " <", 2);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	685b      	ldr	r3, [r3, #4]
 8017b9a:	2202      	movs	r2, #2
 8017b9c:	4906      	ldr	r1, [pc, #24]	@ (8017bb8 <MENU_Draw+0x2d4>)
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7eb f9a0 	bl	8002ee4 <SSD1306_DrawString>
	}

}
 8017ba4:	bf00      	nop
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	3728      	adds	r7, #40	@ 0x28
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bdb0      	pop	{r4, r5, r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	0801b2e0 	.word	0x0801b2e0
 8017bb4:	0801b2e4 	.word	0x0801b2e4
 8017bb8:	0801b2e8 	.word	0x0801b2e8

08017bbc <MENU_ParseInput>:

void MENU_ParseInput(Menu_HandleTypeDef *hmenu, uint8_t inputs[4]) {
 8017bbc:	b480      	push	{r7}
 8017bbe:	b087      	sub	sp, #28
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
 8017bc4:	6039      	str	r1, [r7, #0]
	if (inputs[0]) {
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	781b      	ldrb	r3, [r3, #0]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d01d      	beq.n	8017c0a <MENU_ParseInput+0x4e>
		if (hmenu->current_page == 0) {
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	7d1b      	ldrb	r3, [r3, #20]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d106      	bne.n	8017be4 <MENU_ParseInput+0x28>
			hmenu->current_page = hmenu->num_pages - 1;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	7a1b      	ldrb	r3, [r3, #8]
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	b2da      	uxtb	r2, r3
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	751a      	strb	r2, [r3, #20]
 8017be2:	e005      	b.n	8017bf0 <MENU_ParseInput+0x34>
		} else {
			hmenu->current_page--;
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	7d1b      	ldrb	r3, [r3, #20]
 8017be8:	3b01      	subs	r3, #1
 8017bea:	b2da      	uxtb	r2, r3
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	751a      	strb	r2, [r3, #20]
		}
		hmenu->page_anim = 0;
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	755a      	strb	r2, [r3, #21]
		hmenu->property_anim = 0;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	761a      	strb	r2, [r3, #24]
		hmenu->current_property = 0;
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	2200      	movs	r2, #0
 8017c00:	759a      	strb	r2, [r3, #22]
		hmenu->last_property = 0xFF;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	22ff      	movs	r2, #255	@ 0xff
 8017c06:	75da      	strb	r2, [r3, #23]
 8017c08:	e022      	b.n	8017c50 <MENU_ParseInput+0x94>
	} else if (inputs[1]) {
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	3301      	adds	r3, #1
 8017c0e:	781b      	ldrb	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d01d      	beq.n	8017c50 <MENU_ParseInput+0x94>
		if (hmenu->current_page == hmenu->num_pages - 1) {
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	7d1b      	ldrb	r3, [r3, #20]
 8017c18:	461a      	mov	r2, r3
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	7a1b      	ldrb	r3, [r3, #8]
 8017c1e:	3b01      	subs	r3, #1
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d103      	bne.n	8017c2c <MENU_ParseInput+0x70>
			hmenu->current_page = 0;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	2200      	movs	r2, #0
 8017c28:	751a      	strb	r2, [r3, #20]
 8017c2a:	e005      	b.n	8017c38 <MENU_ParseInput+0x7c>
		} else {
			hmenu->current_page++;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	7d1b      	ldrb	r3, [r3, #20]
 8017c30:	3301      	adds	r3, #1
 8017c32:	b2da      	uxtb	r2, r3
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	751a      	strb	r2, [r3, #20]
		}
		hmenu->page_anim = 0;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	755a      	strb	r2, [r3, #21]
		hmenu->property_anim = 0;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	2200      	movs	r2, #0
 8017c42:	761a      	strb	r2, [r3, #24]
		hmenu->current_property = 0;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	2200      	movs	r2, #0
 8017c48:	759a      	strb	r2, [r3, #22]
		hmenu->last_property = 0xFF;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	22ff      	movs	r2, #255	@ 0xff
 8017c4e:	75da      	strb	r2, [r3, #23]
	}

	if (inputs[3]) {
 8017c50:	683b      	ldr	r3, [r7, #0]
 8017c52:	3303      	adds	r3, #3
 8017c54:	781b      	ldrb	r3, [r3, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d021      	beq.n	8017c9e <MENU_ParseInput+0xe2>
		hmenu->last_property = hmenu->current_property;
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	7d9a      	ldrb	r2, [r3, #22]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	75da      	strb	r2, [r3, #23]
		if (hmenu->current_property == hmenu->pages[hmenu->current_page].num_properties - 1)
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	7d9b      	ldrb	r3, [r3, #22]
 8017c66:	4618      	mov	r0, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	68da      	ldr	r2, [r3, #12]
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	7d1b      	ldrb	r3, [r3, #20]
 8017c70:	4619      	mov	r1, r3
 8017c72:	460b      	mov	r3, r1
 8017c74:	005b      	lsls	r3, r3, #1
 8017c76:	440b      	add	r3, r1
 8017c78:	009b      	lsls	r3, r3, #2
 8017c7a:	4413      	add	r3, r2
 8017c7c:	791b      	ldrb	r3, [r3, #4]
 8017c7e:	3b01      	subs	r3, #1
 8017c80:	4298      	cmp	r0, r3
 8017c82:	d103      	bne.n	8017c8c <MENU_ParseInput+0xd0>
			hmenu->current_property = 0;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2200      	movs	r2, #0
 8017c88:	759a      	strb	r2, [r3, #22]
 8017c8a:	e005      	b.n	8017c98 <MENU_ParseInput+0xdc>
		else
			hmenu->current_property++;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	7d9b      	ldrb	r3, [r3, #22]
 8017c90:	3301      	adds	r3, #1
 8017c92:	b2da      	uxtb	r2, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	759a      	strb	r2, [r3, #22]
		hmenu->property_anim = 0;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	761a      	strb	r2, [r3, #24]
	}

	if (inputs[2]) {
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	3302      	adds	r3, #2
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d032      	beq.n	8017d0e <MENU_ParseInput+0x152>
		Menu_Property activeProperty = hmenu->pages[hmenu->current_page].properties[hmenu->current_property];
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	68da      	ldr	r2, [r3, #12]
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	7d1b      	ldrb	r3, [r3, #20]
 8017cb0:	4619      	mov	r1, r3
 8017cb2:	460b      	mov	r3, r1
 8017cb4:	005b      	lsls	r3, r3, #1
 8017cb6:	440b      	add	r3, r1
 8017cb8:	009b      	lsls	r3, r3, #2
 8017cba:	4413      	add	r3, r2
 8017cbc:	689a      	ldr	r2, [r3, #8]
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	7d9b      	ldrb	r3, [r3, #22]
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	460b      	mov	r3, r1
 8017cc6:	005b      	lsls	r3, r3, #1
 8017cc8:	440b      	add	r3, r1
 8017cca:	009b      	lsls	r3, r3, #2
 8017ccc:	441a      	add	r2, r3
 8017cce:	f107 0308 	add.w	r3, r7, #8
 8017cd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8017cd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		uint8_t propertyByte = activeProperty.packet_byte;
 8017cd8:	7b3b      	ldrb	r3, [r7, #12]
 8017cda:	75fb      	strb	r3, [r7, #23]
		if (hmenu->state_packet[propertyByte] == activeProperty.num_options - 1)
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	691a      	ldr	r2, [r3, #16]
 8017ce0:	7dfb      	ldrb	r3, [r7, #23]
 8017ce2:	4413      	add	r3, r2
 8017ce4:	781b      	ldrb	r3, [r3, #0]
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	7b7b      	ldrb	r3, [r7, #13]
 8017cea:	3b01      	subs	r3, #1
 8017cec:	429a      	cmp	r2, r3
 8017cee:	d106      	bne.n	8017cfe <MENU_ParseInput+0x142>
			hmenu->state_packet[propertyByte] = 0;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	691a      	ldr	r2, [r3, #16]
 8017cf4:	7dfb      	ldrb	r3, [r7, #23]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	701a      	strb	r2, [r3, #0]
		else
			hmenu->state_packet[propertyByte]++;
	}
}
 8017cfc:	e007      	b.n	8017d0e <MENU_ParseInput+0x152>
			hmenu->state_packet[propertyByte]++;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	691a      	ldr	r2, [r3, #16]
 8017d02:	7dfb      	ldrb	r3, [r7, #23]
 8017d04:	4413      	add	r3, r2
 8017d06:	781a      	ldrb	r2, [r3, #0]
 8017d08:	3201      	adds	r2, #1
 8017d0a:	b2d2      	uxtb	r2, r2
 8017d0c:	701a      	strb	r2, [r3, #0]
}
 8017d0e:	bf00      	nop
 8017d10:	371c      	adds	r7, #28
 8017d12:	46bd      	mov	sp, r7
 8017d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d18:	4770      	bx	lr

08017d1a <MENU_AnimateString>:

void MENU_AnimateString(Menu_HandleTypeDef *hmenu, SSD1306_HandleTypeDef *hssd, uint8_t *str, uint8_t anim_val, uint8_t anim_start) {
 8017d1a:	b580      	push	{r7, lr}
 8017d1c:	b086      	sub	sp, #24
 8017d1e:	af00      	add	r7, sp, #0
 8017d20:	60f8      	str	r0, [r7, #12]
 8017d22:	60b9      	str	r1, [r7, #8]
 8017d24:	607a      	str	r2, [r7, #4]
 8017d26:	70fb      	strb	r3, [r7, #3]
	if (hmenu->page_anim < anim_start) return;
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	7d5b      	ldrb	r3, [r3, #21]
 8017d2c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017d30:	429a      	cmp	r2, r3
 8017d32:	d817      	bhi.n	8017d64 <MENU_AnimateString+0x4a>
	uint8_t min_len = strlen(str);
 8017d34:	6878      	ldr	r0, [r7, #4]
 8017d36:	f7e8 fad3 	bl	80002e0 <strlen>
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	75fb      	strb	r3, [r7, #23]
	if (min_len > anim_val - anim_start)
 8017d3e:	7dfa      	ldrb	r2, [r7, #23]
 8017d40:	78f9      	ldrb	r1, [r7, #3]
 8017d42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017d46:	1acb      	subs	r3, r1, r3
 8017d48:	429a      	cmp	r2, r3
 8017d4a:	dd04      	ble.n	8017d56 <MENU_AnimateString+0x3c>
		min_len = anim_val - anim_start;
 8017d4c:	78fa      	ldrb	r2, [r7, #3]
 8017d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017d52:	1ad3      	subs	r3, r2, r3
 8017d54:	75fb      	strb	r3, [r7, #23]

	SSD1306_DrawString(hssd, str, min_len);
 8017d56:	7dfb      	ldrb	r3, [r7, #23]
 8017d58:	461a      	mov	r2, r3
 8017d5a:	6879      	ldr	r1, [r7, #4]
 8017d5c:	68b8      	ldr	r0, [r7, #8]
 8017d5e:	f7eb f8c1 	bl	8002ee4 <SSD1306_DrawString>
 8017d62:	e000      	b.n	8017d66 <MENU_AnimateString+0x4c>
	if (hmenu->page_anim < anim_start) return;
 8017d64:	bf00      	nop
}
 8017d66:	3718      	adds	r7, #24
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}

08017d6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b084      	sub	sp, #16
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
 8017d74:	460b      	mov	r3, r1
 8017d76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017d78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8017d7c:	f002 fd08 	bl	801a790 <USBD_static_malloc>
 8017d80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d109      	bne.n	8017d9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	32b0      	adds	r2, #176	@ 0xb0
 8017d92:	2100      	movs	r1, #0
 8017d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8017d98:	2302      	movs	r3, #2
 8017d9a:	e0d4      	b.n	8017f46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8017d9c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8017da0:	2100      	movs	r1, #0
 8017da2:	68f8      	ldr	r0, [r7, #12]
 8017da4:	f002 fe10 	bl	801a9c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	32b0      	adds	r2, #176	@ 0xb0
 8017db2:	68f9      	ldr	r1, [r7, #12]
 8017db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	32b0      	adds	r2, #176	@ 0xb0
 8017dc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	7c1b      	ldrb	r3, [r3, #16]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d138      	bne.n	8017e46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8017f50 <USBD_CDC_Init+0x1e4>)
 8017dd6:	7819      	ldrb	r1, [r3, #0]
 8017dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017ddc:	2202      	movs	r2, #2
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f002 fbb3 	bl	801a54a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017de4:	4b5a      	ldr	r3, [pc, #360]	@ (8017f50 <USBD_CDC_Init+0x1e4>)
 8017de6:	781b      	ldrb	r3, [r3, #0]
 8017de8:	f003 020f 	and.w	r2, r3, #15
 8017dec:	6879      	ldr	r1, [r7, #4]
 8017dee:	4613      	mov	r3, r2
 8017df0:	009b      	lsls	r3, r3, #2
 8017df2:	4413      	add	r3, r2
 8017df4:	009b      	lsls	r3, r3, #2
 8017df6:	440b      	add	r3, r1
 8017df8:	3324      	adds	r3, #36	@ 0x24
 8017dfa:	2201      	movs	r2, #1
 8017dfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017dfe:	4b55      	ldr	r3, [pc, #340]	@ (8017f54 <USBD_CDC_Init+0x1e8>)
 8017e00:	7819      	ldrb	r1, [r3, #0]
 8017e02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017e06:	2202      	movs	r2, #2
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	f002 fb9e 	bl	801a54a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017e0e:	4b51      	ldr	r3, [pc, #324]	@ (8017f54 <USBD_CDC_Init+0x1e8>)
 8017e10:	781b      	ldrb	r3, [r3, #0]
 8017e12:	f003 020f 	and.w	r2, r3, #15
 8017e16:	6879      	ldr	r1, [r7, #4]
 8017e18:	4613      	mov	r3, r2
 8017e1a:	009b      	lsls	r3, r3, #2
 8017e1c:	4413      	add	r3, r2
 8017e1e:	009b      	lsls	r3, r3, #2
 8017e20:	440b      	add	r3, r1
 8017e22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017e26:	2201      	movs	r2, #1
 8017e28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8017f58 <USBD_CDC_Init+0x1ec>)
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	f003 020f 	and.w	r2, r3, #15
 8017e32:	6879      	ldr	r1, [r7, #4]
 8017e34:	4613      	mov	r3, r2
 8017e36:	009b      	lsls	r3, r3, #2
 8017e38:	4413      	add	r3, r2
 8017e3a:	009b      	lsls	r3, r3, #2
 8017e3c:	440b      	add	r3, r1
 8017e3e:	3326      	adds	r3, #38	@ 0x26
 8017e40:	2210      	movs	r2, #16
 8017e42:	801a      	strh	r2, [r3, #0]
 8017e44:	e035      	b.n	8017eb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017e46:	4b42      	ldr	r3, [pc, #264]	@ (8017f50 <USBD_CDC_Init+0x1e4>)
 8017e48:	7819      	ldrb	r1, [r3, #0]
 8017e4a:	2340      	movs	r3, #64	@ 0x40
 8017e4c:	2202      	movs	r2, #2
 8017e4e:	6878      	ldr	r0, [r7, #4]
 8017e50:	f002 fb7b 	bl	801a54a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017e54:	4b3e      	ldr	r3, [pc, #248]	@ (8017f50 <USBD_CDC_Init+0x1e4>)
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	f003 020f 	and.w	r2, r3, #15
 8017e5c:	6879      	ldr	r1, [r7, #4]
 8017e5e:	4613      	mov	r3, r2
 8017e60:	009b      	lsls	r3, r3, #2
 8017e62:	4413      	add	r3, r2
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	440b      	add	r3, r1
 8017e68:	3324      	adds	r3, #36	@ 0x24
 8017e6a:	2201      	movs	r2, #1
 8017e6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017e6e:	4b39      	ldr	r3, [pc, #228]	@ (8017f54 <USBD_CDC_Init+0x1e8>)
 8017e70:	7819      	ldrb	r1, [r3, #0]
 8017e72:	2340      	movs	r3, #64	@ 0x40
 8017e74:	2202      	movs	r2, #2
 8017e76:	6878      	ldr	r0, [r7, #4]
 8017e78:	f002 fb67 	bl	801a54a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017e7c:	4b35      	ldr	r3, [pc, #212]	@ (8017f54 <USBD_CDC_Init+0x1e8>)
 8017e7e:	781b      	ldrb	r3, [r3, #0]
 8017e80:	f003 020f 	and.w	r2, r3, #15
 8017e84:	6879      	ldr	r1, [r7, #4]
 8017e86:	4613      	mov	r3, r2
 8017e88:	009b      	lsls	r3, r3, #2
 8017e8a:	4413      	add	r3, r2
 8017e8c:	009b      	lsls	r3, r3, #2
 8017e8e:	440b      	add	r3, r1
 8017e90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017e94:	2201      	movs	r2, #1
 8017e96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017e98:	4b2f      	ldr	r3, [pc, #188]	@ (8017f58 <USBD_CDC_Init+0x1ec>)
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	f003 020f 	and.w	r2, r3, #15
 8017ea0:	6879      	ldr	r1, [r7, #4]
 8017ea2:	4613      	mov	r3, r2
 8017ea4:	009b      	lsls	r3, r3, #2
 8017ea6:	4413      	add	r3, r2
 8017ea8:	009b      	lsls	r3, r3, #2
 8017eaa:	440b      	add	r3, r1
 8017eac:	3326      	adds	r3, #38	@ 0x26
 8017eae:	2210      	movs	r2, #16
 8017eb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017eb2:	4b29      	ldr	r3, [pc, #164]	@ (8017f58 <USBD_CDC_Init+0x1ec>)
 8017eb4:	7819      	ldrb	r1, [r3, #0]
 8017eb6:	2308      	movs	r3, #8
 8017eb8:	2203      	movs	r2, #3
 8017eba:	6878      	ldr	r0, [r7, #4]
 8017ebc:	f002 fb45 	bl	801a54a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8017ec0:	4b25      	ldr	r3, [pc, #148]	@ (8017f58 <USBD_CDC_Init+0x1ec>)
 8017ec2:	781b      	ldrb	r3, [r3, #0]
 8017ec4:	f003 020f 	and.w	r2, r3, #15
 8017ec8:	6879      	ldr	r1, [r7, #4]
 8017eca:	4613      	mov	r3, r2
 8017ecc:	009b      	lsls	r3, r3, #2
 8017ece:	4413      	add	r3, r2
 8017ed0:	009b      	lsls	r3, r3, #2
 8017ed2:	440b      	add	r3, r1
 8017ed4:	3324      	adds	r3, #36	@ 0x24
 8017ed6:	2201      	movs	r2, #1
 8017ed8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	2200      	movs	r2, #0
 8017ede:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017ee8:	687a      	ldr	r2, [r7, #4]
 8017eea:	33b0      	adds	r3, #176	@ 0xb0
 8017eec:	009b      	lsls	r3, r3, #2
 8017eee:	4413      	add	r3, r2
 8017ef0:	685b      	ldr	r3, [r3, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	2200      	movs	r2, #0
 8017efa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	2200      	movs	r2, #0
 8017f02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d101      	bne.n	8017f14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8017f10:	2302      	movs	r3, #2
 8017f12:	e018      	b.n	8017f46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	7c1b      	ldrb	r3, [r3, #16]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d10a      	bne.n	8017f32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8017f54 <USBD_CDC_Init+0x1e8>)
 8017f1e:	7819      	ldrb	r1, [r3, #0]
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017f2a:	6878      	ldr	r0, [r7, #4]
 8017f2c:	f002 fbfc 	bl	801a728 <USBD_LL_PrepareReceive>
 8017f30:	e008      	b.n	8017f44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017f32:	4b08      	ldr	r3, [pc, #32]	@ (8017f54 <USBD_CDC_Init+0x1e8>)
 8017f34:	7819      	ldrb	r1, [r3, #0]
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017f3c:	2340      	movs	r3, #64	@ 0x40
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f002 fbf2 	bl	801a728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017f44:	2300      	movs	r3, #0
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3710      	adds	r7, #16
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop
 8017f50:	240002d7 	.word	0x240002d7
 8017f54:	240002d8 	.word	0x240002d8
 8017f58:	240002d9 	.word	0x240002d9

08017f5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b082      	sub	sp, #8
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
 8017f64:	460b      	mov	r3, r1
 8017f66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8017f68:	4b3a      	ldr	r3, [pc, #232]	@ (8018054 <USBD_CDC_DeInit+0xf8>)
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f002 fb11 	bl	801a596 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8017f74:	4b37      	ldr	r3, [pc, #220]	@ (8018054 <USBD_CDC_DeInit+0xf8>)
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	f003 020f 	and.w	r2, r3, #15
 8017f7c:	6879      	ldr	r1, [r7, #4]
 8017f7e:	4613      	mov	r3, r2
 8017f80:	009b      	lsls	r3, r3, #2
 8017f82:	4413      	add	r3, r2
 8017f84:	009b      	lsls	r3, r3, #2
 8017f86:	440b      	add	r3, r1
 8017f88:	3324      	adds	r3, #36	@ 0x24
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8017f8e:	4b32      	ldr	r3, [pc, #200]	@ (8018058 <USBD_CDC_DeInit+0xfc>)
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	4619      	mov	r1, r3
 8017f94:	6878      	ldr	r0, [r7, #4]
 8017f96:	f002 fafe 	bl	801a596 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8017f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8018058 <USBD_CDC_DeInit+0xfc>)
 8017f9c:	781b      	ldrb	r3, [r3, #0]
 8017f9e:	f003 020f 	and.w	r2, r3, #15
 8017fa2:	6879      	ldr	r1, [r7, #4]
 8017fa4:	4613      	mov	r3, r2
 8017fa6:	009b      	lsls	r3, r3, #2
 8017fa8:	4413      	add	r3, r2
 8017faa:	009b      	lsls	r3, r3, #2
 8017fac:	440b      	add	r3, r1
 8017fae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8017fb6:	4b29      	ldr	r3, [pc, #164]	@ (801805c <USBD_CDC_DeInit+0x100>)
 8017fb8:	781b      	ldrb	r3, [r3, #0]
 8017fba:	4619      	mov	r1, r3
 8017fbc:	6878      	ldr	r0, [r7, #4]
 8017fbe:	f002 faea 	bl	801a596 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8017fc2:	4b26      	ldr	r3, [pc, #152]	@ (801805c <USBD_CDC_DeInit+0x100>)
 8017fc4:	781b      	ldrb	r3, [r3, #0]
 8017fc6:	f003 020f 	and.w	r2, r3, #15
 8017fca:	6879      	ldr	r1, [r7, #4]
 8017fcc:	4613      	mov	r3, r2
 8017fce:	009b      	lsls	r3, r3, #2
 8017fd0:	4413      	add	r3, r2
 8017fd2:	009b      	lsls	r3, r3, #2
 8017fd4:	440b      	add	r3, r1
 8017fd6:	3324      	adds	r3, #36	@ 0x24
 8017fd8:	2200      	movs	r2, #0
 8017fda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8017fdc:	4b1f      	ldr	r3, [pc, #124]	@ (801805c <USBD_CDC_DeInit+0x100>)
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	f003 020f 	and.w	r2, r3, #15
 8017fe4:	6879      	ldr	r1, [r7, #4]
 8017fe6:	4613      	mov	r3, r2
 8017fe8:	009b      	lsls	r3, r3, #2
 8017fea:	4413      	add	r3, r2
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	440b      	add	r3, r1
 8017ff0:	3326      	adds	r3, #38	@ 0x26
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	32b0      	adds	r2, #176	@ 0xb0
 8018000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d01f      	beq.n	8018048 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801800e:	687a      	ldr	r2, [r7, #4]
 8018010:	33b0      	adds	r3, #176	@ 0xb0
 8018012:	009b      	lsls	r3, r3, #2
 8018014:	4413      	add	r3, r2
 8018016:	685b      	ldr	r3, [r3, #4]
 8018018:	685b      	ldr	r3, [r3, #4]
 801801a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	32b0      	adds	r2, #176	@ 0xb0
 8018026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801802a:	4618      	mov	r0, r3
 801802c:	f002 fbbe 	bl	801a7ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	32b0      	adds	r2, #176	@ 0xb0
 801803a:	2100      	movs	r1, #0
 801803c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	2200      	movs	r2, #0
 8018044:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8018048:	2300      	movs	r3, #0
}
 801804a:	4618      	mov	r0, r3
 801804c:	3708      	adds	r7, #8
 801804e:	46bd      	mov	sp, r7
 8018050:	bd80      	pop	{r7, pc}
 8018052:	bf00      	nop
 8018054:	240002d7 	.word	0x240002d7
 8018058:	240002d8 	.word	0x240002d8
 801805c:	240002d9 	.word	0x240002d9

08018060 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b086      	sub	sp, #24
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	32b0      	adds	r2, #176	@ 0xb0
 8018074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018078:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801807a:	2300      	movs	r3, #0
 801807c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801807e:	2300      	movs	r3, #0
 8018080:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018082:	2300      	movs	r3, #0
 8018084:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8018086:	693b      	ldr	r3, [r7, #16]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d101      	bne.n	8018090 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801808c:	2303      	movs	r3, #3
 801808e:	e0bf      	b.n	8018210 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	781b      	ldrb	r3, [r3, #0]
 8018094:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018098:	2b00      	cmp	r3, #0
 801809a:	d050      	beq.n	801813e <USBD_CDC_Setup+0xde>
 801809c:	2b20      	cmp	r3, #32
 801809e:	f040 80af 	bne.w	8018200 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	88db      	ldrh	r3, [r3, #6]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d03a      	beq.n	8018120 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	781b      	ldrb	r3, [r3, #0]
 80180ae:	b25b      	sxtb	r3, r3
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	da1b      	bge.n	80180ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80180ba:	687a      	ldr	r2, [r7, #4]
 80180bc:	33b0      	adds	r3, #176	@ 0xb0
 80180be:	009b      	lsls	r3, r3, #2
 80180c0:	4413      	add	r3, r2
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	689b      	ldr	r3, [r3, #8]
 80180c6:	683a      	ldr	r2, [r7, #0]
 80180c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80180ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80180cc:	683a      	ldr	r2, [r7, #0]
 80180ce:	88d2      	ldrh	r2, [r2, #6]
 80180d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	88db      	ldrh	r3, [r3, #6]
 80180d6:	2b07      	cmp	r3, #7
 80180d8:	bf28      	it	cs
 80180da:	2307      	movcs	r3, #7
 80180dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80180de:	693b      	ldr	r3, [r7, #16]
 80180e0:	89fa      	ldrh	r2, [r7, #14]
 80180e2:	4619      	mov	r1, r3
 80180e4:	6878      	ldr	r0, [r7, #4]
 80180e6:	f001 fdbd 	bl	8019c64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80180ea:	e090      	b.n	801820e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	785a      	ldrb	r2, [r3, #1]
 80180f0:	693b      	ldr	r3, [r7, #16]
 80180f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	88db      	ldrh	r3, [r3, #6]
 80180fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80180fc:	d803      	bhi.n	8018106 <USBD_CDC_Setup+0xa6>
 80180fe:	683b      	ldr	r3, [r7, #0]
 8018100:	88db      	ldrh	r3, [r3, #6]
 8018102:	b2da      	uxtb	r2, r3
 8018104:	e000      	b.n	8018108 <USBD_CDC_Setup+0xa8>
 8018106:	2240      	movs	r2, #64	@ 0x40
 8018108:	693b      	ldr	r3, [r7, #16]
 801810a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801810e:	6939      	ldr	r1, [r7, #16]
 8018110:	693b      	ldr	r3, [r7, #16]
 8018112:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8018116:	461a      	mov	r2, r3
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f001 fdcf 	bl	8019cbc <USBD_CtlPrepareRx>
      break;
 801811e:	e076      	b.n	801820e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018126:	687a      	ldr	r2, [r7, #4]
 8018128:	33b0      	adds	r3, #176	@ 0xb0
 801812a:	009b      	lsls	r3, r3, #2
 801812c:	4413      	add	r3, r2
 801812e:	685b      	ldr	r3, [r3, #4]
 8018130:	689b      	ldr	r3, [r3, #8]
 8018132:	683a      	ldr	r2, [r7, #0]
 8018134:	7850      	ldrb	r0, [r2, #1]
 8018136:	2200      	movs	r2, #0
 8018138:	6839      	ldr	r1, [r7, #0]
 801813a:	4798      	blx	r3
      break;
 801813c:	e067      	b.n	801820e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801813e:	683b      	ldr	r3, [r7, #0]
 8018140:	785b      	ldrb	r3, [r3, #1]
 8018142:	2b0b      	cmp	r3, #11
 8018144:	d851      	bhi.n	80181ea <USBD_CDC_Setup+0x18a>
 8018146:	a201      	add	r2, pc, #4	@ (adr r2, 801814c <USBD_CDC_Setup+0xec>)
 8018148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801814c:	0801817d 	.word	0x0801817d
 8018150:	080181f9 	.word	0x080181f9
 8018154:	080181eb 	.word	0x080181eb
 8018158:	080181eb 	.word	0x080181eb
 801815c:	080181eb 	.word	0x080181eb
 8018160:	080181eb 	.word	0x080181eb
 8018164:	080181eb 	.word	0x080181eb
 8018168:	080181eb 	.word	0x080181eb
 801816c:	080181eb 	.word	0x080181eb
 8018170:	080181eb 	.word	0x080181eb
 8018174:	080181a7 	.word	0x080181a7
 8018178:	080181d1 	.word	0x080181d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b03      	cmp	r3, #3
 8018186:	d107      	bne.n	8018198 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8018188:	f107 030a 	add.w	r3, r7, #10
 801818c:	2202      	movs	r2, #2
 801818e:	4619      	mov	r1, r3
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	f001 fd67 	bl	8019c64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8018196:	e032      	b.n	80181fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8018198:	6839      	ldr	r1, [r7, #0]
 801819a:	6878      	ldr	r0, [r7, #4]
 801819c:	f001 fce5 	bl	8019b6a <USBD_CtlError>
            ret = USBD_FAIL;
 80181a0:	2303      	movs	r3, #3
 80181a2:	75fb      	strb	r3, [r7, #23]
          break;
 80181a4:	e02b      	b.n	80181fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181ac:	b2db      	uxtb	r3, r3
 80181ae:	2b03      	cmp	r3, #3
 80181b0:	d107      	bne.n	80181c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80181b2:	f107 030d 	add.w	r3, r7, #13
 80181b6:	2201      	movs	r2, #1
 80181b8:	4619      	mov	r1, r3
 80181ba:	6878      	ldr	r0, [r7, #4]
 80181bc:	f001 fd52 	bl	8019c64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80181c0:	e01d      	b.n	80181fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80181c2:	6839      	ldr	r1, [r7, #0]
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	f001 fcd0 	bl	8019b6a <USBD_CtlError>
            ret = USBD_FAIL;
 80181ca:	2303      	movs	r3, #3
 80181cc:	75fb      	strb	r3, [r7, #23]
          break;
 80181ce:	e016      	b.n	80181fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181d6:	b2db      	uxtb	r3, r3
 80181d8:	2b03      	cmp	r3, #3
 80181da:	d00f      	beq.n	80181fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80181dc:	6839      	ldr	r1, [r7, #0]
 80181de:	6878      	ldr	r0, [r7, #4]
 80181e0:	f001 fcc3 	bl	8019b6a <USBD_CtlError>
            ret = USBD_FAIL;
 80181e4:	2303      	movs	r3, #3
 80181e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80181e8:	e008      	b.n	80181fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80181ea:	6839      	ldr	r1, [r7, #0]
 80181ec:	6878      	ldr	r0, [r7, #4]
 80181ee:	f001 fcbc 	bl	8019b6a <USBD_CtlError>
          ret = USBD_FAIL;
 80181f2:	2303      	movs	r3, #3
 80181f4:	75fb      	strb	r3, [r7, #23]
          break;
 80181f6:	e002      	b.n	80181fe <USBD_CDC_Setup+0x19e>
          break;
 80181f8:	bf00      	nop
 80181fa:	e008      	b.n	801820e <USBD_CDC_Setup+0x1ae>
          break;
 80181fc:	bf00      	nop
      }
      break;
 80181fe:	e006      	b.n	801820e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8018200:	6839      	ldr	r1, [r7, #0]
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	f001 fcb1 	bl	8019b6a <USBD_CtlError>
      ret = USBD_FAIL;
 8018208:	2303      	movs	r3, #3
 801820a:	75fb      	strb	r3, [r7, #23]
      break;
 801820c:	bf00      	nop
  }

  return (uint8_t)ret;
 801820e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018210:	4618      	mov	r0, r3
 8018212:	3718      	adds	r7, #24
 8018214:	46bd      	mov	sp, r7
 8018216:	bd80      	pop	{r7, pc}

08018218 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b084      	sub	sp, #16
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]
 8018220:	460b      	mov	r3, r1
 8018222:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801822a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	32b0      	adds	r2, #176	@ 0xb0
 8018236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d101      	bne.n	8018242 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801823e:	2303      	movs	r3, #3
 8018240:	e065      	b.n	801830e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	32b0      	adds	r2, #176	@ 0xb0
 801824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018250:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018252:	78fb      	ldrb	r3, [r7, #3]
 8018254:	f003 020f 	and.w	r2, r3, #15
 8018258:	6879      	ldr	r1, [r7, #4]
 801825a:	4613      	mov	r3, r2
 801825c:	009b      	lsls	r3, r3, #2
 801825e:	4413      	add	r3, r2
 8018260:	009b      	lsls	r3, r3, #2
 8018262:	440b      	add	r3, r1
 8018264:	3318      	adds	r3, #24
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d02f      	beq.n	80182cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801826c:	78fb      	ldrb	r3, [r7, #3]
 801826e:	f003 020f 	and.w	r2, r3, #15
 8018272:	6879      	ldr	r1, [r7, #4]
 8018274:	4613      	mov	r3, r2
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	4413      	add	r3, r2
 801827a:	009b      	lsls	r3, r3, #2
 801827c:	440b      	add	r3, r1
 801827e:	3318      	adds	r3, #24
 8018280:	681a      	ldr	r2, [r3, #0]
 8018282:	78fb      	ldrb	r3, [r7, #3]
 8018284:	f003 010f 	and.w	r1, r3, #15
 8018288:	68f8      	ldr	r0, [r7, #12]
 801828a:	460b      	mov	r3, r1
 801828c:	00db      	lsls	r3, r3, #3
 801828e:	440b      	add	r3, r1
 8018290:	009b      	lsls	r3, r3, #2
 8018292:	4403      	add	r3, r0
 8018294:	331c      	adds	r3, #28
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	fbb2 f1f3 	udiv	r1, r2, r3
 801829c:	fb01 f303 	mul.w	r3, r1, r3
 80182a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d112      	bne.n	80182cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80182a6:	78fb      	ldrb	r3, [r7, #3]
 80182a8:	f003 020f 	and.w	r2, r3, #15
 80182ac:	6879      	ldr	r1, [r7, #4]
 80182ae:	4613      	mov	r3, r2
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	4413      	add	r3, r2
 80182b4:	009b      	lsls	r3, r3, #2
 80182b6:	440b      	add	r3, r1
 80182b8:	3318      	adds	r3, #24
 80182ba:	2200      	movs	r2, #0
 80182bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80182be:	78f9      	ldrb	r1, [r7, #3]
 80182c0:	2300      	movs	r3, #0
 80182c2:	2200      	movs	r2, #0
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	f002 fa0e 	bl	801a6e6 <USBD_LL_Transmit>
 80182ca:	e01f      	b.n	801830c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	2200      	movs	r2, #0
 80182d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80182da:	687a      	ldr	r2, [r7, #4]
 80182dc:	33b0      	adds	r3, #176	@ 0xb0
 80182de:	009b      	lsls	r3, r3, #2
 80182e0:	4413      	add	r3, r2
 80182e2:	685b      	ldr	r3, [r3, #4]
 80182e4:	691b      	ldr	r3, [r3, #16]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d010      	beq.n	801830c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80182f0:	687a      	ldr	r2, [r7, #4]
 80182f2:	33b0      	adds	r3, #176	@ 0xb0
 80182f4:	009b      	lsls	r3, r3, #2
 80182f6:	4413      	add	r3, r2
 80182f8:	685b      	ldr	r3, [r3, #4]
 80182fa:	691b      	ldr	r3, [r3, #16]
 80182fc:	68ba      	ldr	r2, [r7, #8]
 80182fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8018302:	68ba      	ldr	r2, [r7, #8]
 8018304:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8018308:	78fa      	ldrb	r2, [r7, #3]
 801830a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801830c:	2300      	movs	r3, #0
}
 801830e:	4618      	mov	r0, r3
 8018310:	3710      	adds	r7, #16
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8018316:	b580      	push	{r7, lr}
 8018318:	b084      	sub	sp, #16
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
 801831e:	460b      	mov	r3, r1
 8018320:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	32b0      	adds	r2, #176	@ 0xb0
 801832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018330:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	32b0      	adds	r2, #176	@ 0xb0
 801833c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d101      	bne.n	8018348 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8018344:	2303      	movs	r3, #3
 8018346:	e01a      	b.n	801837e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8018348:	78fb      	ldrb	r3, [r7, #3]
 801834a:	4619      	mov	r1, r3
 801834c:	6878      	ldr	r0, [r7, #4]
 801834e:	f002 fa0c 	bl	801a76a <USBD_LL_GetRxDataSize>
 8018352:	4602      	mov	r2, r0
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018360:	687a      	ldr	r2, [r7, #4]
 8018362:	33b0      	adds	r3, #176	@ 0xb0
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	4413      	add	r3, r2
 8018368:	685b      	ldr	r3, [r3, #4]
 801836a:	68db      	ldr	r3, [r3, #12]
 801836c:	68fa      	ldr	r2, [r7, #12]
 801836e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8018372:	68fa      	ldr	r2, [r7, #12]
 8018374:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8018378:	4611      	mov	r1, r2
 801837a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801837c:	2300      	movs	r3, #0
}
 801837e:	4618      	mov	r0, r3
 8018380:	3710      	adds	r7, #16
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}

08018386 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8018386:	b580      	push	{r7, lr}
 8018388:	b084      	sub	sp, #16
 801838a:	af00      	add	r7, sp, #0
 801838c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	32b0      	adds	r2, #176	@ 0xb0
 8018398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801839c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d101      	bne.n	80183a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80183a4:	2303      	movs	r3, #3
 80183a6:	e024      	b.n	80183f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80183ae:	687a      	ldr	r2, [r7, #4]
 80183b0:	33b0      	adds	r3, #176	@ 0xb0
 80183b2:	009b      	lsls	r3, r3, #2
 80183b4:	4413      	add	r3, r2
 80183b6:	685b      	ldr	r3, [r3, #4]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d019      	beq.n	80183f0 <USBD_CDC_EP0_RxReady+0x6a>
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80183c2:	2bff      	cmp	r3, #255	@ 0xff
 80183c4:	d014      	beq.n	80183f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80183cc:	687a      	ldr	r2, [r7, #4]
 80183ce:	33b0      	adds	r3, #176	@ 0xb0
 80183d0:	009b      	lsls	r3, r3, #2
 80183d2:	4413      	add	r3, r2
 80183d4:	685b      	ldr	r3, [r3, #4]
 80183d6:	689b      	ldr	r3, [r3, #8]
 80183d8:	68fa      	ldr	r2, [r7, #12]
 80183da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80183de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80183e0:	68fa      	ldr	r2, [r7, #12]
 80183e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80183e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	22ff      	movs	r2, #255	@ 0xff
 80183ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80183f0:	2300      	movs	r3, #0
}
 80183f2:	4618      	mov	r0, r3
 80183f4:	3710      	adds	r7, #16
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bd80      	pop	{r7, pc}
	...

080183fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b086      	sub	sp, #24
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018404:	2182      	movs	r1, #130	@ 0x82
 8018406:	4818      	ldr	r0, [pc, #96]	@ (8018468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018408:	f000 fd4f 	bl	8018eaa <USBD_GetEpDesc>
 801840c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801840e:	2101      	movs	r1, #1
 8018410:	4815      	ldr	r0, [pc, #84]	@ (8018468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018412:	f000 fd4a 	bl	8018eaa <USBD_GetEpDesc>
 8018416:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018418:	2181      	movs	r1, #129	@ 0x81
 801841a:	4813      	ldr	r0, [pc, #76]	@ (8018468 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801841c:	f000 fd45 	bl	8018eaa <USBD_GetEpDesc>
 8018420:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018422:	697b      	ldr	r3, [r7, #20]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d002      	beq.n	801842e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8018428:	697b      	ldr	r3, [r7, #20]
 801842a:	2210      	movs	r2, #16
 801842c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801842e:	693b      	ldr	r3, [r7, #16]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d006      	beq.n	8018442 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018434:	693b      	ldr	r3, [r7, #16]
 8018436:	2200      	movs	r2, #0
 8018438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801843c:	711a      	strb	r2, [r3, #4]
 801843e:	2200      	movs	r2, #0
 8018440:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d006      	beq.n	8018456 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	2200      	movs	r2, #0
 801844c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018450:	711a      	strb	r2, [r3, #4]
 8018452:	2200      	movs	r2, #0
 8018454:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	2243      	movs	r2, #67	@ 0x43
 801845a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801845c:	4b02      	ldr	r3, [pc, #8]	@ (8018468 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801845e:	4618      	mov	r0, r3
 8018460:	3718      	adds	r7, #24
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}
 8018466:	bf00      	nop
 8018468:	24000294 	.word	0x24000294

0801846c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b086      	sub	sp, #24
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018474:	2182      	movs	r1, #130	@ 0x82
 8018476:	4818      	ldr	r0, [pc, #96]	@ (80184d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018478:	f000 fd17 	bl	8018eaa <USBD_GetEpDesc>
 801847c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801847e:	2101      	movs	r1, #1
 8018480:	4815      	ldr	r0, [pc, #84]	@ (80184d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018482:	f000 fd12 	bl	8018eaa <USBD_GetEpDesc>
 8018486:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8018488:	2181      	movs	r1, #129	@ 0x81
 801848a:	4813      	ldr	r0, [pc, #76]	@ (80184d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801848c:	f000 fd0d 	bl	8018eaa <USBD_GetEpDesc>
 8018490:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018492:	697b      	ldr	r3, [r7, #20]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d002      	beq.n	801849e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	2210      	movs	r2, #16
 801849c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801849e:	693b      	ldr	r3, [r7, #16]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d006      	beq.n	80184b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80184a4:	693b      	ldr	r3, [r7, #16]
 80184a6:	2200      	movs	r2, #0
 80184a8:	711a      	strb	r2, [r3, #4]
 80184aa:	2200      	movs	r2, #0
 80184ac:	f042 0202 	orr.w	r2, r2, #2
 80184b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d006      	beq.n	80184c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	2200      	movs	r2, #0
 80184bc:	711a      	strb	r2, [r3, #4]
 80184be:	2200      	movs	r2, #0
 80184c0:	f042 0202 	orr.w	r2, r2, #2
 80184c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	2243      	movs	r2, #67	@ 0x43
 80184ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80184cc:	4b02      	ldr	r3, [pc, #8]	@ (80184d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80184ce:	4618      	mov	r0, r3
 80184d0:	3718      	adds	r7, #24
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
 80184d6:	bf00      	nop
 80184d8:	24000294 	.word	0x24000294

080184dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b086      	sub	sp, #24
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80184e4:	2182      	movs	r1, #130	@ 0x82
 80184e6:	4818      	ldr	r0, [pc, #96]	@ (8018548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80184e8:	f000 fcdf 	bl	8018eaa <USBD_GetEpDesc>
 80184ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80184ee:	2101      	movs	r1, #1
 80184f0:	4815      	ldr	r0, [pc, #84]	@ (8018548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80184f2:	f000 fcda 	bl	8018eaa <USBD_GetEpDesc>
 80184f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80184f8:	2181      	movs	r1, #129	@ 0x81
 80184fa:	4813      	ldr	r0, [pc, #76]	@ (8018548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80184fc:	f000 fcd5 	bl	8018eaa <USBD_GetEpDesc>
 8018500:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018502:	697b      	ldr	r3, [r7, #20]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d002      	beq.n	801850e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8018508:	697b      	ldr	r3, [r7, #20]
 801850a:	2210      	movs	r2, #16
 801850c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801850e:	693b      	ldr	r3, [r7, #16]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d006      	beq.n	8018522 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018514:	693b      	ldr	r3, [r7, #16]
 8018516:	2200      	movs	r2, #0
 8018518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801851c:	711a      	strb	r2, [r3, #4]
 801851e:	2200      	movs	r2, #0
 8018520:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d006      	beq.n	8018536 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	2200      	movs	r2, #0
 801852c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018530:	711a      	strb	r2, [r3, #4]
 8018532:	2200      	movs	r2, #0
 8018534:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	2243      	movs	r2, #67	@ 0x43
 801853a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801853c:	4b02      	ldr	r3, [pc, #8]	@ (8018548 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801853e:	4618      	mov	r0, r3
 8018540:	3718      	adds	r7, #24
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}
 8018546:	bf00      	nop
 8018548:	24000294 	.word	0x24000294

0801854c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801854c:	b480      	push	{r7}
 801854e:	b083      	sub	sp, #12
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	220a      	movs	r2, #10
 8018558:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801855a:	4b03      	ldr	r3, [pc, #12]	@ (8018568 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801855c:	4618      	mov	r0, r3
 801855e:	370c      	adds	r7, #12
 8018560:	46bd      	mov	sp, r7
 8018562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018566:	4770      	bx	lr
 8018568:	24000250 	.word	0x24000250

0801856c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801856c:	b480      	push	{r7}
 801856e:	b083      	sub	sp, #12
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
 8018574:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8018576:	683b      	ldr	r3, [r7, #0]
 8018578:	2b00      	cmp	r3, #0
 801857a:	d101      	bne.n	8018580 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801857c:	2303      	movs	r3, #3
 801857e:	e009      	b.n	8018594 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018586:	687a      	ldr	r2, [r7, #4]
 8018588:	33b0      	adds	r3, #176	@ 0xb0
 801858a:	009b      	lsls	r3, r3, #2
 801858c:	4413      	add	r3, r2
 801858e:	683a      	ldr	r2, [r7, #0]
 8018590:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8018592:	2300      	movs	r3, #0
}
 8018594:	4618      	mov	r0, r3
 8018596:	370c      	adds	r7, #12
 8018598:	46bd      	mov	sp, r7
 801859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801859e:	4770      	bx	lr

080185a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80185a0:	b480      	push	{r7}
 80185a2:	b087      	sub	sp, #28
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	60f8      	str	r0, [r7, #12]
 80185a8:	60b9      	str	r1, [r7, #8]
 80185aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	32b0      	adds	r2, #176	@ 0xb0
 80185b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80185bc:	697b      	ldr	r3, [r7, #20]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d101      	bne.n	80185c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80185c2:	2303      	movs	r3, #3
 80185c4:	e008      	b.n	80185d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	68ba      	ldr	r2, [r7, #8]
 80185ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80185ce:	697b      	ldr	r3, [r7, #20]
 80185d0:	687a      	ldr	r2, [r7, #4]
 80185d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80185d6:	2300      	movs	r3, #0
}
 80185d8:	4618      	mov	r0, r3
 80185da:	371c      	adds	r7, #28
 80185dc:	46bd      	mov	sp, r7
 80185de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e2:	4770      	bx	lr

080185e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80185e4:	b480      	push	{r7}
 80185e6:	b085      	sub	sp, #20
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	6078      	str	r0, [r7, #4]
 80185ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	32b0      	adds	r2, #176	@ 0xb0
 80185f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d101      	bne.n	8018608 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8018604:	2303      	movs	r3, #3
 8018606:	e004      	b.n	8018612 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	683a      	ldr	r2, [r7, #0]
 801860c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8018610:	2300      	movs	r3, #0
}
 8018612:	4618      	mov	r0, r3
 8018614:	3714      	adds	r7, #20
 8018616:	46bd      	mov	sp, r7
 8018618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861c:	4770      	bx	lr
	...

08018620 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b084      	sub	sp, #16
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	32b0      	adds	r2, #176	@ 0xb0
 8018632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018636:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8018638:	2301      	movs	r3, #1
 801863a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801863c:	68bb      	ldr	r3, [r7, #8]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d101      	bne.n	8018646 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8018642:	2303      	movs	r3, #3
 8018644:	e025      	b.n	8018692 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8018646:	68bb      	ldr	r3, [r7, #8]
 8018648:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801864c:	2b00      	cmp	r3, #0
 801864e:	d11f      	bne.n	8018690 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8018650:	68bb      	ldr	r3, [r7, #8]
 8018652:	2201      	movs	r2, #1
 8018654:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8018658:	4b10      	ldr	r3, [pc, #64]	@ (801869c <USBD_CDC_TransmitPacket+0x7c>)
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	f003 020f 	and.w	r2, r3, #15
 8018660:	68bb      	ldr	r3, [r7, #8]
 8018662:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	4613      	mov	r3, r2
 801866a:	009b      	lsls	r3, r3, #2
 801866c:	4413      	add	r3, r2
 801866e:	009b      	lsls	r3, r3, #2
 8018670:	4403      	add	r3, r0
 8018672:	3318      	adds	r3, #24
 8018674:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8018676:	4b09      	ldr	r3, [pc, #36]	@ (801869c <USBD_CDC_TransmitPacket+0x7c>)
 8018678:	7819      	ldrb	r1, [r3, #0]
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f002 f82d 	bl	801a6e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 801868c:	2300      	movs	r3, #0
 801868e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8018690:	7bfb      	ldrb	r3, [r7, #15]
}
 8018692:	4618      	mov	r0, r3
 8018694:	3710      	adds	r7, #16
 8018696:	46bd      	mov	sp, r7
 8018698:	bd80      	pop	{r7, pc}
 801869a:	bf00      	nop
 801869c:	240002d7 	.word	0x240002d7

080186a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b084      	sub	sp, #16
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	32b0      	adds	r2, #176	@ 0xb0
 80186b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	32b0      	adds	r2, #176	@ 0xb0
 80186c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d101      	bne.n	80186ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80186ca:	2303      	movs	r3, #3
 80186cc:	e018      	b.n	8018700 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	7c1b      	ldrb	r3, [r3, #16]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d10a      	bne.n	80186ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80186d6:	4b0c      	ldr	r3, [pc, #48]	@ (8018708 <USBD_CDC_ReceivePacket+0x68>)
 80186d8:	7819      	ldrb	r1, [r3, #0]
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80186e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80186e4:	6878      	ldr	r0, [r7, #4]
 80186e6:	f002 f81f 	bl	801a728 <USBD_LL_PrepareReceive>
 80186ea:	e008      	b.n	80186fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80186ec:	4b06      	ldr	r3, [pc, #24]	@ (8018708 <USBD_CDC_ReceivePacket+0x68>)
 80186ee:	7819      	ldrb	r1, [r3, #0]
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80186f6:	2340      	movs	r3, #64	@ 0x40
 80186f8:	6878      	ldr	r0, [r7, #4]
 80186fa:	f002 f815 	bl	801a728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80186fe:	2300      	movs	r3, #0
}
 8018700:	4618      	mov	r0, r3
 8018702:	3710      	adds	r7, #16
 8018704:	46bd      	mov	sp, r7
 8018706:	bd80      	pop	{r7, pc}
 8018708:	240002d8 	.word	0x240002d8

0801870c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b086      	sub	sp, #24
 8018710:	af00      	add	r7, sp, #0
 8018712:	60f8      	str	r0, [r7, #12]
 8018714:	60b9      	str	r1, [r7, #8]
 8018716:	4613      	mov	r3, r2
 8018718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d101      	bne.n	8018724 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018720:	2303      	movs	r3, #3
 8018722:	e01f      	b.n	8018764 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2200      	movs	r2, #0
 8018728:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	2200      	movs	r2, #0
 8018730:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	2200      	movs	r2, #0
 8018738:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801873c:	68bb      	ldr	r3, [r7, #8]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d003      	beq.n	801874a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	68ba      	ldr	r2, [r7, #8]
 8018746:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	2201      	movs	r2, #1
 801874e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	79fa      	ldrb	r2, [r7, #7]
 8018756:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8018758:	68f8      	ldr	r0, [r7, #12]
 801875a:	f001 fe8b 	bl	801a474 <USBD_LL_Init>
 801875e:	4603      	mov	r3, r0
 8018760:	75fb      	strb	r3, [r7, #23]

  return ret;
 8018762:	7dfb      	ldrb	r3, [r7, #23]
}
 8018764:	4618      	mov	r0, r3
 8018766:	3718      	adds	r7, #24
 8018768:	46bd      	mov	sp, r7
 801876a:	bd80      	pop	{r7, pc}

0801876c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b084      	sub	sp, #16
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
 8018774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018776:	2300      	movs	r3, #0
 8018778:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d101      	bne.n	8018784 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018780:	2303      	movs	r3, #3
 8018782:	e025      	b.n	80187d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	683a      	ldr	r2, [r7, #0]
 8018788:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	32ae      	adds	r2, #174	@ 0xae
 8018796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801879a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801879c:	2b00      	cmp	r3, #0
 801879e:	d00f      	beq.n	80187c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	32ae      	adds	r2, #174	@ 0xae
 80187aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187b0:	f107 020e 	add.w	r2, r7, #14
 80187b4:	4610      	mov	r0, r2
 80187b6:	4798      	blx	r3
 80187b8:	4602      	mov	r2, r0
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80187c6:	1c5a      	adds	r2, r3, #1
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80187ce:	2300      	movs	r3, #0
}
 80187d0:	4618      	mov	r0, r3
 80187d2:	3710      	adds	r7, #16
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b082      	sub	sp, #8
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f001 fe97 	bl	801a514 <USBD_LL_Start>
 80187e6:	4603      	mov	r3, r0
}
 80187e8:	4618      	mov	r0, r3
 80187ea:	3708      	adds	r7, #8
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}

080187f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80187f0:	b480      	push	{r7}
 80187f2:	b083      	sub	sp, #12
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80187f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	370c      	adds	r7, #12
 80187fe:	46bd      	mov	sp, r7
 8018800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018804:	4770      	bx	lr

08018806 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018806:	b580      	push	{r7, lr}
 8018808:	b084      	sub	sp, #16
 801880a:	af00      	add	r7, sp, #0
 801880c:	6078      	str	r0, [r7, #4]
 801880e:	460b      	mov	r3, r1
 8018810:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8018812:	2300      	movs	r3, #0
 8018814:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801881c:	2b00      	cmp	r3, #0
 801881e:	d009      	beq.n	8018834 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	78fa      	ldrb	r2, [r7, #3]
 801882a:	4611      	mov	r1, r2
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	4798      	blx	r3
 8018830:	4603      	mov	r3, r0
 8018832:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018834:	7bfb      	ldrb	r3, [r7, #15]
}
 8018836:	4618      	mov	r0, r3
 8018838:	3710      	adds	r7, #16
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}

0801883e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801883e:	b580      	push	{r7, lr}
 8018840:	b084      	sub	sp, #16
 8018842:	af00      	add	r7, sp, #0
 8018844:	6078      	str	r0, [r7, #4]
 8018846:	460b      	mov	r3, r1
 8018848:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801884a:	2300      	movs	r3, #0
 801884c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	78fa      	ldrb	r2, [r7, #3]
 8018858:	4611      	mov	r1, r2
 801885a:	6878      	ldr	r0, [r7, #4]
 801885c:	4798      	blx	r3
 801885e:	4603      	mov	r3, r0
 8018860:	2b00      	cmp	r3, #0
 8018862:	d001      	beq.n	8018868 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8018864:	2303      	movs	r3, #3
 8018866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018868:	7bfb      	ldrb	r3, [r7, #15]
}
 801886a:	4618      	mov	r0, r3
 801886c:	3710      	adds	r7, #16
 801886e:	46bd      	mov	sp, r7
 8018870:	bd80      	pop	{r7, pc}

08018872 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018872:	b580      	push	{r7, lr}
 8018874:	b084      	sub	sp, #16
 8018876:	af00      	add	r7, sp, #0
 8018878:	6078      	str	r0, [r7, #4]
 801887a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8018882:	6839      	ldr	r1, [r7, #0]
 8018884:	4618      	mov	r0, r3
 8018886:	f001 f936 	bl	8019af6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	2201      	movs	r2, #1
 801888e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8018898:	461a      	mov	r2, r3
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80188a6:	f003 031f 	and.w	r3, r3, #31
 80188aa:	2b02      	cmp	r3, #2
 80188ac:	d01a      	beq.n	80188e4 <USBD_LL_SetupStage+0x72>
 80188ae:	2b02      	cmp	r3, #2
 80188b0:	d822      	bhi.n	80188f8 <USBD_LL_SetupStage+0x86>
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d002      	beq.n	80188bc <USBD_LL_SetupStage+0x4a>
 80188b6:	2b01      	cmp	r3, #1
 80188b8:	d00a      	beq.n	80188d0 <USBD_LL_SetupStage+0x5e>
 80188ba:	e01d      	b.n	80188f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188c2:	4619      	mov	r1, r3
 80188c4:	6878      	ldr	r0, [r7, #4]
 80188c6:	f000 fb63 	bl	8018f90 <USBD_StdDevReq>
 80188ca:	4603      	mov	r3, r0
 80188cc:	73fb      	strb	r3, [r7, #15]
      break;
 80188ce:	e020      	b.n	8018912 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188d6:	4619      	mov	r1, r3
 80188d8:	6878      	ldr	r0, [r7, #4]
 80188da:	f000 fbcb 	bl	8019074 <USBD_StdItfReq>
 80188de:	4603      	mov	r3, r0
 80188e0:	73fb      	strb	r3, [r7, #15]
      break;
 80188e2:	e016      	b.n	8018912 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188ea:	4619      	mov	r1, r3
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f000 fc2d 	bl	801914c <USBD_StdEPReq>
 80188f2:	4603      	mov	r3, r0
 80188f4:	73fb      	strb	r3, [r7, #15]
      break;
 80188f6:	e00c      	b.n	8018912 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80188fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018902:	b2db      	uxtb	r3, r3
 8018904:	4619      	mov	r1, r3
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f001 fe64 	bl	801a5d4 <USBD_LL_StallEP>
 801890c:	4603      	mov	r3, r0
 801890e:	73fb      	strb	r3, [r7, #15]
      break;
 8018910:	bf00      	nop
  }

  return ret;
 8018912:	7bfb      	ldrb	r3, [r7, #15]
}
 8018914:	4618      	mov	r0, r3
 8018916:	3710      	adds	r7, #16
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}

0801891c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b086      	sub	sp, #24
 8018920:	af00      	add	r7, sp, #0
 8018922:	60f8      	str	r0, [r7, #12]
 8018924:	460b      	mov	r3, r1
 8018926:	607a      	str	r2, [r7, #4]
 8018928:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801892a:	2300      	movs	r3, #0
 801892c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801892e:	7afb      	ldrb	r3, [r7, #11]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d16e      	bne.n	8018a12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801893a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018942:	2b03      	cmp	r3, #3
 8018944:	f040 8098 	bne.w	8018a78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8018948:	693b      	ldr	r3, [r7, #16]
 801894a:	689a      	ldr	r2, [r3, #8]
 801894c:	693b      	ldr	r3, [r7, #16]
 801894e:	68db      	ldr	r3, [r3, #12]
 8018950:	429a      	cmp	r2, r3
 8018952:	d913      	bls.n	801897c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8018954:	693b      	ldr	r3, [r7, #16]
 8018956:	689a      	ldr	r2, [r3, #8]
 8018958:	693b      	ldr	r3, [r7, #16]
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	1ad2      	subs	r2, r2, r3
 801895e:	693b      	ldr	r3, [r7, #16]
 8018960:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8018962:	693b      	ldr	r3, [r7, #16]
 8018964:	68da      	ldr	r2, [r3, #12]
 8018966:	693b      	ldr	r3, [r7, #16]
 8018968:	689b      	ldr	r3, [r3, #8]
 801896a:	4293      	cmp	r3, r2
 801896c:	bf28      	it	cs
 801896e:	4613      	movcs	r3, r2
 8018970:	461a      	mov	r2, r3
 8018972:	6879      	ldr	r1, [r7, #4]
 8018974:	68f8      	ldr	r0, [r7, #12]
 8018976:	f001 f9be 	bl	8019cf6 <USBD_CtlContinueRx>
 801897a:	e07d      	b.n	8018a78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018982:	f003 031f 	and.w	r3, r3, #31
 8018986:	2b02      	cmp	r3, #2
 8018988:	d014      	beq.n	80189b4 <USBD_LL_DataOutStage+0x98>
 801898a:	2b02      	cmp	r3, #2
 801898c:	d81d      	bhi.n	80189ca <USBD_LL_DataOutStage+0xae>
 801898e:	2b00      	cmp	r3, #0
 8018990:	d002      	beq.n	8018998 <USBD_LL_DataOutStage+0x7c>
 8018992:	2b01      	cmp	r3, #1
 8018994:	d003      	beq.n	801899e <USBD_LL_DataOutStage+0x82>
 8018996:	e018      	b.n	80189ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8018998:	2300      	movs	r3, #0
 801899a:	75bb      	strb	r3, [r7, #22]
            break;
 801899c:	e018      	b.n	80189d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80189a4:	b2db      	uxtb	r3, r3
 80189a6:	4619      	mov	r1, r3
 80189a8:	68f8      	ldr	r0, [r7, #12]
 80189aa:	f000 fa64 	bl	8018e76 <USBD_CoreFindIF>
 80189ae:	4603      	mov	r3, r0
 80189b0:	75bb      	strb	r3, [r7, #22]
            break;
 80189b2:	e00d      	b.n	80189d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80189ba:	b2db      	uxtb	r3, r3
 80189bc:	4619      	mov	r1, r3
 80189be:	68f8      	ldr	r0, [r7, #12]
 80189c0:	f000 fa66 	bl	8018e90 <USBD_CoreFindEP>
 80189c4:	4603      	mov	r3, r0
 80189c6:	75bb      	strb	r3, [r7, #22]
            break;
 80189c8:	e002      	b.n	80189d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80189ca:	2300      	movs	r3, #0
 80189cc:	75bb      	strb	r3, [r7, #22]
            break;
 80189ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80189d0:	7dbb      	ldrb	r3, [r7, #22]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d119      	bne.n	8018a0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80189dc:	b2db      	uxtb	r3, r3
 80189de:	2b03      	cmp	r3, #3
 80189e0:	d113      	bne.n	8018a0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80189e2:	7dba      	ldrb	r2, [r7, #22]
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	32ae      	adds	r2, #174	@ 0xae
 80189e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80189ec:	691b      	ldr	r3, [r3, #16]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d00b      	beq.n	8018a0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80189f2:	7dba      	ldrb	r2, [r7, #22]
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80189fa:	7dba      	ldrb	r2, [r7, #22]
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	32ae      	adds	r2, #174	@ 0xae
 8018a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a04:	691b      	ldr	r3, [r3, #16]
 8018a06:	68f8      	ldr	r0, [r7, #12]
 8018a08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8018a0a:	68f8      	ldr	r0, [r7, #12]
 8018a0c:	f001 f984 	bl	8019d18 <USBD_CtlSendStatus>
 8018a10:	e032      	b.n	8018a78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8018a12:	7afb      	ldrb	r3, [r7, #11]
 8018a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a18:	b2db      	uxtb	r3, r3
 8018a1a:	4619      	mov	r1, r3
 8018a1c:	68f8      	ldr	r0, [r7, #12]
 8018a1e:	f000 fa37 	bl	8018e90 <USBD_CoreFindEP>
 8018a22:	4603      	mov	r3, r0
 8018a24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018a26:	7dbb      	ldrb	r3, [r7, #22]
 8018a28:	2bff      	cmp	r3, #255	@ 0xff
 8018a2a:	d025      	beq.n	8018a78 <USBD_LL_DataOutStage+0x15c>
 8018a2c:	7dbb      	ldrb	r3, [r7, #22]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d122      	bne.n	8018a78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018a38:	b2db      	uxtb	r3, r3
 8018a3a:	2b03      	cmp	r3, #3
 8018a3c:	d117      	bne.n	8018a6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8018a3e:	7dba      	ldrb	r2, [r7, #22]
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	32ae      	adds	r2, #174	@ 0xae
 8018a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a48:	699b      	ldr	r3, [r3, #24]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d00f      	beq.n	8018a6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8018a4e:	7dba      	ldrb	r2, [r7, #22]
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8018a56:	7dba      	ldrb	r2, [r7, #22]
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	32ae      	adds	r2, #174	@ 0xae
 8018a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a60:	699b      	ldr	r3, [r3, #24]
 8018a62:	7afa      	ldrb	r2, [r7, #11]
 8018a64:	4611      	mov	r1, r2
 8018a66:	68f8      	ldr	r0, [r7, #12]
 8018a68:	4798      	blx	r3
 8018a6a:	4603      	mov	r3, r0
 8018a6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8018a6e:	7dfb      	ldrb	r3, [r7, #23]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d001      	beq.n	8018a78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8018a74:	7dfb      	ldrb	r3, [r7, #23]
 8018a76:	e000      	b.n	8018a7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8018a78:	2300      	movs	r3, #0
}
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3718      	adds	r7, #24
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}

08018a82 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018a82:	b580      	push	{r7, lr}
 8018a84:	b086      	sub	sp, #24
 8018a86:	af00      	add	r7, sp, #0
 8018a88:	60f8      	str	r0, [r7, #12]
 8018a8a:	460b      	mov	r3, r1
 8018a8c:	607a      	str	r2, [r7, #4]
 8018a8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8018a90:	7afb      	ldrb	r3, [r7, #11]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d16f      	bne.n	8018b76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	3314      	adds	r3, #20
 8018a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018aa2:	2b02      	cmp	r3, #2
 8018aa4:	d15a      	bne.n	8018b5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8018aa6:	693b      	ldr	r3, [r7, #16]
 8018aa8:	689a      	ldr	r2, [r3, #8]
 8018aaa:	693b      	ldr	r3, [r7, #16]
 8018aac:	68db      	ldr	r3, [r3, #12]
 8018aae:	429a      	cmp	r2, r3
 8018ab0:	d914      	bls.n	8018adc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018ab2:	693b      	ldr	r3, [r7, #16]
 8018ab4:	689a      	ldr	r2, [r3, #8]
 8018ab6:	693b      	ldr	r3, [r7, #16]
 8018ab8:	68db      	ldr	r3, [r3, #12]
 8018aba:	1ad2      	subs	r2, r2, r3
 8018abc:	693b      	ldr	r3, [r7, #16]
 8018abe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018ac0:	693b      	ldr	r3, [r7, #16]
 8018ac2:	689b      	ldr	r3, [r3, #8]
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	6879      	ldr	r1, [r7, #4]
 8018ac8:	68f8      	ldr	r0, [r7, #12]
 8018aca:	f001 f8e6 	bl	8019c9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018ace:	2300      	movs	r3, #0
 8018ad0:	2200      	movs	r2, #0
 8018ad2:	2100      	movs	r1, #0
 8018ad4:	68f8      	ldr	r0, [r7, #12]
 8018ad6:	f001 fe27 	bl	801a728 <USBD_LL_PrepareReceive>
 8018ada:	e03f      	b.n	8018b5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	68da      	ldr	r2, [r3, #12]
 8018ae0:	693b      	ldr	r3, [r7, #16]
 8018ae2:	689b      	ldr	r3, [r3, #8]
 8018ae4:	429a      	cmp	r2, r3
 8018ae6:	d11c      	bne.n	8018b22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8018ae8:	693b      	ldr	r3, [r7, #16]
 8018aea:	685a      	ldr	r2, [r3, #4]
 8018aec:	693b      	ldr	r3, [r7, #16]
 8018aee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8018af0:	429a      	cmp	r2, r3
 8018af2:	d316      	bcc.n	8018b22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8018af4:	693b      	ldr	r3, [r7, #16]
 8018af6:	685a      	ldr	r2, [r3, #4]
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d20f      	bcs.n	8018b22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018b02:	2200      	movs	r2, #0
 8018b04:	2100      	movs	r1, #0
 8018b06:	68f8      	ldr	r0, [r7, #12]
 8018b08:	f001 f8c7 	bl	8019c9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	2200      	movs	r2, #0
 8018b10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018b14:	2300      	movs	r3, #0
 8018b16:	2200      	movs	r2, #0
 8018b18:	2100      	movs	r1, #0
 8018b1a:	68f8      	ldr	r0, [r7, #12]
 8018b1c:	f001 fe04 	bl	801a728 <USBD_LL_PrepareReceive>
 8018b20:	e01c      	b.n	8018b5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018b28:	b2db      	uxtb	r3, r3
 8018b2a:	2b03      	cmp	r3, #3
 8018b2c:	d10f      	bne.n	8018b4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b34:	68db      	ldr	r3, [r3, #12]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d009      	beq.n	8018b4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b48:	68db      	ldr	r3, [r3, #12]
 8018b4a:	68f8      	ldr	r0, [r7, #12]
 8018b4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018b4e:	2180      	movs	r1, #128	@ 0x80
 8018b50:	68f8      	ldr	r0, [r7, #12]
 8018b52:	f001 fd3f 	bl	801a5d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8018b56:	68f8      	ldr	r0, [r7, #12]
 8018b58:	f001 f8f1 	bl	8019d3e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d03a      	beq.n	8018bdc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8018b66:	68f8      	ldr	r0, [r7, #12]
 8018b68:	f7ff fe42 	bl	80187f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	2200      	movs	r2, #0
 8018b70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8018b74:	e032      	b.n	8018bdc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8018b76:	7afb      	ldrb	r3, [r7, #11]
 8018b78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	4619      	mov	r1, r3
 8018b80:	68f8      	ldr	r0, [r7, #12]
 8018b82:	f000 f985 	bl	8018e90 <USBD_CoreFindEP>
 8018b86:	4603      	mov	r3, r0
 8018b88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018b8a:	7dfb      	ldrb	r3, [r7, #23]
 8018b8c:	2bff      	cmp	r3, #255	@ 0xff
 8018b8e:	d025      	beq.n	8018bdc <USBD_LL_DataInStage+0x15a>
 8018b90:	7dfb      	ldrb	r3, [r7, #23]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d122      	bne.n	8018bdc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018b9c:	b2db      	uxtb	r3, r3
 8018b9e:	2b03      	cmp	r3, #3
 8018ba0:	d11c      	bne.n	8018bdc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8018ba2:	7dfa      	ldrb	r2, [r7, #23]
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	32ae      	adds	r2, #174	@ 0xae
 8018ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bac:	695b      	ldr	r3, [r3, #20]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d014      	beq.n	8018bdc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8018bb2:	7dfa      	ldrb	r2, [r7, #23]
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8018bba:	7dfa      	ldrb	r2, [r7, #23]
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	32ae      	adds	r2, #174	@ 0xae
 8018bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bc4:	695b      	ldr	r3, [r3, #20]
 8018bc6:	7afa      	ldrb	r2, [r7, #11]
 8018bc8:	4611      	mov	r1, r2
 8018bca:	68f8      	ldr	r0, [r7, #12]
 8018bcc:	4798      	blx	r3
 8018bce:	4603      	mov	r3, r0
 8018bd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8018bd2:	7dbb      	ldrb	r3, [r7, #22]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d001      	beq.n	8018bdc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018bd8:	7dbb      	ldrb	r3, [r7, #22]
 8018bda:	e000      	b.n	8018bde <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018bdc:	2300      	movs	r3, #0
}
 8018bde:	4618      	mov	r0, r3
 8018be0:	3718      	adds	r7, #24
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd80      	pop	{r7, pc}

08018be6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018be6:	b580      	push	{r7, lr}
 8018be8:	b084      	sub	sp, #16
 8018bea:	af00      	add	r7, sp, #0
 8018bec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8018bee:	2300      	movs	r3, #0
 8018bf0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2201      	movs	r2, #1
 8018bf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	2200      	movs	r2, #0
 8018c06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	2200      	movs	r2, #0
 8018c14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d014      	beq.n	8018c4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c28:	685b      	ldr	r3, [r3, #4]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d00e      	beq.n	8018c4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c34:	685b      	ldr	r3, [r3, #4]
 8018c36:	687a      	ldr	r2, [r7, #4]
 8018c38:	6852      	ldr	r2, [r2, #4]
 8018c3a:	b2d2      	uxtb	r2, r2
 8018c3c:	4611      	mov	r1, r2
 8018c3e:	6878      	ldr	r0, [r7, #4]
 8018c40:	4798      	blx	r3
 8018c42:	4603      	mov	r3, r0
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d001      	beq.n	8018c4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8018c48:	2303      	movs	r3, #3
 8018c4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018c4c:	2340      	movs	r3, #64	@ 0x40
 8018c4e:	2200      	movs	r2, #0
 8018c50:	2100      	movs	r1, #0
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	f001 fc79 	bl	801a54a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	2201      	movs	r2, #1
 8018c5c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	2240      	movs	r2, #64	@ 0x40
 8018c64:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018c68:	2340      	movs	r3, #64	@ 0x40
 8018c6a:	2200      	movs	r2, #0
 8018c6c:	2180      	movs	r1, #128	@ 0x80
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f001 fc6b 	bl	801a54a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2201      	movs	r2, #1
 8018c78:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	2240      	movs	r2, #64	@ 0x40
 8018c7e:	621a      	str	r2, [r3, #32]

  return ret;
 8018c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c82:	4618      	mov	r0, r3
 8018c84:	3710      	adds	r7, #16
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}

08018c8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018c8a:	b480      	push	{r7}
 8018c8c:	b083      	sub	sp, #12
 8018c8e:	af00      	add	r7, sp, #0
 8018c90:	6078      	str	r0, [r7, #4]
 8018c92:	460b      	mov	r3, r1
 8018c94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	78fa      	ldrb	r2, [r7, #3]
 8018c9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018c9c:	2300      	movs	r3, #0
}
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	370c      	adds	r7, #12
 8018ca2:	46bd      	mov	sp, r7
 8018ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca8:	4770      	bx	lr

08018caa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018caa:	b480      	push	{r7}
 8018cac:	b083      	sub	sp, #12
 8018cae:	af00      	add	r7, sp, #0
 8018cb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	2b04      	cmp	r3, #4
 8018cbc:	d006      	beq.n	8018ccc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cc4:	b2da      	uxtb	r2, r3
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	2204      	movs	r2, #4
 8018cd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8018cd4:	2300      	movs	r3, #0
}
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	370c      	adds	r7, #12
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce0:	4770      	bx	lr

08018ce2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018ce2:	b480      	push	{r7}
 8018ce4:	b083      	sub	sp, #12
 8018ce6:	af00      	add	r7, sp, #0
 8018ce8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	2b04      	cmp	r3, #4
 8018cf4:	d106      	bne.n	8018d04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8018cfc:	b2da      	uxtb	r2, r3
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8018d04:	2300      	movs	r3, #0
}
 8018d06:	4618      	mov	r0, r3
 8018d08:	370c      	adds	r7, #12
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d10:	4770      	bx	lr

08018d12 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018d12:	b580      	push	{r7, lr}
 8018d14:	b082      	sub	sp, #8
 8018d16:	af00      	add	r7, sp, #0
 8018d18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	2b03      	cmp	r3, #3
 8018d24:	d110      	bne.n	8018d48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d00b      	beq.n	8018d48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d36:	69db      	ldr	r3, [r3, #28]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d005      	beq.n	8018d48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d42:	69db      	ldr	r3, [r3, #28]
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8018d48:	2300      	movs	r3, #0
}
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	3708      	adds	r7, #8
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd80      	pop	{r7, pc}

08018d52 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8018d52:	b580      	push	{r7, lr}
 8018d54:	b082      	sub	sp, #8
 8018d56:	af00      	add	r7, sp, #0
 8018d58:	6078      	str	r0, [r7, #4]
 8018d5a:	460b      	mov	r3, r1
 8018d5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	32ae      	adds	r2, #174	@ 0xae
 8018d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d101      	bne.n	8018d74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8018d70:	2303      	movs	r3, #3
 8018d72:	e01c      	b.n	8018dae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d7a:	b2db      	uxtb	r3, r3
 8018d7c:	2b03      	cmp	r3, #3
 8018d7e:	d115      	bne.n	8018dac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	32ae      	adds	r2, #174	@ 0xae
 8018d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d8e:	6a1b      	ldr	r3, [r3, #32]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d00b      	beq.n	8018dac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	32ae      	adds	r2, #174	@ 0xae
 8018d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018da2:	6a1b      	ldr	r3, [r3, #32]
 8018da4:	78fa      	ldrb	r2, [r7, #3]
 8018da6:	4611      	mov	r1, r2
 8018da8:	6878      	ldr	r0, [r7, #4]
 8018daa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018dac:	2300      	movs	r3, #0
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3708      	adds	r7, #8
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}

08018db6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018db6:	b580      	push	{r7, lr}
 8018db8:	b082      	sub	sp, #8
 8018dba:	af00      	add	r7, sp, #0
 8018dbc:	6078      	str	r0, [r7, #4]
 8018dbe:	460b      	mov	r3, r1
 8018dc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	32ae      	adds	r2, #174	@ 0xae
 8018dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d101      	bne.n	8018dd8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018dd4:	2303      	movs	r3, #3
 8018dd6:	e01c      	b.n	8018e12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018dde:	b2db      	uxtb	r3, r3
 8018de0:	2b03      	cmp	r3, #3
 8018de2:	d115      	bne.n	8018e10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	32ae      	adds	r2, #174	@ 0xae
 8018dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d00b      	beq.n	8018e10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	32ae      	adds	r2, #174	@ 0xae
 8018e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e08:	78fa      	ldrb	r2, [r7, #3]
 8018e0a:	4611      	mov	r1, r2
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018e10:	2300      	movs	r3, #0
}
 8018e12:	4618      	mov	r0, r3
 8018e14:	3708      	adds	r7, #8
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd80      	pop	{r7, pc}

08018e1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018e1a:	b480      	push	{r7}
 8018e1c:	b083      	sub	sp, #12
 8018e1e:	af00      	add	r7, sp, #0
 8018e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018e22:	2300      	movs	r3, #0
}
 8018e24:	4618      	mov	r0, r3
 8018e26:	370c      	adds	r7, #12
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2e:	4770      	bx	lr

08018e30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b084      	sub	sp, #16
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8018e38:	2300      	movs	r3, #0
 8018e3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	2201      	movs	r2, #1
 8018e40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d00e      	beq.n	8018e6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018e54:	685b      	ldr	r3, [r3, #4]
 8018e56:	687a      	ldr	r2, [r7, #4]
 8018e58:	6852      	ldr	r2, [r2, #4]
 8018e5a:	b2d2      	uxtb	r2, r2
 8018e5c:	4611      	mov	r1, r2
 8018e5e:	6878      	ldr	r0, [r7, #4]
 8018e60:	4798      	blx	r3
 8018e62:	4603      	mov	r3, r0
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d001      	beq.n	8018e6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8018e68:	2303      	movs	r3, #3
 8018e6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e6e:	4618      	mov	r0, r3
 8018e70:	3710      	adds	r7, #16
 8018e72:	46bd      	mov	sp, r7
 8018e74:	bd80      	pop	{r7, pc}

08018e76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018e76:	b480      	push	{r7}
 8018e78:	b083      	sub	sp, #12
 8018e7a:	af00      	add	r7, sp, #0
 8018e7c:	6078      	str	r0, [r7, #4]
 8018e7e:	460b      	mov	r3, r1
 8018e80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018e82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018e84:	4618      	mov	r0, r3
 8018e86:	370c      	adds	r7, #12
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8e:	4770      	bx	lr

08018e90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018e90:	b480      	push	{r7}
 8018e92:	b083      	sub	sp, #12
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	460b      	mov	r3, r1
 8018e9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018e9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	370c      	adds	r7, #12
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea8:	4770      	bx	lr

08018eaa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8018eaa:	b580      	push	{r7, lr}
 8018eac:	b086      	sub	sp, #24
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	6078      	str	r0, [r7, #4]
 8018eb2:	460b      	mov	r3, r1
 8018eb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8018ebe:	2300      	movs	r3, #0
 8018ec0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	885b      	ldrh	r3, [r3, #2]
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	68fa      	ldr	r2, [r7, #12]
 8018eca:	7812      	ldrb	r2, [r2, #0]
 8018ecc:	4293      	cmp	r3, r2
 8018ece:	d91f      	bls.n	8018f10 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018ed6:	e013      	b.n	8018f00 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018ed8:	f107 030a 	add.w	r3, r7, #10
 8018edc:	4619      	mov	r1, r3
 8018ede:	6978      	ldr	r0, [r7, #20]
 8018ee0:	f000 f81b 	bl	8018f1a <USBD_GetNextDesc>
 8018ee4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	785b      	ldrb	r3, [r3, #1]
 8018eea:	2b05      	cmp	r3, #5
 8018eec:	d108      	bne.n	8018f00 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8018eee:	697b      	ldr	r3, [r7, #20]
 8018ef0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8018ef2:	693b      	ldr	r3, [r7, #16]
 8018ef4:	789b      	ldrb	r3, [r3, #2]
 8018ef6:	78fa      	ldrb	r2, [r7, #3]
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	d008      	beq.n	8018f0e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8018efc:	2300      	movs	r3, #0
 8018efe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	885b      	ldrh	r3, [r3, #2]
 8018f04:	b29a      	uxth	r2, r3
 8018f06:	897b      	ldrh	r3, [r7, #10]
 8018f08:	429a      	cmp	r2, r3
 8018f0a:	d8e5      	bhi.n	8018ed8 <USBD_GetEpDesc+0x2e>
 8018f0c:	e000      	b.n	8018f10 <USBD_GetEpDesc+0x66>
          break;
 8018f0e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8018f10:	693b      	ldr	r3, [r7, #16]
}
 8018f12:	4618      	mov	r0, r3
 8018f14:	3718      	adds	r7, #24
 8018f16:	46bd      	mov	sp, r7
 8018f18:	bd80      	pop	{r7, pc}

08018f1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8018f1a:	b480      	push	{r7}
 8018f1c:	b085      	sub	sp, #20
 8018f1e:	af00      	add	r7, sp, #0
 8018f20:	6078      	str	r0, [r7, #4]
 8018f22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8018f28:	683b      	ldr	r3, [r7, #0]
 8018f2a:	881b      	ldrh	r3, [r3, #0]
 8018f2c:	68fa      	ldr	r2, [r7, #12]
 8018f2e:	7812      	ldrb	r2, [r2, #0]
 8018f30:	4413      	add	r3, r2
 8018f32:	b29a      	uxth	r2, r3
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	461a      	mov	r2, r3
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	4413      	add	r3, r2
 8018f42:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8018f44:	68fb      	ldr	r3, [r7, #12]
}
 8018f46:	4618      	mov	r0, r3
 8018f48:	3714      	adds	r7, #20
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f50:	4770      	bx	lr

08018f52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018f52:	b480      	push	{r7}
 8018f54:	b087      	sub	sp, #28
 8018f56:	af00      	add	r7, sp, #0
 8018f58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018f5e:	697b      	ldr	r3, [r7, #20]
 8018f60:	781b      	ldrb	r3, [r3, #0]
 8018f62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018f64:	697b      	ldr	r3, [r7, #20]
 8018f66:	3301      	adds	r3, #1
 8018f68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018f6a:	697b      	ldr	r3, [r7, #20]
 8018f6c:	781b      	ldrb	r3, [r3, #0]
 8018f6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018f70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018f74:	021b      	lsls	r3, r3, #8
 8018f76:	b21a      	sxth	r2, r3
 8018f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018f7c:	4313      	orrs	r3, r2
 8018f7e:	b21b      	sxth	r3, r3
 8018f80:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018f82:	89fb      	ldrh	r3, [r7, #14]
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	371c      	adds	r7, #28
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8e:	4770      	bx	lr

08018f90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b084      	sub	sp, #16
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
 8018f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	781b      	ldrb	r3, [r3, #0]
 8018fa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018fa6:	2b40      	cmp	r3, #64	@ 0x40
 8018fa8:	d005      	beq.n	8018fb6 <USBD_StdDevReq+0x26>
 8018faa:	2b40      	cmp	r3, #64	@ 0x40
 8018fac:	d857      	bhi.n	801905e <USBD_StdDevReq+0xce>
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d00f      	beq.n	8018fd2 <USBD_StdDevReq+0x42>
 8018fb2:	2b20      	cmp	r3, #32
 8018fb4:	d153      	bne.n	801905e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	32ae      	adds	r2, #174	@ 0xae
 8018fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018fc4:	689b      	ldr	r3, [r3, #8]
 8018fc6:	6839      	ldr	r1, [r7, #0]
 8018fc8:	6878      	ldr	r0, [r7, #4]
 8018fca:	4798      	blx	r3
 8018fcc:	4603      	mov	r3, r0
 8018fce:	73fb      	strb	r3, [r7, #15]
      break;
 8018fd0:	e04a      	b.n	8019068 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018fd2:	683b      	ldr	r3, [r7, #0]
 8018fd4:	785b      	ldrb	r3, [r3, #1]
 8018fd6:	2b09      	cmp	r3, #9
 8018fd8:	d83b      	bhi.n	8019052 <USBD_StdDevReq+0xc2>
 8018fda:	a201      	add	r2, pc, #4	@ (adr r2, 8018fe0 <USBD_StdDevReq+0x50>)
 8018fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fe0:	08019035 	.word	0x08019035
 8018fe4:	08019049 	.word	0x08019049
 8018fe8:	08019053 	.word	0x08019053
 8018fec:	0801903f 	.word	0x0801903f
 8018ff0:	08019053 	.word	0x08019053
 8018ff4:	08019013 	.word	0x08019013
 8018ff8:	08019009 	.word	0x08019009
 8018ffc:	08019053 	.word	0x08019053
 8019000:	0801902b 	.word	0x0801902b
 8019004:	0801901d 	.word	0x0801901d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8019008:	6839      	ldr	r1, [r7, #0]
 801900a:	6878      	ldr	r0, [r7, #4]
 801900c:	f000 fa3c 	bl	8019488 <USBD_GetDescriptor>
          break;
 8019010:	e024      	b.n	801905c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8019012:	6839      	ldr	r1, [r7, #0]
 8019014:	6878      	ldr	r0, [r7, #4]
 8019016:	f000 fbcb 	bl	80197b0 <USBD_SetAddress>
          break;
 801901a:	e01f      	b.n	801905c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801901c:	6839      	ldr	r1, [r7, #0]
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f000 fc0a 	bl	8019838 <USBD_SetConfig>
 8019024:	4603      	mov	r3, r0
 8019026:	73fb      	strb	r3, [r7, #15]
          break;
 8019028:	e018      	b.n	801905c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801902a:	6839      	ldr	r1, [r7, #0]
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f000 fcad 	bl	801998c <USBD_GetConfig>
          break;
 8019032:	e013      	b.n	801905c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8019034:	6839      	ldr	r1, [r7, #0]
 8019036:	6878      	ldr	r0, [r7, #4]
 8019038:	f000 fcde 	bl	80199f8 <USBD_GetStatus>
          break;
 801903c:	e00e      	b.n	801905c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801903e:	6839      	ldr	r1, [r7, #0]
 8019040:	6878      	ldr	r0, [r7, #4]
 8019042:	f000 fd0d 	bl	8019a60 <USBD_SetFeature>
          break;
 8019046:	e009      	b.n	801905c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8019048:	6839      	ldr	r1, [r7, #0]
 801904a:	6878      	ldr	r0, [r7, #4]
 801904c:	f000 fd31 	bl	8019ab2 <USBD_ClrFeature>
          break;
 8019050:	e004      	b.n	801905c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8019052:	6839      	ldr	r1, [r7, #0]
 8019054:	6878      	ldr	r0, [r7, #4]
 8019056:	f000 fd88 	bl	8019b6a <USBD_CtlError>
          break;
 801905a:	bf00      	nop
      }
      break;
 801905c:	e004      	b.n	8019068 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801905e:	6839      	ldr	r1, [r7, #0]
 8019060:	6878      	ldr	r0, [r7, #4]
 8019062:	f000 fd82 	bl	8019b6a <USBD_CtlError>
      break;
 8019066:	bf00      	nop
  }

  return ret;
 8019068:	7bfb      	ldrb	r3, [r7, #15]
}
 801906a:	4618      	mov	r0, r3
 801906c:	3710      	adds	r7, #16
 801906e:	46bd      	mov	sp, r7
 8019070:	bd80      	pop	{r7, pc}
 8019072:	bf00      	nop

08019074 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b084      	sub	sp, #16
 8019078:	af00      	add	r7, sp, #0
 801907a:	6078      	str	r0, [r7, #4]
 801907c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801907e:	2300      	movs	r3, #0
 8019080:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019082:	683b      	ldr	r3, [r7, #0]
 8019084:	781b      	ldrb	r3, [r3, #0]
 8019086:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801908a:	2b40      	cmp	r3, #64	@ 0x40
 801908c:	d005      	beq.n	801909a <USBD_StdItfReq+0x26>
 801908e:	2b40      	cmp	r3, #64	@ 0x40
 8019090:	d852      	bhi.n	8019138 <USBD_StdItfReq+0xc4>
 8019092:	2b00      	cmp	r3, #0
 8019094:	d001      	beq.n	801909a <USBD_StdItfReq+0x26>
 8019096:	2b20      	cmp	r3, #32
 8019098:	d14e      	bne.n	8019138 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80190a0:	b2db      	uxtb	r3, r3
 80190a2:	3b01      	subs	r3, #1
 80190a4:	2b02      	cmp	r3, #2
 80190a6:	d840      	bhi.n	801912a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	889b      	ldrh	r3, [r3, #4]
 80190ac:	b2db      	uxtb	r3, r3
 80190ae:	2b01      	cmp	r3, #1
 80190b0:	d836      	bhi.n	8019120 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80190b2:	683b      	ldr	r3, [r7, #0]
 80190b4:	889b      	ldrh	r3, [r3, #4]
 80190b6:	b2db      	uxtb	r3, r3
 80190b8:	4619      	mov	r1, r3
 80190ba:	6878      	ldr	r0, [r7, #4]
 80190bc:	f7ff fedb 	bl	8018e76 <USBD_CoreFindIF>
 80190c0:	4603      	mov	r3, r0
 80190c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80190c4:	7bbb      	ldrb	r3, [r7, #14]
 80190c6:	2bff      	cmp	r3, #255	@ 0xff
 80190c8:	d01d      	beq.n	8019106 <USBD_StdItfReq+0x92>
 80190ca:	7bbb      	ldrb	r3, [r7, #14]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d11a      	bne.n	8019106 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80190d0:	7bba      	ldrb	r2, [r7, #14]
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	32ae      	adds	r2, #174	@ 0xae
 80190d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190da:	689b      	ldr	r3, [r3, #8]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d00f      	beq.n	8019100 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80190e0:	7bba      	ldrb	r2, [r7, #14]
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80190e8:	7bba      	ldrb	r2, [r7, #14]
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	32ae      	adds	r2, #174	@ 0xae
 80190ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190f2:	689b      	ldr	r3, [r3, #8]
 80190f4:	6839      	ldr	r1, [r7, #0]
 80190f6:	6878      	ldr	r0, [r7, #4]
 80190f8:	4798      	blx	r3
 80190fa:	4603      	mov	r3, r0
 80190fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80190fe:	e004      	b.n	801910a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8019100:	2303      	movs	r3, #3
 8019102:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8019104:	e001      	b.n	801910a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8019106:	2303      	movs	r3, #3
 8019108:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801910a:	683b      	ldr	r3, [r7, #0]
 801910c:	88db      	ldrh	r3, [r3, #6]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d110      	bne.n	8019134 <USBD_StdItfReq+0xc0>
 8019112:	7bfb      	ldrb	r3, [r7, #15]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d10d      	bne.n	8019134 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8019118:	6878      	ldr	r0, [r7, #4]
 801911a:	f000 fdfd 	bl	8019d18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801911e:	e009      	b.n	8019134 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8019120:	6839      	ldr	r1, [r7, #0]
 8019122:	6878      	ldr	r0, [r7, #4]
 8019124:	f000 fd21 	bl	8019b6a <USBD_CtlError>
          break;
 8019128:	e004      	b.n	8019134 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801912a:	6839      	ldr	r1, [r7, #0]
 801912c:	6878      	ldr	r0, [r7, #4]
 801912e:	f000 fd1c 	bl	8019b6a <USBD_CtlError>
          break;
 8019132:	e000      	b.n	8019136 <USBD_StdItfReq+0xc2>
          break;
 8019134:	bf00      	nop
      }
      break;
 8019136:	e004      	b.n	8019142 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8019138:	6839      	ldr	r1, [r7, #0]
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f000 fd15 	bl	8019b6a <USBD_CtlError>
      break;
 8019140:	bf00      	nop
  }

  return ret;
 8019142:	7bfb      	ldrb	r3, [r7, #15]
}
 8019144:	4618      	mov	r0, r3
 8019146:	3710      	adds	r7, #16
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}

0801914c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801914c:	b580      	push	{r7, lr}
 801914e:	b084      	sub	sp, #16
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
 8019154:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8019156:	2300      	movs	r3, #0
 8019158:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801915a:	683b      	ldr	r3, [r7, #0]
 801915c:	889b      	ldrh	r3, [r3, #4]
 801915e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019160:	683b      	ldr	r3, [r7, #0]
 8019162:	781b      	ldrb	r3, [r3, #0]
 8019164:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019168:	2b40      	cmp	r3, #64	@ 0x40
 801916a:	d007      	beq.n	801917c <USBD_StdEPReq+0x30>
 801916c:	2b40      	cmp	r3, #64	@ 0x40
 801916e:	f200 817f 	bhi.w	8019470 <USBD_StdEPReq+0x324>
 8019172:	2b00      	cmp	r3, #0
 8019174:	d02a      	beq.n	80191cc <USBD_StdEPReq+0x80>
 8019176:	2b20      	cmp	r3, #32
 8019178:	f040 817a 	bne.w	8019470 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801917c:	7bbb      	ldrb	r3, [r7, #14]
 801917e:	4619      	mov	r1, r3
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f7ff fe85 	bl	8018e90 <USBD_CoreFindEP>
 8019186:	4603      	mov	r3, r0
 8019188:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801918a:	7b7b      	ldrb	r3, [r7, #13]
 801918c:	2bff      	cmp	r3, #255	@ 0xff
 801918e:	f000 8174 	beq.w	801947a <USBD_StdEPReq+0x32e>
 8019192:	7b7b      	ldrb	r3, [r7, #13]
 8019194:	2b00      	cmp	r3, #0
 8019196:	f040 8170 	bne.w	801947a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801919a:	7b7a      	ldrb	r2, [r7, #13]
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80191a2:	7b7a      	ldrb	r2, [r7, #13]
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	32ae      	adds	r2, #174	@ 0xae
 80191a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191ac:	689b      	ldr	r3, [r3, #8]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	f000 8163 	beq.w	801947a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80191b4:	7b7a      	ldrb	r2, [r7, #13]
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	32ae      	adds	r2, #174	@ 0xae
 80191ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191be:	689b      	ldr	r3, [r3, #8]
 80191c0:	6839      	ldr	r1, [r7, #0]
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	4798      	blx	r3
 80191c6:	4603      	mov	r3, r0
 80191c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80191ca:	e156      	b.n	801947a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80191cc:	683b      	ldr	r3, [r7, #0]
 80191ce:	785b      	ldrb	r3, [r3, #1]
 80191d0:	2b03      	cmp	r3, #3
 80191d2:	d008      	beq.n	80191e6 <USBD_StdEPReq+0x9a>
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	f300 8145 	bgt.w	8019464 <USBD_StdEPReq+0x318>
 80191da:	2b00      	cmp	r3, #0
 80191dc:	f000 809b 	beq.w	8019316 <USBD_StdEPReq+0x1ca>
 80191e0:	2b01      	cmp	r3, #1
 80191e2:	d03c      	beq.n	801925e <USBD_StdEPReq+0x112>
 80191e4:	e13e      	b.n	8019464 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80191ec:	b2db      	uxtb	r3, r3
 80191ee:	2b02      	cmp	r3, #2
 80191f0:	d002      	beq.n	80191f8 <USBD_StdEPReq+0xac>
 80191f2:	2b03      	cmp	r3, #3
 80191f4:	d016      	beq.n	8019224 <USBD_StdEPReq+0xd8>
 80191f6:	e02c      	b.n	8019252 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80191f8:	7bbb      	ldrb	r3, [r7, #14]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d00d      	beq.n	801921a <USBD_StdEPReq+0xce>
 80191fe:	7bbb      	ldrb	r3, [r7, #14]
 8019200:	2b80      	cmp	r3, #128	@ 0x80
 8019202:	d00a      	beq.n	801921a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019204:	7bbb      	ldrb	r3, [r7, #14]
 8019206:	4619      	mov	r1, r3
 8019208:	6878      	ldr	r0, [r7, #4]
 801920a:	f001 f9e3 	bl	801a5d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801920e:	2180      	movs	r1, #128	@ 0x80
 8019210:	6878      	ldr	r0, [r7, #4]
 8019212:	f001 f9df 	bl	801a5d4 <USBD_LL_StallEP>
 8019216:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019218:	e020      	b.n	801925c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801921a:	6839      	ldr	r1, [r7, #0]
 801921c:	6878      	ldr	r0, [r7, #4]
 801921e:	f000 fca4 	bl	8019b6a <USBD_CtlError>
              break;
 8019222:	e01b      	b.n	801925c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	885b      	ldrh	r3, [r3, #2]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d10e      	bne.n	801924a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801922c:	7bbb      	ldrb	r3, [r7, #14]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d00b      	beq.n	801924a <USBD_StdEPReq+0xfe>
 8019232:	7bbb      	ldrb	r3, [r7, #14]
 8019234:	2b80      	cmp	r3, #128	@ 0x80
 8019236:	d008      	beq.n	801924a <USBD_StdEPReq+0xfe>
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	88db      	ldrh	r3, [r3, #6]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d104      	bne.n	801924a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8019240:	7bbb      	ldrb	r3, [r7, #14]
 8019242:	4619      	mov	r1, r3
 8019244:	6878      	ldr	r0, [r7, #4]
 8019246:	f001 f9c5 	bl	801a5d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801924a:	6878      	ldr	r0, [r7, #4]
 801924c:	f000 fd64 	bl	8019d18 <USBD_CtlSendStatus>

              break;
 8019250:	e004      	b.n	801925c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8019252:	6839      	ldr	r1, [r7, #0]
 8019254:	6878      	ldr	r0, [r7, #4]
 8019256:	f000 fc88 	bl	8019b6a <USBD_CtlError>
              break;
 801925a:	bf00      	nop
          }
          break;
 801925c:	e107      	b.n	801946e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019264:	b2db      	uxtb	r3, r3
 8019266:	2b02      	cmp	r3, #2
 8019268:	d002      	beq.n	8019270 <USBD_StdEPReq+0x124>
 801926a:	2b03      	cmp	r3, #3
 801926c:	d016      	beq.n	801929c <USBD_StdEPReq+0x150>
 801926e:	e04b      	b.n	8019308 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019270:	7bbb      	ldrb	r3, [r7, #14]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d00d      	beq.n	8019292 <USBD_StdEPReq+0x146>
 8019276:	7bbb      	ldrb	r3, [r7, #14]
 8019278:	2b80      	cmp	r3, #128	@ 0x80
 801927a:	d00a      	beq.n	8019292 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801927c:	7bbb      	ldrb	r3, [r7, #14]
 801927e:	4619      	mov	r1, r3
 8019280:	6878      	ldr	r0, [r7, #4]
 8019282:	f001 f9a7 	bl	801a5d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8019286:	2180      	movs	r1, #128	@ 0x80
 8019288:	6878      	ldr	r0, [r7, #4]
 801928a:	f001 f9a3 	bl	801a5d4 <USBD_LL_StallEP>
 801928e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019290:	e040      	b.n	8019314 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8019292:	6839      	ldr	r1, [r7, #0]
 8019294:	6878      	ldr	r0, [r7, #4]
 8019296:	f000 fc68 	bl	8019b6a <USBD_CtlError>
              break;
 801929a:	e03b      	b.n	8019314 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	885b      	ldrh	r3, [r3, #2]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d136      	bne.n	8019312 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80192a4:	7bbb      	ldrb	r3, [r7, #14]
 80192a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d004      	beq.n	80192b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80192ae:	7bbb      	ldrb	r3, [r7, #14]
 80192b0:	4619      	mov	r1, r3
 80192b2:	6878      	ldr	r0, [r7, #4]
 80192b4:	f001 f9ad 	bl	801a612 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80192b8:	6878      	ldr	r0, [r7, #4]
 80192ba:	f000 fd2d 	bl	8019d18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80192be:	7bbb      	ldrb	r3, [r7, #14]
 80192c0:	4619      	mov	r1, r3
 80192c2:	6878      	ldr	r0, [r7, #4]
 80192c4:	f7ff fde4 	bl	8018e90 <USBD_CoreFindEP>
 80192c8:	4603      	mov	r3, r0
 80192ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80192cc:	7b7b      	ldrb	r3, [r7, #13]
 80192ce:	2bff      	cmp	r3, #255	@ 0xff
 80192d0:	d01f      	beq.n	8019312 <USBD_StdEPReq+0x1c6>
 80192d2:	7b7b      	ldrb	r3, [r7, #13]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d11c      	bne.n	8019312 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80192d8:	7b7a      	ldrb	r2, [r7, #13]
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80192e0:	7b7a      	ldrb	r2, [r7, #13]
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	32ae      	adds	r2, #174	@ 0xae
 80192e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192ea:	689b      	ldr	r3, [r3, #8]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d010      	beq.n	8019312 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80192f0:	7b7a      	ldrb	r2, [r7, #13]
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	32ae      	adds	r2, #174	@ 0xae
 80192f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192fa:	689b      	ldr	r3, [r3, #8]
 80192fc:	6839      	ldr	r1, [r7, #0]
 80192fe:	6878      	ldr	r0, [r7, #4]
 8019300:	4798      	blx	r3
 8019302:	4603      	mov	r3, r0
 8019304:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8019306:	e004      	b.n	8019312 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8019308:	6839      	ldr	r1, [r7, #0]
 801930a:	6878      	ldr	r0, [r7, #4]
 801930c:	f000 fc2d 	bl	8019b6a <USBD_CtlError>
              break;
 8019310:	e000      	b.n	8019314 <USBD_StdEPReq+0x1c8>
              break;
 8019312:	bf00      	nop
          }
          break;
 8019314:	e0ab      	b.n	801946e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801931c:	b2db      	uxtb	r3, r3
 801931e:	2b02      	cmp	r3, #2
 8019320:	d002      	beq.n	8019328 <USBD_StdEPReq+0x1dc>
 8019322:	2b03      	cmp	r3, #3
 8019324:	d032      	beq.n	801938c <USBD_StdEPReq+0x240>
 8019326:	e097      	b.n	8019458 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019328:	7bbb      	ldrb	r3, [r7, #14]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d007      	beq.n	801933e <USBD_StdEPReq+0x1f2>
 801932e:	7bbb      	ldrb	r3, [r7, #14]
 8019330:	2b80      	cmp	r3, #128	@ 0x80
 8019332:	d004      	beq.n	801933e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8019334:	6839      	ldr	r1, [r7, #0]
 8019336:	6878      	ldr	r0, [r7, #4]
 8019338:	f000 fc17 	bl	8019b6a <USBD_CtlError>
                break;
 801933c:	e091      	b.n	8019462 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801933e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019342:	2b00      	cmp	r3, #0
 8019344:	da0b      	bge.n	801935e <USBD_StdEPReq+0x212>
 8019346:	7bbb      	ldrb	r3, [r7, #14]
 8019348:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801934c:	4613      	mov	r3, r2
 801934e:	009b      	lsls	r3, r3, #2
 8019350:	4413      	add	r3, r2
 8019352:	009b      	lsls	r3, r3, #2
 8019354:	3310      	adds	r3, #16
 8019356:	687a      	ldr	r2, [r7, #4]
 8019358:	4413      	add	r3, r2
 801935a:	3304      	adds	r3, #4
 801935c:	e00b      	b.n	8019376 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801935e:	7bbb      	ldrb	r3, [r7, #14]
 8019360:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019364:	4613      	mov	r3, r2
 8019366:	009b      	lsls	r3, r3, #2
 8019368:	4413      	add	r3, r2
 801936a:	009b      	lsls	r3, r3, #2
 801936c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	4413      	add	r3, r2
 8019374:	3304      	adds	r3, #4
 8019376:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	2200      	movs	r2, #0
 801937c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	2202      	movs	r2, #2
 8019382:	4619      	mov	r1, r3
 8019384:	6878      	ldr	r0, [r7, #4]
 8019386:	f000 fc6d 	bl	8019c64 <USBD_CtlSendData>
              break;
 801938a:	e06a      	b.n	8019462 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801938c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019390:	2b00      	cmp	r3, #0
 8019392:	da11      	bge.n	80193b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8019394:	7bbb      	ldrb	r3, [r7, #14]
 8019396:	f003 020f 	and.w	r2, r3, #15
 801939a:	6879      	ldr	r1, [r7, #4]
 801939c:	4613      	mov	r3, r2
 801939e:	009b      	lsls	r3, r3, #2
 80193a0:	4413      	add	r3, r2
 80193a2:	009b      	lsls	r3, r3, #2
 80193a4:	440b      	add	r3, r1
 80193a6:	3324      	adds	r3, #36	@ 0x24
 80193a8:	881b      	ldrh	r3, [r3, #0]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d117      	bne.n	80193de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80193ae:	6839      	ldr	r1, [r7, #0]
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f000 fbda 	bl	8019b6a <USBD_CtlError>
                  break;
 80193b6:	e054      	b.n	8019462 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80193b8:	7bbb      	ldrb	r3, [r7, #14]
 80193ba:	f003 020f 	and.w	r2, r3, #15
 80193be:	6879      	ldr	r1, [r7, #4]
 80193c0:	4613      	mov	r3, r2
 80193c2:	009b      	lsls	r3, r3, #2
 80193c4:	4413      	add	r3, r2
 80193c6:	009b      	lsls	r3, r3, #2
 80193c8:	440b      	add	r3, r1
 80193ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80193ce:	881b      	ldrh	r3, [r3, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d104      	bne.n	80193de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80193d4:	6839      	ldr	r1, [r7, #0]
 80193d6:	6878      	ldr	r0, [r7, #4]
 80193d8:	f000 fbc7 	bl	8019b6a <USBD_CtlError>
                  break;
 80193dc:	e041      	b.n	8019462 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80193de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	da0b      	bge.n	80193fe <USBD_StdEPReq+0x2b2>
 80193e6:	7bbb      	ldrb	r3, [r7, #14]
 80193e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80193ec:	4613      	mov	r3, r2
 80193ee:	009b      	lsls	r3, r3, #2
 80193f0:	4413      	add	r3, r2
 80193f2:	009b      	lsls	r3, r3, #2
 80193f4:	3310      	adds	r3, #16
 80193f6:	687a      	ldr	r2, [r7, #4]
 80193f8:	4413      	add	r3, r2
 80193fa:	3304      	adds	r3, #4
 80193fc:	e00b      	b.n	8019416 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80193fe:	7bbb      	ldrb	r3, [r7, #14]
 8019400:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019404:	4613      	mov	r3, r2
 8019406:	009b      	lsls	r3, r3, #2
 8019408:	4413      	add	r3, r2
 801940a:	009b      	lsls	r3, r3, #2
 801940c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8019410:	687a      	ldr	r2, [r7, #4]
 8019412:	4413      	add	r3, r2
 8019414:	3304      	adds	r3, #4
 8019416:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8019418:	7bbb      	ldrb	r3, [r7, #14]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d002      	beq.n	8019424 <USBD_StdEPReq+0x2d8>
 801941e:	7bbb      	ldrb	r3, [r7, #14]
 8019420:	2b80      	cmp	r3, #128	@ 0x80
 8019422:	d103      	bne.n	801942c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8019424:	68bb      	ldr	r3, [r7, #8]
 8019426:	2200      	movs	r2, #0
 8019428:	601a      	str	r2, [r3, #0]
 801942a:	e00e      	b.n	801944a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801942c:	7bbb      	ldrb	r3, [r7, #14]
 801942e:	4619      	mov	r1, r3
 8019430:	6878      	ldr	r0, [r7, #4]
 8019432:	f001 f90d 	bl	801a650 <USBD_LL_IsStallEP>
 8019436:	4603      	mov	r3, r0
 8019438:	2b00      	cmp	r3, #0
 801943a:	d003      	beq.n	8019444 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801943c:	68bb      	ldr	r3, [r7, #8]
 801943e:	2201      	movs	r2, #1
 8019440:	601a      	str	r2, [r3, #0]
 8019442:	e002      	b.n	801944a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8019444:	68bb      	ldr	r3, [r7, #8]
 8019446:	2200      	movs	r2, #0
 8019448:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	2202      	movs	r2, #2
 801944e:	4619      	mov	r1, r3
 8019450:	6878      	ldr	r0, [r7, #4]
 8019452:	f000 fc07 	bl	8019c64 <USBD_CtlSendData>
              break;
 8019456:	e004      	b.n	8019462 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8019458:	6839      	ldr	r1, [r7, #0]
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f000 fb85 	bl	8019b6a <USBD_CtlError>
              break;
 8019460:	bf00      	nop
          }
          break;
 8019462:	e004      	b.n	801946e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8019464:	6839      	ldr	r1, [r7, #0]
 8019466:	6878      	ldr	r0, [r7, #4]
 8019468:	f000 fb7f 	bl	8019b6a <USBD_CtlError>
          break;
 801946c:	bf00      	nop
      }
      break;
 801946e:	e005      	b.n	801947c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8019470:	6839      	ldr	r1, [r7, #0]
 8019472:	6878      	ldr	r0, [r7, #4]
 8019474:	f000 fb79 	bl	8019b6a <USBD_CtlError>
      break;
 8019478:	e000      	b.n	801947c <USBD_StdEPReq+0x330>
      break;
 801947a:	bf00      	nop
  }

  return ret;
 801947c:	7bfb      	ldrb	r3, [r7, #15]
}
 801947e:	4618      	mov	r0, r3
 8019480:	3710      	adds	r7, #16
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}
	...

08019488 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b084      	sub	sp, #16
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
 8019490:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019492:	2300      	movs	r3, #0
 8019494:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8019496:	2300      	movs	r3, #0
 8019498:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801949a:	2300      	movs	r3, #0
 801949c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	885b      	ldrh	r3, [r3, #2]
 80194a2:	0a1b      	lsrs	r3, r3, #8
 80194a4:	b29b      	uxth	r3, r3
 80194a6:	3b01      	subs	r3, #1
 80194a8:	2b0e      	cmp	r3, #14
 80194aa:	f200 8152 	bhi.w	8019752 <USBD_GetDescriptor+0x2ca>
 80194ae:	a201      	add	r2, pc, #4	@ (adr r2, 80194b4 <USBD_GetDescriptor+0x2c>)
 80194b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194b4:	08019525 	.word	0x08019525
 80194b8:	0801953d 	.word	0x0801953d
 80194bc:	0801957d 	.word	0x0801957d
 80194c0:	08019753 	.word	0x08019753
 80194c4:	08019753 	.word	0x08019753
 80194c8:	080196f3 	.word	0x080196f3
 80194cc:	0801971f 	.word	0x0801971f
 80194d0:	08019753 	.word	0x08019753
 80194d4:	08019753 	.word	0x08019753
 80194d8:	08019753 	.word	0x08019753
 80194dc:	08019753 	.word	0x08019753
 80194e0:	08019753 	.word	0x08019753
 80194e4:	08019753 	.word	0x08019753
 80194e8:	08019753 	.word	0x08019753
 80194ec:	080194f1 	.word	0x080194f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80194f6:	69db      	ldr	r3, [r3, #28]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d00b      	beq.n	8019514 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019502:	69db      	ldr	r3, [r3, #28]
 8019504:	687a      	ldr	r2, [r7, #4]
 8019506:	7c12      	ldrb	r2, [r2, #16]
 8019508:	f107 0108 	add.w	r1, r7, #8
 801950c:	4610      	mov	r0, r2
 801950e:	4798      	blx	r3
 8019510:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019512:	e126      	b.n	8019762 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019514:	6839      	ldr	r1, [r7, #0]
 8019516:	6878      	ldr	r0, [r7, #4]
 8019518:	f000 fb27 	bl	8019b6a <USBD_CtlError>
        err++;
 801951c:	7afb      	ldrb	r3, [r7, #11]
 801951e:	3301      	adds	r3, #1
 8019520:	72fb      	strb	r3, [r7, #11]
      break;
 8019522:	e11e      	b.n	8019762 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	687a      	ldr	r2, [r7, #4]
 801952e:	7c12      	ldrb	r2, [r2, #16]
 8019530:	f107 0108 	add.w	r1, r7, #8
 8019534:	4610      	mov	r0, r2
 8019536:	4798      	blx	r3
 8019538:	60f8      	str	r0, [r7, #12]
      break;
 801953a:	e112      	b.n	8019762 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	7c1b      	ldrb	r3, [r3, #16]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d10d      	bne.n	8019560 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801954c:	f107 0208 	add.w	r2, r7, #8
 8019550:	4610      	mov	r0, r2
 8019552:	4798      	blx	r3
 8019554:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019556:	68fb      	ldr	r3, [r7, #12]
 8019558:	3301      	adds	r3, #1
 801955a:	2202      	movs	r2, #2
 801955c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801955e:	e100      	b.n	8019762 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019568:	f107 0208 	add.w	r2, r7, #8
 801956c:	4610      	mov	r0, r2
 801956e:	4798      	blx	r3
 8019570:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	3301      	adds	r3, #1
 8019576:	2202      	movs	r2, #2
 8019578:	701a      	strb	r2, [r3, #0]
      break;
 801957a:	e0f2      	b.n	8019762 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801957c:	683b      	ldr	r3, [r7, #0]
 801957e:	885b      	ldrh	r3, [r3, #2]
 8019580:	b2db      	uxtb	r3, r3
 8019582:	2b05      	cmp	r3, #5
 8019584:	f200 80ac 	bhi.w	80196e0 <USBD_GetDescriptor+0x258>
 8019588:	a201      	add	r2, pc, #4	@ (adr r2, 8019590 <USBD_GetDescriptor+0x108>)
 801958a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801958e:	bf00      	nop
 8019590:	080195a9 	.word	0x080195a9
 8019594:	080195dd 	.word	0x080195dd
 8019598:	08019611 	.word	0x08019611
 801959c:	08019645 	.word	0x08019645
 80195a0:	08019679 	.word	0x08019679
 80195a4:	080196ad 	.word	0x080196ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d00b      	beq.n	80195cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	687a      	ldr	r2, [r7, #4]
 80195be:	7c12      	ldrb	r2, [r2, #16]
 80195c0:	f107 0108 	add.w	r1, r7, #8
 80195c4:	4610      	mov	r0, r2
 80195c6:	4798      	blx	r3
 80195c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80195ca:	e091      	b.n	80196f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80195cc:	6839      	ldr	r1, [r7, #0]
 80195ce:	6878      	ldr	r0, [r7, #4]
 80195d0:	f000 facb 	bl	8019b6a <USBD_CtlError>
            err++;
 80195d4:	7afb      	ldrb	r3, [r7, #11]
 80195d6:	3301      	adds	r3, #1
 80195d8:	72fb      	strb	r3, [r7, #11]
          break;
 80195da:	e089      	b.n	80196f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195e2:	689b      	ldr	r3, [r3, #8]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d00b      	beq.n	8019600 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195ee:	689b      	ldr	r3, [r3, #8]
 80195f0:	687a      	ldr	r2, [r7, #4]
 80195f2:	7c12      	ldrb	r2, [r2, #16]
 80195f4:	f107 0108 	add.w	r1, r7, #8
 80195f8:	4610      	mov	r0, r2
 80195fa:	4798      	blx	r3
 80195fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80195fe:	e077      	b.n	80196f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019600:	6839      	ldr	r1, [r7, #0]
 8019602:	6878      	ldr	r0, [r7, #4]
 8019604:	f000 fab1 	bl	8019b6a <USBD_CtlError>
            err++;
 8019608:	7afb      	ldrb	r3, [r7, #11]
 801960a:	3301      	adds	r3, #1
 801960c:	72fb      	strb	r3, [r7, #11]
          break;
 801960e:	e06f      	b.n	80196f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019616:	68db      	ldr	r3, [r3, #12]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d00b      	beq.n	8019634 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019622:	68db      	ldr	r3, [r3, #12]
 8019624:	687a      	ldr	r2, [r7, #4]
 8019626:	7c12      	ldrb	r2, [r2, #16]
 8019628:	f107 0108 	add.w	r1, r7, #8
 801962c:	4610      	mov	r0, r2
 801962e:	4798      	blx	r3
 8019630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019632:	e05d      	b.n	80196f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019634:	6839      	ldr	r1, [r7, #0]
 8019636:	6878      	ldr	r0, [r7, #4]
 8019638:	f000 fa97 	bl	8019b6a <USBD_CtlError>
            err++;
 801963c:	7afb      	ldrb	r3, [r7, #11]
 801963e:	3301      	adds	r3, #1
 8019640:	72fb      	strb	r3, [r7, #11]
          break;
 8019642:	e055      	b.n	80196f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801964a:	691b      	ldr	r3, [r3, #16]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d00b      	beq.n	8019668 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019656:	691b      	ldr	r3, [r3, #16]
 8019658:	687a      	ldr	r2, [r7, #4]
 801965a:	7c12      	ldrb	r2, [r2, #16]
 801965c:	f107 0108 	add.w	r1, r7, #8
 8019660:	4610      	mov	r0, r2
 8019662:	4798      	blx	r3
 8019664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019666:	e043      	b.n	80196f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019668:	6839      	ldr	r1, [r7, #0]
 801966a:	6878      	ldr	r0, [r7, #4]
 801966c:	f000 fa7d 	bl	8019b6a <USBD_CtlError>
            err++;
 8019670:	7afb      	ldrb	r3, [r7, #11]
 8019672:	3301      	adds	r3, #1
 8019674:	72fb      	strb	r3, [r7, #11]
          break;
 8019676:	e03b      	b.n	80196f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801967e:	695b      	ldr	r3, [r3, #20]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d00b      	beq.n	801969c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801968a:	695b      	ldr	r3, [r3, #20]
 801968c:	687a      	ldr	r2, [r7, #4]
 801968e:	7c12      	ldrb	r2, [r2, #16]
 8019690:	f107 0108 	add.w	r1, r7, #8
 8019694:	4610      	mov	r0, r2
 8019696:	4798      	blx	r3
 8019698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801969a:	e029      	b.n	80196f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801969c:	6839      	ldr	r1, [r7, #0]
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f000 fa63 	bl	8019b6a <USBD_CtlError>
            err++;
 80196a4:	7afb      	ldrb	r3, [r7, #11]
 80196a6:	3301      	adds	r3, #1
 80196a8:	72fb      	strb	r3, [r7, #11]
          break;
 80196aa:	e021      	b.n	80196f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80196b2:	699b      	ldr	r3, [r3, #24]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d00b      	beq.n	80196d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80196be:	699b      	ldr	r3, [r3, #24]
 80196c0:	687a      	ldr	r2, [r7, #4]
 80196c2:	7c12      	ldrb	r2, [r2, #16]
 80196c4:	f107 0108 	add.w	r1, r7, #8
 80196c8:	4610      	mov	r0, r2
 80196ca:	4798      	blx	r3
 80196cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80196ce:	e00f      	b.n	80196f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80196d0:	6839      	ldr	r1, [r7, #0]
 80196d2:	6878      	ldr	r0, [r7, #4]
 80196d4:	f000 fa49 	bl	8019b6a <USBD_CtlError>
            err++;
 80196d8:	7afb      	ldrb	r3, [r7, #11]
 80196da:	3301      	adds	r3, #1
 80196dc:	72fb      	strb	r3, [r7, #11]
          break;
 80196de:	e007      	b.n	80196f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80196e0:	6839      	ldr	r1, [r7, #0]
 80196e2:	6878      	ldr	r0, [r7, #4]
 80196e4:	f000 fa41 	bl	8019b6a <USBD_CtlError>
          err++;
 80196e8:	7afb      	ldrb	r3, [r7, #11]
 80196ea:	3301      	adds	r3, #1
 80196ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80196ee:	bf00      	nop
      }
      break;
 80196f0:	e037      	b.n	8019762 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	7c1b      	ldrb	r3, [r3, #16]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d109      	bne.n	801970e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019702:	f107 0208 	add.w	r2, r7, #8
 8019706:	4610      	mov	r0, r2
 8019708:	4798      	blx	r3
 801970a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801970c:	e029      	b.n	8019762 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801970e:	6839      	ldr	r1, [r7, #0]
 8019710:	6878      	ldr	r0, [r7, #4]
 8019712:	f000 fa2a 	bl	8019b6a <USBD_CtlError>
        err++;
 8019716:	7afb      	ldrb	r3, [r7, #11]
 8019718:	3301      	adds	r3, #1
 801971a:	72fb      	strb	r3, [r7, #11]
      break;
 801971c:	e021      	b.n	8019762 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	7c1b      	ldrb	r3, [r3, #16]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d10d      	bne.n	8019742 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801972c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801972e:	f107 0208 	add.w	r2, r7, #8
 8019732:	4610      	mov	r0, r2
 8019734:	4798      	blx	r3
 8019736:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	3301      	adds	r3, #1
 801973c:	2207      	movs	r2, #7
 801973e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019740:	e00f      	b.n	8019762 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019742:	6839      	ldr	r1, [r7, #0]
 8019744:	6878      	ldr	r0, [r7, #4]
 8019746:	f000 fa10 	bl	8019b6a <USBD_CtlError>
        err++;
 801974a:	7afb      	ldrb	r3, [r7, #11]
 801974c:	3301      	adds	r3, #1
 801974e:	72fb      	strb	r3, [r7, #11]
      break;
 8019750:	e007      	b.n	8019762 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8019752:	6839      	ldr	r1, [r7, #0]
 8019754:	6878      	ldr	r0, [r7, #4]
 8019756:	f000 fa08 	bl	8019b6a <USBD_CtlError>
      err++;
 801975a:	7afb      	ldrb	r3, [r7, #11]
 801975c:	3301      	adds	r3, #1
 801975e:	72fb      	strb	r3, [r7, #11]
      break;
 8019760:	bf00      	nop
  }

  if (err != 0U)
 8019762:	7afb      	ldrb	r3, [r7, #11]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d11e      	bne.n	80197a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	88db      	ldrh	r3, [r3, #6]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d016      	beq.n	801979e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8019770:	893b      	ldrh	r3, [r7, #8]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d00e      	beq.n	8019794 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8019776:	683b      	ldr	r3, [r7, #0]
 8019778:	88da      	ldrh	r2, [r3, #6]
 801977a:	893b      	ldrh	r3, [r7, #8]
 801977c:	4293      	cmp	r3, r2
 801977e:	bf28      	it	cs
 8019780:	4613      	movcs	r3, r2
 8019782:	b29b      	uxth	r3, r3
 8019784:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8019786:	893b      	ldrh	r3, [r7, #8]
 8019788:	461a      	mov	r2, r3
 801978a:	68f9      	ldr	r1, [r7, #12]
 801978c:	6878      	ldr	r0, [r7, #4]
 801978e:	f000 fa69 	bl	8019c64 <USBD_CtlSendData>
 8019792:	e009      	b.n	80197a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019794:	6839      	ldr	r1, [r7, #0]
 8019796:	6878      	ldr	r0, [r7, #4]
 8019798:	f000 f9e7 	bl	8019b6a <USBD_CtlError>
 801979c:	e004      	b.n	80197a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801979e:	6878      	ldr	r0, [r7, #4]
 80197a0:	f000 faba 	bl	8019d18 <USBD_CtlSendStatus>
 80197a4:	e000      	b.n	80197a8 <USBD_GetDescriptor+0x320>
    return;
 80197a6:	bf00      	nop
  }
}
 80197a8:	3710      	adds	r7, #16
 80197aa:	46bd      	mov	sp, r7
 80197ac:	bd80      	pop	{r7, pc}
 80197ae:	bf00      	nop

080197b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b084      	sub	sp, #16
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	889b      	ldrh	r3, [r3, #4]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d131      	bne.n	8019826 <USBD_SetAddress+0x76>
 80197c2:	683b      	ldr	r3, [r7, #0]
 80197c4:	88db      	ldrh	r3, [r3, #6]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d12d      	bne.n	8019826 <USBD_SetAddress+0x76>
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	885b      	ldrh	r3, [r3, #2]
 80197ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80197d0:	d829      	bhi.n	8019826 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80197d2:	683b      	ldr	r3, [r7, #0]
 80197d4:	885b      	ldrh	r3, [r3, #2]
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80197dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80197e4:	b2db      	uxtb	r3, r3
 80197e6:	2b03      	cmp	r3, #3
 80197e8:	d104      	bne.n	80197f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80197ea:	6839      	ldr	r1, [r7, #0]
 80197ec:	6878      	ldr	r0, [r7, #4]
 80197ee:	f000 f9bc 	bl	8019b6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80197f2:	e01d      	b.n	8019830 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	7bfa      	ldrb	r2, [r7, #15]
 80197f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80197fc:	7bfb      	ldrb	r3, [r7, #15]
 80197fe:	4619      	mov	r1, r3
 8019800:	6878      	ldr	r0, [r7, #4]
 8019802:	f000 ff51 	bl	801a6a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8019806:	6878      	ldr	r0, [r7, #4]
 8019808:	f000 fa86 	bl	8019d18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801980c:	7bfb      	ldrb	r3, [r7, #15]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d004      	beq.n	801981c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	2202      	movs	r2, #2
 8019816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801981a:	e009      	b.n	8019830 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	2201      	movs	r2, #1
 8019820:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019824:	e004      	b.n	8019830 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8019826:	6839      	ldr	r1, [r7, #0]
 8019828:	6878      	ldr	r0, [r7, #4]
 801982a:	f000 f99e 	bl	8019b6a <USBD_CtlError>
  }
}
 801982e:	bf00      	nop
 8019830:	bf00      	nop
 8019832:	3710      	adds	r7, #16
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}

08019838 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b084      	sub	sp, #16
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
 8019840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019842:	2300      	movs	r3, #0
 8019844:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8019846:	683b      	ldr	r3, [r7, #0]
 8019848:	885b      	ldrh	r3, [r3, #2]
 801984a:	b2da      	uxtb	r2, r3
 801984c:	4b4e      	ldr	r3, [pc, #312]	@ (8019988 <USBD_SetConfig+0x150>)
 801984e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8019850:	4b4d      	ldr	r3, [pc, #308]	@ (8019988 <USBD_SetConfig+0x150>)
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	2b01      	cmp	r3, #1
 8019856:	d905      	bls.n	8019864 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8019858:	6839      	ldr	r1, [r7, #0]
 801985a:	6878      	ldr	r0, [r7, #4]
 801985c:	f000 f985 	bl	8019b6a <USBD_CtlError>
    return USBD_FAIL;
 8019860:	2303      	movs	r3, #3
 8019862:	e08c      	b.n	801997e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801986a:	b2db      	uxtb	r3, r3
 801986c:	2b02      	cmp	r3, #2
 801986e:	d002      	beq.n	8019876 <USBD_SetConfig+0x3e>
 8019870:	2b03      	cmp	r3, #3
 8019872:	d029      	beq.n	80198c8 <USBD_SetConfig+0x90>
 8019874:	e075      	b.n	8019962 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8019876:	4b44      	ldr	r3, [pc, #272]	@ (8019988 <USBD_SetConfig+0x150>)
 8019878:	781b      	ldrb	r3, [r3, #0]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d020      	beq.n	80198c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801987e:	4b42      	ldr	r3, [pc, #264]	@ (8019988 <USBD_SetConfig+0x150>)
 8019880:	781b      	ldrb	r3, [r3, #0]
 8019882:	461a      	mov	r2, r3
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019888:	4b3f      	ldr	r3, [pc, #252]	@ (8019988 <USBD_SetConfig+0x150>)
 801988a:	781b      	ldrb	r3, [r3, #0]
 801988c:	4619      	mov	r1, r3
 801988e:	6878      	ldr	r0, [r7, #4]
 8019890:	f7fe ffb9 	bl	8018806 <USBD_SetClassConfig>
 8019894:	4603      	mov	r3, r0
 8019896:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8019898:	7bfb      	ldrb	r3, [r7, #15]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d008      	beq.n	80198b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801989e:	6839      	ldr	r1, [r7, #0]
 80198a0:	6878      	ldr	r0, [r7, #4]
 80198a2:	f000 f962 	bl	8019b6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2202      	movs	r2, #2
 80198aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80198ae:	e065      	b.n	801997c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80198b0:	6878      	ldr	r0, [r7, #4]
 80198b2:	f000 fa31 	bl	8019d18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	2203      	movs	r2, #3
 80198ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80198be:	e05d      	b.n	801997c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f000 fa29 	bl	8019d18 <USBD_CtlSendStatus>
      break;
 80198c6:	e059      	b.n	801997c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80198c8:	4b2f      	ldr	r3, [pc, #188]	@ (8019988 <USBD_SetConfig+0x150>)
 80198ca:	781b      	ldrb	r3, [r3, #0]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d112      	bne.n	80198f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	2202      	movs	r2, #2
 80198d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80198d8:	4b2b      	ldr	r3, [pc, #172]	@ (8019988 <USBD_SetConfig+0x150>)
 80198da:	781b      	ldrb	r3, [r3, #0]
 80198dc:	461a      	mov	r2, r3
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80198e2:	4b29      	ldr	r3, [pc, #164]	@ (8019988 <USBD_SetConfig+0x150>)
 80198e4:	781b      	ldrb	r3, [r3, #0]
 80198e6:	4619      	mov	r1, r3
 80198e8:	6878      	ldr	r0, [r7, #4]
 80198ea:	f7fe ffa8 	bl	801883e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80198ee:	6878      	ldr	r0, [r7, #4]
 80198f0:	f000 fa12 	bl	8019d18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80198f4:	e042      	b.n	801997c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80198f6:	4b24      	ldr	r3, [pc, #144]	@ (8019988 <USBD_SetConfig+0x150>)
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	461a      	mov	r2, r3
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	685b      	ldr	r3, [r3, #4]
 8019900:	429a      	cmp	r2, r3
 8019902:	d02a      	beq.n	801995a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	685b      	ldr	r3, [r3, #4]
 8019908:	b2db      	uxtb	r3, r3
 801990a:	4619      	mov	r1, r3
 801990c:	6878      	ldr	r0, [r7, #4]
 801990e:	f7fe ff96 	bl	801883e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8019912:	4b1d      	ldr	r3, [pc, #116]	@ (8019988 <USBD_SetConfig+0x150>)
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	461a      	mov	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801991c:	4b1a      	ldr	r3, [pc, #104]	@ (8019988 <USBD_SetConfig+0x150>)
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	4619      	mov	r1, r3
 8019922:	6878      	ldr	r0, [r7, #4]
 8019924:	f7fe ff6f 	bl	8018806 <USBD_SetClassConfig>
 8019928:	4603      	mov	r3, r0
 801992a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801992c:	7bfb      	ldrb	r3, [r7, #15]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d00f      	beq.n	8019952 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8019932:	6839      	ldr	r1, [r7, #0]
 8019934:	6878      	ldr	r0, [r7, #4]
 8019936:	f000 f918 	bl	8019b6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	685b      	ldr	r3, [r3, #4]
 801993e:	b2db      	uxtb	r3, r3
 8019940:	4619      	mov	r1, r3
 8019942:	6878      	ldr	r0, [r7, #4]
 8019944:	f7fe ff7b 	bl	801883e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2202      	movs	r2, #2
 801994c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8019950:	e014      	b.n	801997c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019952:	6878      	ldr	r0, [r7, #4]
 8019954:	f000 f9e0 	bl	8019d18 <USBD_CtlSendStatus>
      break;
 8019958:	e010      	b.n	801997c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801995a:	6878      	ldr	r0, [r7, #4]
 801995c:	f000 f9dc 	bl	8019d18 <USBD_CtlSendStatus>
      break;
 8019960:	e00c      	b.n	801997c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8019962:	6839      	ldr	r1, [r7, #0]
 8019964:	6878      	ldr	r0, [r7, #4]
 8019966:	f000 f900 	bl	8019b6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801996a:	4b07      	ldr	r3, [pc, #28]	@ (8019988 <USBD_SetConfig+0x150>)
 801996c:	781b      	ldrb	r3, [r3, #0]
 801996e:	4619      	mov	r1, r3
 8019970:	6878      	ldr	r0, [r7, #4]
 8019972:	f7fe ff64 	bl	801883e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8019976:	2303      	movs	r3, #3
 8019978:	73fb      	strb	r3, [r7, #15]
      break;
 801997a:	bf00      	nop
  }

  return ret;
 801997c:	7bfb      	ldrb	r3, [r7, #15]
}
 801997e:	4618      	mov	r0, r3
 8019980:	3710      	adds	r7, #16
 8019982:	46bd      	mov	sp, r7
 8019984:	bd80      	pop	{r7, pc}
 8019986:	bf00      	nop
 8019988:	240470f0 	.word	0x240470f0

0801998c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b082      	sub	sp, #8
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
 8019994:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8019996:	683b      	ldr	r3, [r7, #0]
 8019998:	88db      	ldrh	r3, [r3, #6]
 801999a:	2b01      	cmp	r3, #1
 801999c:	d004      	beq.n	80199a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801999e:	6839      	ldr	r1, [r7, #0]
 80199a0:	6878      	ldr	r0, [r7, #4]
 80199a2:	f000 f8e2 	bl	8019b6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80199a6:	e023      	b.n	80199f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80199ae:	b2db      	uxtb	r3, r3
 80199b0:	2b02      	cmp	r3, #2
 80199b2:	dc02      	bgt.n	80199ba <USBD_GetConfig+0x2e>
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	dc03      	bgt.n	80199c0 <USBD_GetConfig+0x34>
 80199b8:	e015      	b.n	80199e6 <USBD_GetConfig+0x5a>
 80199ba:	2b03      	cmp	r3, #3
 80199bc:	d00b      	beq.n	80199d6 <USBD_GetConfig+0x4a>
 80199be:	e012      	b.n	80199e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	2200      	movs	r2, #0
 80199c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	3308      	adds	r3, #8
 80199ca:	2201      	movs	r2, #1
 80199cc:	4619      	mov	r1, r3
 80199ce:	6878      	ldr	r0, [r7, #4]
 80199d0:	f000 f948 	bl	8019c64 <USBD_CtlSendData>
        break;
 80199d4:	e00c      	b.n	80199f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	3304      	adds	r3, #4
 80199da:	2201      	movs	r2, #1
 80199dc:	4619      	mov	r1, r3
 80199de:	6878      	ldr	r0, [r7, #4]
 80199e0:	f000 f940 	bl	8019c64 <USBD_CtlSendData>
        break;
 80199e4:	e004      	b.n	80199f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80199e6:	6839      	ldr	r1, [r7, #0]
 80199e8:	6878      	ldr	r0, [r7, #4]
 80199ea:	f000 f8be 	bl	8019b6a <USBD_CtlError>
        break;
 80199ee:	bf00      	nop
}
 80199f0:	bf00      	nop
 80199f2:	3708      	adds	r7, #8
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bd80      	pop	{r7, pc}

080199f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b082      	sub	sp, #8
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019a08:	b2db      	uxtb	r3, r3
 8019a0a:	3b01      	subs	r3, #1
 8019a0c:	2b02      	cmp	r3, #2
 8019a0e:	d81e      	bhi.n	8019a4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8019a10:	683b      	ldr	r3, [r7, #0]
 8019a12:	88db      	ldrh	r3, [r3, #6]
 8019a14:	2b02      	cmp	r3, #2
 8019a16:	d004      	beq.n	8019a22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8019a18:	6839      	ldr	r1, [r7, #0]
 8019a1a:	6878      	ldr	r0, [r7, #4]
 8019a1c:	f000 f8a5 	bl	8019b6a <USBD_CtlError>
        break;
 8019a20:	e01a      	b.n	8019a58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2201      	movs	r2, #1
 8019a26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d005      	beq.n	8019a3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	68db      	ldr	r3, [r3, #12]
 8019a36:	f043 0202 	orr.w	r2, r3, #2
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	330c      	adds	r3, #12
 8019a42:	2202      	movs	r2, #2
 8019a44:	4619      	mov	r1, r3
 8019a46:	6878      	ldr	r0, [r7, #4]
 8019a48:	f000 f90c 	bl	8019c64 <USBD_CtlSendData>
      break;
 8019a4c:	e004      	b.n	8019a58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8019a4e:	6839      	ldr	r1, [r7, #0]
 8019a50:	6878      	ldr	r0, [r7, #4]
 8019a52:	f000 f88a 	bl	8019b6a <USBD_CtlError>
      break;
 8019a56:	bf00      	nop
  }
}
 8019a58:	bf00      	nop
 8019a5a:	3708      	adds	r7, #8
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	bd80      	pop	{r7, pc}

08019a60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b082      	sub	sp, #8
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
 8019a68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	885b      	ldrh	r3, [r3, #2]
 8019a6e:	2b01      	cmp	r3, #1
 8019a70:	d107      	bne.n	8019a82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	2201      	movs	r2, #1
 8019a76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8019a7a:	6878      	ldr	r0, [r7, #4]
 8019a7c:	f000 f94c 	bl	8019d18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8019a80:	e013      	b.n	8019aaa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	885b      	ldrh	r3, [r3, #2]
 8019a86:	2b02      	cmp	r3, #2
 8019a88:	d10b      	bne.n	8019aa2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	889b      	ldrh	r3, [r3, #4]
 8019a8e:	0a1b      	lsrs	r3, r3, #8
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	b2da      	uxtb	r2, r3
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8019a9a:	6878      	ldr	r0, [r7, #4]
 8019a9c:	f000 f93c 	bl	8019d18 <USBD_CtlSendStatus>
}
 8019aa0:	e003      	b.n	8019aaa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8019aa2:	6839      	ldr	r1, [r7, #0]
 8019aa4:	6878      	ldr	r0, [r7, #4]
 8019aa6:	f000 f860 	bl	8019b6a <USBD_CtlError>
}
 8019aaa:	bf00      	nop
 8019aac:	3708      	adds	r7, #8
 8019aae:	46bd      	mov	sp, r7
 8019ab0:	bd80      	pop	{r7, pc}

08019ab2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019ab2:	b580      	push	{r7, lr}
 8019ab4:	b082      	sub	sp, #8
 8019ab6:	af00      	add	r7, sp, #0
 8019ab8:	6078      	str	r0, [r7, #4]
 8019aba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019ac2:	b2db      	uxtb	r3, r3
 8019ac4:	3b01      	subs	r3, #1
 8019ac6:	2b02      	cmp	r3, #2
 8019ac8:	d80b      	bhi.n	8019ae2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019aca:	683b      	ldr	r3, [r7, #0]
 8019acc:	885b      	ldrh	r3, [r3, #2]
 8019ace:	2b01      	cmp	r3, #1
 8019ad0:	d10c      	bne.n	8019aec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8019ada:	6878      	ldr	r0, [r7, #4]
 8019adc:	f000 f91c 	bl	8019d18 <USBD_CtlSendStatus>
      }
      break;
 8019ae0:	e004      	b.n	8019aec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8019ae2:	6839      	ldr	r1, [r7, #0]
 8019ae4:	6878      	ldr	r0, [r7, #4]
 8019ae6:	f000 f840 	bl	8019b6a <USBD_CtlError>
      break;
 8019aea:	e000      	b.n	8019aee <USBD_ClrFeature+0x3c>
      break;
 8019aec:	bf00      	nop
  }
}
 8019aee:	bf00      	nop
 8019af0:	3708      	adds	r7, #8
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}

08019af6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8019af6:	b580      	push	{r7, lr}
 8019af8:	b084      	sub	sp, #16
 8019afa:	af00      	add	r7, sp, #0
 8019afc:	6078      	str	r0, [r7, #4]
 8019afe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8019b00:	683b      	ldr	r3, [r7, #0]
 8019b02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	781a      	ldrb	r2, [r3, #0]
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	3301      	adds	r3, #1
 8019b10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	781a      	ldrb	r2, [r3, #0]
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	3301      	adds	r3, #1
 8019b1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8019b20:	68f8      	ldr	r0, [r7, #12]
 8019b22:	f7ff fa16 	bl	8018f52 <SWAPBYTE>
 8019b26:	4603      	mov	r3, r0
 8019b28:	461a      	mov	r2, r3
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	3301      	adds	r3, #1
 8019b32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	3301      	adds	r3, #1
 8019b38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8019b3a:	68f8      	ldr	r0, [r7, #12]
 8019b3c:	f7ff fa09 	bl	8018f52 <SWAPBYTE>
 8019b40:	4603      	mov	r3, r0
 8019b42:	461a      	mov	r2, r3
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	3301      	adds	r3, #1
 8019b4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	3301      	adds	r3, #1
 8019b52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8019b54:	68f8      	ldr	r0, [r7, #12]
 8019b56:	f7ff f9fc 	bl	8018f52 <SWAPBYTE>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	80da      	strh	r2, [r3, #6]
}
 8019b62:	bf00      	nop
 8019b64:	3710      	adds	r7, #16
 8019b66:	46bd      	mov	sp, r7
 8019b68:	bd80      	pop	{r7, pc}

08019b6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019b6a:	b580      	push	{r7, lr}
 8019b6c:	b082      	sub	sp, #8
 8019b6e:	af00      	add	r7, sp, #0
 8019b70:	6078      	str	r0, [r7, #4]
 8019b72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8019b74:	2180      	movs	r1, #128	@ 0x80
 8019b76:	6878      	ldr	r0, [r7, #4]
 8019b78:	f000 fd2c 	bl	801a5d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8019b7c:	2100      	movs	r1, #0
 8019b7e:	6878      	ldr	r0, [r7, #4]
 8019b80:	f000 fd28 	bl	801a5d4 <USBD_LL_StallEP>
}
 8019b84:	bf00      	nop
 8019b86:	3708      	adds	r7, #8
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bd80      	pop	{r7, pc}

08019b8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b086      	sub	sp, #24
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	60f8      	str	r0, [r7, #12]
 8019b94:	60b9      	str	r1, [r7, #8]
 8019b96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d042      	beq.n	8019c28 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8019ba6:	6938      	ldr	r0, [r7, #16]
 8019ba8:	f000 f842 	bl	8019c30 <USBD_GetLen>
 8019bac:	4603      	mov	r3, r0
 8019bae:	3301      	adds	r3, #1
 8019bb0:	005b      	lsls	r3, r3, #1
 8019bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019bb6:	d808      	bhi.n	8019bca <USBD_GetString+0x3e>
 8019bb8:	6938      	ldr	r0, [r7, #16]
 8019bba:	f000 f839 	bl	8019c30 <USBD_GetLen>
 8019bbe:	4603      	mov	r3, r0
 8019bc0:	3301      	adds	r3, #1
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	005b      	lsls	r3, r3, #1
 8019bc6:	b29a      	uxth	r2, r3
 8019bc8:	e001      	b.n	8019bce <USBD_GetString+0x42>
 8019bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019bd2:	7dfb      	ldrb	r3, [r7, #23]
 8019bd4:	68ba      	ldr	r2, [r7, #8]
 8019bd6:	4413      	add	r3, r2
 8019bd8:	687a      	ldr	r2, [r7, #4]
 8019bda:	7812      	ldrb	r2, [r2, #0]
 8019bdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8019bde:	7dfb      	ldrb	r3, [r7, #23]
 8019be0:	3301      	adds	r3, #1
 8019be2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019be4:	7dfb      	ldrb	r3, [r7, #23]
 8019be6:	68ba      	ldr	r2, [r7, #8]
 8019be8:	4413      	add	r3, r2
 8019bea:	2203      	movs	r2, #3
 8019bec:	701a      	strb	r2, [r3, #0]
  idx++;
 8019bee:	7dfb      	ldrb	r3, [r7, #23]
 8019bf0:	3301      	adds	r3, #1
 8019bf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019bf4:	e013      	b.n	8019c1e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8019bf6:	7dfb      	ldrb	r3, [r7, #23]
 8019bf8:	68ba      	ldr	r2, [r7, #8]
 8019bfa:	4413      	add	r3, r2
 8019bfc:	693a      	ldr	r2, [r7, #16]
 8019bfe:	7812      	ldrb	r2, [r2, #0]
 8019c00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019c02:	693b      	ldr	r3, [r7, #16]
 8019c04:	3301      	adds	r3, #1
 8019c06:	613b      	str	r3, [r7, #16]
    idx++;
 8019c08:	7dfb      	ldrb	r3, [r7, #23]
 8019c0a:	3301      	adds	r3, #1
 8019c0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019c0e:	7dfb      	ldrb	r3, [r7, #23]
 8019c10:	68ba      	ldr	r2, [r7, #8]
 8019c12:	4413      	add	r3, r2
 8019c14:	2200      	movs	r2, #0
 8019c16:	701a      	strb	r2, [r3, #0]
    idx++;
 8019c18:	7dfb      	ldrb	r3, [r7, #23]
 8019c1a:	3301      	adds	r3, #1
 8019c1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019c1e:	693b      	ldr	r3, [r7, #16]
 8019c20:	781b      	ldrb	r3, [r3, #0]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d1e7      	bne.n	8019bf6 <USBD_GetString+0x6a>
 8019c26:	e000      	b.n	8019c2a <USBD_GetString+0x9e>
    return;
 8019c28:	bf00      	nop
  }
}
 8019c2a:	3718      	adds	r7, #24
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	bd80      	pop	{r7, pc}

08019c30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019c30:	b480      	push	{r7}
 8019c32:	b085      	sub	sp, #20
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019c38:	2300      	movs	r3, #0
 8019c3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019c40:	e005      	b.n	8019c4e <USBD_GetLen+0x1e>
  {
    len++;
 8019c42:	7bfb      	ldrb	r3, [r7, #15]
 8019c44:	3301      	adds	r3, #1
 8019c46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	3301      	adds	r3, #1
 8019c4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019c4e:	68bb      	ldr	r3, [r7, #8]
 8019c50:	781b      	ldrb	r3, [r3, #0]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d1f5      	bne.n	8019c42 <USBD_GetLen+0x12>
  }

  return len;
 8019c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	3714      	adds	r7, #20
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c62:	4770      	bx	lr

08019c64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b084      	sub	sp, #16
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	60f8      	str	r0, [r7, #12]
 8019c6c:	60b9      	str	r1, [r7, #8]
 8019c6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	2202      	movs	r2, #2
 8019c74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	687a      	ldr	r2, [r7, #4]
 8019c7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	687a      	ldr	r2, [r7, #4]
 8019c82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	68ba      	ldr	r2, [r7, #8]
 8019c88:	2100      	movs	r1, #0
 8019c8a:	68f8      	ldr	r0, [r7, #12]
 8019c8c:	f000 fd2b 	bl	801a6e6 <USBD_LL_Transmit>

  return USBD_OK;
 8019c90:	2300      	movs	r3, #0
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	3710      	adds	r7, #16
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}

08019c9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019c9a:	b580      	push	{r7, lr}
 8019c9c:	b084      	sub	sp, #16
 8019c9e:	af00      	add	r7, sp, #0
 8019ca0:	60f8      	str	r0, [r7, #12]
 8019ca2:	60b9      	str	r1, [r7, #8]
 8019ca4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	68ba      	ldr	r2, [r7, #8]
 8019caa:	2100      	movs	r1, #0
 8019cac:	68f8      	ldr	r0, [r7, #12]
 8019cae:	f000 fd1a 	bl	801a6e6 <USBD_LL_Transmit>

  return USBD_OK;
 8019cb2:	2300      	movs	r3, #0
}
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	3710      	adds	r7, #16
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	bd80      	pop	{r7, pc}

08019cbc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b084      	sub	sp, #16
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	60f8      	str	r0, [r7, #12]
 8019cc4:	60b9      	str	r1, [r7, #8]
 8019cc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	2203      	movs	r2, #3
 8019ccc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	687a      	ldr	r2, [r7, #4]
 8019cd4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	687a      	ldr	r2, [r7, #4]
 8019cdc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	68ba      	ldr	r2, [r7, #8]
 8019ce4:	2100      	movs	r1, #0
 8019ce6:	68f8      	ldr	r0, [r7, #12]
 8019ce8:	f000 fd1e 	bl	801a728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019cec:	2300      	movs	r3, #0
}
 8019cee:	4618      	mov	r0, r3
 8019cf0:	3710      	adds	r7, #16
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	bd80      	pop	{r7, pc}

08019cf6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019cf6:	b580      	push	{r7, lr}
 8019cf8:	b084      	sub	sp, #16
 8019cfa:	af00      	add	r7, sp, #0
 8019cfc:	60f8      	str	r0, [r7, #12]
 8019cfe:	60b9      	str	r1, [r7, #8]
 8019d00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	68ba      	ldr	r2, [r7, #8]
 8019d06:	2100      	movs	r1, #0
 8019d08:	68f8      	ldr	r0, [r7, #12]
 8019d0a:	f000 fd0d 	bl	801a728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019d0e:	2300      	movs	r3, #0
}
 8019d10:	4618      	mov	r0, r3
 8019d12:	3710      	adds	r7, #16
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}

08019d18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b082      	sub	sp, #8
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	2204      	movs	r2, #4
 8019d24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019d28:	2300      	movs	r3, #0
 8019d2a:	2200      	movs	r2, #0
 8019d2c:	2100      	movs	r1, #0
 8019d2e:	6878      	ldr	r0, [r7, #4]
 8019d30:	f000 fcd9 	bl	801a6e6 <USBD_LL_Transmit>

  return USBD_OK;
 8019d34:	2300      	movs	r3, #0
}
 8019d36:	4618      	mov	r0, r3
 8019d38:	3708      	adds	r7, #8
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	bd80      	pop	{r7, pc}

08019d3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019d3e:	b580      	push	{r7, lr}
 8019d40:	b082      	sub	sp, #8
 8019d42:	af00      	add	r7, sp, #0
 8019d44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	2205      	movs	r2, #5
 8019d4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019d4e:	2300      	movs	r3, #0
 8019d50:	2200      	movs	r2, #0
 8019d52:	2100      	movs	r1, #0
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f000 fce7 	bl	801a728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019d5a:	2300      	movs	r3, #0
}
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	3708      	adds	r7, #8
 8019d60:	46bd      	mov	sp, r7
 8019d62:	bd80      	pop	{r7, pc}

08019d64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019d68:	2200      	movs	r2, #0
 8019d6a:	4918      	ldr	r1, [pc, #96]	@ (8019dcc <MX_USB_DEVICE_Init+0x68>)
 8019d6c:	4818      	ldr	r0, [pc, #96]	@ (8019dd0 <MX_USB_DEVICE_Init+0x6c>)
 8019d6e:	f7fe fccd 	bl	801870c <USBD_Init>
 8019d72:	4603      	mov	r3, r0
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d001      	beq.n	8019d7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019d78:	f7e8 f99c 	bl	80020b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019d7c:	4915      	ldr	r1, [pc, #84]	@ (8019dd4 <MX_USB_DEVICE_Init+0x70>)
 8019d7e:	4814      	ldr	r0, [pc, #80]	@ (8019dd0 <MX_USB_DEVICE_Init+0x6c>)
 8019d80:	f7fe fcf4 	bl	801876c <USBD_RegisterClass>
 8019d84:	4603      	mov	r3, r0
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d001      	beq.n	8019d8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019d8a:	f7e8 f993 	bl	80020b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019d8e:	4912      	ldr	r1, [pc, #72]	@ (8019dd8 <MX_USB_DEVICE_Init+0x74>)
 8019d90:	480f      	ldr	r0, [pc, #60]	@ (8019dd0 <MX_USB_DEVICE_Init+0x6c>)
 8019d92:	f7fe fbeb 	bl	801856c <USBD_CDC_RegisterInterface>
 8019d96:	4603      	mov	r3, r0
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d001      	beq.n	8019da0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019d9c:	f7e8 f98a 	bl	80020b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019da0:	480b      	ldr	r0, [pc, #44]	@ (8019dd0 <MX_USB_DEVICE_Init+0x6c>)
 8019da2:	f7fe fd19 	bl	80187d8 <USBD_Start>
 8019da6:	4603      	mov	r3, r0
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d001      	beq.n	8019db0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019dac:	f7e8 f982 	bl	80020b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8019db0:	f7f4 fc34 	bl	800e61c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8019db4:	4b06      	ldr	r3, [pc, #24]	@ (8019dd0 <MX_USB_DEVICE_Init+0x6c>)
 8019db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8019dba:	4a05      	ldr	r2, [pc, #20]	@ (8019dd0 <MX_USB_DEVICE_Init+0x6c>)
 8019dbc:	33b0      	adds	r3, #176	@ 0xb0
 8019dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019dc2:	4a06      	ldr	r2, [pc, #24]	@ (8019ddc <MX_USB_DEVICE_Init+0x78>)
 8019dc4:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019dc6:	bf00      	nop
 8019dc8:	bd80      	pop	{r7, pc}
 8019dca:	bf00      	nop
 8019dcc:	240002f0 	.word	0x240002f0
 8019dd0:	240470f4 	.word	0x240470f4
 8019dd4:	2400025c 	.word	0x2400025c
 8019dd8:	240002dc 	.word	0x240002dc
 8019ddc:	240473d0 	.word	0x240473d0

08019de0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019de4:	2200      	movs	r2, #0
 8019de6:	4905      	ldr	r1, [pc, #20]	@ (8019dfc <CDC_Init_FS+0x1c>)
 8019de8:	4805      	ldr	r0, [pc, #20]	@ (8019e00 <CDC_Init_FS+0x20>)
 8019dea:	f7fe fbd9 	bl	80185a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019dee:	4905      	ldr	r1, [pc, #20]	@ (8019e04 <CDC_Init_FS+0x24>)
 8019df0:	4803      	ldr	r0, [pc, #12]	@ (8019e00 <CDC_Init_FS+0x20>)
 8019df2:	f7fe fbf7 	bl	80185e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019df6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	bd80      	pop	{r7, pc}
 8019dfc:	24047bd4 	.word	0x24047bd4
 8019e00:	240470f4 	.word	0x240470f4
 8019e04:	240473d4 	.word	0x240473d4

08019e08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019e08:	b480      	push	{r7}
 8019e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019e0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019e0e:	4618      	mov	r0, r3
 8019e10:	46bd      	mov	sp, r7
 8019e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e16:	4770      	bx	lr

08019e18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019e18:	b480      	push	{r7}
 8019e1a:	b083      	sub	sp, #12
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	4603      	mov	r3, r0
 8019e20:	6039      	str	r1, [r7, #0]
 8019e22:	71fb      	strb	r3, [r7, #7]
 8019e24:	4613      	mov	r3, r2
 8019e26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019e28:	79fb      	ldrb	r3, [r7, #7]
 8019e2a:	2b23      	cmp	r3, #35	@ 0x23
 8019e2c:	d84a      	bhi.n	8019ec4 <CDC_Control_FS+0xac>
 8019e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8019e34 <CDC_Control_FS+0x1c>)
 8019e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e34:	08019ec5 	.word	0x08019ec5
 8019e38:	08019ec5 	.word	0x08019ec5
 8019e3c:	08019ec5 	.word	0x08019ec5
 8019e40:	08019ec5 	.word	0x08019ec5
 8019e44:	08019ec5 	.word	0x08019ec5
 8019e48:	08019ec5 	.word	0x08019ec5
 8019e4c:	08019ec5 	.word	0x08019ec5
 8019e50:	08019ec5 	.word	0x08019ec5
 8019e54:	08019ec5 	.word	0x08019ec5
 8019e58:	08019ec5 	.word	0x08019ec5
 8019e5c:	08019ec5 	.word	0x08019ec5
 8019e60:	08019ec5 	.word	0x08019ec5
 8019e64:	08019ec5 	.word	0x08019ec5
 8019e68:	08019ec5 	.word	0x08019ec5
 8019e6c:	08019ec5 	.word	0x08019ec5
 8019e70:	08019ec5 	.word	0x08019ec5
 8019e74:	08019ec5 	.word	0x08019ec5
 8019e78:	08019ec5 	.word	0x08019ec5
 8019e7c:	08019ec5 	.word	0x08019ec5
 8019e80:	08019ec5 	.word	0x08019ec5
 8019e84:	08019ec5 	.word	0x08019ec5
 8019e88:	08019ec5 	.word	0x08019ec5
 8019e8c:	08019ec5 	.word	0x08019ec5
 8019e90:	08019ec5 	.word	0x08019ec5
 8019e94:	08019ec5 	.word	0x08019ec5
 8019e98:	08019ec5 	.word	0x08019ec5
 8019e9c:	08019ec5 	.word	0x08019ec5
 8019ea0:	08019ec5 	.word	0x08019ec5
 8019ea4:	08019ec5 	.word	0x08019ec5
 8019ea8:	08019ec5 	.word	0x08019ec5
 8019eac:	08019ec5 	.word	0x08019ec5
 8019eb0:	08019ec5 	.word	0x08019ec5
 8019eb4:	08019ec5 	.word	0x08019ec5
 8019eb8:	08019ec5 	.word	0x08019ec5
 8019ebc:	08019ec5 	.word	0x08019ec5
 8019ec0:	08019ec5 	.word	0x08019ec5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019ec4:	bf00      	nop
  }

  return (USBD_OK);
 8019ec6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019ec8:	4618      	mov	r0, r3
 8019eca:	370c      	adds	r7, #12
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed2:	4770      	bx	lr

08019ed4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b082      	sub	sp, #8
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	6078      	str	r0, [r7, #4]
 8019edc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019ede:	6879      	ldr	r1, [r7, #4]
 8019ee0:	480a      	ldr	r0, [pc, #40]	@ (8019f0c <CDC_Receive_FS+0x38>)
 8019ee2:	f7fe fb7f 	bl	80185e4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019ee6:	4809      	ldr	r0, [pc, #36]	@ (8019f0c <CDC_Receive_FS+0x38>)
 8019ee8:	f7fe fbda 	bl	80186a0 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8019eec:	4b08      	ldr	r3, [pc, #32]	@ (8019f10 <CDC_Receive_FS+0x3c>)
 8019eee:	2201      	movs	r2, #1
 8019ef0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8019ef2:	683b      	ldr	r3, [r7, #0]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	b29a      	uxth	r2, r3
 8019ef8:	2364      	movs	r3, #100	@ 0x64
 8019efa:	6879      	ldr	r1, [r7, #4]
 8019efc:	4805      	ldr	r0, [pc, #20]	@ (8019f14 <CDC_Receive_FS+0x40>)
 8019efe:	f7f9 fd67 	bl	80139d0 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8019f02:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019f04:	4618      	mov	r0, r3
 8019f06:	3708      	adds	r7, #8
 8019f08:	46bd      	mov	sp, r7
 8019f0a:	bd80      	pop	{r7, pc}
 8019f0c:	240470f4 	.word	0x240470f4
 8019f10:	240470e4 	.word	0x240470e4
 8019f14:	240008a0 	.word	0x240008a0

08019f18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b084      	sub	sp, #16
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
 8019f20:	460b      	mov	r3, r1
 8019f22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019f24:	2300      	movs	r3, #0
 8019f26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8019f28:	4b0d      	ldr	r3, [pc, #52]	@ (8019f60 <CDC_Transmit_FS+0x48>)
 8019f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019f2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d001      	beq.n	8019f3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8019f3a:	2301      	movs	r3, #1
 8019f3c:	e00b      	b.n	8019f56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019f3e:	887b      	ldrh	r3, [r7, #2]
 8019f40:	461a      	mov	r2, r3
 8019f42:	6879      	ldr	r1, [r7, #4]
 8019f44:	4806      	ldr	r0, [pc, #24]	@ (8019f60 <CDC_Transmit_FS+0x48>)
 8019f46:	f7fe fb2b 	bl	80185a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019f4a:	4805      	ldr	r0, [pc, #20]	@ (8019f60 <CDC_Transmit_FS+0x48>)
 8019f4c:	f7fe fb68 	bl	8018620 <USBD_CDC_TransmitPacket>
 8019f50:	4603      	mov	r3, r0
 8019f52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f56:	4618      	mov	r0, r3
 8019f58:	3710      	adds	r7, #16
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	bd80      	pop	{r7, pc}
 8019f5e:	bf00      	nop
 8019f60:	240470f4 	.word	0x240470f4

08019f64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019f64:	b480      	push	{r7}
 8019f66:	b087      	sub	sp, #28
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	60f8      	str	r0, [r7, #12]
 8019f6c:	60b9      	str	r1, [r7, #8]
 8019f6e:	4613      	mov	r3, r2
 8019f70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019f72:	2300      	movs	r3, #0
 8019f74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	371c      	adds	r7, #28
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f84:	4770      	bx	lr
	...

08019f88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f88:	b480      	push	{r7}
 8019f8a:	b083      	sub	sp, #12
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	4603      	mov	r3, r0
 8019f90:	6039      	str	r1, [r7, #0]
 8019f92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	2212      	movs	r2, #18
 8019f98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019f9a:	4b03      	ldr	r3, [pc, #12]	@ (8019fa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	370c      	adds	r7, #12
 8019fa0:	46bd      	mov	sp, r7
 8019fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa6:	4770      	bx	lr
 8019fa8:	24000310 	.word	0x24000310

08019fac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fac:	b480      	push	{r7}
 8019fae:	b083      	sub	sp, #12
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	6039      	str	r1, [r7, #0]
 8019fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019fb8:	683b      	ldr	r3, [r7, #0]
 8019fba:	2204      	movs	r2, #4
 8019fbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019fbe:	4b03      	ldr	r3, [pc, #12]	@ (8019fcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	370c      	adds	r7, #12
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fca:	4770      	bx	lr
 8019fcc:	24000324 	.word	0x24000324

08019fd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b082      	sub	sp, #8
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	6039      	str	r1, [r7, #0]
 8019fda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019fdc:	79fb      	ldrb	r3, [r7, #7]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d105      	bne.n	8019fee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019fe2:	683a      	ldr	r2, [r7, #0]
 8019fe4:	4907      	ldr	r1, [pc, #28]	@ (801a004 <USBD_FS_ProductStrDescriptor+0x34>)
 8019fe6:	4808      	ldr	r0, [pc, #32]	@ (801a008 <USBD_FS_ProductStrDescriptor+0x38>)
 8019fe8:	f7ff fdd0 	bl	8019b8c <USBD_GetString>
 8019fec:	e004      	b.n	8019ff8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019fee:	683a      	ldr	r2, [r7, #0]
 8019ff0:	4904      	ldr	r1, [pc, #16]	@ (801a004 <USBD_FS_ProductStrDescriptor+0x34>)
 8019ff2:	4805      	ldr	r0, [pc, #20]	@ (801a008 <USBD_FS_ProductStrDescriptor+0x38>)
 8019ff4:	f7ff fdca 	bl	8019b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019ff8:	4b02      	ldr	r3, [pc, #8]	@ (801a004 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	3708      	adds	r7, #8
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}
 801a002:	bf00      	nop
 801a004:	240483d4 	.word	0x240483d4
 801a008:	0801b2ec 	.word	0x0801b2ec

0801a00c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b082      	sub	sp, #8
 801a010:	af00      	add	r7, sp, #0
 801a012:	4603      	mov	r3, r0
 801a014:	6039      	str	r1, [r7, #0]
 801a016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a018:	683a      	ldr	r2, [r7, #0]
 801a01a:	4904      	ldr	r1, [pc, #16]	@ (801a02c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a01c:	4804      	ldr	r0, [pc, #16]	@ (801a030 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a01e:	f7ff fdb5 	bl	8019b8c <USBD_GetString>
  return USBD_StrDesc;
 801a022:	4b02      	ldr	r3, [pc, #8]	@ (801a02c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a024:	4618      	mov	r0, r3
 801a026:	3708      	adds	r7, #8
 801a028:	46bd      	mov	sp, r7
 801a02a:	bd80      	pop	{r7, pc}
 801a02c:	240483d4 	.word	0x240483d4
 801a030:	0801b304 	.word	0x0801b304

0801a034 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b082      	sub	sp, #8
 801a038:	af00      	add	r7, sp, #0
 801a03a:	4603      	mov	r3, r0
 801a03c:	6039      	str	r1, [r7, #0]
 801a03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a040:	683b      	ldr	r3, [r7, #0]
 801a042:	221a      	movs	r2, #26
 801a044:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a046:	f000 f843 	bl	801a0d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a04a:	4b02      	ldr	r3, [pc, #8]	@ (801a054 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a04c:	4618      	mov	r0, r3
 801a04e:	3708      	adds	r7, #8
 801a050:	46bd      	mov	sp, r7
 801a052:	bd80      	pop	{r7, pc}
 801a054:	24000328 	.word	0x24000328

0801a058 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	b082      	sub	sp, #8
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	4603      	mov	r3, r0
 801a060:	6039      	str	r1, [r7, #0]
 801a062:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a064:	79fb      	ldrb	r3, [r7, #7]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d105      	bne.n	801a076 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a06a:	683a      	ldr	r2, [r7, #0]
 801a06c:	4907      	ldr	r1, [pc, #28]	@ (801a08c <USBD_FS_ConfigStrDescriptor+0x34>)
 801a06e:	4808      	ldr	r0, [pc, #32]	@ (801a090 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a070:	f7ff fd8c 	bl	8019b8c <USBD_GetString>
 801a074:	e004      	b.n	801a080 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a076:	683a      	ldr	r2, [r7, #0]
 801a078:	4904      	ldr	r1, [pc, #16]	@ (801a08c <USBD_FS_ConfigStrDescriptor+0x34>)
 801a07a:	4805      	ldr	r0, [pc, #20]	@ (801a090 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a07c:	f7ff fd86 	bl	8019b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a080:	4b02      	ldr	r3, [pc, #8]	@ (801a08c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a082:	4618      	mov	r0, r3
 801a084:	3708      	adds	r7, #8
 801a086:	46bd      	mov	sp, r7
 801a088:	bd80      	pop	{r7, pc}
 801a08a:	bf00      	nop
 801a08c:	240483d4 	.word	0x240483d4
 801a090:	0801b318 	.word	0x0801b318

0801a094 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a094:	b580      	push	{r7, lr}
 801a096:	b082      	sub	sp, #8
 801a098:	af00      	add	r7, sp, #0
 801a09a:	4603      	mov	r3, r0
 801a09c:	6039      	str	r1, [r7, #0]
 801a09e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a0a0:	79fb      	ldrb	r3, [r7, #7]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d105      	bne.n	801a0b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a0a6:	683a      	ldr	r2, [r7, #0]
 801a0a8:	4907      	ldr	r1, [pc, #28]	@ (801a0c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a0aa:	4808      	ldr	r0, [pc, #32]	@ (801a0cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a0ac:	f7ff fd6e 	bl	8019b8c <USBD_GetString>
 801a0b0:	e004      	b.n	801a0bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a0b2:	683a      	ldr	r2, [r7, #0]
 801a0b4:	4904      	ldr	r1, [pc, #16]	@ (801a0c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a0b6:	4805      	ldr	r0, [pc, #20]	@ (801a0cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a0b8:	f7ff fd68 	bl	8019b8c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a0bc:	4b02      	ldr	r3, [pc, #8]	@ (801a0c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a0be:	4618      	mov	r0, r3
 801a0c0:	3708      	adds	r7, #8
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	bd80      	pop	{r7, pc}
 801a0c6:	bf00      	nop
 801a0c8:	240483d4 	.word	0x240483d4
 801a0cc:	0801b324 	.word	0x0801b324

0801a0d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b084      	sub	sp, #16
 801a0d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a0d6:	4b0f      	ldr	r3, [pc, #60]	@ (801a114 <Get_SerialNum+0x44>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a0dc:	4b0e      	ldr	r3, [pc, #56]	@ (801a118 <Get_SerialNum+0x48>)
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a0e2:	4b0e      	ldr	r3, [pc, #56]	@ (801a11c <Get_SerialNum+0x4c>)
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a0e8:	68fa      	ldr	r2, [r7, #12]
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	4413      	add	r3, r2
 801a0ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d009      	beq.n	801a10a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a0f6:	2208      	movs	r2, #8
 801a0f8:	4909      	ldr	r1, [pc, #36]	@ (801a120 <Get_SerialNum+0x50>)
 801a0fa:	68f8      	ldr	r0, [r7, #12]
 801a0fc:	f000 f814 	bl	801a128 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a100:	2204      	movs	r2, #4
 801a102:	4908      	ldr	r1, [pc, #32]	@ (801a124 <Get_SerialNum+0x54>)
 801a104:	68b8      	ldr	r0, [r7, #8]
 801a106:	f000 f80f 	bl	801a128 <IntToUnicode>
  }
}
 801a10a:	bf00      	nop
 801a10c:	3710      	adds	r7, #16
 801a10e:	46bd      	mov	sp, r7
 801a110:	bd80      	pop	{r7, pc}
 801a112:	bf00      	nop
 801a114:	1ff1e800 	.word	0x1ff1e800
 801a118:	1ff1e804 	.word	0x1ff1e804
 801a11c:	1ff1e808 	.word	0x1ff1e808
 801a120:	2400032a 	.word	0x2400032a
 801a124:	2400033a 	.word	0x2400033a

0801a128 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a128:	b480      	push	{r7}
 801a12a:	b087      	sub	sp, #28
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	60f8      	str	r0, [r7, #12]
 801a130:	60b9      	str	r1, [r7, #8]
 801a132:	4613      	mov	r3, r2
 801a134:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a136:	2300      	movs	r3, #0
 801a138:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a13a:	2300      	movs	r3, #0
 801a13c:	75fb      	strb	r3, [r7, #23]
 801a13e:	e027      	b.n	801a190 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	0f1b      	lsrs	r3, r3, #28
 801a144:	2b09      	cmp	r3, #9
 801a146:	d80b      	bhi.n	801a160 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	0f1b      	lsrs	r3, r3, #28
 801a14c:	b2da      	uxtb	r2, r3
 801a14e:	7dfb      	ldrb	r3, [r7, #23]
 801a150:	005b      	lsls	r3, r3, #1
 801a152:	4619      	mov	r1, r3
 801a154:	68bb      	ldr	r3, [r7, #8]
 801a156:	440b      	add	r3, r1
 801a158:	3230      	adds	r2, #48	@ 0x30
 801a15a:	b2d2      	uxtb	r2, r2
 801a15c:	701a      	strb	r2, [r3, #0]
 801a15e:	e00a      	b.n	801a176 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	0f1b      	lsrs	r3, r3, #28
 801a164:	b2da      	uxtb	r2, r3
 801a166:	7dfb      	ldrb	r3, [r7, #23]
 801a168:	005b      	lsls	r3, r3, #1
 801a16a:	4619      	mov	r1, r3
 801a16c:	68bb      	ldr	r3, [r7, #8]
 801a16e:	440b      	add	r3, r1
 801a170:	3237      	adds	r2, #55	@ 0x37
 801a172:	b2d2      	uxtb	r2, r2
 801a174:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	011b      	lsls	r3, r3, #4
 801a17a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a17c:	7dfb      	ldrb	r3, [r7, #23]
 801a17e:	005b      	lsls	r3, r3, #1
 801a180:	3301      	adds	r3, #1
 801a182:	68ba      	ldr	r2, [r7, #8]
 801a184:	4413      	add	r3, r2
 801a186:	2200      	movs	r2, #0
 801a188:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a18a:	7dfb      	ldrb	r3, [r7, #23]
 801a18c:	3301      	adds	r3, #1
 801a18e:	75fb      	strb	r3, [r7, #23]
 801a190:	7dfa      	ldrb	r2, [r7, #23]
 801a192:	79fb      	ldrb	r3, [r7, #7]
 801a194:	429a      	cmp	r2, r3
 801a196:	d3d3      	bcc.n	801a140 <IntToUnicode+0x18>
  }
}
 801a198:	bf00      	nop
 801a19a:	bf00      	nop
 801a19c:	371c      	adds	r7, #28
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a4:	4770      	bx	lr
	...

0801a1a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b0ba      	sub	sp, #232	@ 0xe8
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a1b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	601a      	str	r2, [r3, #0]
 801a1b8:	605a      	str	r2, [r3, #4]
 801a1ba:	609a      	str	r2, [r3, #8]
 801a1bc:	60da      	str	r2, [r3, #12]
 801a1be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a1c0:	f107 0310 	add.w	r3, r7, #16
 801a1c4:	22c0      	movs	r2, #192	@ 0xc0
 801a1c6:	2100      	movs	r1, #0
 801a1c8:	4618      	mov	r0, r3
 801a1ca:	f000 fbfd 	bl	801a9c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	4a2c      	ldr	r2, [pc, #176]	@ (801a284 <HAL_PCD_MspInit+0xdc>)
 801a1d4:	4293      	cmp	r3, r2
 801a1d6:	d151      	bne.n	801a27c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a1d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801a1dc:	f04f 0300 	mov.w	r3, #0
 801a1e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801a1e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801a1e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a1ec:	f107 0310 	add.w	r3, r7, #16
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	f7f5 fa09 	bl	800f608 <HAL_RCCEx_PeriphCLKConfig>
 801a1f6:	4603      	mov	r3, r0
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d001      	beq.n	801a200 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801a1fc:	f7e7 ff5a 	bl	80020b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a200:	f7f4 fa0c 	bl	800e61c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a204:	4b20      	ldr	r3, [pc, #128]	@ (801a288 <HAL_PCD_MspInit+0xe0>)
 801a206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a20a:	4a1f      	ldr	r2, [pc, #124]	@ (801a288 <HAL_PCD_MspInit+0xe0>)
 801a20c:	f043 0301 	orr.w	r3, r3, #1
 801a210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801a214:	4b1c      	ldr	r3, [pc, #112]	@ (801a288 <HAL_PCD_MspInit+0xe0>)
 801a216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a21a:	f003 0301 	and.w	r3, r3, #1
 801a21e:	60fb      	str	r3, [r7, #12]
 801a220:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a222:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801a226:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a22a:	2302      	movs	r3, #2
 801a22c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a230:	2300      	movs	r3, #0
 801a232:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a236:	2300      	movs	r3, #0
 801a238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801a23c:	230a      	movs	r3, #10
 801a23e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a242:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801a246:	4619      	mov	r1, r3
 801a248:	4810      	ldr	r0, [pc, #64]	@ (801a28c <HAL_PCD_MspInit+0xe4>)
 801a24a:	f7ed fd3d 	bl	8007cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a24e:	4b0e      	ldr	r3, [pc, #56]	@ (801a288 <HAL_PCD_MspInit+0xe0>)
 801a250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a254:	4a0c      	ldr	r2, [pc, #48]	@ (801a288 <HAL_PCD_MspInit+0xe0>)
 801a256:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801a25a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801a25e:	4b0a      	ldr	r3, [pc, #40]	@ (801a288 <HAL_PCD_MspInit+0xe0>)
 801a260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a268:	60bb      	str	r3, [r7, #8]
 801a26a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a26c:	2200      	movs	r2, #0
 801a26e:	2100      	movs	r1, #0
 801a270:	2065      	movs	r0, #101	@ 0x65
 801a272:	f7ea fe26 	bl	8004ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a276:	2065      	movs	r0, #101	@ 0x65
 801a278:	f7ea fe3d 	bl	8004ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a27c:	bf00      	nop
 801a27e:	37e8      	adds	r7, #232	@ 0xe8
 801a280:	46bd      	mov	sp, r7
 801a282:	bd80      	pop	{r7, pc}
 801a284:	40080000 	.word	0x40080000
 801a288:	58024400 	.word	0x58024400
 801a28c:	58020000 	.word	0x58020000

0801a290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b082      	sub	sp, #8
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801a2a4:	4619      	mov	r1, r3
 801a2a6:	4610      	mov	r0, r2
 801a2a8:	f7fe fae3 	bl	8018872 <USBD_LL_SetupStage>
}
 801a2ac:	bf00      	nop
 801a2ae:	3708      	adds	r7, #8
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	bd80      	pop	{r7, pc}

0801a2b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	b082      	sub	sp, #8
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	6078      	str	r0, [r7, #4]
 801a2bc:	460b      	mov	r3, r1
 801a2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a2c6:	78fa      	ldrb	r2, [r7, #3]
 801a2c8:	6879      	ldr	r1, [r7, #4]
 801a2ca:	4613      	mov	r3, r2
 801a2cc:	00db      	lsls	r3, r3, #3
 801a2ce:	4413      	add	r3, r2
 801a2d0:	009b      	lsls	r3, r3, #2
 801a2d2:	440b      	add	r3, r1
 801a2d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a2d8:	681a      	ldr	r2, [r3, #0]
 801a2da:	78fb      	ldrb	r3, [r7, #3]
 801a2dc:	4619      	mov	r1, r3
 801a2de:	f7fe fb1d 	bl	801891c <USBD_LL_DataOutStage>
}
 801a2e2:	bf00      	nop
 801a2e4:	3708      	adds	r7, #8
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	bd80      	pop	{r7, pc}

0801a2ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2ea:	b580      	push	{r7, lr}
 801a2ec:	b082      	sub	sp, #8
 801a2ee:	af00      	add	r7, sp, #0
 801a2f0:	6078      	str	r0, [r7, #4]
 801a2f2:	460b      	mov	r3, r1
 801a2f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a2fc:	78fa      	ldrb	r2, [r7, #3]
 801a2fe:	6879      	ldr	r1, [r7, #4]
 801a300:	4613      	mov	r3, r2
 801a302:	00db      	lsls	r3, r3, #3
 801a304:	4413      	add	r3, r2
 801a306:	009b      	lsls	r3, r3, #2
 801a308:	440b      	add	r3, r1
 801a30a:	3320      	adds	r3, #32
 801a30c:	681a      	ldr	r2, [r3, #0]
 801a30e:	78fb      	ldrb	r3, [r7, #3]
 801a310:	4619      	mov	r1, r3
 801a312:	f7fe fbb6 	bl	8018a82 <USBD_LL_DataInStage>
}
 801a316:	bf00      	nop
 801a318:	3708      	adds	r7, #8
 801a31a:	46bd      	mov	sp, r7
 801a31c:	bd80      	pop	{r7, pc}

0801a31e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a31e:	b580      	push	{r7, lr}
 801a320:	b082      	sub	sp, #8
 801a322:	af00      	add	r7, sp, #0
 801a324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7fe fcf0 	bl	8018d12 <USBD_LL_SOF>
}
 801a332:	bf00      	nop
 801a334:	3708      	adds	r7, #8
 801a336:	46bd      	mov	sp, r7
 801a338:	bd80      	pop	{r7, pc}

0801a33a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a33a:	b580      	push	{r7, lr}
 801a33c:	b084      	sub	sp, #16
 801a33e:	af00      	add	r7, sp, #0
 801a340:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a342:	2301      	movs	r3, #1
 801a344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	79db      	ldrb	r3, [r3, #7]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d102      	bne.n	801a354 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a34e:	2300      	movs	r3, #0
 801a350:	73fb      	strb	r3, [r7, #15]
 801a352:	e008      	b.n	801a366 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	79db      	ldrb	r3, [r3, #7]
 801a358:	2b02      	cmp	r3, #2
 801a35a:	d102      	bne.n	801a362 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a35c:	2301      	movs	r3, #1
 801a35e:	73fb      	strb	r3, [r7, #15]
 801a360:	e001      	b.n	801a366 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a362:	f7e7 fea7 	bl	80020b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a36c:	7bfa      	ldrb	r2, [r7, #15]
 801a36e:	4611      	mov	r1, r2
 801a370:	4618      	mov	r0, r3
 801a372:	f7fe fc8a 	bl	8018c8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a37c:	4618      	mov	r0, r3
 801a37e:	f7fe fc32 	bl	8018be6 <USBD_LL_Reset>
}
 801a382:	bf00      	nop
 801a384:	3710      	adds	r7, #16
 801a386:	46bd      	mov	sp, r7
 801a388:	bd80      	pop	{r7, pc}
	...

0801a38c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b082      	sub	sp, #8
 801a390:	af00      	add	r7, sp, #0
 801a392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a39a:	4618      	mov	r0, r3
 801a39c:	f7fe fc85 	bl	8018caa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	687a      	ldr	r2, [r7, #4]
 801a3ac:	6812      	ldr	r2, [r2, #0]
 801a3ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a3b2:	f043 0301 	orr.w	r3, r3, #1
 801a3b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	7adb      	ldrb	r3, [r3, #11]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d005      	beq.n	801a3cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a3c0:	4b04      	ldr	r3, [pc, #16]	@ (801a3d4 <HAL_PCD_SuspendCallback+0x48>)
 801a3c2:	691b      	ldr	r3, [r3, #16]
 801a3c4:	4a03      	ldr	r2, [pc, #12]	@ (801a3d4 <HAL_PCD_SuspendCallback+0x48>)
 801a3c6:	f043 0306 	orr.w	r3, r3, #6
 801a3ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a3cc:	bf00      	nop
 801a3ce:	3708      	adds	r7, #8
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	bd80      	pop	{r7, pc}
 801a3d4:	e000ed00 	.word	0xe000ed00

0801a3d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b082      	sub	sp, #8
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f7fe fc7b 	bl	8018ce2 <USBD_LL_Resume>
}
 801a3ec:	bf00      	nop
 801a3ee:	3708      	adds	r7, #8
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	bd80      	pop	{r7, pc}

0801a3f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3f4:	b580      	push	{r7, lr}
 801a3f6:	b082      	sub	sp, #8
 801a3f8:	af00      	add	r7, sp, #0
 801a3fa:	6078      	str	r0, [r7, #4]
 801a3fc:	460b      	mov	r3, r1
 801a3fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a406:	78fa      	ldrb	r2, [r7, #3]
 801a408:	4611      	mov	r1, r2
 801a40a:	4618      	mov	r0, r3
 801a40c:	f7fe fcd3 	bl	8018db6 <USBD_LL_IsoOUTIncomplete>
}
 801a410:	bf00      	nop
 801a412:	3708      	adds	r7, #8
 801a414:	46bd      	mov	sp, r7
 801a416:	bd80      	pop	{r7, pc}

0801a418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b082      	sub	sp, #8
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
 801a420:	460b      	mov	r3, r1
 801a422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a42a:	78fa      	ldrb	r2, [r7, #3]
 801a42c:	4611      	mov	r1, r2
 801a42e:	4618      	mov	r0, r3
 801a430:	f7fe fc8f 	bl	8018d52 <USBD_LL_IsoINIncomplete>
}
 801a434:	bf00      	nop
 801a436:	3708      	adds	r7, #8
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}

0801a43c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b082      	sub	sp, #8
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a44a:	4618      	mov	r0, r3
 801a44c:	f7fe fce5 	bl	8018e1a <USBD_LL_DevConnected>
}
 801a450:	bf00      	nop
 801a452:	3708      	adds	r7, #8
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}

0801a458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	b082      	sub	sp, #8
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a466:	4618      	mov	r0, r3
 801a468:	f7fe fce2 	bl	8018e30 <USBD_LL_DevDisconnected>
}
 801a46c:	bf00      	nop
 801a46e:	3708      	adds	r7, #8
 801a470:	46bd      	mov	sp, r7
 801a472:	bd80      	pop	{r7, pc}

0801a474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a474:	b580      	push	{r7, lr}
 801a476:	b082      	sub	sp, #8
 801a478:	af00      	add	r7, sp, #0
 801a47a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d13e      	bne.n	801a502 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a484:	4a21      	ldr	r2, [pc, #132]	@ (801a50c <USBD_LL_Init+0x98>)
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	4a1f      	ldr	r2, [pc, #124]	@ (801a50c <USBD_LL_Init+0x98>)
 801a490:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a494:	4b1d      	ldr	r3, [pc, #116]	@ (801a50c <USBD_LL_Init+0x98>)
 801a496:	4a1e      	ldr	r2, [pc, #120]	@ (801a510 <USBD_LL_Init+0x9c>)
 801a498:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801a49a:	4b1c      	ldr	r3, [pc, #112]	@ (801a50c <USBD_LL_Init+0x98>)
 801a49c:	2209      	movs	r2, #9
 801a49e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a4a0:	4b1a      	ldr	r3, [pc, #104]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4a2:	2202      	movs	r2, #2
 801a4a4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a4a6:	4b19      	ldr	r3, [pc, #100]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a4ac:	4b17      	ldr	r3, [pc, #92]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4ae:	2202      	movs	r2, #2
 801a4b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a4b2:	4b16      	ldr	r3, [pc, #88]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4b4:	2200      	movs	r2, #0
 801a4b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a4b8:	4b14      	ldr	r3, [pc, #80]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a4be:	4b13      	ldr	r3, [pc, #76]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801a4c4:	4b11      	ldr	r3, [pc, #68]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a4ca:	4b10      	ldr	r3, [pc, #64]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a4d0:	4b0e      	ldr	r3, [pc, #56]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a4d6:	480d      	ldr	r0, [pc, #52]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4d8:	f7f2 fdc6 	bl	800d068 <HAL_PCD_Init>
 801a4dc:	4603      	mov	r3, r0
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d001      	beq.n	801a4e6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a4e2:	f7e7 fde7 	bl	80020b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a4e6:	2180      	movs	r1, #128	@ 0x80
 801a4e8:	4808      	ldr	r0, [pc, #32]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4ea:	f7f4 f81c 	bl	800e526 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a4ee:	2240      	movs	r2, #64	@ 0x40
 801a4f0:	2100      	movs	r1, #0
 801a4f2:	4806      	ldr	r0, [pc, #24]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4f4:	f7f3 ffd0 	bl	800e498 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a4f8:	2280      	movs	r2, #128	@ 0x80
 801a4fa:	2101      	movs	r1, #1
 801a4fc:	4803      	ldr	r0, [pc, #12]	@ (801a50c <USBD_LL_Init+0x98>)
 801a4fe:	f7f3 ffcb 	bl	800e498 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801a502:	2300      	movs	r3, #0
}
 801a504:	4618      	mov	r0, r3
 801a506:	3708      	adds	r7, #8
 801a508:	46bd      	mov	sp, r7
 801a50a:	bd80      	pop	{r7, pc}
 801a50c:	240485d4 	.word	0x240485d4
 801a510:	40080000 	.word	0x40080000

0801a514 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a514:	b580      	push	{r7, lr}
 801a516:	b084      	sub	sp, #16
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a51c:	2300      	movs	r3, #0
 801a51e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a520:	2300      	movs	r3, #0
 801a522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a52a:	4618      	mov	r0, r3
 801a52c:	f7f2 fea8 	bl	800d280 <HAL_PCD_Start>
 801a530:	4603      	mov	r3, r0
 801a532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a534:	7bfb      	ldrb	r3, [r7, #15]
 801a536:	4618      	mov	r0, r3
 801a538:	f000 f942 	bl	801a7c0 <USBD_Get_USB_Status>
 801a53c:	4603      	mov	r3, r0
 801a53e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a540:	7bbb      	ldrb	r3, [r7, #14]
}
 801a542:	4618      	mov	r0, r3
 801a544:	3710      	adds	r7, #16
 801a546:	46bd      	mov	sp, r7
 801a548:	bd80      	pop	{r7, pc}

0801a54a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a54a:	b580      	push	{r7, lr}
 801a54c:	b084      	sub	sp, #16
 801a54e:	af00      	add	r7, sp, #0
 801a550:	6078      	str	r0, [r7, #4]
 801a552:	4608      	mov	r0, r1
 801a554:	4611      	mov	r1, r2
 801a556:	461a      	mov	r2, r3
 801a558:	4603      	mov	r3, r0
 801a55a:	70fb      	strb	r3, [r7, #3]
 801a55c:	460b      	mov	r3, r1
 801a55e:	70bb      	strb	r3, [r7, #2]
 801a560:	4613      	mov	r3, r2
 801a562:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a564:	2300      	movs	r3, #0
 801a566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a568:	2300      	movs	r3, #0
 801a56a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a572:	78bb      	ldrb	r3, [r7, #2]
 801a574:	883a      	ldrh	r2, [r7, #0]
 801a576:	78f9      	ldrb	r1, [r7, #3]
 801a578:	f7f3 fba9 	bl	800dcce <HAL_PCD_EP_Open>
 801a57c:	4603      	mov	r3, r0
 801a57e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a580:	7bfb      	ldrb	r3, [r7, #15]
 801a582:	4618      	mov	r0, r3
 801a584:	f000 f91c 	bl	801a7c0 <USBD_Get_USB_Status>
 801a588:	4603      	mov	r3, r0
 801a58a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a58c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a58e:	4618      	mov	r0, r3
 801a590:	3710      	adds	r7, #16
 801a592:	46bd      	mov	sp, r7
 801a594:	bd80      	pop	{r7, pc}

0801a596 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a596:	b580      	push	{r7, lr}
 801a598:	b084      	sub	sp, #16
 801a59a:	af00      	add	r7, sp, #0
 801a59c:	6078      	str	r0, [r7, #4]
 801a59e:	460b      	mov	r3, r1
 801a5a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a5b0:	78fa      	ldrb	r2, [r7, #3]
 801a5b2:	4611      	mov	r1, r2
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	f7f3 fbf4 	bl	800dda2 <HAL_PCD_EP_Close>
 801a5ba:	4603      	mov	r3, r0
 801a5bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5be:	7bfb      	ldrb	r3, [r7, #15]
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f000 f8fd 	bl	801a7c0 <USBD_Get_USB_Status>
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a5ca:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	3710      	adds	r7, #16
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	bd80      	pop	{r7, pc}

0801a5d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b084      	sub	sp, #16
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
 801a5dc:	460b      	mov	r3, r1
 801a5de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a5ee:	78fa      	ldrb	r2, [r7, #3]
 801a5f0:	4611      	mov	r1, r2
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7f3 fcac 	bl	800df50 <HAL_PCD_EP_SetStall>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5fc:	7bfb      	ldrb	r3, [r7, #15]
 801a5fe:	4618      	mov	r0, r3
 801a600:	f000 f8de 	bl	801a7c0 <USBD_Get_USB_Status>
 801a604:	4603      	mov	r3, r0
 801a606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a608:	7bbb      	ldrb	r3, [r7, #14]
}
 801a60a:	4618      	mov	r0, r3
 801a60c:	3710      	adds	r7, #16
 801a60e:	46bd      	mov	sp, r7
 801a610:	bd80      	pop	{r7, pc}

0801a612 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a612:	b580      	push	{r7, lr}
 801a614:	b084      	sub	sp, #16
 801a616:	af00      	add	r7, sp, #0
 801a618:	6078      	str	r0, [r7, #4]
 801a61a:	460b      	mov	r3, r1
 801a61c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a61e:	2300      	movs	r3, #0
 801a620:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a622:	2300      	movs	r3, #0
 801a624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a62c:	78fa      	ldrb	r2, [r7, #3]
 801a62e:	4611      	mov	r1, r2
 801a630:	4618      	mov	r0, r3
 801a632:	f7f3 fcf0 	bl	800e016 <HAL_PCD_EP_ClrStall>
 801a636:	4603      	mov	r3, r0
 801a638:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a63a:	7bfb      	ldrb	r3, [r7, #15]
 801a63c:	4618      	mov	r0, r3
 801a63e:	f000 f8bf 	bl	801a7c0 <USBD_Get_USB_Status>
 801a642:	4603      	mov	r3, r0
 801a644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a646:	7bbb      	ldrb	r3, [r7, #14]
}
 801a648:	4618      	mov	r0, r3
 801a64a:	3710      	adds	r7, #16
 801a64c:	46bd      	mov	sp, r7
 801a64e:	bd80      	pop	{r7, pc}

0801a650 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a650:	b480      	push	{r7}
 801a652:	b085      	sub	sp, #20
 801a654:	af00      	add	r7, sp, #0
 801a656:	6078      	str	r0, [r7, #4]
 801a658:	460b      	mov	r3, r1
 801a65a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a662:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	da0b      	bge.n	801a684 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a66c:	78fb      	ldrb	r3, [r7, #3]
 801a66e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a672:	68f9      	ldr	r1, [r7, #12]
 801a674:	4613      	mov	r3, r2
 801a676:	00db      	lsls	r3, r3, #3
 801a678:	4413      	add	r3, r2
 801a67a:	009b      	lsls	r3, r3, #2
 801a67c:	440b      	add	r3, r1
 801a67e:	3316      	adds	r3, #22
 801a680:	781b      	ldrb	r3, [r3, #0]
 801a682:	e00b      	b.n	801a69c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a684:	78fb      	ldrb	r3, [r7, #3]
 801a686:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a68a:	68f9      	ldr	r1, [r7, #12]
 801a68c:	4613      	mov	r3, r2
 801a68e:	00db      	lsls	r3, r3, #3
 801a690:	4413      	add	r3, r2
 801a692:	009b      	lsls	r3, r3, #2
 801a694:	440b      	add	r3, r1
 801a696:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801a69a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a69c:	4618      	mov	r0, r3
 801a69e:	3714      	adds	r7, #20
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a6:	4770      	bx	lr

0801a6a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b084      	sub	sp, #16
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
 801a6b0:	460b      	mov	r3, r1
 801a6b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a6c2:	78fa      	ldrb	r2, [r7, #3]
 801a6c4:	4611      	mov	r1, r2
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f7f3 fadd 	bl	800dc86 <HAL_PCD_SetAddress>
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a6d0:	7bfb      	ldrb	r3, [r7, #15]
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	f000 f874 	bl	801a7c0 <USBD_Get_USB_Status>
 801a6d8:	4603      	mov	r3, r0
 801a6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6de:	4618      	mov	r0, r3
 801a6e0:	3710      	adds	r7, #16
 801a6e2:	46bd      	mov	sp, r7
 801a6e4:	bd80      	pop	{r7, pc}

0801a6e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a6e6:	b580      	push	{r7, lr}
 801a6e8:	b086      	sub	sp, #24
 801a6ea:	af00      	add	r7, sp, #0
 801a6ec:	60f8      	str	r0, [r7, #12]
 801a6ee:	607a      	str	r2, [r7, #4]
 801a6f0:	603b      	str	r3, [r7, #0]
 801a6f2:	460b      	mov	r3, r1
 801a6f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a704:	7af9      	ldrb	r1, [r7, #11]
 801a706:	683b      	ldr	r3, [r7, #0]
 801a708:	687a      	ldr	r2, [r7, #4]
 801a70a:	f7f3 fbe7 	bl	800dedc <HAL_PCD_EP_Transmit>
 801a70e:	4603      	mov	r3, r0
 801a710:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a712:	7dfb      	ldrb	r3, [r7, #23]
 801a714:	4618      	mov	r0, r3
 801a716:	f000 f853 	bl	801a7c0 <USBD_Get_USB_Status>
 801a71a:	4603      	mov	r3, r0
 801a71c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a71e:	7dbb      	ldrb	r3, [r7, #22]
}
 801a720:	4618      	mov	r0, r3
 801a722:	3718      	adds	r7, #24
 801a724:	46bd      	mov	sp, r7
 801a726:	bd80      	pop	{r7, pc}

0801a728 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b086      	sub	sp, #24
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	60f8      	str	r0, [r7, #12]
 801a730:	607a      	str	r2, [r7, #4]
 801a732:	603b      	str	r3, [r7, #0]
 801a734:	460b      	mov	r3, r1
 801a736:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a738:	2300      	movs	r3, #0
 801a73a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a73c:	2300      	movs	r3, #0
 801a73e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a746:	7af9      	ldrb	r1, [r7, #11]
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	687a      	ldr	r2, [r7, #4]
 801a74c:	f7f3 fb73 	bl	800de36 <HAL_PCD_EP_Receive>
 801a750:	4603      	mov	r3, r0
 801a752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a754:	7dfb      	ldrb	r3, [r7, #23]
 801a756:	4618      	mov	r0, r3
 801a758:	f000 f832 	bl	801a7c0 <USBD_Get_USB_Status>
 801a75c:	4603      	mov	r3, r0
 801a75e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a760:	7dbb      	ldrb	r3, [r7, #22]
}
 801a762:	4618      	mov	r0, r3
 801a764:	3718      	adds	r7, #24
 801a766:	46bd      	mov	sp, r7
 801a768:	bd80      	pop	{r7, pc}

0801a76a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a76a:	b580      	push	{r7, lr}
 801a76c:	b082      	sub	sp, #8
 801a76e:	af00      	add	r7, sp, #0
 801a770:	6078      	str	r0, [r7, #4]
 801a772:	460b      	mov	r3, r1
 801a774:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a77c:	78fa      	ldrb	r2, [r7, #3]
 801a77e:	4611      	mov	r1, r2
 801a780:	4618      	mov	r0, r3
 801a782:	f7f3 fb93 	bl	800deac <HAL_PCD_EP_GetRxCount>
 801a786:	4603      	mov	r3, r0
}
 801a788:	4618      	mov	r0, r3
 801a78a:	3708      	adds	r7, #8
 801a78c:	46bd      	mov	sp, r7
 801a78e:	bd80      	pop	{r7, pc}

0801a790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a790:	b480      	push	{r7}
 801a792:	b083      	sub	sp, #12
 801a794:	af00      	add	r7, sp, #0
 801a796:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a798:	4b03      	ldr	r3, [pc, #12]	@ (801a7a8 <USBD_static_malloc+0x18>)
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	370c      	adds	r7, #12
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a4:	4770      	bx	lr
 801a7a6:	bf00      	nop
 801a7a8:	24048ab8 	.word	0x24048ab8

0801a7ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a7ac:	b480      	push	{r7}
 801a7ae:	b083      	sub	sp, #12
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801a7b4:	bf00      	nop
 801a7b6:	370c      	adds	r7, #12
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7be:	4770      	bx	lr

0801a7c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a7c0:	b480      	push	{r7}
 801a7c2:	b085      	sub	sp, #20
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a7ce:	79fb      	ldrb	r3, [r7, #7]
 801a7d0:	2b03      	cmp	r3, #3
 801a7d2:	d817      	bhi.n	801a804 <USBD_Get_USB_Status+0x44>
 801a7d4:	a201      	add	r2, pc, #4	@ (adr r2, 801a7dc <USBD_Get_USB_Status+0x1c>)
 801a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7da:	bf00      	nop
 801a7dc:	0801a7ed 	.word	0x0801a7ed
 801a7e0:	0801a7f3 	.word	0x0801a7f3
 801a7e4:	0801a7f9 	.word	0x0801a7f9
 801a7e8:	0801a7ff 	.word	0x0801a7ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	73fb      	strb	r3, [r7, #15]
    break;
 801a7f0:	e00b      	b.n	801a80a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a7f2:	2303      	movs	r3, #3
 801a7f4:	73fb      	strb	r3, [r7, #15]
    break;
 801a7f6:	e008      	b.n	801a80a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a7f8:	2301      	movs	r3, #1
 801a7fa:	73fb      	strb	r3, [r7, #15]
    break;
 801a7fc:	e005      	b.n	801a80a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a7fe:	2303      	movs	r3, #3
 801a800:	73fb      	strb	r3, [r7, #15]
    break;
 801a802:	e002      	b.n	801a80a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a804:	2303      	movs	r3, #3
 801a806:	73fb      	strb	r3, [r7, #15]
    break;
 801a808:	bf00      	nop
  }
  return usb_status;
 801a80a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a80c:	4618      	mov	r0, r3
 801a80e:	3714      	adds	r7, #20
 801a810:	46bd      	mov	sp, r7
 801a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a816:	4770      	bx	lr

0801a818 <malloc>:
 801a818:	4b02      	ldr	r3, [pc, #8]	@ (801a824 <malloc+0xc>)
 801a81a:	4601      	mov	r1, r0
 801a81c:	6818      	ldr	r0, [r3, #0]
 801a81e:	f000 b825 	b.w	801a86c <_malloc_r>
 801a822:	bf00      	nop
 801a824:	24000344 	.word	0x24000344

0801a828 <sbrk_aligned>:
 801a828:	b570      	push	{r4, r5, r6, lr}
 801a82a:	4e0f      	ldr	r6, [pc, #60]	@ (801a868 <sbrk_aligned+0x40>)
 801a82c:	460c      	mov	r4, r1
 801a82e:	6831      	ldr	r1, [r6, #0]
 801a830:	4605      	mov	r5, r0
 801a832:	b911      	cbnz	r1, 801a83a <sbrk_aligned+0x12>
 801a834:	f000 f8d0 	bl	801a9d8 <_sbrk_r>
 801a838:	6030      	str	r0, [r6, #0]
 801a83a:	4621      	mov	r1, r4
 801a83c:	4628      	mov	r0, r5
 801a83e:	f000 f8cb 	bl	801a9d8 <_sbrk_r>
 801a842:	1c43      	adds	r3, r0, #1
 801a844:	d103      	bne.n	801a84e <sbrk_aligned+0x26>
 801a846:	f04f 34ff 	mov.w	r4, #4294967295
 801a84a:	4620      	mov	r0, r4
 801a84c:	bd70      	pop	{r4, r5, r6, pc}
 801a84e:	1cc4      	adds	r4, r0, #3
 801a850:	f024 0403 	bic.w	r4, r4, #3
 801a854:	42a0      	cmp	r0, r4
 801a856:	d0f8      	beq.n	801a84a <sbrk_aligned+0x22>
 801a858:	1a21      	subs	r1, r4, r0
 801a85a:	4628      	mov	r0, r5
 801a85c:	f000 f8bc 	bl	801a9d8 <_sbrk_r>
 801a860:	3001      	adds	r0, #1
 801a862:	d1f2      	bne.n	801a84a <sbrk_aligned+0x22>
 801a864:	e7ef      	b.n	801a846 <sbrk_aligned+0x1e>
 801a866:	bf00      	nop
 801a868:	24048cd8 	.word	0x24048cd8

0801a86c <_malloc_r>:
 801a86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a870:	1ccd      	adds	r5, r1, #3
 801a872:	f025 0503 	bic.w	r5, r5, #3
 801a876:	3508      	adds	r5, #8
 801a878:	2d0c      	cmp	r5, #12
 801a87a:	bf38      	it	cc
 801a87c:	250c      	movcc	r5, #12
 801a87e:	2d00      	cmp	r5, #0
 801a880:	4606      	mov	r6, r0
 801a882:	db01      	blt.n	801a888 <_malloc_r+0x1c>
 801a884:	42a9      	cmp	r1, r5
 801a886:	d904      	bls.n	801a892 <_malloc_r+0x26>
 801a888:	230c      	movs	r3, #12
 801a88a:	6033      	str	r3, [r6, #0]
 801a88c:	2000      	movs	r0, #0
 801a88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a968 <_malloc_r+0xfc>
 801a896:	f000 f869 	bl	801a96c <__malloc_lock>
 801a89a:	f8d8 3000 	ldr.w	r3, [r8]
 801a89e:	461c      	mov	r4, r3
 801a8a0:	bb44      	cbnz	r4, 801a8f4 <_malloc_r+0x88>
 801a8a2:	4629      	mov	r1, r5
 801a8a4:	4630      	mov	r0, r6
 801a8a6:	f7ff ffbf 	bl	801a828 <sbrk_aligned>
 801a8aa:	1c43      	adds	r3, r0, #1
 801a8ac:	4604      	mov	r4, r0
 801a8ae:	d158      	bne.n	801a962 <_malloc_r+0xf6>
 801a8b0:	f8d8 4000 	ldr.w	r4, [r8]
 801a8b4:	4627      	mov	r7, r4
 801a8b6:	2f00      	cmp	r7, #0
 801a8b8:	d143      	bne.n	801a942 <_malloc_r+0xd6>
 801a8ba:	2c00      	cmp	r4, #0
 801a8bc:	d04b      	beq.n	801a956 <_malloc_r+0xea>
 801a8be:	6823      	ldr	r3, [r4, #0]
 801a8c0:	4639      	mov	r1, r7
 801a8c2:	4630      	mov	r0, r6
 801a8c4:	eb04 0903 	add.w	r9, r4, r3
 801a8c8:	f000 f886 	bl	801a9d8 <_sbrk_r>
 801a8cc:	4581      	cmp	r9, r0
 801a8ce:	d142      	bne.n	801a956 <_malloc_r+0xea>
 801a8d0:	6821      	ldr	r1, [r4, #0]
 801a8d2:	1a6d      	subs	r5, r5, r1
 801a8d4:	4629      	mov	r1, r5
 801a8d6:	4630      	mov	r0, r6
 801a8d8:	f7ff ffa6 	bl	801a828 <sbrk_aligned>
 801a8dc:	3001      	adds	r0, #1
 801a8de:	d03a      	beq.n	801a956 <_malloc_r+0xea>
 801a8e0:	6823      	ldr	r3, [r4, #0]
 801a8e2:	442b      	add	r3, r5
 801a8e4:	6023      	str	r3, [r4, #0]
 801a8e6:	f8d8 3000 	ldr.w	r3, [r8]
 801a8ea:	685a      	ldr	r2, [r3, #4]
 801a8ec:	bb62      	cbnz	r2, 801a948 <_malloc_r+0xdc>
 801a8ee:	f8c8 7000 	str.w	r7, [r8]
 801a8f2:	e00f      	b.n	801a914 <_malloc_r+0xa8>
 801a8f4:	6822      	ldr	r2, [r4, #0]
 801a8f6:	1b52      	subs	r2, r2, r5
 801a8f8:	d420      	bmi.n	801a93c <_malloc_r+0xd0>
 801a8fa:	2a0b      	cmp	r2, #11
 801a8fc:	d917      	bls.n	801a92e <_malloc_r+0xc2>
 801a8fe:	1961      	adds	r1, r4, r5
 801a900:	42a3      	cmp	r3, r4
 801a902:	6025      	str	r5, [r4, #0]
 801a904:	bf18      	it	ne
 801a906:	6059      	strne	r1, [r3, #4]
 801a908:	6863      	ldr	r3, [r4, #4]
 801a90a:	bf08      	it	eq
 801a90c:	f8c8 1000 	streq.w	r1, [r8]
 801a910:	5162      	str	r2, [r4, r5]
 801a912:	604b      	str	r3, [r1, #4]
 801a914:	4630      	mov	r0, r6
 801a916:	f000 f82f 	bl	801a978 <__malloc_unlock>
 801a91a:	f104 000b 	add.w	r0, r4, #11
 801a91e:	1d23      	adds	r3, r4, #4
 801a920:	f020 0007 	bic.w	r0, r0, #7
 801a924:	1ac2      	subs	r2, r0, r3
 801a926:	bf1c      	itt	ne
 801a928:	1a1b      	subne	r3, r3, r0
 801a92a:	50a3      	strne	r3, [r4, r2]
 801a92c:	e7af      	b.n	801a88e <_malloc_r+0x22>
 801a92e:	6862      	ldr	r2, [r4, #4]
 801a930:	42a3      	cmp	r3, r4
 801a932:	bf0c      	ite	eq
 801a934:	f8c8 2000 	streq.w	r2, [r8]
 801a938:	605a      	strne	r2, [r3, #4]
 801a93a:	e7eb      	b.n	801a914 <_malloc_r+0xa8>
 801a93c:	4623      	mov	r3, r4
 801a93e:	6864      	ldr	r4, [r4, #4]
 801a940:	e7ae      	b.n	801a8a0 <_malloc_r+0x34>
 801a942:	463c      	mov	r4, r7
 801a944:	687f      	ldr	r7, [r7, #4]
 801a946:	e7b6      	b.n	801a8b6 <_malloc_r+0x4a>
 801a948:	461a      	mov	r2, r3
 801a94a:	685b      	ldr	r3, [r3, #4]
 801a94c:	42a3      	cmp	r3, r4
 801a94e:	d1fb      	bne.n	801a948 <_malloc_r+0xdc>
 801a950:	2300      	movs	r3, #0
 801a952:	6053      	str	r3, [r2, #4]
 801a954:	e7de      	b.n	801a914 <_malloc_r+0xa8>
 801a956:	230c      	movs	r3, #12
 801a958:	6033      	str	r3, [r6, #0]
 801a95a:	4630      	mov	r0, r6
 801a95c:	f000 f80c 	bl	801a978 <__malloc_unlock>
 801a960:	e794      	b.n	801a88c <_malloc_r+0x20>
 801a962:	6005      	str	r5, [r0, #0]
 801a964:	e7d6      	b.n	801a914 <_malloc_r+0xa8>
 801a966:	bf00      	nop
 801a968:	24048cdc 	.word	0x24048cdc

0801a96c <__malloc_lock>:
 801a96c:	4801      	ldr	r0, [pc, #4]	@ (801a974 <__malloc_lock+0x8>)
 801a96e:	f000 b86d 	b.w	801aa4c <__retarget_lock_acquire_recursive>
 801a972:	bf00      	nop
 801a974:	24048e1c 	.word	0x24048e1c

0801a978 <__malloc_unlock>:
 801a978:	4801      	ldr	r0, [pc, #4]	@ (801a980 <__malloc_unlock+0x8>)
 801a97a:	f000 b868 	b.w	801aa4e <__retarget_lock_release_recursive>
 801a97e:	bf00      	nop
 801a980:	24048e1c 	.word	0x24048e1c

0801a984 <siprintf>:
 801a984:	b40e      	push	{r1, r2, r3}
 801a986:	b510      	push	{r4, lr}
 801a988:	b09d      	sub	sp, #116	@ 0x74
 801a98a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a98c:	9002      	str	r0, [sp, #8]
 801a98e:	9006      	str	r0, [sp, #24]
 801a990:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a994:	480a      	ldr	r0, [pc, #40]	@ (801a9c0 <siprintf+0x3c>)
 801a996:	9107      	str	r1, [sp, #28]
 801a998:	9104      	str	r1, [sp, #16]
 801a99a:	490a      	ldr	r1, [pc, #40]	@ (801a9c4 <siprintf+0x40>)
 801a99c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9a0:	9105      	str	r1, [sp, #20]
 801a9a2:	2400      	movs	r4, #0
 801a9a4:	a902      	add	r1, sp, #8
 801a9a6:	6800      	ldr	r0, [r0, #0]
 801a9a8:	9301      	str	r3, [sp, #4]
 801a9aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 801a9ac:	f000 f90c 	bl	801abc8 <_svfiprintf_r>
 801a9b0:	9b02      	ldr	r3, [sp, #8]
 801a9b2:	701c      	strb	r4, [r3, #0]
 801a9b4:	b01d      	add	sp, #116	@ 0x74
 801a9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9ba:	b003      	add	sp, #12
 801a9bc:	4770      	bx	lr
 801a9be:	bf00      	nop
 801a9c0:	24000344 	.word	0x24000344
 801a9c4:	ffff0208 	.word	0xffff0208

0801a9c8 <memset>:
 801a9c8:	4402      	add	r2, r0
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	4293      	cmp	r3, r2
 801a9ce:	d100      	bne.n	801a9d2 <memset+0xa>
 801a9d0:	4770      	bx	lr
 801a9d2:	f803 1b01 	strb.w	r1, [r3], #1
 801a9d6:	e7f9      	b.n	801a9cc <memset+0x4>

0801a9d8 <_sbrk_r>:
 801a9d8:	b538      	push	{r3, r4, r5, lr}
 801a9da:	4d06      	ldr	r5, [pc, #24]	@ (801a9f4 <_sbrk_r+0x1c>)
 801a9dc:	2300      	movs	r3, #0
 801a9de:	4604      	mov	r4, r0
 801a9e0:	4608      	mov	r0, r1
 801a9e2:	602b      	str	r3, [r5, #0]
 801a9e4:	f7e8 f85a 	bl	8002a9c <_sbrk>
 801a9e8:	1c43      	adds	r3, r0, #1
 801a9ea:	d102      	bne.n	801a9f2 <_sbrk_r+0x1a>
 801a9ec:	682b      	ldr	r3, [r5, #0]
 801a9ee:	b103      	cbz	r3, 801a9f2 <_sbrk_r+0x1a>
 801a9f0:	6023      	str	r3, [r4, #0]
 801a9f2:	bd38      	pop	{r3, r4, r5, pc}
 801a9f4:	24048e18 	.word	0x24048e18

0801a9f8 <__errno>:
 801a9f8:	4b01      	ldr	r3, [pc, #4]	@ (801aa00 <__errno+0x8>)
 801a9fa:	6818      	ldr	r0, [r3, #0]
 801a9fc:	4770      	bx	lr
 801a9fe:	bf00      	nop
 801aa00:	24000344 	.word	0x24000344

0801aa04 <__libc_init_array>:
 801aa04:	b570      	push	{r4, r5, r6, lr}
 801aa06:	4d0d      	ldr	r5, [pc, #52]	@ (801aa3c <__libc_init_array+0x38>)
 801aa08:	4c0d      	ldr	r4, [pc, #52]	@ (801aa40 <__libc_init_array+0x3c>)
 801aa0a:	1b64      	subs	r4, r4, r5
 801aa0c:	10a4      	asrs	r4, r4, #2
 801aa0e:	2600      	movs	r6, #0
 801aa10:	42a6      	cmp	r6, r4
 801aa12:	d109      	bne.n	801aa28 <__libc_init_array+0x24>
 801aa14:	4d0b      	ldr	r5, [pc, #44]	@ (801aa44 <__libc_init_array+0x40>)
 801aa16:	4c0c      	ldr	r4, [pc, #48]	@ (801aa48 <__libc_init_array+0x44>)
 801aa18:	f000 fbae 	bl	801b178 <_init>
 801aa1c:	1b64      	subs	r4, r4, r5
 801aa1e:	10a4      	asrs	r4, r4, #2
 801aa20:	2600      	movs	r6, #0
 801aa22:	42a6      	cmp	r6, r4
 801aa24:	d105      	bne.n	801aa32 <__libc_init_array+0x2e>
 801aa26:	bd70      	pop	{r4, r5, r6, pc}
 801aa28:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa2c:	4798      	blx	r3
 801aa2e:	3601      	adds	r6, #1
 801aa30:	e7ee      	b.n	801aa10 <__libc_init_array+0xc>
 801aa32:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa36:	4798      	blx	r3
 801aa38:	3601      	adds	r6, #1
 801aa3a:	e7f2      	b.n	801aa22 <__libc_init_array+0x1e>
 801aa3c:	0801b998 	.word	0x0801b998
 801aa40:	0801b998 	.word	0x0801b998
 801aa44:	0801b998 	.word	0x0801b998
 801aa48:	0801b99c 	.word	0x0801b99c

0801aa4c <__retarget_lock_acquire_recursive>:
 801aa4c:	4770      	bx	lr

0801aa4e <__retarget_lock_release_recursive>:
 801aa4e:	4770      	bx	lr

0801aa50 <strcpy>:
 801aa50:	4603      	mov	r3, r0
 801aa52:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa56:	f803 2b01 	strb.w	r2, [r3], #1
 801aa5a:	2a00      	cmp	r2, #0
 801aa5c:	d1f9      	bne.n	801aa52 <strcpy+0x2>
 801aa5e:	4770      	bx	lr

0801aa60 <memcpy>:
 801aa60:	440a      	add	r2, r1
 801aa62:	4291      	cmp	r1, r2
 801aa64:	f100 33ff 	add.w	r3, r0, #4294967295
 801aa68:	d100      	bne.n	801aa6c <memcpy+0xc>
 801aa6a:	4770      	bx	lr
 801aa6c:	b510      	push	{r4, lr}
 801aa6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa72:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aa76:	4291      	cmp	r1, r2
 801aa78:	d1f9      	bne.n	801aa6e <memcpy+0xe>
 801aa7a:	bd10      	pop	{r4, pc}

0801aa7c <_free_r>:
 801aa7c:	b538      	push	{r3, r4, r5, lr}
 801aa7e:	4605      	mov	r5, r0
 801aa80:	2900      	cmp	r1, #0
 801aa82:	d041      	beq.n	801ab08 <_free_r+0x8c>
 801aa84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa88:	1f0c      	subs	r4, r1, #4
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	bfb8      	it	lt
 801aa8e:	18e4      	addlt	r4, r4, r3
 801aa90:	f7ff ff6c 	bl	801a96c <__malloc_lock>
 801aa94:	4a1d      	ldr	r2, [pc, #116]	@ (801ab0c <_free_r+0x90>)
 801aa96:	6813      	ldr	r3, [r2, #0]
 801aa98:	b933      	cbnz	r3, 801aaa8 <_free_r+0x2c>
 801aa9a:	6063      	str	r3, [r4, #4]
 801aa9c:	6014      	str	r4, [r2, #0]
 801aa9e:	4628      	mov	r0, r5
 801aaa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aaa4:	f7ff bf68 	b.w	801a978 <__malloc_unlock>
 801aaa8:	42a3      	cmp	r3, r4
 801aaaa:	d908      	bls.n	801aabe <_free_r+0x42>
 801aaac:	6820      	ldr	r0, [r4, #0]
 801aaae:	1821      	adds	r1, r4, r0
 801aab0:	428b      	cmp	r3, r1
 801aab2:	bf01      	itttt	eq
 801aab4:	6819      	ldreq	r1, [r3, #0]
 801aab6:	685b      	ldreq	r3, [r3, #4]
 801aab8:	1809      	addeq	r1, r1, r0
 801aaba:	6021      	streq	r1, [r4, #0]
 801aabc:	e7ed      	b.n	801aa9a <_free_r+0x1e>
 801aabe:	461a      	mov	r2, r3
 801aac0:	685b      	ldr	r3, [r3, #4]
 801aac2:	b10b      	cbz	r3, 801aac8 <_free_r+0x4c>
 801aac4:	42a3      	cmp	r3, r4
 801aac6:	d9fa      	bls.n	801aabe <_free_r+0x42>
 801aac8:	6811      	ldr	r1, [r2, #0]
 801aaca:	1850      	adds	r0, r2, r1
 801aacc:	42a0      	cmp	r0, r4
 801aace:	d10b      	bne.n	801aae8 <_free_r+0x6c>
 801aad0:	6820      	ldr	r0, [r4, #0]
 801aad2:	4401      	add	r1, r0
 801aad4:	1850      	adds	r0, r2, r1
 801aad6:	4283      	cmp	r3, r0
 801aad8:	6011      	str	r1, [r2, #0]
 801aada:	d1e0      	bne.n	801aa9e <_free_r+0x22>
 801aadc:	6818      	ldr	r0, [r3, #0]
 801aade:	685b      	ldr	r3, [r3, #4]
 801aae0:	6053      	str	r3, [r2, #4]
 801aae2:	4408      	add	r0, r1
 801aae4:	6010      	str	r0, [r2, #0]
 801aae6:	e7da      	b.n	801aa9e <_free_r+0x22>
 801aae8:	d902      	bls.n	801aaf0 <_free_r+0x74>
 801aaea:	230c      	movs	r3, #12
 801aaec:	602b      	str	r3, [r5, #0]
 801aaee:	e7d6      	b.n	801aa9e <_free_r+0x22>
 801aaf0:	6820      	ldr	r0, [r4, #0]
 801aaf2:	1821      	adds	r1, r4, r0
 801aaf4:	428b      	cmp	r3, r1
 801aaf6:	bf04      	itt	eq
 801aaf8:	6819      	ldreq	r1, [r3, #0]
 801aafa:	685b      	ldreq	r3, [r3, #4]
 801aafc:	6063      	str	r3, [r4, #4]
 801aafe:	bf04      	itt	eq
 801ab00:	1809      	addeq	r1, r1, r0
 801ab02:	6021      	streq	r1, [r4, #0]
 801ab04:	6054      	str	r4, [r2, #4]
 801ab06:	e7ca      	b.n	801aa9e <_free_r+0x22>
 801ab08:	bd38      	pop	{r3, r4, r5, pc}
 801ab0a:	bf00      	nop
 801ab0c:	24048cdc 	.word	0x24048cdc

0801ab10 <__ssputs_r>:
 801ab10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab14:	688e      	ldr	r6, [r1, #8]
 801ab16:	461f      	mov	r7, r3
 801ab18:	42be      	cmp	r6, r7
 801ab1a:	680b      	ldr	r3, [r1, #0]
 801ab1c:	4682      	mov	sl, r0
 801ab1e:	460c      	mov	r4, r1
 801ab20:	4690      	mov	r8, r2
 801ab22:	d82d      	bhi.n	801ab80 <__ssputs_r+0x70>
 801ab24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ab28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ab2c:	d026      	beq.n	801ab7c <__ssputs_r+0x6c>
 801ab2e:	6965      	ldr	r5, [r4, #20]
 801ab30:	6909      	ldr	r1, [r1, #16]
 801ab32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab36:	eba3 0901 	sub.w	r9, r3, r1
 801ab3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ab3e:	1c7b      	adds	r3, r7, #1
 801ab40:	444b      	add	r3, r9
 801ab42:	106d      	asrs	r5, r5, #1
 801ab44:	429d      	cmp	r5, r3
 801ab46:	bf38      	it	cc
 801ab48:	461d      	movcc	r5, r3
 801ab4a:	0553      	lsls	r3, r2, #21
 801ab4c:	d527      	bpl.n	801ab9e <__ssputs_r+0x8e>
 801ab4e:	4629      	mov	r1, r5
 801ab50:	f7ff fe8c 	bl	801a86c <_malloc_r>
 801ab54:	4606      	mov	r6, r0
 801ab56:	b360      	cbz	r0, 801abb2 <__ssputs_r+0xa2>
 801ab58:	6921      	ldr	r1, [r4, #16]
 801ab5a:	464a      	mov	r2, r9
 801ab5c:	f7ff ff80 	bl	801aa60 <memcpy>
 801ab60:	89a3      	ldrh	r3, [r4, #12]
 801ab62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ab66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ab6a:	81a3      	strh	r3, [r4, #12]
 801ab6c:	6126      	str	r6, [r4, #16]
 801ab6e:	6165      	str	r5, [r4, #20]
 801ab70:	444e      	add	r6, r9
 801ab72:	eba5 0509 	sub.w	r5, r5, r9
 801ab76:	6026      	str	r6, [r4, #0]
 801ab78:	60a5      	str	r5, [r4, #8]
 801ab7a:	463e      	mov	r6, r7
 801ab7c:	42be      	cmp	r6, r7
 801ab7e:	d900      	bls.n	801ab82 <__ssputs_r+0x72>
 801ab80:	463e      	mov	r6, r7
 801ab82:	6820      	ldr	r0, [r4, #0]
 801ab84:	4632      	mov	r2, r6
 801ab86:	4641      	mov	r1, r8
 801ab88:	f000 faa6 	bl	801b0d8 <memmove>
 801ab8c:	68a3      	ldr	r3, [r4, #8]
 801ab8e:	1b9b      	subs	r3, r3, r6
 801ab90:	60a3      	str	r3, [r4, #8]
 801ab92:	6823      	ldr	r3, [r4, #0]
 801ab94:	4433      	add	r3, r6
 801ab96:	6023      	str	r3, [r4, #0]
 801ab98:	2000      	movs	r0, #0
 801ab9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab9e:	462a      	mov	r2, r5
 801aba0:	f000 fab4 	bl	801b10c <_realloc_r>
 801aba4:	4606      	mov	r6, r0
 801aba6:	2800      	cmp	r0, #0
 801aba8:	d1e0      	bne.n	801ab6c <__ssputs_r+0x5c>
 801abaa:	6921      	ldr	r1, [r4, #16]
 801abac:	4650      	mov	r0, sl
 801abae:	f7ff ff65 	bl	801aa7c <_free_r>
 801abb2:	230c      	movs	r3, #12
 801abb4:	f8ca 3000 	str.w	r3, [sl]
 801abb8:	89a3      	ldrh	r3, [r4, #12]
 801abba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801abbe:	81a3      	strh	r3, [r4, #12]
 801abc0:	f04f 30ff 	mov.w	r0, #4294967295
 801abc4:	e7e9      	b.n	801ab9a <__ssputs_r+0x8a>
	...

0801abc8 <_svfiprintf_r>:
 801abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abcc:	4698      	mov	r8, r3
 801abce:	898b      	ldrh	r3, [r1, #12]
 801abd0:	061b      	lsls	r3, r3, #24
 801abd2:	b09d      	sub	sp, #116	@ 0x74
 801abd4:	4607      	mov	r7, r0
 801abd6:	460d      	mov	r5, r1
 801abd8:	4614      	mov	r4, r2
 801abda:	d510      	bpl.n	801abfe <_svfiprintf_r+0x36>
 801abdc:	690b      	ldr	r3, [r1, #16]
 801abde:	b973      	cbnz	r3, 801abfe <_svfiprintf_r+0x36>
 801abe0:	2140      	movs	r1, #64	@ 0x40
 801abe2:	f7ff fe43 	bl	801a86c <_malloc_r>
 801abe6:	6028      	str	r0, [r5, #0]
 801abe8:	6128      	str	r0, [r5, #16]
 801abea:	b930      	cbnz	r0, 801abfa <_svfiprintf_r+0x32>
 801abec:	230c      	movs	r3, #12
 801abee:	603b      	str	r3, [r7, #0]
 801abf0:	f04f 30ff 	mov.w	r0, #4294967295
 801abf4:	b01d      	add	sp, #116	@ 0x74
 801abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abfa:	2340      	movs	r3, #64	@ 0x40
 801abfc:	616b      	str	r3, [r5, #20]
 801abfe:	2300      	movs	r3, #0
 801ac00:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac02:	2320      	movs	r3, #32
 801ac04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ac08:	f8cd 800c 	str.w	r8, [sp, #12]
 801ac0c:	2330      	movs	r3, #48	@ 0x30
 801ac0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801adac <_svfiprintf_r+0x1e4>
 801ac12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ac16:	f04f 0901 	mov.w	r9, #1
 801ac1a:	4623      	mov	r3, r4
 801ac1c:	469a      	mov	sl, r3
 801ac1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac22:	b10a      	cbz	r2, 801ac28 <_svfiprintf_r+0x60>
 801ac24:	2a25      	cmp	r2, #37	@ 0x25
 801ac26:	d1f9      	bne.n	801ac1c <_svfiprintf_r+0x54>
 801ac28:	ebba 0b04 	subs.w	fp, sl, r4
 801ac2c:	d00b      	beq.n	801ac46 <_svfiprintf_r+0x7e>
 801ac2e:	465b      	mov	r3, fp
 801ac30:	4622      	mov	r2, r4
 801ac32:	4629      	mov	r1, r5
 801ac34:	4638      	mov	r0, r7
 801ac36:	f7ff ff6b 	bl	801ab10 <__ssputs_r>
 801ac3a:	3001      	adds	r0, #1
 801ac3c:	f000 80a7 	beq.w	801ad8e <_svfiprintf_r+0x1c6>
 801ac40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac42:	445a      	add	r2, fp
 801ac44:	9209      	str	r2, [sp, #36]	@ 0x24
 801ac46:	f89a 3000 	ldrb.w	r3, [sl]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	f000 809f 	beq.w	801ad8e <_svfiprintf_r+0x1c6>
 801ac50:	2300      	movs	r3, #0
 801ac52:	f04f 32ff 	mov.w	r2, #4294967295
 801ac56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac5a:	f10a 0a01 	add.w	sl, sl, #1
 801ac5e:	9304      	str	r3, [sp, #16]
 801ac60:	9307      	str	r3, [sp, #28]
 801ac62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ac66:	931a      	str	r3, [sp, #104]	@ 0x68
 801ac68:	4654      	mov	r4, sl
 801ac6a:	2205      	movs	r2, #5
 801ac6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac70:	484e      	ldr	r0, [pc, #312]	@ (801adac <_svfiprintf_r+0x1e4>)
 801ac72:	f7e5 fb3d 	bl	80002f0 <memchr>
 801ac76:	9a04      	ldr	r2, [sp, #16]
 801ac78:	b9d8      	cbnz	r0, 801acb2 <_svfiprintf_r+0xea>
 801ac7a:	06d0      	lsls	r0, r2, #27
 801ac7c:	bf44      	itt	mi
 801ac7e:	2320      	movmi	r3, #32
 801ac80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac84:	0711      	lsls	r1, r2, #28
 801ac86:	bf44      	itt	mi
 801ac88:	232b      	movmi	r3, #43	@ 0x2b
 801ac8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac8e:	f89a 3000 	ldrb.w	r3, [sl]
 801ac92:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac94:	d015      	beq.n	801acc2 <_svfiprintf_r+0xfa>
 801ac96:	9a07      	ldr	r2, [sp, #28]
 801ac98:	4654      	mov	r4, sl
 801ac9a:	2000      	movs	r0, #0
 801ac9c:	f04f 0c0a 	mov.w	ip, #10
 801aca0:	4621      	mov	r1, r4
 801aca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aca6:	3b30      	subs	r3, #48	@ 0x30
 801aca8:	2b09      	cmp	r3, #9
 801acaa:	d94b      	bls.n	801ad44 <_svfiprintf_r+0x17c>
 801acac:	b1b0      	cbz	r0, 801acdc <_svfiprintf_r+0x114>
 801acae:	9207      	str	r2, [sp, #28]
 801acb0:	e014      	b.n	801acdc <_svfiprintf_r+0x114>
 801acb2:	eba0 0308 	sub.w	r3, r0, r8
 801acb6:	fa09 f303 	lsl.w	r3, r9, r3
 801acba:	4313      	orrs	r3, r2
 801acbc:	9304      	str	r3, [sp, #16]
 801acbe:	46a2      	mov	sl, r4
 801acc0:	e7d2      	b.n	801ac68 <_svfiprintf_r+0xa0>
 801acc2:	9b03      	ldr	r3, [sp, #12]
 801acc4:	1d19      	adds	r1, r3, #4
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	9103      	str	r1, [sp, #12]
 801acca:	2b00      	cmp	r3, #0
 801accc:	bfbb      	ittet	lt
 801acce:	425b      	neglt	r3, r3
 801acd0:	f042 0202 	orrlt.w	r2, r2, #2
 801acd4:	9307      	strge	r3, [sp, #28]
 801acd6:	9307      	strlt	r3, [sp, #28]
 801acd8:	bfb8      	it	lt
 801acda:	9204      	strlt	r2, [sp, #16]
 801acdc:	7823      	ldrb	r3, [r4, #0]
 801acde:	2b2e      	cmp	r3, #46	@ 0x2e
 801ace0:	d10a      	bne.n	801acf8 <_svfiprintf_r+0x130>
 801ace2:	7863      	ldrb	r3, [r4, #1]
 801ace4:	2b2a      	cmp	r3, #42	@ 0x2a
 801ace6:	d132      	bne.n	801ad4e <_svfiprintf_r+0x186>
 801ace8:	9b03      	ldr	r3, [sp, #12]
 801acea:	1d1a      	adds	r2, r3, #4
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	9203      	str	r2, [sp, #12]
 801acf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801acf4:	3402      	adds	r4, #2
 801acf6:	9305      	str	r3, [sp, #20]
 801acf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801adbc <_svfiprintf_r+0x1f4>
 801acfc:	7821      	ldrb	r1, [r4, #0]
 801acfe:	2203      	movs	r2, #3
 801ad00:	4650      	mov	r0, sl
 801ad02:	f7e5 faf5 	bl	80002f0 <memchr>
 801ad06:	b138      	cbz	r0, 801ad18 <_svfiprintf_r+0x150>
 801ad08:	9b04      	ldr	r3, [sp, #16]
 801ad0a:	eba0 000a 	sub.w	r0, r0, sl
 801ad0e:	2240      	movs	r2, #64	@ 0x40
 801ad10:	4082      	lsls	r2, r0
 801ad12:	4313      	orrs	r3, r2
 801ad14:	3401      	adds	r4, #1
 801ad16:	9304      	str	r3, [sp, #16]
 801ad18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad1c:	4824      	ldr	r0, [pc, #144]	@ (801adb0 <_svfiprintf_r+0x1e8>)
 801ad1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ad22:	2206      	movs	r2, #6
 801ad24:	f7e5 fae4 	bl	80002f0 <memchr>
 801ad28:	2800      	cmp	r0, #0
 801ad2a:	d036      	beq.n	801ad9a <_svfiprintf_r+0x1d2>
 801ad2c:	4b21      	ldr	r3, [pc, #132]	@ (801adb4 <_svfiprintf_r+0x1ec>)
 801ad2e:	bb1b      	cbnz	r3, 801ad78 <_svfiprintf_r+0x1b0>
 801ad30:	9b03      	ldr	r3, [sp, #12]
 801ad32:	3307      	adds	r3, #7
 801ad34:	f023 0307 	bic.w	r3, r3, #7
 801ad38:	3308      	adds	r3, #8
 801ad3a:	9303      	str	r3, [sp, #12]
 801ad3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad3e:	4433      	add	r3, r6
 801ad40:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad42:	e76a      	b.n	801ac1a <_svfiprintf_r+0x52>
 801ad44:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad48:	460c      	mov	r4, r1
 801ad4a:	2001      	movs	r0, #1
 801ad4c:	e7a8      	b.n	801aca0 <_svfiprintf_r+0xd8>
 801ad4e:	2300      	movs	r3, #0
 801ad50:	3401      	adds	r4, #1
 801ad52:	9305      	str	r3, [sp, #20]
 801ad54:	4619      	mov	r1, r3
 801ad56:	f04f 0c0a 	mov.w	ip, #10
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad60:	3a30      	subs	r2, #48	@ 0x30
 801ad62:	2a09      	cmp	r2, #9
 801ad64:	d903      	bls.n	801ad6e <_svfiprintf_r+0x1a6>
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d0c6      	beq.n	801acf8 <_svfiprintf_r+0x130>
 801ad6a:	9105      	str	r1, [sp, #20]
 801ad6c:	e7c4      	b.n	801acf8 <_svfiprintf_r+0x130>
 801ad6e:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad72:	4604      	mov	r4, r0
 801ad74:	2301      	movs	r3, #1
 801ad76:	e7f0      	b.n	801ad5a <_svfiprintf_r+0x192>
 801ad78:	ab03      	add	r3, sp, #12
 801ad7a:	9300      	str	r3, [sp, #0]
 801ad7c:	462a      	mov	r2, r5
 801ad7e:	4b0e      	ldr	r3, [pc, #56]	@ (801adb8 <_svfiprintf_r+0x1f0>)
 801ad80:	a904      	add	r1, sp, #16
 801ad82:	4638      	mov	r0, r7
 801ad84:	f3af 8000 	nop.w
 801ad88:	1c42      	adds	r2, r0, #1
 801ad8a:	4606      	mov	r6, r0
 801ad8c:	d1d6      	bne.n	801ad3c <_svfiprintf_r+0x174>
 801ad8e:	89ab      	ldrh	r3, [r5, #12]
 801ad90:	065b      	lsls	r3, r3, #25
 801ad92:	f53f af2d 	bmi.w	801abf0 <_svfiprintf_r+0x28>
 801ad96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ad98:	e72c      	b.n	801abf4 <_svfiprintf_r+0x2c>
 801ad9a:	ab03      	add	r3, sp, #12
 801ad9c:	9300      	str	r3, [sp, #0]
 801ad9e:	462a      	mov	r2, r5
 801ada0:	4b05      	ldr	r3, [pc, #20]	@ (801adb8 <_svfiprintf_r+0x1f0>)
 801ada2:	a904      	add	r1, sp, #16
 801ada4:	4638      	mov	r0, r7
 801ada6:	f000 f879 	bl	801ae9c <_printf_i>
 801adaa:	e7ed      	b.n	801ad88 <_svfiprintf_r+0x1c0>
 801adac:	0801b95c 	.word	0x0801b95c
 801adb0:	0801b966 	.word	0x0801b966
 801adb4:	00000000 	.word	0x00000000
 801adb8:	0801ab11 	.word	0x0801ab11
 801adbc:	0801b962 	.word	0x0801b962

0801adc0 <_printf_common>:
 801adc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801adc4:	4616      	mov	r6, r2
 801adc6:	4698      	mov	r8, r3
 801adc8:	688a      	ldr	r2, [r1, #8]
 801adca:	690b      	ldr	r3, [r1, #16]
 801adcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801add0:	4293      	cmp	r3, r2
 801add2:	bfb8      	it	lt
 801add4:	4613      	movlt	r3, r2
 801add6:	6033      	str	r3, [r6, #0]
 801add8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801addc:	4607      	mov	r7, r0
 801adde:	460c      	mov	r4, r1
 801ade0:	b10a      	cbz	r2, 801ade6 <_printf_common+0x26>
 801ade2:	3301      	adds	r3, #1
 801ade4:	6033      	str	r3, [r6, #0]
 801ade6:	6823      	ldr	r3, [r4, #0]
 801ade8:	0699      	lsls	r1, r3, #26
 801adea:	bf42      	ittt	mi
 801adec:	6833      	ldrmi	r3, [r6, #0]
 801adee:	3302      	addmi	r3, #2
 801adf0:	6033      	strmi	r3, [r6, #0]
 801adf2:	6825      	ldr	r5, [r4, #0]
 801adf4:	f015 0506 	ands.w	r5, r5, #6
 801adf8:	d106      	bne.n	801ae08 <_printf_common+0x48>
 801adfa:	f104 0a19 	add.w	sl, r4, #25
 801adfe:	68e3      	ldr	r3, [r4, #12]
 801ae00:	6832      	ldr	r2, [r6, #0]
 801ae02:	1a9b      	subs	r3, r3, r2
 801ae04:	42ab      	cmp	r3, r5
 801ae06:	dc26      	bgt.n	801ae56 <_printf_common+0x96>
 801ae08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ae0c:	6822      	ldr	r2, [r4, #0]
 801ae0e:	3b00      	subs	r3, #0
 801ae10:	bf18      	it	ne
 801ae12:	2301      	movne	r3, #1
 801ae14:	0692      	lsls	r2, r2, #26
 801ae16:	d42b      	bmi.n	801ae70 <_printf_common+0xb0>
 801ae18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ae1c:	4641      	mov	r1, r8
 801ae1e:	4638      	mov	r0, r7
 801ae20:	47c8      	blx	r9
 801ae22:	3001      	adds	r0, #1
 801ae24:	d01e      	beq.n	801ae64 <_printf_common+0xa4>
 801ae26:	6823      	ldr	r3, [r4, #0]
 801ae28:	6922      	ldr	r2, [r4, #16]
 801ae2a:	f003 0306 	and.w	r3, r3, #6
 801ae2e:	2b04      	cmp	r3, #4
 801ae30:	bf02      	ittt	eq
 801ae32:	68e5      	ldreq	r5, [r4, #12]
 801ae34:	6833      	ldreq	r3, [r6, #0]
 801ae36:	1aed      	subeq	r5, r5, r3
 801ae38:	68a3      	ldr	r3, [r4, #8]
 801ae3a:	bf0c      	ite	eq
 801ae3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae40:	2500      	movne	r5, #0
 801ae42:	4293      	cmp	r3, r2
 801ae44:	bfc4      	itt	gt
 801ae46:	1a9b      	subgt	r3, r3, r2
 801ae48:	18ed      	addgt	r5, r5, r3
 801ae4a:	2600      	movs	r6, #0
 801ae4c:	341a      	adds	r4, #26
 801ae4e:	42b5      	cmp	r5, r6
 801ae50:	d11a      	bne.n	801ae88 <_printf_common+0xc8>
 801ae52:	2000      	movs	r0, #0
 801ae54:	e008      	b.n	801ae68 <_printf_common+0xa8>
 801ae56:	2301      	movs	r3, #1
 801ae58:	4652      	mov	r2, sl
 801ae5a:	4641      	mov	r1, r8
 801ae5c:	4638      	mov	r0, r7
 801ae5e:	47c8      	blx	r9
 801ae60:	3001      	adds	r0, #1
 801ae62:	d103      	bne.n	801ae6c <_printf_common+0xac>
 801ae64:	f04f 30ff 	mov.w	r0, #4294967295
 801ae68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae6c:	3501      	adds	r5, #1
 801ae6e:	e7c6      	b.n	801adfe <_printf_common+0x3e>
 801ae70:	18e1      	adds	r1, r4, r3
 801ae72:	1c5a      	adds	r2, r3, #1
 801ae74:	2030      	movs	r0, #48	@ 0x30
 801ae76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ae7a:	4422      	add	r2, r4
 801ae7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ae80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ae84:	3302      	adds	r3, #2
 801ae86:	e7c7      	b.n	801ae18 <_printf_common+0x58>
 801ae88:	2301      	movs	r3, #1
 801ae8a:	4622      	mov	r2, r4
 801ae8c:	4641      	mov	r1, r8
 801ae8e:	4638      	mov	r0, r7
 801ae90:	47c8      	blx	r9
 801ae92:	3001      	adds	r0, #1
 801ae94:	d0e6      	beq.n	801ae64 <_printf_common+0xa4>
 801ae96:	3601      	adds	r6, #1
 801ae98:	e7d9      	b.n	801ae4e <_printf_common+0x8e>
	...

0801ae9c <_printf_i>:
 801ae9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aea0:	7e0f      	ldrb	r7, [r1, #24]
 801aea2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aea4:	2f78      	cmp	r7, #120	@ 0x78
 801aea6:	4691      	mov	r9, r2
 801aea8:	4680      	mov	r8, r0
 801aeaa:	460c      	mov	r4, r1
 801aeac:	469a      	mov	sl, r3
 801aeae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aeb2:	d807      	bhi.n	801aec4 <_printf_i+0x28>
 801aeb4:	2f62      	cmp	r7, #98	@ 0x62
 801aeb6:	d80a      	bhi.n	801aece <_printf_i+0x32>
 801aeb8:	2f00      	cmp	r7, #0
 801aeba:	f000 80d1 	beq.w	801b060 <_printf_i+0x1c4>
 801aebe:	2f58      	cmp	r7, #88	@ 0x58
 801aec0:	f000 80b8 	beq.w	801b034 <_printf_i+0x198>
 801aec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aec8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aecc:	e03a      	b.n	801af44 <_printf_i+0xa8>
 801aece:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aed2:	2b15      	cmp	r3, #21
 801aed4:	d8f6      	bhi.n	801aec4 <_printf_i+0x28>
 801aed6:	a101      	add	r1, pc, #4	@ (adr r1, 801aedc <_printf_i+0x40>)
 801aed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aedc:	0801af35 	.word	0x0801af35
 801aee0:	0801af49 	.word	0x0801af49
 801aee4:	0801aec5 	.word	0x0801aec5
 801aee8:	0801aec5 	.word	0x0801aec5
 801aeec:	0801aec5 	.word	0x0801aec5
 801aef0:	0801aec5 	.word	0x0801aec5
 801aef4:	0801af49 	.word	0x0801af49
 801aef8:	0801aec5 	.word	0x0801aec5
 801aefc:	0801aec5 	.word	0x0801aec5
 801af00:	0801aec5 	.word	0x0801aec5
 801af04:	0801aec5 	.word	0x0801aec5
 801af08:	0801b047 	.word	0x0801b047
 801af0c:	0801af73 	.word	0x0801af73
 801af10:	0801b001 	.word	0x0801b001
 801af14:	0801aec5 	.word	0x0801aec5
 801af18:	0801aec5 	.word	0x0801aec5
 801af1c:	0801b069 	.word	0x0801b069
 801af20:	0801aec5 	.word	0x0801aec5
 801af24:	0801af73 	.word	0x0801af73
 801af28:	0801aec5 	.word	0x0801aec5
 801af2c:	0801aec5 	.word	0x0801aec5
 801af30:	0801b009 	.word	0x0801b009
 801af34:	6833      	ldr	r3, [r6, #0]
 801af36:	1d1a      	adds	r2, r3, #4
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	6032      	str	r2, [r6, #0]
 801af3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801af40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801af44:	2301      	movs	r3, #1
 801af46:	e09c      	b.n	801b082 <_printf_i+0x1e6>
 801af48:	6833      	ldr	r3, [r6, #0]
 801af4a:	6820      	ldr	r0, [r4, #0]
 801af4c:	1d19      	adds	r1, r3, #4
 801af4e:	6031      	str	r1, [r6, #0]
 801af50:	0606      	lsls	r6, r0, #24
 801af52:	d501      	bpl.n	801af58 <_printf_i+0xbc>
 801af54:	681d      	ldr	r5, [r3, #0]
 801af56:	e003      	b.n	801af60 <_printf_i+0xc4>
 801af58:	0645      	lsls	r5, r0, #25
 801af5a:	d5fb      	bpl.n	801af54 <_printf_i+0xb8>
 801af5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801af60:	2d00      	cmp	r5, #0
 801af62:	da03      	bge.n	801af6c <_printf_i+0xd0>
 801af64:	232d      	movs	r3, #45	@ 0x2d
 801af66:	426d      	negs	r5, r5
 801af68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801af6c:	4858      	ldr	r0, [pc, #352]	@ (801b0d0 <_printf_i+0x234>)
 801af6e:	230a      	movs	r3, #10
 801af70:	e011      	b.n	801af96 <_printf_i+0xfa>
 801af72:	6821      	ldr	r1, [r4, #0]
 801af74:	6833      	ldr	r3, [r6, #0]
 801af76:	0608      	lsls	r0, r1, #24
 801af78:	f853 5b04 	ldr.w	r5, [r3], #4
 801af7c:	d402      	bmi.n	801af84 <_printf_i+0xe8>
 801af7e:	0649      	lsls	r1, r1, #25
 801af80:	bf48      	it	mi
 801af82:	b2ad      	uxthmi	r5, r5
 801af84:	2f6f      	cmp	r7, #111	@ 0x6f
 801af86:	4852      	ldr	r0, [pc, #328]	@ (801b0d0 <_printf_i+0x234>)
 801af88:	6033      	str	r3, [r6, #0]
 801af8a:	bf14      	ite	ne
 801af8c:	230a      	movne	r3, #10
 801af8e:	2308      	moveq	r3, #8
 801af90:	2100      	movs	r1, #0
 801af92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801af96:	6866      	ldr	r6, [r4, #4]
 801af98:	60a6      	str	r6, [r4, #8]
 801af9a:	2e00      	cmp	r6, #0
 801af9c:	db05      	blt.n	801afaa <_printf_i+0x10e>
 801af9e:	6821      	ldr	r1, [r4, #0]
 801afa0:	432e      	orrs	r6, r5
 801afa2:	f021 0104 	bic.w	r1, r1, #4
 801afa6:	6021      	str	r1, [r4, #0]
 801afa8:	d04b      	beq.n	801b042 <_printf_i+0x1a6>
 801afaa:	4616      	mov	r6, r2
 801afac:	fbb5 f1f3 	udiv	r1, r5, r3
 801afb0:	fb03 5711 	mls	r7, r3, r1, r5
 801afb4:	5dc7      	ldrb	r7, [r0, r7]
 801afb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801afba:	462f      	mov	r7, r5
 801afbc:	42bb      	cmp	r3, r7
 801afbe:	460d      	mov	r5, r1
 801afc0:	d9f4      	bls.n	801afac <_printf_i+0x110>
 801afc2:	2b08      	cmp	r3, #8
 801afc4:	d10b      	bne.n	801afde <_printf_i+0x142>
 801afc6:	6823      	ldr	r3, [r4, #0]
 801afc8:	07df      	lsls	r7, r3, #31
 801afca:	d508      	bpl.n	801afde <_printf_i+0x142>
 801afcc:	6923      	ldr	r3, [r4, #16]
 801afce:	6861      	ldr	r1, [r4, #4]
 801afd0:	4299      	cmp	r1, r3
 801afd2:	bfde      	ittt	le
 801afd4:	2330      	movle	r3, #48	@ 0x30
 801afd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 801afda:	f106 36ff 	addle.w	r6, r6, #4294967295
 801afde:	1b92      	subs	r2, r2, r6
 801afe0:	6122      	str	r2, [r4, #16]
 801afe2:	f8cd a000 	str.w	sl, [sp]
 801afe6:	464b      	mov	r3, r9
 801afe8:	aa03      	add	r2, sp, #12
 801afea:	4621      	mov	r1, r4
 801afec:	4640      	mov	r0, r8
 801afee:	f7ff fee7 	bl	801adc0 <_printf_common>
 801aff2:	3001      	adds	r0, #1
 801aff4:	d14a      	bne.n	801b08c <_printf_i+0x1f0>
 801aff6:	f04f 30ff 	mov.w	r0, #4294967295
 801affa:	b004      	add	sp, #16
 801affc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b000:	6823      	ldr	r3, [r4, #0]
 801b002:	f043 0320 	orr.w	r3, r3, #32
 801b006:	6023      	str	r3, [r4, #0]
 801b008:	4832      	ldr	r0, [pc, #200]	@ (801b0d4 <_printf_i+0x238>)
 801b00a:	2778      	movs	r7, #120	@ 0x78
 801b00c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b010:	6823      	ldr	r3, [r4, #0]
 801b012:	6831      	ldr	r1, [r6, #0]
 801b014:	061f      	lsls	r7, r3, #24
 801b016:	f851 5b04 	ldr.w	r5, [r1], #4
 801b01a:	d402      	bmi.n	801b022 <_printf_i+0x186>
 801b01c:	065f      	lsls	r7, r3, #25
 801b01e:	bf48      	it	mi
 801b020:	b2ad      	uxthmi	r5, r5
 801b022:	6031      	str	r1, [r6, #0]
 801b024:	07d9      	lsls	r1, r3, #31
 801b026:	bf44      	itt	mi
 801b028:	f043 0320 	orrmi.w	r3, r3, #32
 801b02c:	6023      	strmi	r3, [r4, #0]
 801b02e:	b11d      	cbz	r5, 801b038 <_printf_i+0x19c>
 801b030:	2310      	movs	r3, #16
 801b032:	e7ad      	b.n	801af90 <_printf_i+0xf4>
 801b034:	4826      	ldr	r0, [pc, #152]	@ (801b0d0 <_printf_i+0x234>)
 801b036:	e7e9      	b.n	801b00c <_printf_i+0x170>
 801b038:	6823      	ldr	r3, [r4, #0]
 801b03a:	f023 0320 	bic.w	r3, r3, #32
 801b03e:	6023      	str	r3, [r4, #0]
 801b040:	e7f6      	b.n	801b030 <_printf_i+0x194>
 801b042:	4616      	mov	r6, r2
 801b044:	e7bd      	b.n	801afc2 <_printf_i+0x126>
 801b046:	6833      	ldr	r3, [r6, #0]
 801b048:	6825      	ldr	r5, [r4, #0]
 801b04a:	6961      	ldr	r1, [r4, #20]
 801b04c:	1d18      	adds	r0, r3, #4
 801b04e:	6030      	str	r0, [r6, #0]
 801b050:	062e      	lsls	r6, r5, #24
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	d501      	bpl.n	801b05a <_printf_i+0x1be>
 801b056:	6019      	str	r1, [r3, #0]
 801b058:	e002      	b.n	801b060 <_printf_i+0x1c4>
 801b05a:	0668      	lsls	r0, r5, #25
 801b05c:	d5fb      	bpl.n	801b056 <_printf_i+0x1ba>
 801b05e:	8019      	strh	r1, [r3, #0]
 801b060:	2300      	movs	r3, #0
 801b062:	6123      	str	r3, [r4, #16]
 801b064:	4616      	mov	r6, r2
 801b066:	e7bc      	b.n	801afe2 <_printf_i+0x146>
 801b068:	6833      	ldr	r3, [r6, #0]
 801b06a:	1d1a      	adds	r2, r3, #4
 801b06c:	6032      	str	r2, [r6, #0]
 801b06e:	681e      	ldr	r6, [r3, #0]
 801b070:	6862      	ldr	r2, [r4, #4]
 801b072:	2100      	movs	r1, #0
 801b074:	4630      	mov	r0, r6
 801b076:	f7e5 f93b 	bl	80002f0 <memchr>
 801b07a:	b108      	cbz	r0, 801b080 <_printf_i+0x1e4>
 801b07c:	1b80      	subs	r0, r0, r6
 801b07e:	6060      	str	r0, [r4, #4]
 801b080:	6863      	ldr	r3, [r4, #4]
 801b082:	6123      	str	r3, [r4, #16]
 801b084:	2300      	movs	r3, #0
 801b086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b08a:	e7aa      	b.n	801afe2 <_printf_i+0x146>
 801b08c:	6923      	ldr	r3, [r4, #16]
 801b08e:	4632      	mov	r2, r6
 801b090:	4649      	mov	r1, r9
 801b092:	4640      	mov	r0, r8
 801b094:	47d0      	blx	sl
 801b096:	3001      	adds	r0, #1
 801b098:	d0ad      	beq.n	801aff6 <_printf_i+0x15a>
 801b09a:	6823      	ldr	r3, [r4, #0]
 801b09c:	079b      	lsls	r3, r3, #30
 801b09e:	d413      	bmi.n	801b0c8 <_printf_i+0x22c>
 801b0a0:	68e0      	ldr	r0, [r4, #12]
 801b0a2:	9b03      	ldr	r3, [sp, #12]
 801b0a4:	4298      	cmp	r0, r3
 801b0a6:	bfb8      	it	lt
 801b0a8:	4618      	movlt	r0, r3
 801b0aa:	e7a6      	b.n	801affa <_printf_i+0x15e>
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	4632      	mov	r2, r6
 801b0b0:	4649      	mov	r1, r9
 801b0b2:	4640      	mov	r0, r8
 801b0b4:	47d0      	blx	sl
 801b0b6:	3001      	adds	r0, #1
 801b0b8:	d09d      	beq.n	801aff6 <_printf_i+0x15a>
 801b0ba:	3501      	adds	r5, #1
 801b0bc:	68e3      	ldr	r3, [r4, #12]
 801b0be:	9903      	ldr	r1, [sp, #12]
 801b0c0:	1a5b      	subs	r3, r3, r1
 801b0c2:	42ab      	cmp	r3, r5
 801b0c4:	dcf2      	bgt.n	801b0ac <_printf_i+0x210>
 801b0c6:	e7eb      	b.n	801b0a0 <_printf_i+0x204>
 801b0c8:	2500      	movs	r5, #0
 801b0ca:	f104 0619 	add.w	r6, r4, #25
 801b0ce:	e7f5      	b.n	801b0bc <_printf_i+0x220>
 801b0d0:	0801b96d 	.word	0x0801b96d
 801b0d4:	0801b97e 	.word	0x0801b97e

0801b0d8 <memmove>:
 801b0d8:	4288      	cmp	r0, r1
 801b0da:	b510      	push	{r4, lr}
 801b0dc:	eb01 0402 	add.w	r4, r1, r2
 801b0e0:	d902      	bls.n	801b0e8 <memmove+0x10>
 801b0e2:	4284      	cmp	r4, r0
 801b0e4:	4623      	mov	r3, r4
 801b0e6:	d807      	bhi.n	801b0f8 <memmove+0x20>
 801b0e8:	1e43      	subs	r3, r0, #1
 801b0ea:	42a1      	cmp	r1, r4
 801b0ec:	d008      	beq.n	801b100 <memmove+0x28>
 801b0ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b0f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b0f6:	e7f8      	b.n	801b0ea <memmove+0x12>
 801b0f8:	4402      	add	r2, r0
 801b0fa:	4601      	mov	r1, r0
 801b0fc:	428a      	cmp	r2, r1
 801b0fe:	d100      	bne.n	801b102 <memmove+0x2a>
 801b100:	bd10      	pop	{r4, pc}
 801b102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b10a:	e7f7      	b.n	801b0fc <memmove+0x24>

0801b10c <_realloc_r>:
 801b10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b110:	4607      	mov	r7, r0
 801b112:	4614      	mov	r4, r2
 801b114:	460d      	mov	r5, r1
 801b116:	b921      	cbnz	r1, 801b122 <_realloc_r+0x16>
 801b118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b11c:	4611      	mov	r1, r2
 801b11e:	f7ff bba5 	b.w	801a86c <_malloc_r>
 801b122:	b92a      	cbnz	r2, 801b130 <_realloc_r+0x24>
 801b124:	f7ff fcaa 	bl	801aa7c <_free_r>
 801b128:	4625      	mov	r5, r4
 801b12a:	4628      	mov	r0, r5
 801b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b130:	f000 f81a 	bl	801b168 <_malloc_usable_size_r>
 801b134:	4284      	cmp	r4, r0
 801b136:	4606      	mov	r6, r0
 801b138:	d802      	bhi.n	801b140 <_realloc_r+0x34>
 801b13a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b13e:	d8f4      	bhi.n	801b12a <_realloc_r+0x1e>
 801b140:	4621      	mov	r1, r4
 801b142:	4638      	mov	r0, r7
 801b144:	f7ff fb92 	bl	801a86c <_malloc_r>
 801b148:	4680      	mov	r8, r0
 801b14a:	b908      	cbnz	r0, 801b150 <_realloc_r+0x44>
 801b14c:	4645      	mov	r5, r8
 801b14e:	e7ec      	b.n	801b12a <_realloc_r+0x1e>
 801b150:	42b4      	cmp	r4, r6
 801b152:	4622      	mov	r2, r4
 801b154:	4629      	mov	r1, r5
 801b156:	bf28      	it	cs
 801b158:	4632      	movcs	r2, r6
 801b15a:	f7ff fc81 	bl	801aa60 <memcpy>
 801b15e:	4629      	mov	r1, r5
 801b160:	4638      	mov	r0, r7
 801b162:	f7ff fc8b 	bl	801aa7c <_free_r>
 801b166:	e7f1      	b.n	801b14c <_realloc_r+0x40>

0801b168 <_malloc_usable_size_r>:
 801b168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b16c:	1f18      	subs	r0, r3, #4
 801b16e:	2b00      	cmp	r3, #0
 801b170:	bfbc      	itt	lt
 801b172:	580b      	ldrlt	r3, [r1, r0]
 801b174:	18c0      	addlt	r0, r0, r3
 801b176:	4770      	bx	lr

0801b178 <_init>:
 801b178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b17a:	bf00      	nop
 801b17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b17e:	bc08      	pop	{r3}
 801b180:	469e      	mov	lr, r3
 801b182:	4770      	bx	lr

0801b184 <_fini>:
 801b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b186:	bf00      	nop
 801b188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b18a:	bc08      	pop	{r3}
 801b18c:	469e      	mov	lr, r3
 801b18e:	4770      	bx	lr
