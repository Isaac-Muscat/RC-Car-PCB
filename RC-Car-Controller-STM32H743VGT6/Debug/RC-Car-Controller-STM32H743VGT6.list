
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000156dc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0801597c  0801597c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015d04  08015d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015d0c  08015d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015d10  08015d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  08015d14  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b14  24000154  08015e68  00017154  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002c68  08015e68  00017c68  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017154  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f3d9  00000000  00000000  00017182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055be  00000000  00000000  0004655b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023e8  00000000  00000000  0004bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bfd  00000000  00000000  0004df08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ee96  00000000  00000000  0004fb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000329cd  00000000  00000000  0008e99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001844b2  00000000  00000000  000c1368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0024581a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a0d8  00000000  00000000  00245860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  0024f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015964 	.word	0x08015964

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	08015964 	.word	0x08015964

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 fc89 	bl	8000fd8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fa81 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8f5 	bl	80008b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 f96d 	bl	80009ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fbd1 	bl	8000e78 <MX_GPIO_Init>
  MX_MDMA_Init();
 80006d6:	f000 fbaf 	bl	8000e38 <MX_MDMA_Init>
  MX_DMA_Init();
 80006da:	f000 fb7d 	bl	8000dd8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006de:	f000 fb2f 	bl	8000d40 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006e2:	f013 ff4f 	bl	8014584 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 80006e6:	f000 fa9f 	bl	8000c28 <MX_JPEG_Init>
  MX_I2C1_Init();
 80006ea:	f000 fa1d 	bl	8000b28 <MX_I2C1_Init>
  MX_SPI4_Init();
 80006ee:	f000 faaf 	bl	8000c50 <MX_SPI4_Init>
  MX_ADC1_Init();
 80006f2:	f000 f98d 	bl	8000a10 <MX_ADC1_Init>
  MX_TIM14_Init();
 80006f6:	f000 fb01 	bl	8000cfc <MX_TIM14_Init>
  MX_I2C2_Init();
 80006fa:	f000 fa55 	bl	8000ba8 <MX_I2C2_Init>

  //HAL_Delay(3000);

  // ------------------------------------------------------------ SETUP ADC DMA -- //

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fe:	2214      	movs	r2, #20
 8000700:	4962      	ldr	r1, [pc, #392]	@ (800088c <main+0x1d0>)
 8000702:	4863      	ldr	r0, [pc, #396]	@ (8000890 <main+0x1d4>)
 8000704:	f001 fee0 	bl	80024c8 <HAL_ADC_Start_DMA>

  // ------------------------------------------------------------ SETUP SSD1306 -- //

  hssd1.i2c_handle = &hi2c2;
 8000708:	4b62      	ldr	r3, [pc, #392]	@ (8000894 <main+0x1d8>)
 800070a:	4a63      	ldr	r2, [pc, #396]	@ (8000898 <main+0x1dc>)
 800070c:	601a      	str	r2, [r3, #0]
  hssd1.address = OLED_ADDR;
 800070e:	4b61      	ldr	r3, [pc, #388]	@ (8000894 <main+0x1d8>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	711a      	strb	r2, [r3, #4]
  hssd1.vram = ssd1_vram;
 8000714:	4b5f      	ldr	r3, [pc, #380]	@ (8000894 <main+0x1d8>)
 8000716:	4a61      	ldr	r2, [pc, #388]	@ (800089c <main+0x1e0>)
 8000718:	609a      	str	r2, [r3, #8]
  uint8_t ssd_initres = SSD1306_Init(&hssd1);
 800071a:	485e      	ldr	r0, [pc, #376]	@ (8000894 <main+0x1d8>)
 800071c:	f001 f9e6 	bl	8001aec <SSD1306_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	71bb      	strb	r3, [r7, #6]
  if (ssd_initres) {
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d013      	beq.n	8000752 <main+0x96>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", ssd_initres);
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	461a      	mov	r2, r3
 800072e:	495c      	ldr	r1, [pc, #368]	@ (80008a0 <main+0x1e4>)
 8000730:	485c      	ldr	r0, [pc, #368]	@ (80008a4 <main+0x1e8>)
 8000732:	f014 fc77 	bl	8015024 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000736:	485b      	ldr	r0, [pc, #364]	@ (80008a4 <main+0x1e8>)
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	4858      	ldr	r0, [pc, #352]	@ (80008a4 <main+0x1e8>)
 8000742:	f013 ffef 	bl	8014724 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f001 fad1 	bl	8001cf0 <HAL_Delay>
	  while (1) {
 800074e:	bf00      	nop
 8000750:	e7eb      	b.n	800072a <main+0x6e>
	  }
  }

  hssd2.i2c_handle = &hi2c1;
 8000752:	4b55      	ldr	r3, [pc, #340]	@ (80008a8 <main+0x1ec>)
 8000754:	4a55      	ldr	r2, [pc, #340]	@ (80008ac <main+0x1f0>)
 8000756:	601a      	str	r2, [r3, #0]
  hssd2.address = OLED_ADDR;
 8000758:	4b53      	ldr	r3, [pc, #332]	@ (80008a8 <main+0x1ec>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	711a      	strb	r2, [r3, #4]
  hssd2.vram = ssd2_vram;
 800075e:	4b52      	ldr	r3, [pc, #328]	@ (80008a8 <main+0x1ec>)
 8000760:	4a53      	ldr	r2, [pc, #332]	@ (80008b0 <main+0x1f4>)
 8000762:	609a      	str	r2, [r3, #8]
  ssd_initres = SSD1306_Init(&hssd2);
 8000764:	4850      	ldr	r0, [pc, #320]	@ (80008a8 <main+0x1ec>)
 8000766:	f001 f9c1 	bl	8001aec <SSD1306_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	71bb      	strb	r3, [r7, #6]
  if (ssd_initres) {
 800076e:	79bb      	ldrb	r3, [r7, #6]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0xe0>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", ssd_initres);
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	461a      	mov	r2, r3
 8000778:	494e      	ldr	r1, [pc, #312]	@ (80008b4 <main+0x1f8>)
 800077a:	484a      	ldr	r0, [pc, #296]	@ (80008a4 <main+0x1e8>)
 800077c:	f014 fc52 	bl	8015024 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000780:	4848      	ldr	r0, [pc, #288]	@ (80008a4 <main+0x1e8>)
 8000782:	f7ff fdad 	bl	80002e0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	4846      	ldr	r0, [pc, #280]	@ (80008a4 <main+0x1e8>)
 800078c:	f013 ffca 	bl	8014724 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f001 faac 	bl	8001cf0 <HAL_Delay>
	  while (1) {
 8000798:	bf00      	nop
 800079a:	e7eb      	b.n	8000774 <main+0xb8>
	  }
  }

  uint8_t anim_test = 1;
 800079c:	2301      	movs	r3, #1
 800079e:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SSD1306_Clear(&hssd1);
 80007a0:	483c      	ldr	r0, [pc, #240]	@ (8000894 <main+0x1d8>)
 80007a2:	f001 f9e5 	bl	8001b70 <SSD1306_Clear>
	  SSD1306_Clear(&hssd2);
 80007a6:	4840      	ldr	r0, [pc, #256]	@ (80008a8 <main+0x1ec>)
 80007a8:	f001 f9e2 	bl	8001b70 <SSD1306_Clear>
	  ssd1_vram[anim_test        ] = 0xFF;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a3b      	ldr	r2, [pc, #236]	@ (800089c <main+0x1e0>)
 80007b0:	21ff      	movs	r1, #255	@ 0xff
 80007b2:	54d1      	strb	r1, [r2, r3]
	  ssd1_vram[anim_test + 128  ] = 0xFF;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	3380      	adds	r3, #128	@ 0x80
 80007b8:	4a38      	ldr	r2, [pc, #224]	@ (800089c <main+0x1e0>)
 80007ba:	21ff      	movs	r1, #255	@ 0xff
 80007bc:	54d1      	strb	r1, [r2, r3]
	  ssd1_vram[anim_test + 128*2] = 0xFF;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80007c4:	4a35      	ldr	r2, [pc, #212]	@ (800089c <main+0x1e0>)
 80007c6:	21ff      	movs	r1, #255	@ 0xff
 80007c8:	54d1      	strb	r1, [r2, r3]
	  ssd1_vram[anim_test + 128*3] = 0xFF;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80007d0:	4a32      	ldr	r2, [pc, #200]	@ (800089c <main+0x1e0>)
 80007d2:	21ff      	movs	r1, #255	@ 0xff
 80007d4:	54d1      	strb	r1, [r2, r3]
	  ssd1_vram[anim_test + 128*4] = 0xFF;
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80007dc:	4a2f      	ldr	r2, [pc, #188]	@ (800089c <main+0x1e0>)
 80007de:	21ff      	movs	r1, #255	@ 0xff
 80007e0:	54d1      	strb	r1, [r2, r3]
	  ssd1_vram[anim_test + 128*5] = 0xFF;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80007e8:	4a2c      	ldr	r2, [pc, #176]	@ (800089c <main+0x1e0>)
 80007ea:	21ff      	movs	r1, #255	@ 0xff
 80007ec:	54d1      	strb	r1, [r2, r3]
	  ssd1_vram[anim_test + 128*6] = 0xFF;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80007f4:	4a29      	ldr	r2, [pc, #164]	@ (800089c <main+0x1e0>)
 80007f6:	21ff      	movs	r1, #255	@ 0xff
 80007f8:	54d1      	strb	r1, [r2, r3]
	  ssd1_vram[anim_test + 128*7] = 0xFF;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8000800:	4a26      	ldr	r2, [pc, #152]	@ (800089c <main+0x1e0>)
 8000802:	21ff      	movs	r1, #255	@ 0xff
 8000804:	54d1      	strb	r1, [r2, r3]

	  ssd2_vram[128 - anim_test        ] = 0xFF;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800080c:	4a28      	ldr	r2, [pc, #160]	@ (80008b0 <main+0x1f4>)
 800080e:	21ff      	movs	r1, #255	@ 0xff
 8000810:	54d1      	strb	r1, [r2, r3]
	  ssd2_vram[128 - anim_test + 128  ] = 0xFF;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000818:	4a25      	ldr	r2, [pc, #148]	@ (80008b0 <main+0x1f4>)
 800081a:	21ff      	movs	r1, #255	@ 0xff
 800081c:	54d1      	strb	r1, [r2, r3]
	  ssd2_vram[128 - anim_test + 128*2] = 0xFF;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
 8000824:	4a22      	ldr	r2, [pc, #136]	@ (80008b0 <main+0x1f4>)
 8000826:	21ff      	movs	r1, #255	@ 0xff
 8000828:	54d1      	strb	r1, [r2, r3]
	  ssd2_vram[128 - anim_test + 128*3] = 0xFF;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000830:	4a1f      	ldr	r2, [pc, #124]	@ (80008b0 <main+0x1f4>)
 8000832:	21ff      	movs	r1, #255	@ 0xff
 8000834:	54d1      	strb	r1, [r2, r3]
	  ssd2_vram[128 - anim_test + 128*4] = 0xFF;
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	f5c3 7320 	rsb	r3, r3, #640	@ 0x280
 800083c:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <main+0x1f4>)
 800083e:	21ff      	movs	r1, #255	@ 0xff
 8000840:	54d1      	strb	r1, [r2, r3]
	  ssd2_vram[128 - anim_test + 128*5] = 0xFF;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f5c3 7340 	rsb	r3, r3, #768	@ 0x300
 8000848:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <main+0x1f4>)
 800084a:	21ff      	movs	r1, #255	@ 0xff
 800084c:	54d1      	strb	r1, [r2, r3]
	  ssd2_vram[128 - anim_test + 128*6] = 0xFF;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f5c3 7360 	rsb	r3, r3, #896	@ 0x380
 8000854:	4a16      	ldr	r2, [pc, #88]	@ (80008b0 <main+0x1f4>)
 8000856:	21ff      	movs	r1, #255	@ 0xff
 8000858:	54d1      	strb	r1, [r2, r3]
	  ssd2_vram[128 - anim_test + 128*7] = 0xFF;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000860:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <main+0x1f4>)
 8000862:	21ff      	movs	r1, #255	@ 0xff
 8000864:	54d1      	strb	r1, [r2, r3]
	  SSD1306_Update(&hssd1);
 8000866:	480b      	ldr	r0, [pc, #44]	@ (8000894 <main+0x1d8>)
 8000868:	f001 f996 	bl	8001b98 <SSD1306_Update>
	  SSD1306_Update(&hssd2);
 800086c:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <main+0x1ec>)
 800086e:	f001 f993 	bl	8001b98 <SSD1306_Update>
	  HAL_Delay(20);
 8000872:	2014      	movs	r0, #20
 8000874:	f001 fa3c 	bl	8001cf0 <HAL_Delay>

	  anim_test += 1;
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	3301      	adds	r3, #1
 800087c:	71fb      	strb	r3, [r7, #7]
	  if (anim_test >= 128) anim_test = 1;
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da8c      	bge.n	80007a0 <main+0xe4>
 8000886:	2301      	movs	r3, #1
 8000888:	71fb      	strb	r3, [r7, #7]
	  SSD1306_Clear(&hssd1);
 800088a:	e789      	b.n	80007a0 <main+0xe4>
 800088c:	24000f00 	.word	0x24000f00
 8000890:	24000170 	.word	0x24000170
 8000894:	2400067c 	.word	0x2400067c
 8000898:	240002a0 	.word	0x240002a0
 800089c:	2400069c 	.word	0x2400069c
 80008a0:	0801597c 	.word	0x0801597c
 80008a4:	24000e9c 	.word	0x24000e9c
 80008a8:	2400068c 	.word	0x2400068c
 80008ac:	2400024c 	.word	0x2400024c
 80008b0:	24000a9c 	.word	0x24000a9c
 80008b4:	08015998 	.word	0x08015998

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	@ 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c2:	224c      	movs	r2, #76	@ 0x4c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f014 fbce 	bl	8015068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2220      	movs	r2, #32
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f014 fbc8 	bl	8015068 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008d8:	2002      	movs	r0, #2
 80008da:	f00b f967 	bl	800bbac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b30      	ldr	r3, [pc, #192]	@ (80009a4 <SystemClock_Config+0xec>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e6:	4a2f      	ldr	r2, [pc, #188]	@ (80009a4 <SystemClock_Config+0xec>)
 80008e8:	f023 0301 	bic.w	r3, r3, #1
 80008ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ee:	4b2d      	ldr	r3, [pc, #180]	@ (80009a4 <SystemClock_Config+0xec>)
 80008f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <SystemClock_Config+0xf0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a2a      	ldr	r2, [pc, #168]	@ (80009a8 <SystemClock_Config+0xf0>)
 80008fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b28      	ldr	r3, [pc, #160]	@ (80009a8 <SystemClock_Config+0xf0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000910:	bf00      	nop
 8000912:	4b25      	ldr	r3, [pc, #148]	@ (80009a8 <SystemClock_Config+0xf0>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800091a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800091e:	d1f8      	bne.n	8000912 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	2302      	movs	r3, #2
 8000930:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000936:	2318      	movs	r3, #24
 8000938:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800093e:	2306      	movs	r3, #6
 8000940:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000946:	230c      	movs	r3, #12
 8000948:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800094a:	2300      	movs	r3, #0
 800094c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000956:	4618      	mov	r0, r3
 8000958:	f00b f972 	bl	800bc40 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000962:	f000 fb65 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	233f      	movs	r3, #63	@ 0x3f
 8000968:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2303      	movs	r3, #3
 800096c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000976:	2340      	movs	r3, #64	@ 0x40
 8000978:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800097a:	2340      	movs	r3, #64	@ 0x40
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800097e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000982:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000984:	2340      	movs	r3, #64	@ 0x40
 8000986:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2102      	movs	r1, #2
 800098c:	4618      	mov	r0, r3
 800098e:	f00b fdb1 	bl	800c4f4 <HAL_RCC_ClockConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000998:	f000 fb4a 	bl	8001030 <Error_Handler>
  }
}
 800099c:	bf00      	nop
 800099e:	3770      	adds	r7, #112	@ 0x70
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	58000400 	.word	0x58000400
 80009a8:	58024800 	.word	0x58024800

080009ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0b0      	sub	sp, #192	@ 0xc0
 80009b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	22c0      	movs	r2, #192	@ 0xc0
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f014 fb55 	bl	8015068 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 80009be:	f04f 0208 	mov.w	r2, #8
 80009c2:	f04f 0300 	mov.w	r3, #0
 80009c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 80009ce:	230c      	movs	r3, #12
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 80009da:	2303      	movs	r3, #3
 80009dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80009de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80009e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009e8:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80009ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4618      	mov	r0, r3
 80009fa:	f00c f907 	bl	800cc0c <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000a04:	f000 fb14 	bl	8001030 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	37c0      	adds	r7, #192	@ 0xc0
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
 8000a30:	615a      	str	r2, [r3, #20]
 8000a32:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a34:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a36:	4a39      	ldr	r2, [pc, #228]	@ (8000b1c <MX_ADC1_Init+0x10c>)
 8000a38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a3c:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000a40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a42:	4b35      	ldr	r3, [pc, #212]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a48:	4b33      	ldr	r3, [pc, #204]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a4e:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a50:	2208      	movs	r2, #8
 8000a52:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a54:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000a60:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a66:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a84:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a8a:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a92:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a98:	481f      	ldr	r0, [pc, #124]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000a9a:	f001 fb73 	bl	8002184 <HAL_ADC_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000aa4:	f000 fac4 	bl	8001030 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4819      	ldr	r0, [pc, #100]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000ab4:	f002 fb20 	bl	80030f8 <HAL_ADCEx_MultiModeConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000abe:	f000 fab7 	bl	8001030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_ADC1_Init+0x110>)
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000aca:	2307      	movs	r3, #7
 8000acc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ace:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ad2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000ae6:	f001 fdc7 	bl	8002678 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000af0:	f000 fa9e 	bl	8001030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_ADC1_Init+0x114>)
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000af8:	230c      	movs	r3, #12
 8000afa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_ADC1_Init+0x108>)
 8000b02:	f001 fdb9 	bl	8002678 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b0c:	f000 fa90 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	@ 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	24000170 	.word	0x24000170
 8000b1c:	40022000 	.word	0x40022000
 8000b20:	0c900008 	.word	0x0c900008
 8000b24:	10c00010 	.word	0x10c00010

08000b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba0 <MX_I2C1_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba4 <MX_I2C1_Init+0x7c>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b62:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b64:	f005 fa16 	bl	8005f94 <HAL_I2C_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b6e:	f000 fa5f 	bl	8001030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b76:	f007 fe47 	bl	8008808 <HAL_I2CEx_ConfigAnalogFilter>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b80:	f000 fa56 	bl	8001030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_I2C1_Init+0x74>)
 8000b88:	f007 fe89 	bl	800889e <HAL_I2CEx_ConfigDigitalFilter>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 fa4d 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2400024c 	.word	0x2400024c
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	00401959 	.word	0x00401959

08000ba8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <MX_I2C2_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c24 <MX_I2C2_Init+0x7c>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000be4:	f005 f9d6 	bl	8005f94 <HAL_I2C_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 fa1f 	bl	8001030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000bf6:	f007 fe07 	bl	8008808 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 fa16 	bl	8001030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_I2C2_Init+0x74>)
 8000c08:	f007 fe49 	bl	800889e <HAL_I2CEx_ConfigDigitalFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 fa0d 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240002a0 	.word	0x240002a0
 8000c20:	40005800 	.word	0x40005800
 8000c24:	00401959 	.word	0x00401959

08000c28 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_JPEG_Init+0x20>)
 8000c2e:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <MX_JPEG_Init+0x24>)
 8000c30:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_JPEG_Init+0x20>)
 8000c34:	f007 fe80 	bl	8008938 <HAL_JPEG_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000c3e:	f000 f9f7 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	240003e4 	.word	0x240003e4
 8000c4c:	52003000 	.word	0x52003000

08000c50 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c54:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c56:	4a28      	ldr	r2, [pc, #160]	@ (8000cf8 <MX_SPI4_Init+0xa8>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c5c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c60:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c68:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c7c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c80:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000ca2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ca6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <MX_SPI4_Init+0xa4>)
 8000ce0:	f00e fc92 	bl	800f608 <HAL_SPI_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000cea:	f000 f9a1 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	24000514 	.word	0x24000514
 8000cf8:	40013400 	.word	0x40013400

08000cfc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <MX_TIM14_Init+0x3c>)
 8000d02:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <MX_TIM14_Init+0x40>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_TIM14_Init+0x3c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_TIM14_Init+0x3c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_TIM14_Init+0x3c>)
 8000d14:	2205      	movs	r2, #5
 8000d16:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <MX_TIM14_Init+0x3c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_TIM14_Init+0x3c>)
 8000d20:	2280      	movs	r2, #128	@ 0x80
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <MX_TIM14_Init+0x3c>)
 8000d26:	f00e fdae 	bl	800f886 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000d30:	f000 f97e 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2400059c 	.word	0x2400059c
 8000d3c:	40002000 	.word	0x40002000

08000d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <MX_USART1_UART_Init+0x94>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d8a:	f00e ffcb 	bl	800fd24 <HAL_UART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d94:	f000 f94c 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d9c:	f00f ffd3 	bl	8010d46 <HAL_UARTEx_SetTxFifoThreshold>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f000 f943 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000dae:	f010 f808 	bl	8010dc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f000 f93a 	bl	8001030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000dbe:	f00f ff89 	bl	8010cd4 <HAL_UARTEx_DisableFifoMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f000 f932 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	240005e8 	.word	0x240005e8
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <MX_DMA_Init+0x5c>)
 8000de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de4:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <MX_DMA_Init+0x5c>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_DMA_Init+0x5c>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	200b      	movs	r0, #11
 8000e02:	f002 fb32 	bl	800346a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e06:	200b      	movs	r0, #11
 8000e08:	f002 fb49 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200c      	movs	r0, #12
 8000e12:	f002 fb2a 	bl	800346a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e16:	200c      	movs	r0, #12
 8000e18:	f002 fb41 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	200d      	movs	r0, #13
 8000e22:	f002 fb22 	bl	800346a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e26:	200d      	movs	r0, #13
 8000e28:	f002 fb39 	bl	800349e <HAL_NVIC_EnableIRQ>

}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	58024400 	.word	0x58024400

08000e38 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <MX_MDMA_Init+0x3c>)
 8000e40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e44:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <MX_MDMA_Init+0x3c>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_MDMA_Init+0x3c>)
 8000e50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	207a      	movs	r0, #122	@ 0x7a
 8000e62:	f002 fb02 	bl	800346a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e66:	207a      	movs	r0, #122	@ 0x7a
 8000e68:	f002 fb19 	bl	800349e <HAL_NVIC_EnableIRQ>

}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e8e:	4b33      	ldr	r3, [pc, #204]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	4a31      	ldr	r2, [pc, #196]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eac:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	4a1b      	ldr	r2, [pc, #108]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_GPIO_Init+0xe4>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BTN_L_Pin */
  GPIO_InitStruct.Pin = BTN_L_Pin;
 8000f24:	2320      	movs	r3, #32
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	480a      	ldr	r0, [pc, #40]	@ (8000f60 <MX_GPIO_Init+0xe8>)
 8000f38:	f004 fe7c 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 8000f3c:	2320      	movs	r3, #32
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_GPIO_Init+0xec>)
 8000f50:	f004 fe70 	bl	8005c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	@ 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58020000 	.word	0x58020000
 8000f64:	58020800 	.word	0x58020800

08000f68 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	adc_average[0] = 0;
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <HAL_ADC_ConvCpltCallback+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	801a      	strh	r2, [r3, #0]
	adc_average[1] = 0;
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_ADC_ConvCpltCallback+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < 20; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	e019      	b.n	8000fb6 <HAL_ADC_ConvCpltCallback+0x4e>
		// Have to pre-divide so the result fits in a uint16
		adc_average[i%2] += adc_buffer[i]/10;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	bfb8      	it	lt
 8000f8c:	425b      	neglt	r3, r3
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fcc <HAL_ADC_ConvCpltCallback+0x64>)
 8000f90:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000f94:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f9e:	fba0 0202 	umull	r0, r2, r0, r2
 8000fa2:	08d2      	lsrs	r2, r2, #3
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	440a      	add	r2, r1
 8000fa8:	b291      	uxth	r1, r2
 8000faa:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <HAL_ADC_ConvCpltCallback+0x64>)
 8000fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 20; i++) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b13      	cmp	r3, #19
 8000fba:	dde2      	ble.n	8000f82 <HAL_ADC_ConvCpltCallback+0x1a>

	// present it
	//sprintf(usb_msg, "%d, %d\r\n", adc_average[0], adc_average[1]);
	//CDC_Transmit_FS(usb_msg, strlen(usb_msg));
	//HAL_Delay(50);
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	24000f28 	.word	0x24000f28
 8000fd0:	24000f00 	.word	0x24000f00
 8000fd4:	cccccccd 	.word	0xcccccccd

08000fd8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fea:	f002 fa73 	bl	80034d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ffa:	231f      	movs	r3, #31
 8000ffc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ffe:	2387      	movs	r3, #135	@ 0x87
 8001000:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001002:	2300      	movs	r3, #0
 8001004:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001006:	2300      	movs	r3, #0
 8001008:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800100a:	2301      	movs	r3, #1
 800100c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800100e:	2301      	movs	r3, #1
 8001010:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800101a:	463b      	mov	r3, r7
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fa91 	bl	8003544 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001022:	2004      	movs	r0, #4
 8001024:	f002 fa6e 	bl	8003504 <HAL_MPU_Enable>

}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <Error_Handler+0x8>

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_MspInit+0x30>)
 8001044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001048:	4a08      	ldr	r2, [pc, #32]	@ (800106c <HAL_MspInit+0x30>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	58024400 	.word	0x58024400

08001070 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0bc      	sub	sp, #240	@ 0xf0
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	22c0      	movs	r2, #192	@ 0xc0
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f013 ffe9 	bl	8015068 <memset>
  if(hadc->Instance==ADC1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a53      	ldr	r2, [pc, #332]	@ (80011e8 <HAL_ADC_MspInit+0x178>)
 800109c:	4293      	cmp	r3, r2
 800109e:	f040 809f 	bne.w	80011e0 <HAL_ADC_MspInit+0x170>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 80010ae:	2310      	movs	r3, #16
 80010b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 20;
 80010b6:	2314      	movs	r3, #20
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	4618      	mov	r0, r3
 80010da:	f00b fd97 	bl	800cc0c <HAL_RCCEx_PeriphCLKConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80010e4:	f7ff ffa4 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010e8:	4b40      	ldr	r3, [pc, #256]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 80010ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010ee:	4a3f      	ldr	r2, [pc, #252]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010f8:	4b3c      	ldr	r3, [pc, #240]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 80010fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010fe:	f003 0320 	and.w	r3, r3, #32
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	4a37      	ldr	r2, [pc, #220]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001116:	4b35      	ldr	r3, [pc, #212]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001124:	4b31      	ldr	r3, [pc, #196]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	4a30      	ldr	r2, [pc, #192]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001134:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <HAL_ADC_MspInit+0x17c>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8001142:	2340      	movs	r3, #64	@ 0x40
 8001144:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	2303      	movs	r3, #3
 800114a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001158:	4619      	mov	r1, r3
 800115a:	4825      	ldr	r0, [pc, #148]	@ (80011f0 <HAL_ADC_MspInit+0x180>)
 800115c:	f004 fd6a 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001160:	2310      	movs	r3, #16
 8001162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001176:	4619      	mov	r1, r3
 8001178:	481e      	ldr	r0, [pc, #120]	@ (80011f4 <HAL_ADC_MspInit+0x184>)
 800117a:	f004 fd5b 	bl	8005c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800117e:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 8001180:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_ADC_MspInit+0x18c>)
 8001182:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 8001186:	2209      	movs	r2, #9
 8001188:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 8001198:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800119c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800119e:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 80011a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 80011a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 80011b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 80011b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 80011c6:	f002 f9fd 	bl	80035c4 <HAL_DMA_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80011d0:	f7ff ff2e 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 80011d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011da:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_ADC_MspInit+0x188>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011e0:	bf00      	nop
 80011e2:	37f0      	adds	r7, #240	@ 0xf0
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40022000 	.word	0x40022000
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020000 	.word	0x58020000
 80011f4:	58020800 	.word	0x58020800
 80011f8:	240001d4 	.word	0x240001d4
 80011fc:	40020010 	.word	0x40020010

08001200 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	@ 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a6b      	ldr	r2, [pc, #428]	@ (80013cc <HAL_I2C_MspInit+0x1cc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d15d      	bne.n	80012de <HAL_I2C_MspInit+0xde>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b6b      	ldr	r3, [pc, #428]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	4a69      	ldr	r2, [pc, #420]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001232:	4b67      	ldr	r3, [pc, #412]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001240:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001246:	2312      	movs	r3, #18
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001252:	2304      	movs	r3, #4
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	485d      	ldr	r0, [pc, #372]	@ (80013d4 <HAL_I2C_MspInit+0x1d4>)
 800125e:	f004 fce9 	bl	8005c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001262:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 8001264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001268:	4a59      	ldr	r2, [pc, #356]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 800126a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800126e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001272:	4b57      	ldr	r3, [pc, #348]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 8001274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001280:	4b55      	ldr	r3, [pc, #340]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 8001282:	4a56      	ldr	r2, [pc, #344]	@ (80013dc <HAL_I2C_MspInit+0x1dc>)
 8001284:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001286:	4b54      	ldr	r3, [pc, #336]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 8001288:	2222      	movs	r2, #34	@ 0x22
 800128a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128c:	4b52      	ldr	r3, [pc, #328]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 800128e:	2240      	movs	r2, #64	@ 0x40
 8001290:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001292:	4b51      	ldr	r3, [pc, #324]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001298:	4b4f      	ldr	r3, [pc, #316]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 800129a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800129e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012a0:	4b4d      	ldr	r3, [pc, #308]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a6:	4b4c      	ldr	r3, [pc, #304]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012ac:	4b4a      	ldr	r3, [pc, #296]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012b2:	4b49      	ldr	r3, [pc, #292]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 80012b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012b8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ba:	4b47      	ldr	r3, [pc, #284]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80012c0:	4845      	ldr	r0, [pc, #276]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 80012c2:	f002 f97f 	bl	80035c4 <HAL_DMA_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80012cc:	f7ff feb0 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a41      	ldr	r2, [pc, #260]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 80012d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80012d6:	4a40      	ldr	r2, [pc, #256]	@ (80013d8 <HAL_I2C_MspInit+0x1d8>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012dc:	e071      	b.n	80013c2 <HAL_I2C_MspInit+0x1c2>
  else if(hi2c->Instance==I2C2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a3f      	ldr	r2, [pc, #252]	@ (80013e0 <HAL_I2C_MspInit+0x1e0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d16c      	bne.n	80013c2 <HAL_I2C_MspInit+0x1c2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	4a38      	ldr	r2, [pc, #224]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f8:	4b35      	ldr	r3, [pc, #212]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001306:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001318:	2304      	movs	r3, #4
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	482c      	ldr	r0, [pc, #176]	@ (80013d4 <HAL_I2C_MspInit+0x1d4>)
 8001324:	f004 fc86 	bl	8005c34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001328:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 800132a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800132e:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 8001330:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001334:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001338:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <HAL_I2C_MspInit+0x1d0>)
 800133a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800133e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8001346:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 8001348:	4a27      	ldr	r2, [pc, #156]	@ (80013e8 <HAL_I2C_MspInit+0x1e8>)
 800134a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 800134e:	2224      	movs	r2, #36	@ 0x24
 8001350:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001352:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 8001354:	2240      	movs	r2, #64	@ 0x40
 8001356:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 8001360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001364:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001366:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136c:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 800137a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800137e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001386:	4817      	ldr	r0, [pc, #92]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 8001388:	f002 f91c 	bl	80035c4 <HAL_DMA_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_I2C_MspInit+0x196>
      Error_Handler();
 8001392:	f7ff fe4d 	bl	8001030 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 800139a:	639a      	str	r2, [r3, #56]	@ 0x38
 800139c:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <HAL_I2C_MspInit+0x1e4>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2021      	movs	r0, #33	@ 0x21
 80013a8:	f002 f85f 	bl	800346a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80013ac:	2021      	movs	r0, #33	@ 0x21
 80013ae:	f002 f876 	bl	800349e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2022      	movs	r0, #34	@ 0x22
 80013b8:	f002 f857 	bl	800346a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80013bc:	2022      	movs	r0, #34	@ 0x22
 80013be:	f002 f86e 	bl	800349e <HAL_NVIC_EnableIRQ>
}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40005400 	.word	0x40005400
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020400 	.word	0x58020400
 80013d8:	240002f4 	.word	0x240002f4
 80013dc:	40020040 	.word	0x40020040
 80013e0:	40005800 	.word	0x40005800
 80013e4:	2400036c 	.word	0x2400036c
 80013e8:	40020028 	.word	0x40020028

080013ec <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a55      	ldr	r2, [pc, #340]	@ (8001550 <HAL_JPEG_MspInit+0x164>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f040 80a3 	bne.w	8001546 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001400:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <HAL_JPEG_MspInit+0x168>)
 8001402:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001406:	4a53      	ldr	r2, [pc, #332]	@ (8001554 <HAL_JPEG_MspInit+0x168>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001410:	4b50      	ldr	r3, [pc, #320]	@ (8001554 <HAL_JPEG_MspInit+0x168>)
 8001412:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 800141e:	4b4e      	ldr	r3, [pc, #312]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001420:	4a4e      	ldr	r2, [pc, #312]	@ (800155c <HAL_JPEG_MspInit+0x170>)
 8001422:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001424:	4b4c      	ldr	r3, [pc, #304]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001426:	2211      	movs	r2, #17
 8001428:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800142a:	4b4b      	ldr	r3, [pc, #300]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001430:	4b49      	ldr	r3, [pc, #292]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001432:	2240      	movs	r2, #64	@ 0x40
 8001434:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001436:	4b48      	ldr	r3, [pc, #288]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800143c:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 800143e:	2202      	movs	r2, #2
 8001440:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001442:	4b45      	ldr	r3, [pc, #276]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001448:	4b43      	ldr	r3, [pc, #268]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800144e:	4b42      	ldr	r3, [pc, #264]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001450:	2280      	movs	r2, #128	@ 0x80
 8001452:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001454:	4b40      	ldr	r3, [pc, #256]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001456:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800145c:	4b3e      	ldr	r3, [pc, #248]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 800145e:	2220      	movs	r2, #32
 8001460:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001462:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001468:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 800146e:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001474:	4b38      	ldr	r3, [pc, #224]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001476:	2200      	movs	r2, #0
 8001478:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800147a:	4837      	ldr	r0, [pc, #220]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 800147c:	f008 fe44 	bl	800a108 <HAL_MDMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001486:	f7ff fdd3 	bl	8001030 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	4832      	ldr	r0, [pc, #200]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 8001490:	f008 fe86 	bl	800a1a0 <HAL_MDMA_ConfigPostRequestMask>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 800149a:	f7ff fdc9 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001558 <HAL_JPEG_MspInit+0x16c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 80014aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001564 <HAL_JPEG_MspInit+0x178>)
 80014ae:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014b2:	2214      	movs	r2, #20
 80014b4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80014b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80014bc:	4b28      	ldr	r3, [pc, #160]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014be:	2240      	movs	r2, #64	@ 0x40
 80014c0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80014c2:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80014c8:	4b25      	ldr	r3, [pc, #148]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80014ce:	4b24      	ldr	r3, [pc, #144]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014d4:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014d6:	2220      	movs	r2, #32
 80014d8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80014da:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014ea:	2204      	movs	r2, #4
 80014ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001500:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 8001502:	2200      	movs	r2, #0
 8001504:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001506:	4816      	ldr	r0, [pc, #88]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 8001508:	f008 fdfe 	bl	800a108 <HAL_MDMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001512:	f7ff fd8d 	bl	8001030 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	4811      	ldr	r0, [pc, #68]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 800151c:	f008 fe40 	bl	800a1a0 <HAL_MDMA_ConfigPostRequestMask>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001526:	f7ff fd83 	bl	8001030 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a0c      	ldr	r2, [pc, #48]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 800152e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001530:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <HAL_JPEG_MspInit+0x174>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2079      	movs	r0, #121	@ 0x79
 800153c:	f001 ff95 	bl	800346a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001540:	2079      	movs	r0, #121	@ 0x79
 8001542:	f001 ffac 	bl	800349e <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	52003000 	.word	0x52003000
 8001554:	58024400 	.word	0x58024400
 8001558:	2400043c 	.word	0x2400043c
 800155c:	52000040 	.word	0x52000040
 8001560:	240004a8 	.word	0x240004a8
 8001564:	52000080 	.word	0x52000080

08001568 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0ba      	sub	sp, #232	@ 0xe8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	22c0      	movs	r2, #192	@ 0xc0
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f013 fd6d 	bl	8015068 <memset>
  if(hspi->Instance==SPI4)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a26      	ldr	r2, [pc, #152]	@ (800162c <HAL_SPI_MspInit+0xc4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d144      	bne.n	8001622 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001598:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00b fb2d 	bl	800cc0c <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80015b8:	f7ff fd3a 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <HAL_SPI_MspInit+0xc8>)
 80015be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001630 <HAL_SPI_MspInit+0xc8>)
 80015c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015cc:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <HAL_SPI_MspInit+0xc8>)
 80015ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_SPI_MspInit+0xc8>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e0:	4a13      	ldr	r2, [pc, #76]	@ (8001630 <HAL_SPI_MspInit+0xc8>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_SPI_MspInit+0xc8>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80015f8:	2364      	movs	r3, #100	@ 0x64
 80015fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001610:	2305      	movs	r3, #5
 8001612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001616:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	@ (8001634 <HAL_SPI_MspInit+0xcc>)
 800161e:	f004 fb09 	bl	8005c34 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001622:	bf00      	nop
 8001624:	37e8      	adds	r7, #232	@ 0xe8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40013400 	.word	0x40013400
 8001630:	58024400 	.word	0x58024400
 8001634:	58021000 	.word	0x58021000

08001638 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0e      	ldr	r2, [pc, #56]	@ (8001680 <HAL_TIM_Base_MspInit+0x48>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d116      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_TIM_Base_MspInit+0x4c>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001650:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <HAL_TIM_Base_MspInit+0x4c>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001656:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_TIM_Base_MspInit+0x4c>)
 800165c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	202d      	movs	r0, #45	@ 0x2d
 800166e:	f001 fefc 	bl	800346a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001672:	202d      	movs	r0, #45	@ 0x2d
 8001674:	f001 ff13 	bl	800349e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM14_MspInit 1 */

  }

}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40002000 	.word	0x40002000
 8001684:	58024400 	.word	0x58024400

08001688 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0ba      	sub	sp, #232	@ 0xe8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	22c0      	movs	r2, #192	@ 0xc0
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f013 fcdd 	bl	8015068 <memset>
  if(huart->Instance==USART1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a27      	ldr	r2, [pc, #156]	@ (8001750 <HAL_UART_MspInit+0xc8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d146      	bne.n	8001746 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016b8:	f04f 0201 	mov.w	r2, #1
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4618      	mov	r0, r3
 80016d0:	f00b fa9c 	bl	800cc0c <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016da:	f7ff fca9 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <HAL_UART_MspInit+0xcc>)
 80016e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001754 <HAL_UART_MspInit+0xcc>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_UART_MspInit+0xcc>)
 80016f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_UART_MspInit+0xcc>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	4a14      	ldr	r2, [pc, #80]	@ (8001754 <HAL_UART_MspInit+0xcc>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_UART_MspInit+0xcc>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800171a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800171e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001734:	2304      	movs	r3, #4
 8001736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <HAL_UART_MspInit+0xd0>)
 8001742:	f004 fa77 	bl	8005c34 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001746:	bf00      	nop
 8001748:	37e8      	adds	r7, #232	@ 0xe8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40011000 	.word	0x40011000
 8001754:	58024400 	.word	0x58024400
 8001758:	58020400 	.word	0x58020400

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 fa7d 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <DMA1_Stream0_IRQHandler+0x10>)
 80017c2:	f002 ff0b 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	240001d4 	.word	0x240001d4

080017d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <DMA1_Stream1_IRQHandler+0x10>)
 80017d6:	f002 ff01 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2400036c 	.word	0x2400036c

080017e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x10>)
 80017ea:	f002 fef7 	bl	80045dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	240002f4 	.word	0x240002f4

080017f8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <I2C2_EV_IRQHandler+0x10>)
 80017fe:	f004 fe91 	bl	8006524 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	240002a0 	.word	0x240002a0

0800180c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <I2C2_ER_IRQHandler+0x10>)
 8001812:	f004 fea1 	bl	8006558 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	240002a0 	.word	0x240002a0

08001820 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001826:	f00e f885 	bl	800f934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2400059c 	.word	0x2400059c

08001834 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <OTG_FS_IRQHandler+0x10>)
 800183a:	f009 f858 	bl	800a8ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2400241c 	.word	0x2400241c

08001848 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <JPEG_IRQHandler+0x10>)
 800184e:	f007 fa18 	bl	8008c82 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	240003e4 	.word	0x240003e4

0800185c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001860:	4803      	ldr	r0, [pc, #12]	@ (8001870 <MDMA_IRQHandler+0x14>)
 8001862:	f008 fd17 	bl	800a294 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8001866:	4803      	ldr	r0, [pc, #12]	@ (8001874 <MDMA_IRQHandler+0x18>)
 8001868:	f008 fd14 	bl	800a294 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2400043c 	.word	0x2400043c
 8001874:	240004a8 	.word	0x240004a8

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f013 fbe6 	bl	8015078 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	@ (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	24080000 	.word	0x24080000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	24000f30 	.word	0x24000f30
 80018e0:	24002c68 	.word	0x24002c68

080018e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018e8:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <SystemInit+0x114>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ee:	4a42      	ldr	r2, [pc, #264]	@ (80019f8 <SystemInit+0x114>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018f8:	4b40      	ldr	r3, [pc, #256]	@ (80019fc <SystemInit+0x118>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	2b06      	cmp	r3, #6
 8001902:	d807      	bhi.n	8001914 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001904:	4b3d      	ldr	r3, [pc, #244]	@ (80019fc <SystemInit+0x118>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 030f 	bic.w	r3, r3, #15
 800190c:	4a3b      	ldr	r2, [pc, #236]	@ (80019fc <SystemInit+0x118>)
 800190e:	f043 0307 	orr.w	r3, r3, #7
 8001912:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001914:	4b3a      	ldr	r3, [pc, #232]	@ (8001a00 <SystemInit+0x11c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a39      	ldr	r2, [pc, #228]	@ (8001a00 <SystemInit+0x11c>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001920:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <SystemInit+0x11c>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001926:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <SystemInit+0x11c>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4935      	ldr	r1, [pc, #212]	@ (8001a00 <SystemInit+0x11c>)
 800192c:	4b35      	ldr	r3, [pc, #212]	@ (8001a04 <SystemInit+0x120>)
 800192e:	4013      	ands	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001932:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <SystemInit+0x118>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800193e:	4b2f      	ldr	r3, [pc, #188]	@ (80019fc <SystemInit+0x118>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 030f 	bic.w	r3, r3, #15
 8001946:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <SystemInit+0x118>)
 8001948:	f043 0307 	orr.w	r3, r3, #7
 800194c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800194e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a00 <SystemInit+0x11c>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001954:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <SystemInit+0x11c>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800195a:	4b29      	ldr	r3, [pc, #164]	@ (8001a00 <SystemInit+0x11c>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001960:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <SystemInit+0x11c>)
 8001962:	4a29      	ldr	r2, [pc, #164]	@ (8001a08 <SystemInit+0x124>)
 8001964:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <SystemInit+0x11c>)
 8001968:	4a28      	ldr	r2, [pc, #160]	@ (8001a0c <SystemInit+0x128>)
 800196a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800196c:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <SystemInit+0x11c>)
 800196e:	4a28      	ldr	r2, [pc, #160]	@ (8001a10 <SystemInit+0x12c>)
 8001970:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <SystemInit+0x11c>)
 8001974:	2200      	movs	r2, #0
 8001976:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001978:	4b21      	ldr	r3, [pc, #132]	@ (8001a00 <SystemInit+0x11c>)
 800197a:	4a25      	ldr	r2, [pc, #148]	@ (8001a10 <SystemInit+0x12c>)
 800197c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <SystemInit+0x11c>)
 8001980:	2200      	movs	r2, #0
 8001982:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001984:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <SystemInit+0x11c>)
 8001986:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <SystemInit+0x12c>)
 8001988:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800198a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <SystemInit+0x11c>)
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001990:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <SystemInit+0x11c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1a      	ldr	r2, [pc, #104]	@ (8001a00 <SystemInit+0x11c>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <SystemInit+0x11c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <SystemInit+0x130>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <SystemInit+0x134>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019ae:	d202      	bcs.n	80019b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <SystemInit+0x138>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <SystemInit+0x11c>)
 80019b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d113      	bne.n	80019ec <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <SystemInit+0x11c>)
 80019c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <SystemInit+0x11c>)
 80019cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <SystemInit+0x13c>)
 80019d6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019da:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <SystemInit+0x11c>)
 80019de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019e2:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <SystemInit+0x11c>)
 80019e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	52002000 	.word	0x52002000
 8001a00:	58024400 	.word	0x58024400
 8001a04:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a08:	02020200 	.word	0x02020200
 8001a0c:	01ff0000 	.word	0x01ff0000
 8001a10:	01010280 	.word	0x01010280
 8001a14:	5c001000 	.word	0x5c001000
 8001a18:	ffff0000 	.word	0xffff0000
 8001a1c:	51008108 	.word	0x51008108
 8001a20:	52004000 	.word	0x52004000

08001a24 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <ExitRun0Mode+0x2c>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <ExitRun0Mode+0x2c>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001a34:	bf00      	nop
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <ExitRun0Mode+0x2c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f9      	beq.n	8001a36 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001a42:	bf00      	nop
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	58024800 	.word	0x58024800

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a54:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a90 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a58:	f7ff ffe4 	bl	8001a24 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a5c:	f7ff ff42 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a86:	f013 fafd 	bl	8015084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7fe fe17 	bl	80006bc <main>
  bx  lr
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a98:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8001a9c:	08015d14 	.word	0x08015d14
  ldr r2, =_sbss
 8001aa0:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001aa4:	24002c68 	.word	0x24002c68

08001aa8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC3_IRQHandler>

08001aaa <SSD1306_SendCommand>:
	1, VCOM_DESELECT, 0x20,                                   // Set V COMH Deselect, reset value 0x22 = 0,77xUcc
	1, SET_CHAR_REG, 0x14,                                    // 0x8D, Enable charge pump during display on
	0, DISPLAY_ON                                             // 0xAF = Set Display ON
};

uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af02      	add	r7, sp, #8
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8001ab6:	2380      	movs	r3, #128	@ 0x80
 8001ab8:	733b      	strb	r3, [r7, #12]
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	f107 020c 	add.w	r2, r7, #12
 8001ace:	2364      	movs	r3, #100	@ 0x64
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f004 fafa 	bl	80060cc <HAL_I2C_Master_Transmit>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <SSD1306_SendCommand+0x38>
		return ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8001af4:	2312      	movs	r3, #18
 8001af6:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8001afc:	e02c      	b.n	8001b58 <SSD1306_Init+0x6c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	4a1a      	ldr	r2, [pc, #104]	@ (8001b6c <SSD1306_Init+0x80>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8001b06:	897b      	ldrh	r3, [r7, #10]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001b0c:	897b      	ldrh	r3, [r7, #10]
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <SSD1306_Init+0x80>)
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ffc8 	bl	8001aaa <SSD1306_SendCommand>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <SSD1306_Init+0x3a>
 8001b20:	897b      	ldrh	r3, [r7, #10]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	e01e      	b.n	8001b64 <SSD1306_Init+0x78>
	        cmd_idx++;
 8001b26:	897b      	ldrh	r3, [r7, #10]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8001b2c:	e00f      	b.n	8001b4e <SSD1306_Init+0x62>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001b2e:	897b      	ldrh	r3, [r7, #10]
 8001b30:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <SSD1306_Init+0x80>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	4619      	mov	r1, r3
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffb7 	bl	8001aaa <SSD1306_SendCommand>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <SSD1306_Init+0x5c>
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e00d      	b.n	8001b64 <SSD1306_Init+0x78>
	            cmd_idx++;
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8001b4e:	89bb      	ldrh	r3, [r7, #12]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	81ba      	strh	r2, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ea      	bne.n	8001b2e <SSD1306_Init+0x42>
	while (n_commands--) {
 8001b58:	89fb      	ldrh	r3, [r7, #14]
 8001b5a:	1e5a      	subs	r2, r3, #1
 8001b5c:	81fa      	strh	r2, [r7, #14]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1cd      	bne.n	8001afe <SSD1306_Init+0x12>
	        }
	    }
	    return 0;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08015a0c 	.word	0x08015a0c

08001b70 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 1;							// Reset the cursor to top-left
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	819a      	strh	r2, [r3, #12]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM + 1);	// set all bytes to 0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f240 4201 	movw	r2, #1025	@ 0x401
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f013 fa6d 	bl	8015068 <memset>
	return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	hssd->vram[0] = DATA_STREAM; // Identify the outgoing data as a stream
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2240      	movs	r2, #64	@ 0x40
 8001ba6:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram, CACHE_SIZE_MEM + 1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	b299      	uxth	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	f240 4301 	movw	r3, #1025	@ 0x401
 8001bbc:	f004 fb9e 	bl	80062fc <HAL_I2C_Master_Transmit_DMA>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f001 fc3e 	bl	8003454 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bd8:	f00a fe42 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_Init+0x68>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	4913      	ldr	r1, [pc, #76]	@ (8001c38 <HAL_Init+0x6c>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <HAL_Init+0x68>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001c38 <HAL_Init+0x6c>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c3c <HAL_Init+0x70>)
 8001c0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_Init+0x74>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c16:	200f      	movs	r0, #15
 8001c18:	f000 f814 	bl	8001c44 <HAL_InitTick>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e002      	b.n	8001c2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c26:	f7ff fa09 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	58024400 	.word	0x58024400
 8001c38:	080159fc 	.word	0x080159fc
 8001c3c:	24000004 	.word	0x24000004
 8001c40:	24000000 	.word	0x24000000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_InitTick+0x60>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e021      	b.n	8001c9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <HAL_InitTick+0x64>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_InitTick+0x60>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 fc23 	bl	80034ba <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f001 fbed 	bl	800346a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <HAL_InitTick+0x68>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2400000c 	.word	0x2400000c
 8001ca8:	24000000 	.word	0x24000000
 8001cac:	24000008 	.word	0x24000008

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2400000c 	.word	0x2400000c
 8001cd4:	24000f34 	.word	0x24000f34

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	24000f34 	.word	0x24000f34

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2400000c 	.word	0x2400000c

08001d38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_GetREVID+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0c1b      	lsrs	r3, r3, #16
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	5c001000 	.word	0x5c001000

08001d50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <LL_ADC_SetChannelPreselection+0x24>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	e015      	b.n	8001e08 <LL_ADC_SetChannelPreselection+0x50>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e003      	b.n	8001dfe <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2201      	movs	r2, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	69d2      	ldr	r2, [r2, #28]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b087      	sub	sp, #28
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3360      	adds	r3, #96	@ 0x60
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	611a      	str	r2, [r3, #16]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3360      	adds	r3, #96	@ 0x60
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]
  }
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3330      	adds	r3, #48	@ 0x30
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	211f      	movs	r1, #31
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	0e9b      	lsrs	r3, r3, #26
 8001f24:	f003 011f 	and.w	r1, r3, #31
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	431a      	orrs	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f023 0203 	bic.w	r2, r3, #3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60da      	str	r2, [r3, #12]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b087      	sub	sp, #28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3314      	adds	r3, #20
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	0e5b      	lsrs	r3, r3, #25
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0d1b      	lsrs	r3, r3, #20
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2107      	movs	r1, #7
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	0d1b      	lsrs	r3, r3, #20
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0318 	and.w	r3, r3, #24
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fe4:	40d9      	lsrs	r1, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	400b      	ands	r3, r1
 8001fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	000fffff 	.word	0x000fffff

08002008 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 031f 	and.w	r3, r3, #31
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002032:	4013      	ands	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6093      	str	r3, [r2, #8]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	5fffffc0 	.word	0x5fffffc0

08002048 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800205c:	d101      	bne.n	8002062 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <LL_ADC_EnableInternalRegulator+0x24>)
 800207e:	4013      	ands	r3, r2
 8002080:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	6fffffc0 	.word	0x6fffffc0

08002098 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020ac:	d101      	bne.n	80020b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <LL_ADC_Enable+0x24>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	7fffffc0 	.word	0x7fffffc0

080020e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <LL_ADC_IsEnabled+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_ADC_IsEnabled+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <LL_ADC_REG_StartConversion+0x24>)
 800211e:	4013      	ands	r3, r2
 8002120:	f043 0204 	orr.w	r2, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	7fffffc0 	.word	0x7fffffc0

08002138 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d101      	bne.n	8002150 <LL_ADC_REG_IsConversionOngoing+0x18>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b08      	cmp	r3, #8
 8002170:	d101      	bne.n	8002176 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e18f      	b.n	80024be <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe ff5f 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff3f 	bl	8002048 <LL_ADC_IsDeepPowerDownEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff25 	bl	8002024 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff5a 	bl	8002098 <LL_ADC_IsInternalRegulatorEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d114      	bne.n	8002214 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff3e 	bl	8002070 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f4:	4b87      	ldr	r3, [pc, #540]	@ (8002414 <HAL_ADC_Init+0x290>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	4a87      	ldr	r2, [pc, #540]	@ (8002418 <HAL_ADC_Init+0x294>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	3301      	adds	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002206:	e002      	b.n	800220e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	3b01      	subs	r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff3d 	bl	8002098 <LL_ADC_IsInternalRegulatorEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002228:	f043 0210 	orr.w	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff77 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 800224a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 8129 	bne.w	80024ac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	f040 8125 	bne.w	80024ac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff36 	bl	80020e8 <LL_ADC_IsEnabled>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d136      	bne.n	80022f0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a65      	ldr	r2, [pc, #404]	@ (800241c <HAL_ADC_Init+0x298>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_ADC_Init+0x112>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a63      	ldr	r2, [pc, #396]	@ (8002420 <HAL_ADC_Init+0x29c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10e      	bne.n	80022b4 <HAL_ADC_Init+0x130>
 8002296:	4861      	ldr	r0, [pc, #388]	@ (800241c <HAL_ADC_Init+0x298>)
 8002298:	f7ff ff26 	bl	80020e8 <LL_ADC_IsEnabled>
 800229c:	4604      	mov	r4, r0
 800229e:	4860      	ldr	r0, [pc, #384]	@ (8002420 <HAL_ADC_Init+0x29c>)
 80022a0:	f7ff ff22 	bl	80020e8 <LL_ADC_IsEnabled>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4323      	orrs	r3, r4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e008      	b.n	80022c6 <HAL_ADC_Init+0x142>
 80022b4:	485b      	ldr	r0, [pc, #364]	@ (8002424 <HAL_ADC_Init+0x2a0>)
 80022b6:	f7ff ff17 	bl	80020e8 <LL_ADC_IsEnabled>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a53      	ldr	r2, [pc, #332]	@ (800241c <HAL_ADC_Init+0x298>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d004      	beq.n	80022de <HAL_ADC_Init+0x15a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a51      	ldr	r2, [pc, #324]	@ (8002420 <HAL_ADC_Init+0x29c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x15e>
 80022de:	4a52      	ldr	r2, [pc, #328]	@ (8002428 <HAL_ADC_Init+0x2a4>)
 80022e0:	e000      	b.n	80022e4 <HAL_ADC_Init+0x160>
 80022e2:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_ADC_Init+0x2a8>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4619      	mov	r1, r3
 80022ea:	4610      	mov	r0, r2
 80022ec:	f7ff fd30 	bl	8001d50 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80022f0:	f7ff fd22 	bl	8001d38 <HAL_GetREVID>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d914      	bls.n	8002328 <HAL_ADC_Init+0x1a4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d110      	bne.n	8002328 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7d5b      	ldrb	r3, [r3, #21]
 800230a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002310:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002316:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7f1b      	ldrb	r3, [r3, #28]
 800231c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800231e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002320:	f043 030c 	orr.w	r3, r3, #12
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	e00d      	b.n	8002344 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7d5b      	ldrb	r3, [r3, #21]
 800232c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002332:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002338:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7f1b      	ldrb	r3, [r3, #28]
 800233e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7f1b      	ldrb	r3, [r3, #28]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d106      	bne.n	800235a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	3b01      	subs	r3, #1
 8002352:	045b      	lsls	r3, r3, #17
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	4b2c      	ldr	r3, [pc, #176]	@ (8002430 <HAL_ADC_Init+0x2ac>)
 800237e:	4013      	ands	r3, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	69b9      	ldr	r1, [r7, #24]
 8002386:	430b      	orrs	r3, r1
 8002388:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fed2 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 8002394:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fedf 	bl	800215e <LL_ADC_INJ_IsConversionOngoing>
 80023a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d15f      	bne.n	8002468 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d15c      	bne.n	8002468 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7d1b      	ldrb	r3, [r3, #20]
 80023b2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <HAL_ADC_Init+0x2b0>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	69b9      	ldr	r1, [r7, #24]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d130      	bne.n	800243c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <HAL_ADC_Init+0x2b4>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023ee:	3a01      	subs	r2, #1
 80023f0:	0411      	lsls	r1, r2, #16
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023fc:	4311      	orrs	r1, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002402:	430a      	orrs	r2, r1
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	e01c      	b.n	800244c <HAL_ADC_Init+0x2c8>
 8002412:	bf00      	nop
 8002414:	24000000 	.word	0x24000000
 8002418:	053e2d63 	.word	0x053e2d63
 800241c:	40022000 	.word	0x40022000
 8002420:	40022100 	.word	0x40022100
 8002424:	58026000 	.word	0x58026000
 8002428:	40022300 	.word	0x40022300
 800242c:	58026300 	.word	0x58026300
 8002430:	fff0c003 	.word	0xfff0c003
 8002434:	ffffbffc 	.word	0xffffbffc
 8002438:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fd16 	bl	8002e94 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d10c      	bne.n	800248a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f023 010f 	bic.w	r1, r3, #15
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	1e5a      	subs	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30
 8002488:	e007      	b.n	800249a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 020f 	bic.w	r2, r2, #15
 8002498:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54
 80024aa:	e007      	b.n	80024bc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	f043 0210 	orr.w	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop

080024c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a55      	ldr	r2, [pc, #340]	@ (8002630 <HAL_ADC_Start_DMA+0x168>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_Start_DMA+0x20>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a54      	ldr	r2, [pc, #336]	@ (8002634 <HAL_ADC_Start_DMA+0x16c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_Start_DMA+0x24>
 80024e8:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <HAL_ADC_Start_DMA+0x170>)
 80024ea:	e000      	b.n	80024ee <HAL_ADC_Start_DMA+0x26>
 80024ec:	4b53      	ldr	r3, [pc, #332]	@ (800263c <HAL_ADC_Start_DMA+0x174>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fd8a 	bl	8002008 <LL_ADC_GetMultimode>
 80024f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fe1c 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 808c 	bne.w	8002620 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADC_Start_DMA+0x4e>
 8002512:	2302      	movs	r3, #2
 8002514:	e087      	b.n	8002626 <HAL_ADC_Start_DMA+0x15e>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	2b05      	cmp	r3, #5
 8002528:	d002      	beq.n	8002530 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b09      	cmp	r3, #9
 800252e:	d170      	bne.n	8002612 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fb91 	bl	8002c58 <ADC_Enable>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d163      	bne.n	8002608 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002544:	4b3e      	ldr	r3, [pc, #248]	@ (8002640 <HAL_ADC_Start_DMA+0x178>)
 8002546:	4013      	ands	r3, r2
 8002548:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a37      	ldr	r2, [pc, #220]	@ (8002634 <HAL_ADC_Start_DMA+0x16c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d002      	beq.n	8002560 <HAL_ADC_Start_DMA+0x98>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	e000      	b.n	8002562 <HAL_ADC_Start_DMA+0x9a>
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <HAL_ADC_Start_DMA+0x168>)
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	4293      	cmp	r3, r2
 8002568:	d002      	beq.n	8002570 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258c:	f023 0206 	bic.w	r2, r3, #6
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	659a      	str	r2, [r3, #88]	@ 0x58
 8002594:	e002      	b.n	800259c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a0:	4a28      	ldr	r2, [pc, #160]	@ (8002644 <HAL_ADC_Start_DMA+0x17c>)
 80025a2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a8:	4a27      	ldr	r2, [pc, #156]	@ (8002648 <HAL_ADC_Start_DMA+0x180>)
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b0:	4a26      	ldr	r2, [pc, #152]	@ (800264c <HAL_ADC_Start_DMA+0x184>)
 80025b2:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	221c      	movs	r2, #28
 80025ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0210 	orr.w	r2, r2, #16
 80025d2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7ff fcb0 	bl	8001f44 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3340      	adds	r3, #64	@ 0x40
 80025ee:	4619      	mov	r1, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f001 fb42 	bl	8003c7c <HAL_DMA_Start_IT>
 80025f8:	4603      	mov	r3, r0
 80025fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fd85 	bl	8002110 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002606:	e00d      	b.n	8002624 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002610:	e008      	b.n	8002624 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800261e:	e001      	b.n	8002624 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002620:	2302      	movs	r3, #2
 8002622:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002624:	7dfb      	ldrb	r3, [r7, #23]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40022000 	.word	0x40022000
 8002634:	40022100 	.word	0x40022100
 8002638:	40022300 	.word	0x40022300
 800263c:	58026300 	.word	0x58026300
 8002640:	fffff0fe 	.word	0xfffff0fe
 8002644:	08002d6d 	.word	0x08002d6d
 8002648:	08002e45 	.word	0x08002e45
 800264c:	08002e61 	.word	0x08002e61

08002650 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b08d      	sub	sp, #52	@ 0x34
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a65      	ldr	r2, [pc, #404]	@ (8002828 <HAL_ADC_ConfigChannel+0x1b0>)
 8002692:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x2a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e2c7      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x5ba>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fd42 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 82ac 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db2c      	blt.n	800271e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d108      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x6a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	0e9b      	lsrs	r3, r3, #26
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	e016      	b.n	8002710 <HAL_ADC_ConfigChannel+0x98>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	613b      	str	r3, [r7, #16]
  return result;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e003      	b.n	8002706 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2201      	movs	r2, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	69d1      	ldr	r1, [r2, #28]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	430b      	orrs	r3, r1
 800271c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	f7ff fbde 	bl	8001eec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fcff 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 800273a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fd0c 	bl	800215e <LL_ADC_INJ_IsConversionOngoing>
 8002746:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 80b8 	bne.w	80028c0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80b4 	bne.w	80028c0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	461a      	mov	r2, r3
 8002766:	f7ff fc00 	bl	8001f6a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800276a:	4b30      	ldr	r3, [pc, #192]	@ (800282c <HAL_ADC_ConfigChannel+0x1b4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002776:	d10b      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x118>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	089b      	lsrs	r3, r3, #2
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	e01d      	b.n	80027cc <HAL_ADC_ConfigChannel+0x154>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x13e>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	e00a      	b.n	80027cc <HAL_ADC_ConfigChannel+0x154>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d02c      	beq.n	8002830 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6919      	ldr	r1, [r3, #16]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f7ff fb1b 	bl	8001e1e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6919      	ldr	r1, [r3, #16]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	7e5b      	ldrb	r3, [r3, #25]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x186>
 80027f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80027fc:	e000      	b.n	8002800 <HAL_ADC_ConfigChannel+0x188>
 80027fe:	2300      	movs	r3, #0
 8002800:	461a      	mov	r2, r3
 8002802:	f7ff fb45 	bl	8001e90 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6919      	ldr	r1, [r3, #16]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	7e1b      	ldrb	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d102      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1a4>
 8002816:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800281a:	e000      	b.n	800281e <HAL_ADC_ConfigChannel+0x1a6>
 800281c:	2300      	movs	r3, #0
 800281e:	461a      	mov	r2, r3
 8002820:	f7ff fb1d 	bl	8001e5e <LL_ADC_SetDataRightShift>
 8002824:	e04c      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x248>
 8002826:	bf00      	nop
 8002828:	47ff0000 	.word	0x47ff0000
 800282c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	069b      	lsls	r3, r3, #26
 8002840:	429a      	cmp	r2, r3
 8002842:	d107      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002852:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002876:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800287e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	429a      	cmp	r2, r3
 800288a:	d107      	bne.n	800289c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800289a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	069b      	lsls	r3, r3, #26
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fc0f 	bl	80020e8 <LL_ADC_IsEnabled>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 81aa 	bne.w	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	461a      	mov	r2, r3
 80028e0:	f7ff fb6e 	bl	8001fc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a87      	ldr	r2, [pc, #540]	@ (8002b08 <HAL_ADC_ConfigChannel+0x490>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	f040 809a 	bne.w	8002a24 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4984      	ldr	r1, [pc, #528]	@ (8002b0c <HAL_ADC_ConfigChannel+0x494>)
 80028fa:	428b      	cmp	r3, r1
 80028fc:	d147      	bne.n	800298e <HAL_ADC_ConfigChannel+0x316>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4983      	ldr	r1, [pc, #524]	@ (8002b10 <HAL_ADC_ConfigChannel+0x498>)
 8002904:	428b      	cmp	r3, r1
 8002906:	d040      	beq.n	800298a <HAL_ADC_ConfigChannel+0x312>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4981      	ldr	r1, [pc, #516]	@ (8002b14 <HAL_ADC_ConfigChannel+0x49c>)
 800290e:	428b      	cmp	r3, r1
 8002910:	d039      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x30e>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4980      	ldr	r1, [pc, #512]	@ (8002b18 <HAL_ADC_ConfigChannel+0x4a0>)
 8002918:	428b      	cmp	r3, r1
 800291a:	d032      	beq.n	8002982 <HAL_ADC_ConfigChannel+0x30a>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	497e      	ldr	r1, [pc, #504]	@ (8002b1c <HAL_ADC_ConfigChannel+0x4a4>)
 8002922:	428b      	cmp	r3, r1
 8002924:	d02b      	beq.n	800297e <HAL_ADC_ConfigChannel+0x306>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	497d      	ldr	r1, [pc, #500]	@ (8002b20 <HAL_ADC_ConfigChannel+0x4a8>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d024      	beq.n	800297a <HAL_ADC_ConfigChannel+0x302>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	497b      	ldr	r1, [pc, #492]	@ (8002b24 <HAL_ADC_ConfigChannel+0x4ac>)
 8002936:	428b      	cmp	r3, r1
 8002938:	d01d      	beq.n	8002976 <HAL_ADC_ConfigChannel+0x2fe>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	497a      	ldr	r1, [pc, #488]	@ (8002b28 <HAL_ADC_ConfigChannel+0x4b0>)
 8002940:	428b      	cmp	r3, r1
 8002942:	d016      	beq.n	8002972 <HAL_ADC_ConfigChannel+0x2fa>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4978      	ldr	r1, [pc, #480]	@ (8002b2c <HAL_ADC_ConfigChannel+0x4b4>)
 800294a:	428b      	cmp	r3, r1
 800294c:	d00f      	beq.n	800296e <HAL_ADC_ConfigChannel+0x2f6>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4977      	ldr	r1, [pc, #476]	@ (8002b30 <HAL_ADC_ConfigChannel+0x4b8>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d008      	beq.n	800296a <HAL_ADC_ConfigChannel+0x2f2>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4975      	ldr	r1, [pc, #468]	@ (8002b34 <HAL_ADC_ConfigChannel+0x4bc>)
 800295e:	428b      	cmp	r3, r1
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x2ee>
 8002962:	4b75      	ldr	r3, [pc, #468]	@ (8002b38 <HAL_ADC_ConfigChannel+0x4c0>)
 8002964:	e05a      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002966:	2300      	movs	r3, #0
 8002968:	e058      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 800296a:	4b74      	ldr	r3, [pc, #464]	@ (8002b3c <HAL_ADC_ConfigChannel+0x4c4>)
 800296c:	e056      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 800296e:	4b74      	ldr	r3, [pc, #464]	@ (8002b40 <HAL_ADC_ConfigChannel+0x4c8>)
 8002970:	e054      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002972:	4b6e      	ldr	r3, [pc, #440]	@ (8002b2c <HAL_ADC_ConfigChannel+0x4b4>)
 8002974:	e052      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002976:	4b6c      	ldr	r3, [pc, #432]	@ (8002b28 <HAL_ADC_ConfigChannel+0x4b0>)
 8002978:	e050      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 800297a:	4b72      	ldr	r3, [pc, #456]	@ (8002b44 <HAL_ADC_ConfigChannel+0x4cc>)
 800297c:	e04e      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 800297e:	4b72      	ldr	r3, [pc, #456]	@ (8002b48 <HAL_ADC_ConfigChannel+0x4d0>)
 8002980:	e04c      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002982:	4b72      	ldr	r3, [pc, #456]	@ (8002b4c <HAL_ADC_ConfigChannel+0x4d4>)
 8002984:	e04a      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002986:	4b72      	ldr	r3, [pc, #456]	@ (8002b50 <HAL_ADC_ConfigChannel+0x4d8>)
 8002988:	e048      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 800298a:	2301      	movs	r3, #1
 800298c:	e046      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4970      	ldr	r1, [pc, #448]	@ (8002b54 <HAL_ADC_ConfigChannel+0x4dc>)
 8002994:	428b      	cmp	r3, r1
 8002996:	d140      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x3a2>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	495c      	ldr	r1, [pc, #368]	@ (8002b10 <HAL_ADC_ConfigChannel+0x498>)
 800299e:	428b      	cmp	r3, r1
 80029a0:	d039      	beq.n	8002a16 <HAL_ADC_ConfigChannel+0x39e>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	495b      	ldr	r1, [pc, #364]	@ (8002b14 <HAL_ADC_ConfigChannel+0x49c>)
 80029a8:	428b      	cmp	r3, r1
 80029aa:	d032      	beq.n	8002a12 <HAL_ADC_ConfigChannel+0x39a>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4959      	ldr	r1, [pc, #356]	@ (8002b18 <HAL_ADC_ConfigChannel+0x4a0>)
 80029b2:	428b      	cmp	r3, r1
 80029b4:	d02b      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x396>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4958      	ldr	r1, [pc, #352]	@ (8002b1c <HAL_ADC_ConfigChannel+0x4a4>)
 80029bc:	428b      	cmp	r3, r1
 80029be:	d024      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0x392>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4956      	ldr	r1, [pc, #344]	@ (8002b20 <HAL_ADC_ConfigChannel+0x4a8>)
 80029c6:	428b      	cmp	r3, r1
 80029c8:	d01d      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x38e>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4955      	ldr	r1, [pc, #340]	@ (8002b24 <HAL_ADC_ConfigChannel+0x4ac>)
 80029d0:	428b      	cmp	r3, r1
 80029d2:	d016      	beq.n	8002a02 <HAL_ADC_ConfigChannel+0x38a>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4953      	ldr	r1, [pc, #332]	@ (8002b28 <HAL_ADC_ConfigChannel+0x4b0>)
 80029da:	428b      	cmp	r3, r1
 80029dc:	d00f      	beq.n	80029fe <HAL_ADC_ConfigChannel+0x386>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4952      	ldr	r1, [pc, #328]	@ (8002b2c <HAL_ADC_ConfigChannel+0x4b4>)
 80029e4:	428b      	cmp	r3, r1
 80029e6:	d008      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x382>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4951      	ldr	r1, [pc, #324]	@ (8002b34 <HAL_ADC_ConfigChannel+0x4bc>)
 80029ee:	428b      	cmp	r3, r1
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x37e>
 80029f2:	4b51      	ldr	r3, [pc, #324]	@ (8002b38 <HAL_ADC_ConfigChannel+0x4c0>)
 80029f4:	e012      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 80029f6:	2300      	movs	r3, #0
 80029f8:	e010      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 80029fa:	4b51      	ldr	r3, [pc, #324]	@ (8002b40 <HAL_ADC_ConfigChannel+0x4c8>)
 80029fc:	e00e      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 80029fe:	4b4b      	ldr	r3, [pc, #300]	@ (8002b2c <HAL_ADC_ConfigChannel+0x4b4>)
 8002a00:	e00c      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002a02:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <HAL_ADC_ConfigChannel+0x4b0>)
 8002a04:	e00a      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002a06:	4b4f      	ldr	r3, [pc, #316]	@ (8002b44 <HAL_ADC_ConfigChannel+0x4cc>)
 8002a08:	e008      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002b48 <HAL_ADC_ConfigChannel+0x4d0>)
 8002a0c:	e006      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8002b4c <HAL_ADC_ConfigChannel+0x4d4>)
 8002a10:	e004      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002a12:	4b4f      	ldr	r3, [pc, #316]	@ (8002b50 <HAL_ADC_ConfigChannel+0x4d8>)
 8002a14:	e002      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3a4>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f7ff f9ca 	bl	8001db8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f280 80fc 	bge.w	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a36      	ldr	r2, [pc, #216]	@ (8002b0c <HAL_ADC_ConfigChannel+0x494>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_ADC_ConfigChannel+0x3ca>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a45      	ldr	r2, [pc, #276]	@ (8002b54 <HAL_ADC_ConfigChannel+0x4dc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x3ce>
 8002a42:	4b45      	ldr	r3, [pc, #276]	@ (8002b58 <HAL_ADC_ConfigChannel+0x4e0>)
 8002a44:	e000      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x3d0>
 8002a46:	4b45      	ldr	r3, [pc, #276]	@ (8002b5c <HAL_ADC_ConfigChannel+0x4e4>)
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f9a7 	bl	8001d9c <LL_ADC_GetCommonPathInternalCh>
 8002a4e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2d      	ldr	r2, [pc, #180]	@ (8002b0c <HAL_ADC_ConfigChannel+0x494>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x3ec>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b54 <HAL_ADC_ConfigChannel+0x4dc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10e      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x40a>
 8002a64:	4829      	ldr	r0, [pc, #164]	@ (8002b0c <HAL_ADC_ConfigChannel+0x494>)
 8002a66:	f7ff fb3f 	bl	80020e8 <LL_ADC_IsEnabled>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4839      	ldr	r0, [pc, #228]	@ (8002b54 <HAL_ADC_ConfigChannel+0x4dc>)
 8002a6e:	f7ff fb3b 	bl	80020e8 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4323      	orrs	r3, r4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e008      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x41c>
 8002a82:	4837      	ldr	r0, [pc, #220]	@ (8002b60 <HAL_ADC_ConfigChannel+0x4e8>)
 8002a84:	f7ff fb30 	bl	80020e8 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80b3 	beq.w	8002c00 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a31      	ldr	r2, [pc, #196]	@ (8002b64 <HAL_ADC_ConfigChannel+0x4ec>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d165      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x4f8>
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d160      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b60 <HAL_ADC_ConfigChannel+0x4e8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	f040 80b6 	bne.w	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <HAL_ADC_ConfigChannel+0x494>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d004      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x456>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	@ (8002b54 <HAL_ADC_ConfigChannel+0x4dc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x45a>
 8002ace:	4a22      	ldr	r2, [pc, #136]	@ (8002b58 <HAL_ADC_ConfigChannel+0x4e0>)
 8002ad0:	e000      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x45c>
 8002ad2:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_ADC_ConfigChannel+0x4e4>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ada:	4619      	mov	r1, r3
 8002adc:	4610      	mov	r0, r2
 8002ade:	f7ff f94a 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae2:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <HAL_ADC_ConfigChannel+0x4f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	4a20      	ldr	r2, [pc, #128]	@ (8002b6c <HAL_ADC_ConfigChannel+0x4f4>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	3301      	adds	r3, #1
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002af6:	e002      	b.n	8002afe <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f9      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b04:	e08f      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
 8002b06:	bf00      	nop
 8002b08:	47ff0000 	.word	0x47ff0000
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	04300002 	.word	0x04300002
 8002b14:	08600004 	.word	0x08600004
 8002b18:	0c900008 	.word	0x0c900008
 8002b1c:	10c00010 	.word	0x10c00010
 8002b20:	14f00020 	.word	0x14f00020
 8002b24:	2a000400 	.word	0x2a000400
 8002b28:	2e300800 	.word	0x2e300800
 8002b2c:	32601000 	.word	0x32601000
 8002b30:	43210000 	.word	0x43210000
 8002b34:	4b840000 	.word	0x4b840000
 8002b38:	4fb80000 	.word	0x4fb80000
 8002b3c:	47520000 	.word	0x47520000
 8002b40:	36902000 	.word	0x36902000
 8002b44:	25b00200 	.word	0x25b00200
 8002b48:	21800100 	.word	0x21800100
 8002b4c:	1d500080 	.word	0x1d500080
 8002b50:	19200040 	.word	0x19200040
 8002b54:	40022100 	.word	0x40022100
 8002b58:	40022300 	.word	0x40022300
 8002b5c:	58026300 	.word	0x58026300
 8002b60:	58026000 	.word	0x58026000
 8002b64:	cb840000 	.word	0xcb840000
 8002b68:	24000000 	.word	0x24000000
 8002b6c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a31      	ldr	r2, [pc, #196]	@ (8002c3c <HAL_ADC_ConfigChannel+0x5c4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d11e      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x540>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d119      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d14b      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	@ (8002c44 <HAL_ADC_ConfigChannel+0x5cc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_ADC_ConfigChannel+0x52a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002c48 <HAL_ADC_ConfigChannel+0x5d0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x52e>
 8002ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c4c <HAL_ADC_ConfigChannel+0x5d4>)
 8002ba4:	e000      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x530>
 8002ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8002c50 <HAL_ADC_ConfigChannel+0x5d8>)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f7ff f8e0 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb6:	e036      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a25      	ldr	r2, [pc, #148]	@ (8002c54 <HAL_ADC_ConfigChannel+0x5dc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d131      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d12c      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_ADC_ConfigChannel+0x5c8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d127      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1a      	ldr	r2, [pc, #104]	@ (8002c44 <HAL_ADC_ConfigChannel+0x5cc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_ADC_ConfigChannel+0x572>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a18      	ldr	r2, [pc, #96]	@ (8002c48 <HAL_ADC_ConfigChannel+0x5d0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x576>
 8002bea:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <HAL_ADC_ConfigChannel+0x5d4>)
 8002bec:	e000      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x578>
 8002bee:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <HAL_ADC_ConfigChannel+0x5d8>)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7ff f8bc 	bl	8001d76 <LL_ADC_SetCommonPathInternalCh>
 8002bfe:	e012      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002c12:	e008      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3734      	adds	r7, #52	@ 0x34
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	c7520000 	.word	0xc7520000
 8002c40:	58026000 	.word	0x58026000
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40022100 	.word	0x40022100
 8002c4c:	40022300 	.word	0x40022300
 8002c50:	58026300 	.word	0x58026300
 8002c54:	cfb80000 	.word	0xcfb80000

08002c58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fa3f 	bl	80020e8 <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d16e      	bne.n	8002d4e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	4b38      	ldr	r3, [pc, #224]	@ (8002d58 <ADC_Enable+0x100>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	f043 0210 	orr.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e05a      	b.n	8002d50 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fa0e 	bl	80020c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ca4:	f7ff f818 	bl	8001cd8 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2b      	ldr	r2, [pc, #172]	@ (8002d5c <ADC_Enable+0x104>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <ADC_Enable+0x66>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a29      	ldr	r2, [pc, #164]	@ (8002d60 <ADC_Enable+0x108>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <ADC_Enable+0x6a>
 8002cbe:	4b29      	ldr	r3, [pc, #164]	@ (8002d64 <ADC_Enable+0x10c>)
 8002cc0:	e000      	b.n	8002cc4 <ADC_Enable+0x6c>
 8002cc2:	4b29      	ldr	r3, [pc, #164]	@ (8002d68 <ADC_Enable+0x110>)
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f99f 	bl	8002008 <LL_ADC_GetMultimode>
 8002cca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a23      	ldr	r2, [pc, #140]	@ (8002d60 <ADC_Enable+0x108>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d002      	beq.n	8002cdc <ADC_Enable+0x84>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e000      	b.n	8002cde <ADC_Enable+0x86>
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d5c <ADC_Enable+0x104>)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02c      	beq.n	8002d40 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d130      	bne.n	8002d4e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cec:	e028      	b.n	8002d40 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f9f8 	bl	80020e8 <LL_ADC_IsEnabled>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d104      	bne.n	8002d08 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff f9dc 	bl	80020c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d08:	f7fe ffe6 	bl	8001cd8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d914      	bls.n	8002d40 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d00d      	beq.n	8002d40 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f043 0210 	orr.w	r2, r3, #16
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e007      	b.n	8002d50 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d1cf      	bne.n	8002cee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	8000003f 	.word	0x8000003f
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	40022100 	.word	0x40022100
 8002d64:	40022300 	.word	0x40022300
 8002d68:	58026300 	.word	0x58026300

08002d6c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d14b      	bne.n	8002e1e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d021      	beq.n	8002de4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f88e 	bl	8001ec6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d032      	beq.n	8002e16 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d12b      	bne.n	8002e16 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11f      	bne.n	8002e16 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	655a      	str	r2, [r3, #84]	@ 0x54
 8002de2:	e018      	b.n	8002e16 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d111      	bne.n	8002e16 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d105      	bne.n	8002e16 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7fe f8a6 	bl	8000f68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e1c:	e00e      	b.n	8002e3c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff fc1a 	bl	8002664 <HAL_ADC_ErrorCallback>
}
 8002e30:	e004      	b.n	8002e3c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7ff fbfc 	bl	8002650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f7ff fbec 	bl	8002664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7a      	ldr	r2, [pc, #488]	@ (800308c <ADC_ConfigureBoostMode+0x1f8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <ADC_ConfigureBoostMode+0x1c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a79      	ldr	r2, [pc, #484]	@ (8003090 <ADC_ConfigureBoostMode+0x1fc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d109      	bne.n	8002ec4 <ADC_ConfigureBoostMode+0x30>
 8002eb0:	4b78      	ldr	r3, [pc, #480]	@ (8003094 <ADC_ConfigureBoostMode+0x200>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e008      	b.n	8002ed6 <ADC_ConfigureBoostMode+0x42>
 8002ec4:	4b74      	ldr	r3, [pc, #464]	@ (8003098 <ADC_ConfigureBoostMode+0x204>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01c      	beq.n	8002f14 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002eda:	f009 fe3b 	bl	800cb54 <HAL_RCC_GetHCLKFreq>
 8002ede:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ee8:	d010      	beq.n	8002f0c <ADC_ConfigureBoostMode+0x78>
 8002eea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002eee:	d873      	bhi.n	8002fd8 <ADC_ConfigureBoostMode+0x144>
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef4:	d002      	beq.n	8002efc <ADC_ConfigureBoostMode+0x68>
 8002ef6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002efa:	d16d      	bne.n	8002fd8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	60fb      	str	r3, [r7, #12]
        break;
 8002f0a:	e068      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	60fb      	str	r3, [r7, #12]
        break;
 8002f12:	e064      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f14:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f18:	f04f 0100 	mov.w	r1, #0
 8002f1c:	f00b f880 	bl	800e020 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f20:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f2a:	d051      	beq.n	8002fd0 <ADC_ConfigureBoostMode+0x13c>
 8002f2c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f30:	d854      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f32:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f36:	d047      	beq.n	8002fc8 <ADC_ConfigureBoostMode+0x134>
 8002f38:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f3c:	d84e      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f3e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f42:	d03d      	beq.n	8002fc0 <ADC_ConfigureBoostMode+0x12c>
 8002f44:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f48:	d848      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f4e:	d033      	beq.n	8002fb8 <ADC_ConfigureBoostMode+0x124>
 8002f50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f54:	d842      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f56:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f5a:	d029      	beq.n	8002fb0 <ADC_ConfigureBoostMode+0x11c>
 8002f5c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f60:	d83c      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f62:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f66:	d01a      	beq.n	8002f9e <ADC_ConfigureBoostMode+0x10a>
 8002f68:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f6c:	d836      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f6e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f72:	d014      	beq.n	8002f9e <ADC_ConfigureBoostMode+0x10a>
 8002f74:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f78:	d830      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f7e:	d00e      	beq.n	8002f9e <ADC_ConfigureBoostMode+0x10a>
 8002f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f84:	d82a      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f86:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f8a:	d008      	beq.n	8002f9e <ADC_ConfigureBoostMode+0x10a>
 8002f8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f90:	d824      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0x148>
 8002f92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f96:	d002      	beq.n	8002f9e <ADC_ConfigureBoostMode+0x10a>
 8002f98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f9c:	d11e      	bne.n	8002fdc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0c9b      	lsrs	r3, r3, #18
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	60fb      	str	r3, [r7, #12]
        break;
 8002fae:	e016      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]
        break;
 8002fb6:	e012      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	60fb      	str	r3, [r7, #12]
        break;
 8002fbe:	e00e      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	60fb      	str	r3, [r7, #12]
        break;
 8002fc6:	e00a      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	09db      	lsrs	r3, r3, #7
 8002fcc:	60fb      	str	r3, [r7, #12]
        break;
 8002fce:	e006      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	60fb      	str	r3, [r7, #12]
        break;
 8002fd6:	e002      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
        break;
 8002fd8:	bf00      	nop
 8002fda:	e000      	b.n	8002fde <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002fdc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002fde:	f7fe feab 	bl	8001d38 <HAL_GetREVID>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d815      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a2b      	ldr	r2, [pc, #172]	@ (800309c <ADC_ConfigureBoostMode+0x208>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d908      	bls.n	8003006 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003002:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003004:	e03e      	b.n	8003084 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003014:	609a      	str	r2, [r3, #8]
}
 8003016:	e035      	b.n	8003084 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a1f      	ldr	r2, [pc, #124]	@ (80030a0 <ADC_ConfigureBoostMode+0x20c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d808      	bhi.n	8003038 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003034:	609a      	str	r2, [r3, #8]
}
 8003036:	e025      	b.n	8003084 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a1a      	ldr	r2, [pc, #104]	@ (80030a4 <ADC_ConfigureBoostMode+0x210>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d80a      	bhi.n	8003056 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	e016      	b.n	8003084 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a13      	ldr	r2, [pc, #76]	@ (80030a8 <ADC_ConfigureBoostMode+0x214>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d80a      	bhi.n	8003074 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003070:	609a      	str	r2, [r3, #8]
}
 8003072:	e007      	b.n	8003084 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40022000 	.word	0x40022000
 8003090:	40022100 	.word	0x40022100
 8003094:	40022300 	.word	0x40022300
 8003098:	58026300 	.word	0x58026300
 800309c:	01312d00 	.word	0x01312d00
 80030a0:	005f5e10 	.word	0x005f5e10
 80030a4:	00bebc20 	.word	0x00bebc20
 80030a8:	017d7840 	.word	0x017d7840

080030ac <LL_ADC_IsEnabled>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <LL_ADC_IsEnabled+0x18>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <LL_ADC_IsEnabled+0x1a>
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d101      	bne.n	80030ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b09f      	sub	sp, #124	@ 0x7c
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003112:	2302      	movs	r3, #2
 8003114:	e0be      	b.n	8003294 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003122:	2300      	movs	r3, #0
 8003124:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5c      	ldr	r2, [pc, #368]	@ (800329c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d102      	bne.n	8003136 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003130:	4b5b      	ldr	r3, [pc, #364]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	e001      	b.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e09d      	b.n	8003294 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ffb9 	bl	80030d2 <LL_ADC_REG_IsConversionOngoing>
 8003160:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff ffb3 	bl	80030d2 <LL_ADC_REG_IsConversionOngoing>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d17f      	bne.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003172:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003174:	2b00      	cmp	r3, #0
 8003176:	d17c      	bne.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a47      	ldr	r2, [pc, #284]	@ (800329c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a46      	ldr	r2, [pc, #280]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800318c:	4b45      	ldr	r3, [pc, #276]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800318e:	e000      	b.n	8003192 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003190:	4b45      	ldr	r3, [pc, #276]	@ (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003192:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d039      	beq.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800319c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a3a      	ldr	r2, [pc, #232]	@ (800329c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d004      	beq.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a38      	ldr	r2, [pc, #224]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10e      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031c2:	4836      	ldr	r0, [pc, #216]	@ (800329c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031c4:	f7ff ff72 	bl	80030ac <LL_ADC_IsEnabled>
 80031c8:	4604      	mov	r4, r0
 80031ca:	4835      	ldr	r0, [pc, #212]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031cc:	f7ff ff6e 	bl	80030ac <LL_ADC_IsEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4323      	orrs	r3, r4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e008      	b.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80031e0:	4832      	ldr	r0, [pc, #200]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031e2:	f7ff ff63 	bl	80030ac <LL_ADC_IsEnabled>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d047      	beq.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b2d      	ldr	r3, [pc, #180]	@ (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	6811      	ldr	r1, [r2, #0]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	6892      	ldr	r2, [r2, #8]
 8003206:	430a      	orrs	r2, r1
 8003208:	431a      	orrs	r2, r3
 800320a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800320c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800320e:	e03a      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800321a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1e      	ldr	r2, [pc, #120]	@ (800329c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1d      	ldr	r2, [pc, #116]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d10e      	bne.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003230:	481a      	ldr	r0, [pc, #104]	@ (800329c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003232:	f7ff ff3b 	bl	80030ac <LL_ADC_IsEnabled>
 8003236:	4604      	mov	r4, r0
 8003238:	4819      	ldr	r0, [pc, #100]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800323a:	f7ff ff37 	bl	80030ac <LL_ADC_IsEnabled>
 800323e:	4603      	mov	r3, r0
 8003240:	4323      	orrs	r3, r4
 8003242:	2b00      	cmp	r3, #0
 8003244:	bf0c      	ite	eq
 8003246:	2301      	moveq	r3, #1
 8003248:	2300      	movne	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	e008      	b.n	8003260 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800324e:	4817      	ldr	r0, [pc, #92]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003250:	f7ff ff2c 	bl	80030ac <LL_ADC_IsEnabled>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800326a:	4013      	ands	r3, r2
 800326c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800326e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003270:	e009      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003284:	e000      	b.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003286:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003290:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003294:	4618      	mov	r0, r3
 8003296:	377c      	adds	r7, #124	@ 0x7c
 8003298:	46bd      	mov	sp, r7
 800329a:	bd90      	pop	{r4, r7, pc}
 800329c:	40022000 	.word	0x40022000
 80032a0:	40022100 	.word	0x40022100
 80032a4:	40022300 	.word	0x40022300
 80032a8:	58026300 	.word	0x58026300
 80032ac:	58026000 	.word	0x58026000
 80032b0:	fffff0e0 	.word	0xfffff0e0

080032b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <__NVIC_SetPriorityGrouping+0x40>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032dc:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e2:	4a04      	ldr	r2, [pc, #16]	@ (80032f4 <__NVIC_SetPriorityGrouping+0x40>)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	60d3      	str	r3, [r2, #12]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00
 80032f8:	05fa0000 	.word	0x05fa0000

080032fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <__NVIC_GetPriorityGrouping+0x18>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	f003 0307 	and.w	r3, r3, #7
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003326:	2b00      	cmp	r3, #0
 8003328:	db0b      	blt.n	8003342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	4907      	ldr	r1, [pc, #28]	@ (8003350 <__NVIC_EnableIRQ+0x38>)
 8003332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2001      	movs	r0, #1
 800333a:	fa00 f202 	lsl.w	r2, r0, r2
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000e100 	.word	0xe000e100

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db0a      	blt.n	800337e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	490c      	ldr	r1, [pc, #48]	@ (80033a0 <__NVIC_SetPriority+0x4c>)
 800336e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	440b      	add	r3, r1
 8003378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800337c:	e00a      	b.n	8003394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4908      	ldr	r1, [pc, #32]	@ (80033a4 <__NVIC_SetPriority+0x50>)
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3b04      	subs	r3, #4
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	440b      	add	r3, r1
 8003392:	761a      	strb	r2, [r3, #24]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000e100 	.word	0xe000e100
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	@ 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf28      	it	cs
 80033c6:	2304      	movcs	r3, #4
 80033c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d902      	bls.n	80033d8 <NVIC_EncodePriority+0x30>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3b03      	subs	r3, #3
 80033d6:	e000      	b.n	80033da <NVIC_EncodePriority+0x32>
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	401a      	ands	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43d9      	mvns	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	4313      	orrs	r3, r2
         );
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	@ 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003420:	d301      	bcc.n	8003426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003422:	2301      	movs	r3, #1
 8003424:	e00f      	b.n	8003446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <SysTick_Config+0x40>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342e:	210f      	movs	r1, #15
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	f7ff ff8e 	bl	8003354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003438:	4b05      	ldr	r3, [pc, #20]	@ (8003450 <SysTick_Config+0x40>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343e:	4b04      	ldr	r3, [pc, #16]	@ (8003450 <SysTick_Config+0x40>)
 8003440:	2207      	movs	r2, #7
 8003442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	e000e010 	.word	0xe000e010

08003454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff29 	bl	80032b4 <__NVIC_SetPriorityGrouping>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	4603      	mov	r3, r0
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff40 	bl	80032fc <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ff90 	bl	80033a8 <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff5f 	bl	8003354 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff33 	bl	8003318 <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa4 	bl	8003410 <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80034d8:	f3bf 8f5f 	dmb	sy
}
 80034dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_MPU_Disable+0x28>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	4a06      	ldr	r2, [pc, #24]	@ (80034fc <HAL_MPU_Disable+0x28>)
 80034e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_MPU_Disable+0x2c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00
 8003500:	e000ed90 	.word	0xe000ed90

08003504 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800350c:	4a0b      	ldr	r2, [pc, #44]	@ (800353c <HAL_MPU_Enable+0x38>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003516:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <HAL_MPU_Enable+0x3c>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <HAL_MPU_Enable+0x3c>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003522:	f3bf 8f4f 	dsb	sy
}
 8003526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003528:	f3bf 8f6f 	isb	sy
}
 800352c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000ed90 	.word	0xe000ed90
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	785a      	ldrb	r2, [r3, #1]
 8003550:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003552:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003554:	4b1a      	ldr	r3, [pc, #104]	@ (80035c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	4a19      	ldr	r2, [pc, #100]	@ (80035c0 <HAL_MPU_ConfigRegion+0x7c>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003560:	4a17      	ldr	r2, [pc, #92]	@ (80035c0 <HAL_MPU_ConfigRegion+0x7c>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7b1b      	ldrb	r3, [r3, #12]
 800356c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7adb      	ldrb	r3, [r3, #11]
 8003572:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003574:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7a9b      	ldrb	r3, [r3, #10]
 800357a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800357c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7b5b      	ldrb	r3, [r3, #13]
 8003582:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003584:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	7b9b      	ldrb	r3, [r3, #14]
 800358a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800358c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7bdb      	ldrb	r3, [r3, #15]
 8003592:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003594:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7a5b      	ldrb	r3, [r3, #9]
 800359a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800359c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7a1b      	ldrb	r3, [r3, #8]
 80035a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80035a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	7812      	ldrb	r2, [r2, #0]
 80035aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035ac:	4a04      	ldr	r2, [pc, #16]	@ (80035c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035b0:	6113      	str	r3, [r2, #16]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed90 	.word	0xe000ed90

080035c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80035cc:	f7fe fb84 	bl	8001cd8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e316      	b.n	8003c0a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a66      	ldr	r2, [pc, #408]	@ (800377c <HAL_DMA_Init+0x1b8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04a      	beq.n	800367c <HAL_DMA_Init+0xb8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a65      	ldr	r2, [pc, #404]	@ (8003780 <HAL_DMA_Init+0x1bc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d045      	beq.n	800367c <HAL_DMA_Init+0xb8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a63      	ldr	r2, [pc, #396]	@ (8003784 <HAL_DMA_Init+0x1c0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d040      	beq.n	800367c <HAL_DMA_Init+0xb8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a62      	ldr	r2, [pc, #392]	@ (8003788 <HAL_DMA_Init+0x1c4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d03b      	beq.n	800367c <HAL_DMA_Init+0xb8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a60      	ldr	r2, [pc, #384]	@ (800378c <HAL_DMA_Init+0x1c8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d036      	beq.n	800367c <HAL_DMA_Init+0xb8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a5f      	ldr	r2, [pc, #380]	@ (8003790 <HAL_DMA_Init+0x1cc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d031      	beq.n	800367c <HAL_DMA_Init+0xb8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5d      	ldr	r2, [pc, #372]	@ (8003794 <HAL_DMA_Init+0x1d0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02c      	beq.n	800367c <HAL_DMA_Init+0xb8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5c      	ldr	r2, [pc, #368]	@ (8003798 <HAL_DMA_Init+0x1d4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d027      	beq.n	800367c <HAL_DMA_Init+0xb8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a5a      	ldr	r2, [pc, #360]	@ (800379c <HAL_DMA_Init+0x1d8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d022      	beq.n	800367c <HAL_DMA_Init+0xb8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a59      	ldr	r2, [pc, #356]	@ (80037a0 <HAL_DMA_Init+0x1dc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d01d      	beq.n	800367c <HAL_DMA_Init+0xb8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a57      	ldr	r2, [pc, #348]	@ (80037a4 <HAL_DMA_Init+0x1e0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d018      	beq.n	800367c <HAL_DMA_Init+0xb8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a56      	ldr	r2, [pc, #344]	@ (80037a8 <HAL_DMA_Init+0x1e4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <HAL_DMA_Init+0xb8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a54      	ldr	r2, [pc, #336]	@ (80037ac <HAL_DMA_Init+0x1e8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00e      	beq.n	800367c <HAL_DMA_Init+0xb8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a53      	ldr	r2, [pc, #332]	@ (80037b0 <HAL_DMA_Init+0x1ec>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_DMA_Init+0xb8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a51      	ldr	r2, [pc, #324]	@ (80037b4 <HAL_DMA_Init+0x1f0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_DMA_Init+0xb8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a50      	ldr	r2, [pc, #320]	@ (80037b8 <HAL_DMA_Init+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_DMA_Init+0xbc>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_DMA_Init+0xbe>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 813b 	beq.w	80038fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a37      	ldr	r2, [pc, #220]	@ (800377c <HAL_DMA_Init+0x1b8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04a      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a36      	ldr	r2, [pc, #216]	@ (8003780 <HAL_DMA_Init+0x1bc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d045      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a34      	ldr	r2, [pc, #208]	@ (8003784 <HAL_DMA_Init+0x1c0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d040      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a33      	ldr	r2, [pc, #204]	@ (8003788 <HAL_DMA_Init+0x1c4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d03b      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a31      	ldr	r2, [pc, #196]	@ (800378c <HAL_DMA_Init+0x1c8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d036      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a30      	ldr	r2, [pc, #192]	@ (8003790 <HAL_DMA_Init+0x1cc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d031      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003794 <HAL_DMA_Init+0x1d0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02c      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003798 <HAL_DMA_Init+0x1d4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d027      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	@ (800379c <HAL_DMA_Init+0x1d8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <HAL_DMA_Init+0x1dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_Init+0x174>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a28      	ldr	r2, [pc, #160]	@ (80037a4 <HAL_DMA_Init+0x1e0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_DMA_Init+0x174>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a27      	ldr	r2, [pc, #156]	@ (80037a8 <HAL_DMA_Init+0x1e4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_DMA_Init+0x174>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a25      	ldr	r2, [pc, #148]	@ (80037ac <HAL_DMA_Init+0x1e8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_Init+0x174>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a24      	ldr	r2, [pc, #144]	@ (80037b0 <HAL_DMA_Init+0x1ec>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_DMA_Init+0x174>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a22      	ldr	r2, [pc, #136]	@ (80037b4 <HAL_DMA_Init+0x1f0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_DMA_Init+0x174>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a21      	ldr	r2, [pc, #132]	@ (80037b8 <HAL_DMA_Init+0x1f4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <HAL_DMA_Init+0x186>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e007      	b.n	800375a <HAL_DMA_Init+0x196>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800375a:	e02f      	b.n	80037bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800375c:	f7fe fabc 	bl	8001cd8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b05      	cmp	r3, #5
 8003768:	d928      	bls.n	80037bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2203      	movs	r2, #3
 8003774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e246      	b.n	8003c0a <HAL_DMA_Init+0x646>
 800377c:	40020010 	.word	0x40020010
 8003780:	40020028 	.word	0x40020028
 8003784:	40020040 	.word	0x40020040
 8003788:	40020058 	.word	0x40020058
 800378c:	40020070 	.word	0x40020070
 8003790:	40020088 	.word	0x40020088
 8003794:	400200a0 	.word	0x400200a0
 8003798:	400200b8 	.word	0x400200b8
 800379c:	40020410 	.word	0x40020410
 80037a0:	40020428 	.word	0x40020428
 80037a4:	40020440 	.word	0x40020440
 80037a8:	40020458 	.word	0x40020458
 80037ac:	40020470 	.word	0x40020470
 80037b0:	40020488 	.word	0x40020488
 80037b4:	400204a0 	.word	0x400204a0
 80037b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1c8      	bne.n	800375c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4b83      	ldr	r3, [pc, #524]	@ (80039e4 <HAL_DMA_Init+0x420>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80037e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	4313      	orrs	r3, r2
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003820:	4b71      	ldr	r3, [pc, #452]	@ (80039e8 <HAL_DMA_Init+0x424>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b71      	ldr	r3, [pc, #452]	@ (80039ec <HAL_DMA_Init+0x428>)
 8003826:	4013      	ands	r3, r2
 8003828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800382c:	d328      	bcc.n	8003880 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b28      	cmp	r3, #40	@ 0x28
 8003834:	d903      	bls.n	800383e <HAL_DMA_Init+0x27a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b2e      	cmp	r3, #46	@ 0x2e
 800383c:	d917      	bls.n	800386e <HAL_DMA_Init+0x2aa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b3e      	cmp	r3, #62	@ 0x3e
 8003844:	d903      	bls.n	800384e <HAL_DMA_Init+0x28a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b42      	cmp	r3, #66	@ 0x42
 800384c:	d90f      	bls.n	800386e <HAL_DMA_Init+0x2aa>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b46      	cmp	r3, #70	@ 0x46
 8003854:	d903      	bls.n	800385e <HAL_DMA_Init+0x29a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b48      	cmp	r3, #72	@ 0x48
 800385c:	d907      	bls.n	800386e <HAL_DMA_Init+0x2aa>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b4e      	cmp	r3, #78	@ 0x4e
 8003864:	d905      	bls.n	8003872 <HAL_DMA_Init+0x2ae>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b52      	cmp	r3, #82	@ 0x52
 800386c:	d801      	bhi.n	8003872 <HAL_DMA_Init+0x2ae>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_DMA_Init+0x2b0>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800387e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d117      	bne.n	80038da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f002 f82f 	bl	8005920 <DMA_CheckFifoParam>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2240      	movs	r2, #64	@ 0x40
 80038cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e197      	b.n	8003c0a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f001 ff6a 	bl	80057bc <DMA_CalcBaseAndBitshift>
 80038e8:	4603      	mov	r3, r0
 80038ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	223f      	movs	r2, #63	@ 0x3f
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	e0cd      	b.n	8003a9a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3b      	ldr	r2, [pc, #236]	@ (80039f0 <HAL_DMA_Init+0x42c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d022      	beq.n	800394e <HAL_DMA_Init+0x38a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a39      	ldr	r2, [pc, #228]	@ (80039f4 <HAL_DMA_Init+0x430>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01d      	beq.n	800394e <HAL_DMA_Init+0x38a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a38      	ldr	r2, [pc, #224]	@ (80039f8 <HAL_DMA_Init+0x434>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_DMA_Init+0x38a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a36      	ldr	r2, [pc, #216]	@ (80039fc <HAL_DMA_Init+0x438>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_DMA_Init+0x38a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a35      	ldr	r2, [pc, #212]	@ (8003a00 <HAL_DMA_Init+0x43c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_DMA_Init+0x38a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a33      	ldr	r2, [pc, #204]	@ (8003a04 <HAL_DMA_Init+0x440>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_DMA_Init+0x38a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a32      	ldr	r2, [pc, #200]	@ (8003a08 <HAL_DMA_Init+0x444>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_DMA_Init+0x38a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a30      	ldr	r2, [pc, #192]	@ (8003a0c <HAL_DMA_Init+0x448>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_DMA_Init+0x38e>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_DMA_Init+0x390>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8097 	beq.w	8003a88 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a24      	ldr	r2, [pc, #144]	@ (80039f0 <HAL_DMA_Init+0x42c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d021      	beq.n	80039a8 <HAL_DMA_Init+0x3e4>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a22      	ldr	r2, [pc, #136]	@ (80039f4 <HAL_DMA_Init+0x430>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01c      	beq.n	80039a8 <HAL_DMA_Init+0x3e4>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a21      	ldr	r2, [pc, #132]	@ (80039f8 <HAL_DMA_Init+0x434>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d017      	beq.n	80039a8 <HAL_DMA_Init+0x3e4>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1f      	ldr	r2, [pc, #124]	@ (80039fc <HAL_DMA_Init+0x438>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d012      	beq.n	80039a8 <HAL_DMA_Init+0x3e4>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1e      	ldr	r2, [pc, #120]	@ (8003a00 <HAL_DMA_Init+0x43c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00d      	beq.n	80039a8 <HAL_DMA_Init+0x3e4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1c      	ldr	r2, [pc, #112]	@ (8003a04 <HAL_DMA_Init+0x440>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d008      	beq.n	80039a8 <HAL_DMA_Init+0x3e4>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a08 <HAL_DMA_Init+0x444>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <HAL_DMA_Init+0x3e4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a19      	ldr	r2, [pc, #100]	@ (8003a0c <HAL_DMA_Init+0x448>)
 80039a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <HAL_DMA_Init+0x44c>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b40      	cmp	r3, #64	@ 0x40
 80039ce:	d021      	beq.n	8003a14 <HAL_DMA_Init+0x450>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b80      	cmp	r3, #128	@ 0x80
 80039d6:	d102      	bne.n	80039de <HAL_DMA_Init+0x41a>
 80039d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039dc:	e01b      	b.n	8003a16 <HAL_DMA_Init+0x452>
 80039de:	2300      	movs	r3, #0
 80039e0:	e019      	b.n	8003a16 <HAL_DMA_Init+0x452>
 80039e2:	bf00      	nop
 80039e4:	fe10803f 	.word	0xfe10803f
 80039e8:	5c001000 	.word	0x5c001000
 80039ec:	ffff0000 	.word	0xffff0000
 80039f0:	58025408 	.word	0x58025408
 80039f4:	5802541c 	.word	0x5802541c
 80039f8:	58025430 	.word	0x58025430
 80039fc:	58025444 	.word	0x58025444
 8003a00:	58025458 	.word	0x58025458
 8003a04:	5802546c 	.word	0x5802546c
 8003a08:	58025480 	.word	0x58025480
 8003a0c:	58025494 	.word	0x58025494
 8003a10:	fffe000f 	.word	0xfffe000f
 8003a14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003c14 <HAL_DMA_Init+0x650>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8003c18 <HAL_DMA_Init+0x654>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	009a      	lsls	r2, r3, #2
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f001 fea5 	bl	80057bc <DMA_CalcBaseAndBitshift>
 8003a72:	4603      	mov	r3, r0
 8003a74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2201      	movs	r2, #1
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	e008      	b.n	8003a9a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2240      	movs	r2, #64	@ 0x40
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2203      	movs	r2, #3
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0b7      	b.n	8003c0a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8003c1c <HAL_DMA_Init+0x658>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d072      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c20 <HAL_DMA_Init+0x65c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d06d      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c24 <HAL_DMA_Init+0x660>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d068      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5a      	ldr	r2, [pc, #360]	@ (8003c28 <HAL_DMA_Init+0x664>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d063      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a59      	ldr	r2, [pc, #356]	@ (8003c2c <HAL_DMA_Init+0x668>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d05e      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a57      	ldr	r2, [pc, #348]	@ (8003c30 <HAL_DMA_Init+0x66c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d059      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a56      	ldr	r2, [pc, #344]	@ (8003c34 <HAL_DMA_Init+0x670>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d054      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a54      	ldr	r2, [pc, #336]	@ (8003c38 <HAL_DMA_Init+0x674>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d04f      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a53      	ldr	r2, [pc, #332]	@ (8003c3c <HAL_DMA_Init+0x678>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d04a      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a51      	ldr	r2, [pc, #324]	@ (8003c40 <HAL_DMA_Init+0x67c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d045      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a50      	ldr	r2, [pc, #320]	@ (8003c44 <HAL_DMA_Init+0x680>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d040      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8003c48 <HAL_DMA_Init+0x684>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d03b      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a4d      	ldr	r2, [pc, #308]	@ (8003c4c <HAL_DMA_Init+0x688>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d036      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a4b      	ldr	r2, [pc, #300]	@ (8003c50 <HAL_DMA_Init+0x68c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d031      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c54 <HAL_DMA_Init+0x690>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d02c      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a48      	ldr	r2, [pc, #288]	@ (8003c58 <HAL_DMA_Init+0x694>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d027      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a47      	ldr	r2, [pc, #284]	@ (8003c5c <HAL_DMA_Init+0x698>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a45      	ldr	r2, [pc, #276]	@ (8003c60 <HAL_DMA_Init+0x69c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01d      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a44      	ldr	r2, [pc, #272]	@ (8003c64 <HAL_DMA_Init+0x6a0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d018      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a42      	ldr	r2, [pc, #264]	@ (8003c68 <HAL_DMA_Init+0x6a4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a41      	ldr	r2, [pc, #260]	@ (8003c6c <HAL_DMA_Init+0x6a8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a3f      	ldr	r2, [pc, #252]	@ (8003c70 <HAL_DMA_Init+0x6ac>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d009      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c74 <HAL_DMA_Init+0x6b0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_DMA_Init+0x5c6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3c      	ldr	r2, [pc, #240]	@ (8003c78 <HAL_DMA_Init+0x6b4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_DMA_Init+0x5ca>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_DMA_Init+0x5cc>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d032      	beq.n	8003bfa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f001 ff3f 	bl	8005a18 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b80      	cmp	r3, #128	@ 0x80
 8003ba0:	d102      	bne.n	8003ba8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003bbc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d010      	beq.n	8003be8 <HAL_DMA_Init+0x624>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d80c      	bhi.n	8003be8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 ffbc 	bl	8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	e008      	b.n	8003bfa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	a7fdabf8 	.word	0xa7fdabf8
 8003c18:	cccccccd 	.word	0xcccccccd
 8003c1c:	40020010 	.word	0x40020010
 8003c20:	40020028 	.word	0x40020028
 8003c24:	40020040 	.word	0x40020040
 8003c28:	40020058 	.word	0x40020058
 8003c2c:	40020070 	.word	0x40020070
 8003c30:	40020088 	.word	0x40020088
 8003c34:	400200a0 	.word	0x400200a0
 8003c38:	400200b8 	.word	0x400200b8
 8003c3c:	40020410 	.word	0x40020410
 8003c40:	40020428 	.word	0x40020428
 8003c44:	40020440 	.word	0x40020440
 8003c48:	40020458 	.word	0x40020458
 8003c4c:	40020470 	.word	0x40020470
 8003c50:	40020488 	.word	0x40020488
 8003c54:	400204a0 	.word	0x400204a0
 8003c58:	400204b8 	.word	0x400204b8
 8003c5c:	58025408 	.word	0x58025408
 8003c60:	5802541c 	.word	0x5802541c
 8003c64:	58025430 	.word	0x58025430
 8003c68:	58025444 	.word	0x58025444
 8003c6c:	58025458 	.word	0x58025458
 8003c70:	5802546c 	.word	0x5802546c
 8003c74:	58025480 	.word	0x58025480
 8003c78:	58025494 	.word	0x58025494

08003c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e226      	b.n	80040e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_DMA_Start_IT+0x2a>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e21f      	b.n	80040e6 <HAL_DMA_Start_IT+0x46a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	f040 820a 	bne.w	80040d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a68      	ldr	r2, [pc, #416]	@ (8003e70 <HAL_DMA_Start_IT+0x1f4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d04a      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a66      	ldr	r2, [pc, #408]	@ (8003e74 <HAL_DMA_Start_IT+0x1f8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d045      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a65      	ldr	r2, [pc, #404]	@ (8003e78 <HAL_DMA_Start_IT+0x1fc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d040      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a63      	ldr	r2, [pc, #396]	@ (8003e7c <HAL_DMA_Start_IT+0x200>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d03b      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a62      	ldr	r2, [pc, #392]	@ (8003e80 <HAL_DMA_Start_IT+0x204>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d036      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a60      	ldr	r2, [pc, #384]	@ (8003e84 <HAL_DMA_Start_IT+0x208>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003e88 <HAL_DMA_Start_IT+0x20c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d02c      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a5d      	ldr	r2, [pc, #372]	@ (8003e8c <HAL_DMA_Start_IT+0x210>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d027      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e90 <HAL_DMA_Start_IT+0x214>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5a      	ldr	r2, [pc, #360]	@ (8003e94 <HAL_DMA_Start_IT+0x218>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01d      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a59      	ldr	r2, [pc, #356]	@ (8003e98 <HAL_DMA_Start_IT+0x21c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a57      	ldr	r2, [pc, #348]	@ (8003e9c <HAL_DMA_Start_IT+0x220>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a56      	ldr	r2, [pc, #344]	@ (8003ea0 <HAL_DMA_Start_IT+0x224>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a54      	ldr	r2, [pc, #336]	@ (8003ea4 <HAL_DMA_Start_IT+0x228>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a53      	ldr	r2, [pc, #332]	@ (8003ea8 <HAL_DMA_Start_IT+0x22c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_DMA_Start_IT+0xee>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a51      	ldr	r2, [pc, #324]	@ (8003eac <HAL_DMA_Start_IT+0x230>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d108      	bne.n	8003d7c <HAL_DMA_Start_IT+0x100>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e007      	b.n	8003d8c <HAL_DMA_Start_IT+0x110>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f001 fb66 	bl	8005464 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a34      	ldr	r2, [pc, #208]	@ (8003e70 <HAL_DMA_Start_IT+0x1f4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d04a      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a33      	ldr	r2, [pc, #204]	@ (8003e74 <HAL_DMA_Start_IT+0x1f8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d045      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a31      	ldr	r2, [pc, #196]	@ (8003e78 <HAL_DMA_Start_IT+0x1fc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d040      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a30      	ldr	r2, [pc, #192]	@ (8003e7c <HAL_DMA_Start_IT+0x200>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d03b      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003e80 <HAL_DMA_Start_IT+0x204>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d036      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2d      	ldr	r2, [pc, #180]	@ (8003e84 <HAL_DMA_Start_IT+0x208>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d031      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <HAL_DMA_Start_IT+0x20c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d02c      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2a      	ldr	r2, [pc, #168]	@ (8003e8c <HAL_DMA_Start_IT+0x210>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d027      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a28      	ldr	r2, [pc, #160]	@ (8003e90 <HAL_DMA_Start_IT+0x214>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a27      	ldr	r2, [pc, #156]	@ (8003e94 <HAL_DMA_Start_IT+0x218>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d01d      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a25      	ldr	r2, [pc, #148]	@ (8003e98 <HAL_DMA_Start_IT+0x21c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a24      	ldr	r2, [pc, #144]	@ (8003e9c <HAL_DMA_Start_IT+0x220>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a22      	ldr	r2, [pc, #136]	@ (8003ea0 <HAL_DMA_Start_IT+0x224>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ea4 <HAL_DMA_Start_IT+0x228>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <HAL_DMA_Start_IT+0x22c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_DMA_Start_IT+0x1bc>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1e      	ldr	r2, [pc, #120]	@ (8003eac <HAL_DMA_Start_IT+0x230>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d101      	bne.n	8003e3c <HAL_DMA_Start_IT+0x1c0>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_DMA_Start_IT+0x1c2>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d036      	beq.n	8003eb0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 021e 	bic.w	r2, r3, #30
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0216 	orr.w	r2, r2, #22
 8003e54:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d03e      	beq.n	8003edc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0208 	orr.w	r2, r2, #8
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e035      	b.n	8003edc <HAL_DMA_Start_IT+0x260>
 8003e70:	40020010 	.word	0x40020010
 8003e74:	40020028 	.word	0x40020028
 8003e78:	40020040 	.word	0x40020040
 8003e7c:	40020058 	.word	0x40020058
 8003e80:	40020070 	.word	0x40020070
 8003e84:	40020088 	.word	0x40020088
 8003e88:	400200a0 	.word	0x400200a0
 8003e8c:	400200b8 	.word	0x400200b8
 8003e90:	40020410 	.word	0x40020410
 8003e94:	40020428 	.word	0x40020428
 8003e98:	40020440 	.word	0x40020440
 8003e9c:	40020458 	.word	0x40020458
 8003ea0:	40020470 	.word	0x40020470
 8003ea4:	40020488 	.word	0x40020488
 8003ea8:	400204a0 	.word	0x400204a0
 8003eac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 020e 	bic.w	r2, r3, #14
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 020a 	orr.w	r2, r2, #10
 8003ec2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0204 	orr.w	r2, r2, #4
 8003eda:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a83      	ldr	r2, [pc, #524]	@ (80040f0 <HAL_DMA_Start_IT+0x474>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d072      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a82      	ldr	r2, [pc, #520]	@ (80040f4 <HAL_DMA_Start_IT+0x478>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d06d      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a80      	ldr	r2, [pc, #512]	@ (80040f8 <HAL_DMA_Start_IT+0x47c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d068      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7f      	ldr	r2, [pc, #508]	@ (80040fc <HAL_DMA_Start_IT+0x480>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d063      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a7d      	ldr	r2, [pc, #500]	@ (8004100 <HAL_DMA_Start_IT+0x484>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d05e      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a7c      	ldr	r2, [pc, #496]	@ (8004104 <HAL_DMA_Start_IT+0x488>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d059      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a7a      	ldr	r2, [pc, #488]	@ (8004108 <HAL_DMA_Start_IT+0x48c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d054      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a79      	ldr	r2, [pc, #484]	@ (800410c <HAL_DMA_Start_IT+0x490>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d04f      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a77      	ldr	r2, [pc, #476]	@ (8004110 <HAL_DMA_Start_IT+0x494>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d04a      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a76      	ldr	r2, [pc, #472]	@ (8004114 <HAL_DMA_Start_IT+0x498>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d045      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a74      	ldr	r2, [pc, #464]	@ (8004118 <HAL_DMA_Start_IT+0x49c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d040      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a73      	ldr	r2, [pc, #460]	@ (800411c <HAL_DMA_Start_IT+0x4a0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d03b      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a71      	ldr	r2, [pc, #452]	@ (8004120 <HAL_DMA_Start_IT+0x4a4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d036      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a70      	ldr	r2, [pc, #448]	@ (8004124 <HAL_DMA_Start_IT+0x4a8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d031      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004128 <HAL_DMA_Start_IT+0x4ac>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02c      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a6d      	ldr	r2, [pc, #436]	@ (800412c <HAL_DMA_Start_IT+0x4b0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d027      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a6b      	ldr	r2, [pc, #428]	@ (8004130 <HAL_DMA_Start_IT+0x4b4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d022      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6a      	ldr	r2, [pc, #424]	@ (8004134 <HAL_DMA_Start_IT+0x4b8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d01d      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a68      	ldr	r2, [pc, #416]	@ (8004138 <HAL_DMA_Start_IT+0x4bc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d018      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a67      	ldr	r2, [pc, #412]	@ (800413c <HAL_DMA_Start_IT+0x4c0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a65      	ldr	r2, [pc, #404]	@ (8004140 <HAL_DMA_Start_IT+0x4c4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00e      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a64      	ldr	r2, [pc, #400]	@ (8004144 <HAL_DMA_Start_IT+0x4c8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a62      	ldr	r2, [pc, #392]	@ (8004148 <HAL_DMA_Start_IT+0x4cc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_DMA_Start_IT+0x350>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a61      	ldr	r2, [pc, #388]	@ (800414c <HAL_DMA_Start_IT+0x4d0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d101      	bne.n	8003fd0 <HAL_DMA_Start_IT+0x354>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_DMA_Start_IT+0x356>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01a      	beq.n	800400c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004006:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800400a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a37      	ldr	r2, [pc, #220]	@ (80040f0 <HAL_DMA_Start_IT+0x474>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d04a      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a36      	ldr	r2, [pc, #216]	@ (80040f4 <HAL_DMA_Start_IT+0x478>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d045      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a34      	ldr	r2, [pc, #208]	@ (80040f8 <HAL_DMA_Start_IT+0x47c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d040      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a33      	ldr	r2, [pc, #204]	@ (80040fc <HAL_DMA_Start_IT+0x480>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d03b      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a31      	ldr	r2, [pc, #196]	@ (8004100 <HAL_DMA_Start_IT+0x484>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d036      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a30      	ldr	r2, [pc, #192]	@ (8004104 <HAL_DMA_Start_IT+0x488>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d031      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2e      	ldr	r2, [pc, #184]	@ (8004108 <HAL_DMA_Start_IT+0x48c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02c      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2d      	ldr	r2, [pc, #180]	@ (800410c <HAL_DMA_Start_IT+0x490>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d027      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2b      	ldr	r2, [pc, #172]	@ (8004110 <HAL_DMA_Start_IT+0x494>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d022      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2a      	ldr	r2, [pc, #168]	@ (8004114 <HAL_DMA_Start_IT+0x498>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d01d      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a28      	ldr	r2, [pc, #160]	@ (8004118 <HAL_DMA_Start_IT+0x49c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d018      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a27      	ldr	r2, [pc, #156]	@ (800411c <HAL_DMA_Start_IT+0x4a0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d013      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a25      	ldr	r2, [pc, #148]	@ (8004120 <HAL_DMA_Start_IT+0x4a4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a24      	ldr	r2, [pc, #144]	@ (8004124 <HAL_DMA_Start_IT+0x4a8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a22      	ldr	r2, [pc, #136]	@ (8004128 <HAL_DMA_Start_IT+0x4ac>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_DMA_Start_IT+0x430>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a21      	ldr	r2, [pc, #132]	@ (800412c <HAL_DMA_Start_IT+0x4b0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d108      	bne.n	80040be <HAL_DMA_Start_IT+0x442>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e012      	b.n	80040e4 <HAL_DMA_Start_IT+0x468>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e009      	b.n	80040e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
 8004130:	58025408 	.word	0x58025408
 8004134:	5802541c 	.word	0x5802541c
 8004138:	58025430 	.word	0x58025430
 800413c:	58025444 	.word	0x58025444
 8004140:	58025458 	.word	0x58025458
 8004144:	5802546c 	.word	0x5802546c
 8004148:	58025480 	.word	0x58025480
 800414c:	58025494 	.word	0x58025494

08004150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e237      	b.n	80045d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d004      	beq.n	8004178 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2280      	movs	r2, #128	@ 0x80
 8004172:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e22c      	b.n	80045d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a5c      	ldr	r2, [pc, #368]	@ (80042f0 <HAL_DMA_Abort_IT+0x1a0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a5b      	ldr	r2, [pc, #364]	@ (80042f4 <HAL_DMA_Abort_IT+0x1a4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a59      	ldr	r2, [pc, #356]	@ (80042f8 <HAL_DMA_Abort_IT+0x1a8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a58      	ldr	r2, [pc, #352]	@ (80042fc <HAL_DMA_Abort_IT+0x1ac>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a56      	ldr	r2, [pc, #344]	@ (8004300 <HAL_DMA_Abort_IT+0x1b0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a55      	ldr	r2, [pc, #340]	@ (8004304 <HAL_DMA_Abort_IT+0x1b4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a53      	ldr	r2, [pc, #332]	@ (8004308 <HAL_DMA_Abort_IT+0x1b8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a52      	ldr	r2, [pc, #328]	@ (800430c <HAL_DMA_Abort_IT+0x1bc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a50      	ldr	r2, [pc, #320]	@ (8004310 <HAL_DMA_Abort_IT+0x1c0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a4f      	ldr	r2, [pc, #316]	@ (8004314 <HAL_DMA_Abort_IT+0x1c4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004318 <HAL_DMA_Abort_IT+0x1c8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a4c      	ldr	r2, [pc, #304]	@ (800431c <HAL_DMA_Abort_IT+0x1cc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004320 <HAL_DMA_Abort_IT+0x1d0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a49      	ldr	r2, [pc, #292]	@ (8004324 <HAL_DMA_Abort_IT+0x1d4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a47      	ldr	r2, [pc, #284]	@ (8004328 <HAL_DMA_Abort_IT+0x1d8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_DMA_Abort_IT+0xc8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a46      	ldr	r2, [pc, #280]	@ (800432c <HAL_DMA_Abort_IT+0x1dc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_DMA_Abort_IT+0xcc>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_DMA_Abort_IT+0xce>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8086 	beq.w	8004330 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2204      	movs	r2, #4
 8004228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2f      	ldr	r2, [pc, #188]	@ (80042f0 <HAL_DMA_Abort_IT+0x1a0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d04a      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2e      	ldr	r2, [pc, #184]	@ (80042f4 <HAL_DMA_Abort_IT+0x1a4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d045      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2c      	ldr	r2, [pc, #176]	@ (80042f8 <HAL_DMA_Abort_IT+0x1a8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d040      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2b      	ldr	r2, [pc, #172]	@ (80042fc <HAL_DMA_Abort_IT+0x1ac>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d03b      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a29      	ldr	r2, [pc, #164]	@ (8004300 <HAL_DMA_Abort_IT+0x1b0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d036      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a28      	ldr	r2, [pc, #160]	@ (8004304 <HAL_DMA_Abort_IT+0x1b4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d031      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a26      	ldr	r2, [pc, #152]	@ (8004308 <HAL_DMA_Abort_IT+0x1b8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d02c      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a25      	ldr	r2, [pc, #148]	@ (800430c <HAL_DMA_Abort_IT+0x1bc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d027      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a23      	ldr	r2, [pc, #140]	@ (8004310 <HAL_DMA_Abort_IT+0x1c0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d022      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a22      	ldr	r2, [pc, #136]	@ (8004314 <HAL_DMA_Abort_IT+0x1c4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d01d      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a20      	ldr	r2, [pc, #128]	@ (8004318 <HAL_DMA_Abort_IT+0x1c8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d018      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1f      	ldr	r2, [pc, #124]	@ (800431c <HAL_DMA_Abort_IT+0x1cc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004320 <HAL_DMA_Abort_IT+0x1d0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004324 <HAL_DMA_Abort_IT+0x1d4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d009      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004328 <HAL_DMA_Abort_IT+0x1d8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_DMA_Abort_IT+0x17c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a19      	ldr	r2, [pc, #100]	@ (800432c <HAL_DMA_Abort_IT+0x1dc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d108      	bne.n	80042de <HAL_DMA_Abort_IT+0x18e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e178      	b.n	80045d0 <HAL_DMA_Abort_IT+0x480>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e16f      	b.n	80045d0 <HAL_DMA_Abort_IT+0x480>
 80042f0:	40020010 	.word	0x40020010
 80042f4:	40020028 	.word	0x40020028
 80042f8:	40020040 	.word	0x40020040
 80042fc:	40020058 	.word	0x40020058
 8004300:	40020070 	.word	0x40020070
 8004304:	40020088 	.word	0x40020088
 8004308:	400200a0 	.word	0x400200a0
 800430c:	400200b8 	.word	0x400200b8
 8004310:	40020410 	.word	0x40020410
 8004314:	40020428 	.word	0x40020428
 8004318:	40020440 	.word	0x40020440
 800431c:	40020458 	.word	0x40020458
 8004320:	40020470 	.word	0x40020470
 8004324:	40020488 	.word	0x40020488
 8004328:	400204a0 	.word	0x400204a0
 800432c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 020e 	bic.w	r2, r2, #14
 800433e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6c      	ldr	r2, [pc, #432]	@ (80044f8 <HAL_DMA_Abort_IT+0x3a8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d04a      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6b      	ldr	r2, [pc, #428]	@ (80044fc <HAL_DMA_Abort_IT+0x3ac>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d045      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a69      	ldr	r2, [pc, #420]	@ (8004500 <HAL_DMA_Abort_IT+0x3b0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d040      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a68      	ldr	r2, [pc, #416]	@ (8004504 <HAL_DMA_Abort_IT+0x3b4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d03b      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a66      	ldr	r2, [pc, #408]	@ (8004508 <HAL_DMA_Abort_IT+0x3b8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d036      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a65      	ldr	r2, [pc, #404]	@ (800450c <HAL_DMA_Abort_IT+0x3bc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d031      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a63      	ldr	r2, [pc, #396]	@ (8004510 <HAL_DMA_Abort_IT+0x3c0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d02c      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a62      	ldr	r2, [pc, #392]	@ (8004514 <HAL_DMA_Abort_IT+0x3c4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d027      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a60      	ldr	r2, [pc, #384]	@ (8004518 <HAL_DMA_Abort_IT+0x3c8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d022      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a5f      	ldr	r2, [pc, #380]	@ (800451c <HAL_DMA_Abort_IT+0x3cc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d01d      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004520 <HAL_DMA_Abort_IT+0x3d0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d018      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a5c      	ldr	r2, [pc, #368]	@ (8004524 <HAL_DMA_Abort_IT+0x3d4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d013      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a5a      	ldr	r2, [pc, #360]	@ (8004528 <HAL_DMA_Abort_IT+0x3d8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00e      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a59      	ldr	r2, [pc, #356]	@ (800452c <HAL_DMA_Abort_IT+0x3dc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a57      	ldr	r2, [pc, #348]	@ (8004530 <HAL_DMA_Abort_IT+0x3e0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_DMA_Abort_IT+0x290>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a56      	ldr	r2, [pc, #344]	@ (8004534 <HAL_DMA_Abort_IT+0x3e4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <HAL_DMA_Abort_IT+0x2a2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e007      	b.n	8004402 <HAL_DMA_Abort_IT+0x2b2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3c      	ldr	r2, [pc, #240]	@ (80044f8 <HAL_DMA_Abort_IT+0x3a8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d072      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3a      	ldr	r2, [pc, #232]	@ (80044fc <HAL_DMA_Abort_IT+0x3ac>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d06d      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a39      	ldr	r2, [pc, #228]	@ (8004500 <HAL_DMA_Abort_IT+0x3b0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d068      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a37      	ldr	r2, [pc, #220]	@ (8004504 <HAL_DMA_Abort_IT+0x3b4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d063      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a36      	ldr	r2, [pc, #216]	@ (8004508 <HAL_DMA_Abort_IT+0x3b8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d05e      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a34      	ldr	r2, [pc, #208]	@ (800450c <HAL_DMA_Abort_IT+0x3bc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d059      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a33      	ldr	r2, [pc, #204]	@ (8004510 <HAL_DMA_Abort_IT+0x3c0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d054      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a31      	ldr	r2, [pc, #196]	@ (8004514 <HAL_DMA_Abort_IT+0x3c4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d04f      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a30      	ldr	r2, [pc, #192]	@ (8004518 <HAL_DMA_Abort_IT+0x3c8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d04a      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2e      	ldr	r2, [pc, #184]	@ (800451c <HAL_DMA_Abort_IT+0x3cc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d045      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a2d      	ldr	r2, [pc, #180]	@ (8004520 <HAL_DMA_Abort_IT+0x3d0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d040      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <HAL_DMA_Abort_IT+0x3d4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d03b      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2a      	ldr	r2, [pc, #168]	@ (8004528 <HAL_DMA_Abort_IT+0x3d8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d036      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a28      	ldr	r2, [pc, #160]	@ (800452c <HAL_DMA_Abort_IT+0x3dc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d031      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a27      	ldr	r2, [pc, #156]	@ (8004530 <HAL_DMA_Abort_IT+0x3e0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d02c      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a25      	ldr	r2, [pc, #148]	@ (8004534 <HAL_DMA_Abort_IT+0x3e4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d027      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a24      	ldr	r2, [pc, #144]	@ (8004538 <HAL_DMA_Abort_IT+0x3e8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d022      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a22      	ldr	r2, [pc, #136]	@ (800453c <HAL_DMA_Abort_IT+0x3ec>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01d      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <HAL_DMA_Abort_IT+0x3f0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d018      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004544 <HAL_DMA_Abort_IT+0x3f4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004548 <HAL_DMA_Abort_IT+0x3f8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1c      	ldr	r2, [pc, #112]	@ (800454c <HAL_DMA_Abort_IT+0x3fc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d009      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004550 <HAL_DMA_Abort_IT+0x400>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_DMA_Abort_IT+0x3a2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a19      	ldr	r2, [pc, #100]	@ (8004554 <HAL_DMA_Abort_IT+0x404>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d132      	bne.n	8004558 <HAL_DMA_Abort_IT+0x408>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e031      	b.n	800455a <HAL_DMA_Abort_IT+0x40a>
 80044f6:	bf00      	nop
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8
 8004538:	58025408 	.word	0x58025408
 800453c:	5802541c 	.word	0x5802541c
 8004540:	58025430 	.word	0x58025430
 8004544:	58025444 	.word	0x58025444
 8004548:	58025458 	.word	0x58025458
 800454c:	5802546c 	.word	0x5802546c
 8004550:	58025480 	.word	0x58025480
 8004554:	58025494 	.word	0x58025494
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d028      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800456c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004572:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800458c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop

080045dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	@ 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045e8:	4b67      	ldr	r3, [pc, #412]	@ (8004788 <HAL_DMA_IRQHandler+0x1ac>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a67      	ldr	r2, [pc, #412]	@ (800478c <HAL_DMA_IRQHandler+0x1b0>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0a9b      	lsrs	r3, r3, #10
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004600:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a5f      	ldr	r2, [pc, #380]	@ (8004790 <HAL_DMA_IRQHandler+0x1b4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d04a      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a5d      	ldr	r2, [pc, #372]	@ (8004794 <HAL_DMA_IRQHandler+0x1b8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d045      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5c      	ldr	r2, [pc, #368]	@ (8004798 <HAL_DMA_IRQHandler+0x1bc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d040      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a5a      	ldr	r2, [pc, #360]	@ (800479c <HAL_DMA_IRQHandler+0x1c0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d03b      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a59      	ldr	r2, [pc, #356]	@ (80047a0 <HAL_DMA_IRQHandler+0x1c4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d036      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a57      	ldr	r2, [pc, #348]	@ (80047a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d031      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a56      	ldr	r2, [pc, #344]	@ (80047a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d02c      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a54      	ldr	r2, [pc, #336]	@ (80047ac <HAL_DMA_IRQHandler+0x1d0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d027      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a53      	ldr	r2, [pc, #332]	@ (80047b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d022      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a51      	ldr	r2, [pc, #324]	@ (80047b4 <HAL_DMA_IRQHandler+0x1d8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01d      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a50      	ldr	r2, [pc, #320]	@ (80047b8 <HAL_DMA_IRQHandler+0x1dc>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d018      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a4e      	ldr	r2, [pc, #312]	@ (80047bc <HAL_DMA_IRQHandler+0x1e0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a4d      	ldr	r2, [pc, #308]	@ (80047c0 <HAL_DMA_IRQHandler+0x1e4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a4b      	ldr	r2, [pc, #300]	@ (80047c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4a      	ldr	r2, [pc, #296]	@ (80047c8 <HAL_DMA_IRQHandler+0x1ec>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_DMA_IRQHandler+0xd2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a48      	ldr	r2, [pc, #288]	@ (80047cc <HAL_DMA_IRQHandler+0x1f0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_DMA_IRQHandler+0xd6>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_DMA_IRQHandler+0xd8>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 842b 	beq.w	8004f10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2208      	movs	r2, #8
 80046c4:	409a      	lsls	r2, r3
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a2 	beq.w	8004814 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004790 <HAL_DMA_IRQHandler+0x1b4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d04a      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2d      	ldr	r2, [pc, #180]	@ (8004794 <HAL_DMA_IRQHandler+0x1b8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d045      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004798 <HAL_DMA_IRQHandler+0x1bc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d040      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <HAL_DMA_IRQHandler+0x1c0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d03b      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a28      	ldr	r2, [pc, #160]	@ (80047a0 <HAL_DMA_IRQHandler+0x1c4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d036      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a27      	ldr	r2, [pc, #156]	@ (80047a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d031      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a25      	ldr	r2, [pc, #148]	@ (80047a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d02c      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a24      	ldr	r2, [pc, #144]	@ (80047ac <HAL_DMA_IRQHandler+0x1d0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d027      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a22      	ldr	r2, [pc, #136]	@ (80047b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d022      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a21      	ldr	r2, [pc, #132]	@ (80047b4 <HAL_DMA_IRQHandler+0x1d8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d01d      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1f      	ldr	r2, [pc, #124]	@ (80047b8 <HAL_DMA_IRQHandler+0x1dc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d018      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1e      	ldr	r2, [pc, #120]	@ (80047bc <HAL_DMA_IRQHandler+0x1e0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1c      	ldr	r2, [pc, #112]	@ (80047c0 <HAL_DMA_IRQHandler+0x1e4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1b      	ldr	r2, [pc, #108]	@ (80047c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <HAL_DMA_IRQHandler+0x1ec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_DMA_IRQHandler+0x194>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <HAL_DMA_IRQHandler+0x1f0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d12f      	bne.n	80047d0 <HAL_DMA_IRQHandler+0x1f4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	bf14      	ite	ne
 800477e:	2301      	movne	r3, #1
 8004780:	2300      	moveq	r3, #0
 8004782:	b2db      	uxtb	r3, r3
 8004784:	e02e      	b.n	80047e4 <HAL_DMA_IRQHandler+0x208>
 8004786:	bf00      	nop
 8004788:	24000000 	.word	0x24000000
 800478c:	1b4e81b5 	.word	0x1b4e81b5
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d015      	beq.n	8004814 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0204 	bic.w	r2, r2, #4
 80047f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2208      	movs	r2, #8
 8004802:	409a      	lsls	r2, r3
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d06e      	beq.n	8004908 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a69      	ldr	r2, [pc, #420]	@ (80049d4 <HAL_DMA_IRQHandler+0x3f8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d04a      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a67      	ldr	r2, [pc, #412]	@ (80049d8 <HAL_DMA_IRQHandler+0x3fc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d045      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a66      	ldr	r2, [pc, #408]	@ (80049dc <HAL_DMA_IRQHandler+0x400>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d040      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a64      	ldr	r2, [pc, #400]	@ (80049e0 <HAL_DMA_IRQHandler+0x404>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d03b      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a63      	ldr	r2, [pc, #396]	@ (80049e4 <HAL_DMA_IRQHandler+0x408>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d036      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a61      	ldr	r2, [pc, #388]	@ (80049e8 <HAL_DMA_IRQHandler+0x40c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d031      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a60      	ldr	r2, [pc, #384]	@ (80049ec <HAL_DMA_IRQHandler+0x410>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d02c      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5e      	ldr	r2, [pc, #376]	@ (80049f0 <HAL_DMA_IRQHandler+0x414>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d027      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a5d      	ldr	r2, [pc, #372]	@ (80049f4 <HAL_DMA_IRQHandler+0x418>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a5b      	ldr	r2, [pc, #364]	@ (80049f8 <HAL_DMA_IRQHandler+0x41c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01d      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a5a      	ldr	r2, [pc, #360]	@ (80049fc <HAL_DMA_IRQHandler+0x420>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a58      	ldr	r2, [pc, #352]	@ (8004a00 <HAL_DMA_IRQHandler+0x424>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a57      	ldr	r2, [pc, #348]	@ (8004a04 <HAL_DMA_IRQHandler+0x428>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a55      	ldr	r2, [pc, #340]	@ (8004a08 <HAL_DMA_IRQHandler+0x42c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a54      	ldr	r2, [pc, #336]	@ (8004a0c <HAL_DMA_IRQHandler+0x430>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_DMA_IRQHandler+0x2ee>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a52      	ldr	r2, [pc, #328]	@ (8004a10 <HAL_DMA_IRQHandler+0x434>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10a      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x304>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e003      	b.n	80048e8 <HAL_DMA_IRQHandler+0x30c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00d      	beq.n	8004908 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004900:	f043 0202 	orr.w	r2, r3, #2
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	2204      	movs	r2, #4
 8004912:	409a      	lsls	r2, r3
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 808f 	beq.w	8004a3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a2c      	ldr	r2, [pc, #176]	@ (80049d4 <HAL_DMA_IRQHandler+0x3f8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2a      	ldr	r2, [pc, #168]	@ (80049d8 <HAL_DMA_IRQHandler+0x3fc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a29      	ldr	r2, [pc, #164]	@ (80049dc <HAL_DMA_IRQHandler+0x400>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a27      	ldr	r2, [pc, #156]	@ (80049e0 <HAL_DMA_IRQHandler+0x404>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a26      	ldr	r2, [pc, #152]	@ (80049e4 <HAL_DMA_IRQHandler+0x408>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a24      	ldr	r2, [pc, #144]	@ (80049e8 <HAL_DMA_IRQHandler+0x40c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a23      	ldr	r2, [pc, #140]	@ (80049ec <HAL_DMA_IRQHandler+0x410>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a21      	ldr	r2, [pc, #132]	@ (80049f0 <HAL_DMA_IRQHandler+0x414>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a20      	ldr	r2, [pc, #128]	@ (80049f4 <HAL_DMA_IRQHandler+0x418>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1e      	ldr	r2, [pc, #120]	@ (80049f8 <HAL_DMA_IRQHandler+0x41c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1d      	ldr	r2, [pc, #116]	@ (80049fc <HAL_DMA_IRQHandler+0x420>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <HAL_DMA_IRQHandler+0x424>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a04 <HAL_DMA_IRQHandler+0x428>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a18      	ldr	r2, [pc, #96]	@ (8004a08 <HAL_DMA_IRQHandler+0x42c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a17      	ldr	r2, [pc, #92]	@ (8004a0c <HAL_DMA_IRQHandler+0x430>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_DMA_IRQHandler+0x3e2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <HAL_DMA_IRQHandler+0x434>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d12a      	bne.n	8004a14 <HAL_DMA_IRQHandler+0x438>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e023      	b.n	8004a1c <HAL_DMA_IRQHandler+0x440>
 80049d4:	40020010 	.word	0x40020010
 80049d8:	40020028 	.word	0x40020028
 80049dc:	40020040 	.word	0x40020040
 80049e0:	40020058 	.word	0x40020058
 80049e4:	40020070 	.word	0x40020070
 80049e8:	40020088 	.word	0x40020088
 80049ec:	400200a0 	.word	0x400200a0
 80049f0:	400200b8 	.word	0x400200b8
 80049f4:	40020410 	.word	0x40020410
 80049f8:	40020428 	.word	0x40020428
 80049fc:	40020440 	.word	0x40020440
 8004a00:	40020458 	.word	0x40020458
 8004a04:	40020470 	.word	0x40020470
 8004a08:	40020488 	.word	0x40020488
 8004a0c:	400204a0 	.word	0x400204a0
 8004a10:	400204b8 	.word	0x400204b8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00d      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2204      	movs	r2, #4
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a34:	f043 0204 	orr.w	r2, r3, #4
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2210      	movs	r2, #16
 8004a46:	409a      	lsls	r2, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80a6 	beq.w	8004b9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a85      	ldr	r2, [pc, #532]	@ (8004c6c <HAL_DMA_IRQHandler+0x690>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d04a      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a83      	ldr	r2, [pc, #524]	@ (8004c70 <HAL_DMA_IRQHandler+0x694>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d045      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a82      	ldr	r2, [pc, #520]	@ (8004c74 <HAL_DMA_IRQHandler+0x698>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d040      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a80      	ldr	r2, [pc, #512]	@ (8004c78 <HAL_DMA_IRQHandler+0x69c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d03b      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a7f      	ldr	r2, [pc, #508]	@ (8004c7c <HAL_DMA_IRQHandler+0x6a0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d036      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a7d      	ldr	r2, [pc, #500]	@ (8004c80 <HAL_DMA_IRQHandler+0x6a4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d031      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a7c      	ldr	r2, [pc, #496]	@ (8004c84 <HAL_DMA_IRQHandler+0x6a8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d02c      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a7a      	ldr	r2, [pc, #488]	@ (8004c88 <HAL_DMA_IRQHandler+0x6ac>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d027      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a79      	ldr	r2, [pc, #484]	@ (8004c8c <HAL_DMA_IRQHandler+0x6b0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a77      	ldr	r2, [pc, #476]	@ (8004c90 <HAL_DMA_IRQHandler+0x6b4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a76      	ldr	r2, [pc, #472]	@ (8004c94 <HAL_DMA_IRQHandler+0x6b8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a74      	ldr	r2, [pc, #464]	@ (8004c98 <HAL_DMA_IRQHandler+0x6bc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a73      	ldr	r2, [pc, #460]	@ (8004c9c <HAL_DMA_IRQHandler+0x6c0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a71      	ldr	r2, [pc, #452]	@ (8004ca0 <HAL_DMA_IRQHandler+0x6c4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a70      	ldr	r2, [pc, #448]	@ (8004ca4 <HAL_DMA_IRQHandler+0x6c8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x516>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca8 <HAL_DMA_IRQHandler+0x6cc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10a      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x52c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf14      	ite	ne
 8004b00:	2301      	movne	r3, #1
 8004b02:	2300      	moveq	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e009      	b.n	8004b1c <HAL_DMA_IRQHandler+0x540>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	bf14      	ite	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	2300      	moveq	r3, #0
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d03e      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2210      	movs	r2, #16
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d018      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d108      	bne.n	8004b5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d024      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	4798      	blx	r3
 8004b5c:	e01f      	b.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01b      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	e016      	b.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d107      	bne.n	8004b8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0208 	bic.w	r2, r2, #8
 8004b8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba2:	f003 031f 	and.w	r3, r3, #31
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 8110 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c6c <HAL_DMA_IRQHandler+0x690>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d04a      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c70 <HAL_DMA_IRQHandler+0x694>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d045      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a29      	ldr	r2, [pc, #164]	@ (8004c74 <HAL_DMA_IRQHandler+0x698>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d040      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a28      	ldr	r2, [pc, #160]	@ (8004c78 <HAL_DMA_IRQHandler+0x69c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d03b      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a26      	ldr	r2, [pc, #152]	@ (8004c7c <HAL_DMA_IRQHandler+0x6a0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d036      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a25      	ldr	r2, [pc, #148]	@ (8004c80 <HAL_DMA_IRQHandler+0x6a4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d031      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	@ (8004c84 <HAL_DMA_IRQHandler+0x6a8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d02c      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a22      	ldr	r2, [pc, #136]	@ (8004c88 <HAL_DMA_IRQHandler+0x6ac>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d027      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a20      	ldr	r2, [pc, #128]	@ (8004c8c <HAL_DMA_IRQHandler+0x6b0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d022      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1f      	ldr	r2, [pc, #124]	@ (8004c90 <HAL_DMA_IRQHandler+0x6b4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d01d      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <HAL_DMA_IRQHandler+0x6b8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d018      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <HAL_DMA_IRQHandler+0x6bc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1a      	ldr	r2, [pc, #104]	@ (8004c9c <HAL_DMA_IRQHandler+0x6c0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a19      	ldr	r2, [pc, #100]	@ (8004ca0 <HAL_DMA_IRQHandler+0x6c4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a17      	ldr	r2, [pc, #92]	@ (8004ca4 <HAL_DMA_IRQHandler+0x6c8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x678>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a16      	ldr	r2, [pc, #88]	@ (8004ca8 <HAL_DMA_IRQHandler+0x6cc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d12b      	bne.n	8004cac <HAL_DMA_IRQHandler+0x6d0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2301      	movne	r3, #1
 8004c64:	2300      	moveq	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	e02a      	b.n	8004cc0 <HAL_DMA_IRQHandler+0x6e4>
 8004c6a:	bf00      	nop
 8004c6c:	40020010 	.word	0x40020010
 8004c70:	40020028 	.word	0x40020028
 8004c74:	40020040 	.word	0x40020040
 8004c78:	40020058 	.word	0x40020058
 8004c7c:	40020070 	.word	0x40020070
 8004c80:	40020088 	.word	0x40020088
 8004c84:	400200a0 	.word	0x400200a0
 8004c88:	400200b8 	.word	0x400200b8
 8004c8c:	40020410 	.word	0x40020410
 8004c90:	40020428 	.word	0x40020428
 8004c94:	40020440 	.word	0x40020440
 8004c98:	40020458 	.word	0x40020458
 8004c9c:	40020470 	.word	0x40020470
 8004ca0:	40020488 	.word	0x40020488
 8004ca4:	400204a0 	.word	0x400204a0
 8004ca8:	400204b8 	.word	0x400204b8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf14      	ite	ne
 8004cba:	2301      	movne	r3, #1
 8004cbc:	2300      	moveq	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8087 	beq.w	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	2220      	movs	r2, #32
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d139      	bne.n	8004d56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0216 	bic.w	r2, r2, #22
 8004cf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d103      	bne.n	8004d12 <HAL_DMA_IRQHandler+0x736>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0208 	bic.w	r2, r2, #8
 8004d20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	223f      	movs	r2, #63	@ 0x3f
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 834a 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
          }
          return;
 8004d54:	e344      	b.n	80053e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d02c      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
 8004d82:	e027      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d023      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
 8004d94:	e01e      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0210 	bic.w	r2, r2, #16
 8004db2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 8306 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8088 	beq.w	8004efc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2204      	movs	r2, #4
 8004df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7a      	ldr	r2, [pc, #488]	@ (8004fe4 <HAL_DMA_IRQHandler+0xa08>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d04a      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a79      	ldr	r2, [pc, #484]	@ (8004fe8 <HAL_DMA_IRQHandler+0xa0c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d045      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a77      	ldr	r2, [pc, #476]	@ (8004fec <HAL_DMA_IRQHandler+0xa10>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d040      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a76      	ldr	r2, [pc, #472]	@ (8004ff0 <HAL_DMA_IRQHandler+0xa14>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d03b      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a74      	ldr	r2, [pc, #464]	@ (8004ff4 <HAL_DMA_IRQHandler+0xa18>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d036      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a73      	ldr	r2, [pc, #460]	@ (8004ff8 <HAL_DMA_IRQHandler+0xa1c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d031      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a71      	ldr	r2, [pc, #452]	@ (8004ffc <HAL_DMA_IRQHandler+0xa20>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02c      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a70      	ldr	r2, [pc, #448]	@ (8005000 <HAL_DMA_IRQHandler+0xa24>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d027      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6e      	ldr	r2, [pc, #440]	@ (8005004 <HAL_DMA_IRQHandler+0xa28>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d022      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a6d      	ldr	r2, [pc, #436]	@ (8005008 <HAL_DMA_IRQHandler+0xa2c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d01d      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800500c <HAL_DMA_IRQHandler+0xa30>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6a      	ldr	r2, [pc, #424]	@ (8005010 <HAL_DMA_IRQHandler+0xa34>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a68      	ldr	r2, [pc, #416]	@ (8005014 <HAL_DMA_IRQHandler+0xa38>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a67      	ldr	r2, [pc, #412]	@ (8005018 <HAL_DMA_IRQHandler+0xa3c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a65      	ldr	r2, [pc, #404]	@ (800501c <HAL_DMA_IRQHandler+0xa40>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x8b8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a64      	ldr	r2, [pc, #400]	@ (8005020 <HAL_DMA_IRQHandler+0xa44>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d108      	bne.n	8004ea6 <HAL_DMA_IRQHandler+0x8ca>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e007      	b.n	8004eb6 <HAL_DMA_IRQHandler+0x8da>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d307      	bcc.n	8004ed2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f2      	bne.n	8004eb6 <HAL_DMA_IRQHandler+0x8da>
 8004ed0:	e000      	b.n	8004ed4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ed2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004eea:	e003      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8272 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
 8004f0e:	e26c      	b.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a43      	ldr	r2, [pc, #268]	@ (8005024 <HAL_DMA_IRQHandler+0xa48>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a42      	ldr	r2, [pc, #264]	@ (8005028 <HAL_DMA_IRQHandler+0xa4c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01d      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a40      	ldr	r2, [pc, #256]	@ (800502c <HAL_DMA_IRQHandler+0xa50>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a3f      	ldr	r2, [pc, #252]	@ (8005030 <HAL_DMA_IRQHandler+0xa54>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3d      	ldr	r2, [pc, #244]	@ (8005034 <HAL_DMA_IRQHandler+0xa58>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3c      	ldr	r2, [pc, #240]	@ (8005038 <HAL_DMA_IRQHandler+0xa5c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3a      	ldr	r2, [pc, #232]	@ (800503c <HAL_DMA_IRQHandler+0xa60>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x984>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a39      	ldr	r2, [pc, #228]	@ (8005040 <HAL_DMA_IRQHandler+0xa64>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x988>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <HAL_DMA_IRQHandler+0x98a>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 823f 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80cd 	beq.w	8005124 <HAL_DMA_IRQHandler+0xb48>
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80c7 	beq.w	8005124 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d049      	beq.n	8005044 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8210 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fcc:	e20a      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 8206 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fe0:	e200      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe08>
 8004fe2:	bf00      	nop
 8004fe4:	40020010 	.word	0x40020010
 8004fe8:	40020028 	.word	0x40020028
 8004fec:	40020040 	.word	0x40020040
 8004ff0:	40020058 	.word	0x40020058
 8004ff4:	40020070 	.word	0x40020070
 8004ff8:	40020088 	.word	0x40020088
 8004ffc:	400200a0 	.word	0x400200a0
 8005000:	400200b8 	.word	0x400200b8
 8005004:	40020410 	.word	0x40020410
 8005008:	40020428 	.word	0x40020428
 800500c:	40020440 	.word	0x40020440
 8005010:	40020458 	.word	0x40020458
 8005014:	40020470 	.word	0x40020470
 8005018:	40020488 	.word	0x40020488
 800501c:	400204a0 	.word	0x400204a0
 8005020:	400204b8 	.word	0x400204b8
 8005024:	58025408 	.word	0x58025408
 8005028:	5802541c 	.word	0x5802541c
 800502c:	58025430 	.word	0x58025430
 8005030:	58025444 	.word	0x58025444
 8005034:	58025458 	.word	0x58025458
 8005038:	5802546c 	.word	0x5802546c
 800503c:	58025480 	.word	0x58025480
 8005040:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d160      	bne.n	8005110 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7f      	ldr	r2, [pc, #508]	@ (8005250 <HAL_DMA_IRQHandler+0xc74>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d04a      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a7d      	ldr	r2, [pc, #500]	@ (8005254 <HAL_DMA_IRQHandler+0xc78>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d045      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a7c      	ldr	r2, [pc, #496]	@ (8005258 <HAL_DMA_IRQHandler+0xc7c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d040      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a7a      	ldr	r2, [pc, #488]	@ (800525c <HAL_DMA_IRQHandler+0xc80>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d03b      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a79      	ldr	r2, [pc, #484]	@ (8005260 <HAL_DMA_IRQHandler+0xc84>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d036      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a77      	ldr	r2, [pc, #476]	@ (8005264 <HAL_DMA_IRQHandler+0xc88>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d031      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a76      	ldr	r2, [pc, #472]	@ (8005268 <HAL_DMA_IRQHandler+0xc8c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d02c      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a74      	ldr	r2, [pc, #464]	@ (800526c <HAL_DMA_IRQHandler+0xc90>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a73      	ldr	r2, [pc, #460]	@ (8005270 <HAL_DMA_IRQHandler+0xc94>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a71      	ldr	r2, [pc, #452]	@ (8005274 <HAL_DMA_IRQHandler+0xc98>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a70      	ldr	r2, [pc, #448]	@ (8005278 <HAL_DMA_IRQHandler+0xc9c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a6e      	ldr	r2, [pc, #440]	@ (800527c <HAL_DMA_IRQHandler+0xca0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a6d      	ldr	r2, [pc, #436]	@ (8005280 <HAL_DMA_IRQHandler+0xca4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a6b      	ldr	r2, [pc, #428]	@ (8005284 <HAL_DMA_IRQHandler+0xca8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a6a      	ldr	r2, [pc, #424]	@ (8005288 <HAL_DMA_IRQHandler+0xcac>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_DMA_IRQHandler+0xb12>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a68      	ldr	r2, [pc, #416]	@ (800528c <HAL_DMA_IRQHandler+0xcb0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d108      	bne.n	8005100 <HAL_DMA_IRQHandler+0xb24>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0208 	bic.w	r2, r2, #8
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e007      	b.n	8005110 <HAL_DMA_IRQHandler+0xb34>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8165 	beq.w	80053e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005122:	e15f      	b.n	80053e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2202      	movs	r2, #2
 800512e:	409a      	lsls	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80c5 	beq.w	80052c4 <HAL_DMA_IRQHandler+0xce8>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80bf 	beq.w	80052c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2202      	movs	r2, #2
 8005150:	409a      	lsls	r2, r3
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d018      	beq.n	8005192 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 813a 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517c:	e134      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8130 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005190:	e12a      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 8089 	bne.w	80052b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005250 <HAL_DMA_IRQHandler+0xc74>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d04a      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a29      	ldr	r2, [pc, #164]	@ (8005254 <HAL_DMA_IRQHandler+0xc78>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d045      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a28      	ldr	r2, [pc, #160]	@ (8005258 <HAL_DMA_IRQHandler+0xc7c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d040      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a26      	ldr	r2, [pc, #152]	@ (800525c <HAL_DMA_IRQHandler+0xc80>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d03b      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a25      	ldr	r2, [pc, #148]	@ (8005260 <HAL_DMA_IRQHandler+0xc84>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d036      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a23      	ldr	r2, [pc, #140]	@ (8005264 <HAL_DMA_IRQHandler+0xc88>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d031      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a22      	ldr	r2, [pc, #136]	@ (8005268 <HAL_DMA_IRQHandler+0xc8c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d02c      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a20      	ldr	r2, [pc, #128]	@ (800526c <HAL_DMA_IRQHandler+0xc90>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d027      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <HAL_DMA_IRQHandler+0xc94>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d022      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005274 <HAL_DMA_IRQHandler+0xc98>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01d      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1c      	ldr	r2, [pc, #112]	@ (8005278 <HAL_DMA_IRQHandler+0xc9c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d018      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1a      	ldr	r2, [pc, #104]	@ (800527c <HAL_DMA_IRQHandler+0xca0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <HAL_DMA_IRQHandler+0xca4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00e      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a17      	ldr	r2, [pc, #92]	@ (8005284 <HAL_DMA_IRQHandler+0xca8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a16      	ldr	r2, [pc, #88]	@ (8005288 <HAL_DMA_IRQHandler+0xcac>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_DMA_IRQHandler+0xc62>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a14      	ldr	r2, [pc, #80]	@ (800528c <HAL_DMA_IRQHandler+0xcb0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d128      	bne.n	8005290 <HAL_DMA_IRQHandler+0xcb4>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0214 	bic.w	r2, r2, #20
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e027      	b.n	80052a0 <HAL_DMA_IRQHandler+0xcc4>
 8005250:	40020010 	.word	0x40020010
 8005254:	40020028 	.word	0x40020028
 8005258:	40020040 	.word	0x40020040
 800525c:	40020058 	.word	0x40020058
 8005260:	40020070 	.word	0x40020070
 8005264:	40020088 	.word	0x40020088
 8005268:	400200a0 	.word	0x400200a0
 800526c:	400200b8 	.word	0x400200b8
 8005270:	40020410 	.word	0x40020410
 8005274:	40020428 	.word	0x40020428
 8005278:	40020440 	.word	0x40020440
 800527c:	40020458 	.word	0x40020458
 8005280:	40020470 	.word	0x40020470
 8005284:	40020488 	.word	0x40020488
 8005288:	400204a0 	.word	0x400204a0
 800528c:	400204b8 	.word	0x400204b8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 020a 	bic.w	r2, r2, #10
 800529e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8097 	beq.w	80053e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052c2:	e091      	b.n	80053e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2208      	movs	r2, #8
 80052ce:	409a      	lsls	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8088 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8082 	beq.w	80053ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a41      	ldr	r2, [pc, #260]	@ (80053f0 <HAL_DMA_IRQHandler+0xe14>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d04a      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a3f      	ldr	r2, [pc, #252]	@ (80053f4 <HAL_DMA_IRQHandler+0xe18>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d045      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a3e      	ldr	r2, [pc, #248]	@ (80053f8 <HAL_DMA_IRQHandler+0xe1c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d040      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3c      	ldr	r2, [pc, #240]	@ (80053fc <HAL_DMA_IRQHandler+0xe20>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d03b      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a3b      	ldr	r2, [pc, #236]	@ (8005400 <HAL_DMA_IRQHandler+0xe24>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d036      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a39      	ldr	r2, [pc, #228]	@ (8005404 <HAL_DMA_IRQHandler+0xe28>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d031      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a38      	ldr	r2, [pc, #224]	@ (8005408 <HAL_DMA_IRQHandler+0xe2c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d02c      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a36      	ldr	r2, [pc, #216]	@ (800540c <HAL_DMA_IRQHandler+0xe30>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d027      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a35      	ldr	r2, [pc, #212]	@ (8005410 <HAL_DMA_IRQHandler+0xe34>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a33      	ldr	r2, [pc, #204]	@ (8005414 <HAL_DMA_IRQHandler+0xe38>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01d      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a32      	ldr	r2, [pc, #200]	@ (8005418 <HAL_DMA_IRQHandler+0xe3c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a30      	ldr	r2, [pc, #192]	@ (800541c <HAL_DMA_IRQHandler+0xe40>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2f      	ldr	r2, [pc, #188]	@ (8005420 <HAL_DMA_IRQHandler+0xe44>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2d      	ldr	r2, [pc, #180]	@ (8005424 <HAL_DMA_IRQHandler+0xe48>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2c      	ldr	r2, [pc, #176]	@ (8005428 <HAL_DMA_IRQHandler+0xe4c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_DMA_IRQHandler+0xdaa>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2a      	ldr	r2, [pc, #168]	@ (800542c <HAL_DMA_IRQHandler+0xe50>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d108      	bne.n	8005398 <HAL_DMA_IRQHandler+0xdbc>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 021c 	bic.w	r2, r2, #28
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e007      	b.n	80053a8 <HAL_DMA_IRQHandler+0xdcc>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 020e 	bic.w	r2, r2, #14
 80053a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2201      	movs	r2, #1
 80053b2:	409a      	lsls	r2, r3
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
 80053de:	e004      	b.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80053e0:	bf00      	nop
 80053e2:	e002      	b.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e4:	bf00      	nop
 80053e6:	e000      	b.n	80053ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053ea:	3728      	adds	r7, #40	@ 0x28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40020010 	.word	0x40020010
 80053f4:	40020028 	.word	0x40020028
 80053f8:	40020040 	.word	0x40020040
 80053fc:	40020058 	.word	0x40020058
 8005400:	40020070 	.word	0x40020070
 8005404:	40020088 	.word	0x40020088
 8005408:	400200a0 	.word	0x400200a0
 800540c:	400200b8 	.word	0x400200b8
 8005410:	40020410 	.word	0x40020410
 8005414:	40020428 	.word	0x40020428
 8005418:	40020440 	.word	0x40020440
 800541c:	40020458 	.word	0x40020458
 8005420:	40020470 	.word	0x40020470
 8005424:	40020488 	.word	0x40020488
 8005428:	400204a0 	.word	0x400204a0
 800542c:	400204b8 	.word	0x400204b8

08005430 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800543e:	b2db      	uxtb	r3, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005476:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a7f      	ldr	r2, [pc, #508]	@ (8005680 <DMA_SetConfig+0x21c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d072      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a7d      	ldr	r2, [pc, #500]	@ (8005684 <DMA_SetConfig+0x220>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d06d      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a7c      	ldr	r2, [pc, #496]	@ (8005688 <DMA_SetConfig+0x224>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d068      	beq.n	800556e <DMA_SetConfig+0x10a>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a7a      	ldr	r2, [pc, #488]	@ (800568c <DMA_SetConfig+0x228>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d063      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a79      	ldr	r2, [pc, #484]	@ (8005690 <DMA_SetConfig+0x22c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d05e      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a77      	ldr	r2, [pc, #476]	@ (8005694 <DMA_SetConfig+0x230>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d059      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a76      	ldr	r2, [pc, #472]	@ (8005698 <DMA_SetConfig+0x234>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d054      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a74      	ldr	r2, [pc, #464]	@ (800569c <DMA_SetConfig+0x238>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d04f      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a73      	ldr	r2, [pc, #460]	@ (80056a0 <DMA_SetConfig+0x23c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d04a      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a71      	ldr	r2, [pc, #452]	@ (80056a4 <DMA_SetConfig+0x240>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d045      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a70      	ldr	r2, [pc, #448]	@ (80056a8 <DMA_SetConfig+0x244>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d040      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a6e      	ldr	r2, [pc, #440]	@ (80056ac <DMA_SetConfig+0x248>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d03b      	beq.n	800556e <DMA_SetConfig+0x10a>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a6d      	ldr	r2, [pc, #436]	@ (80056b0 <DMA_SetConfig+0x24c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d036      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a6b      	ldr	r2, [pc, #428]	@ (80056b4 <DMA_SetConfig+0x250>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d031      	beq.n	800556e <DMA_SetConfig+0x10a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6a      	ldr	r2, [pc, #424]	@ (80056b8 <DMA_SetConfig+0x254>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d02c      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a68      	ldr	r2, [pc, #416]	@ (80056bc <DMA_SetConfig+0x258>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d027      	beq.n	800556e <DMA_SetConfig+0x10a>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a67      	ldr	r2, [pc, #412]	@ (80056c0 <DMA_SetConfig+0x25c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d022      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a65      	ldr	r2, [pc, #404]	@ (80056c4 <DMA_SetConfig+0x260>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01d      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a64      	ldr	r2, [pc, #400]	@ (80056c8 <DMA_SetConfig+0x264>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d018      	beq.n	800556e <DMA_SetConfig+0x10a>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a62      	ldr	r2, [pc, #392]	@ (80056cc <DMA_SetConfig+0x268>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d013      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a61      	ldr	r2, [pc, #388]	@ (80056d0 <DMA_SetConfig+0x26c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00e      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a5f      	ldr	r2, [pc, #380]	@ (80056d4 <DMA_SetConfig+0x270>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d009      	beq.n	800556e <DMA_SetConfig+0x10a>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a5e      	ldr	r2, [pc, #376]	@ (80056d8 <DMA_SetConfig+0x274>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <DMA_SetConfig+0x10a>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a5c      	ldr	r2, [pc, #368]	@ (80056dc <DMA_SetConfig+0x278>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d101      	bne.n	8005572 <DMA_SetConfig+0x10e>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <DMA_SetConfig+0x110>
 8005572:	2300      	movs	r3, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005580:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005592:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a39      	ldr	r2, [pc, #228]	@ (8005680 <DMA_SetConfig+0x21c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d04a      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a38      	ldr	r2, [pc, #224]	@ (8005684 <DMA_SetConfig+0x220>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d045      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a36      	ldr	r2, [pc, #216]	@ (8005688 <DMA_SetConfig+0x224>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d040      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a35      	ldr	r2, [pc, #212]	@ (800568c <DMA_SetConfig+0x228>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d03b      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a33      	ldr	r2, [pc, #204]	@ (8005690 <DMA_SetConfig+0x22c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d036      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a32      	ldr	r2, [pc, #200]	@ (8005694 <DMA_SetConfig+0x230>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d031      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a30      	ldr	r2, [pc, #192]	@ (8005698 <DMA_SetConfig+0x234>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d02c      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2f      	ldr	r2, [pc, #188]	@ (800569c <DMA_SetConfig+0x238>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d027      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2d      	ldr	r2, [pc, #180]	@ (80056a0 <DMA_SetConfig+0x23c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d022      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	@ (80056a4 <DMA_SetConfig+0x240>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d01d      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a2a      	ldr	r2, [pc, #168]	@ (80056a8 <DMA_SetConfig+0x244>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d018      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a29      	ldr	r2, [pc, #164]	@ (80056ac <DMA_SetConfig+0x248>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a27      	ldr	r2, [pc, #156]	@ (80056b0 <DMA_SetConfig+0x24c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00e      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a26      	ldr	r2, [pc, #152]	@ (80056b4 <DMA_SetConfig+0x250>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d009      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a24      	ldr	r2, [pc, #144]	@ (80056b8 <DMA_SetConfig+0x254>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <DMA_SetConfig+0x1d0>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a23      	ldr	r2, [pc, #140]	@ (80056bc <DMA_SetConfig+0x258>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d101      	bne.n	8005638 <DMA_SetConfig+0x1d4>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <DMA_SetConfig+0x1d6>
 8005638:	2300      	movs	r3, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d059      	beq.n	80056f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	223f      	movs	r2, #63	@ 0x3f
 8005648:	409a      	lsls	r2, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800565c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b40      	cmp	r3, #64	@ 0x40
 800566c:	d138      	bne.n	80056e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800567e:	e086      	b.n	800578e <DMA_SetConfig+0x32a>
 8005680:	40020010 	.word	0x40020010
 8005684:	40020028 	.word	0x40020028
 8005688:	40020040 	.word	0x40020040
 800568c:	40020058 	.word	0x40020058
 8005690:	40020070 	.word	0x40020070
 8005694:	40020088 	.word	0x40020088
 8005698:	400200a0 	.word	0x400200a0
 800569c:	400200b8 	.word	0x400200b8
 80056a0:	40020410 	.word	0x40020410
 80056a4:	40020428 	.word	0x40020428
 80056a8:	40020440 	.word	0x40020440
 80056ac:	40020458 	.word	0x40020458
 80056b0:	40020470 	.word	0x40020470
 80056b4:	40020488 	.word	0x40020488
 80056b8:	400204a0 	.word	0x400204a0
 80056bc:	400204b8 	.word	0x400204b8
 80056c0:	58025408 	.word	0x58025408
 80056c4:	5802541c 	.word	0x5802541c
 80056c8:	58025430 	.word	0x58025430
 80056cc:	58025444 	.word	0x58025444
 80056d0:	58025458 	.word	0x58025458
 80056d4:	5802546c 	.word	0x5802546c
 80056d8:	58025480 	.word	0x58025480
 80056dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]
}
 80056f0:	e04d      	b.n	800578e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a29      	ldr	r2, [pc, #164]	@ (800579c <DMA_SetConfig+0x338>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <DMA_SetConfig+0x2de>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a27      	ldr	r2, [pc, #156]	@ (80057a0 <DMA_SetConfig+0x33c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <DMA_SetConfig+0x2de>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a26      	ldr	r2, [pc, #152]	@ (80057a4 <DMA_SetConfig+0x340>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <DMA_SetConfig+0x2de>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a24      	ldr	r2, [pc, #144]	@ (80057a8 <DMA_SetConfig+0x344>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <DMA_SetConfig+0x2de>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a23      	ldr	r2, [pc, #140]	@ (80057ac <DMA_SetConfig+0x348>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <DMA_SetConfig+0x2de>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a21      	ldr	r2, [pc, #132]	@ (80057b0 <DMA_SetConfig+0x34c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <DMA_SetConfig+0x2de>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a20      	ldr	r2, [pc, #128]	@ (80057b4 <DMA_SetConfig+0x350>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <DMA_SetConfig+0x2de>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1e      	ldr	r2, [pc, #120]	@ (80057b8 <DMA_SetConfig+0x354>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <DMA_SetConfig+0x2e2>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <DMA_SetConfig+0x2e4>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d020      	beq.n	800578e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	f003 031f 	and.w	r3, r3, #31
 8005754:	2201      	movs	r2, #1
 8005756:	409a      	lsls	r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b40      	cmp	r3, #64	@ 0x40
 800576a:	d108      	bne.n	800577e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	60da      	str	r2, [r3, #12]
}
 800577c:	e007      	b.n	800578e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	60da      	str	r2, [r3, #12]
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	58025408 	.word	0x58025408
 80057a0:	5802541c 	.word	0x5802541c
 80057a4:	58025430 	.word	0x58025430
 80057a8:	58025444 	.word	0x58025444
 80057ac:	58025458 	.word	0x58025458
 80057b0:	5802546c 	.word	0x5802546c
 80057b4:	58025480 	.word	0x58025480
 80057b8:	58025494 	.word	0x58025494

080057bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a42      	ldr	r2, [pc, #264]	@ (80058d4 <DMA_CalcBaseAndBitshift+0x118>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d04a      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a41      	ldr	r2, [pc, #260]	@ (80058d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d045      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a3f      	ldr	r2, [pc, #252]	@ (80058dc <DMA_CalcBaseAndBitshift+0x120>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d040      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a3e      	ldr	r2, [pc, #248]	@ (80058e0 <DMA_CalcBaseAndBitshift+0x124>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d03b      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a3c      	ldr	r2, [pc, #240]	@ (80058e4 <DMA_CalcBaseAndBitshift+0x128>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d036      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3b      	ldr	r2, [pc, #236]	@ (80058e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d031      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a39      	ldr	r2, [pc, #228]	@ (80058ec <DMA_CalcBaseAndBitshift+0x130>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d02c      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a38      	ldr	r2, [pc, #224]	@ (80058f0 <DMA_CalcBaseAndBitshift+0x134>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d027      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a36      	ldr	r2, [pc, #216]	@ (80058f4 <DMA_CalcBaseAndBitshift+0x138>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d022      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a35      	ldr	r2, [pc, #212]	@ (80058f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d01d      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a33      	ldr	r2, [pc, #204]	@ (80058fc <DMA_CalcBaseAndBitshift+0x140>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d018      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a32      	ldr	r2, [pc, #200]	@ (8005900 <DMA_CalcBaseAndBitshift+0x144>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d013      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a30      	ldr	r2, [pc, #192]	@ (8005904 <DMA_CalcBaseAndBitshift+0x148>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00e      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2f      	ldr	r2, [pc, #188]	@ (8005908 <DMA_CalcBaseAndBitshift+0x14c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d009      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2d      	ldr	r2, [pc, #180]	@ (800590c <DMA_CalcBaseAndBitshift+0x150>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <DMA_CalcBaseAndBitshift+0xa8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a2c      	ldr	r2, [pc, #176]	@ (8005910 <DMA_CalcBaseAndBitshift+0x154>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d101      	bne.n	8005868 <DMA_CalcBaseAndBitshift+0xac>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <DMA_CalcBaseAndBitshift+0xae>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d024      	beq.n	80058b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	3b10      	subs	r3, #16
 8005876:	4a27      	ldr	r2, [pc, #156]	@ (8005914 <DMA_CalcBaseAndBitshift+0x158>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	4a24      	ldr	r2, [pc, #144]	@ (8005918 <DMA_CalcBaseAndBitshift+0x15c>)
 8005888:	5cd3      	ldrb	r3, [r2, r3]
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d908      	bls.n	80058a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	4b1f      	ldr	r3, [pc, #124]	@ (800591c <DMA_CalcBaseAndBitshift+0x160>)
 800589e:	4013      	ands	r3, r2
 80058a0:	1d1a      	adds	r2, r3, #4
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80058a6:	e00d      	b.n	80058c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <DMA_CalcBaseAndBitshift+0x160>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80058b6:	e005      	b.n	80058c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	40020010 	.word	0x40020010
 80058d8:	40020028 	.word	0x40020028
 80058dc:	40020040 	.word	0x40020040
 80058e0:	40020058 	.word	0x40020058
 80058e4:	40020070 	.word	0x40020070
 80058e8:	40020088 	.word	0x40020088
 80058ec:	400200a0 	.word	0x400200a0
 80058f0:	400200b8 	.word	0x400200b8
 80058f4:	40020410 	.word	0x40020410
 80058f8:	40020428 	.word	0x40020428
 80058fc:	40020440 	.word	0x40020440
 8005900:	40020458 	.word	0x40020458
 8005904:	40020470 	.word	0x40020470
 8005908:	40020488 	.word	0x40020488
 800590c:	400204a0 	.word	0x400204a0
 8005910:	400204b8 	.word	0x400204b8
 8005914:	aaaaaaab 	.word	0xaaaaaaab
 8005918:	08015a40 	.word	0x08015a40
 800591c:	fffffc00 	.word	0xfffffc00

08005920 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d120      	bne.n	8005976 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	2b03      	cmp	r3, #3
 800593a:	d858      	bhi.n	80059ee <DMA_CheckFifoParam+0xce>
 800593c:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <DMA_CheckFifoParam+0x24>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005955 	.word	0x08005955
 8005948:	08005967 	.word	0x08005967
 800594c:	08005955 	.word	0x08005955
 8005950:	080059ef 	.word	0x080059ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d048      	beq.n	80059f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005964:	e045      	b.n	80059f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800596e:	d142      	bne.n	80059f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005974:	e03f      	b.n	80059f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800597e:	d123      	bne.n	80059c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	2b03      	cmp	r3, #3
 8005986:	d838      	bhi.n	80059fa <DMA_CheckFifoParam+0xda>
 8005988:	a201      	add	r2, pc, #4	@ (adr r2, 8005990 <DMA_CheckFifoParam+0x70>)
 800598a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598e:	bf00      	nop
 8005990:	080059a1 	.word	0x080059a1
 8005994:	080059a7 	.word	0x080059a7
 8005998:	080059a1 	.word	0x080059a1
 800599c:	080059b9 	.word	0x080059b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
        break;
 80059a4:	e030      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d025      	beq.n	80059fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059b6:	e022      	b.n	80059fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059c0:	d11f      	bne.n	8005a02 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059c6:	e01c      	b.n	8005a02 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d902      	bls.n	80059d6 <DMA_CheckFifoParam+0xb6>
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d003      	beq.n	80059dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80059d4:	e018      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	73fb      	strb	r3, [r7, #15]
        break;
 80059da:	e015      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00e      	beq.n	8005a06 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
    break;
 80059ec:	e00b      	b.n	8005a06 <DMA_CheckFifoParam+0xe6>
        break;
 80059ee:	bf00      	nop
 80059f0:	e00a      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>
        break;
 80059f2:	bf00      	nop
 80059f4:	e008      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>
        break;
 80059f6:	bf00      	nop
 80059f8:	e006      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>
        break;
 80059fa:	bf00      	nop
 80059fc:	e004      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>
        break;
 80059fe:	bf00      	nop
 8005a00:	e002      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>
        break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <DMA_CheckFifoParam+0xe8>
    break;
 8005a06:	bf00      	nop
    }
  }

  return status;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop

08005a18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a38      	ldr	r2, [pc, #224]	@ (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a36      	ldr	r2, [pc, #216]	@ (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a35      	ldr	r2, [pc, #212]	@ (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a33      	ldr	r2, [pc, #204]	@ (8005b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a32      	ldr	r2, [pc, #200]	@ (8005b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a30      	ldr	r2, [pc, #192]	@ (8005b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2f      	ldr	r2, [pc, #188]	@ (8005b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2d      	ldr	r2, [pc, #180]	@ (8005b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d101      	bne.n	8005a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01a      	beq.n	8005ab6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	3b08      	subs	r3, #8
 8005a88:	4a28      	ldr	r2, [pc, #160]	@ (8005b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4b26      	ldr	r3, [pc, #152]	@ (8005b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a24      	ldr	r2, [pc, #144]	@ (8005b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005aa4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2201      	movs	r2, #1
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ab4:	e024      	b.n	8005b00 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	3b10      	subs	r3, #16
 8005abe:	4a1e      	ldr	r2, [pc, #120]	@ (8005b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4a1c      	ldr	r2, [pc, #112]	@ (8005b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d806      	bhi.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d902      	bls.n	8005ade <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3308      	adds	r3, #8
 8005adc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4b18      	ldr	r3, [pc, #96]	@ (8005b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005af0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	2201      	movs	r2, #1
 8005afa:	409a      	lsls	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b00:	bf00      	nop
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	58025408 	.word	0x58025408
 8005b10:	5802541c 	.word	0x5802541c
 8005b14:	58025430 	.word	0x58025430
 8005b18:	58025444 	.word	0x58025444
 8005b1c:	58025458 	.word	0x58025458
 8005b20:	5802546c 	.word	0x5802546c
 8005b24:	58025480 	.word	0x58025480
 8005b28:	58025494 	.word	0x58025494
 8005b2c:	cccccccd 	.word	0xcccccccd
 8005b30:	16009600 	.word	0x16009600
 8005b34:	58025880 	.word	0x58025880
 8005b38:	aaaaaaab 	.word	0xaaaaaaab
 8005b3c:	400204b8 	.word	0x400204b8
 8005b40:	4002040f 	.word	0x4002040f
 8005b44:	10008200 	.word	0x10008200
 8005b48:	40020880 	.word	0x40020880

08005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d04a      	beq.n	8005bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d847      	bhi.n	8005bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	@ (8005c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a24      	ldr	r2, [pc, #144]	@ (8005c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d01d      	beq.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a22      	ldr	r2, [pc, #136]	@ (8005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a21      	ldr	r2, [pc, #132]	@ (8005c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1f      	ldr	r2, [pc, #124]	@ (8005c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4b17      	ldr	r3, [pc, #92]	@ (8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a15      	ldr	r2, [pc, #84]	@ (8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005bd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8005bd6:	e009      	b.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4b14      	ldr	r3, [pc, #80]	@ (8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a11      	ldr	r2, [pc, #68]	@ (8005c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005bea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	58025408 	.word	0x58025408
 8005c08:	5802541c 	.word	0x5802541c
 8005c0c:	58025430 	.word	0x58025430
 8005c10:	58025444 	.word	0x58025444
 8005c14:	58025458 	.word	0x58025458
 8005c18:	5802546c 	.word	0x5802546c
 8005c1c:	58025480 	.word	0x58025480
 8005c20:	58025494 	.word	0x58025494
 8005c24:	1600963f 	.word	0x1600963f
 8005c28:	58025940 	.word	0x58025940
 8005c2c:	1000823f 	.word	0x1000823f
 8005c30:	40020940 	.word	0x40020940

08005c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b089      	sub	sp, #36	@ 0x24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c42:	4b89      	ldr	r3, [pc, #548]	@ (8005e68 <HAL_GPIO_Init+0x234>)
 8005c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c46:	e194      	b.n	8005f72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	fa01 f303 	lsl.w	r3, r1, r3
 8005c54:	4013      	ands	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8186 	beq.w	8005f6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d005      	beq.n	8005c78 <HAL_GPIO_Init+0x44>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d130      	bne.n	8005cda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	2203      	movs	r2, #3
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cae:	2201      	movs	r2, #1
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 0201 	and.w	r2, r3, #1
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d017      	beq.n	8005d16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d123      	bne.n	8005d6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	08da      	lsrs	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3208      	adds	r2, #8
 8005d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	220f      	movs	r2, #15
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	08da      	lsrs	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3208      	adds	r2, #8
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	2203      	movs	r2, #3
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0203 	and.w	r2, r3, #3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80e0 	beq.w	8005f6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dac:	4b2f      	ldr	r3, [pc, #188]	@ (8005e6c <HAL_GPIO_Init+0x238>)
 8005dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005db2:	4a2e      	ldr	r2, [pc, #184]	@ (8005e6c <HAL_GPIO_Init+0x238>)
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8005e6c <HAL_GPIO_Init+0x238>)
 8005dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dca:	4a29      	ldr	r2, [pc, #164]	@ (8005e70 <HAL_GPIO_Init+0x23c>)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	220f      	movs	r2, #15
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a20      	ldr	r2, [pc, #128]	@ (8005e74 <HAL_GPIO_Init+0x240>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d052      	beq.n	8005e9c <HAL_GPIO_Init+0x268>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e78 <HAL_GPIO_Init+0x244>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d031      	beq.n	8005e62 <HAL_GPIO_Init+0x22e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1e      	ldr	r2, [pc, #120]	@ (8005e7c <HAL_GPIO_Init+0x248>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d02b      	beq.n	8005e5e <HAL_GPIO_Init+0x22a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1d      	ldr	r2, [pc, #116]	@ (8005e80 <HAL_GPIO_Init+0x24c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d025      	beq.n	8005e5a <HAL_GPIO_Init+0x226>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1c      	ldr	r2, [pc, #112]	@ (8005e84 <HAL_GPIO_Init+0x250>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d01f      	beq.n	8005e56 <HAL_GPIO_Init+0x222>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1b      	ldr	r2, [pc, #108]	@ (8005e88 <HAL_GPIO_Init+0x254>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d019      	beq.n	8005e52 <HAL_GPIO_Init+0x21e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1a      	ldr	r2, [pc, #104]	@ (8005e8c <HAL_GPIO_Init+0x258>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <HAL_GPIO_Init+0x21a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a19      	ldr	r2, [pc, #100]	@ (8005e90 <HAL_GPIO_Init+0x25c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00d      	beq.n	8005e4a <HAL_GPIO_Init+0x216>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a18      	ldr	r2, [pc, #96]	@ (8005e94 <HAL_GPIO_Init+0x260>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d007      	beq.n	8005e46 <HAL_GPIO_Init+0x212>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a17      	ldr	r2, [pc, #92]	@ (8005e98 <HAL_GPIO_Init+0x264>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <HAL_GPIO_Init+0x20e>
 8005e3e:	2309      	movs	r3, #9
 8005e40:	e02d      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e42:	230a      	movs	r3, #10
 8005e44:	e02b      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e46:	2308      	movs	r3, #8
 8005e48:	e029      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e4a:	2307      	movs	r3, #7
 8005e4c:	e027      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e4e:	2306      	movs	r3, #6
 8005e50:	e025      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e52:	2305      	movs	r3, #5
 8005e54:	e023      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e56:	2304      	movs	r3, #4
 8005e58:	e021      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e01f      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e01d      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e01b      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e66:	bf00      	nop
 8005e68:	58000080 	.word	0x58000080
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	58000400 	.word	0x58000400
 8005e74:	58020000 	.word	0x58020000
 8005e78:	58020400 	.word	0x58020400
 8005e7c:	58020800 	.word	0x58020800
 8005e80:	58020c00 	.word	0x58020c00
 8005e84:	58021000 	.word	0x58021000
 8005e88:	58021400 	.word	0x58021400
 8005e8c:	58021800 	.word	0x58021800
 8005e90:	58021c00 	.word	0x58021c00
 8005e94:	58022000 	.word	0x58022000
 8005e98:	58022400 	.word	0x58022400
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	f002 0203 	and.w	r2, r2, #3
 8005ea4:	0092      	lsls	r2, r2, #2
 8005ea6:	4093      	lsls	r3, r2
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eae:	4938      	ldr	r1, [pc, #224]	@ (8005f90 <HAL_GPIO_Init+0x35c>)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4013      	ands	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f ae63 	bne.w	8005c48 <HAL_GPIO_Init+0x14>
  }
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	3724      	adds	r7, #36	@ 0x24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	58000400 	.word	0x58000400

08005f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e08b      	b.n	80060be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fb f920 	bl	8001200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2224      	movs	r2, #36	@ 0x24
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fe4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ff4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d107      	bne.n	800600e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	e006      	b.n	800601c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800601a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d108      	bne.n	8006036 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006032:	605a      	str	r2, [r3, #4]
 8006034:	e007      	b.n	8006046 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006044:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6859      	ldr	r1, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <HAL_I2C_Init+0x134>)
 8006052:	430b      	orrs	r3, r1
 8006054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	69d9      	ldr	r1, [r3, #28]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1a      	ldr	r2, [r3, #32]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	02008000 	.word	0x02008000

080060cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	461a      	mov	r2, r3
 80060d8:	460b      	mov	r3, r1
 80060da:	817b      	strh	r3, [r7, #10]
 80060dc:	4613      	mov	r3, r2
 80060de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	f040 80fd 	bne.w	80062e8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_I2C_Master_Transmit+0x30>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0f6      	b.n	80062ea <HAL_I2C_Master_Transmit+0x21e>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006104:	f7fb fde8 	bl	8001cd8 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	2319      	movs	r3, #25
 8006110:	2201      	movs	r2, #1
 8006112:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f002 f89e 	bl	8008258 <I2C_WaitOnFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e0e1      	b.n	80062ea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2221      	movs	r2, #33	@ 0x21
 800612a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2210      	movs	r2, #16
 8006132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	893a      	ldrh	r2, [r7, #8]
 8006146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006152:	b29b      	uxth	r3, r3
 8006154:	2bff      	cmp	r3, #255	@ 0xff
 8006156:	d906      	bls.n	8006166 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	22ff      	movs	r2, #255	@ 0xff
 800615c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800615e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e007      	b.n	8006176 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006170:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006174:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617a:	2b00      	cmp	r3, #0
 800617c:	d024      	beq.n	80061c8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	781a      	ldrb	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	3301      	adds	r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	8979      	ldrh	r1, [r7, #10]
 80061ba:	4b4e      	ldr	r3, [pc, #312]	@ (80062f4 <HAL_I2C_Master_Transmit+0x228>)
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f002 fa0d 	bl	80085e0 <I2C_TransferConfig>
 80061c6:	e066      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	8979      	ldrh	r1, [r7, #10]
 80061d0:	4b48      	ldr	r3, [pc, #288]	@ (80062f4 <HAL_I2C_Master_Transmit+0x228>)
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f002 fa02 	bl	80085e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80061dc:	e05b      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f002 f891 	bl	800830a <I2C_WaitOnTXISFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e07b      	b.n	80062ea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	781a      	ldrb	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d034      	beq.n	8006296 <HAL_I2C_Master_Transmit+0x1ca>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006230:	2b00      	cmp	r3, #0
 8006232:	d130      	bne.n	8006296 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	2200      	movs	r2, #0
 800623c:	2180      	movs	r1, #128	@ 0x80
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f002 f80a 	bl	8008258 <I2C_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e04d      	b.n	80062ea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006252:	b29b      	uxth	r3, r3
 8006254:	2bff      	cmp	r3, #255	@ 0xff
 8006256:	d90e      	bls.n	8006276 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	22ff      	movs	r2, #255	@ 0xff
 800625c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006262:	b2da      	uxtb	r2, r3
 8006264:	8979      	ldrh	r1, [r7, #10]
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f002 f9b6 	bl	80085e0 <I2C_TransferConfig>
 8006274:	e00f      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006284:	b2da      	uxtb	r2, r3
 8006286:	8979      	ldrh	r1, [r7, #10]
 8006288:	2300      	movs	r3, #0
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f002 f9a5 	bl	80085e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d19e      	bne.n	80061de <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	6a39      	ldr	r1, [r7, #32]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f002 f877 	bl	8008398 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e01a      	b.n	80062ea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2220      	movs	r2, #32
 80062ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b0c      	ldr	r3, [pc, #48]	@ (80062f8 <HAL_I2C_Master_Transmit+0x22c>)
 80062c8:	400b      	ands	r3, r1
 80062ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e000      	b.n	80062ea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80062e8:	2302      	movs	r3, #2
  }
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	80002000 	.word	0x80002000
 80062f8:	fe00e800 	.word	0xfe00e800

080062fc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	@ 0x28
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	461a      	mov	r2, r3
 8006308:	460b      	mov	r3, r1
 800630a:	817b      	strh	r3, [r7, #10]
 800630c:	4613      	mov	r3, r2
 800630e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b20      	cmp	r3, #32
 800631e:	f040 80ef 	bne.w	8006500 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006330:	d101      	bne.n	8006336 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8006332:	2302      	movs	r3, #2
 8006334:	e0e5      	b.n	8006502 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_I2C_Master_Transmit_DMA+0x48>
 8006340:	2302      	movs	r3, #2
 8006342:	e0de      	b.n	8006502 <HAL_I2C_Master_Transmit_DMA+0x206>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2221      	movs	r2, #33	@ 0x21
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2210      	movs	r2, #16
 8006358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	893a      	ldrh	r2, [r7, #8]
 800636c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4a66      	ldr	r2, [pc, #408]	@ (800650c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006372:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a66      	ldr	r2, [pc, #408]	@ (8006510 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006378:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	2bff      	cmp	r3, #255	@ 0xff
 8006382:	d906      	bls.n	8006392 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	22ff      	movs	r2, #255	@ 0xff
 8006388:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800638a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	e007      	b.n	80063a2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800639c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063a0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01a      	beq.n	80063e0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	781a      	ldrb	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d074      	beq.n	80064d2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d022      	beq.n	8006436 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f4:	4a47      	ldr	r2, [pc, #284]	@ (8006514 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80063f6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	4a46      	ldr	r2, [pc, #280]	@ (8006518 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80063fe:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006404:	2200      	movs	r2, #0
 8006406:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	2200      	movs	r2, #0
 800640e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006420:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006426:	f7fd fc29 	bl	8003c7c <HAL_DMA_Start_IT>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d13a      	bne.n	80064aa <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8006434:	e013      	b.n	800645e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e051      	b.n	8006502 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006462:	b2db      	uxtb	r3, r3
 8006464:	3301      	adds	r3, #1
 8006466:	b2da      	uxtb	r2, r3
 8006468:	8979      	ldrh	r1, [r7, #10]
 800646a:	4b2c      	ldr	r3, [pc, #176]	@ (800651c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f002 f8b5 	bl	80085e0 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006490:	2110      	movs	r1, #16
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f002 f8d6 	bl	8008644 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	e028      	b.n	80064fc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f043 0210 	orr.w	r2, r3, #16
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e017      	b.n	8006502 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a12      	ldr	r2, [pc, #72]	@ (8006520 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80064d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	8979      	ldrh	r1, [r7, #10]
 80064de:	4b0f      	ldr	r3, [pc, #60]	@ (800651c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f002 f87a 	bl	80085e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064f4:	2101      	movs	r1, #1
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f002 f8a4 	bl	8008644 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e000      	b.n	8006502 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006500:	2302      	movs	r3, #2
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	ffff0000 	.word	0xffff0000
 8006510:	08006b5b 	.word	0x08006b5b
 8006514:	08007f13 	.word	0x08007f13
 8006518:	08007fa9 	.word	0x08007fa9
 800651c:	80002000 	.word	0x80002000
 8006520:	080066eb 	.word	0x080066eb

08006524 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
  }
}
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d010      	beq.n	800659e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	09db      	lsrs	r3, r3, #7
 8006580:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658c:	f043 0201 	orr.w	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800659c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	0a9b      	lsrs	r3, r3, #10
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d010      	beq.n	80065cc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	09db      	lsrs	r3, r3, #7
 80065ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f043 0208 	orr.w	r2, r3, #8
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	0a5b      	lsrs	r3, r3, #9
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d010      	beq.n	80065fa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	09db      	lsrs	r3, r3, #7
 80065dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e8:	f043 0202 	orr.w	r2, r3, #2
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 030b 	and.w	r3, r3, #11
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 fb45 	bl	8007c9c <I2C_ITError>
  }
}
 8006612:	bf00      	nop
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
 8006676:	4613      	mov	r3, r2
 8006678:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b088      	sub	sp, #32
 80066ee:	af02      	add	r7, sp, #8
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <I2C_Master_ISR_IT+0x1e>
 8006704:	2302      	movs	r3, #2
 8006706:	e120      	b.n	800694a <I2C_Master_ISR_IT+0x260>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	091b      	lsrs	r3, r3, #4
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00d      	beq.n	8006744 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2210      	movs	r2, #16
 800672e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006734:	f043 0204 	orr.w	r2, r3, #4
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f001 fbc4 	bl	8007eca <I2C_Flush_TXDR>
 8006742:	e0ed      	b.n	8006920 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	089b      	lsrs	r3, r3, #2
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d023      	beq.n	8006798 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	089b      	lsrs	r3, r3, #2
 8006754:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01d      	beq.n	8006798 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0304 	bic.w	r3, r3, #4
 8006762:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006796:	e0c3      	b.n	8006920 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	099b      	lsrs	r3, r3, #6
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d12a      	bne.n	80067fa <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	085b      	lsrs	r3, r3, #1
 80067a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d024      	beq.n	80067fa <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01e      	beq.n	80067fa <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80ac 	beq.w	8006920 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	781a      	ldrb	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80067f8:	e092      	b.n	8006920 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	09db      	lsrs	r3, r3, #7
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d05d      	beq.n	80068c2 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	099b      	lsrs	r3, r3, #6
 800680a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800680e:	2b00      	cmp	r3, #0
 8006810:	d057      	beq.n	80068c2 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d040      	beq.n	800689e <I2C_Master_ISR_IT+0x1b4>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006820:	2b00      	cmp	r3, #0
 8006822:	d13c      	bne.n	800689e <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006830:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	2bff      	cmp	r3, #255	@ 0xff
 800683a:	d90e      	bls.n	800685a <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	22ff      	movs	r2, #255	@ 0xff
 8006840:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006846:	b2da      	uxtb	r2, r3
 8006848:	8a79      	ldrh	r1, [r7, #18]
 800684a:	2300      	movs	r3, #0
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f001 fec4 	bl	80085e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006858:	e032      	b.n	80068c0 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800686c:	d00b      	beq.n	8006886 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006872:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006878:	8a79      	ldrh	r1, [r7, #18]
 800687a:	2000      	movs	r0, #0
 800687c:	9000      	str	r0, [sp, #0]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f001 feae 	bl	80085e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006884:	e01c      	b.n	80068c0 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800688a:	b2da      	uxtb	r2, r3
 800688c:	8a79      	ldrh	r1, [r7, #18]
 800688e:	2300      	movs	r3, #0
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f001 fea2 	bl	80085e0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800689c:	e010      	b.n	80068c0 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068ac:	d003      	beq.n	80068b6 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fdde 	bl	8007470 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068b4:	e034      	b.n	8006920 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80068b6:	2140      	movs	r1, #64	@ 0x40
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f001 f9ef 	bl	8007c9c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068be:	e02f      	b.n	8006920 <I2C_Master_ISR_IT+0x236>
 80068c0:	e02e      	b.n	8006920 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d028      	beq.n	8006920 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d022      	beq.n	8006920 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d119      	bne.n	8006918 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068f2:	d015      	beq.n	8006920 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068fc:	d108      	bne.n	8006910 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800690c:	605a      	str	r2, [r3, #4]
 800690e:	e007      	b.n	8006920 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fdad 	bl	8007470 <I2C_ITMasterSeqCplt>
 8006916:	e003      	b.n	8006920 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006918:	2140      	movs	r1, #64	@ 0x40
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f001 f9be 	bl	8007c9c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006938:	6979      	ldr	r1, [r7, #20]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 fe34 	bl	80075a8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006962:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <I2C_Slave_ISR_IT+0x24>
 8006972:	2302      	movs	r3, #2
 8006974:	e0ed      	b.n	8006b52 <I2C_Slave_ISR_IT+0x200>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006996:	6939      	ldr	r1, [r7, #16]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fecf 	bl	800773c <I2C_ITSlaveCplt>
 800699e:	e0d3      	b.n	8006b48 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	091b      	lsrs	r3, r3, #4
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d04d      	beq.n	8006a48 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d047      	beq.n	8006a48 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d128      	bne.n	8006a14 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b28      	cmp	r3, #40	@ 0x28
 80069cc:	d108      	bne.n	80069e0 <I2C_Slave_ISR_IT+0x8e>
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069d4:	d104      	bne.n	80069e0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80069d6:	6939      	ldr	r1, [r7, #16]
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f001 f909 	bl	8007bf0 <I2C_ITListenCplt>
 80069de:	e032      	b.n	8006a46 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b29      	cmp	r3, #41	@ 0x29
 80069ea:	d10e      	bne.n	8006a0a <I2C_Slave_ISR_IT+0xb8>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069f2:	d00a      	beq.n	8006a0a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2210      	movs	r2, #16
 80069fa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f001 fa64 	bl	8007eca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fd71 	bl	80074ea <I2C_ITSlaveSeqCplt>
 8006a08:	e01d      	b.n	8006a46 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2210      	movs	r2, #16
 8006a10:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006a12:	e096      	b.n	8006b42 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2210      	movs	r2, #16
 8006a1a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a20:	f043 0204 	orr.w	r2, r3, #4
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <I2C_Slave_ISR_IT+0xe6>
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a34:	f040 8085 	bne.w	8006b42 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f001 f92c 	bl	8007c9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a44:	e07d      	b.n	8006b42 <I2C_Slave_ISR_IT+0x1f0>
 8006a46:	e07c      	b.n	8006b42 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	089b      	lsrs	r3, r3, #2
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d030      	beq.n	8006ab6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	089b      	lsrs	r3, r3, #2
 8006a58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d02a      	beq.n	8006ab6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d018      	beq.n	8006a9c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d14f      	bne.n	8006b46 <I2C_Slave_ISR_IT+0x1f4>
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006aac:	d04b      	beq.n	8006b46 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fd1b 	bl	80074ea <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006ab4:	e047      	b.n	8006b46 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	08db      	lsrs	r3, r3, #3
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	08db      	lsrs	r3, r3, #3
 8006ac6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006ace:	6939      	ldr	r1, [r7, #16]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fc49 	bl	8007368 <I2C_ITAddrCplt>
 8006ad6:	e037      	b.n	8006b48 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d031      	beq.n	8006b48 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d02b      	beq.n	8006b48 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d018      	beq.n	8006b2c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afe:	781a      	ldrb	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006b2a:	e00d      	b.n	8006b48 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b32:	d002      	beq.n	8006b3a <I2C_Slave_ISR_IT+0x1e8>
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fcd5 	bl	80074ea <I2C_ITSlaveSeqCplt>
 8006b40:	e002      	b.n	8006b48 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006b46:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b088      	sub	sp, #32
 8006b5e:	af02      	add	r7, sp, #8
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <I2C_Master_ISR_DMA+0x1a>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e0e1      	b.n	8006d38 <I2C_Master_ISR_DMA+0x1de>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	091b      	lsrs	r3, r3, #4
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d017      	beq.n	8006bb8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	091b      	lsrs	r3, r3, #4
 8006b8c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d011      	beq.n	8006bb8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2210      	movs	r2, #16
 8006b9a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba0:	f043 0204 	orr.w	r2, r3, #4
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ba8:	2120      	movs	r1, #32
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f001 fd4a 	bl	8008644 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f001 f98a 	bl	8007eca <I2C_Flush_TXDR>
 8006bb6:	e0ba      	b.n	8006d2e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	09db      	lsrs	r3, r3, #7
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d072      	beq.n	8006caa <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	099b      	lsrs	r3, r3, #6
 8006bc8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d06c      	beq.n	8006caa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bde:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d04e      	beq.n	8006c88 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bf6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2bff      	cmp	r3, #255	@ 0xff
 8006c00:	d906      	bls.n	8006c10 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	22ff      	movs	r2, #255	@ 0xff
 8006c06:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006c08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e010      	b.n	8006c32 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c22:	d003      	beq.n	8006c2c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	e002      	b.n	8006c32 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006c2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c30:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	8a79      	ldrh	r1, [r7, #18]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f001 fccd 	bl	80085e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b22      	cmp	r3, #34	@ 0x22
 8006c62:	d108      	bne.n	8006c76 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c72:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c74:	e05b      	b.n	8006d2e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c84:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c86:	e052      	b.n	8006d2e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c96:	d003      	beq.n	8006ca0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fbe9 	bl	8007470 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006c9e:	e046      	b.n	8006d2e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006ca0:	2140      	movs	r1, #64	@ 0x40
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fffa 	bl	8007c9c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006ca8:	e041      	b.n	8006d2e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	099b      	lsrs	r3, r3, #6
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d029      	beq.n	8006d0a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	099b      	lsrs	r3, r3, #6
 8006cba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d023      	beq.n	8006d0a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d119      	bne.n	8006d00 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cda:	d027      	beq.n	8006d2c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ce4:	d108      	bne.n	8006cf8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cf4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006cf6:	e019      	b.n	8006d2c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fbb9 	bl	8007470 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006cfe:	e015      	b.n	8006d2c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006d00:	2140      	movs	r1, #64	@ 0x40
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 ffca 	bl	8007c9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006d08:	e010      	b.n	8006d2c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fc3f 	bl	80075a8 <I2C_ITMasterCplt>
 8006d2a:	e000      	b.n	8006d2e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006d2c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006d4c:	4b92      	ldr	r3, [pc, #584]	@ (8006f98 <I2C_Mem_ISR_DMA+0x258>)
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <I2C_Mem_ISR_DMA+0x1e>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e118      	b.n	8006f90 <I2C_Mem_ISR_DMA+0x250>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d017      	beq.n	8006da2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d011      	beq.n	8006da2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2210      	movs	r2, #16
 8006d84:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8a:	f043 0204 	orr.w	r2, r3, #4
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d92:	2120      	movs	r1, #32
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f001 fc55 	bl	8008644 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f001 f895 	bl	8007eca <I2C_Flush_TXDR>
 8006da0:	e0f1      	b.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00f      	beq.n	8006dce <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006dc2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	651a      	str	r2, [r3, #80]	@ 0x50
 8006dcc:	e0db      	b.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	09db      	lsrs	r3, r3, #7
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d060      	beq.n	8006e9c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	099b      	lsrs	r3, r3, #6
 8006dde:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d05a      	beq.n	8006e9c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006de6:	2101      	movs	r1, #1
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f001 fcaf 	bl	800874c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006dee:	2110      	movs	r1, #16
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f001 fc27 	bl	8008644 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d048      	beq.n	8006e92 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2bff      	cmp	r3, #255	@ 0xff
 8006e08:	d910      	bls.n	8006e2c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	22ff      	movs	r2, #255	@ 0xff
 8006e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e14:	b299      	uxth	r1, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f001 fbdb 	bl	80085e0 <I2C_TransferConfig>
 8006e2a:	e011      	b.n	8006e50 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e3a:	b299      	uxth	r1, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	2300      	movs	r3, #0
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f001 fbc8 	bl	80085e0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b22      	cmp	r3, #34	@ 0x22
 8006e6c:	d108      	bne.n	8006e80 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006e7e:	e082      	b.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e8e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006e90:	e079      	b.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e92:	2140      	movs	r1, #64	@ 0x40
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 ff01 	bl	8007c9c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006e9a:	e074      	b.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	099b      	lsrs	r3, r3, #6
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d05e      	beq.n	8006f66 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	099b      	lsrs	r3, r3, #6
 8006eac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d058      	beq.n	8006f66 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f001 fc48 	bl	800874c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006ebc:	2110      	movs	r1, #16
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f001 fbc0 	bl	8008644 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b22      	cmp	r3, #34	@ 0x22
 8006ece:	d101      	bne.n	8006ed4 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8006ed0:	4b32      	ldr	r3, [pc, #200]	@ (8006f9c <I2C_Mem_ISR_DMA+0x25c>)
 8006ed2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2bff      	cmp	r3, #255	@ 0xff
 8006edc:	d910      	bls.n	8006f00 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	22ff      	movs	r2, #255	@ 0xff
 8006ee2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ee8:	b299      	uxth	r1, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f001 fb71 	bl	80085e0 <I2C_TransferConfig>
 8006efe:	e011      	b.n	8006f24 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f0e:	b299      	uxth	r1, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f001 fb5e 	bl	80085e0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b22      	cmp	r3, #34	@ 0x22
 8006f40:	d108      	bne.n	8006f54 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f50:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f52:	e018      	b.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f62:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f64:	e00f      	b.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d009      	beq.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 fb11 	bl	80075a8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	80002000 	.word	0x80002000
 8006f9c:	80002400 	.word	0x80002400

08006fa0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <I2C_Slave_ISR_DMA+0x24>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e1cc      	b.n	800735e <I2C_Slave_ISR_DMA+0x3be>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 fba8 	bl	800773c <I2C_ITSlaveCplt>
 8006fec:	e1b2      	b.n	8007354 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 819c 	beq.w	8007334 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8195 	beq.w	8007334 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	0b9b      	lsrs	r3, r3, #14
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0bdb      	lsrs	r3, r3, #15
 800701a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8181 	beq.w	8007326 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007028:	2b00      	cmp	r3, #0
 800702a:	d07c      	beq.n	8007126 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	0bdb      	lsrs	r3, r3, #15
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d076      	beq.n	8007126 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a75      	ldr	r2, [pc, #468]	@ (8007214 <I2C_Slave_ISR_DMA+0x274>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d059      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a73      	ldr	r2, [pc, #460]	@ (8007218 <I2C_Slave_ISR_DMA+0x278>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d053      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a71      	ldr	r2, [pc, #452]	@ (800721c <I2C_Slave_ISR_DMA+0x27c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d04d      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6f      	ldr	r2, [pc, #444]	@ (8007220 <I2C_Slave_ISR_DMA+0x280>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d047      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a6d      	ldr	r2, [pc, #436]	@ (8007224 <I2C_Slave_ISR_DMA+0x284>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d041      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a6b      	ldr	r2, [pc, #428]	@ (8007228 <I2C_Slave_ISR_DMA+0x288>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d03b      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a69      	ldr	r2, [pc, #420]	@ (800722c <I2C_Slave_ISR_DMA+0x28c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d035      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a67      	ldr	r2, [pc, #412]	@ (8007230 <I2C_Slave_ISR_DMA+0x290>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d02f      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a65      	ldr	r2, [pc, #404]	@ (8007234 <I2C_Slave_ISR_DMA+0x294>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d029      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a63      	ldr	r2, [pc, #396]	@ (8007238 <I2C_Slave_ISR_DMA+0x298>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d023      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a61      	ldr	r2, [pc, #388]	@ (800723c <I2C_Slave_ISR_DMA+0x29c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d01d      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a5f      	ldr	r2, [pc, #380]	@ (8007240 <I2C_Slave_ISR_DMA+0x2a0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d017      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a5d      	ldr	r2, [pc, #372]	@ (8007244 <I2C_Slave_ISR_DMA+0x2a4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d011      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a5b      	ldr	r2, [pc, #364]	@ (8007248 <I2C_Slave_ISR_DMA+0x2a8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00b      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a59      	ldr	r2, [pc, #356]	@ (800724c <I2C_Slave_ISR_DMA+0x2ac>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d005      	beq.n	80070f8 <I2C_Slave_ISR_DMA+0x158>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a57      	ldr	r2, [pc, #348]	@ (8007250 <I2C_Slave_ISR_DMA+0x2b0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d109      	bne.n	800710c <I2C_Slave_ISR_DMA+0x16c>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	bf0c      	ite	eq
 8007104:	2301      	moveq	r3, #1
 8007106:	2300      	movne	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	e008      	b.n	800711e <I2C_Slave_ISR_DMA+0x17e>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bf0c      	ite	eq
 8007118:	2301      	moveq	r3, #1
 800711a:	2300      	movne	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8007122:	2301      	movs	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 809f 	beq.w	800726e <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0b9b      	lsrs	r3, r3, #14
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8098 	beq.w	800726e <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a33      	ldr	r2, [pc, #204]	@ (8007214 <I2C_Slave_ISR_DMA+0x274>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d059      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a31      	ldr	r2, [pc, #196]	@ (8007218 <I2C_Slave_ISR_DMA+0x278>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d053      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a2f      	ldr	r2, [pc, #188]	@ (800721c <I2C_Slave_ISR_DMA+0x27c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d04d      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2d      	ldr	r2, [pc, #180]	@ (8007220 <I2C_Slave_ISR_DMA+0x280>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d047      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2b      	ldr	r2, [pc, #172]	@ (8007224 <I2C_Slave_ISR_DMA+0x284>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d041      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a29      	ldr	r2, [pc, #164]	@ (8007228 <I2C_Slave_ISR_DMA+0x288>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d03b      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a27      	ldr	r2, [pc, #156]	@ (800722c <I2C_Slave_ISR_DMA+0x28c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d035      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a25      	ldr	r2, [pc, #148]	@ (8007230 <I2C_Slave_ISR_DMA+0x290>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d02f      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a23      	ldr	r2, [pc, #140]	@ (8007234 <I2C_Slave_ISR_DMA+0x294>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d029      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a21      	ldr	r2, [pc, #132]	@ (8007238 <I2C_Slave_ISR_DMA+0x298>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d023      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1f      	ldr	r2, [pc, #124]	@ (800723c <I2C_Slave_ISR_DMA+0x29c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01d      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007240 <I2C_Slave_ISR_DMA+0x2a0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d017      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007244 <I2C_Slave_ISR_DMA+0x2a4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d011      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a19      	ldr	r2, [pc, #100]	@ (8007248 <I2C_Slave_ISR_DMA+0x2a8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00b      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a17      	ldr	r2, [pc, #92]	@ (800724c <I2C_Slave_ISR_DMA+0x2ac>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d005      	beq.n	80071fe <I2C_Slave_ISR_DMA+0x25e>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a15      	ldr	r2, [pc, #84]	@ (8007250 <I2C_Slave_ISR_DMA+0x2b0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d12a      	bne.n	8007254 <I2C_Slave_ISR_DMA+0x2b4>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	bf0c      	ite	eq
 800720a:	2301      	moveq	r3, #1
 800720c:	2300      	movne	r3, #0
 800720e:	b2db      	uxtb	r3, r3
 8007210:	e029      	b.n	8007266 <I2C_Slave_ISR_DMA+0x2c6>
 8007212:	bf00      	nop
 8007214:	40020010 	.word	0x40020010
 8007218:	40020028 	.word	0x40020028
 800721c:	40020040 	.word	0x40020040
 8007220:	40020058 	.word	0x40020058
 8007224:	40020070 	.word	0x40020070
 8007228:	40020088 	.word	0x40020088
 800722c:	400200a0 	.word	0x400200a0
 8007230:	400200b8 	.word	0x400200b8
 8007234:	40020410 	.word	0x40020410
 8007238:	40020428 	.word	0x40020428
 800723c:	40020440 	.word	0x40020440
 8007240:	40020458 	.word	0x40020458
 8007244:	40020470 	.word	0x40020470
 8007248:	40020488 	.word	0x40020488
 800724c:	400204a0 	.word	0x400204a0
 8007250:	400204b8 	.word	0x400204b8
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	bf0c      	ite	eq
 8007260:	2301      	moveq	r3, #1
 8007262:	2300      	movne	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800726a:	2301      	movs	r3, #1
 800726c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d128      	bne.n	80072c6 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b28      	cmp	r3, #40	@ 0x28
 800727e:	d108      	bne.n	8007292 <I2C_Slave_ISR_DMA+0x2f2>
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007286:	d104      	bne.n	8007292 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fcb0 	bl	8007bf0 <I2C_ITListenCplt>
 8007290:	e048      	b.n	8007324 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b29      	cmp	r3, #41	@ 0x29
 800729c:	d10e      	bne.n	80072bc <I2C_Slave_ISR_DMA+0x31c>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072a4:	d00a      	beq.n	80072bc <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2210      	movs	r2, #16
 80072ac:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fe0b 	bl	8007eca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f918 	bl	80074ea <I2C_ITSlaveSeqCplt>
 80072ba:	e033      	b.n	8007324 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2210      	movs	r2, #16
 80072c2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80072c4:	e034      	b.n	8007330 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2210      	movs	r2, #16
 80072cc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d2:	f043 0204 	orr.w	r2, r3, #4
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <I2C_Slave_ISR_DMA+0x350>
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072ee:	d11f      	bne.n	8007330 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	2b21      	cmp	r3, #33	@ 0x21
 80072f4:	d002      	beq.n	80072fc <I2C_Slave_ISR_DMA+0x35c>
 80072f6:	7dfb      	ldrb	r3, [r7, #23]
 80072f8:	2b29      	cmp	r3, #41	@ 0x29
 80072fa:	d103      	bne.n	8007304 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2221      	movs	r2, #33	@ 0x21
 8007300:	631a      	str	r2, [r3, #48]	@ 0x30
 8007302:	e008      	b.n	8007316 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b22      	cmp	r3, #34	@ 0x22
 8007308:	d002      	beq.n	8007310 <I2C_Slave_ISR_DMA+0x370>
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	2b2a      	cmp	r3, #42	@ 0x2a
 800730e:	d102      	bne.n	8007316 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2222      	movs	r2, #34	@ 0x22
 8007314:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731a:	4619      	mov	r1, r3
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fcbd 	bl	8007c9c <I2C_ITError>
      if (treatdmanack == 1U)
 8007322:	e005      	b.n	8007330 <I2C_Slave_ISR_DMA+0x390>
 8007324:	e004      	b.n	8007330 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2210      	movs	r2, #16
 800732c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800732e:	e011      	b.n	8007354 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8007330:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007332:	e00f      	b.n	8007354 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	08db      	lsrs	r3, r3, #3
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	08db      	lsrs	r3, r3, #3
 8007344:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f80a 	bl	8007368 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3720      	adds	r7, #32
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop

08007368 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800737e:	2b28      	cmp	r3, #40	@ 0x28
 8007380:	d16a      	bne.n	8007458 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	0c1b      	lsrs	r3, r3, #16
 800739a:	b29b      	uxth	r3, r3
 800739c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80073a0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073ae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80073bc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d138      	bne.n	8007438 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80073c6:	897b      	ldrh	r3, [r7, #10]
 80073c8:	09db      	lsrs	r3, r3, #7
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	89bb      	ldrh	r3, [r7, #12]
 80073ce:	4053      	eors	r3, r2
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f003 0306 	and.w	r3, r3, #6
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d11c      	bne.n	8007414 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80073da:	897b      	ldrh	r3, [r7, #10]
 80073dc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d13b      	bne.n	8007468 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2208      	movs	r2, #8
 80073fc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007406:	89ba      	ldrh	r2, [r7, #12]
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff f92c 	bl	800666a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007412:	e029      	b.n	8007468 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007414:	893b      	ldrh	r3, [r7, #8]
 8007416:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 f995 	bl	800874c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800742a:	89ba      	ldrh	r2, [r7, #12]
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff f91a 	bl	800666a <HAL_I2C_AddrCallback>
}
 8007436:	e017      	b.n	8007468 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007438:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 f985 	bl	800874c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800744a:	89ba      	ldrh	r2, [r7, #12]
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff f90a 	bl	800666a <HAL_I2C_AddrCallback>
}
 8007456:	e007      	b.n	8007468 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2208      	movs	r2, #8
 800745e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b21      	cmp	r3, #33	@ 0x21
 800748a:	d115      	bne.n	80074b8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2211      	movs	r2, #17
 8007498:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80074a0:	2101      	movs	r1, #1
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 f952 	bl	800874c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff f8b2 	bl	800661a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074b6:	e014      	b.n	80074e2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2212      	movs	r2, #18
 80074c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80074cc:	2102      	movs	r1, #2
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 f93c 	bl	800874c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff f8a6 	bl	800662e <HAL_I2C_MasterRxCpltCallback>
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	0b9b      	lsrs	r3, r3, #14
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e00d      	b.n	800753c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	0bdb      	lsrs	r3, r3, #15
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800753a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b29      	cmp	r3, #41	@ 0x29
 8007546:	d112      	bne.n	800756e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2228      	movs	r2, #40	@ 0x28
 800754c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2221      	movs	r2, #33	@ 0x21
 8007554:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007556:	2101      	movs	r1, #1
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f8f7 	bl	800874c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff f86b 	bl	8006642 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800756c:	e017      	b.n	800759e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b2a      	cmp	r3, #42	@ 0x2a
 8007578:	d111      	bne.n	800759e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2228      	movs	r2, #40	@ 0x28
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2222      	movs	r2, #34	@ 0x22
 8007586:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007588:	2102      	movs	r1, #2
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 f8de 	bl	800874c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff f85c 	bl	8006656 <HAL_I2C_SlaveRxCpltCallback>
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2220      	movs	r2, #32
 80075bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b21      	cmp	r3, #33	@ 0x21
 80075c8:	d107      	bne.n	80075da <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80075ca:	2101      	movs	r1, #1
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 f8bd 	bl	800874c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2211      	movs	r2, #17
 80075d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80075d8:	e00c      	b.n	80075f4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b22      	cmp	r3, #34	@ 0x22
 80075e4:	d106      	bne.n	80075f4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80075e6:	2102      	movs	r1, #2
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 f8af 	bl	800874c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2212      	movs	r2, #18
 80075f2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b4d      	ldr	r3, [pc, #308]	@ (8007734 <I2C_ITMasterCplt+0x18c>)
 8007600:	400b      	ands	r3, r1
 8007602:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a4a      	ldr	r2, [pc, #296]	@ (8007738 <I2C_ITMasterCplt+0x190>)
 800760e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	091b      	lsrs	r3, r3, #4
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d009      	beq.n	8007630 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2210      	movs	r2, #16
 8007622:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007628:	f043 0204 	orr.w	r2, r3, #4
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b60      	cmp	r3, #96	@ 0x60
 800763a:	d10b      	bne.n	8007654 <I2C_ITMasterCplt+0xac>
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	089b      	lsrs	r3, r3, #2
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764e:	b2db      	uxtb	r3, r3
 8007650:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007652:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc38 	bl	8007eca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b60      	cmp	r3, #96	@ 0x60
 800766a:	d002      	beq.n	8007672 <I2C_ITMasterCplt+0xca>
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d006      	beq.n	8007680 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fb0f 	bl	8007c9c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800767e:	e054      	b.n	800772a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b21      	cmp	r3, #33	@ 0x21
 800768a:	d124      	bne.n	80076d6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b40      	cmp	r3, #64	@ 0x40
 80076a4:	d10b      	bne.n	80076be <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fe ffef 	bl	800669a <HAL_I2C_MemTxCpltCallback>
}
 80076bc:	e035      	b.n	800772a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fe ffa3 	bl	800661a <HAL_I2C_MasterTxCpltCallback>
}
 80076d4:	e029      	b.n	800772a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b22      	cmp	r3, #34	@ 0x22
 80076e0:	d123      	bne.n	800772a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b40      	cmp	r3, #64	@ 0x40
 80076fa:	d10b      	bne.n	8007714 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7fe ffce 	bl	80066ae <HAL_I2C_MemRxCpltCallback>
}
 8007712:	e00a      	b.n	800772a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fe ff82 	bl	800662e <HAL_I2C_MasterRxCpltCallback>
}
 800772a:	bf00      	nop
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	fe00e800 	.word	0xfe00e800
 8007738:	ffff0000 	.word	0xffff0000

0800773c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007756:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800775e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2220      	movs	r2, #32
 8007766:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	2b21      	cmp	r3, #33	@ 0x21
 800776c:	d002      	beq.n	8007774 <I2C_ITSlaveCplt+0x38>
 800776e:	7afb      	ldrb	r3, [r7, #11]
 8007770:	2b29      	cmp	r3, #41	@ 0x29
 8007772:	d108      	bne.n	8007786 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007774:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 ffe7 	bl	800874c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2221      	movs	r2, #33	@ 0x21
 8007782:	631a      	str	r2, [r3, #48]	@ 0x30
 8007784:	e019      	b.n	80077ba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	2b22      	cmp	r3, #34	@ 0x22
 800778a:	d002      	beq.n	8007792 <I2C_ITSlaveCplt+0x56>
 800778c:	7afb      	ldrb	r3, [r7, #11]
 800778e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007790:	d108      	bne.n	80077a4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007792:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 ffd8 	bl	800874c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2222      	movs	r2, #34	@ 0x22
 80077a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80077a2:	e00a      	b.n	80077ba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	2b28      	cmp	r3, #40	@ 0x28
 80077a8:	d107      	bne.n	80077ba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80077aa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 ffcc 	bl	800874c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077c8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6859      	ldr	r1, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	4b80      	ldr	r3, [pc, #512]	@ (80079d8 <I2C_ITSlaveCplt+0x29c>)
 80077d6:	400b      	ands	r3, r1
 80077d8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fb75 	bl	8007eca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	0b9b      	lsrs	r3, r3, #14
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d07a      	beq.n	80078e2 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8112 	beq.w	8007a2a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a73      	ldr	r2, [pc, #460]	@ (80079dc <I2C_ITSlaveCplt+0x2a0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d059      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a71      	ldr	r2, [pc, #452]	@ (80079e0 <I2C_ITSlaveCplt+0x2a4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d053      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a6f      	ldr	r2, [pc, #444]	@ (80079e4 <I2C_ITSlaveCplt+0x2a8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d04d      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a6d      	ldr	r2, [pc, #436]	@ (80079e8 <I2C_ITSlaveCplt+0x2ac>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d047      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a6b      	ldr	r2, [pc, #428]	@ (80079ec <I2C_ITSlaveCplt+0x2b0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d041      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a69      	ldr	r2, [pc, #420]	@ (80079f0 <I2C_ITSlaveCplt+0x2b4>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d03b      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a67      	ldr	r2, [pc, #412]	@ (80079f4 <I2C_ITSlaveCplt+0x2b8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d035      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a65      	ldr	r2, [pc, #404]	@ (80079f8 <I2C_ITSlaveCplt+0x2bc>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d02f      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a63      	ldr	r2, [pc, #396]	@ (80079fc <I2C_ITSlaveCplt+0x2c0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d029      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a61      	ldr	r2, [pc, #388]	@ (8007a00 <I2C_ITSlaveCplt+0x2c4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d023      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a5f      	ldr	r2, [pc, #380]	@ (8007a04 <I2C_ITSlaveCplt+0x2c8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d01d      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a5d      	ldr	r2, [pc, #372]	@ (8007a08 <I2C_ITSlaveCplt+0x2cc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d017      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a5b      	ldr	r2, [pc, #364]	@ (8007a0c <I2C_ITSlaveCplt+0x2d0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d011      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a59      	ldr	r2, [pc, #356]	@ (8007a10 <I2C_ITSlaveCplt+0x2d4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a57      	ldr	r2, [pc, #348]	@ (8007a14 <I2C_ITSlaveCplt+0x2d8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d005      	beq.n	80078c6 <I2C_ITSlaveCplt+0x18a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a55      	ldr	r2, [pc, #340]	@ (8007a18 <I2C_ITSlaveCplt+0x2dc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d105      	bne.n	80078d2 <I2C_ITSlaveCplt+0x196>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	e004      	b.n	80078dc <I2C_ITSlaveCplt+0x1a0>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80078e0:	e0a3      	b.n	8007a2a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	0bdb      	lsrs	r3, r3, #15
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 809d 	beq.w	8007a2a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8090 	beq.w	8007a2a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a32      	ldr	r2, [pc, #200]	@ (80079dc <I2C_ITSlaveCplt+0x2a0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d059      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a30      	ldr	r2, [pc, #192]	@ (80079e0 <I2C_ITSlaveCplt+0x2a4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d053      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a2e      	ldr	r2, [pc, #184]	@ (80079e4 <I2C_ITSlaveCplt+0x2a8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d04d      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a2c      	ldr	r2, [pc, #176]	@ (80079e8 <I2C_ITSlaveCplt+0x2ac>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d047      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a2a      	ldr	r2, [pc, #168]	@ (80079ec <I2C_ITSlaveCplt+0x2b0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d041      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a28      	ldr	r2, [pc, #160]	@ (80079f0 <I2C_ITSlaveCplt+0x2b4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d03b      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a26      	ldr	r2, [pc, #152]	@ (80079f4 <I2C_ITSlaveCplt+0x2b8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d035      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a24      	ldr	r2, [pc, #144]	@ (80079f8 <I2C_ITSlaveCplt+0x2bc>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d02f      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a22      	ldr	r2, [pc, #136]	@ (80079fc <I2C_ITSlaveCplt+0x2c0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d029      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a20      	ldr	r2, [pc, #128]	@ (8007a00 <I2C_ITSlaveCplt+0x2c4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d023      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a1e      	ldr	r2, [pc, #120]	@ (8007a04 <I2C_ITSlaveCplt+0x2c8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d01d      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1c      	ldr	r2, [pc, #112]	@ (8007a08 <I2C_ITSlaveCplt+0x2cc>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d017      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a1a      	ldr	r2, [pc, #104]	@ (8007a0c <I2C_ITSlaveCplt+0x2d0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d011      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a18      	ldr	r2, [pc, #96]	@ (8007a10 <I2C_ITSlaveCplt+0x2d4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00b      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a16      	ldr	r2, [pc, #88]	@ (8007a14 <I2C_ITSlaveCplt+0x2d8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d005      	beq.n	80079ca <I2C_ITSlaveCplt+0x28e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a14      	ldr	r2, [pc, #80]	@ (8007a18 <I2C_ITSlaveCplt+0x2dc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d128      	bne.n	8007a1c <I2C_ITSlaveCplt+0x2e0>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	e027      	b.n	8007a26 <I2C_ITSlaveCplt+0x2ea>
 80079d6:	bf00      	nop
 80079d8:	fe00e800 	.word	0xfe00e800
 80079dc:	40020010 	.word	0x40020010
 80079e0:	40020028 	.word	0x40020028
 80079e4:	40020040 	.word	0x40020040
 80079e8:	40020058 	.word	0x40020058
 80079ec:	40020070 	.word	0x40020070
 80079f0:	40020088 	.word	0x40020088
 80079f4:	400200a0 	.word	0x400200a0
 80079f8:	400200b8 	.word	0x400200b8
 80079fc:	40020410 	.word	0x40020410
 8007a00:	40020428 	.word	0x40020428
 8007a04:	40020440 	.word	0x40020440
 8007a08:	40020458 	.word	0x40020458
 8007a0c:	40020470 	.word	0x40020470
 8007a10:	40020488 	.word	0x40020488
 8007a14:	400204a0 	.word	0x400204a0
 8007a18:	400204b8 	.word	0x400204b8
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	089b      	lsrs	r3, r3, #2
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d020      	beq.n	8007a78 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f023 0304 	bic.w	r3, r3, #4
 8007a3c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00c      	beq.n	8007a78 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a86:	f043 0204 	orr.w	r2, r3, #4
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	091b      	lsrs	r3, r3, #4
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d04a      	beq.n	8007b30 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	091b      	lsrs	r3, r3, #4
 8007a9e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d044      	beq.n	8007b30 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d128      	bne.n	8007b02 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b28      	cmp	r3, #40	@ 0x28
 8007aba:	d108      	bne.n	8007ace <I2C_ITSlaveCplt+0x392>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ac2:	d104      	bne.n	8007ace <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007ac4:	6979      	ldr	r1, [r7, #20]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f892 	bl	8007bf0 <I2C_ITListenCplt>
 8007acc:	e030      	b.n	8007b30 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b29      	cmp	r3, #41	@ 0x29
 8007ad8:	d10e      	bne.n	8007af8 <I2C_ITSlaveCplt+0x3bc>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ae0:	d00a      	beq.n	8007af8 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9ed 	bl	8007eca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff fcfa 	bl	80074ea <I2C_ITSlaveSeqCplt>
 8007af6:	e01b      	b.n	8007b30 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2210      	movs	r2, #16
 8007afe:	61da      	str	r2, [r3, #28]
 8007b00:	e016      	b.n	8007b30 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2210      	movs	r2, #16
 8007b08:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0e:	f043 0204 	orr.w	r2, r3, #4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <I2C_ITSlaveCplt+0x3e8>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b22:	d105      	bne.n	8007b30 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8b6 	bl	8007c9c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d010      	beq.n	8007b68 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f8a5 	bl	8007c9c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b28      	cmp	r3, #40	@ 0x28
 8007b5c:	d141      	bne.n	8007be2 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f845 	bl	8007bf0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b66:	e03c      	b.n	8007be2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b70:	d014      	beq.n	8007b9c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff fcb9 	bl	80074ea <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8007bec <I2C_ITSlaveCplt+0x4b0>)
 8007b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7fe fd76 	bl	8006686 <HAL_I2C_ListenCpltCallback>
}
 8007b9a:	e022      	b.n	8007be2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b22      	cmp	r3, #34	@ 0x22
 8007ba6:	d10e      	bne.n	8007bc6 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7fe fd49 	bl	8006656 <HAL_I2C_SlaveRxCpltCallback>
}
 8007bc4:	e00d      	b.n	8007be2 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7fe fd30 	bl	8006642 <HAL_I2C_SlaveTxCpltCallback>
}
 8007be2:	bf00      	nop
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	ffff0000 	.word	0xffff0000

08007bf0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a26      	ldr	r2, [pc, #152]	@ (8007c98 <I2C_ITListenCplt+0xa8>)
 8007bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	089b      	lsrs	r3, r3, #2
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d022      	beq.n	8007c6e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d012      	beq.n	8007c6e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c66:	f043 0204 	orr.w	r2, r3, #4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c6e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fd6a 	bl	800874c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2210      	movs	r2, #16
 8007c7e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7fe fcfc 	bl	8006686 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	ffff0000 	.word	0xffff0000

08007c9c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a6d      	ldr	r2, [pc, #436]	@ (8007e70 <I2C_ITError+0x1d4>)
 8007cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	2b28      	cmp	r3, #40	@ 0x28
 8007cd2:	d005      	beq.n	8007ce0 <I2C_ITError+0x44>
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2b29      	cmp	r3, #41	@ 0x29
 8007cd8:	d002      	beq.n	8007ce0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cde:	d10b      	bne.n	8007cf8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ce0:	2103      	movs	r1, #3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fd32 	bl	800874c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2228      	movs	r2, #40	@ 0x28
 8007cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a60      	ldr	r2, [pc, #384]	@ (8007e74 <I2C_ITError+0x1d8>)
 8007cf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8007cf6:	e030      	b.n	8007d5a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007cf8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fd25 	bl	800874c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f8e1 	bl	8007eca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b60      	cmp	r3, #96	@ 0x60
 8007d12:	d01f      	beq.n	8007d54 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d114      	bne.n	8007d54 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d109      	bne.n	8007d4c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d44:	f043 0204 	orr.w	r2, r3, #4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2220      	movs	r2, #32
 8007d52:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d039      	beq.n	8007ddc <I2C_ITError+0x140>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b11      	cmp	r3, #17
 8007d6c:	d002      	beq.n	8007d74 <I2C_ITError+0xd8>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b21      	cmp	r3, #33	@ 0x21
 8007d72:	d133      	bne.n	8007ddc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d82:	d107      	bne.n	8007d94 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d92:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd fb49 	bl	8005430 <HAL_DMA_GetState>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d017      	beq.n	8007dd4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da8:	4a33      	ldr	r2, [pc, #204]	@ (8007e78 <I2C_ITError+0x1dc>)
 8007daa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fc f9c9 	bl	8004150 <HAL_DMA_Abort_IT>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d04d      	beq.n	8007e60 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007dce:	4610      	mov	r0, r2
 8007dd0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007dd2:	e045      	b.n	8007e60 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f851 	bl	8007e7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007dda:	e041      	b.n	8007e60 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d039      	beq.n	8007e58 <I2C_ITError+0x1bc>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b12      	cmp	r3, #18
 8007de8:	d002      	beq.n	8007df0 <I2C_ITError+0x154>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b22      	cmp	r3, #34	@ 0x22
 8007dee:	d133      	bne.n	8007e58 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dfe:	d107      	bne.n	8007e10 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e0e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fd fb0b 	bl	8005430 <HAL_DMA_GetState>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d017      	beq.n	8007e50 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e24:	4a14      	ldr	r2, [pc, #80]	@ (8007e78 <I2C_ITError+0x1dc>)
 8007e26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fc f98b 	bl	8004150 <HAL_DMA_Abort_IT>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d011      	beq.n	8007e64 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e4e:	e009      	b.n	8007e64 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f813 	bl	8007e7c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e56:	e005      	b.n	8007e64 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f80f 	bl	8007e7c <I2C_TreatErrorCallback>
  }
}
 8007e5e:	e002      	b.n	8007e66 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e60:	bf00      	nop
 8007e62:	e000      	b.n	8007e66 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e64:	bf00      	nop
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	ffff0000 	.word	0xffff0000
 8007e74:	08006953 	.word	0x08006953
 8007e78:	0800821d 	.word	0x0800821d

08007e7c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b60      	cmp	r3, #96	@ 0x60
 8007e8e:	d10e      	bne.n	8007eae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fe fc15 	bl	80066d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007eac:	e009      	b.n	8007ec2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fe fc00 	bl	80066c2 <HAL_I2C_ErrorCallback>
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d103      	bne.n	8007ee8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d007      	beq.n	8007f06 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699a      	ldr	r2, [r3, #24]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0201 	orr.w	r2, r2, #1
 8007f04:	619a      	str	r2, [r3, #24]
  }
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f2e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d104      	bne.n	8007f44 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007f3a:	2120      	movs	r1, #32
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 fb81 	bl	8008644 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007f42:	e02d      	b.n	8007fa0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2bff      	cmp	r3, #255	@ 0xff
 8007f5a:	d903      	bls.n	8007f64 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	22ff      	movs	r2, #255	@ 0xff
 8007f60:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007f62:	e004      	b.n	8007f6e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f76:	4619      	mov	r1, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3328      	adds	r3, #40	@ 0x28
 8007f7e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007f84:	f7fb fe7a 	bl	8003c7c <HAL_DMA_Start_IT>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007f8e:	2110      	movs	r1, #16
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff fe83 	bl	8007c9c <I2C_ITError>
}
 8007f96:	e003      	b.n	8007fa0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007f98:	2140      	movs	r1, #64	@ 0x40
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fb52 	bl	8008644 <I2C_Enable_IRQ>
}
 8007fa0:	bf00      	nop
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d076      	beq.n	80080b0 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a71      	ldr	r2, [pc, #452]	@ (8008190 <I2C_DMAError+0x1e8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d059      	beq.n	8008082 <I2C_DMAError+0xda>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a6f      	ldr	r2, [pc, #444]	@ (8008194 <I2C_DMAError+0x1ec>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d053      	beq.n	8008082 <I2C_DMAError+0xda>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a6d      	ldr	r2, [pc, #436]	@ (8008198 <I2C_DMAError+0x1f0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d04d      	beq.n	8008082 <I2C_DMAError+0xda>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a6b      	ldr	r2, [pc, #428]	@ (800819c <I2C_DMAError+0x1f4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d047      	beq.n	8008082 <I2C_DMAError+0xda>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a69      	ldr	r2, [pc, #420]	@ (80081a0 <I2C_DMAError+0x1f8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d041      	beq.n	8008082 <I2C_DMAError+0xda>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a67      	ldr	r2, [pc, #412]	@ (80081a4 <I2C_DMAError+0x1fc>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d03b      	beq.n	8008082 <I2C_DMAError+0xda>
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a65      	ldr	r2, [pc, #404]	@ (80081a8 <I2C_DMAError+0x200>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d035      	beq.n	8008082 <I2C_DMAError+0xda>
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a63      	ldr	r2, [pc, #396]	@ (80081ac <I2C_DMAError+0x204>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d02f      	beq.n	8008082 <I2C_DMAError+0xda>
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a61      	ldr	r2, [pc, #388]	@ (80081b0 <I2C_DMAError+0x208>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d029      	beq.n	8008082 <I2C_DMAError+0xda>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a5f      	ldr	r2, [pc, #380]	@ (80081b4 <I2C_DMAError+0x20c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d023      	beq.n	8008082 <I2C_DMAError+0xda>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a5d      	ldr	r2, [pc, #372]	@ (80081b8 <I2C_DMAError+0x210>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d01d      	beq.n	8008082 <I2C_DMAError+0xda>
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a5b      	ldr	r2, [pc, #364]	@ (80081bc <I2C_DMAError+0x214>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d017      	beq.n	8008082 <I2C_DMAError+0xda>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a59      	ldr	r2, [pc, #356]	@ (80081c0 <I2C_DMAError+0x218>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d011      	beq.n	8008082 <I2C_DMAError+0xda>
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a57      	ldr	r2, [pc, #348]	@ (80081c4 <I2C_DMAError+0x21c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00b      	beq.n	8008082 <I2C_DMAError+0xda>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a55      	ldr	r2, [pc, #340]	@ (80081c8 <I2C_DMAError+0x220>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d005      	beq.n	8008082 <I2C_DMAError+0xda>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a53      	ldr	r2, [pc, #332]	@ (80081cc <I2C_DMAError+0x224>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d109      	bne.n	8008096 <I2C_DMAError+0xee>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	bf0c      	ite	eq
 800808e:	2301      	moveq	r3, #1
 8008090:	2300      	movne	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	e008      	b.n	80080a8 <I2C_DMAError+0x100>
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bf0c      	ite	eq
 80080a2:	2301      	moveq	r3, #1
 80080a4:	2300      	movne	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80080ac:	2301      	movs	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 8098 	beq.w	80081ea <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a33      	ldr	r2, [pc, #204]	@ (8008190 <I2C_DMAError+0x1e8>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d059      	beq.n	800817a <I2C_DMAError+0x1d2>
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a31      	ldr	r2, [pc, #196]	@ (8008194 <I2C_DMAError+0x1ec>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d053      	beq.n	800817a <I2C_DMAError+0x1d2>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a2f      	ldr	r2, [pc, #188]	@ (8008198 <I2C_DMAError+0x1f0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d04d      	beq.n	800817a <I2C_DMAError+0x1d2>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a2d      	ldr	r2, [pc, #180]	@ (800819c <I2C_DMAError+0x1f4>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d047      	beq.n	800817a <I2C_DMAError+0x1d2>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a2b      	ldr	r2, [pc, #172]	@ (80081a0 <I2C_DMAError+0x1f8>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d041      	beq.n	800817a <I2C_DMAError+0x1d2>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a29      	ldr	r2, [pc, #164]	@ (80081a4 <I2C_DMAError+0x1fc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d03b      	beq.n	800817a <I2C_DMAError+0x1d2>
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a27      	ldr	r2, [pc, #156]	@ (80081a8 <I2C_DMAError+0x200>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d035      	beq.n	800817a <I2C_DMAError+0x1d2>
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a25      	ldr	r2, [pc, #148]	@ (80081ac <I2C_DMAError+0x204>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d02f      	beq.n	800817a <I2C_DMAError+0x1d2>
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a23      	ldr	r2, [pc, #140]	@ (80081b0 <I2C_DMAError+0x208>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d029      	beq.n	800817a <I2C_DMAError+0x1d2>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a21      	ldr	r2, [pc, #132]	@ (80081b4 <I2C_DMAError+0x20c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d023      	beq.n	800817a <I2C_DMAError+0x1d2>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1f      	ldr	r2, [pc, #124]	@ (80081b8 <I2C_DMAError+0x210>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d01d      	beq.n	800817a <I2C_DMAError+0x1d2>
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a1d      	ldr	r2, [pc, #116]	@ (80081bc <I2C_DMAError+0x214>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d017      	beq.n	800817a <I2C_DMAError+0x1d2>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1b      	ldr	r2, [pc, #108]	@ (80081c0 <I2C_DMAError+0x218>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d011      	beq.n	800817a <I2C_DMAError+0x1d2>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a19      	ldr	r2, [pc, #100]	@ (80081c4 <I2C_DMAError+0x21c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <I2C_DMAError+0x1d2>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a17      	ldr	r2, [pc, #92]	@ (80081c8 <I2C_DMAError+0x220>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d005      	beq.n	800817a <I2C_DMAError+0x1d2>
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a15      	ldr	r2, [pc, #84]	@ (80081cc <I2C_DMAError+0x224>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d12a      	bne.n	80081d0 <I2C_DMAError+0x228>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	bf0c      	ite	eq
 8008186:	2301      	moveq	r3, #1
 8008188:	2300      	movne	r3, #0
 800818a:	b2db      	uxtb	r3, r3
 800818c:	e029      	b.n	80081e2 <I2C_DMAError+0x23a>
 800818e:	bf00      	nop
 8008190:	40020010 	.word	0x40020010
 8008194:	40020028 	.word	0x40020028
 8008198:	40020040 	.word	0x40020040
 800819c:	40020058 	.word	0x40020058
 80081a0:	40020070 	.word	0x40020070
 80081a4:	40020088 	.word	0x40020088
 80081a8:	400200a0 	.word	0x400200a0
 80081ac:	400200b8 	.word	0x400200b8
 80081b0:	40020410 	.word	0x40020410
 80081b4:	40020428 	.word	0x40020428
 80081b8:	40020440 	.word	0x40020440
 80081bc:	40020458 	.word	0x40020458
 80081c0:	40020470 	.word	0x40020470
 80081c4:	40020488 	.word	0x40020488
 80081c8:	400204a0 	.word	0x400204a0
 80081cc:	400204b8 	.word	0x400204b8
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bf0c      	ite	eq
 80081dc:	2301      	moveq	r3, #1
 80081de:	2300      	movne	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 80081e6:	2301      	movs	r3, #1
 80081e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fd f92e 	bl	800544c <HAL_DMA_GetError>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d00e      	beq.n	8008214 <I2C_DMAError+0x26c>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800820a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800820c:	2110      	movs	r1, #16
 800820e:	68b8      	ldr	r0, [r7, #8]
 8008210:	f7ff fd44 	bl	8007c9c <I2C_ITError>
  }
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008236:	2200      	movs	r2, #0
 8008238:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008246:	2200      	movs	r2, #0
 8008248:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fe16 	bl	8007e7c <I2C_TreatErrorCallback>
}
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	603b      	str	r3, [r7, #0]
 8008264:	4613      	mov	r3, r2
 8008266:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008268:	e03b      	b.n	80082e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f8d6 	bl	8008420 <I2C_IsErrorOccurred>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e041      	b.n	8008302 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008284:	d02d      	beq.n	80082e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008286:	f7f9 fd27 	bl	8001cd8 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d302      	bcc.n	800829c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d122      	bne.n	80082e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	4013      	ands	r3, r2
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	bf0c      	ite	eq
 80082ac:	2301      	moveq	r3, #1
 80082ae:	2300      	movne	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d113      	bne.n	80082e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082be:	f043 0220 	orr.w	r2, r3, #32
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e00f      	b.n	8008302 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4013      	ands	r3, r2
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	bf0c      	ite	eq
 80082f2:	2301      	moveq	r3, #1
 80082f4:	2300      	movne	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d0b4      	beq.n	800826a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008316:	e033      	b.n	8008380 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	68b9      	ldr	r1, [r7, #8]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f87f 	bl	8008420 <I2C_IsErrorOccurred>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e031      	b.n	8008390 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d025      	beq.n	8008380 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008334:	f7f9 fcd0 	bl	8001cd8 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	429a      	cmp	r2, r3
 8008342:	d302      	bcc.n	800834a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d11a      	bne.n	8008380 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b02      	cmp	r3, #2
 8008356:	d013      	beq.n	8008380 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835c:	f043 0220 	orr.w	r2, r3, #32
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e007      	b.n	8008390 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b02      	cmp	r3, #2
 800838c:	d1c4      	bne.n	8008318 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083a4:	e02f      	b.n	8008406 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f838 	bl	8008420 <I2C_IsErrorOccurred>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e02d      	b.n	8008416 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ba:	f7f9 fc8d 	bl	8001cd8 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d302      	bcc.n	80083d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d11a      	bne.n	8008406 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d013      	beq.n	8008406 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e2:	f043 0220 	orr.w	r2, r3, #32
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e007      	b.n	8008416 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b20      	cmp	r3, #32
 8008412:	d1c8      	bne.n	80083a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	@ 0x28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	d068      	beq.n	800851e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2210      	movs	r2, #16
 8008452:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008454:	e049      	b.n	80084ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845c:	d045      	beq.n	80084ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800845e:	f7f9 fc3b 	bl	8001cd8 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	429a      	cmp	r2, r3
 800846c:	d302      	bcc.n	8008474 <I2C_IsErrorOccurred+0x54>
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d13a      	bne.n	80084ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800847e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008486:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008496:	d121      	bne.n	80084dc <I2C_IsErrorOccurred+0xbc>
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800849e:	d01d      	beq.n	80084dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80084a0:	7cfb      	ldrb	r3, [r7, #19]
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d01a      	beq.n	80084dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80084b6:	f7f9 fc0f 	bl	8001cd8 <HAL_GetTick>
 80084ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084bc:	e00e      	b.n	80084dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80084be:	f7f9 fc0b 	bl	8001cd8 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b19      	cmp	r3, #25
 80084ca:	d907      	bls.n	80084dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	f043 0320 	orr.w	r3, r3, #32
 80084d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80084da:	e006      	b.n	80084ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	d1e9      	bne.n	80084be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d003      	beq.n	8008500 <I2C_IsErrorOccurred+0xe0>
 80084f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0aa      	beq.n	8008456 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008504:	2b00      	cmp	r3, #0
 8008506:	d103      	bne.n	8008510 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2220      	movs	r2, #32
 800850e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	f043 0304 	orr.w	r3, r3, #4
 8008516:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008540:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00b      	beq.n	800856a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	f043 0308 	orr.w	r3, r3, #8
 8008558:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008562:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	f043 0302 	orr.w	r3, r3, #2
 800857a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008584:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800858c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01c      	beq.n	80085ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff fc98 	bl	8007eca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6859      	ldr	r1, [r3, #4]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	4b0d      	ldr	r3, [pc, #52]	@ (80085dc <I2C_IsErrorOccurred+0x1bc>)
 80085a6:	400b      	ands	r3, r1
 80085a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	431a      	orrs	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80085ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3728      	adds	r7, #40	@ 0x28
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	fe00e800 	.word	0xfe00e800

080085e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	607b      	str	r3, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	817b      	strh	r3, [r7, #10]
 80085ee:	4613      	mov	r3, r2
 80085f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085f2:	897b      	ldrh	r3, [r7, #10]
 80085f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085f8:	7a7b      	ldrb	r3, [r7, #9]
 80085fa:	041b      	lsls	r3, r3, #16
 80085fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008600:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	4313      	orrs	r3, r2
 800860a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800860e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	0d5b      	lsrs	r3, r3, #21
 800861a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800861e:	4b08      	ldr	r3, [pc, #32]	@ (8008640 <I2C_TransferConfig+0x60>)
 8008620:	430b      	orrs	r3, r1
 8008622:	43db      	mvns	r3, r3
 8008624:	ea02 0103 	and.w	r1, r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	430a      	orrs	r2, r1
 8008630:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	03ff63ff 	.word	0x03ff63ff

08008644 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008658:	4a39      	ldr	r2, [pc, #228]	@ (8008740 <I2C_Enable_IRQ+0xfc>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d032      	beq.n	80086c4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008662:	4a38      	ldr	r2, [pc, #224]	@ (8008744 <I2C_Enable_IRQ+0x100>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d02d      	beq.n	80086c4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800866c:	4a36      	ldr	r2, [pc, #216]	@ (8008748 <I2C_Enable_IRQ+0x104>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d028      	beq.n	80086c4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008672:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008676:	2b00      	cmp	r3, #0
 8008678:	da03      	bge.n	8008682 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008680:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008682:	887b      	ldrh	r3, [r7, #2]
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008692:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008694:	887b      	ldrh	r3, [r7, #2]
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80086a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80086a6:	887b      	ldrh	r3, [r7, #2]
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d103      	bne.n	80086b4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80086b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80086b4:	887b      	ldrh	r3, [r7, #2]
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d133      	bne.n	8008722 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f043 0320 	orr.w	r3, r3, #32
 80086c0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80086c2:	e02e      	b.n	8008722 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80086c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	da03      	bge.n	80086d4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80086d2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80086d4:	887b      	ldrh	r3, [r7, #2]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80086e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80086e6:	887b      	ldrh	r3, [r7, #2]
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80086f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80086f8:	887b      	ldrh	r3, [r7, #2]
 80086fa:	2b10      	cmp	r3, #16
 80086fc:	d103      	bne.n	8008706 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008704:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008706:	887b      	ldrh	r3, [r7, #2]
 8008708:	2b20      	cmp	r3, #32
 800870a:	d103      	bne.n	8008714 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008712:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008714:	887b      	ldrh	r3, [r7, #2]
 8008716:	2b40      	cmp	r3, #64	@ 0x40
 8008718:	d103      	bne.n	8008722 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008720:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6819      	ldr	r1, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	430a      	orrs	r2, r1
 8008730:	601a      	str	r2, [r3, #0]
}
 8008732:	bf00      	nop
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	08006b5b 	.word	0x08006b5b
 8008744:	08006fa1 	.word	0x08006fa1
 8008748:	08006d41 	.word	0x08006d41

0800874c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800875c:	887b      	ldrh	r3, [r7, #2]
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00f      	beq.n	8008786 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800876c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800877a:	2b28      	cmp	r3, #40	@ 0x28
 800877c:	d003      	beq.n	8008786 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008784:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008786:	887b      	ldrh	r3, [r7, #2]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00f      	beq.n	80087b0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008796:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80087a4:	2b28      	cmp	r3, #40	@ 0x28
 80087a6:	d003      	beq.n	80087b0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80087ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80087b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da03      	bge.n	80087c0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80087be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80087c0:	887b      	ldrh	r3, [r7, #2]
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	d103      	bne.n	80087ce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80087cc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80087ce:	887b      	ldrh	r3, [r7, #2]
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d103      	bne.n	80087dc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f043 0320 	orr.w	r3, r3, #32
 80087da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80087dc:	887b      	ldrh	r3, [r7, #2]
 80087de:	2b40      	cmp	r3, #64	@ 0x40
 80087e0:	d103      	bne.n	80087ea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087e8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6819      	ldr	r1, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	43da      	mvns	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	400a      	ands	r2, r1
 80087fa:	601a      	str	r2, [r3, #0]
}
 80087fc:	bf00      	nop
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b20      	cmp	r3, #32
 800881c:	d138      	bne.n	8008890 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008828:	2302      	movs	r3, #2
 800882a:	e032      	b.n	8008892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2224      	movs	r2, #36	@ 0x24
 8008838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0201 	bic.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800885a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6819      	ldr	r1, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e000      	b.n	8008892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008890:	2302      	movs	r3, #2
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b20      	cmp	r3, #32
 80088b2:	d139      	bne.n	8008928 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80088be:	2302      	movs	r3, #2
 80088c0:	e033      	b.n	800892a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2224      	movs	r2, #36	@ 0x24
 80088ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0201 	bic.w	r2, r2, #1
 80088e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80088f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	021b      	lsls	r3, r3, #8
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f042 0201 	orr.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	e000      	b.n	800892a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008928:	2302      	movs	r3, #2
  }
}
 800892a:	4618      	mov	r0, r3
 800892c:	3714      	adds	r7, #20
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
	...

08008938 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e070      	b.n	8008a2c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7f8 fd44 	bl	80013ec <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0201 	bic.w	r2, r2, #1
 800898a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800899a:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089ba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80089ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a19      	ldr	r2, [pc, #100]	@ (8008a34 <HAL_JPEG_Init+0xfc>)
 80089d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a18      	ldr	r2, [pc, #96]	@ (8008a38 <HAL_JPEG_Init+0x100>)
 80089d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fc81 	bl	80092ec <JPEG_Set_HuffEnc_Mem>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e018      	b.n	8008a2c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a08:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	08015c28 	.word	0x08015c28
 8008a38:	08015c68 	.word	0x08015c68

08008a3c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <HAL_JPEG_GetInfo+0x16>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e083      	b.n	8008b5e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d103      	bne.n	8008a6c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2210      	movs	r2, #16
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	e017      	b.n	8008a9c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	e00c      	b.n	8008a9c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d103      	bne.n	8008a98 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2230      	movs	r2, #48	@ 0x30
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	e001      	b.n	8008a9c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e060      	b.n	8008b5e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	0c1b      	lsrs	r3, r3, #16
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	0c1b      	lsrs	r3, r3, #16
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b10      	cmp	r3, #16
 8008abe:	d003      	beq.n	8008ac8 <HAL_JPEG_GetInfo+0x8c>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b30      	cmp	r3, #48	@ 0x30
 8008ac6:	d140      	bne.n	8008b4a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	091b      	lsrs	r3, r3, #4
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	091b      	lsrs	r3, r3, #4
 8008ade:	f003 030f 	and.w	r3, r3, #15
 8008ae2:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	091b      	lsrs	r3, r3, #4
 8008aec:	f003 030f 	and.w	r3, r3, #15
 8008af0:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d109      	bne.n	8008b0c <HAL_JPEG_GetInfo+0xd0>
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d106      	bne.n	8008b0c <HAL_JPEG_GetInfo+0xd0>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2202      	movs	r2, #2
 8008b08:	605a      	str	r2, [r3, #4]
 8008b0a:	e01d      	b.n	8008b48 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <HAL_JPEG_GetInfo+0xea>
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d106      	bne.n	8008b26 <HAL_JPEG_GetInfo+0xea>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2200      	movs	r2, #0
 8008b22:	605a      	str	r2, [r3, #4]
 8008b24:	e010      	b.n	8008b48 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d109      	bne.n	8008b40 <HAL_JPEG_GetInfo+0x104>
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d106      	bne.n	8008b40 <HAL_JPEG_GetInfo+0x104>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d103      	bne.n	8008b40 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	605a      	str	r2, [r3, #4]
 8008b3e:	e003      	b.n	8008b48 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2200      	movs	r2, #0
 8008b44:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008b46:	e003      	b.n	8008b50 <HAL_JPEG_GetInfo+0x114>
 8008b48:	e002      	b.n	8008b50 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 fa7b 	bl	800a04c <JPEG_GetQuality>
 8008b56:	4602      	mov	r2, r0
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b78:	f003 030c 	and.w	r3, r3, #12
 8008b7c:	2b0c      	cmp	r3, #12
 8008b7e:	d116      	bne.n	8008bae <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d005      	beq.n	8008b96 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d033      	beq.n	8008c08 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	655a      	str	r2, [r3, #84]	@ 0x54
 8008bac:	e02c      	b.n	8008c08 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb2:	f003 030c 	and.w	r3, r3, #12
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d126      	bne.n	8008c08 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f043 0306 	orr.w	r3, r3, #6
 8008bd6:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008be6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8008bf4:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	43da      	mvns	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	400a      	ands	r2, r1
 8008c06:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	3b03      	subs	r3, #3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d813      	bhi.n	8008cc0 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9c:	f003 030c 	and.w	r3, r3, #12
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d103      	bne.n	8008cac <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fda3 	bl	80097f0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8008caa:	e00b      	b.n	8008cc4 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb0:	f003 030c 	and.w	r3, r3, #12
 8008cb4:	2b0c      	cmp	r3, #12
 8008cb6:	d105      	bne.n	8008cc4 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 f848 	bl	8009d4e <JPEG_DMA_ContinueProcess>
      break;
 8008cbe:	e001      	b.n	8008cc4 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8008cc0:	bf00      	nop
 8008cc2:	e000      	b.n	8008cc6 <HAL_JPEG_IRQHandler+0x44>
      break;
 8008cc4:	bf00      	nop
  }
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b08b      	sub	sp, #44	@ 0x2c
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e020      	b.n	8008d28 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	4413      	add	r3, r2
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8008cf0:	6a3a      	ldr	r2, [r7, #32]
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cfa:	d90f      	bls.n	8008d1c <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e055      	b.n	8008dac <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	440b      	add	r3, r1
 8008d0a:	3201      	adds	r2, #1
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	701a      	strb	r2, [r3, #0]
      p++;
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	3301      	adds	r3, #1
 8008d14:	623b      	str	r3, [r7, #32]
      i--;
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1ee      	bne.n	8008d00 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	3301      	adds	r3, #1
 8008d26:	61fb      	str	r3, [r7, #28]
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b0f      	cmp	r3, #15
 8008d2c:	d9db      	bls.n	8008ce6 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	4413      	add	r3, r2
 8008d34:	2200      	movs	r2, #0
 8008d36:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	6a3a      	ldr	r2, [r7, #32]
 8008d3c:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	617b      	str	r3, [r7, #20]
  p = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8008d4c:	e027      	b.n	8008d9e <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	601a      	str	r2, [r3, #0]
      p++;
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	623b      	str	r3, [r7, #32]
      code++;
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	3301      	adds	r3, #1
 8008d64:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d0eb      	beq.n	8008d4e <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b1f      	cmp	r3, #31
 8008d7a:	d901      	bls.n	8008d80 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e015      	b.n	8008dac <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008d80:	2201      	movs	r2, #1
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	fa02 f303 	lsl.w	r3, r2, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d301      	bcc.n	8008d92 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e00c      	b.n	8008dac <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	61bb      	str	r3, [r7, #24]
    si++;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	4413      	add	r3, r2
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1dd      	bne.n	8008d66 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	372c      	adds	r7, #44	@ 0x2c
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008dc4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008dc8:	6018      	str	r0, [r3, #0]
 8008dca:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008dce:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008dd2:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008dd4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008dd8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	f107 0308 	add.w	r3, r7, #8
 8008de2:	f107 020c 	add.w	r2, r7, #12
 8008de6:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8008dea:	f7ff ff70 	bl	8008cce <JPEG_Bits_To_SizeCodes>
 8008dee:	4603      	mov	r3, r0
 8008df0:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8008df4:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008dfc:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8008e00:	e075      	b.n	8008eee <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8008e08:	e067      	b.n	8008eda <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8008e0a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008e0e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008e18:	4413      	add	r3, r2
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8008e22:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8008e2a:	23a0      	movs	r3, #160	@ 0xa0
 8008e2c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8008e30:	e021      	b.n	8008e76 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8008e32:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008e36:	2bf0      	cmp	r3, #240	@ 0xf0
 8008e38:	d103      	bne.n	8008e42 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8008e3a:	23a1      	movs	r3, #161	@ 0xa1
 8008e3c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8008e40:	e019      	b.n	8008e76 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8008e42:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008e46:	091b      	lsrs	r3, r3, #4
 8008e48:	f003 030f 	and.w	r3, r3, #15
 8008e4c:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8008e50:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8008e5c:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	461a      	mov	r2, r3
 8008e6a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008e6e:	4413      	add	r3, r2
 8008e70:	3b01      	subs	r3, #1
 8008e72:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008e76:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008e7a:	2ba1      	cmp	r3, #161	@ 0xa1
 8008e7c:	d901      	bls.n	8008e82 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e035      	b.n	8008eee <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008e82:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008e86:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008e8a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e92:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008e96:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008e9a:	6819      	ldr	r1, [r3, #0]
 8008e9c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008ea0:	3328      	adds	r3, #40	@ 0x28
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	440b      	add	r3, r1
 8008ea6:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008ea8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008eac:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8008eb0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008eb4:	4413      	add	r3, r2
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b2d9      	uxtb	r1, r3
 8008ebc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008ec0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8008eca:	4413      	add	r3, r2
 8008ecc:	460a      	mov	r2, r1
 8008ece:	701a      	strb	r2, [r3, #0]
      k++;
 8008ed0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8008eda:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8008ede:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d38e      	bcc.n	8008e0a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008f04:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008f08:	6018      	str	r0, [r3, #0]
 8008f0a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008f0e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008f12:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008f14:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008f18:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8008f22:	f107 0208 	add.w	r2, r7, #8
 8008f26:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8008f2a:	f7ff fed0 	bl	8008cce <JPEG_Bits_To_SizeCodes>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8008f34:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8008f3c:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8008f40:	e048      	b.n	8008fd4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8008f48:	e03d      	b.n	8008fc6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8008f4a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008f4e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008f58:	4413      	add	r3, r2
 8008f5a:	3310      	adds	r3, #16
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008f62:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008f66:	2b0b      	cmp	r3, #11
 8008f68:	d901      	bls.n	8008f6e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e032      	b.n	8008fd4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008f6e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008f72:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8008f76:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008f7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f7e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008f82:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008f86:	6819      	ldr	r1, [r3, #0]
 8008f88:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008f8c:	3302      	adds	r3, #2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008f94:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008f98:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8008f9c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008fa0:	4413      	add	r3, r2
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b2d9      	uxtb	r1, r3
 8008fa8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8008fac:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8008fb6:	4413      	add	r3, r2
 8008fb8:	460a      	mov	r2, r1
 8008fba:	701a      	strb	r2, [r3, #0]
      k++;
 8008fbc:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8008fc6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8008fca:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d3bb      	bcc.n	8008f4a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b09a      	sub	sp, #104	@ 0x68
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d106      	bne.n	8009006 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8009000:	3318      	adds	r3, #24
 8009002:	663b      	str	r3, [r7, #96]	@ 0x60
 8009004:	e00f      	b.n	8009026 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d106      	bne.n	8009022 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800901c:	3318      	adds	r3, #24
 800901e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009020:	e001      	b.n	8009026 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e059      	b.n	80090da <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d055      	beq.n	80090d8 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4619      	mov	r1, r3
 8009032:	68b8      	ldr	r0, [r7, #8]
 8009034:	f7ff ff60 	bl	8008ef8 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800903e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009046:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800904a:	e046      	b.n	80090da <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800904c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800904e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8009050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009052:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009056:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800905a:	3304      	adds	r3, #4
 800905c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800905e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009060:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009064:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009066:	230c      	movs	r3, #12
 8009068:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800906a:	e032      	b.n	80090d2 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800906c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800906e:	3b01      	subs	r3, #1
 8009070:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8009072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009074:	3b04      	subs	r3, #4
 8009076:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009078:	f107 0214 	add.w	r2, r7, #20
 800907c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800907e:	4413      	add	r3, r2
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	021b      	lsls	r3, r3, #8
 8009084:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800908a:	3302      	adds	r3, #2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	3368      	adds	r3, #104	@ 0x68
 8009090:	443b      	add	r3, r7
 8009092:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4313      	orrs	r3, r2
 800909a:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800909c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800909e:	3b01      	subs	r3, #1
 80090a0:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80090a2:	f107 0214 	add.w	r2, r7, #20
 80090a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090a8:	4413      	add	r3, r2
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	021b      	lsls	r3, r3, #8
 80090ae:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80090b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090b4:	3302      	adds	r3, #2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	3368      	adds	r3, #104	@ 0x68
 80090ba:	443b      	add	r3, r7
 80090bc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	4313      	orrs	r3, r2
 80090c4:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80090c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090c8:	041a      	lsls	r2, r3, #16
 80090ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090cc:	431a      	orrs	r2, r3
 80090ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090d0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80090d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d8c9      	bhi.n	800906c <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3768      	adds	r7, #104	@ 0x68
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80090f0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80090f4:	6018      	str	r0, [r3, #0]
 80090f6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80090fa:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80090fe:	6019      	str	r1, [r3, #0]
 8009100:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009104:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8009108:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800910a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800910e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800911e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d10c      	bne.n	8009142 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009128:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800912c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009138:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800913c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009140:	e01d      	b.n	800917e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8009142:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009146:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009152:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009156:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	d10c      	bne.n	800917a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009160:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009164:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8009170:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009174:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009178:	e001      	b.n	800917e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e0a8      	b.n	80092d0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800917e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009182:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 80a0 	beq.w	80092ce <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800918e:	f107 0214 	add.w	r2, r7, #20
 8009192:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009196:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800919a:	4611      	mov	r1, r2
 800919c:	6818      	ldr	r0, [r3, #0]
 800919e:	f7ff fe0b 	bl	8008db8 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 80091a2:	4603      	mov	r3, r0
 80091a4:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 80091a8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 80091b0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80091b4:	e08c      	b.n	80092d0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80091b6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80091ba:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80091be:	2300      	movs	r3, #0
 80091c0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80091c4:	e00e      	b.n	80091e4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80091c6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80091ca:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80091ce:	601a      	str	r2, [r3, #0]
      addressDef++;
 80091d0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80091d4:	3304      	adds	r3, #4
 80091d6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80091da:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80091de:	3301      	adds	r3, #1
 80091e0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80091e4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d9ec      	bls.n	80091c6 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80091ec:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80091f0:	4a3a      	ldr	r2, [pc, #232]	@ (80092dc <JPEG_Set_HuffAC_Mem+0x1f8>)
 80091f2:	601a      	str	r2, [r3, #0]
    addressDef++;
 80091f4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80091f8:	3304      	adds	r3, #4
 80091fa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 80091fe:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009202:	4a37      	ldr	r2, [pc, #220]	@ (80092e0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8009204:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009206:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800920a:	3304      	adds	r3, #4
 800920c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8009210:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009214:	4a33      	ldr	r2, [pc, #204]	@ (80092e4 <JPEG_Set_HuffAC_Mem+0x200>)
 8009216:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009218:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800921c:	3304      	adds	r3, #4
 800921e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8009222:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009226:	4a30      	ldr	r2, [pc, #192]	@ (80092e8 <JPEG_Set_HuffAC_Mem+0x204>)
 8009228:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800922a:	23a2      	movs	r3, #162	@ 0xa2
 800922c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8009230:	e049      	b.n	80092c6 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8009232:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009236:	3b01      	subs	r3, #1
 8009238:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800923c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8009240:	3b04      	subs	r3, #4
 8009242:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009246:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800924a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800924e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009252:	4413      	add	r3, r2
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800925c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009260:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009264:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009268:	3328      	adds	r3, #40	@ 0x28
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	4313      	orrs	r3, r2
 8009274:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009278:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800927c:	3b01      	subs	r3, #1
 800927e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009282:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009286:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800928a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800928e:	4413      	add	r3, r2
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009298:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800929c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80092a0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80092a4:	3328      	adds	r3, #40	@ 0x28
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	4313      	orrs	r3, r2
 80092b0:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80092b4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80092b8:	041a      	lsls	r2, r3, #16
 80092ba:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80092be:	431a      	orrs	r2, r3
 80092c0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80092c4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80092c6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d8b1      	bhi.n	8009232 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	0fd10fd0 	.word	0x0fd10fd0
 80092e0:	0fd30fd2 	.word	0x0fd30fd2
 80092e4:	0fd50fd4 	.word	0x0fd50fd4
 80092e8:	0fd70fd6 	.word	0x0fd70fd6

080092ec <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f84d 	bl	8009394 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009302:	461a      	mov	r2, r3
 8009304:	491f      	ldr	r1, [pc, #124]	@ (8009384 <JPEG_Set_HuffEnc_Mem+0x98>)
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff feec 	bl	80090e4 <JPEG_Set_HuffAC_Mem>
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	e030      	b.n	800937c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009322:	461a      	mov	r2, r3
 8009324:	4918      	ldr	r1, [pc, #96]	@ (8009388 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff fedc 	bl	80090e4 <JPEG_Set_HuffAC_Mem>
 800932c:	4603      	mov	r3, r0
 800932e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	e020      	b.n	800937c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009342:	461a      	mov	r2, r3
 8009344:	4911      	ldr	r1, [pc, #68]	@ (800938c <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7ff fe49 	bl	8008fde <JPEG_Set_HuffDC_Mem>
 800934c:	4603      	mov	r3, r0
 800934e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	e010      	b.n	800937c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009362:	461a      	mov	r2, r3
 8009364:	490a      	ldr	r1, [pc, #40]	@ (8009390 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff fe39 	bl	8008fde <JPEG_Set_HuffDC_Mem>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	e000      	b.n	800937c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	08015a80 	.word	0x08015a80
 8009388:	08015b34 	.word	0x08015b34
 800938c:	08015a48 	.word	0x08015a48
 8009390:	08015a64 	.word	0x08015a64

08009394 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009394:	b480      	push	{r7}
 8009396:	b08b      	sub	sp, #44	@ 0x2c
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800939c:	4b80      	ldr	r3, [pc, #512]	@ (80095a0 <JPEG_Set_Huff_DHTMem+0x20c>)
 800939e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80093a0:	4b80      	ldr	r3, [pc, #512]	@ (80095a4 <JPEG_Set_Huff_DHTMem+0x210>)
 80093a2:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80093a4:	4b80      	ldr	r3, [pc, #512]	@ (80095a8 <JPEG_Set_Huff_DHTMem+0x214>)
 80093a6:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80093a8:	4b80      	ldr	r3, [pc, #512]	@ (80095ac <JPEG_Set_Huff_DHTMem+0x218>)
 80093aa:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80093b4:	330c      	adds	r3, #12
 80093b6:	623b      	str	r3, [r7, #32]
  index = 16;
 80093b8:	2310      	movs	r3, #16
 80093ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80093bc:	e01d      	b.n	80093fa <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	3b01      	subs	r3, #1
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	5cd3      	ldrb	r3, [r2, r3]
 80093c6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	3b02      	subs	r3, #2
 80093cc:	6979      	ldr	r1, [r7, #20]
 80093ce:	5ccb      	ldrb	r3, [r1, r3]
 80093d0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093d2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	3b03      	subs	r3, #3
 80093d8:	6979      	ldr	r1, [r7, #20]
 80093da:	5ccb      	ldrb	r3, [r1, r3]
 80093dc:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80093de:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80093e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093e2:	3a04      	subs	r2, #4
 80093e4:	6979      	ldr	r1, [r7, #20]
 80093e6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80093e8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	601a      	str	r2, [r3, #0]
    address--;
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	3b04      	subs	r3, #4
 80093f2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80093f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f6:	3b04      	subs	r3, #4
 80093f8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d8de      	bhi.n	80093be <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009408:	3318      	adds	r3, #24
 800940a:	623b      	str	r3, [r7, #32]
  index = 12;
 800940c:	230c      	movs	r3, #12
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009410:	e021      	b.n	8009456 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	3b01      	subs	r3, #1
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	4413      	add	r3, r2
 800941a:	7c1b      	ldrb	r3, [r3, #16]
 800941c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009420:	3b02      	subs	r3, #2
 8009422:	6979      	ldr	r1, [r7, #20]
 8009424:	440b      	add	r3, r1
 8009426:	7c1b      	ldrb	r3, [r3, #16]
 8009428:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800942a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800942c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942e:	3b03      	subs	r3, #3
 8009430:	6979      	ldr	r1, [r7, #20]
 8009432:	440b      	add	r3, r1
 8009434:	7c1b      	ldrb	r3, [r3, #16]
 8009436:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009438:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800943a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800943c:	3a04      	subs	r2, #4
 800943e:	6979      	ldr	r1, [r7, #20]
 8009440:	440a      	add	r2, r1
 8009442:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009444:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	601a      	str	r2, [r3, #0]
    address--;
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	3b04      	subs	r3, #4
 800944e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009452:	3b04      	subs	r3, #4
 8009454:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009458:	2b03      	cmp	r3, #3
 800945a:	d8da      	bhi.n	8009412 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009464:	3328      	adds	r3, #40	@ 0x28
 8009466:	623b      	str	r3, [r7, #32]
  index = 16;
 8009468:	2310      	movs	r3, #16
 800946a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800946c:	e01d      	b.n	80094aa <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009470:	3b01      	subs	r3, #1
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	5cd3      	ldrb	r3, [r2, r3]
 8009476:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	3b02      	subs	r3, #2
 800947c:	69f9      	ldr	r1, [r7, #28]
 800947e:	5ccb      	ldrb	r3, [r1, r3]
 8009480:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009482:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	3b03      	subs	r3, #3
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	5ccb      	ldrb	r3, [r1, r3]
 800948c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800948e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8009490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009492:	3a04      	subs	r2, #4
 8009494:	69f9      	ldr	r1, [r7, #28]
 8009496:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009498:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	601a      	str	r2, [r3, #0]
    address--;
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	3b04      	subs	r3, #4
 80094a2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	3b04      	subs	r3, #4
 80094a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80094aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d8de      	bhi.n	800946e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80094b8:	33cc      	adds	r3, #204	@ 0xcc
 80094ba:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	4b3b      	ldr	r3, [pc, #236]	@ (80095b0 <JPEG_Set_Huff_DHTMem+0x21c>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80094cc:	021a      	lsls	r2, r3, #8
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  *address = value;
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	3b04      	subs	r3, #4
 80094e6:	623b      	str	r3, [r7, #32]
  index = 160;
 80094e8:	23a0      	movs	r3, #160	@ 0xa0
 80094ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80094ec:	e021      	b.n	8009532 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80094ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f0:	3b01      	subs	r3, #1
 80094f2:	69fa      	ldr	r2, [r7, #28]
 80094f4:	4413      	add	r3, r2
 80094f6:	7c1b      	ldrb	r3, [r3, #16]
 80094f8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	3b02      	subs	r3, #2
 80094fe:	69f9      	ldr	r1, [r7, #28]
 8009500:	440b      	add	r3, r1
 8009502:	7c1b      	ldrb	r3, [r3, #16]
 8009504:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009506:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950a:	3b03      	subs	r3, #3
 800950c:	69f9      	ldr	r1, [r7, #28]
 800950e:	440b      	add	r3, r1
 8009510:	7c1b      	ldrb	r3, [r3, #16]
 8009512:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009514:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8009516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009518:	3a04      	subs	r2, #4
 800951a:	69f9      	ldr	r1, [r7, #28]
 800951c:	440a      	add	r2, r1
 800951e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009520:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	601a      	str	r2, [r3, #0]
    address--;
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	3b04      	subs	r3, #4
 800952a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952e:	3b04      	subs	r3, #4
 8009530:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009534:	2b03      	cmp	r3, #3
 8009536:	d8da      	bhi.n	80094ee <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009540:	33cc      	adds	r3, #204	@ 0xcc
 8009542:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	b29b      	uxth	r3, r3
 800954a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	785b      	ldrb	r3, [r3, #1]
 8009550:	061a      	lsls	r2, r3, #24
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	431a      	orrs	r2, r3
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	041b      	lsls	r3, r3, #16
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800956e:	33dc      	adds	r3, #220	@ 0xdc
 8009570:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	4b0e      	ldr	r3, [pc, #56]	@ (80095b0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8009578:	4013      	ands	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	7bdb      	ldrb	r3, [r3, #15]
 8009580:	021a      	lsls	r2, r3, #8
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4313      	orrs	r3, r2
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	7b92      	ldrb	r2, [r2, #14]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	3b04      	subs	r3, #4
 8009598:	623b      	str	r3, [r7, #32]
  index = 12;
 800959a:	230c      	movs	r3, #12
 800959c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800959e:	e027      	b.n	80095f0 <JPEG_Set_Huff_DHTMem+0x25c>
 80095a0:	08015a80 	.word	0x08015a80
 80095a4:	08015b34 	.word	0x08015b34
 80095a8:	08015a48 	.word	0x08015a48
 80095ac:	08015a64 	.word	0x08015a64
 80095b0:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80095b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b6:	3301      	adds	r3, #1
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	5cd3      	ldrb	r3, [r2, r3]
 80095bc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80095be:	6939      	ldr	r1, [r7, #16]
 80095c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c2:	440b      	add	r3, r1
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80095c8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80095ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095cc:	3b01      	subs	r3, #1
 80095ce:	6939      	ldr	r1, [r7, #16]
 80095d0:	5ccb      	ldrb	r3, [r1, r3]
 80095d2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80095d4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80095d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095d8:	3a02      	subs	r2, #2
 80095da:	6939      	ldr	r1, [r7, #16]
 80095dc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80095de:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	601a      	str	r2, [r3, #0]
    address--;
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	3b04      	subs	r3, #4
 80095e8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	3b04      	subs	r3, #4
 80095ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d8de      	bhi.n	80095b4 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80095fe:	33dc      	adds	r3, #220	@ 0xdc
 8009600:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	7c5b      	ldrb	r3, [r3, #17]
 800960e:	061a      	lsls	r2, r3, #24
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	431a      	orrs	r2, r3
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	7c1b      	ldrb	r3, [r3, #16]
 8009618:	041b      	lsls	r3, r3, #16
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800962c:	33e8      	adds	r3, #232	@ 0xe8
 800962e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	4b6d      	ldr	r3, [pc, #436]	@ (80097ec <JPEG_Set_Huff_DHTMem+0x458>)
 8009636:	4013      	ands	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	7edb      	ldrb	r3, [r3, #27]
 800963e:	021a      	lsls	r2, r3, #8
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4313      	orrs	r3, r2
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	7e92      	ldrb	r2, [r2, #26]
 8009648:	4313      	orrs	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	3b04      	subs	r3, #4
 8009656:	623b      	str	r3, [r7, #32]
  index = 8;
 8009658:	2308      	movs	r3, #8
 800965a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800965c:	e021      	b.n	80096a2 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	3301      	adds	r3, #1
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4413      	add	r3, r2
 8009666:	7c1b      	ldrb	r3, [r3, #16]
 8009668:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800966a:	6939      	ldr	r1, [r7, #16]
 800966c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966e:	440b      	add	r3, r1
 8009670:	3310      	adds	r3, #16
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009676:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967a:	3b01      	subs	r3, #1
 800967c:	6939      	ldr	r1, [r7, #16]
 800967e:	440b      	add	r3, r1
 8009680:	7c1b      	ldrb	r3, [r3, #16]
 8009682:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8009684:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8009686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009688:	3a02      	subs	r2, #2
 800968a:	6939      	ldr	r1, [r7, #16]
 800968c:	440a      	add	r2, r1
 800968e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009690:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	601a      	str	r2, [r3, #0]
    address--;
 8009696:	6a3b      	ldr	r3, [r7, #32]
 8009698:	3b04      	subs	r3, #4
 800969a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	3b04      	subs	r3, #4
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80096a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d8da      	bhi.n	800965e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80096b0:	33e8      	adds	r3, #232	@ 0xe8
 80096b2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	061a      	lsls	r2, r3, #24
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	431a      	orrs	r2, r3
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	041b      	lsls	r3, r3, #16
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  *address = value;
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80096de:	33f8      	adds	r3, #248	@ 0xf8
 80096e0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	4b41      	ldr	r3, [pc, #260]	@ (80097ec <JPEG_Set_Huff_DHTMem+0x458>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	7bdb      	ldrb	r3, [r3, #15]
 80096f0:	021a      	lsls	r2, r3, #8
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	7b92      	ldrb	r2, [r2, #14]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]
  *address = value;
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	3b04      	subs	r3, #4
 8009708:	623b      	str	r3, [r7, #32]
  index = 12;
 800970a:	230c      	movs	r3, #12
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800970e:	e01d      	b.n	800974c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	3301      	adds	r3, #1
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	5cd3      	ldrb	r3, [r2, r3]
 8009718:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800971a:	69b9      	ldr	r1, [r7, #24]
 800971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971e:	440b      	add	r3, r1
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009724:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	3b01      	subs	r3, #1
 800972a:	69b9      	ldr	r1, [r7, #24]
 800972c:	5ccb      	ldrb	r3, [r1, r3]
 800972e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009730:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8009732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009734:	3a02      	subs	r2, #2
 8009736:	69b9      	ldr	r1, [r7, #24]
 8009738:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800973a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	601a      	str	r2, [r3, #0]
    address--;
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	3b04      	subs	r3, #4
 8009744:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	3b04      	subs	r3, #4
 800974a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974e:	2b03      	cmp	r3, #3
 8009750:	d8de      	bhi.n	8009710 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800975a:	33f8      	adds	r3, #248	@ 0xf8
 800975c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	b29b      	uxth	r3, r3
 8009764:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	7c5b      	ldrb	r3, [r3, #17]
 800976a:	061a      	lsls	r2, r3, #24
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	431a      	orrs	r2, r3
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	7c1b      	ldrb	r3, [r3, #16]
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009788:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800978c:	623b      	str	r3, [r7, #32]
  index = 160;
 800978e:	23a0      	movs	r3, #160	@ 0xa0
 8009790:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009792:	e021      	b.n	80097d8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	3301      	adds	r3, #1
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	4413      	add	r3, r2
 800979c:	7c1b      	ldrb	r3, [r3, #16]
 800979e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80097a0:	69b9      	ldr	r1, [r7, #24]
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	440b      	add	r3, r1
 80097a6:	3310      	adds	r3, #16
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80097ac:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b0:	3b01      	subs	r3, #1
 80097b2:	69b9      	ldr	r1, [r7, #24]
 80097b4:	440b      	add	r3, r1
 80097b6:	7c1b      	ldrb	r3, [r3, #16]
 80097b8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80097ba:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80097bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097be:	3a02      	subs	r2, #2
 80097c0:	69b9      	ldr	r1, [r7, #24]
 80097c2:	440a      	add	r2, r1
 80097c4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80097c6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	601a      	str	r2, [r3, #0]
    address--;
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	3b04      	subs	r3, #4
 80097d0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	3b04      	subs	r3, #4
 80097d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80097d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d8da      	bhi.n	8009794 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	372c      	adds	r7, #44	@ 0x2c
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	ffff0000 	.word	0xffff0000

080097f0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d125      	bne.n	8009850 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800980a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01e      	beq.n	8009850 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3304      	adds	r3, #4
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff f90f 	bl	8008a3c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3304      	adds	r3, #4
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff f9f3 	bl	8008c16 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800983e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800984e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d116      	bne.n	800988a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800986a:	2108      	movs	r1, #8
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f988 	bl	8009b82 <JPEG_ReadInputData>
 8009872:	e00a      	b.n	800988a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800987a:	f003 0304 	and.w	r3, r3, #4
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8009882:	2101      	movs	r1, #1
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f97c 	bl	8009b82 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d116      	bne.n	80098c4 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d004      	beq.n	80098ae <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80098a4:	2108      	movs	r1, #8
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f864 	bl	8009974 <JPEG_StoreOutputData>
 80098ac:	e00a      	b.n	80098c4 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b4:	f003 0310 	and.w	r3, r3, #16
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 80098bc:	2101      	movs	r1, #1
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f858 	bl	8009974 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	d14b      	bne.n	800996a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 0201 	bic.w	r2, r2, #1
 80098e0:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e6:	f003 030c 	and.w	r3, r3, #12
 80098ea:	2b08      	cmp	r3, #8
 80098ec:	d107      	bne.n	80098fe <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80098fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800990c:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69d9      	ldr	r1, [r3, #28]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991e:	461a      	mov	r2, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff f9a2 	bl	8008c6a <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009930:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009936:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f003 0303 	and.w	r3, r3, #3
 8009954:	2b02      	cmp	r3, #2
 8009956:	d103      	bne.n	8009960 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff f971 	bl	8008c40 <HAL_JPEG_DecodeCpltCallback>
 800995e:	e002      	b.n	8009966 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff f963 	bl	8008c2c <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8009966:	2301      	movs	r3, #1
 8009968:	e000      	b.n	800996c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	440b      	add	r3, r1
 800998c:	429a      	cmp	r2, r3
 800998e:	d34b      	bcc.n	8009a28 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8009990:	2300      	movs	r3, #0
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e031      	b.n	80099fa <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800999c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69da      	ldr	r2, [r3, #28]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a6:	4413      	add	r3, r2
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	b2d2      	uxtb	r2, r2
 80099ac:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	0a19      	lsrs	r1, r3, #8
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	69da      	ldr	r2, [r3, #28]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ba:	3301      	adds	r3, #1
 80099bc:	4413      	add	r3, r2
 80099be:	b2ca      	uxtb	r2, r1
 80099c0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	0c19      	lsrs	r1, r3, #16
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69da      	ldr	r2, [r3, #28]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ce:	3302      	adds	r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	b2ca      	uxtb	r2, r1
 80099d4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	0e19      	lsrs	r1, r3, #24
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	69da      	ldr	r2, [r3, #28]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e2:	3303      	adds	r3, #3
 80099e4:	4413      	add	r3, r2
 80099e6:	b2ca      	uxtb	r2, r1
 80099e8:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ee:	1d1a      	adds	r2, r3, #4
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	3301      	adds	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d3c9      	bcc.n	8009996 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	f040 80b5 	bne.w	8009b7a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	69d9      	ldr	r1, [r3, #28]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff f925 	bl	8008c6a <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a26:	e0a8      	b.n	8009b7a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a30:	429a      	cmp	r2, r3
 8009a32:	f240 80a2 	bls.w	8009b7a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	089b      	lsrs	r3, r3, #2
 8009a42:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8009a44:	2300      	movs	r3, #0
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	e031      	b.n	8009aae <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a50:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	69da      	ldr	r2, [r3, #28]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a5a:	4413      	add	r3, r2
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	0a19      	lsrs	r1, r3, #8
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	69da      	ldr	r2, [r3, #28]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6e:	3301      	adds	r3, #1
 8009a70:	4413      	add	r3, r2
 8009a72:	b2ca      	uxtb	r2, r1
 8009a74:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	0c19      	lsrs	r1, r3, #16
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	69da      	ldr	r2, [r3, #28]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a82:	3302      	adds	r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	b2ca      	uxtb	r2, r1
 8009a88:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	0e19      	lsrs	r1, r3, #24
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69da      	ldr	r2, [r3, #28]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a96:	3303      	adds	r3, #3
 8009a98:	4413      	add	r3, r2
 8009a9a:	b2ca      	uxtb	r2, r1
 8009a9c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa2:	1d1a      	adds	r2, r3, #4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d3c9      	bcc.n	8009a4a <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d10b      	bne.n	8009ada <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	69d9      	ldr	r1, [r3, #28]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aca:	461a      	mov	r2, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff f8cc 	bl	8008c6a <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009ad8:	e04f      	b.n	8009b7a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aec:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	e015      	b.n	8009b20 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	fa22 f103 	lsr.w	r1, r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	69da      	ldr	r2, [r3, #28]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0a:	4413      	add	r3, r2
 8009b0c:	b2ca      	uxtb	r2, r1
 8009b0e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d3e5      	bcc.n	8009af4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	69d9      	ldr	r1, [r3, #28]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b30:	461a      	mov	r2, r3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff f899 	bl	8008c6a <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f1c3 0304 	rsb	r3, r3, #4
 8009b44:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	e013      	b.n	8009b74 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	fa22 f103 	lsr.w	r1, r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	69da      	ldr	r2, [r3, #28]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5e:	4413      	add	r3, r2
 8009b60:	b2ca      	uxtb	r2, r1
 8009b62:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	3301      	adds	r3, #1
 8009b72:	617b      	str	r3, [r7, #20]
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d9e8      	bls.n	8009b4c <JPEG_StoreOutputData+0x1d8>
}
 8009b7a:	bf00      	nop
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b088      	sub	sp, #32
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <JPEG_ReadInputData+0x1c>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d104      	bne.n	8009ba8 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7fe ffe0 	bl	8008b66 <HAL_JPEG_Pause>
 8009ba6:	e028      	b.n	8009bfa <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d906      	bls.n	8009bc2 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e01b      	b.n	8009bfa <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d115      	bne.n	8009bfa <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff f83d 	bl	8008c54 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d905      	bls.n	8009bee <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be6:	f023 0203 	bic.w	r2, r3, #3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f040 809f 	bne.w	8009d46 <JPEG_ReadInputData+0x1c4>
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 809b 	beq.w	8009d46 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	089b      	lsrs	r3, r3, #2
 8009c14:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d335      	bcc.n	8009c8a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	e02d      	b.n	8009c80 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	699a      	ldr	r2, [r3, #24]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699a      	ldr	r2, [r3, #24]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	4413      	add	r3, r2
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c44:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6999      	ldr	r1, [r3, #24]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3302      	adds	r3, #2
 8009c50:	440b      	add	r3, r1
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009c56:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3303      	adds	r3, #3
 8009c62:	4413      	add	r3, r2
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009c6c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c6e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	1d1a      	adds	r2, r3, #4
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	61bb      	str	r3, [r7, #24]
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d3cd      	bcc.n	8009c24 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8009c88:	e05d      	b.n	8009d46 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d035      	beq.n	8009cfc <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8009c90:	2300      	movs	r3, #0
 8009c92:	61bb      	str	r3, [r7, #24]
 8009c94:	e02d      	b.n	8009cf2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	699a      	ldr	r2, [r3, #24]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009cb6:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6999      	ldr	r1, [r3, #24]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3302      	adds	r3, #2
 8009cc2:	440b      	add	r3, r1
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009cc8:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3303      	adds	r3, #3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009cde:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009ce0:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	1d1a      	adds	r2, r3, #4
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	61bb      	str	r3, [r7, #24]
 8009cf2:	69ba      	ldr	r2, [r7, #24]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d3cd      	bcc.n	8009c96 <JPEG_ReadInputData+0x114>
}
 8009cfa:	e024      	b.n	8009d46 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8009d00:	2300      	movs	r3, #0
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	e017      	b.n	8009d36 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	699a      	ldr	r2, [r3, #24]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	4413      	add	r3, r2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	00db      	lsls	r3, r3, #3
 8009d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	3301      	adds	r3, #1
 8009d34:	61bb      	str	r3, [r7, #24]
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d3e3      	bcc.n	8009d06 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009d46:	bf00      	nop
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d125      	bne.n	8009dae <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01e      	beq.n	8009dae <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7fe fe60 	bl	8008a3c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7fe ff44 	bl	8008c16 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d9c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db4:	f003 0320 	and.w	r3, r3, #32
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d039      	beq.n	8009e30 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dc0:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 0201 	bic.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009de6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009df6:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d104      	bne.n	8009e10 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fa1a 	bl	800a244 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d105      	bne.n	8009e2a <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fa0e 	bl	800a244 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8009e28:	e002      	b.n	8009e30 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f804 	bl	8009e38 <JPEG_DMA_EndProcess>
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009e50:	1ad2      	subs	r2, r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d10a      	bne.n	8009e78 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	69d9      	ldr	r1, [r3, #28]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7fe fefc 	bl	8008c6a <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d134      	bne.n	8009ef0 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	69d9      	ldr	r1, [r3, #28]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e96:	461a      	mov	r2, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7fe fee6 	bl	8008c6a <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f022 0201 	bic.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eb8:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ebe:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f003 0303 	and.w	r3, r3, #3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d103      	bne.n	8009ee8 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7fe fead 	bl	8008c40 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8009ee6:	e00c      	b.n	8009f02 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7fe fe9f 	bl	8008c2c <HAL_JPEG_EncodeCpltCallback>
}
 8009eee:	e008      	b.n	8009f02 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f804 	bl	8009f0a <JPEG_DMA_PollResidualData>
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009f12:	2310      	movs	r3, #16
 8009f14:	617b      	str	r3, [r7, #20]
 8009f16:	e04f      	b.n	8009fb8 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d146      	bne.n	8009fb2 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f2a:	f003 0310 	and.w	r3, r3, #16
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d03f      	beq.n	8009fb2 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f38:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	69da      	ldr	r2, [r3, #28]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f42:	4413      	add	r3, r2
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	b2d2      	uxtb	r2, r2
 8009f48:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	0a19      	lsrs	r1, r3, #8
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	69da      	ldr	r2, [r3, #28]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f56:	3301      	adds	r3, #1
 8009f58:	4413      	add	r3, r2
 8009f5a:	b2ca      	uxtb	r2, r1
 8009f5c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	0c19      	lsrs	r1, r3, #16
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	69da      	ldr	r2, [r3, #28]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6a:	3302      	adds	r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	b2ca      	uxtb	r2, r1
 8009f70:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	0e19      	lsrs	r1, r3, #24
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	69da      	ldr	r2, [r3, #28]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7e:	3303      	adds	r3, #3
 8009f80:	4413      	add	r3, r2
 8009f82:	b2ca      	uxtb	r2, r1
 8009f84:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d10a      	bne.n	8009fb2 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	69d9      	ldr	r1, [r3, #28]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7fe fe5f 	bl	8008c6a <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	617b      	str	r3, [r7, #20]
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1ac      	bne.n	8009f18 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fc2:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fca:	f003 0310 	and.w	r3, r3, #16
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d004      	beq.n	8009fdc <JPEG_DMA_PollResidualData+0xd2>
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d133      	bne.n	800a044 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0201 	bic.w	r2, r2, #1
 8009fea:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	69d9      	ldr	r1, [r3, #28]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fe fe33 	bl	8008c6a <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a00e:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a014:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f003 0303 	and.w	r3, r3, #3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d103      	bne.n	800a03e <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7fe fe02 	bl	8008c40 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800a03c:	e002      	b.n	800a044 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7fe fdf4 	bl	8008c2c <HAL_JPEG_EncodeCpltCallback>
}
 800a044:	bf00      	nop
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b08b      	sub	sp, #44	@ 0x2c
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3350      	adds	r3, #80	@ 0x50
 800a05e:	61bb      	str	r3, [r7, #24]

  i = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a064:	e042      	b.n	800a0ec <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800a06c:	2300      	movs	r3, #0
 800a06e:	61fb      	str	r3, [r7, #28]
 800a070:	e033      	b.n	800a0da <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	fa22 f303 	lsr.w	r3, r2, r3
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d103      	bne.n	800a08e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	3364      	adds	r3, #100	@ 0x64
 800a08a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a08c:	e022      	b.n	800a0d4 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	2264      	movs	r2, #100	@ 0x64
 800a092:	fb02 f303 	mul.w	r3, r2, r3
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a09a:	6a38      	ldr	r0, [r7, #32]
 800a09c:	69f9      	ldr	r1, [r7, #28]
 800a09e:	4401      	add	r1, r0
 800a0a0:	4818      	ldr	r0, [pc, #96]	@ (800a104 <JPEG_GetQuality+0xb8>)
 800a0a2:	5c41      	ldrb	r1, [r0, r1]
 800a0a4:	440a      	add	r2, r1
 800a0a6:	7812      	ldrb	r2, [r2, #0]
 800a0a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0ac:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b64      	cmp	r3, #100	@ 0x64
 800a0b2:	d807      	bhi.n	800a0c4 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800a0ba:	085b      	lsrs	r3, r3, #1
 800a0bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0be:	4413      	add	r3, r2
 800a0c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0c2:	e007      	b.n	800a0d4 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800a0c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0d0:	4413      	add	r3, r2
 800a0d2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	61fb      	str	r3, [r7, #28]
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d9c8      	bls.n	800a072 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	2b3c      	cmp	r3, #60	@ 0x3c
 800a0f0:	d9b9      	bls.n	800a066 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	099b      	lsrs	r3, r3, #6
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	372c      	adds	r7, #44	@ 0x2c
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	08015be8 	.word	0x08015be8

0800a108 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a110:	f7f7 fde2 	bl	8001cd8 <HAL_GetTick>
 800a114:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e03b      	b.n	800a198 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0201 	bic.w	r2, r2, #1
 800a13e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a140:	e00f      	b.n	800a162 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a142:	f7f7 fdc9 	bl	8001cd8 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b05      	cmp	r3, #5
 800a14e:	d908      	bls.n	800a162 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2240      	movs	r2, #64	@ 0x40
 800a154:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2203      	movs	r2, #3
 800a15a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e01a      	b.n	800a198 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e8      	bne.n	800a142 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f9e3 	bl	800a53c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e03e      	b.n	800a238 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d101      	bne.n	800a1c8 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e037      	b.n	800a238 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d126      	bne.n	800a22a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d11c      	bne.n	800a224 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d108      	bne.n	800a212 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	691a      	ldr	r2, [r3, #16]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a20e:	611a      	str	r2, [r3, #16]
 800a210:	e00d      	b.n	800a22e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a220:	611a      	str	r2, [r3, #16]
 800a222:	e004      	b.n	800a22e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
 800a228:	e001      	b.n	800a22e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	371c      	adds	r7, #28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e017      	b.n	800a286 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d004      	beq.n	800a26c <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2280      	movs	r2, #128	@ 0x80
 800a266:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e00c      	b.n	800a286 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2204      	movs	r2, #4
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 0201 	bic.w	r2, r2, #1
 800a282:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
	...

0800a294 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a2a0:	4b91      	ldr	r3, [pc, #580]	@ (800a4e8 <HAL_MDMA_IRQHandler+0x254>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a91      	ldr	r2, [pc, #580]	@ (800a4ec <HAL_MDMA_IRQHandler+0x258>)
 800a2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2aa:	0a9b      	lsrs	r3, r3, #10
 800a2ac:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	4b8e      	ldr	r3, [pc, #568]	@ (800a4f0 <HAL_MDMA_IRQHandler+0x25c>)
 800a2b6:	4413      	add	r3, r2
 800a2b8:	099b      	lsrs	r3, r3, #6
 800a2ba:	f003 031f 	and.w	r3, r3, #31
 800a2be:	2201      	movs	r2, #1
 800a2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a2c6:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 812d 	beq.w	800a530 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d054      	beq.n	800a38e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d04d      	beq.n	800a38e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68da      	ldr	r2, [r3, #12]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 0202 	bic.w	r2, r2, #2
 800a300:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a310:	2b00      	cmp	r3, #0
 800a312:	d106      	bne.n	800a322 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a318:	f043 0201 	orr.w	r2, r3, #1
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	669a      	str	r2, [r3, #104]	@ 0x68
 800a320:	e005      	b.n	800a32e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a326:	f043 0202 	orr.w	r2, r3, #2
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a334:	2b00      	cmp	r3, #0
 800a336:	d005      	beq.n	800a344 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a33c:	f043 0204 	orr.w	r2, r3, #4
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d005      	beq.n	800a35a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a352:	f043 0208 	orr.w	r2, r3, #8
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a360:	2b00      	cmp	r3, #0
 800a362:	d005      	beq.n	800a370 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a368:	f043 0210 	orr.w	r2, r3, #16
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a376:	2b00      	cmp	r3, #0
 800a378:	d005      	beq.n	800a386 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a37e:	f043 0220 	orr.w	r2, r3, #32
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2201      	movs	r2, #1
 800a38c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0310 	and.w	r3, r3, #16
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d012      	beq.n	800a3c2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f003 0320 	and.w	r3, r3, #32
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00b      	beq.n	800a3c2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2210      	movs	r2, #16
 800a3b0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0308 	and.w	r3, r3, #8
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d012      	beq.n	800a3f6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f003 0310 	and.w	r3, r3, #16
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00b      	beq.n	800a3f6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d012      	beq.n	800a42a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	f003 0308 	and.w	r3, r3, #8
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00b      	beq.n	800a42a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2204      	movs	r2, #4
 800a418:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d039      	beq.n	800a4ac <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f003 0304 	and.w	r3, r3, #4
 800a442:	2b00      	cmp	r3, #0
 800a444:	d032      	beq.n	800a4ac <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a454:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d110      	bne.n	800a484 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a476:	2b00      	cmp	r3, #0
 800a478:	d05c      	beq.n	800a534 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	4798      	blx	r3
        }
        return;
 800a482:	e057      	b.n	800a534 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2202      	movs	r2, #2
 800a48a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d040      	beq.n	800a536 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2204      	movs	r2, #4
 800a4b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68da      	ldr	r2, [r3, #12]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 0201 	bic.w	r2, r2, #1
 800a4ca:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	60bb      	str	r3, [r7, #8]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d30d      	bcc.n	800a4f4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1f2      	bne.n	800a4cc <HAL_MDMA_IRQHandler+0x238>
 800a4e6:	e006      	b.n	800a4f6 <HAL_MDMA_IRQHandler+0x262>
 800a4e8:	24000000 	.word	0x24000000
 800a4ec:	1b4e81b5 	.word	0x1b4e81b5
 800a4f0:	adffffc0 	.word	0xadffffc0
        break;
 800a4f4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d004      	beq.n	800a516 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2203      	movs	r2, #3
 800a510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a514:	e003      	b.n	800a51e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a522:	2b00      	cmp	r3, #0
 800a524:	d007      	beq.n	800a536 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	4798      	blx	r3
 800a52e:	e002      	b.n	800a536 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800a530:	bf00      	nop
 800a532:	e000      	b.n	800a536 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800a534:	bf00      	nop
    }
  }
}
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68d9      	ldr	r1, [r3, #12]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	691a      	ldr	r2, [r3, #16]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	430a      	orrs	r2, r1
 800a552:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	695a      	ldr	r2, [r3, #20]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a562:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800a56e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a574:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800a57a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a580:	3b01      	subs	r3, #1
 800a582:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800a584:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800a590:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a592:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a59c:	d107      	bne.n	800a5ae <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	691a      	ldr	r2, [r3, #16]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800a5ac:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	da11      	bge.n	800a5e2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	695a      	ldr	r2, [r3, #20]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a5cc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d2:	425b      	negs	r3, r3
 800a5d4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	b292      	uxth	r2, r2
 800a5de:	621a      	str	r2, [r3, #32]
 800a5e0:	e006      	b.n	800a5f0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	b292      	uxth	r2, r2
 800a5ee:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	da15      	bge.n	800a624 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	695a      	ldr	r2, [r3, #20]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800a606:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a60c:	425b      	negs	r3, r3
 800a60e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6a19      	ldr	r1, [r3, #32]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	041a      	lsls	r2, r3, #16
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	621a      	str	r2, [r3, #32]
 800a622:	e009      	b.n	800a638 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6a19      	ldr	r1, [r3, #32]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62e:	041a      	lsls	r2, r3, #16
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	430a      	orrs	r2, r1
 800a636:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a640:	d006      	beq.n	800a650 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	b2d2      	uxtb	r2, r2
 800a64c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a64e:	e003      	b.n	800a658 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2200      	movs	r2, #0
 800a656:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2200      	movs	r2, #0
 800a65e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a660:	bf00      	nop
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af02      	add	r7, sp, #8
 800a672:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e0fe      	b.n	800a87c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f00a f98e 	bl	80149b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2203      	movs	r2, #3
 800a69c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f006 fd3e 	bl	8011126 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	7c1a      	ldrb	r2, [r3, #16]
 800a6b2:	f88d 2000 	strb.w	r2, [sp]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6ba:	f006 fc0f 	bl	8010edc <USB_CoreInit>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e0d5      	b.n	800a87c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f006 fd36 	bl	8011148 <USB_SetCurrentMode>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d005      	beq.n	800a6ee <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e0c6      	b.n	800a87c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]
 800a6f2:	e04a      	b.n	800a78a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a6f4:	7bfa      	ldrb	r2, [r7, #15]
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	440b      	add	r3, r1
 800a702:	3315      	adds	r3, #21
 800a704:	2201      	movs	r2, #1
 800a706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a708:	7bfa      	ldrb	r2, [r7, #15]
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	4613      	mov	r3, r2
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	3314      	adds	r3, #20
 800a718:	7bfa      	ldrb	r2, [r7, #15]
 800a71a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a71c:	7bfa      	ldrb	r2, [r7, #15]
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	b298      	uxth	r0, r3
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	4613      	mov	r3, r2
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	332e      	adds	r3, #46	@ 0x2e
 800a730:	4602      	mov	r2, r0
 800a732:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a734:	7bfa      	ldrb	r2, [r7, #15]
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	4613      	mov	r3, r2
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	4413      	add	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	440b      	add	r3, r1
 800a742:	3318      	adds	r3, #24
 800a744:	2200      	movs	r2, #0
 800a746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a748:	7bfa      	ldrb	r2, [r7, #15]
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	4613      	mov	r3, r2
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	4413      	add	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	440b      	add	r3, r1
 800a756:	331c      	adds	r3, #28
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a75c:	7bfa      	ldrb	r2, [r7, #15]
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	3320      	adds	r3, #32
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a770:	7bfa      	ldrb	r2, [r7, #15]
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	4613      	mov	r3, r2
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	440b      	add	r3, r1
 800a77e:	3324      	adds	r3, #36	@ 0x24
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	3301      	adds	r3, #1
 800a788:	73fb      	strb	r3, [r7, #15]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	791b      	ldrb	r3, [r3, #4]
 800a78e:	7bfa      	ldrb	r2, [r7, #15]
 800a790:	429a      	cmp	r2, r3
 800a792:	d3af      	bcc.n	800a6f4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
 800a798:	e044      	b.n	800a824 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a79a:	7bfa      	ldrb	r2, [r7, #15]
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	00db      	lsls	r3, r3, #3
 800a7a2:	4413      	add	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	440b      	add	r3, r1
 800a7a8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a7b0:	7bfa      	ldrb	r2, [r7, #15]
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	4413      	add	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	440b      	add	r3, r1
 800a7be:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a7c2:	7bfa      	ldrb	r2, [r7, #15]
 800a7c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a7c6:	7bfa      	ldrb	r2, [r7, #15]
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a7dc:	7bfa      	ldrb	r2, [r7, #15]
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	440b      	add	r3, r1
 800a7ea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a7f2:	7bfa      	ldrb	r2, [r7, #15]
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	440b      	add	r3, r1
 800a800:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a808:	7bfa      	ldrb	r2, [r7, #15]
 800a80a:	6879      	ldr	r1, [r7, #4]
 800a80c:	4613      	mov	r3, r2
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	440b      	add	r3, r1
 800a816:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	3301      	adds	r3, #1
 800a822:	73fb      	strb	r3, [r7, #15]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	791b      	ldrb	r3, [r3, #4]
 800a828:	7bfa      	ldrb	r2, [r7, #15]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d3b5      	bcc.n	800a79a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	7c1a      	ldrb	r2, [r3, #16]
 800a836:	f88d 2000 	strb.w	r2, [sp]
 800a83a:	3304      	adds	r3, #4
 800a83c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a83e:	f006 fccf 	bl	80111e0 <USB_DevInit>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d005      	beq.n	800a854 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e013      	b.n	800a87c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	7b1b      	ldrb	r3, [r3, #12]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d102      	bne.n	800a870 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 f96e 	bl	800bb4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4618      	mov	r0, r3
 800a876:	f007 fd12 	bl	801229e <USB_DevDisconnect>

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d101      	bne.n	800a8a0 <HAL_PCD_Start+0x1c>
 800a89c:	2302      	movs	r3, #2
 800a89e:	e022      	b.n	800a8e6 <HAL_PCD_Start+0x62>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d009      	beq.n	800a8c8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d105      	bne.n	800a8c8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f006 fc19 	bl	8011104 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f007 fcc0 	bl	801225c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a8ee:	b590      	push	{r4, r7, lr}
 800a8f0:	b08d      	sub	sp, #52	@ 0x34
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4618      	mov	r0, r3
 800a906:	f007 fd7e 	bl	8012406 <USB_GetMode>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 84b9 	bne.w	800b284 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4618      	mov	r0, r3
 800a918:	f007 fce2 	bl	80122e0 <USB_ReadInterrupts>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 84af 	beq.w	800b282 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f007 fccf 	bl	80122e0 <USB_ReadInterrupts>
 800a942:	4603      	mov	r3, r0
 800a944:	f003 0302 	and.w	r3, r3, #2
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d107      	bne.n	800a95c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	695a      	ldr	r2, [r3, #20]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f002 0202 	and.w	r2, r2, #2
 800a95a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f007 fcbd 	bl	80122e0 <USB_ReadInterrupts>
 800a966:	4603      	mov	r3, r0
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b10      	cmp	r3, #16
 800a96e:	d161      	bne.n	800aa34 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	699a      	ldr	r2, [r3, #24]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f022 0210 	bic.w	r2, r2, #16
 800a97e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	f003 020f 	and.w	r2, r3, #15
 800a98c:	4613      	mov	r3, r2
 800a98e:	00db      	lsls	r3, r3, #3
 800a990:	4413      	add	r3, r2
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	4413      	add	r3, r2
 800a99c:	3304      	adds	r3, #4
 800a99e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a9a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a9aa:	d124      	bne.n	800a9f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d035      	beq.n	800aa24 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	091b      	lsrs	r3, r3, #4
 800a9c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a9c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	6a38      	ldr	r0, [r7, #32]
 800a9cc:	f007 faf4 	bl	8011fb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	68da      	ldr	r2, [r3, #12]
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	091b      	lsrs	r3, r3, #4
 800a9d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9dc:	441a      	add	r2, r3
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	695a      	ldr	r2, [r3, #20]
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	091b      	lsrs	r3, r3, #4
 800a9ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9ee:	441a      	add	r2, r3
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	615a      	str	r2, [r3, #20]
 800a9f4:	e016      	b.n	800aa24 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800a9fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aa00:	d110      	bne.n	800aa24 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa08:	2208      	movs	r2, #8
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6a38      	ldr	r0, [r7, #32]
 800aa0e:	f007 fad3 	bl	8011fb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	695a      	ldr	r2, [r3, #20]
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	091b      	lsrs	r3, r3, #4
 800aa1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa1e:	441a      	add	r2, r3
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	699a      	ldr	r2, [r3, #24]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f042 0210 	orr.w	r2, r2, #16
 800aa32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f007 fc51 	bl	80122e0 <USB_ReadInterrupts>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aa44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aa48:	f040 80a7 	bne.w	800ab9a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f007 fc56 	bl	8012306 <USB_ReadDevAllOutEpInterrupt>
 800aa5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800aa5c:	e099      	b.n	800ab92 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800aa5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 808e 	beq.w	800ab86 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa70:	b2d2      	uxtb	r2, r2
 800aa72:	4611      	mov	r1, r2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f007 fc7a 	bl	801236e <USB_ReadDevOutEPInterrupt>
 800aa7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	f003 0301 	and.w	r3, r3, #1
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00c      	beq.n	800aaa0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800aa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa92:	461a      	mov	r2, r3
 800aa94:	2301      	movs	r3, #1
 800aa96:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800aa98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fed0 	bl	800b840 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f003 0308 	and.w	r3, r3, #8
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00c      	beq.n	800aac4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaac:	015a      	lsls	r2, r3, #5
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	4413      	add	r3, r2
 800aab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab6:	461a      	mov	r2, r3
 800aab8:	2308      	movs	r3, #8
 800aaba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800aabc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 ffa6 	bl	800ba10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	f003 0310 	and.w	r3, r3, #16
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d008      	beq.n	800aae0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aada:	461a      	mov	r2, r3
 800aadc:	2310      	movs	r3, #16
 800aade:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d030      	beq.n	800ab4c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaf2:	2b80      	cmp	r3, #128	@ 0x80
 800aaf4:	d109      	bne.n	800ab0a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	69fa      	ldr	r2, [r7, #28]
 800ab00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ab08:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800ab0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	4413      	add	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	78db      	ldrb	r3, [r3, #3]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d108      	bne.n	800ab3a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f00a f863 	bl	8014c00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab46:	461a      	mov	r2, r3
 800ab48:	2302      	movs	r3, #2
 800ab4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ab56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab62:	461a      	mov	r2, r3
 800ab64:	2320      	movs	r3, #32
 800ab66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d009      	beq.n	800ab86 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7e:	461a      	mov	r2, r3
 800ab80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ab86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab88:	3301      	adds	r3, #1
 800ab8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ab8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ab92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f47f af62 	bne.w	800aa5e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f007 fb9e 	bl	80122e0 <USB_ReadInterrupts>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800abaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800abae:	f040 80db 	bne.w	800ad68 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f007 fbbf 	bl	801233a <USB_ReadDevAllInEpInterrupt>
 800abbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800abc2:	e0cd      	b.n	800ad60 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800abc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 80c2 	beq.w	800ad54 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abd6:	b2d2      	uxtb	r2, r2
 800abd8:	4611      	mov	r1, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f007 fbe5 	bl	80123aa <USB_ReadDevInEPInterrupt>
 800abe0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d057      	beq.n	800ac9c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800abec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abee:	f003 030f 	and.w	r3, r3, #15
 800abf2:	2201      	movs	r2, #1
 800abf4:	fa02 f303 	lsl.w	r3, r2, r3
 800abf8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	43db      	mvns	r3, r3
 800ac06:	69f9      	ldr	r1, [r7, #28]
 800ac08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	2301      	movs	r3, #1
 800ac20:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	799b      	ldrb	r3, [r3, #6]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d132      	bne.n	800ac90 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac2e:	4613      	mov	r3, r2
 800ac30:	00db      	lsls	r3, r3, #3
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	3320      	adds	r3, #32
 800ac3a:	6819      	ldr	r1, [r3, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac40:	4613      	mov	r3, r2
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4403      	add	r3, r0
 800ac4a:	331c      	adds	r3, #28
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4419      	add	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac54:	4613      	mov	r3, r2
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4403      	add	r3, r0
 800ac5e:	3320      	adds	r3, #32
 800ac60:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d113      	bne.n	800ac90 <HAL_PCD_IRQHandler+0x3a2>
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	4413      	add	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	440b      	add	r3, r1
 800ac76:	3324      	adds	r3, #36	@ 0x24
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d108      	bne.n	800ac90 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ac88:	461a      	mov	r2, r3
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	f007 fbee 	bl	801246c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f009 ff2d 	bl	8014af6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f003 0308 	and.w	r3, r3, #8
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d008      	beq.n	800acb8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	015a      	lsls	r2, r3, #5
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	4413      	add	r3, r2
 800acae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acb2:	461a      	mov	r2, r3
 800acb4:	2308      	movs	r3, #8
 800acb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f003 0310 	and.w	r3, r3, #16
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d008      	beq.n	800acd4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc4:	015a      	lsls	r2, r3, #5
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acce:	461a      	mov	r2, r3
 800acd0:	2310      	movs	r3, #16
 800acd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d008      	beq.n	800acf0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acea:	461a      	mov	r2, r3
 800acec:	2340      	movs	r3, #64	@ 0x40
 800acee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f003 0302 	and.w	r3, r3, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d023      	beq.n	800ad42 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800acfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800acfc:	6a38      	ldr	r0, [r7, #32]
 800acfe:	f006 fbcd 	bl	801149c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800ad02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad04:	4613      	mov	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	3310      	adds	r3, #16
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	4413      	add	r3, r2
 800ad12:	3304      	adds	r3, #4
 800ad14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	78db      	ldrb	r3, [r3, #3]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d108      	bne.n	800ad30 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2200      	movs	r2, #0
 800ad22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ad24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f009 ff7a 	bl	8014c24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800ad30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	2302      	movs	r3, #2
 800ad40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ad4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fcea 	bl	800b728 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ad54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad56:	3301      	adds	r3, #1
 800ad58:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ad5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5c:	085b      	lsrs	r3, r3, #1
 800ad5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ad60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f47f af2e 	bne.w	800abc4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f007 fab7 	bl	80122e0 <USB_ReadInterrupts>
 800ad72:	4603      	mov	r3, r0
 800ad74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad7c:	d122      	bne.n	800adc4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	69fa      	ldr	r2, [r7, #28]
 800ad88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad8c:	f023 0301 	bic.w	r3, r3, #1
 800ad90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d108      	bne.n	800adae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ada4:	2100      	movs	r1, #0
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fef4 	bl	800bb94 <HAL_PCDEx_LPM_Callback>
 800adac:	e002      	b.n	800adb4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f009 ff18 	bl	8014be4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	695a      	ldr	r2, [r3, #20]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800adc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	f007 fa89 	bl	80122e0 <USB_ReadInterrupts>
 800adce:	4603      	mov	r3, r0
 800add0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800add4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800add8:	d112      	bne.n	800ae00 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d102      	bne.n	800adf0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f009 fed4 	bl	8014b98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	695a      	ldr	r2, [r3, #20]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800adfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f007 fa6b 	bl	80122e0 <USB_ReadInterrupts>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae14:	d121      	bne.n	800ae5a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	695a      	ldr	r2, [r3, #20]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800ae24:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d111      	bne.n	800ae54 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae3e:	089b      	lsrs	r3, r3, #2
 800ae40:	f003 020f 	and.w	r2, r3, #15
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fea1 	bl	800bb94 <HAL_PCDEx_LPM_Callback>
 800ae52:	e002      	b.n	800ae5a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f009 fe9f 	bl	8014b98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f007 fa3e 	bl	80122e0 <USB_ReadInterrupts>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae6e:	f040 80b7 	bne.w	800afe0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	69fa      	ldr	r2, [r7, #28]
 800ae7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2110      	movs	r1, #16
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f006 fb05 	bl	801149c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae92:	2300      	movs	r3, #0
 800ae94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae96:	e046      	b.n	800af26 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea4:	461a      	mov	r2, r3
 800aea6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aeaa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aeac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	69fa      	ldr	r2, [r7, #28]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aec6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aeca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800aecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aed8:	461a      	mov	r2, r3
 800aeda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aede:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aef0:	0151      	lsls	r1, r2, #5
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	440a      	add	r2, r1
 800aef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aefa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aefe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af10:	0151      	lsls	r1, r2, #5
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	440a      	add	r2, r1
 800af16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af1e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af22:	3301      	adds	r3, #1
 800af24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	791b      	ldrb	r3, [r3, #4]
 800af2a:	461a      	mov	r2, r3
 800af2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2e:	4293      	cmp	r3, r2
 800af30:	d3b2      	bcc.n	800ae98 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af40:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800af44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	7bdb      	ldrb	r3, [r3, #15]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d016      	beq.n	800af7c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af58:	69fa      	ldr	r2, [r7, #28]
 800af5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af5e:	f043 030b 	orr.w	r3, r3, #11
 800af62:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af74:	f043 030b 	orr.w	r3, r3, #11
 800af78:	6453      	str	r3, [r2, #68]	@ 0x44
 800af7a:	e015      	b.n	800afa8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af82:	695a      	ldr	r2, [r3, #20]
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af8a:	4619      	mov	r1, r3
 800af8c:	f242 032b 	movw	r3, #8235	@ 0x202b
 800af90:	4313      	orrs	r3, r2
 800af92:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	69fa      	ldr	r2, [r7, #28]
 800af9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afa2:	f043 030b 	orr.w	r3, r3, #11
 800afa6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	69fa      	ldr	r2, [r7, #28]
 800afb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800afb6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800afba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6818      	ldr	r0, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800afca:	461a      	mov	r2, r3
 800afcc:	f007 fa4e 	bl	801246c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	695a      	ldr	r2, [r3, #20]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800afde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f007 f97b 	bl	80122e0 <USB_ReadInterrupts>
 800afea:	4603      	mov	r3, r0
 800afec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aff4:	d123      	bne.n	800b03e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4618      	mov	r0, r3
 800affc:	f007 fa12 	bl	8012424 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4618      	mov	r0, r3
 800b006:	f006 fac2 	bl	801158e <USB_GetDevSpeed>
 800b00a:	4603      	mov	r3, r0
 800b00c:	461a      	mov	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681c      	ldr	r4, [r3, #0]
 800b016:	f001 fd9d 	bl	800cb54 <HAL_RCC_GetHCLKFreq>
 800b01a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b020:	461a      	mov	r2, r3
 800b022:	4620      	mov	r0, r4
 800b024:	f005 ffcc 	bl	8010fc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f009 fd8c 	bl	8014b46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	695a      	ldr	r2, [r3, #20]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b03c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f007 f94c 	bl	80122e0 <USB_ReadInterrupts>
 800b048:	4603      	mov	r3, r0
 800b04a:	f003 0308 	and.w	r3, r3, #8
 800b04e:	2b08      	cmp	r3, #8
 800b050:	d10a      	bne.n	800b068 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f009 fd69 	bl	8014b2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	695a      	ldr	r2, [r3, #20]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f002 0208 	and.w	r2, r2, #8
 800b066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f007 f937 	bl	80122e0 <USB_ReadInterrupts>
 800b072:	4603      	mov	r3, r0
 800b074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b078:	2b80      	cmp	r3, #128	@ 0x80
 800b07a:	d123      	bne.n	800b0c4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b088:	2301      	movs	r3, #1
 800b08a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b08c:	e014      	b.n	800b0b8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b092:	4613      	mov	r3, r2
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	440b      	add	r3, r1
 800b09c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d105      	bne.n	800b0b2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fb0a 	bl	800b6c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	791b      	ldrb	r3, [r3, #4]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d3e4      	bcc.n	800b08e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f007 f909 	bl	80122e0 <USB_ReadInterrupts>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0d8:	d13c      	bne.n	800b154 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b0da:	2301      	movs	r3, #1
 800b0dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0de:	e02b      	b.n	800b138 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	00db      	lsls	r3, r3, #3
 800b0f8:	4413      	add	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	440b      	add	r3, r1
 800b0fe:	3318      	adds	r3, #24
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d115      	bne.n	800b132 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b106:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da12      	bge.n	800b132 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b110:	4613      	mov	r3, r2
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	4413      	add	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	440b      	add	r3, r1
 800b11a:	3317      	adds	r3, #23
 800b11c:	2201      	movs	r2, #1
 800b11e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b122:	b2db      	uxtb	r3, r3
 800b124:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 faca 	bl	800b6c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b134:	3301      	adds	r3, #1
 800b136:	627b      	str	r3, [r7, #36]	@ 0x24
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	791b      	ldrb	r3, [r3, #4]
 800b13c:	461a      	mov	r2, r3
 800b13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b140:	4293      	cmp	r3, r2
 800b142:	d3cd      	bcc.n	800b0e0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	695a      	ldr	r2, [r3, #20]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4618      	mov	r0, r3
 800b15a:	f007 f8c1 	bl	80122e0 <USB_ReadInterrupts>
 800b15e:	4603      	mov	r3, r0
 800b160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b164:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b168:	d156      	bne.n	800b218 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b16a:	2301      	movs	r3, #1
 800b16c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b16e:	e045      	b.n	800b1fc <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b184:	4613      	mov	r3, r2
 800b186:	00db      	lsls	r3, r3, #3
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	440b      	add	r3, r1
 800b18e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d12e      	bne.n	800b1f6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b198:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da2b      	bge.n	800b1f6 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	0c1a      	lsrs	r2, r3, #16
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b1a8:	4053      	eors	r3, r2
 800b1aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d121      	bne.n	800b1f6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	00db      	lsls	r3, r3, #3
 800b1ba:	4413      	add	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	440b      	add	r3, r1
 800b1c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b1d0:	6a3b      	ldr	r3, [r7, #32]
 800b1d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10a      	bne.n	800b1f6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	69fa      	ldr	r2, [r7, #28]
 800b1ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b1f2:	6053      	str	r3, [r2, #4]
            break;
 800b1f4:	e008      	b.n	800b208 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	791b      	ldrb	r3, [r3, #4]
 800b200:	461a      	mov	r2, r3
 800b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b204:	4293      	cmp	r3, r2
 800b206:	d3b3      	bcc.n	800b170 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	695a      	ldr	r2, [r3, #20]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f007 f85f 	bl	80122e0 <USB_ReadInterrupts>
 800b222:	4603      	mov	r3, r0
 800b224:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b22c:	d10a      	bne.n	800b244 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f009 fd0a 	bl	8014c48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	695a      	ldr	r2, [r3, #20]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f007 f849 	bl	80122e0 <USB_ReadInterrupts>
 800b24e:	4603      	mov	r3, r0
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b04      	cmp	r3, #4
 800b256:	d115      	bne.n	800b284 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f009 fcfa 	bl	8014c64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6859      	ldr	r1, [r3, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	430a      	orrs	r2, r1
 800b27e:	605a      	str	r2, [r3, #4]
 800b280:	e000      	b.n	800b284 <HAL_PCD_IRQHandler+0x996>
      return;
 800b282:	bf00      	nop
    }
  }
}
 800b284:	3734      	adds	r7, #52	@ 0x34
 800b286:	46bd      	mov	sp, r7
 800b288:	bd90      	pop	{r4, r7, pc}

0800b28a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b082      	sub	sp, #8
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	460b      	mov	r3, r1
 800b294:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d101      	bne.n	800b2a4 <HAL_PCD_SetAddress+0x1a>
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e012      	b.n	800b2ca <HAL_PCD_SetAddress+0x40>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	78fa      	ldrb	r2, [r7, #3]
 800b2b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	78fa      	ldrb	r2, [r7, #3]
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f006 ffa8 	bl	8012210 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	4608      	mov	r0, r1
 800b2dc:	4611      	mov	r1, r2
 800b2de:	461a      	mov	r2, r3
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	70fb      	strb	r3, [r7, #3]
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	803b      	strh	r3, [r7, #0]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b2f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da0f      	bge.n	800b318 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	f003 020f 	and.w	r2, r3, #15
 800b2fe:	4613      	mov	r3, r2
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	3310      	adds	r3, #16
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	4413      	add	r3, r2
 800b30c:	3304      	adds	r3, #4
 800b30e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2201      	movs	r2, #1
 800b314:	705a      	strb	r2, [r3, #1]
 800b316:	e00f      	b.n	800b338 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	f003 020f 	and.w	r2, r3, #15
 800b31e:	4613      	mov	r3, r2
 800b320:	00db      	lsls	r3, r3, #3
 800b322:	4413      	add	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	4413      	add	r3, r2
 800b32e:	3304      	adds	r3, #4
 800b330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b338:	78fb      	ldrb	r3, [r7, #3]
 800b33a:	f003 030f 	and.w	r3, r3, #15
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b344:	883b      	ldrh	r3, [r7, #0]
 800b346:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	78ba      	ldrb	r2, [r7, #2]
 800b352:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	785b      	ldrb	r3, [r3, #1]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d004      	beq.n	800b366 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b366:	78bb      	ldrb	r3, [r7, #2]
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d102      	bne.n	800b372 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d101      	bne.n	800b380 <HAL_PCD_EP_Open+0xae>
 800b37c:	2302      	movs	r3, #2
 800b37e:	e00e      	b.n	800b39e <HAL_PCD_EP_Open+0xcc>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68f9      	ldr	r1, [r7, #12]
 800b38e:	4618      	mov	r0, r3
 800b390:	f006 f922 	bl	80115d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800b39c:	7afb      	ldrb	r3, [r7, #11]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b3b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da0f      	bge.n	800b3da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	f003 020f 	and.w	r2, r3, #15
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	00db      	lsls	r3, r3, #3
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	3310      	adds	r3, #16
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	705a      	strb	r2, [r3, #1]
 800b3d8:	e00f      	b.n	800b3fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	f003 020f 	and.w	r2, r3, #15
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	00db      	lsls	r3, r3, #3
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b3fa:	78fb      	ldrb	r3, [r7, #3]
 800b3fc:	f003 030f 	and.w	r3, r3, #15
 800b400:	b2da      	uxtb	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d101      	bne.n	800b414 <HAL_PCD_EP_Close+0x6e>
 800b410:	2302      	movs	r3, #2
 800b412:	e00e      	b.n	800b432 <HAL_PCD_EP_Close+0x8c>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68f9      	ldr	r1, [r7, #12]
 800b422:	4618      	mov	r0, r3
 800b424:	f006 f960 	bl	80116e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b086      	sub	sp, #24
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
 800b446:	460b      	mov	r3, r1
 800b448:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b44a:	7afb      	ldrb	r3, [r7, #11]
 800b44c:	f003 020f 	and.w	r2, r3, #15
 800b450:	4613      	mov	r3, r2
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	4413      	add	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	3304      	adds	r3, #4
 800b462:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2200      	movs	r2, #0
 800b474:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2200      	movs	r2, #0
 800b47a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b47c:	7afb      	ldrb	r3, [r7, #11]
 800b47e:	f003 030f 	and.w	r3, r3, #15
 800b482:	b2da      	uxtb	r2, r3
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	799b      	ldrb	r3, [r3, #6]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d102      	bne.n	800b496 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	799b      	ldrb	r3, [r3, #6]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	6979      	ldr	r1, [r7, #20]
 800b4a2:	f006 f9fd 	bl	80118a0 <USB_EPStartXfer>

  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	f003 020f 	and.w	r2, r3, #15
 800b4c2:	6879      	ldr	r1, [r7, #4]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	00db      	lsls	r3, r3, #3
 800b4c8:	4413      	add	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	440b      	add	r3, r1
 800b4ce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b4d2:	681b      	ldr	r3, [r3, #0]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	607a      	str	r2, [r7, #4]
 800b4ea:	603b      	str	r3, [r7, #0]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4f0:	7afb      	ldrb	r3, [r7, #11]
 800b4f2:	f003 020f 	and.w	r2, r3, #15
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	00db      	lsls	r3, r3, #3
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	3310      	adds	r3, #16
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4413      	add	r3, r2
 800b504:	3304      	adds	r3, #4
 800b506:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	2200      	movs	r2, #0
 800b518:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2201      	movs	r2, #1
 800b51e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b520:	7afb      	ldrb	r3, [r7, #11]
 800b522:	f003 030f 	and.w	r3, r3, #15
 800b526:	b2da      	uxtb	r2, r3
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	799b      	ldrb	r3, [r3, #6]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d102      	bne.n	800b53a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	799b      	ldrb	r3, [r3, #6]
 800b542:	461a      	mov	r2, r3
 800b544:	6979      	ldr	r1, [r7, #20]
 800b546:	f006 f9ab 	bl	80118a0 <USB_EPStartXfer>

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	f003 030f 	and.w	r3, r3, #15
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	7912      	ldrb	r2, [r2, #4]
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d901      	bls.n	800b572 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e04f      	b.n	800b612 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b576:	2b00      	cmp	r3, #0
 800b578:	da0f      	bge.n	800b59a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b57a:	78fb      	ldrb	r3, [r7, #3]
 800b57c:	f003 020f 	and.w	r2, r3, #15
 800b580:	4613      	mov	r3, r2
 800b582:	00db      	lsls	r3, r3, #3
 800b584:	4413      	add	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	3310      	adds	r3, #16
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	4413      	add	r3, r2
 800b58e:	3304      	adds	r3, #4
 800b590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2201      	movs	r2, #1
 800b596:	705a      	strb	r2, [r3, #1]
 800b598:	e00d      	b.n	800b5b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b59a:	78fa      	ldrb	r2, [r7, #3]
 800b59c:	4613      	mov	r3, r2
 800b59e:	00db      	lsls	r3, r3, #3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	f003 030f 	and.w	r3, r3, #15
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d101      	bne.n	800b5d6 <HAL_PCD_EP_SetStall+0x82>
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	e01d      	b.n	800b612 <HAL_PCD_EP_SetStall+0xbe>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68f9      	ldr	r1, [r7, #12]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f006 fd3f 	bl	8012068 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b5ea:	78fb      	ldrb	r3, [r7, #3]
 800b5ec:	f003 030f 	and.w	r3, r3, #15
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d109      	bne.n	800b608 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6818      	ldr	r0, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	7999      	ldrb	r1, [r3, #6]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b602:	461a      	mov	r2, r3
 800b604:	f006 ff32 	bl	801246c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b626:	78fb      	ldrb	r3, [r7, #3]
 800b628:	f003 030f 	and.w	r3, r3, #15
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	7912      	ldrb	r2, [r2, #4]
 800b630:	4293      	cmp	r3, r2
 800b632:	d901      	bls.n	800b638 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	e042      	b.n	800b6be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	da0f      	bge.n	800b660 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b640:	78fb      	ldrb	r3, [r7, #3]
 800b642:	f003 020f 	and.w	r2, r3, #15
 800b646:	4613      	mov	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	4413      	add	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	3310      	adds	r3, #16
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	4413      	add	r3, r2
 800b654:	3304      	adds	r3, #4
 800b656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2201      	movs	r2, #1
 800b65c:	705a      	strb	r2, [r3, #1]
 800b65e:	e00f      	b.n	800b680 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	f003 020f 	and.w	r2, r3, #15
 800b666:	4613      	mov	r3, r2
 800b668:	00db      	lsls	r3, r3, #3
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	4413      	add	r3, r2
 800b676:	3304      	adds	r3, #4
 800b678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b686:	78fb      	ldrb	r3, [r7, #3]
 800b688:	f003 030f 	and.w	r3, r3, #15
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d101      	bne.n	800b6a0 <HAL_PCD_EP_ClrStall+0x86>
 800b69c:	2302      	movs	r3, #2
 800b69e:	e00e      	b.n	800b6be <HAL_PCD_EP_ClrStall+0xa4>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68f9      	ldr	r1, [r7, #12]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f006 fd48 	bl	8012144 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b6d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	da0c      	bge.n	800b6f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6da:	78fb      	ldrb	r3, [r7, #3]
 800b6dc:	f003 020f 	and.w	r2, r3, #15
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	00db      	lsls	r3, r3, #3
 800b6e4:	4413      	add	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	3310      	adds	r3, #16
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	e00c      	b.n	800b70e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6f4:	78fb      	ldrb	r3, [r7, #3]
 800b6f6:	f003 020f 	and.w	r2, r3, #15
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	4413      	add	r3, r2
 800b70a:	3304      	adds	r3, #4
 800b70c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68f9      	ldr	r1, [r7, #12]
 800b714:	4618      	mov	r0, r3
 800b716:	f006 fb67 	bl	8011de8 <USB_EPStopXfer>
 800b71a:	4603      	mov	r3, r0
 800b71c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b71e:	7afb      	ldrb	r3, [r7, #11]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08a      	sub	sp, #40	@ 0x28
 800b72c:	af02      	add	r7, sp, #8
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	4613      	mov	r3, r2
 800b740:	00db      	lsls	r3, r3, #3
 800b742:	4413      	add	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	3310      	adds	r3, #16
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	4413      	add	r3, r2
 800b74c:	3304      	adds	r3, #4
 800b74e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	695a      	ldr	r2, [r3, #20]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d901      	bls.n	800b760 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	e06b      	b.n	800b838 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	691a      	ldr	r2, [r3, #16]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	69fa      	ldr	r2, [r7, #28]
 800b772:	429a      	cmp	r2, r3
 800b774:	d902      	bls.n	800b77c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	3303      	adds	r3, #3
 800b780:	089b      	lsrs	r3, r3, #2
 800b782:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b784:	e02a      	b.n	800b7dc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	691a      	ldr	r2, [r3, #16]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	69fa      	ldr	r2, [r7, #28]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d902      	bls.n	800b7a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	3303      	adds	r3, #3
 800b7a6:	089b      	lsrs	r3, r3, #2
 800b7a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	68d9      	ldr	r1, [r3, #12]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	4603      	mov	r3, r0
 800b7be:	6978      	ldr	r0, [r7, #20]
 800b7c0:	f006 fbbc 	bl	8011f3c <USB_WritePacket>

    ep->xfer_buff  += len;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	441a      	add	r2, r3
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	695a      	ldr	r2, [r3, #20]
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	441a      	add	r2, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	015a      	lsls	r2, r3, #5
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7e8:	699b      	ldr	r3, [r3, #24]
 800b7ea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b7ec:	69ba      	ldr	r2, [r7, #24]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d809      	bhi.n	800b806 <PCD_WriteEmptyTxFifo+0xde>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	695a      	ldr	r2, [r3, #20]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d203      	bcs.n	800b806 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1bf      	bne.n	800b786 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	691a      	ldr	r2, [r3, #16]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d811      	bhi.n	800b836 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	2201      	movs	r2, #1
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	43db      	mvns	r3, r3
 800b82c:	6939      	ldr	r1, [r7, #16]
 800b82e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b832:	4013      	ands	r3, r2
 800b834:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3720      	adds	r7, #32
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	333c      	adds	r3, #60	@ 0x3c
 800b858:	3304      	adds	r3, #4
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	015a      	lsls	r2, r3, #5
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	4413      	add	r3, r2
 800b866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	799b      	ldrb	r3, [r3, #6]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d17b      	bne.n	800b96e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	f003 0308 	and.w	r3, r3, #8
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d015      	beq.n	800b8ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	4a61      	ldr	r2, [pc, #388]	@ (800ba08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b884:	4293      	cmp	r3, r2
 800b886:	f240 80b9 	bls.w	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 80b3 	beq.w	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	015a      	lsls	r2, r3, #5
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8a8:	6093      	str	r3, [r2, #8]
 800b8aa:	e0a7      	b.n	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	f003 0320 	and.w	r3, r3, #32
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d009      	beq.n	800b8ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	015a      	lsls	r2, r3, #5
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	4413      	add	r3, r2
 800b8be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	2320      	movs	r3, #32
 800b8c6:	6093      	str	r3, [r2, #8]
 800b8c8:	e098      	b.n	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f040 8093 	bne.w	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	4a4b      	ldr	r2, [pc, #300]	@ (800ba08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d90f      	bls.n	800b8fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00a      	beq.n	800b8fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8fa:	6093      	str	r3, [r2, #8]
 800b8fc:	e07e      	b.n	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	4613      	mov	r3, r2
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	4413      	add	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	4413      	add	r3, r2
 800b910:	3304      	adds	r3, #4
 800b912:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6a1a      	ldr	r2, [r3, #32]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	0159      	lsls	r1, r3, #5
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	440b      	add	r3, r1
 800b920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b92a:	1ad2      	subs	r2, r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d114      	bne.n	800b960 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d109      	bne.n	800b952 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6818      	ldr	r0, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b948:	461a      	mov	r2, r3
 800b94a:	2101      	movs	r1, #1
 800b94c:	f006 fd8e 	bl	801246c <USB_EP0_OutStart>
 800b950:	e006      	b.n	800b960 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	441a      	add	r2, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f009 f8aa 	bl	8014ac0 <HAL_PCD_DataOutStageCallback>
 800b96c:	e046      	b.n	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	4a26      	ldr	r2, [pc, #152]	@ (800ba0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d124      	bne.n	800b9c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b98c:	461a      	mov	r2, r3
 800b98e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b992:	6093      	str	r3, [r2, #8]
 800b994:	e032      	b.n	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f003 0320 	and.w	r3, r3, #32
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d008      	beq.n	800b9b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	2320      	movs	r3, #32
 800b9b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f009 f881 	bl	8014ac0 <HAL_PCD_DataOutStageCallback>
 800b9be:	e01d      	b.n	800b9fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d114      	bne.n	800b9f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b9c6:	6879      	ldr	r1, [r7, #4]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	440b      	add	r3, r1
 800b9d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d108      	bne.n	800b9f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6818      	ldr	r0, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	f006 fd3e 	bl	801246c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f009 f862 	bl	8014ac0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3720      	adds	r7, #32
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	4f54300a 	.word	0x4f54300a
 800ba0c:	4f54310a 	.word	0x4f54310a

0800ba10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	333c      	adds	r3, #60	@ 0x3c
 800ba28:	3304      	adds	r3, #4
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	015a      	lsls	r2, r3, #5
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	4413      	add	r3, r2
 800ba36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4a15      	ldr	r2, [pc, #84]	@ (800ba98 <PCD_EP_OutSetupPacket_int+0x88>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d90e      	bls.n	800ba64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d009      	beq.n	800ba64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f009 f819 	bl	8014a9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ba98 <PCD_EP_OutSetupPacket_int+0x88>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d90c      	bls.n	800ba8c <PCD_EP_OutSetupPacket_int+0x7c>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	799b      	ldrb	r3, [r3, #6]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d108      	bne.n	800ba8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6818      	ldr	r0, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ba84:	461a      	mov	r2, r3
 800ba86:	2101      	movs	r1, #1
 800ba88:	f006 fcf0 	bl	801246c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	4f54300a 	.word	0x4f54300a

0800ba9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70fb      	strb	r3, [r7, #3]
 800baa8:	4613      	mov	r3, r2
 800baaa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d107      	bne.n	800baca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800baba:	883b      	ldrh	r3, [r7, #0]
 800babc:	0419      	lsls	r1, r3, #16
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	629a      	str	r2, [r3, #40]	@ 0x28
 800bac8:	e028      	b.n	800bb1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad0:	0c1b      	lsrs	r3, r3, #16
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	4413      	add	r3, r2
 800bad6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
 800badc:	e00d      	b.n	800bafa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	3340      	adds	r3, #64	@ 0x40
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	0c1b      	lsrs	r3, r3, #16
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	4413      	add	r3, r2
 800baf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	3301      	adds	r3, #1
 800baf8:	73fb      	strb	r3, [r7, #15]
 800bafa:	7bfa      	ldrb	r2, [r7, #15]
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d3ec      	bcc.n	800bade <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800bb04:	883b      	ldrh	r3, [r7, #0]
 800bb06:	0418      	lsls	r0, r3, #16
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6819      	ldr	r1, [r3, #0]
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	4302      	orrs	r2, r0
 800bb14:	3340      	adds	r3, #64	@ 0x40
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	440b      	add	r3, r1
 800bb1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800bb2a:	b480      	push	{r7}
 800bb2c:	b083      	sub	sp, #12
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	460b      	mov	r3, r1
 800bb34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	887a      	ldrh	r2, [r7, #2]
 800bb3c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb7a:	4b05      	ldr	r3, [pc, #20]	@ (800bb90 <HAL_PCDEx_ActivateLPM+0x44>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	10000003 	.word	0x10000003

0800bb94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bbb4:	4b19      	ldr	r3, [pc, #100]	@ (800bc1c <HAL_PWREx_ConfigSupply+0x70>)
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	2b04      	cmp	r3, #4
 800bbbe:	d00a      	beq.n	800bbd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bbc0:	4b16      	ldr	r3, [pc, #88]	@ (800bc1c <HAL_PWREx_ConfigSupply+0x70>)
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	f003 0307 	and.w	r3, r3, #7
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d001      	beq.n	800bbd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e01f      	b.n	800bc12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	e01d      	b.n	800bc12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bbd6:	4b11      	ldr	r3, [pc, #68]	@ (800bc1c <HAL_PWREx_ConfigSupply+0x70>)
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	f023 0207 	bic.w	r2, r3, #7
 800bbde:	490f      	ldr	r1, [pc, #60]	@ (800bc1c <HAL_PWREx_ConfigSupply+0x70>)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bbe6:	f7f6 f877 	bl	8001cd8 <HAL_GetTick>
 800bbea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bbec:	e009      	b.n	800bc02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bbee:	f7f6 f873 	bl	8001cd8 <HAL_GetTick>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bbfc:	d901      	bls.n	800bc02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e007      	b.n	800bc12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bc02:	4b06      	ldr	r3, [pc, #24]	@ (800bc1c <HAL_PWREx_ConfigSupply+0x70>)
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc0e:	d1ee      	bne.n	800bbee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	58024800 	.word	0x58024800

0800bc20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800bc20:	b480      	push	{r7}
 800bc22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800bc24:	4b05      	ldr	r3, [pc, #20]	@ (800bc3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	4a04      	ldr	r2, [pc, #16]	@ (800bc3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800bc2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc2e:	60d3      	str	r3, [r2, #12]
}
 800bc30:	bf00      	nop
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	58024800 	.word	0x58024800

0800bc40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08c      	sub	sp, #48	@ 0x30
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	f000 bc48 	b.w	800c4e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 8088 	beq.w	800bd72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc62:	4b99      	ldr	r3, [pc, #612]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc6c:	4b96      	ldr	r3, [pc, #600]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc70:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc74:	2b10      	cmp	r3, #16
 800bc76:	d007      	beq.n	800bc88 <HAL_RCC_OscConfig+0x48>
 800bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7a:	2b18      	cmp	r3, #24
 800bc7c:	d111      	bne.n	800bca2 <HAL_RCC_OscConfig+0x62>
 800bc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc80:	f003 0303 	and.w	r3, r3, #3
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d10c      	bne.n	800bca2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc88:	4b8f      	ldr	r3, [pc, #572]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d06d      	beq.n	800bd70 <HAL_RCC_OscConfig+0x130>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d169      	bne.n	800bd70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	f000 bc21 	b.w	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcaa:	d106      	bne.n	800bcba <HAL_RCC_OscConfig+0x7a>
 800bcac:	4b86      	ldr	r3, [pc, #536]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a85      	ldr	r2, [pc, #532]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	e02e      	b.n	800bd18 <HAL_RCC_OscConfig+0xd8>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d10c      	bne.n	800bcdc <HAL_RCC_OscConfig+0x9c>
 800bcc2:	4b81      	ldr	r3, [pc, #516]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a80      	ldr	r2, [pc, #512]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	4b7e      	ldr	r3, [pc, #504]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a7d      	ldr	r2, [pc, #500]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	e01d      	b.n	800bd18 <HAL_RCC_OscConfig+0xd8>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bce4:	d10c      	bne.n	800bd00 <HAL_RCC_OscConfig+0xc0>
 800bce6:	4b78      	ldr	r3, [pc, #480]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a77      	ldr	r2, [pc, #476]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	4b75      	ldr	r3, [pc, #468]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a74      	ldr	r2, [pc, #464]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bcf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcfc:	6013      	str	r3, [r2, #0]
 800bcfe:	e00b      	b.n	800bd18 <HAL_RCC_OscConfig+0xd8>
 800bd00:	4b71      	ldr	r3, [pc, #452]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a70      	ldr	r2, [pc, #448]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bd06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	4b6e      	ldr	r3, [pc, #440]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a6d      	ldr	r2, [pc, #436]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bd12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d013      	beq.n	800bd48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd20:	f7f5 ffda 	bl	8001cd8 <HAL_GetTick>
 800bd24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd26:	e008      	b.n	800bd3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd28:	f7f5 ffd6 	bl	8001cd8 <HAL_GetTick>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	2b64      	cmp	r3, #100	@ 0x64
 800bd34:	d901      	bls.n	800bd3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e3d4      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd3a:	4b63      	ldr	r3, [pc, #396]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0f0      	beq.n	800bd28 <HAL_RCC_OscConfig+0xe8>
 800bd46:	e014      	b.n	800bd72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd48:	f7f5 ffc6 	bl	8001cd8 <HAL_GetTick>
 800bd4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd4e:	e008      	b.n	800bd62 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd50:	f7f5 ffc2 	bl	8001cd8 <HAL_GetTick>
 800bd54:	4602      	mov	r2, r0
 800bd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	2b64      	cmp	r3, #100	@ 0x64
 800bd5c:	d901      	bls.n	800bd62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e3c0      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd62:	4b59      	ldr	r3, [pc, #356]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1f0      	bne.n	800bd50 <HAL_RCC_OscConfig+0x110>
 800bd6e:	e000      	b.n	800bd72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 0302 	and.w	r3, r3, #2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f000 80ca 	beq.w	800bf14 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd80:	4b51      	ldr	r3, [pc, #324]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd8a:	4b4f      	ldr	r3, [pc, #316]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bd8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d007      	beq.n	800bda6 <HAL_RCC_OscConfig+0x166>
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	2b18      	cmp	r3, #24
 800bd9a:	d156      	bne.n	800be4a <HAL_RCC_OscConfig+0x20a>
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	f003 0303 	and.w	r3, r3, #3
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d151      	bne.n	800be4a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bda6:	4b48      	ldr	r3, [pc, #288]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 0304 	and.w	r3, r3, #4
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d005      	beq.n	800bdbe <HAL_RCC_OscConfig+0x17e>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e392      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bdbe:	4b42      	ldr	r3, [pc, #264]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f023 0219 	bic.w	r2, r3, #25
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	493f      	ldr	r1, [pc, #252]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdd0:	f7f5 ff82 	bl	8001cd8 <HAL_GetTick>
 800bdd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdd6:	e008      	b.n	800bdea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdd8:	f7f5 ff7e 	bl	8001cd8 <HAL_GetTick>
 800bddc:	4602      	mov	r2, r0
 800bdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d901      	bls.n	800bdea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e37c      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdea:	4b37      	ldr	r3, [pc, #220]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0304 	and.w	r3, r3, #4
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0f0      	beq.n	800bdd8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdf6:	f7f5 ff9f 	bl	8001d38 <HAL_GetREVID>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800be00:	4293      	cmp	r3, r2
 800be02:	d817      	bhi.n	800be34 <HAL_RCC_OscConfig+0x1f4>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	2b40      	cmp	r3, #64	@ 0x40
 800be0a:	d108      	bne.n	800be1e <HAL_RCC_OscConfig+0x1de>
 800be0c:	4b2e      	ldr	r3, [pc, #184]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800be14:	4a2c      	ldr	r2, [pc, #176]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be1a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be1c:	e07a      	b.n	800bf14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be1e:	4b2a      	ldr	r3, [pc, #168]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	031b      	lsls	r3, r3, #12
 800be2c:	4926      	ldr	r1, [pc, #152]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be32:	e06f      	b.n	800bf14 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be34:	4b24      	ldr	r3, [pc, #144]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	061b      	lsls	r3, r3, #24
 800be42:	4921      	ldr	r1, [pc, #132]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be44:	4313      	orrs	r3, r2
 800be46:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be48:	e064      	b.n	800bf14 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d047      	beq.n	800bee2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800be52:	4b1d      	ldr	r3, [pc, #116]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f023 0219 	bic.w	r2, r3, #25
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	491a      	ldr	r1, [pc, #104]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be60:	4313      	orrs	r3, r2
 800be62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be64:	f7f5 ff38 	bl	8001cd8 <HAL_GetTick>
 800be68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be6a:	e008      	b.n	800be7e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be6c:	f7f5 ff34 	bl	8001cd8 <HAL_GetTick>
 800be70:	4602      	mov	r2, r0
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	2b02      	cmp	r3, #2
 800be78:	d901      	bls.n	800be7e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e332      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be7e:	4b12      	ldr	r3, [pc, #72]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0304 	and.w	r3, r3, #4
 800be86:	2b00      	cmp	r3, #0
 800be88:	d0f0      	beq.n	800be6c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be8a:	f7f5 ff55 	bl	8001d38 <HAL_GetREVID>
 800be8e:	4603      	mov	r3, r0
 800be90:	f241 0203 	movw	r2, #4099	@ 0x1003
 800be94:	4293      	cmp	r3, r2
 800be96:	d819      	bhi.n	800becc <HAL_RCC_OscConfig+0x28c>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	2b40      	cmp	r3, #64	@ 0x40
 800be9e:	d108      	bne.n	800beb2 <HAL_RCC_OscConfig+0x272>
 800bea0:	4b09      	ldr	r3, [pc, #36]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bea8:	4a07      	ldr	r2, [pc, #28]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800beaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800beae:	6053      	str	r3, [r2, #4]
 800beb0:	e030      	b.n	800bf14 <HAL_RCC_OscConfig+0x2d4>
 800beb2:	4b05      	ldr	r3, [pc, #20]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	031b      	lsls	r3, r3, #12
 800bec0:	4901      	ldr	r1, [pc, #4]	@ (800bec8 <HAL_RCC_OscConfig+0x288>)
 800bec2:	4313      	orrs	r3, r2
 800bec4:	604b      	str	r3, [r1, #4]
 800bec6:	e025      	b.n	800bf14 <HAL_RCC_OscConfig+0x2d4>
 800bec8:	58024400 	.word	0x58024400
 800becc:	4b9a      	ldr	r3, [pc, #616]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	061b      	lsls	r3, r3, #24
 800beda:	4997      	ldr	r1, [pc, #604]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bedc:	4313      	orrs	r3, r2
 800bede:	604b      	str	r3, [r1, #4]
 800bee0:	e018      	b.n	800bf14 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bee2:	4b95      	ldr	r3, [pc, #596]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a94      	ldr	r2, [pc, #592]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bee8:	f023 0301 	bic.w	r3, r3, #1
 800beec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beee:	f7f5 fef3 	bl	8001cd8 <HAL_GetTick>
 800bef2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bef4:	e008      	b.n	800bf08 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bef6:	f7f5 feef 	bl	8001cd8 <HAL_GetTick>
 800befa:	4602      	mov	r2, r0
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d901      	bls.n	800bf08 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bf04:	2303      	movs	r3, #3
 800bf06:	e2ed      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bf08:	4b8b      	ldr	r3, [pc, #556]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 0304 	and.w	r3, r3, #4
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1f0      	bne.n	800bef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 0310 	and.w	r3, r3, #16
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 80a9 	beq.w	800c074 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf22:	4b85      	ldr	r3, [pc, #532]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bf2c:	4b82      	ldr	r3, [pc, #520]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bf2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf30:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d007      	beq.n	800bf48 <HAL_RCC_OscConfig+0x308>
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	2b18      	cmp	r3, #24
 800bf3c:	d13a      	bne.n	800bfb4 <HAL_RCC_OscConfig+0x374>
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f003 0303 	and.w	r3, r3, #3
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d135      	bne.n	800bfb4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf48:	4b7b      	ldr	r3, [pc, #492]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d005      	beq.n	800bf60 <HAL_RCC_OscConfig+0x320>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	2b80      	cmp	r3, #128	@ 0x80
 800bf5a:	d001      	beq.n	800bf60 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e2c1      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf60:	f7f5 feea 	bl	8001d38 <HAL_GetREVID>
 800bf64:	4603      	mov	r3, r0
 800bf66:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d817      	bhi.n	800bf9e <HAL_RCC_OscConfig+0x35e>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	2b20      	cmp	r3, #32
 800bf74:	d108      	bne.n	800bf88 <HAL_RCC_OscConfig+0x348>
 800bf76:	4b70      	ldr	r3, [pc, #448]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bf7e:	4a6e      	ldr	r2, [pc, #440]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bf80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf84:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf86:	e075      	b.n	800c074 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf88:	4b6b      	ldr	r3, [pc, #428]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	069b      	lsls	r3, r3, #26
 800bf96:	4968      	ldr	r1, [pc, #416]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf9c:	e06a      	b.n	800c074 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf9e:	4b66      	ldr	r3, [pc, #408]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a1b      	ldr	r3, [r3, #32]
 800bfaa:	061b      	lsls	r3, r3, #24
 800bfac:	4962      	ldr	r1, [pc, #392]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bfb2:	e05f      	b.n	800c074 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d042      	beq.n	800c042 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bfbc:	4b5e      	ldr	r3, [pc, #376]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a5d      	ldr	r2, [pc, #372]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bfc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfc8:	f7f5 fe86 	bl	8001cd8 <HAL_GetTick>
 800bfcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bfce:	e008      	b.n	800bfe2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bfd0:	f7f5 fe82 	bl	8001cd8 <HAL_GetTick>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d901      	bls.n	800bfe2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e280      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bfe2:	4b55      	ldr	r3, [pc, #340]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d0f0      	beq.n	800bfd0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bfee:	f7f5 fea3 	bl	8001d38 <HAL_GetREVID>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d817      	bhi.n	800c02c <HAL_RCC_OscConfig+0x3ec>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	2b20      	cmp	r3, #32
 800c002:	d108      	bne.n	800c016 <HAL_RCC_OscConfig+0x3d6>
 800c004:	4b4c      	ldr	r3, [pc, #304]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c00c:	4a4a      	ldr	r2, [pc, #296]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c00e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c012:	6053      	str	r3, [r2, #4]
 800c014:	e02e      	b.n	800c074 <HAL_RCC_OscConfig+0x434>
 800c016:	4b48      	ldr	r3, [pc, #288]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	069b      	lsls	r3, r3, #26
 800c024:	4944      	ldr	r1, [pc, #272]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c026:	4313      	orrs	r3, r2
 800c028:	604b      	str	r3, [r1, #4]
 800c02a:	e023      	b.n	800c074 <HAL_RCC_OscConfig+0x434>
 800c02c:	4b42      	ldr	r3, [pc, #264]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a1b      	ldr	r3, [r3, #32]
 800c038:	061b      	lsls	r3, r3, #24
 800c03a:	493f      	ldr	r1, [pc, #252]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c03c:	4313      	orrs	r3, r2
 800c03e:	60cb      	str	r3, [r1, #12]
 800c040:	e018      	b.n	800c074 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c042:	4b3d      	ldr	r3, [pc, #244]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a3c      	ldr	r2, [pc, #240]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c048:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c04c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c04e:	f7f5 fe43 	bl	8001cd8 <HAL_GetTick>
 800c052:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c054:	e008      	b.n	800c068 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c056:	f7f5 fe3f 	bl	8001cd8 <HAL_GetTick>
 800c05a:	4602      	mov	r2, r0
 800c05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	2b02      	cmp	r3, #2
 800c062:	d901      	bls.n	800c068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e23d      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c068:	4b33      	ldr	r3, [pc, #204]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1f0      	bne.n	800c056 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 0308 	and.w	r3, r3, #8
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d036      	beq.n	800c0ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d019      	beq.n	800c0bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c088:	4b2b      	ldr	r3, [pc, #172]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c08a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c08c:	4a2a      	ldr	r2, [pc, #168]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c08e:	f043 0301 	orr.w	r3, r3, #1
 800c092:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c094:	f7f5 fe20 	bl	8001cd8 <HAL_GetTick>
 800c098:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c09a:	e008      	b.n	800c0ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c09c:	f7f5 fe1c 	bl	8001cd8 <HAL_GetTick>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d901      	bls.n	800c0ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	e21a      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c0ae:	4b22      	ldr	r3, [pc, #136]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c0b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0b2:	f003 0302 	and.w	r3, r3, #2
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d0f0      	beq.n	800c09c <HAL_RCC_OscConfig+0x45c>
 800c0ba:	e018      	b.n	800c0ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c0bc:	4b1e      	ldr	r3, [pc, #120]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c0be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c0c2:	f023 0301 	bic.w	r3, r3, #1
 800c0c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0c8:	f7f5 fe06 	bl	8001cd8 <HAL_GetTick>
 800c0cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c0ce:	e008      	b.n	800c0e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0d0:	f7f5 fe02 	bl	8001cd8 <HAL_GetTick>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d901      	bls.n	800c0e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e200      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c0e2:	4b15      	ldr	r3, [pc, #84]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c0e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0e6:	f003 0302 	and.w	r3, r3, #2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1f0      	bne.n	800c0d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0320 	and.w	r3, r3, #32
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d039      	beq.n	800c16e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d01c      	beq.n	800c13c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c102:	4b0d      	ldr	r3, [pc, #52]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a0c      	ldr	r2, [pc, #48]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c108:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c10c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c10e:	f7f5 fde3 	bl	8001cd8 <HAL_GetTick>
 800c112:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c114:	e008      	b.n	800c128 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c116:	f7f5 fddf 	bl	8001cd8 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	2b02      	cmp	r3, #2
 800c122:	d901      	bls.n	800c128 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c124:	2303      	movs	r3, #3
 800c126:	e1dd      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c128:	4b03      	ldr	r3, [pc, #12]	@ (800c138 <HAL_RCC_OscConfig+0x4f8>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0f0      	beq.n	800c116 <HAL_RCC_OscConfig+0x4d6>
 800c134:	e01b      	b.n	800c16e <HAL_RCC_OscConfig+0x52e>
 800c136:	bf00      	nop
 800c138:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c13c:	4b9b      	ldr	r3, [pc, #620]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a9a      	ldr	r2, [pc, #616]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c142:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c146:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c148:	f7f5 fdc6 	bl	8001cd8 <HAL_GetTick>
 800c14c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c14e:	e008      	b.n	800c162 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c150:	f7f5 fdc2 	bl	8001cd8 <HAL_GetTick>
 800c154:	4602      	mov	r2, r0
 800c156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d901      	bls.n	800c162 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e1c0      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c162:	4b92      	ldr	r3, [pc, #584]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1f0      	bne.n	800c150 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 0304 	and.w	r3, r3, #4
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 8081 	beq.w	800c27e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c17c:	4b8c      	ldr	r3, [pc, #560]	@ (800c3b0 <HAL_RCC_OscConfig+0x770>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a8b      	ldr	r2, [pc, #556]	@ (800c3b0 <HAL_RCC_OscConfig+0x770>)
 800c182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c186:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c188:	f7f5 fda6 	bl	8001cd8 <HAL_GetTick>
 800c18c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c18e:	e008      	b.n	800c1a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c190:	f7f5 fda2 	bl	8001cd8 <HAL_GetTick>
 800c194:	4602      	mov	r2, r0
 800c196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	2b64      	cmp	r3, #100	@ 0x64
 800c19c:	d901      	bls.n	800c1a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e1a0      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1a2:	4b83      	ldr	r3, [pc, #524]	@ (800c3b0 <HAL_RCC_OscConfig+0x770>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d0f0      	beq.n	800c190 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d106      	bne.n	800c1c4 <HAL_RCC_OscConfig+0x584>
 800c1b6:	4b7d      	ldr	r3, [pc, #500]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ba:	4a7c      	ldr	r2, [pc, #496]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1bc:	f043 0301 	orr.w	r3, r3, #1
 800c1c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1c2:	e02d      	b.n	800c220 <HAL_RCC_OscConfig+0x5e0>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10c      	bne.n	800c1e6 <HAL_RCC_OscConfig+0x5a6>
 800c1cc:	4b77      	ldr	r3, [pc, #476]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1d0:	4a76      	ldr	r2, [pc, #472]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1d2:	f023 0301 	bic.w	r3, r3, #1
 800c1d6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1d8:	4b74      	ldr	r3, [pc, #464]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1dc:	4a73      	ldr	r2, [pc, #460]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1de:	f023 0304 	bic.w	r3, r3, #4
 800c1e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1e4:	e01c      	b.n	800c220 <HAL_RCC_OscConfig+0x5e0>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	2b05      	cmp	r3, #5
 800c1ec:	d10c      	bne.n	800c208 <HAL_RCC_OscConfig+0x5c8>
 800c1ee:	4b6f      	ldr	r3, [pc, #444]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1f2:	4a6e      	ldr	r2, [pc, #440]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1f4:	f043 0304 	orr.w	r3, r3, #4
 800c1f8:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1fa:	4b6c      	ldr	r3, [pc, #432]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1fe:	4a6b      	ldr	r2, [pc, #428]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c200:	f043 0301 	orr.w	r3, r3, #1
 800c204:	6713      	str	r3, [r2, #112]	@ 0x70
 800c206:	e00b      	b.n	800c220 <HAL_RCC_OscConfig+0x5e0>
 800c208:	4b68      	ldr	r3, [pc, #416]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c20c:	4a67      	ldr	r2, [pc, #412]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c20e:	f023 0301 	bic.w	r3, r3, #1
 800c212:	6713      	str	r3, [r2, #112]	@ 0x70
 800c214:	4b65      	ldr	r3, [pc, #404]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c218:	4a64      	ldr	r2, [pc, #400]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c21a:	f023 0304 	bic.w	r3, r3, #4
 800c21e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d015      	beq.n	800c254 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c228:	f7f5 fd56 	bl	8001cd8 <HAL_GetTick>
 800c22c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c22e:	e00a      	b.n	800c246 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c230:	f7f5 fd52 	bl	8001cd8 <HAL_GetTick>
 800c234:	4602      	mov	r2, r0
 800c236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c23e:	4293      	cmp	r3, r2
 800c240:	d901      	bls.n	800c246 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e14e      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c246:	4b59      	ldr	r3, [pc, #356]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c24a:	f003 0302 	and.w	r3, r3, #2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d0ee      	beq.n	800c230 <HAL_RCC_OscConfig+0x5f0>
 800c252:	e014      	b.n	800c27e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c254:	f7f5 fd40 	bl	8001cd8 <HAL_GetTick>
 800c258:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c25a:	e00a      	b.n	800c272 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c25c:	f7f5 fd3c 	bl	8001cd8 <HAL_GetTick>
 800c260:	4602      	mov	r2, r0
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c264:	1ad3      	subs	r3, r2, r3
 800c266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d901      	bls.n	800c272 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c26e:	2303      	movs	r3, #3
 800c270:	e138      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c272:	4b4e      	ldr	r3, [pc, #312]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c276:	f003 0302 	and.w	r3, r3, #2
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1ee      	bne.n	800c25c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 812d 	beq.w	800c4e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c288:	4b48      	ldr	r3, [pc, #288]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c290:	2b18      	cmp	r3, #24
 800c292:	f000 80bd 	beq.w	800c410 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	f040 809e 	bne.w	800c3dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2a0:	4b42      	ldr	r3, [pc, #264]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a41      	ldr	r2, [pc, #260]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c2a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c2aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2ac:	f7f5 fd14 	bl	8001cd8 <HAL_GetTick>
 800c2b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c2b2:	e008      	b.n	800c2c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2b4:	f7f5 fd10 	bl	8001cd8 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	d901      	bls.n	800c2c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e10e      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c2c6:	4b39      	ldr	r3, [pc, #228]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f0      	bne.n	800c2b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c2d2:	4b36      	ldr	r3, [pc, #216]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c2d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2d6:	4b37      	ldr	r3, [pc, #220]	@ (800c3b4 <HAL_RCC_OscConfig+0x774>)
 800c2d8:	4013      	ands	r3, r2
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c2e2:	0112      	lsls	r2, r2, #4
 800c2e4:	430a      	orrs	r2, r1
 800c2e6:	4931      	ldr	r1, [pc, #196]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	025b      	lsls	r3, r3, #9
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	431a      	orrs	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c306:	3b01      	subs	r3, #1
 800c308:	041b      	lsls	r3, r3, #16
 800c30a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c30e:	431a      	orrs	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c314:	3b01      	subs	r3, #1
 800c316:	061b      	lsls	r3, r3, #24
 800c318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c31c:	4923      	ldr	r1, [pc, #140]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c31e:	4313      	orrs	r3, r2
 800c320:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c322:	4b22      	ldr	r3, [pc, #136]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c326:	4a21      	ldr	r2, [pc, #132]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c328:	f023 0301 	bic.w	r3, r3, #1
 800c32c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c32e:	4b1f      	ldr	r3, [pc, #124]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c332:	4b21      	ldr	r3, [pc, #132]	@ (800c3b8 <HAL_RCC_OscConfig+0x778>)
 800c334:	4013      	ands	r3, r2
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c33a:	00d2      	lsls	r2, r2, #3
 800c33c:	491b      	ldr	r1, [pc, #108]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c33e:	4313      	orrs	r3, r2
 800c340:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c342:	4b1a      	ldr	r3, [pc, #104]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c346:	f023 020c 	bic.w	r2, r3, #12
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c34e:	4917      	ldr	r1, [pc, #92]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c350:	4313      	orrs	r3, r2
 800c352:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c354:	4b15      	ldr	r3, [pc, #84]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c358:	f023 0202 	bic.w	r2, r3, #2
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c360:	4912      	ldr	r1, [pc, #72]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c362:	4313      	orrs	r3, r2
 800c364:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c366:	4b11      	ldr	r3, [pc, #68]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36a:	4a10      	ldr	r2, [pc, #64]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c36c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c370:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c372:	4b0e      	ldr	r3, [pc, #56]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c376:	4a0d      	ldr	r2, [pc, #52]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c37e:	4b0b      	ldr	r3, [pc, #44]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c382:	4a0a      	ldr	r2, [pc, #40]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c388:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c38a:	4b08      	ldr	r3, [pc, #32]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38e:	4a07      	ldr	r2, [pc, #28]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c390:	f043 0301 	orr.w	r3, r3, #1
 800c394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c396:	4b05      	ldr	r3, [pc, #20]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a04      	ldr	r2, [pc, #16]	@ (800c3ac <HAL_RCC_OscConfig+0x76c>)
 800c39c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3a2:	f7f5 fc99 	bl	8001cd8 <HAL_GetTick>
 800c3a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3a8:	e011      	b.n	800c3ce <HAL_RCC_OscConfig+0x78e>
 800c3aa:	bf00      	nop
 800c3ac:	58024400 	.word	0x58024400
 800c3b0:	58024800 	.word	0x58024800
 800c3b4:	fffffc0c 	.word	0xfffffc0c
 800c3b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3bc:	f7f5 fc8c 	bl	8001cd8 <HAL_GetTick>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d901      	bls.n	800c3ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e08a      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3ce:	4b47      	ldr	r3, [pc, #284]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0f0      	beq.n	800c3bc <HAL_RCC_OscConfig+0x77c>
 800c3da:	e082      	b.n	800c4e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3dc:	4b43      	ldr	r3, [pc, #268]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a42      	ldr	r2, [pc, #264]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c3e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c3e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3e8:	f7f5 fc76 	bl	8001cd8 <HAL_GetTick>
 800c3ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c3ee:	e008      	b.n	800c402 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3f0:	f7f5 fc72 	bl	8001cd8 <HAL_GetTick>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d901      	bls.n	800c402 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e070      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c402:	4b3a      	ldr	r3, [pc, #232]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1f0      	bne.n	800c3f0 <HAL_RCC_OscConfig+0x7b0>
 800c40e:	e068      	b.n	800c4e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c410:	4b36      	ldr	r3, [pc, #216]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c414:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c416:	4b35      	ldr	r3, [pc, #212]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c41a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c420:	2b01      	cmp	r3, #1
 800c422:	d031      	beq.n	800c488 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	f003 0203 	and.w	r2, r3, #3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c42e:	429a      	cmp	r2, r3
 800c430:	d12a      	bne.n	800c488 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	091b      	lsrs	r3, r3, #4
 800c436:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c43e:	429a      	cmp	r2, r3
 800c440:	d122      	bne.n	800c488 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c44c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c44e:	429a      	cmp	r2, r3
 800c450:	d11a      	bne.n	800c488 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	0a5b      	lsrs	r3, r3, #9
 800c456:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c45e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c460:	429a      	cmp	r2, r3
 800c462:	d111      	bne.n	800c488 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	0c1b      	lsrs	r3, r3, #16
 800c468:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c470:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c472:	429a      	cmp	r2, r3
 800c474:	d108      	bne.n	800c488 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	0e1b      	lsrs	r3, r3, #24
 800c47a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c482:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c484:	429a      	cmp	r2, r3
 800c486:	d001      	beq.n	800c48c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e02b      	b.n	800c4e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c48c:	4b17      	ldr	r3, [pc, #92]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c48e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c490:	08db      	lsrs	r3, r3, #3
 800c492:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c496:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d01f      	beq.n	800c4e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c4a2:	4b12      	ldr	r3, [pc, #72]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a6:	4a11      	ldr	r2, [pc, #68]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c4a8:	f023 0301 	bic.w	r3, r3, #1
 800c4ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c4ae:	f7f5 fc13 	bl	8001cd8 <HAL_GetTick>
 800c4b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c4b4:	bf00      	nop
 800c4b6:	f7f5 fc0f 	bl	8001cd8 <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d0f9      	beq.n	800c4b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c4c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <HAL_RCC_OscConfig+0x8b0>)
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c4ce:	00d2      	lsls	r2, r2, #3
 800c4d0:	4906      	ldr	r1, [pc, #24]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c4d6:	4b05      	ldr	r3, [pc, #20]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4da:	4a04      	ldr	r2, [pc, #16]	@ (800c4ec <HAL_RCC_OscConfig+0x8ac>)
 800c4dc:	f043 0301 	orr.w	r3, r3, #1
 800c4e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3730      	adds	r7, #48	@ 0x30
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	58024400 	.word	0x58024400
 800c4f0:	ffff0007 	.word	0xffff0007

0800c4f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	e19c      	b.n	800c842 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c508:	4b8a      	ldr	r3, [pc, #552]	@ (800c734 <HAL_RCC_ClockConfig+0x240>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 030f 	and.w	r3, r3, #15
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d910      	bls.n	800c538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c516:	4b87      	ldr	r3, [pc, #540]	@ (800c734 <HAL_RCC_ClockConfig+0x240>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f023 020f 	bic.w	r2, r3, #15
 800c51e:	4985      	ldr	r1, [pc, #532]	@ (800c734 <HAL_RCC_ClockConfig+0x240>)
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	4313      	orrs	r3, r2
 800c524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c526:	4b83      	ldr	r3, [pc, #524]	@ (800c734 <HAL_RCC_ClockConfig+0x240>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 030f 	and.w	r3, r3, #15
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d001      	beq.n	800c538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	e184      	b.n	800c842 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f003 0304 	and.w	r3, r3, #4
 800c540:	2b00      	cmp	r3, #0
 800c542:	d010      	beq.n	800c566 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	691a      	ldr	r2, [r3, #16]
 800c548:	4b7b      	ldr	r3, [pc, #492]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c550:	429a      	cmp	r2, r3
 800c552:	d908      	bls.n	800c566 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c554:	4b78      	ldr	r3, [pc, #480]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	4975      	ldr	r1, [pc, #468]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c562:	4313      	orrs	r3, r2
 800c564:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0308 	and.w	r3, r3, #8
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d010      	beq.n	800c594 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	695a      	ldr	r2, [r3, #20]
 800c576:	4b70      	ldr	r3, [pc, #448]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c57e:	429a      	cmp	r2, r3
 800c580:	d908      	bls.n	800c594 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c582:	4b6d      	ldr	r3, [pc, #436]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	695b      	ldr	r3, [r3, #20]
 800c58e:	496a      	ldr	r1, [pc, #424]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c590:	4313      	orrs	r3, r2
 800c592:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0310 	and.w	r3, r3, #16
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d010      	beq.n	800c5c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	699a      	ldr	r2, [r3, #24]
 800c5a4:	4b64      	ldr	r3, [pc, #400]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d908      	bls.n	800c5c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c5b0:	4b61      	ldr	r3, [pc, #388]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	495e      	ldr	r1, [pc, #376]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0320 	and.w	r3, r3, #32
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d010      	beq.n	800c5f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	69da      	ldr	r2, [r3, #28]
 800c5d2:	4b59      	ldr	r3, [pc, #356]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d908      	bls.n	800c5f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c5de:	4b56      	ldr	r3, [pc, #344]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	69db      	ldr	r3, [r3, #28]
 800c5ea:	4953      	ldr	r1, [pc, #332]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0302 	and.w	r3, r3, #2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d010      	beq.n	800c61e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68da      	ldr	r2, [r3, #12]
 800c600:	4b4d      	ldr	r3, [pc, #308]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	f003 030f 	and.w	r3, r3, #15
 800c608:	429a      	cmp	r2, r3
 800c60a:	d908      	bls.n	800c61e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c60c:	4b4a      	ldr	r3, [pc, #296]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	f023 020f 	bic.w	r2, r3, #15
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	4947      	ldr	r1, [pc, #284]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0301 	and.w	r3, r3, #1
 800c626:	2b00      	cmp	r3, #0
 800c628:	d055      	beq.n	800c6d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c62a:	4b43      	ldr	r3, [pc, #268]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c62c:	699b      	ldr	r3, [r3, #24]
 800c62e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	4940      	ldr	r1, [pc, #256]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c638:	4313      	orrs	r3, r2
 800c63a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	2b02      	cmp	r3, #2
 800c642:	d107      	bne.n	800c654 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c644:	4b3c      	ldr	r3, [pc, #240]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d121      	bne.n	800c694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	e0f6      	b.n	800c842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d107      	bne.n	800c66c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c65c:	4b36      	ldr	r3, [pc, #216]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c664:	2b00      	cmp	r3, #0
 800c666:	d115      	bne.n	800c694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	e0ea      	b.n	800c842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d107      	bne.n	800c684 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c674:	4b30      	ldr	r3, [pc, #192]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d109      	bne.n	800c694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e0de      	b.n	800c842 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c684:	4b2c      	ldr	r3, [pc, #176]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0304 	and.w	r3, r3, #4
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	e0d6      	b.n	800c842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c694:	4b28      	ldr	r3, [pc, #160]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	f023 0207 	bic.w	r2, r3, #7
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	4925      	ldr	r1, [pc, #148]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6a6:	f7f5 fb17 	bl	8001cd8 <HAL_GetTick>
 800c6aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6ac:	e00a      	b.n	800c6c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c6ae:	f7f5 fb13 	bl	8001cd8 <HAL_GetTick>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d901      	bls.n	800c6c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	e0be      	b.n	800c842 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6c4:	4b1c      	ldr	r3, [pc, #112]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	00db      	lsls	r3, r3, #3
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d1eb      	bne.n	800c6ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d010      	beq.n	800c704 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	4b14      	ldr	r3, [pc, #80]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	f003 030f 	and.w	r3, r3, #15
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d208      	bcs.n	800c704 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c6f2:	4b11      	ldr	r3, [pc, #68]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c6f4:	699b      	ldr	r3, [r3, #24]
 800c6f6:	f023 020f 	bic.w	r2, r3, #15
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	490e      	ldr	r1, [pc, #56]	@ (800c738 <HAL_RCC_ClockConfig+0x244>)
 800c700:	4313      	orrs	r3, r2
 800c702:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c704:	4b0b      	ldr	r3, [pc, #44]	@ (800c734 <HAL_RCC_ClockConfig+0x240>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 030f 	and.w	r3, r3, #15
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d214      	bcs.n	800c73c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c712:	4b08      	ldr	r3, [pc, #32]	@ (800c734 <HAL_RCC_ClockConfig+0x240>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f023 020f 	bic.w	r2, r3, #15
 800c71a:	4906      	ldr	r1, [pc, #24]	@ (800c734 <HAL_RCC_ClockConfig+0x240>)
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	4313      	orrs	r3, r2
 800c720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c722:	4b04      	ldr	r3, [pc, #16]	@ (800c734 <HAL_RCC_ClockConfig+0x240>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 030f 	and.w	r3, r3, #15
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d005      	beq.n	800c73c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	e086      	b.n	800c842 <HAL_RCC_ClockConfig+0x34e>
 800c734:	52002000 	.word	0x52002000
 800c738:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 0304 	and.w	r3, r3, #4
 800c744:	2b00      	cmp	r3, #0
 800c746:	d010      	beq.n	800c76a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	691a      	ldr	r2, [r3, #16]
 800c74c:	4b3f      	ldr	r3, [pc, #252]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c74e:	699b      	ldr	r3, [r3, #24]
 800c750:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c754:	429a      	cmp	r2, r3
 800c756:	d208      	bcs.n	800c76a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c758:	4b3c      	ldr	r3, [pc, #240]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	4939      	ldr	r1, [pc, #228]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c766:	4313      	orrs	r3, r2
 800c768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 0308 	and.w	r3, r3, #8
 800c772:	2b00      	cmp	r3, #0
 800c774:	d010      	beq.n	800c798 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	695a      	ldr	r2, [r3, #20]
 800c77a:	4b34      	ldr	r3, [pc, #208]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c782:	429a      	cmp	r2, r3
 800c784:	d208      	bcs.n	800c798 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c786:	4b31      	ldr	r3, [pc, #196]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	492e      	ldr	r1, [pc, #184]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c794:	4313      	orrs	r3, r2
 800c796:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 0310 	and.w	r3, r3, #16
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d010      	beq.n	800c7c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	699a      	ldr	r2, [r3, #24]
 800c7a8:	4b28      	ldr	r3, [pc, #160]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c7aa:	69db      	ldr	r3, [r3, #28]
 800c7ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d208      	bcs.n	800c7c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c7b4:	4b25      	ldr	r3, [pc, #148]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	4922      	ldr	r1, [pc, #136]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 0320 	and.w	r3, r3, #32
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d010      	beq.n	800c7f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	69da      	ldr	r2, [r3, #28]
 800c7d6:	4b1d      	ldr	r3, [pc, #116]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d208      	bcs.n	800c7f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c7e2:	4b1a      	ldr	r3, [pc, #104]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	4917      	ldr	r1, [pc, #92]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c7f4:	f000 f834 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	4b14      	ldr	r3, [pc, #80]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	0a1b      	lsrs	r3, r3, #8
 800c800:	f003 030f 	and.w	r3, r3, #15
 800c804:	4912      	ldr	r1, [pc, #72]	@ (800c850 <HAL_RCC_ClockConfig+0x35c>)
 800c806:	5ccb      	ldrb	r3, [r1, r3]
 800c808:	f003 031f 	and.w	r3, r3, #31
 800c80c:	fa22 f303 	lsr.w	r3, r2, r3
 800c810:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c812:	4b0e      	ldr	r3, [pc, #56]	@ (800c84c <HAL_RCC_ClockConfig+0x358>)
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	f003 030f 	and.w	r3, r3, #15
 800c81a:	4a0d      	ldr	r2, [pc, #52]	@ (800c850 <HAL_RCC_ClockConfig+0x35c>)
 800c81c:	5cd3      	ldrb	r3, [r2, r3]
 800c81e:	f003 031f 	and.w	r3, r3, #31
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	fa22 f303 	lsr.w	r3, r2, r3
 800c828:	4a0a      	ldr	r2, [pc, #40]	@ (800c854 <HAL_RCC_ClockConfig+0x360>)
 800c82a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c82c:	4a0a      	ldr	r2, [pc, #40]	@ (800c858 <HAL_RCC_ClockConfig+0x364>)
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c832:	4b0a      	ldr	r3, [pc, #40]	@ (800c85c <HAL_RCC_ClockConfig+0x368>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4618      	mov	r0, r3
 800c838:	f7f5 fa04 	bl	8001c44 <HAL_InitTick>
 800c83c:	4603      	mov	r3, r0
 800c83e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c840:	7bfb      	ldrb	r3, [r7, #15]
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	58024400 	.word	0x58024400
 800c850:	080159fc 	.word	0x080159fc
 800c854:	24000004 	.word	0x24000004
 800c858:	24000000 	.word	0x24000000
 800c85c:	24000008 	.word	0x24000008

0800c860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c860:	b480      	push	{r7}
 800c862:	b089      	sub	sp, #36	@ 0x24
 800c864:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c866:	4bb3      	ldr	r3, [pc, #716]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c86e:	2b18      	cmp	r3, #24
 800c870:	f200 8155 	bhi.w	800cb1e <HAL_RCC_GetSysClockFreq+0x2be>
 800c874:	a201      	add	r2, pc, #4	@ (adr r2, 800c87c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c8e1 	.word	0x0800c8e1
 800c880:	0800cb1f 	.word	0x0800cb1f
 800c884:	0800cb1f 	.word	0x0800cb1f
 800c888:	0800cb1f 	.word	0x0800cb1f
 800c88c:	0800cb1f 	.word	0x0800cb1f
 800c890:	0800cb1f 	.word	0x0800cb1f
 800c894:	0800cb1f 	.word	0x0800cb1f
 800c898:	0800cb1f 	.word	0x0800cb1f
 800c89c:	0800c907 	.word	0x0800c907
 800c8a0:	0800cb1f 	.word	0x0800cb1f
 800c8a4:	0800cb1f 	.word	0x0800cb1f
 800c8a8:	0800cb1f 	.word	0x0800cb1f
 800c8ac:	0800cb1f 	.word	0x0800cb1f
 800c8b0:	0800cb1f 	.word	0x0800cb1f
 800c8b4:	0800cb1f 	.word	0x0800cb1f
 800c8b8:	0800cb1f 	.word	0x0800cb1f
 800c8bc:	0800c90d 	.word	0x0800c90d
 800c8c0:	0800cb1f 	.word	0x0800cb1f
 800c8c4:	0800cb1f 	.word	0x0800cb1f
 800c8c8:	0800cb1f 	.word	0x0800cb1f
 800c8cc:	0800cb1f 	.word	0x0800cb1f
 800c8d0:	0800cb1f 	.word	0x0800cb1f
 800c8d4:	0800cb1f 	.word	0x0800cb1f
 800c8d8:	0800cb1f 	.word	0x0800cb1f
 800c8dc:	0800c913 	.word	0x0800c913
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8e0:	4b94      	ldr	r3, [pc, #592]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 0320 	and.w	r3, r3, #32
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d009      	beq.n	800c900 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8ec:	4b91      	ldr	r3, [pc, #580]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	08db      	lsrs	r3, r3, #3
 800c8f2:	f003 0303 	and.w	r3, r3, #3
 800c8f6:	4a90      	ldr	r2, [pc, #576]	@ (800cb38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c8fe:	e111      	b.n	800cb24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c900:	4b8d      	ldr	r3, [pc, #564]	@ (800cb38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c902:	61bb      	str	r3, [r7, #24]
      break;
 800c904:	e10e      	b.n	800cb24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c906:	4b8d      	ldr	r3, [pc, #564]	@ (800cb3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c908:	61bb      	str	r3, [r7, #24]
      break;
 800c90a:	e10b      	b.n	800cb24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c90c:	4b8c      	ldr	r3, [pc, #560]	@ (800cb40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c90e:	61bb      	str	r3, [r7, #24]
      break;
 800c910:	e108      	b.n	800cb24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c912:	4b88      	ldr	r3, [pc, #544]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c916:	f003 0303 	and.w	r3, r3, #3
 800c91a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c91c:	4b85      	ldr	r3, [pc, #532]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c920:	091b      	lsrs	r3, r3, #4
 800c922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c926:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c928:	4b82      	ldr	r3, [pc, #520]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c932:	4b80      	ldr	r3, [pc, #512]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c936:	08db      	lsrs	r3, r3, #3
 800c938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	fb02 f303 	mul.w	r3, r2, r3
 800c942:	ee07 3a90 	vmov	s15, r3
 800c946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c94a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	f000 80e1 	beq.w	800cb18 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	f000 8083 	beq.w	800ca64 <HAL_RCC_GetSysClockFreq+0x204>
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2b02      	cmp	r3, #2
 800c962:	f200 80a1 	bhi.w	800caa8 <HAL_RCC_GetSysClockFreq+0x248>
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d003      	beq.n	800c974 <HAL_RCC_GetSysClockFreq+0x114>
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d056      	beq.n	800ca20 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c972:	e099      	b.n	800caa8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c974:	4b6f      	ldr	r3, [pc, #444]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 0320 	and.w	r3, r3, #32
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d02d      	beq.n	800c9dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c980:	4b6c      	ldr	r3, [pc, #432]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	08db      	lsrs	r3, r3, #3
 800c986:	f003 0303 	and.w	r3, r3, #3
 800c98a:	4a6b      	ldr	r2, [pc, #428]	@ (800cb38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c98c:	fa22 f303 	lsr.w	r3, r2, r3
 800c990:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	ee07 3a90 	vmov	s15, r3
 800c998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	ee07 3a90 	vmov	s15, r3
 800c9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9aa:	4b62      	ldr	r3, [pc, #392]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b2:	ee07 3a90 	vmov	s15, r3
 800c9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800cb44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c9da:	e087      	b.n	800caec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	ee07 3a90 	vmov	s15, r3
 800c9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800cb48 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ee:	4b51      	ldr	r3, [pc, #324]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800cb44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca1e:	e065      	b.n	800caec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	ee07 3a90 	vmov	s15, r3
 800ca26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800cb4c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ca2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca32:	4b40      	ldr	r3, [pc, #256]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca3a:	ee07 3a90 	vmov	s15, r3
 800ca3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca42:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cb44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca62:	e043      	b.n	800caec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	ee07 3a90 	vmov	s15, r3
 800ca6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800cb50 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ca72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca76:	4b2f      	ldr	r3, [pc, #188]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca7e:	ee07 3a90 	vmov	s15, r3
 800ca82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca86:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800cb44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800caa6:	e021      	b.n	800caec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	ee07 3a90 	vmov	s15, r3
 800caae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800cb4c <HAL_RCC_GetSysClockFreq+0x2ec>
 800cab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caba:	4b1e      	ldr	r3, [pc, #120]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cabc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caca:	ed97 6a02 	vldr	s12, [r7, #8]
 800cace:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800cb44 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800caea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800caec:	4b11      	ldr	r3, [pc, #68]	@ (800cb34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800caee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caf0:	0a5b      	lsrs	r3, r3, #9
 800caf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800caf6:	3301      	adds	r3, #1
 800caf8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb04:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb10:	ee17 3a90 	vmov	r3, s15
 800cb14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cb16:	e005      	b.n	800cb24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	61bb      	str	r3, [r7, #24]
      break;
 800cb1c:	e002      	b.n	800cb24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cb1e:	4b07      	ldr	r3, [pc, #28]	@ (800cb3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cb20:	61bb      	str	r3, [r7, #24]
      break;
 800cb22:	bf00      	nop
  }

  return sysclockfreq;
 800cb24:	69bb      	ldr	r3, [r7, #24]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3724      	adds	r7, #36	@ 0x24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	58024400 	.word	0x58024400
 800cb38:	03d09000 	.word	0x03d09000
 800cb3c:	003d0900 	.word	0x003d0900
 800cb40:	017d7840 	.word	0x017d7840
 800cb44:	46000000 	.word	0x46000000
 800cb48:	4c742400 	.word	0x4c742400
 800cb4c:	4a742400 	.word	0x4a742400
 800cb50:	4bbebc20 	.word	0x4bbebc20

0800cb54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cb5a:	f7ff fe81 	bl	800c860 <HAL_RCC_GetSysClockFreq>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	4b10      	ldr	r3, [pc, #64]	@ (800cba4 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb62:	699b      	ldr	r3, [r3, #24]
 800cb64:	0a1b      	lsrs	r3, r3, #8
 800cb66:	f003 030f 	and.w	r3, r3, #15
 800cb6a:	490f      	ldr	r1, [pc, #60]	@ (800cba8 <HAL_RCC_GetHCLKFreq+0x54>)
 800cb6c:	5ccb      	ldrb	r3, [r1, r3]
 800cb6e:	f003 031f 	and.w	r3, r3, #31
 800cb72:	fa22 f303 	lsr.w	r3, r2, r3
 800cb76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb78:	4b0a      	ldr	r3, [pc, #40]	@ (800cba4 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb7a:	699b      	ldr	r3, [r3, #24]
 800cb7c:	f003 030f 	and.w	r3, r3, #15
 800cb80:	4a09      	ldr	r2, [pc, #36]	@ (800cba8 <HAL_RCC_GetHCLKFreq+0x54>)
 800cb82:	5cd3      	ldrb	r3, [r2, r3]
 800cb84:	f003 031f 	and.w	r3, r3, #31
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb8e:	4a07      	ldr	r2, [pc, #28]	@ (800cbac <HAL_RCC_GetHCLKFreq+0x58>)
 800cb90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cb92:	4a07      	ldr	r2, [pc, #28]	@ (800cbb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cb98:	4b04      	ldr	r3, [pc, #16]	@ (800cbac <HAL_RCC_GetHCLKFreq+0x58>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	58024400 	.word	0x58024400
 800cba8:	080159fc 	.word	0x080159fc
 800cbac:	24000004 	.word	0x24000004
 800cbb0:	24000000 	.word	0x24000000

0800cbb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cbb8:	f7ff ffcc 	bl	800cb54 <HAL_RCC_GetHCLKFreq>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	4b06      	ldr	r3, [pc, #24]	@ (800cbd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cbc0:	69db      	ldr	r3, [r3, #28]
 800cbc2:	091b      	lsrs	r3, r3, #4
 800cbc4:	f003 0307 	and.w	r3, r3, #7
 800cbc8:	4904      	ldr	r1, [pc, #16]	@ (800cbdc <HAL_RCC_GetPCLK1Freq+0x28>)
 800cbca:	5ccb      	ldrb	r3, [r1, r3]
 800cbcc:	f003 031f 	and.w	r3, r3, #31
 800cbd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	58024400 	.word	0x58024400
 800cbdc:	080159fc 	.word	0x080159fc

0800cbe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cbe4:	f7ff ffb6 	bl	800cb54 <HAL_RCC_GetHCLKFreq>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	4b06      	ldr	r3, [pc, #24]	@ (800cc04 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cbec:	69db      	ldr	r3, [r3, #28]
 800cbee:	0a1b      	lsrs	r3, r3, #8
 800cbf0:	f003 0307 	and.w	r3, r3, #7
 800cbf4:	4904      	ldr	r1, [pc, #16]	@ (800cc08 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cbf6:	5ccb      	ldrb	r3, [r1, r3]
 800cbf8:	f003 031f 	and.w	r3, r3, #31
 800cbfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	58024400 	.word	0x58024400
 800cc08:	080159fc 	.word	0x080159fc

0800cc0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc10:	b0ca      	sub	sp, #296	@ 0x128
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cc24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800cc30:	2500      	movs	r5, #0
 800cc32:	ea54 0305 	orrs.w	r3, r4, r5
 800cc36:	d049      	beq.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc42:	d02f      	beq.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cc44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc48:	d828      	bhi.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc4e:	d01a      	beq.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cc50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc54:	d822      	bhi.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d003      	beq.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cc5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc5e:	d007      	beq.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cc60:	e01c      	b.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc62:	4bb8      	ldr	r3, [pc, #736]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc66:	4ab7      	ldr	r2, [pc, #732]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc6e:	e01a      	b.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc74:	3308      	adds	r3, #8
 800cc76:	2102      	movs	r1, #2
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f002 fb61 	bl	800f340 <RCCEx_PLL2_Config>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc84:	e00f      	b.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc8a:	3328      	adds	r3, #40	@ 0x28
 800cc8c:	2102      	movs	r1, #2
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f002 fc08 	bl	800f4a4 <RCCEx_PLL3_Config>
 800cc94:	4603      	mov	r3, r0
 800cc96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc9a:	e004      	b.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cca2:	e000      	b.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800cca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d10a      	bne.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ccae:	4ba5      	ldr	r3, [pc, #660]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccb2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ccb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccbc:	4aa1      	ldr	r2, [pc, #644]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccbe:	430b      	orrs	r3, r1
 800ccc0:	6513      	str	r3, [r2, #80]	@ 0x50
 800ccc2:	e003      	b.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ccd8:	f04f 0900 	mov.w	r9, #0
 800ccdc:	ea58 0309 	orrs.w	r3, r8, r9
 800cce0:	d047      	beq.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800cce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cce8:	2b04      	cmp	r3, #4
 800ccea:	d82a      	bhi.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ccec:	a201      	add	r2, pc, #4	@ (adr r2, 800ccf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ccee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf2:	bf00      	nop
 800ccf4:	0800cd09 	.word	0x0800cd09
 800ccf8:	0800cd17 	.word	0x0800cd17
 800ccfc:	0800cd2d 	.word	0x0800cd2d
 800cd00:	0800cd4b 	.word	0x0800cd4b
 800cd04:	0800cd4b 	.word	0x0800cd4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd08:	4b8e      	ldr	r3, [pc, #568]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0c:	4a8d      	ldr	r2, [pc, #564]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd14:	e01a      	b.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f002 fb0e 	bl	800f340 <RCCEx_PLL2_Config>
 800cd24:	4603      	mov	r3, r0
 800cd26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd2a:	e00f      	b.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd30:	3328      	adds	r3, #40	@ 0x28
 800cd32:	2100      	movs	r1, #0
 800cd34:	4618      	mov	r0, r3
 800cd36:	f002 fbb5 	bl	800f4a4 <RCCEx_PLL3_Config>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd40:	e004      	b.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cd48:	e000      	b.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cd4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10a      	bne.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd54:	4b7b      	ldr	r3, [pc, #492]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd58:	f023 0107 	bic.w	r1, r3, #7
 800cd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd62:	4a78      	ldr	r2, [pc, #480]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd64:	430b      	orrs	r3, r1
 800cd66:	6513      	str	r3, [r2, #80]	@ 0x50
 800cd68:	e003      	b.n	800cd72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800cd7e:	f04f 0b00 	mov.w	fp, #0
 800cd82:	ea5a 030b 	orrs.w	r3, sl, fp
 800cd86:	d04c      	beq.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cd88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd92:	d030      	beq.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cd94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd98:	d829      	bhi.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd9a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd9c:	d02d      	beq.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cd9e:	2bc0      	cmp	r3, #192	@ 0xc0
 800cda0:	d825      	bhi.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cda2:	2b80      	cmp	r3, #128	@ 0x80
 800cda4:	d018      	beq.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cda6:	2b80      	cmp	r3, #128	@ 0x80
 800cda8:	d821      	bhi.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cdae:	2b40      	cmp	r3, #64	@ 0x40
 800cdb0:	d007      	beq.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cdb2:	e01c      	b.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdb4:	4b63      	ldr	r3, [pc, #396]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb8:	4a62      	ldr	r2, [pc, #392]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdc0:	e01c      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cdc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdc6:	3308      	adds	r3, #8
 800cdc8:	2100      	movs	r1, #0
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f002 fab8 	bl	800f340 <RCCEx_PLL2_Config>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdd6:	e011      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cddc:	3328      	adds	r3, #40	@ 0x28
 800cdde:	2100      	movs	r1, #0
 800cde0:	4618      	mov	r0, r3
 800cde2:	f002 fb5f 	bl	800f4a4 <RCCEx_PLL3_Config>
 800cde6:	4603      	mov	r3, r0
 800cde8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdec:	e006      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cdf4:	e002      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cdf6:	bf00      	nop
 800cdf8:	e000      	b.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cdfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10a      	bne.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ce04:	4b4f      	ldr	r3, [pc, #316]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce08:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800ce0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce12:	4a4c      	ldr	r2, [pc, #304]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce14:	430b      	orrs	r3, r1
 800ce16:	6513      	str	r3, [r2, #80]	@ 0x50
 800ce18:	e003      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ce22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ce2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800ce32:	2300      	movs	r3, #0
 800ce34:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800ce38:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	d053      	beq.n	800ceea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ce42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ce4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ce4e:	d035      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ce50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ce54:	d82e      	bhi.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce56:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ce5a:	d031      	beq.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ce5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ce60:	d828      	bhi.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce66:	d01a      	beq.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ce68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce6c:	d822      	bhi.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d003      	beq.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ce72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce76:	d007      	beq.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ce78:	e01c      	b.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce7a:	4b32      	ldr	r3, [pc, #200]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce7e:	4a31      	ldr	r2, [pc, #196]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce86:	e01c      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce8c:	3308      	adds	r3, #8
 800ce8e:	2100      	movs	r1, #0
 800ce90:	4618      	mov	r0, r3
 800ce92:	f002 fa55 	bl	800f340 <RCCEx_PLL2_Config>
 800ce96:	4603      	mov	r3, r0
 800ce98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ce9c:	e011      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cea2:	3328      	adds	r3, #40	@ 0x28
 800cea4:	2100      	movs	r1, #0
 800cea6:	4618      	mov	r0, r3
 800cea8:	f002 fafc 	bl	800f4a4 <RCCEx_PLL3_Config>
 800ceac:	4603      	mov	r3, r0
 800ceae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ceb2:	e006      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ceba:	e002      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cebc:	bf00      	nop
 800cebe:	e000      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10b      	bne.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ceca:	4b1e      	ldr	r3, [pc, #120]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cece:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ced2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ced6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ceda:	4a1a      	ldr	r2, [pc, #104]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cedc:	430b      	orrs	r3, r1
 800cede:	6593      	str	r3, [r2, #88]	@ 0x58
 800cee0:	e003      	b.n	800ceea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ceea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800cef6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cefa:	2300      	movs	r3, #0
 800cefc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cf00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800cf04:	460b      	mov	r3, r1
 800cf06:	4313      	orrs	r3, r2
 800cf08:	d056      	beq.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cf0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cf12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf16:	d038      	beq.n	800cf8a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cf18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf1c:	d831      	bhi.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cf22:	d034      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cf24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cf28:	d82b      	bhi.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf2e:	d01d      	beq.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cf30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf34:	d825      	bhi.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d006      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cf3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf3e:	d00a      	beq.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cf40:	e01f      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf42:	bf00      	nop
 800cf44:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf48:	4ba2      	ldr	r3, [pc, #648]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf4c:	4aa1      	ldr	r2, [pc, #644]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf54:	e01c      	b.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf5a:	3308      	adds	r3, #8
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f002 f9ee 	bl	800f340 <RCCEx_PLL2_Config>
 800cf64:	4603      	mov	r3, r0
 800cf66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cf6a:	e011      	b.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf70:	3328      	adds	r3, #40	@ 0x28
 800cf72:	2100      	movs	r1, #0
 800cf74:	4618      	mov	r0, r3
 800cf76:	f002 fa95 	bl	800f4a4 <RCCEx_PLL3_Config>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf80:	e006      	b.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cf88:	e002      	b.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf8a:	bf00      	nop
 800cf8c:	e000      	b.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10b      	bne.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cf98:	4b8e      	ldr	r3, [pc, #568]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf9c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800cfa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cfa8:	4a8a      	ldr	r2, [pc, #552]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfaa:	430b      	orrs	r3, r1
 800cfac:	6593      	str	r3, [r2, #88]	@ 0x58
 800cfae:	e003      	b.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cfb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800cfc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cfce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	d03a      	beq.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cfd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfde:	2b30      	cmp	r3, #48	@ 0x30
 800cfe0:	d01f      	beq.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cfe2:	2b30      	cmp	r3, #48	@ 0x30
 800cfe4:	d819      	bhi.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cfe6:	2b20      	cmp	r3, #32
 800cfe8:	d00c      	beq.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cfea:	2b20      	cmp	r3, #32
 800cfec:	d815      	bhi.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d019      	beq.n	800d026 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cff2:	2b10      	cmp	r3, #16
 800cff4:	d111      	bne.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cff6:	4b77      	ldr	r3, [pc, #476]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cffa:	4a76      	ldr	r2, [pc, #472]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d002:	e011      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d008:	3308      	adds	r3, #8
 800d00a:	2102      	movs	r1, #2
 800d00c:	4618      	mov	r0, r3
 800d00e:	f002 f997 	bl	800f340 <RCCEx_PLL2_Config>
 800d012:	4603      	mov	r3, r0
 800d014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d018:	e006      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d020:	e002      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d022:	bf00      	nop
 800d024:	e000      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d026:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10a      	bne.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d030:	4b68      	ldr	r3, [pc, #416]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d034:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d03c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d03e:	4a65      	ldr	r2, [pc, #404]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d040:	430b      	orrs	r3, r1
 800d042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d044:	e003      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d04a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d056:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d05a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d05e:	2300      	movs	r3, #0
 800d060:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d064:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d068:	460b      	mov	r3, r1
 800d06a:	4313      	orrs	r3, r2
 800d06c:	d051      	beq.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d074:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d078:	d035      	beq.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d07a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d07e:	d82e      	bhi.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d080:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d084:	d031      	beq.n	800d0ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d086:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d08a:	d828      	bhi.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d08c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d090:	d01a      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d096:	d822      	bhi.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d003      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d09c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0a0:	d007      	beq.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d0a2:	e01c      	b.n	800d0de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0a4:	4b4b      	ldr	r3, [pc, #300]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0a8:	4a4a      	ldr	r2, [pc, #296]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0b0:	e01c      	b.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f002 f940 	bl	800f340 <RCCEx_PLL2_Config>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0c6:	e011      	b.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0cc:	3328      	adds	r3, #40	@ 0x28
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f002 f9e7 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0dc:	e006      	b.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d0e4:	e002      	b.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0e6:	bf00      	nop
 800d0e8:	e000      	b.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10a      	bne.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d0f4:	4b37      	ldr	r3, [pc, #220]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d102:	4a34      	ldr	r2, [pc, #208]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d104:	430b      	orrs	r3, r1
 800d106:	6513      	str	r3, [r2, #80]	@ 0x50
 800d108:	e003      	b.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d10a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d10e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d11e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d122:	2300      	movs	r3, #0
 800d124:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d128:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d12c:	460b      	mov	r3, r1
 800d12e:	4313      	orrs	r3, r2
 800d130:	d056      	beq.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d13c:	d033      	beq.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d13e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d142:	d82c      	bhi.n	800d19e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d144:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d148:	d02f      	beq.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d14a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d14e:	d826      	bhi.n	800d19e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d150:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d154:	d02b      	beq.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d156:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d15a:	d820      	bhi.n	800d19e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d15c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d160:	d012      	beq.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d166:	d81a      	bhi.n	800d19e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d022      	beq.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d16c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d170:	d115      	bne.n	800d19e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d176:	3308      	adds	r3, #8
 800d178:	2101      	movs	r1, #1
 800d17a:	4618      	mov	r0, r3
 800d17c:	f002 f8e0 	bl	800f340 <RCCEx_PLL2_Config>
 800d180:	4603      	mov	r3, r0
 800d182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d186:	e015      	b.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d18c:	3328      	adds	r3, #40	@ 0x28
 800d18e:	2101      	movs	r1, #1
 800d190:	4618      	mov	r0, r3
 800d192:	f002 f987 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d196:	4603      	mov	r3, r0
 800d198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d19c:	e00a      	b.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d1a4:	e006      	b.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1a6:	bf00      	nop
 800d1a8:	e004      	b.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1aa:	bf00      	nop
 800d1ac:	e002      	b.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1ae:	bf00      	nop
 800d1b0:	e000      	b.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10d      	bne.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d1bc:	4b05      	ldr	r3, [pc, #20]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1ca:	4a02      	ldr	r2, [pc, #8]	@ (800d1d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d1cc:	430b      	orrs	r3, r1
 800d1ce:	6513      	str	r3, [r2, #80]	@ 0x50
 800d1d0:	e006      	b.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d1d2:	bf00      	nop
 800d1d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d1ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d1f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	d055      	beq.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d20c:	d033      	beq.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d20e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d212:	d82c      	bhi.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d218:	d02f      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d21a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d21e:	d826      	bhi.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d220:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d224:	d02b      	beq.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d226:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d22a:	d820      	bhi.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d22c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d230:	d012      	beq.n	800d258 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d236:	d81a      	bhi.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d022      	beq.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d23c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d240:	d115      	bne.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d246:	3308      	adds	r3, #8
 800d248:	2101      	movs	r1, #1
 800d24a:	4618      	mov	r0, r3
 800d24c:	f002 f878 	bl	800f340 <RCCEx_PLL2_Config>
 800d250:	4603      	mov	r3, r0
 800d252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d256:	e015      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d25c:	3328      	adds	r3, #40	@ 0x28
 800d25e:	2101      	movs	r1, #1
 800d260:	4618      	mov	r0, r3
 800d262:	f002 f91f 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d266:	4603      	mov	r3, r0
 800d268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d26c:	e00a      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d274:	e006      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d276:	bf00      	nop
 800d278:	e004      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d27a:	bf00      	nop
 800d27c:	e002      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d27e:	bf00      	nop
 800d280:	e000      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d282:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10b      	bne.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d28c:	4ba3      	ldr	r3, [pc, #652]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d28e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d290:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d29c:	4a9f      	ldr	r2, [pc, #636]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d29e:	430b      	orrs	r3, r1
 800d2a0:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2a2:	e003      	b.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d2b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d2c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	d037      	beq.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2d6:	d00e      	beq.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d2d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2dc:	d816      	bhi.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d018      	beq.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d2e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2e6:	d111      	bne.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2e8:	4b8c      	ldr	r3, [pc, #560]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ec:	4a8b      	ldr	r2, [pc, #556]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d2f4:	e00f      	b.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	2101      	movs	r1, #1
 800d2fe:	4618      	mov	r0, r3
 800d300:	f002 f81e 	bl	800f340 <RCCEx_PLL2_Config>
 800d304:	4603      	mov	r3, r0
 800d306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d30a:	e004      	b.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d30c:	2301      	movs	r3, #1
 800d30e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d312:	e000      	b.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d314:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10a      	bne.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d31e:	4b7f      	ldr	r3, [pc, #508]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d322:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d32a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d32c:	4a7b      	ldr	r2, [pc, #492]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d32e:	430b      	orrs	r3, r1
 800d330:	6513      	str	r3, [r2, #80]	@ 0x50
 800d332:	e003      	b.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d344:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d34c:	2300      	movs	r3, #0
 800d34e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d352:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d356:	460b      	mov	r3, r1
 800d358:	4313      	orrs	r3, r2
 800d35a:	d039      	beq.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d362:	2b03      	cmp	r3, #3
 800d364:	d81c      	bhi.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d366:	a201      	add	r2, pc, #4	@ (adr r2, 800d36c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36c:	0800d3a9 	.word	0x0800d3a9
 800d370:	0800d37d 	.word	0x0800d37d
 800d374:	0800d38b 	.word	0x0800d38b
 800d378:	0800d3a9 	.word	0x0800d3a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d37c:	4b67      	ldr	r3, [pc, #412]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d380:	4a66      	ldr	r2, [pc, #408]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d388:	e00f      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d38e:	3308      	adds	r3, #8
 800d390:	2102      	movs	r1, #2
 800d392:	4618      	mov	r0, r3
 800d394:	f001 ffd4 	bl	800f340 <RCCEx_PLL2_Config>
 800d398:	4603      	mov	r3, r0
 800d39a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d39e:	e004      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d3a6:	e000      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d3a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10a      	bne.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d3b2:	4b5a      	ldr	r3, [pc, #360]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3b6:	f023 0103 	bic.w	r1, r3, #3
 800d3ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3c0:	4a56      	ldr	r2, [pc, #344]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3c2:	430b      	orrs	r3, r1
 800d3c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d3c6:	e003      	b.n	800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d3dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d3e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	f000 809f 	beq.w	800d530 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d3f2:	4b4b      	ldr	r3, [pc, #300]	@ (800d520 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a4a      	ldr	r2, [pc, #296]	@ (800d520 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d3f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d3fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d3fe:	f7f4 fc6b 	bl	8001cd8 <HAL_GetTick>
 800d402:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d406:	e00b      	b.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d408:	f7f4 fc66 	bl	8001cd8 <HAL_GetTick>
 800d40c:	4602      	mov	r2, r0
 800d40e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	2b64      	cmp	r3, #100	@ 0x64
 800d416:	d903      	bls.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d418:	2303      	movs	r3, #3
 800d41a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d41e:	e005      	b.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d420:	4b3f      	ldr	r3, [pc, #252]	@ (800d520 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0ed      	beq.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d42c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d430:	2b00      	cmp	r3, #0
 800d432:	d179      	bne.n	800d528 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d434:	4b39      	ldr	r3, [pc, #228]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d436:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d43c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d440:	4053      	eors	r3, r2
 800d442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d446:	2b00      	cmp	r3, #0
 800d448:	d015      	beq.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d44a:	4b34      	ldr	r3, [pc, #208]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d44c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d44e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d452:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d456:	4b31      	ldr	r3, [pc, #196]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d45a:	4a30      	ldr	r2, [pc, #192]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d45c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d460:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d462:	4b2e      	ldr	r3, [pc, #184]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d466:	4a2d      	ldr	r2, [pc, #180]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d46c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d46e:	4a2b      	ldr	r2, [pc, #172]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d474:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d47a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d47e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d482:	d118      	bne.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d484:	f7f4 fc28 	bl	8001cd8 <HAL_GetTick>
 800d488:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d48c:	e00d      	b.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d48e:	f7f4 fc23 	bl	8001cd8 <HAL_GetTick>
 800d492:	4602      	mov	r2, r0
 800d494:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d498:	1ad2      	subs	r2, r2, r3
 800d49a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d903      	bls.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800d4a8:	e005      	b.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4aa:	4b1c      	ldr	r3, [pc, #112]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0eb      	beq.n	800d48e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d129      	bne.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d4c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4ce:	d10e      	bne.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d4d0:	4b12      	ldr	r3, [pc, #72]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d4e0:	091a      	lsrs	r2, r3, #4
 800d4e2:	4b10      	ldr	r3, [pc, #64]	@ (800d524 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	4a0d      	ldr	r2, [pc, #52]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4e8:	430b      	orrs	r3, r1
 800d4ea:	6113      	str	r3, [r2, #16]
 800d4ec:	e005      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d4ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	4a0a      	ldr	r2, [pc, #40]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d4f8:	6113      	str	r3, [r2, #16]
 800d4fa:	4b08      	ldr	r3, [pc, #32]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d50a:	4a04      	ldr	r2, [pc, #16]	@ (800d51c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d50c:	430b      	orrs	r3, r1
 800d50e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d510:	e00e      	b.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d51a:	e009      	b.n	800d530 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d51c:	58024400 	.word	0x58024400
 800d520:	58024800 	.word	0x58024800
 800d524:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d52c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d538:	f002 0301 	and.w	r3, r2, #1
 800d53c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d540:	2300      	movs	r3, #0
 800d542:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d546:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d54a:	460b      	mov	r3, r1
 800d54c:	4313      	orrs	r3, r2
 800d54e:	f000 8089 	beq.w	800d664 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d556:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d558:	2b28      	cmp	r3, #40	@ 0x28
 800d55a:	d86b      	bhi.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d55c:	a201      	add	r2, pc, #4	@ (adr r2, 800d564 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d562:	bf00      	nop
 800d564:	0800d63d 	.word	0x0800d63d
 800d568:	0800d635 	.word	0x0800d635
 800d56c:	0800d635 	.word	0x0800d635
 800d570:	0800d635 	.word	0x0800d635
 800d574:	0800d635 	.word	0x0800d635
 800d578:	0800d635 	.word	0x0800d635
 800d57c:	0800d635 	.word	0x0800d635
 800d580:	0800d635 	.word	0x0800d635
 800d584:	0800d609 	.word	0x0800d609
 800d588:	0800d635 	.word	0x0800d635
 800d58c:	0800d635 	.word	0x0800d635
 800d590:	0800d635 	.word	0x0800d635
 800d594:	0800d635 	.word	0x0800d635
 800d598:	0800d635 	.word	0x0800d635
 800d59c:	0800d635 	.word	0x0800d635
 800d5a0:	0800d635 	.word	0x0800d635
 800d5a4:	0800d61f 	.word	0x0800d61f
 800d5a8:	0800d635 	.word	0x0800d635
 800d5ac:	0800d635 	.word	0x0800d635
 800d5b0:	0800d635 	.word	0x0800d635
 800d5b4:	0800d635 	.word	0x0800d635
 800d5b8:	0800d635 	.word	0x0800d635
 800d5bc:	0800d635 	.word	0x0800d635
 800d5c0:	0800d635 	.word	0x0800d635
 800d5c4:	0800d63d 	.word	0x0800d63d
 800d5c8:	0800d635 	.word	0x0800d635
 800d5cc:	0800d635 	.word	0x0800d635
 800d5d0:	0800d635 	.word	0x0800d635
 800d5d4:	0800d635 	.word	0x0800d635
 800d5d8:	0800d635 	.word	0x0800d635
 800d5dc:	0800d635 	.word	0x0800d635
 800d5e0:	0800d635 	.word	0x0800d635
 800d5e4:	0800d63d 	.word	0x0800d63d
 800d5e8:	0800d635 	.word	0x0800d635
 800d5ec:	0800d635 	.word	0x0800d635
 800d5f0:	0800d635 	.word	0x0800d635
 800d5f4:	0800d635 	.word	0x0800d635
 800d5f8:	0800d635 	.word	0x0800d635
 800d5fc:	0800d635 	.word	0x0800d635
 800d600:	0800d635 	.word	0x0800d635
 800d604:	0800d63d 	.word	0x0800d63d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d60c:	3308      	adds	r3, #8
 800d60e:	2101      	movs	r1, #1
 800d610:	4618      	mov	r0, r3
 800d612:	f001 fe95 	bl	800f340 <RCCEx_PLL2_Config>
 800d616:	4603      	mov	r3, r0
 800d618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d61c:	e00f      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d622:	3328      	adds	r3, #40	@ 0x28
 800d624:	2101      	movs	r1, #1
 800d626:	4618      	mov	r0, r3
 800d628:	f001 ff3c 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d62c:	4603      	mov	r3, r0
 800d62e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d632:	e004      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d63a:	e000      	b.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d63c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d63e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10a      	bne.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d646:	4bbf      	ldr	r3, [pc, #764]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d64a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d654:	4abb      	ldr	r2, [pc, #748]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d656:	430b      	orrs	r3, r1
 800d658:	6553      	str	r3, [r2, #84]	@ 0x54
 800d65a:	e003      	b.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d65c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d660:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66c:	f002 0302 	and.w	r3, r2, #2
 800d670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d674:	2300      	movs	r3, #0
 800d676:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d67a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d67e:	460b      	mov	r3, r1
 800d680:	4313      	orrs	r3, r2
 800d682:	d041      	beq.n	800d708 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d68a:	2b05      	cmp	r3, #5
 800d68c:	d824      	bhi.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d68e:	a201      	add	r2, pc, #4	@ (adr r2, 800d694 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d694:	0800d6e1 	.word	0x0800d6e1
 800d698:	0800d6ad 	.word	0x0800d6ad
 800d69c:	0800d6c3 	.word	0x0800d6c3
 800d6a0:	0800d6e1 	.word	0x0800d6e1
 800d6a4:	0800d6e1 	.word	0x0800d6e1
 800d6a8:	0800d6e1 	.word	0x0800d6e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6b0:	3308      	adds	r3, #8
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f001 fe43 	bl	800f340 <RCCEx_PLL2_Config>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d6c0:	e00f      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6c6:	3328      	adds	r3, #40	@ 0x28
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f001 feea 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d6d6:	e004      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d6de:	e000      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10a      	bne.n	800d700 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d6ea:	4b96      	ldr	r3, [pc, #600]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6ee:	f023 0107 	bic.w	r1, r3, #7
 800d6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6f8:	4a92      	ldr	r2, [pc, #584]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6fa:	430b      	orrs	r3, r1
 800d6fc:	6553      	str	r3, [r2, #84]	@ 0x54
 800d6fe:	e003      	b.n	800d708 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d710:	f002 0304 	and.w	r3, r2, #4
 800d714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d718:	2300      	movs	r3, #0
 800d71a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d71e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d722:	460b      	mov	r3, r1
 800d724:	4313      	orrs	r3, r2
 800d726:	d044      	beq.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d72c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d730:	2b05      	cmp	r3, #5
 800d732:	d825      	bhi.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d734:	a201      	add	r2, pc, #4	@ (adr r2, 800d73c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d73a:	bf00      	nop
 800d73c:	0800d789 	.word	0x0800d789
 800d740:	0800d755 	.word	0x0800d755
 800d744:	0800d76b 	.word	0x0800d76b
 800d748:	0800d789 	.word	0x0800d789
 800d74c:	0800d789 	.word	0x0800d789
 800d750:	0800d789 	.word	0x0800d789
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d758:	3308      	adds	r3, #8
 800d75a:	2101      	movs	r1, #1
 800d75c:	4618      	mov	r0, r3
 800d75e:	f001 fdef 	bl	800f340 <RCCEx_PLL2_Config>
 800d762:	4603      	mov	r3, r0
 800d764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d768:	e00f      	b.n	800d78a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d76e:	3328      	adds	r3, #40	@ 0x28
 800d770:	2101      	movs	r1, #1
 800d772:	4618      	mov	r0, r3
 800d774:	f001 fe96 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d778:	4603      	mov	r3, r0
 800d77a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d77e:	e004      	b.n	800d78a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d786:	e000      	b.n	800d78a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d78a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10b      	bne.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d792:	4b6c      	ldr	r3, [pc, #432]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d796:	f023 0107 	bic.w	r1, r3, #7
 800d79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d79e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d7a2:	4a68      	ldr	r2, [pc, #416]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7a4:	430b      	orrs	r3, r1
 800d7a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d7a8:	e003      	b.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ba:	f002 0320 	and.w	r3, r2, #32
 800d7be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	d055      	beq.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d7da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d7de:	d033      	beq.n	800d848 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d7e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d7e4:	d82c      	bhi.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ea:	d02f      	beq.n	800d84c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7f0:	d826      	bhi.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7f6:	d02b      	beq.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d7f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7fc:	d820      	bhi.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d802:	d012      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d808:	d81a      	bhi.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d022      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d80e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d812:	d115      	bne.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d818:	3308      	adds	r3, #8
 800d81a:	2100      	movs	r1, #0
 800d81c:	4618      	mov	r0, r3
 800d81e:	f001 fd8f 	bl	800f340 <RCCEx_PLL2_Config>
 800d822:	4603      	mov	r3, r0
 800d824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d828:	e015      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d82e:	3328      	adds	r3, #40	@ 0x28
 800d830:	2102      	movs	r1, #2
 800d832:	4618      	mov	r0, r3
 800d834:	f001 fe36 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d838:	4603      	mov	r3, r0
 800d83a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d83e:	e00a      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d846:	e006      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d848:	bf00      	nop
 800d84a:	e004      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d84c:	bf00      	nop
 800d84e:	e002      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d850:	bf00      	nop
 800d852:	e000      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d854:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10b      	bne.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d85e:	4b39      	ldr	r3, [pc, #228]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d862:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d86e:	4a35      	ldr	r2, [pc, #212]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d870:	430b      	orrs	r3, r1
 800d872:	6553      	str	r3, [r2, #84]	@ 0x54
 800d874:	e003      	b.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d87a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d886:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d88a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d88e:	2300      	movs	r3, #0
 800d890:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d894:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d898:	460b      	mov	r3, r1
 800d89a:	4313      	orrs	r3, r2
 800d89c:	d058      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d8a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d8aa:	d033      	beq.n	800d914 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d8ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d8b0:	d82c      	bhi.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8b6:	d02f      	beq.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d8b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8bc:	d826      	bhi.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d8c2:	d02b      	beq.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d8c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d8c8:	d820      	bhi.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8ce:	d012      	beq.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d8d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8d4:	d81a      	bhi.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d022      	beq.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d8da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8de:	d115      	bne.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8e4:	3308      	adds	r3, #8
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f001 fd29 	bl	800f340 <RCCEx_PLL2_Config>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d8f4:	e015      	b.n	800d922 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8fa:	3328      	adds	r3, #40	@ 0x28
 800d8fc:	2102      	movs	r1, #2
 800d8fe:	4618      	mov	r0, r3
 800d900:	f001 fdd0 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d904:	4603      	mov	r3, r0
 800d906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d90a:	e00a      	b.n	800d922 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d90c:	2301      	movs	r3, #1
 800d90e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d912:	e006      	b.n	800d922 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d914:	bf00      	nop
 800d916:	e004      	b.n	800d922 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d918:	bf00      	nop
 800d91a:	e002      	b.n	800d922 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d91c:	bf00      	nop
 800d91e:	e000      	b.n	800d922 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d920:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10e      	bne.n	800d948 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d92a:	4b06      	ldr	r3, [pc, #24]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d92c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d92e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d936:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d93a:	4a02      	ldr	r2, [pc, #8]	@ (800d944 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d93c:	430b      	orrs	r3, r1
 800d93e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d940:	e006      	b.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d942:	bf00      	nop
 800d944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d94c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d95c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d960:	2300      	movs	r3, #0
 800d962:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d966:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d96a:	460b      	mov	r3, r1
 800d96c:	4313      	orrs	r3, r2
 800d96e:	d055      	beq.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d978:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d97c:	d033      	beq.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d97e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d982:	d82c      	bhi.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d988:	d02f      	beq.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d98a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d98e:	d826      	bhi.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d990:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d994:	d02b      	beq.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d996:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d99a:	d820      	bhi.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d99c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d9a0:	d012      	beq.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d9a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d9a6:	d81a      	bhi.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d022      	beq.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d9ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9b0:	d115      	bne.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f001 fcc0 	bl	800f340 <RCCEx_PLL2_Config>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d9c6:	e015      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9cc:	3328      	adds	r3, #40	@ 0x28
 800d9ce:	2102      	movs	r1, #2
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f001 fd67 	bl	800f4a4 <RCCEx_PLL3_Config>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d9dc:	e00a      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9e4:	e006      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9e6:	bf00      	nop
 800d9e8:	e004      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9ea:	bf00      	nop
 800d9ec:	e002      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9ee:	bf00      	nop
 800d9f0:	e000      	b.n	800d9f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10b      	bne.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d9fc:	4ba1      	ldr	r3, [pc, #644]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800da04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800da0c:	4a9d      	ldr	r2, [pc, #628]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da0e:	430b      	orrs	r3, r1
 800da10:	6593      	str	r3, [r2, #88]	@ 0x58
 800da12:	e003      	b.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800da1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da24:	f002 0308 	and.w	r3, r2, #8
 800da28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800da2c:	2300      	movs	r3, #0
 800da2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800da32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800da36:	460b      	mov	r3, r1
 800da38:	4313      	orrs	r3, r2
 800da3a:	d01e      	beq.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800da3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da48:	d10c      	bne.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da4e:	3328      	adds	r3, #40	@ 0x28
 800da50:	2102      	movs	r1, #2
 800da52:	4618      	mov	r0, r3
 800da54:	f001 fd26 	bl	800f4a4 <RCCEx_PLL3_Config>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800da64:	4b87      	ldr	r3, [pc, #540]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800da6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da74:	4a83      	ldr	r2, [pc, #524]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da76:	430b      	orrs	r3, r1
 800da78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da82:	f002 0310 	and.w	r3, r2, #16
 800da86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800da8a:	2300      	movs	r3, #0
 800da8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800da90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800da94:	460b      	mov	r3, r1
 800da96:	4313      	orrs	r3, r2
 800da98:	d01e      	beq.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800da9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800daa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800daa6:	d10c      	bne.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800daa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daac:	3328      	adds	r3, #40	@ 0x28
 800daae:	2102      	movs	r1, #2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f001 fcf7 	bl	800f4a4 <RCCEx_PLL3_Config>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dac2:	4b70      	ldr	r3, [pc, #448]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dac6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800daca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dace:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dad2:	4a6c      	ldr	r2, [pc, #432]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dad4:	430b      	orrs	r3, r1
 800dad6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800dad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800dae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dae8:	2300      	movs	r3, #0
 800daea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800daee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800daf2:	460b      	mov	r3, r1
 800daf4:	4313      	orrs	r3, r2
 800daf6:	d03e      	beq.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800daf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dafc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db04:	d022      	beq.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800db06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db0a:	d81b      	bhi.n	800db44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d003      	beq.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800db10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db14:	d00b      	beq.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800db16:	e015      	b.n	800db44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db1c:	3308      	adds	r3, #8
 800db1e:	2100      	movs	r1, #0
 800db20:	4618      	mov	r0, r3
 800db22:	f001 fc0d 	bl	800f340 <RCCEx_PLL2_Config>
 800db26:	4603      	mov	r3, r0
 800db28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db2c:	e00f      	b.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800db2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db32:	3328      	adds	r3, #40	@ 0x28
 800db34:	2102      	movs	r1, #2
 800db36:	4618      	mov	r0, r3
 800db38:	f001 fcb4 	bl	800f4a4 <RCCEx_PLL3_Config>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db42:	e004      	b.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db44:	2301      	movs	r3, #1
 800db46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db4a:	e000      	b.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800db4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10b      	bne.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db56:	4b4b      	ldr	r3, [pc, #300]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800db5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db66:	4a47      	ldr	r2, [pc, #284]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db68:	430b      	orrs	r3, r1
 800db6a:	6593      	str	r3, [r2, #88]	@ 0x58
 800db6c:	e003      	b.n	800db76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800db76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800db82:	67bb      	str	r3, [r7, #120]	@ 0x78
 800db84:	2300      	movs	r3, #0
 800db86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800db8c:	460b      	mov	r3, r1
 800db8e:	4313      	orrs	r3, r2
 800db90:	d03b      	beq.n	800dc0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800db92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800db9e:	d01f      	beq.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800dba0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dba4:	d818      	bhi.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800dba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbaa:	d003      	beq.n	800dbb4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800dbac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbb0:	d007      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800dbb2:	e011      	b.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbb4:	4b33      	ldr	r3, [pc, #204]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb8:	4a32      	ldr	r2, [pc, #200]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800dbc0:	e00f      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbc6:	3328      	adds	r3, #40	@ 0x28
 800dbc8:	2101      	movs	r1, #1
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f001 fc6a 	bl	800f4a4 <RCCEx_PLL3_Config>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800dbd6:	e004      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dbde:	e000      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800dbe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d10b      	bne.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dbea:	4b26      	ldr	r3, [pc, #152]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbfa:	4a22      	ldr	r2, [pc, #136]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbfc:	430b      	orrs	r3, r1
 800dbfe:	6553      	str	r3, [r2, #84]	@ 0x54
 800dc00:	e003      	b.n	800dc0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800dc16:	673b      	str	r3, [r7, #112]	@ 0x70
 800dc18:	2300      	movs	r3, #0
 800dc1a:	677b      	str	r3, [r7, #116]	@ 0x74
 800dc1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800dc20:	460b      	mov	r3, r1
 800dc22:	4313      	orrs	r3, r2
 800dc24:	d034      	beq.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d003      	beq.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800dc30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc34:	d007      	beq.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800dc36:	e011      	b.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc38:	4b12      	ldr	r3, [pc, #72]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc3c:	4a11      	ldr	r2, [pc, #68]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc44:	e00e      	b.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc4a:	3308      	adds	r3, #8
 800dc4c:	2102      	movs	r1, #2
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f001 fb76 	bl	800f340 <RCCEx_PLL2_Config>
 800dc54:	4603      	mov	r3, r0
 800dc56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc5a:	e003      	b.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10d      	bne.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dc6c:	4b05      	ldr	r3, [pc, #20]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc7a:	4a02      	ldr	r2, [pc, #8]	@ (800dc84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc7c:	430b      	orrs	r3, r1
 800dc7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dc80:	e006      	b.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800dc82:	bf00      	nop
 800dc84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800dc9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc9e:	2300      	movs	r3, #0
 800dca0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dca2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dca6:	460b      	mov	r3, r1
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	d00c      	beq.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcb0:	3328      	adds	r3, #40	@ 0x28
 800dcb2:	2102      	movs	r1, #2
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f001 fbf5 	bl	800f4a4 <RCCEx_PLL3_Config>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dcc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800dcd2:	663b      	str	r3, [r7, #96]	@ 0x60
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	667b      	str	r3, [r7, #100]	@ 0x64
 800dcd8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4313      	orrs	r3, r2
 800dce0:	d038      	beq.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcee:	d018      	beq.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800dcf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcf4:	d811      	bhi.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dcf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcfa:	d014      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800dcfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd00:	d80b      	bhi.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d011      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800dd06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd0a:	d106      	bne.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd0c:	4bc3      	ldr	r3, [pc, #780]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd10:	4ac2      	ldr	r2, [pc, #776]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dd18:	e008      	b.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd20:	e004      	b.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd22:	bf00      	nop
 800dd24:	e002      	b.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd26:	bf00      	nop
 800dd28:	e000      	b.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d10b      	bne.n	800dd4c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dd34:	4bb9      	ldr	r3, [pc, #740]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd38:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dd3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd44:	4ab5      	ldr	r2, [pc, #724]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd46:	430b      	orrs	r3, r1
 800dd48:	6553      	str	r3, [r2, #84]	@ 0x54
 800dd4a:	e003      	b.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dd60:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd62:	2300      	movs	r3, #0
 800dd64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	d009      	beq.n	800dd84 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dd70:	4baa      	ldr	r3, [pc, #680]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd74:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd7e:	4aa7      	ldr	r2, [pc, #668]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd80:	430b      	orrs	r3, r1
 800dd82:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dd84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800dd90:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd92:	2300      	movs	r3, #0
 800dd94:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	d00a      	beq.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800dda0:	4b9e      	ldr	r3, [pc, #632]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800dda8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ddb0:	4a9a      	ldr	r2, [pc, #616]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddb2:	430b      	orrs	r3, r1
 800ddb4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ddb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ddc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddc8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ddcc:	460b      	mov	r3, r1
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	d009      	beq.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ddd2:	4b92      	ldr	r3, [pc, #584]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddd6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ddda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dde0:	4a8e      	ldr	r2, [pc, #568]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dde2:	430b      	orrs	r3, r1
 800dde4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800dde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ddf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	647b      	str	r3, [r7, #68]	@ 0x44
 800ddf8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4313      	orrs	r3, r2
 800de00:	d00e      	beq.n	800de20 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800de02:	4b86      	ldr	r3, [pc, #536]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de04:	691b      	ldr	r3, [r3, #16]
 800de06:	4a85      	ldr	r2, [pc, #532]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de08:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800de0c:	6113      	str	r3, [r2, #16]
 800de0e:	4b83      	ldr	r3, [pc, #524]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de10:	6919      	ldr	r1, [r3, #16]
 800de12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800de1a:	4a80      	ldr	r2, [pc, #512]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de1c:	430b      	orrs	r3, r1
 800de1e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800de20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800de2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800de2e:	2300      	movs	r3, #0
 800de30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de32:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800de36:	460b      	mov	r3, r1
 800de38:	4313      	orrs	r3, r2
 800de3a:	d009      	beq.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800de3c:	4b77      	ldr	r3, [pc, #476]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de40:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800de44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de4a:	4a74      	ldr	r2, [pc, #464]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de4c:	430b      	orrs	r3, r1
 800de4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800de50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de58:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800de5c:	633b      	str	r3, [r7, #48]	@ 0x30
 800de5e:	2300      	movs	r3, #0
 800de60:	637b      	str	r3, [r7, #52]	@ 0x34
 800de62:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800de66:	460b      	mov	r3, r1
 800de68:	4313      	orrs	r3, r2
 800de6a:	d00a      	beq.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800de6c:	4b6b      	ldr	r3, [pc, #428]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de70:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800de74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de7c:	4a67      	ldr	r2, [pc, #412]	@ (800e01c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de7e:	430b      	orrs	r3, r1
 800de80:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800de82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	2100      	movs	r1, #0
 800de8c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800de8e:	f003 0301 	and.w	r3, r3, #1
 800de92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de94:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800de98:	460b      	mov	r3, r1
 800de9a:	4313      	orrs	r3, r2
 800de9c:	d011      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea2:	3308      	adds	r3, #8
 800dea4:	2100      	movs	r1, #0
 800dea6:	4618      	mov	r0, r3
 800dea8:	f001 fa4a 	bl	800f340 <RCCEx_PLL2_Config>
 800deac:	4603      	mov	r3, r0
 800deae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800deb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800debe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800dec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deca:	2100      	movs	r1, #0
 800decc:	6239      	str	r1, [r7, #32]
 800dece:	f003 0302 	and.w	r3, r3, #2
 800ded2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ded4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ded8:	460b      	mov	r3, r1
 800deda:	4313      	orrs	r3, r2
 800dedc:	d011      	beq.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dee2:	3308      	adds	r3, #8
 800dee4:	2101      	movs	r1, #1
 800dee6:	4618      	mov	r0, r3
 800dee8:	f001 fa2a 	bl	800f340 <RCCEx_PLL2_Config>
 800deec:	4603      	mov	r3, r0
 800deee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800def2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800def6:	2b00      	cmp	r3, #0
 800def8:	d003      	beq.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800defa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800defe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800df02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	2100      	movs	r1, #0
 800df0c:	61b9      	str	r1, [r7, #24]
 800df0e:	f003 0304 	and.w	r3, r3, #4
 800df12:	61fb      	str	r3, [r7, #28]
 800df14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800df18:	460b      	mov	r3, r1
 800df1a:	4313      	orrs	r3, r2
 800df1c:	d011      	beq.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df22:	3308      	adds	r3, #8
 800df24:	2102      	movs	r1, #2
 800df26:	4618      	mov	r0, r3
 800df28:	f001 fa0a 	bl	800f340 <RCCEx_PLL2_Config>
 800df2c:	4603      	mov	r3, r0
 800df2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800df32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df36:	2b00      	cmp	r3, #0
 800df38:	d003      	beq.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800df42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4a:	2100      	movs	r1, #0
 800df4c:	6139      	str	r1, [r7, #16]
 800df4e:	f003 0308 	and.w	r3, r3, #8
 800df52:	617b      	str	r3, [r7, #20]
 800df54:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800df58:	460b      	mov	r3, r1
 800df5a:	4313      	orrs	r3, r2
 800df5c:	d011      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df62:	3328      	adds	r3, #40	@ 0x28
 800df64:	2100      	movs	r1, #0
 800df66:	4618      	mov	r0, r3
 800df68:	f001 fa9c 	bl	800f4a4 <RCCEx_PLL3_Config>
 800df6c:	4603      	mov	r3, r0
 800df6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800df72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df76:	2b00      	cmp	r3, #0
 800df78:	d003      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800df82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	2100      	movs	r1, #0
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	f003 0310 	and.w	r3, r3, #16
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800df98:	460b      	mov	r3, r1
 800df9a:	4313      	orrs	r3, r2
 800df9c:	d011      	beq.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfa2:	3328      	adds	r3, #40	@ 0x28
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f001 fa7c 	bl	800f4a4 <RCCEx_PLL3_Config>
 800dfac:	4603      	mov	r3, r0
 800dfae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dfb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d003      	beq.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dfc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	2100      	movs	r1, #0
 800dfcc:	6039      	str	r1, [r7, #0]
 800dfce:	f003 0320 	and.w	r3, r3, #32
 800dfd2:	607b      	str	r3, [r7, #4]
 800dfd4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	d011      	beq.n	800e002 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfe2:	3328      	adds	r3, #40	@ 0x28
 800dfe4:	2102      	movs	r1, #2
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f001 fa5c 	bl	800f4a4 <RCCEx_PLL3_Config>
 800dfec:	4603      	mov	r3, r0
 800dfee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d003      	beq.n	800e002 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dffe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800e002:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e00a:	2300      	movs	r3, #0
 800e00c:	e000      	b.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
}
 800e010:	4618      	mov	r0, r3
 800e012:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800e016:	46bd      	mov	sp, r7
 800e018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e01c:	58024400 	.word	0x58024400

0800e020 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b090      	sub	sp, #64	@ 0x40
 800e024:	af00      	add	r7, sp, #0
 800e026:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e02a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e02e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800e032:	430b      	orrs	r3, r1
 800e034:	f040 8094 	bne.w	800e160 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e038:	4b9e      	ldr	r3, [pc, #632]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e03c:	f003 0307 	and.w	r3, r3, #7
 800e040:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e044:	2b04      	cmp	r3, #4
 800e046:	f200 8087 	bhi.w	800e158 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e04a:	a201      	add	r2, pc, #4	@ (adr r2, 800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e050:	0800e065 	.word	0x0800e065
 800e054:	0800e08d 	.word	0x0800e08d
 800e058:	0800e0b5 	.word	0x0800e0b5
 800e05c:	0800e151 	.word	0x0800e151
 800e060:	0800e0dd 	.word	0x0800e0dd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e064:	4b93      	ldr	r3, [pc, #588]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e06c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e070:	d108      	bne.n	800e084 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e076:	4618      	mov	r0, r3
 800e078:	f001 f810 	bl	800f09c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e080:	f000 bd45 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e084:	2300      	movs	r3, #0
 800e086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e088:	f000 bd41 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e08c:	4b89      	ldr	r3, [pc, #548]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e094:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e098:	d108      	bne.n	800e0ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e09a:	f107 0318 	add.w	r3, r7, #24
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f000 fd54 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0a8:	f000 bd31 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0b0:	f000 bd2d 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e0b4:	4b7f      	ldr	r3, [pc, #508]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e0c0:	d108      	bne.n	800e0d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0c2:	f107 030c 	add.w	r3, r7, #12
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f000 fe94 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0d0:	f000 bd1d 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0d8:	f000 bd19 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e0dc:	4b75      	ldr	r3, [pc, #468]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e0e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e0e6:	4b73      	ldr	r3, [pc, #460]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f003 0304 	and.w	r3, r3, #4
 800e0ee:	2b04      	cmp	r3, #4
 800e0f0:	d10c      	bne.n	800e10c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d109      	bne.n	800e10c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e0f8:	4b6e      	ldr	r3, [pc, #440]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	08db      	lsrs	r3, r3, #3
 800e0fe:	f003 0303 	and.w	r3, r3, #3
 800e102:	4a6d      	ldr	r2, [pc, #436]	@ (800e2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e104:	fa22 f303 	lsr.w	r3, r2, r3
 800e108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e10a:	e01f      	b.n	800e14c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e10c:	4b69      	ldr	r3, [pc, #420]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e118:	d106      	bne.n	800e128 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e11c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e120:	d102      	bne.n	800e128 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e122:	4b66      	ldr	r3, [pc, #408]	@ (800e2bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e126:	e011      	b.n	800e14c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e128:	4b62      	ldr	r3, [pc, #392]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e130:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e134:	d106      	bne.n	800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e13c:	d102      	bne.n	800e144 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e13e:	4b60      	ldr	r3, [pc, #384]	@ (800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e142:	e003      	b.n	800e14c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e144:	2300      	movs	r3, #0
 800e146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e148:	f000 bce1 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e14c:	f000 bcdf 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e150:	4b5c      	ldr	r3, [pc, #368]	@ (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e154:	f000 bcdb 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e158:	2300      	movs	r3, #0
 800e15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e15c:	f000 bcd7 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800e160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e164:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800e168:	430b      	orrs	r3, r1
 800e16a:	f040 80ad 	bne.w	800e2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800e16e:	4b51      	ldr	r3, [pc, #324]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e172:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800e176:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e17e:	d056      	beq.n	800e22e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e186:	f200 8090 	bhi.w	800e2aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18c:	2bc0      	cmp	r3, #192	@ 0xc0
 800e18e:	f000 8088 	beq.w	800e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800e192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e194:	2bc0      	cmp	r3, #192	@ 0xc0
 800e196:	f200 8088 	bhi.w	800e2aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19c:	2b80      	cmp	r3, #128	@ 0x80
 800e19e:	d032      	beq.n	800e206 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a2:	2b80      	cmp	r3, #128	@ 0x80
 800e1a4:	f200 8081 	bhi.w	800e2aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d003      	beq.n	800e1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b0:	2b40      	cmp	r3, #64	@ 0x40
 800e1b2:	d014      	beq.n	800e1de <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800e1b4:	e079      	b.n	800e2aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e1b6:	4b3f      	ldr	r3, [pc, #252]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e1be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e1c2:	d108      	bne.n	800e1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e1c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 ff67 	bl	800f09c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1d2:	f000 bc9c 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1da:	f000 bc98 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1de:	4b35      	ldr	r3, [pc, #212]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e1ea:	d108      	bne.n	800e1fe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ec:	f107 0318 	add.w	r3, r7, #24
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f000 fcab 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1fa:	f000 bc88 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e202:	f000 bc84 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e206:	4b2b      	ldr	r3, [pc, #172]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e20e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e212:	d108      	bne.n	800e226 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e214:	f107 030c 	add.w	r3, r7, #12
 800e218:	4618      	mov	r0, r3
 800e21a:	f000 fdeb 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e222:	f000 bc74 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e226:	2300      	movs	r3, #0
 800e228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e22a:	f000 bc70 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e22e:	4b21      	ldr	r3, [pc, #132]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e232:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e236:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e238:	4b1e      	ldr	r3, [pc, #120]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b04      	cmp	r3, #4
 800e242:	d10c      	bne.n	800e25e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800e244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e246:	2b00      	cmp	r3, #0
 800e248:	d109      	bne.n	800e25e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e24a:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	08db      	lsrs	r3, r3, #3
 800e250:	f003 0303 	and.w	r3, r3, #3
 800e254:	4a18      	ldr	r2, [pc, #96]	@ (800e2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e256:	fa22 f303 	lsr.w	r3, r2, r3
 800e25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e25c:	e01f      	b.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e25e:	4b15      	ldr	r3, [pc, #84]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e26a:	d106      	bne.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e26e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e272:	d102      	bne.n	800e27a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e274:	4b11      	ldr	r3, [pc, #68]	@ (800e2bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e278:	e011      	b.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e27a:	4b0e      	ldr	r3, [pc, #56]	@ (800e2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e286:	d106      	bne.n	800e296 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800e288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e28a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e28e:	d102      	bne.n	800e296 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e290:	4b0b      	ldr	r3, [pc, #44]	@ (800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e294:	e003      	b.n	800e29e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e29a:	f000 bc38 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e29e:	f000 bc36 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e2a2:	4b08      	ldr	r3, [pc, #32]	@ (800e2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2a6:	f000 bc32 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2ae:	f000 bc2e 	b.w	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2b2:	bf00      	nop
 800e2b4:	58024400 	.word	0x58024400
 800e2b8:	03d09000 	.word	0x03d09000
 800e2bc:	003d0900 	.word	0x003d0900
 800e2c0:	017d7840 	.word	0x017d7840
 800e2c4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2cc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e2d0:	430b      	orrs	r3, r1
 800e2d2:	f040 809c 	bne.w	800e40e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e2d6:	4b9e      	ldr	r3, [pc, #632]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e2d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800e2de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e2e6:	d054      	beq.n	800e392 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e2ee:	f200 808b 	bhi.w	800e408 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e2f8:	f000 8083 	beq.w	800e402 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e302:	f200 8081 	bhi.w	800e408 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e308:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e30c:	d02f      	beq.n	800e36e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e314:	d878      	bhi.n	800e408 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d004      	beq.n	800e326 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e322:	d012      	beq.n	800e34a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e324:	e070      	b.n	800e408 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e326:	4b8a      	ldr	r3, [pc, #552]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e32e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e332:	d107      	bne.n	800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e338:	4618      	mov	r0, r3
 800e33a:	f000 feaf 	bl	800f09c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e342:	e3e4      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e348:	e3e1      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e34a:	4b81      	ldr	r3, [pc, #516]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e356:	d107      	bne.n	800e368 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e358:	f107 0318 	add.w	r3, r7, #24
 800e35c:	4618      	mov	r0, r3
 800e35e:	f000 fbf5 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e366:	e3d2      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e368:	2300      	movs	r3, #0
 800e36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e36c:	e3cf      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e36e:	4b78      	ldr	r3, [pc, #480]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e37a:	d107      	bne.n	800e38c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e37c:	f107 030c 	add.w	r3, r7, #12
 800e380:	4618      	mov	r0, r3
 800e382:	f000 fd37 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e38a:	e3c0      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e38c:	2300      	movs	r3, #0
 800e38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e390:	e3bd      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e392:	4b6f      	ldr	r3, [pc, #444]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e396:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e39a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e39c:	4b6c      	ldr	r3, [pc, #432]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b04      	cmp	r3, #4
 800e3a6:	d10c      	bne.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d109      	bne.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3ae:	4b68      	ldr	r3, [pc, #416]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	08db      	lsrs	r3, r3, #3
 800e3b4:	f003 0303 	and.w	r3, r3, #3
 800e3b8:	4a66      	ldr	r2, [pc, #408]	@ (800e554 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800e3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3c0:	e01e      	b.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e3c2:	4b63      	ldr	r3, [pc, #396]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3ce:	d106      	bne.n	800e3de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3d6:	d102      	bne.n	800e3de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e3d8:	4b5f      	ldr	r3, [pc, #380]	@ (800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3dc:	e010      	b.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e3de:	4b5c      	ldr	r3, [pc, #368]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3ea:	d106      	bne.n	800e3fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e3f2:	d102      	bne.n	800e3fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e3f4:	4b59      	ldr	r3, [pc, #356]	@ (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3f8:	e002      	b.n	800e400 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e3fe:	e386      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e400:	e385      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e402:	4b57      	ldr	r3, [pc, #348]	@ (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e406:	e382      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e408:	2300      	movs	r3, #0
 800e40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e40c:	e37f      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e412:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800e416:	430b      	orrs	r3, r1
 800e418:	f040 80a7 	bne.w	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e41c:	4b4c      	ldr	r3, [pc, #304]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e41e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e420:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800e424:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e42c:	d055      	beq.n	800e4da <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e430:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e434:	f200 8096 	bhi.w	800e564 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e43e:	f000 8084 	beq.w	800e54a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e444:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e448:	f200 808c 	bhi.w	800e564 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e452:	d030      	beq.n	800e4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e456:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e45a:	f200 8083 	bhi.w	800e564 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e460:	2b00      	cmp	r3, #0
 800e462:	d004      	beq.n	800e46e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e466:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e46a:	d012      	beq.n	800e492 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e46c:	e07a      	b.n	800e564 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e46e:	4b38      	ldr	r3, [pc, #224]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e47a:	d107      	bne.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e47c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e480:	4618      	mov	r0, r3
 800e482:	f000 fe0b 	bl	800f09c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e48a:	e340      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e48c:	2300      	movs	r3, #0
 800e48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e490:	e33d      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e492:	4b2f      	ldr	r3, [pc, #188]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e49a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e49e:	d107      	bne.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4a0:	f107 0318 	add.w	r3, r7, #24
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 fb51 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4ae:	e32e      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4b4:	e32b      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e4b6:	4b26      	ldr	r3, [pc, #152]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e4be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4c2:	d107      	bne.n	800e4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4c4:	f107 030c 	add.w	r3, r7, #12
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f000 fc93 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4d2:	e31c      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4d8:	e319      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e4da:	4b1d      	ldr	r3, [pc, #116]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e4e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e4e4:	4b1a      	ldr	r3, [pc, #104]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f003 0304 	and.w	r3, r3, #4
 800e4ec:	2b04      	cmp	r3, #4
 800e4ee:	d10c      	bne.n	800e50a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d109      	bne.n	800e50a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4f6:	4b16      	ldr	r3, [pc, #88]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	08db      	lsrs	r3, r3, #3
 800e4fc:	f003 0303 	and.w	r3, r3, #3
 800e500:	4a14      	ldr	r2, [pc, #80]	@ (800e554 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e502:	fa22 f303 	lsr.w	r3, r2, r3
 800e506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e508:	e01e      	b.n	800e548 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e50a:	4b11      	ldr	r3, [pc, #68]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e516:	d106      	bne.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e51a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e51e:	d102      	bne.n	800e526 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e520:	4b0d      	ldr	r3, [pc, #52]	@ (800e558 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e524:	e010      	b.n	800e548 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e526:	4b0a      	ldr	r3, [pc, #40]	@ (800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e52e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e532:	d106      	bne.n	800e542 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e53a:	d102      	bne.n	800e542 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e53c:	4b07      	ldr	r3, [pc, #28]	@ (800e55c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e540:	e002      	b.n	800e548 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e542:	2300      	movs	r3, #0
 800e544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e546:	e2e2      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e548:	e2e1      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e54a:	4b05      	ldr	r3, [pc, #20]	@ (800e560 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e54e:	e2de      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e550:	58024400 	.word	0x58024400
 800e554:	03d09000 	.word	0x03d09000
 800e558:	003d0900 	.word	0x003d0900
 800e55c:	017d7840 	.word	0x017d7840
 800e560:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e564:	2300      	movs	r3, #0
 800e566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e568:	e2d1      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e56a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e56e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800e572:	430b      	orrs	r3, r1
 800e574:	f040 809c 	bne.w	800e6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e578:	4b93      	ldr	r3, [pc, #588]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e57a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e57c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800e580:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e584:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e588:	d054      	beq.n	800e634 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e58c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e590:	f200 808b 	bhi.w	800e6aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e596:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e59a:	f000 8083 	beq.w	800e6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e5a4:	f200 8081 	bhi.w	800e6aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5ae:	d02f      	beq.n	800e610 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5b6:	d878      	bhi.n	800e6aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d004      	beq.n	800e5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5c4:	d012      	beq.n	800e5ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e5c6:	e070      	b.n	800e6aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e5c8:	4b7f      	ldr	r3, [pc, #508]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e5d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e5d4:	d107      	bne.n	800e5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e5d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f000 fd5e 	bl	800f09c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5e4:	e293      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5ea:	e290      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e5ec:	4b76      	ldr	r3, [pc, #472]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e5f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e5f8:	d107      	bne.n	800e60a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5fa:	f107 0318 	add.w	r3, r7, #24
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 faa4 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e608:	e281      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e60e:	e27e      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e610:	4b6d      	ldr	r3, [pc, #436]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e61c:	d107      	bne.n	800e62e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e61e:	f107 030c 	add.w	r3, r7, #12
 800e622:	4618      	mov	r0, r3
 800e624:	f000 fbe6 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e62c:	e26f      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e62e:	2300      	movs	r3, #0
 800e630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e632:	e26c      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e634:	4b64      	ldr	r3, [pc, #400]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e638:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e63c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e63e:	4b62      	ldr	r3, [pc, #392]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f003 0304 	and.w	r3, r3, #4
 800e646:	2b04      	cmp	r3, #4
 800e648:	d10c      	bne.n	800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d109      	bne.n	800e664 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e650:	4b5d      	ldr	r3, [pc, #372]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	08db      	lsrs	r3, r3, #3
 800e656:	f003 0303 	and.w	r3, r3, #3
 800e65a:	4a5c      	ldr	r2, [pc, #368]	@ (800e7cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e65c:	fa22 f303 	lsr.w	r3, r2, r3
 800e660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e662:	e01e      	b.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e664:	4b58      	ldr	r3, [pc, #352]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e66c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e670:	d106      	bne.n	800e680 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e674:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e678:	d102      	bne.n	800e680 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e67a:	4b55      	ldr	r3, [pc, #340]	@ (800e7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e67e:	e010      	b.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e680:	4b51      	ldr	r3, [pc, #324]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e68c:	d106      	bne.n	800e69c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e694:	d102      	bne.n	800e69c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e696:	4b4f      	ldr	r3, [pc, #316]	@ (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e69a:	e002      	b.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e69c:	2300      	movs	r3, #0
 800e69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e6a0:	e235      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e6a2:	e234      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e6a4:	4b4c      	ldr	r3, [pc, #304]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6a8:	e231      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6ae:	e22e      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e6b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6b4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800e6b8:	430b      	orrs	r3, r1
 800e6ba:	f040 808f 	bne.w	800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e6be:	4b42      	ldr	r3, [pc, #264]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e6c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6c2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e6c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6ce:	d06b      	beq.n	800e7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e6d6:	d874      	bhi.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e6de:	d056      	beq.n	800e78e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e6e6:	d86c      	bhi.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6ee:	d03b      	beq.n	800e768 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e6f6:	d864      	bhi.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6fe:	d021      	beq.n	800e744 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e706:	d85c      	bhi.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d004      	beq.n	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e714:	d004      	beq.n	800e720 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e716:	e054      	b.n	800e7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e718:	f7fe fa4c 	bl	800cbb4 <HAL_RCC_GetPCLK1Freq>
 800e71c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e71e:	e1f6      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e720:	4b29      	ldr	r3, [pc, #164]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e72c:	d107      	bne.n	800e73e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e72e:	f107 0318 	add.w	r3, r7, #24
 800e732:	4618      	mov	r0, r3
 800e734:	f000 fa0a 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e73c:	e1e7      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e73e:	2300      	movs	r3, #0
 800e740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e742:	e1e4      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e744:	4b20      	ldr	r3, [pc, #128]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e74c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e750:	d107      	bne.n	800e762 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e752:	f107 030c 	add.w	r3, r7, #12
 800e756:	4618      	mov	r0, r3
 800e758:	f000 fb4c 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e760:	e1d5      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e766:	e1d2      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e768:	4b17      	ldr	r3, [pc, #92]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f003 0304 	and.w	r3, r3, #4
 800e770:	2b04      	cmp	r3, #4
 800e772:	d109      	bne.n	800e788 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e774:	4b14      	ldr	r3, [pc, #80]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	08db      	lsrs	r3, r3, #3
 800e77a:	f003 0303 	and.w	r3, r3, #3
 800e77e:	4a13      	ldr	r2, [pc, #76]	@ (800e7cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e780:	fa22 f303 	lsr.w	r3, r2, r3
 800e784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e786:	e1c2      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e788:	2300      	movs	r3, #0
 800e78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e78c:	e1bf      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e78e:	4b0e      	ldr	r3, [pc, #56]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e79a:	d102      	bne.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e79c:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7a0:	e1b5      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e7a6:	e1b2      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e7a8:	4b07      	ldr	r3, [pc, #28]	@ (800e7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7b4:	d102      	bne.n	800e7bc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e7b6:	4b07      	ldr	r3, [pc, #28]	@ (800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7ba:	e1a8      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e7c0:	e1a5      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e7c6:	e1a2      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e7c8:	58024400 	.word	0x58024400
 800e7cc:	03d09000 	.word	0x03d09000
 800e7d0:	003d0900 	.word	0x003d0900
 800e7d4:	017d7840 	.word	0x017d7840
 800e7d8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e7dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7e0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800e7e4:	430b      	orrs	r3, r1
 800e7e6:	d173      	bne.n	800e8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e7e8:	4b9c      	ldr	r3, [pc, #624]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e7ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e7f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7f8:	d02f      	beq.n	800e85a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e800:	d863      	bhi.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e804:	2b00      	cmp	r3, #0
 800e806:	d004      	beq.n	800e812 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e80a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e80e:	d012      	beq.n	800e836 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e810:	e05b      	b.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e812:	4b92      	ldr	r3, [pc, #584]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e81a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e81e:	d107      	bne.n	800e830 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e820:	f107 0318 	add.w	r3, r7, #24
 800e824:	4618      	mov	r0, r3
 800e826:	f000 f991 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e82e:	e16e      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e834:	e16b      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e836:	4b89      	ldr	r3, [pc, #548]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e83e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e842:	d107      	bne.n	800e854 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e844:	f107 030c 	add.w	r3, r7, #12
 800e848:	4618      	mov	r0, r3
 800e84a:	f000 fad3 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e852:	e15c      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e858:	e159      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e85a:	4b80      	ldr	r3, [pc, #512]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e85c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e85e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e862:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e864:	4b7d      	ldr	r3, [pc, #500]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f003 0304 	and.w	r3, r3, #4
 800e86c:	2b04      	cmp	r3, #4
 800e86e:	d10c      	bne.n	800e88a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e872:	2b00      	cmp	r3, #0
 800e874:	d109      	bne.n	800e88a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e876:	4b79      	ldr	r3, [pc, #484]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	08db      	lsrs	r3, r3, #3
 800e87c:	f003 0303 	and.w	r3, r3, #3
 800e880:	4a77      	ldr	r2, [pc, #476]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e882:	fa22 f303 	lsr.w	r3, r2, r3
 800e886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e888:	e01e      	b.n	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e88a:	4b74      	ldr	r3, [pc, #464]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e896:	d106      	bne.n	800e8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e89a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e89e:	d102      	bne.n	800e8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e8a0:	4b70      	ldr	r3, [pc, #448]	@ (800ea64 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8a4:	e010      	b.n	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e8a6:	4b6d      	ldr	r3, [pc, #436]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8b2:	d106      	bne.n	800e8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8ba:	d102      	bne.n	800e8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e8bc:	4b6a      	ldr	r3, [pc, #424]	@ (800ea68 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8c0:	e002      	b.n	800e8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e8c6:	e122      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e8c8:	e121      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8ce:	e11e      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8d4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800e8d8:	430b      	orrs	r3, r1
 800e8da:	d133      	bne.n	800e944 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e8dc:	4b5f      	ldr	r3, [pc, #380]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e8e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d004      	beq.n	800e8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8f2:	d012      	beq.n	800e91a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e8f4:	e023      	b.n	800e93e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e8f6:	4b59      	ldr	r3, [pc, #356]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e902:	d107      	bne.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 fbc7 	bl	800f09c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e912:	e0fc      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e918:	e0f9      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e91a:	4b50      	ldr	r3, [pc, #320]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e926:	d107      	bne.n	800e938 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e928:	f107 0318 	add.w	r3, r7, #24
 800e92c:	4618      	mov	r0, r3
 800e92e:	f000 f90d 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e932:	6a3b      	ldr	r3, [r7, #32]
 800e934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e936:	e0ea      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e93c:	e0e7      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e93e:	2300      	movs	r3, #0
 800e940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e942:	e0e4      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e944:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e948:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800e94c:	430b      	orrs	r3, r1
 800e94e:	f040 808d 	bne.w	800ea6c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e952:	4b42      	ldr	r3, [pc, #264]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e956:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800e95a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e95e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e962:	d06b      	beq.n	800ea3c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e96a:	d874      	bhi.n	800ea56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e96e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e972:	d056      	beq.n	800ea22 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e97a:	d86c      	bhi.n	800ea56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e97e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e982:	d03b      	beq.n	800e9fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e986:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e98a:	d864      	bhi.n	800ea56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e98e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e992:	d021      	beq.n	800e9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e99a:	d85c      	bhi.n	800ea56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d004      	beq.n	800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9a8:	d004      	beq.n	800e9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e9aa:	e054      	b.n	800ea56 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e9ac:	f000 f8b8 	bl	800eb20 <HAL_RCCEx_GetD3PCLK1Freq>
 800e9b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e9b2:	e0ac      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e9b4:	4b29      	ldr	r3, [pc, #164]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e9bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e9c0:	d107      	bne.n	800e9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9c2:	f107 0318 	add.w	r3, r7, #24
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f000 f8c0 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9d0:	e09d      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e9d6:	e09a      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e9d8:	4b20      	ldr	r3, [pc, #128]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e9e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9e4:	d107      	bne.n	800e9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9e6:	f107 030c 	add.w	r3, r7, #12
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f000 fa02 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9f4:	e08b      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e9fa:	e088      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e9fc:	4b17      	ldr	r3, [pc, #92]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f003 0304 	and.w	r3, r3, #4
 800ea04:	2b04      	cmp	r3, #4
 800ea06:	d109      	bne.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea08:	4b14      	ldr	r3, [pc, #80]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	08db      	lsrs	r3, r3, #3
 800ea0e:	f003 0303 	and.w	r3, r3, #3
 800ea12:	4a13      	ldr	r2, [pc, #76]	@ (800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ea14:	fa22 f303 	lsr.w	r3, r2, r3
 800ea18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea1a:	e078      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea20:	e075      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ea22:	4b0e      	ldr	r3, [pc, #56]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea2e:	d102      	bne.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ea30:	4b0c      	ldr	r3, [pc, #48]	@ (800ea64 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ea32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea34:	e06b      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea3a:	e068      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ea3c:	4b07      	ldr	r3, [pc, #28]	@ (800ea5c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea48:	d102      	bne.n	800ea50 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ea4a:	4b07      	ldr	r3, [pc, #28]	@ (800ea68 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ea4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea4e:	e05e      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea54:	e05b      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea5a:	e058      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ea5c:	58024400 	.word	0x58024400
 800ea60:	03d09000 	.word	0x03d09000
 800ea64:	003d0900 	.word	0x003d0900
 800ea68:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ea6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea70:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ea74:	430b      	orrs	r3, r1
 800ea76:	d148      	bne.n	800eb0a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ea78:	4b27      	ldr	r3, [pc, #156]	@ (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ea7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ea80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ea82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea88:	d02a      	beq.n	800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ea8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea90:	d838      	bhi.n	800eb04 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ea92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d004      	beq.n	800eaa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ea98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea9e:	d00d      	beq.n	800eabc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800eaa0:	e030      	b.n	800eb04 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eaa2:	4b1d      	ldr	r3, [pc, #116]	@ (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eaaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eaae:	d102      	bne.n	800eab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800eab0:	4b1a      	ldr	r3, [pc, #104]	@ (800eb1c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800eab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eab4:	e02b      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eaba:	e028      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eabc:	4b16      	ldr	r3, [pc, #88]	@ (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eac8:	d107      	bne.n	800eada <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eaca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 fae4 	bl	800f09c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ead4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ead8:	e019      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eade:	e016      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eae0:	4b0d      	ldr	r3, [pc, #52]	@ (800eb18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eae8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eaec:	d107      	bne.n	800eafe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaee:	f107 0318 	add.w	r3, r7, #24
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 f82a 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eafc:	e007      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb02:	e004      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eb04:	2300      	movs	r3, #0
 800eb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb08:	e001      	b.n	800eb0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800eb0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3740      	adds	r7, #64	@ 0x40
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	58024400 	.word	0x58024400
 800eb1c:	017d7840 	.word	0x017d7840

0800eb20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800eb24:	f7fe f816 	bl	800cb54 <HAL_RCC_GetHCLKFreq>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	4b06      	ldr	r3, [pc, #24]	@ (800eb44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800eb2c:	6a1b      	ldr	r3, [r3, #32]
 800eb2e:	091b      	lsrs	r3, r3, #4
 800eb30:	f003 0307 	and.w	r3, r3, #7
 800eb34:	4904      	ldr	r1, [pc, #16]	@ (800eb48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800eb36:	5ccb      	ldrb	r3, [r1, r3]
 800eb38:	f003 031f 	and.w	r3, r3, #31
 800eb3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	58024400 	.word	0x58024400
 800eb48:	080159fc 	.word	0x080159fc

0800eb4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b089      	sub	sp, #36	@ 0x24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb54:	4ba1      	ldr	r3, [pc, #644]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb58:	f003 0303 	and.w	r3, r3, #3
 800eb5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800eb5e:	4b9f      	ldr	r3, [pc, #636]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb62:	0b1b      	lsrs	r3, r3, #12
 800eb64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eb6a:	4b9c      	ldr	r3, [pc, #624]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb6e:	091b      	lsrs	r3, r3, #4
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800eb76:	4b99      	ldr	r3, [pc, #612]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb7a:	08db      	lsrs	r3, r3, #3
 800eb7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	fb02 f303 	mul.w	r3, r2, r3
 800eb86:	ee07 3a90 	vmov	s15, r3
 800eb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f000 8111 	beq.w	800edbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	f000 8083 	beq.w	800eca8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	2b02      	cmp	r3, #2
 800eba6:	f200 80a1 	bhi.w	800ecec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d056      	beq.n	800ec64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ebb6:	e099      	b.n	800ecec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebb8:	4b88      	ldr	r3, [pc, #544]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f003 0320 	and.w	r3, r3, #32
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d02d      	beq.n	800ec20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ebc4:	4b85      	ldr	r3, [pc, #532]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	08db      	lsrs	r3, r3, #3
 800ebca:	f003 0303 	and.w	r3, r3, #3
 800ebce:	4a84      	ldr	r2, [pc, #528]	@ (800ede0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ebd0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebd4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	ee07 3a90 	vmov	s15, r3
 800ebdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	ee07 3a90 	vmov	s15, r3
 800ebe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebee:	4b7b      	ldr	r3, [pc, #492]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebf6:	ee07 3a90 	vmov	s15, r3
 800ebfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ede4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ec1e:	e087      	b.n	800ed30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	ee07 3a90 	vmov	s15, r3
 800ec26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ede8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ec2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec32:	4b6a      	ldr	r3, [pc, #424]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec3a:	ee07 3a90 	vmov	s15, r3
 800ec3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ede4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec62:	e065      	b.n	800ed30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	ee07 3a90 	vmov	s15, r3
 800ec6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800edec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ec72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec76:	4b59      	ldr	r3, [pc, #356]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec7e:	ee07 3a90 	vmov	s15, r3
 800ec82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ede4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eca6:	e043      	b.n	800ed30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	ee07 3a90 	vmov	s15, r3
 800ecae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800edf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ecb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecba:	4b48      	ldr	r3, [pc, #288]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ecbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc2:	ee07 3a90 	vmov	s15, r3
 800ecc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecca:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ede4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ecd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ece2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ece6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecea:	e021      	b.n	800ed30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	ee07 3a90 	vmov	s15, r3
 800ecf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecf6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800edec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ecfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecfe:	4b37      	ldr	r3, [pc, #220]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed06:	ee07 3a90 	vmov	s15, r3
 800ed0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ede4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ed16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ed22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ed30:	4b2a      	ldr	r3, [pc, #168]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed34:	0a5b      	lsrs	r3, r3, #9
 800ed36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed3a:	ee07 3a90 	vmov	s15, r3
 800ed3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed56:	ee17 2a90 	vmov	r2, s15
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ed5e:	4b1f      	ldr	r3, [pc, #124]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed62:	0c1b      	lsrs	r3, r3, #16
 800ed64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed68:	ee07 3a90 	vmov	s15, r3
 800ed6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ed74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed84:	ee17 2a90 	vmov	r2, s15
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ed8c:	4b13      	ldr	r3, [pc, #76]	@ (800eddc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed90:	0e1b      	lsrs	r3, r3, #24
 800ed92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed96:	ee07 3a90 	vmov	s15, r3
 800ed9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eda2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eda6:	edd7 6a07 	vldr	s13, [r7, #28]
 800edaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edb2:	ee17 2a90 	vmov	r2, s15
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800edba:	e008      	b.n	800edce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	609a      	str	r2, [r3, #8]
}
 800edce:	bf00      	nop
 800edd0:	3724      	adds	r7, #36	@ 0x24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	58024400 	.word	0x58024400
 800ede0:	03d09000 	.word	0x03d09000
 800ede4:	46000000 	.word	0x46000000
 800ede8:	4c742400 	.word	0x4c742400
 800edec:	4a742400 	.word	0x4a742400
 800edf0:	4bbebc20 	.word	0x4bbebc20

0800edf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b089      	sub	sp, #36	@ 0x24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800edfc:	4ba1      	ldr	r3, [pc, #644]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800edfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee00:	f003 0303 	and.w	r3, r3, #3
 800ee04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ee06:	4b9f      	ldr	r3, [pc, #636]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee0a:	0d1b      	lsrs	r3, r3, #20
 800ee0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ee12:	4b9c      	ldr	r3, [pc, #624]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee16:	0a1b      	lsrs	r3, r3, #8
 800ee18:	f003 0301 	and.w	r3, r3, #1
 800ee1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ee1e:	4b99      	ldr	r3, [pc, #612]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee22:	08db      	lsrs	r3, r3, #3
 800ee24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	fb02 f303 	mul.w	r3, r2, r3
 800ee2e:	ee07 3a90 	vmov	s15, r3
 800ee32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	f000 8111 	beq.w	800f064 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	f000 8083 	beq.w	800ef50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	2b02      	cmp	r3, #2
 800ee4e:	f200 80a1 	bhi.w	800ef94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d003      	beq.n	800ee60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d056      	beq.n	800ef0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ee5e:	e099      	b.n	800ef94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee60:	4b88      	ldr	r3, [pc, #544]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 0320 	and.w	r3, r3, #32
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d02d      	beq.n	800eec8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee6c:	4b85      	ldr	r3, [pc, #532]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	08db      	lsrs	r3, r3, #3
 800ee72:	f003 0303 	and.w	r3, r3, #3
 800ee76:	4a84      	ldr	r2, [pc, #528]	@ (800f088 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ee78:	fa22 f303 	lsr.w	r3, r2, r3
 800ee7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	ee07 3a90 	vmov	s15, r3
 800ee84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	ee07 3a90 	vmov	s15, r3
 800ee8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee96:	4b7b      	ldr	r3, [pc, #492]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee9e:	ee07 3a90 	vmov	s15, r3
 800eea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eea6:	ed97 6a03 	vldr	s12, [r7, #12]
 800eeaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f08c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eeae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eeb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eeb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eeba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eec2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eec6:	e087      	b.n	800efd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	ee07 3a90 	vmov	s15, r3
 800eece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eed2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f090 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800eed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eeda:	4b6a      	ldr	r3, [pc, #424]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eee2:	ee07 3a90 	vmov	s15, r3
 800eee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeea:	ed97 6a03 	vldr	s12, [r7, #12]
 800eeee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f08c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eefa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eefe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef0a:	e065      	b.n	800efd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	ee07 3a90 	vmov	s15, r3
 800ef12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ef1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef1e:	4b59      	ldr	r3, [pc, #356]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef26:	ee07 3a90 	vmov	s15, r3
 800ef2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f08c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef4e:	e043      	b.n	800efd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	ee07 3a90 	vmov	s15, r3
 800ef56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f098 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ef5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef62:	4b48      	ldr	r3, [pc, #288]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef6a:	ee07 3a90 	vmov	s15, r3
 800ef6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f08c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ef86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef92:	e021      	b.n	800efd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	ee07 3a90 	vmov	s15, r3
 800ef9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800efa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efa6:	4b37      	ldr	r3, [pc, #220]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efae:	ee07 3a90 	vmov	s15, r3
 800efb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800efba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f08c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800efbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800efca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800efd8:	4b2a      	ldr	r3, [pc, #168]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efdc:	0a5b      	lsrs	r3, r3, #9
 800efde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efe2:	ee07 3a90 	vmov	s15, r3
 800efe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800efee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eff2:	edd7 6a07 	vldr	s13, [r7, #28]
 800eff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800effa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800effe:	ee17 2a90 	vmov	r2, s15
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f006:	4b1f      	ldr	r3, [pc, #124]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f00a:	0c1b      	lsrs	r3, r3, #16
 800f00c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f010:	ee07 3a90 	vmov	s15, r3
 800f014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f01c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f020:	edd7 6a07 	vldr	s13, [r7, #28]
 800f024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f02c:	ee17 2a90 	vmov	r2, s15
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f034:	4b13      	ldr	r3, [pc, #76]	@ (800f084 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f038:	0e1b      	lsrs	r3, r3, #24
 800f03a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f03e:	ee07 3a90 	vmov	s15, r3
 800f042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f04a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f04e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f05a:	ee17 2a90 	vmov	r2, s15
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f062:	e008      	b.n	800f076 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2200      	movs	r2, #0
 800f068:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	609a      	str	r2, [r3, #8]
}
 800f076:	bf00      	nop
 800f078:	3724      	adds	r7, #36	@ 0x24
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	58024400 	.word	0x58024400
 800f088:	03d09000 	.word	0x03d09000
 800f08c:	46000000 	.word	0x46000000
 800f090:	4c742400 	.word	0x4c742400
 800f094:	4a742400 	.word	0x4a742400
 800f098:	4bbebc20 	.word	0x4bbebc20

0800f09c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b089      	sub	sp, #36	@ 0x24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f0a4:	4ba0      	ldr	r3, [pc, #640]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0a8:	f003 0303 	and.w	r3, r3, #3
 800f0ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f0ae:	4b9e      	ldr	r3, [pc, #632]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0b2:	091b      	lsrs	r3, r3, #4
 800f0b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f0ba:	4b9b      	ldr	r3, [pc, #620]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0be:	f003 0301 	and.w	r3, r3, #1
 800f0c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f0c4:	4b98      	ldr	r3, [pc, #608]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0c8:	08db      	lsrs	r3, r3, #3
 800f0ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0ce:	693a      	ldr	r2, [r7, #16]
 800f0d0:	fb02 f303 	mul.w	r3, r2, r3
 800f0d4:	ee07 3a90 	vmov	s15, r3
 800f0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f000 8111 	beq.w	800f30a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	f000 8083 	beq.w	800f1f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	2b02      	cmp	r3, #2
 800f0f4:	f200 80a1 	bhi.w	800f23a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d056      	beq.n	800f1b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f104:	e099      	b.n	800f23a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f106:	4b88      	ldr	r3, [pc, #544]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f003 0320 	and.w	r3, r3, #32
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d02d      	beq.n	800f16e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f112:	4b85      	ldr	r3, [pc, #532]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	08db      	lsrs	r3, r3, #3
 800f118:	f003 0303 	and.w	r3, r3, #3
 800f11c:	4a83      	ldr	r2, [pc, #524]	@ (800f32c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f11e:	fa22 f303 	lsr.w	r3, r2, r3
 800f122:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	ee07 3a90 	vmov	s15, r3
 800f12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	ee07 3a90 	vmov	s15, r3
 800f134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f13c:	4b7a      	ldr	r3, [pc, #488]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f13e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f144:	ee07 3a90 	vmov	s15, r3
 800f148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f14c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f150:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800f330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f154:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f15c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f164:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f168:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f16c:	e087      	b.n	800f27e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	ee07 3a90 	vmov	s15, r3
 800f174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f178:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800f334 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f17c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f180:	4b69      	ldr	r3, [pc, #420]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f188:	ee07 3a90 	vmov	s15, r3
 800f18c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f190:	ed97 6a03 	vldr	s12, [r7, #12]
 800f194:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800f330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f19c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1b0:	e065      	b.n	800f27e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	ee07 3a90 	vmov	s15, r3
 800f1b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1bc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800f338 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f1c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1c4:	4b58      	ldr	r3, [pc, #352]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f1c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1cc:	ee07 3a90 	vmov	s15, r3
 800f1d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1d8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800f330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f1dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1f4:	e043      	b.n	800f27e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	ee07 3a90 	vmov	s15, r3
 800f1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f200:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800f33c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f208:	4b47      	ldr	r3, [pc, #284]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f20a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f210:	ee07 3a90 	vmov	s15, r3
 800f214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f218:	ed97 6a03 	vldr	s12, [r7, #12]
 800f21c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800f330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f22c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f230:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f234:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f238:	e021      	b.n	800f27e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	ee07 3a90 	vmov	s15, r3
 800f240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f244:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800f334 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f24c:	4b36      	ldr	r3, [pc, #216]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f254:	ee07 3a90 	vmov	s15, r3
 800f258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f25c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f260:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f330 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f26c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f274:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f278:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f27c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f27e:	4b2a      	ldr	r3, [pc, #168]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f282:	0a5b      	lsrs	r3, r3, #9
 800f284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f288:	ee07 3a90 	vmov	s15, r3
 800f28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f294:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f298:	edd7 6a07 	vldr	s13, [r7, #28]
 800f29c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2a4:	ee17 2a90 	vmov	r2, s15
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f2ac:	4b1e      	ldr	r3, [pc, #120]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2b0:	0c1b      	lsrs	r3, r3, #16
 800f2b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2b6:	ee07 3a90 	vmov	s15, r3
 800f2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f2c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2d2:	ee17 2a90 	vmov	r2, s15
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f2da:	4b13      	ldr	r3, [pc, #76]	@ (800f328 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2de:	0e1b      	lsrs	r3, r3, #24
 800f2e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2e4:	ee07 3a90 	vmov	s15, r3
 800f2e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f2f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f300:	ee17 2a90 	vmov	r2, s15
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f308:	e008      	b.n	800f31c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	609a      	str	r2, [r3, #8]
}
 800f31c:	bf00      	nop
 800f31e:	3724      	adds	r7, #36	@ 0x24
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	58024400 	.word	0x58024400
 800f32c:	03d09000 	.word	0x03d09000
 800f330:	46000000 	.word	0x46000000
 800f334:	4c742400 	.word	0x4c742400
 800f338:	4a742400 	.word	0x4a742400
 800f33c:	4bbebc20 	.word	0x4bbebc20

0800f340 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f34e:	4b53      	ldr	r3, [pc, #332]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f352:	f003 0303 	and.w	r3, r3, #3
 800f356:	2b03      	cmp	r3, #3
 800f358:	d101      	bne.n	800f35e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e099      	b.n	800f492 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f35e:	4b4f      	ldr	r3, [pc, #316]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4a4e      	ldr	r2, [pc, #312]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f364:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f36a:	f7f2 fcb5 	bl	8001cd8 <HAL_GetTick>
 800f36e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f370:	e008      	b.n	800f384 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f372:	f7f2 fcb1 	bl	8001cd8 <HAL_GetTick>
 800f376:	4602      	mov	r2, r0
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d901      	bls.n	800f384 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f380:	2303      	movs	r3, #3
 800f382:	e086      	b.n	800f492 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f384:	4b45      	ldr	r3, [pc, #276]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1f0      	bne.n	800f372 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f390:	4b42      	ldr	r3, [pc, #264]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f394:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	031b      	lsls	r3, r3, #12
 800f39e:	493f      	ldr	r1, [pc, #252]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	689b      	ldr	r3, [r3, #8]
 800f3b2:	3b01      	subs	r3, #1
 800f3b4:	025b      	lsls	r3, r3, #9
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	431a      	orrs	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	041b      	lsls	r3, r3, #16
 800f3c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f3c6:	431a      	orrs	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	061b      	lsls	r3, r3, #24
 800f3d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f3d4:	4931      	ldr	r1, [pc, #196]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f3da:	4b30      	ldr	r3, [pc, #192]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	695b      	ldr	r3, [r3, #20]
 800f3e6:	492d      	ldr	r1, [pc, #180]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f3ec:	4b2b      	ldr	r3, [pc, #172]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3f0:	f023 0220 	bic.w	r2, r3, #32
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	699b      	ldr	r3, [r3, #24]
 800f3f8:	4928      	ldr	r1, [pc, #160]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f3fe:	4b27      	ldr	r3, [pc, #156]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f402:	4a26      	ldr	r2, [pc, #152]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f404:	f023 0310 	bic.w	r3, r3, #16
 800f408:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f40a:	4b24      	ldr	r3, [pc, #144]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f40c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f40e:	4b24      	ldr	r3, [pc, #144]	@ (800f4a0 <RCCEx_PLL2_Config+0x160>)
 800f410:	4013      	ands	r3, r2
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	69d2      	ldr	r2, [r2, #28]
 800f416:	00d2      	lsls	r2, r2, #3
 800f418:	4920      	ldr	r1, [pc, #128]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f41a:	4313      	orrs	r3, r2
 800f41c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f41e:	4b1f      	ldr	r3, [pc, #124]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f422:	4a1e      	ldr	r2, [pc, #120]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f424:	f043 0310 	orr.w	r3, r3, #16
 800f428:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d106      	bne.n	800f43e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f430:	4b1a      	ldr	r3, [pc, #104]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f434:	4a19      	ldr	r2, [pc, #100]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f436:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f43a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f43c:	e00f      	b.n	800f45e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2b01      	cmp	r3, #1
 800f442:	d106      	bne.n	800f452 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f444:	4b15      	ldr	r3, [pc, #84]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f448:	4a14      	ldr	r2, [pc, #80]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f44a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f44e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f450:	e005      	b.n	800f45e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f452:	4b12      	ldr	r3, [pc, #72]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f456:	4a11      	ldr	r2, [pc, #68]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f458:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f45c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f45e:	4b0f      	ldr	r3, [pc, #60]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4a0e      	ldr	r2, [pc, #56]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f464:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f46a:	f7f2 fc35 	bl	8001cd8 <HAL_GetTick>
 800f46e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f470:	e008      	b.n	800f484 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f472:	f7f2 fc31 	bl	8001cd8 <HAL_GetTick>
 800f476:	4602      	mov	r2, r0
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d901      	bls.n	800f484 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f480:	2303      	movs	r3, #3
 800f482:	e006      	b.n	800f492 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f484:	4b05      	ldr	r3, [pc, #20]	@ (800f49c <RCCEx_PLL2_Config+0x15c>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d0f0      	beq.n	800f472 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f490:	7bfb      	ldrb	r3, [r7, #15]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	58024400 	.word	0x58024400
 800f4a0:	ffff0007 	.word	0xffff0007

0800f4a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f4b2:	4b53      	ldr	r3, [pc, #332]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4b6:	f003 0303 	and.w	r3, r3, #3
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	d101      	bne.n	800f4c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e099      	b.n	800f5f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f4c2:	4b4f      	ldr	r3, [pc, #316]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a4e      	ldr	r2, [pc, #312]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f4c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f4cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4ce:	f7f2 fc03 	bl	8001cd8 <HAL_GetTick>
 800f4d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4d4:	e008      	b.n	800f4e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f4d6:	f7f2 fbff 	bl	8001cd8 <HAL_GetTick>
 800f4da:	4602      	mov	r2, r0
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	2b02      	cmp	r3, #2
 800f4e2:	d901      	bls.n	800f4e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f4e4:	2303      	movs	r3, #3
 800f4e6:	e086      	b.n	800f5f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f4e8:	4b45      	ldr	r3, [pc, #276]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d1f0      	bne.n	800f4d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f4f4:	4b42      	ldr	r3, [pc, #264]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	051b      	lsls	r3, r3, #20
 800f502:	493f      	ldr	r1, [pc, #252]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f504:	4313      	orrs	r3, r2
 800f506:	628b      	str	r3, [r1, #40]	@ 0x28
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	3b01      	subs	r3, #1
 800f50e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	3b01      	subs	r3, #1
 800f518:	025b      	lsls	r3, r3, #9
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	431a      	orrs	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	3b01      	subs	r3, #1
 800f524:	041b      	lsls	r3, r3, #16
 800f526:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f52a:	431a      	orrs	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	691b      	ldr	r3, [r3, #16]
 800f530:	3b01      	subs	r3, #1
 800f532:	061b      	lsls	r3, r3, #24
 800f534:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f538:	4931      	ldr	r1, [pc, #196]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f53a:	4313      	orrs	r3, r2
 800f53c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f53e:	4b30      	ldr	r3, [pc, #192]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f542:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	695b      	ldr	r3, [r3, #20]
 800f54a:	492d      	ldr	r1, [pc, #180]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f54c:	4313      	orrs	r3, r2
 800f54e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f550:	4b2b      	ldr	r3, [pc, #172]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f554:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	699b      	ldr	r3, [r3, #24]
 800f55c:	4928      	ldr	r1, [pc, #160]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f55e:	4313      	orrs	r3, r2
 800f560:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f562:	4b27      	ldr	r3, [pc, #156]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f566:	4a26      	ldr	r2, [pc, #152]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f56c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f56e:	4b24      	ldr	r3, [pc, #144]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f572:	4b24      	ldr	r3, [pc, #144]	@ (800f604 <RCCEx_PLL3_Config+0x160>)
 800f574:	4013      	ands	r3, r2
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	69d2      	ldr	r2, [r2, #28]
 800f57a:	00d2      	lsls	r2, r2, #3
 800f57c:	4920      	ldr	r1, [pc, #128]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f57e:	4313      	orrs	r3, r2
 800f580:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f582:	4b1f      	ldr	r3, [pc, #124]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f586:	4a1e      	ldr	r2, [pc, #120]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f58c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d106      	bne.n	800f5a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f594:	4b1a      	ldr	r3, [pc, #104]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f598:	4a19      	ldr	r2, [pc, #100]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f59a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f59e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f5a0:	e00f      	b.n	800f5c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d106      	bne.n	800f5b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f5a8:	4b15      	ldr	r3, [pc, #84]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ac:	4a14      	ldr	r2, [pc, #80]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f5ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f5b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f5b4:	e005      	b.n	800f5c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f5b6:	4b12      	ldr	r3, [pc, #72]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ba:	4a11      	ldr	r2, [pc, #68]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f5bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f5c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a0e      	ldr	r2, [pc, #56]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f5c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f5cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f5ce:	f7f2 fb83 	bl	8001cd8 <HAL_GetTick>
 800f5d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5d4:	e008      	b.n	800f5e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f5d6:	f7f2 fb7f 	bl	8001cd8 <HAL_GetTick>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	1ad3      	subs	r3, r2, r3
 800f5e0:	2b02      	cmp	r3, #2
 800f5e2:	d901      	bls.n	800f5e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f5e4:	2303      	movs	r3, #3
 800f5e6:	e006      	b.n	800f5f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f5e8:	4b05      	ldr	r3, [pc, #20]	@ (800f600 <RCCEx_PLL3_Config+0x15c>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d0f0      	beq.n	800f5d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	58024400 	.word	0x58024400
 800f604:	ffff0007 	.word	0xffff0007

0800f608 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d101      	bne.n	800f61a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f616:	2301      	movs	r3, #1
 800f618:	e10f      	b.n	800f83a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	4a87      	ldr	r2, [pc, #540]	@ (800f844 <HAL_SPI_Init+0x23c>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d00f      	beq.n	800f64a <HAL_SPI_Init+0x42>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	4a86      	ldr	r2, [pc, #536]	@ (800f848 <HAL_SPI_Init+0x240>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d00a      	beq.n	800f64a <HAL_SPI_Init+0x42>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a84      	ldr	r2, [pc, #528]	@ (800f84c <HAL_SPI_Init+0x244>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d005      	beq.n	800f64a <HAL_SPI_Init+0x42>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	2b0f      	cmp	r3, #15
 800f644:	d901      	bls.n	800f64a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f646:	2301      	movs	r3, #1
 800f648:	e0f7      	b.n	800f83a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 f900 	bl	800f850 <SPI_GetPacketSize>
 800f650:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a7b      	ldr	r2, [pc, #492]	@ (800f844 <HAL_SPI_Init+0x23c>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d00c      	beq.n	800f676 <HAL_SPI_Init+0x6e>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a79      	ldr	r2, [pc, #484]	@ (800f848 <HAL_SPI_Init+0x240>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d007      	beq.n	800f676 <HAL_SPI_Init+0x6e>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a78      	ldr	r2, [pc, #480]	@ (800f84c <HAL_SPI_Init+0x244>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d002      	beq.n	800f676 <HAL_SPI_Init+0x6e>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2b08      	cmp	r3, #8
 800f674:	d811      	bhi.n	800f69a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f67a:	4a72      	ldr	r2, [pc, #456]	@ (800f844 <HAL_SPI_Init+0x23c>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d009      	beq.n	800f694 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a70      	ldr	r2, [pc, #448]	@ (800f848 <HAL_SPI_Init+0x240>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d004      	beq.n	800f694 <HAL_SPI_Init+0x8c>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a6f      	ldr	r2, [pc, #444]	@ (800f84c <HAL_SPI_Init+0x244>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d104      	bne.n	800f69e <HAL_SPI_Init+0x96>
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2b10      	cmp	r3, #16
 800f698:	d901      	bls.n	800f69e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f69a:	2301      	movs	r3, #1
 800f69c:	e0cd      	b.n	800f83a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d106      	bne.n	800f6b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7f1 ff58 	bl	8001568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2202      	movs	r2, #2
 800f6bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f022 0201 	bic.w	r2, r2, #1
 800f6ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800f6da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	699b      	ldr	r3, [r3, #24]
 800f6e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f6e4:	d119      	bne.n	800f71a <HAL_SPI_Init+0x112>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f6ee:	d103      	bne.n	800f6f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d008      	beq.n	800f70a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10c      	bne.n	800f71a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f708:	d107      	bne.n	800f71a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f718:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00f      	beq.n	800f746 <HAL_SPI_Init+0x13e>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	2b06      	cmp	r3, #6
 800f72c:	d90b      	bls.n	800f746 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	430a      	orrs	r2, r1
 800f742:	601a      	str	r2, [r3, #0]
 800f744:	e007      	b.n	800f756 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f754:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	69da      	ldr	r2, [r3, #28]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f75e:	431a      	orrs	r2, r3
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	431a      	orrs	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f768:	ea42 0103 	orr.w	r1, r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	68da      	ldr	r2, [r3, #12]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	430a      	orrs	r2, r1
 800f776:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f780:	431a      	orrs	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f786:	431a      	orrs	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	431a      	orrs	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	431a      	orrs	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	431a      	orrs	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	431a      	orrs	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	431a      	orrs	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7aa:	431a      	orrs	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	431a      	orrs	r2, r3
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7b6:	ea42 0103 	orr.w	r1, r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	430a      	orrs	r2, r1
 800f7c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d113      	bne.n	800f7f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	689b      	ldr	r3, [r3, #8]
 800f7d4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f7e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	689b      	ldr	r3, [r3, #8]
 800f7e8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f7f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f022 0201 	bic.w	r2, r2, #1
 800f804:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00a      	beq.n	800f828 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	430a      	orrs	r2, r1
 800f826:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2201      	movs	r2, #1
 800f834:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	40013000 	.word	0x40013000
 800f848:	40003800 	.word	0x40003800
 800f84c:	40003c00 	.word	0x40003c00

0800f850 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f85c:	095b      	lsrs	r3, r3, #5
 800f85e:	3301      	adds	r3, #1
 800f860:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	3301      	adds	r3, #1
 800f868:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	3307      	adds	r3, #7
 800f86e:	08db      	lsrs	r3, r3, #3
 800f870:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	fb02 f303 	mul.w	r3, r2, r3
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3714      	adds	r7, #20
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b082      	sub	sp, #8
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d101      	bne.n	800f898 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f894:	2301      	movs	r3, #1
 800f896:	e049      	b.n	800f92c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d106      	bne.n	800f8b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7f1 fec3 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2202      	movs	r2, #2
 800f8b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	3304      	adds	r3, #4
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	4610      	mov	r0, r2
 800f8c6:	f000 f96f 	bl	800fba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2201      	movs	r2, #1
 800f8de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2201      	movs	r2, #1
 800f906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2201      	movs	r2, #1
 800f90e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2201      	movs	r2, #1
 800f916:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2201      	movs	r2, #1
 800f91e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2201      	movs	r2, #1
 800f926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	691b      	ldr	r3, [r3, #16]
 800f94a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	f003 0302 	and.w	r3, r3, #2
 800f952:	2b00      	cmp	r3, #0
 800f954:	d020      	beq.n	800f998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f003 0302 	and.w	r3, r3, #2
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d01b      	beq.n	800f998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f06f 0202 	mvn.w	r2, #2
 800f968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2201      	movs	r2, #1
 800f96e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	699b      	ldr	r3, [r3, #24]
 800f976:	f003 0303 	and.w	r3, r3, #3
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d003      	beq.n	800f986 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f8f3 	bl	800fb6a <HAL_TIM_IC_CaptureCallback>
 800f984:	e005      	b.n	800f992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 f8e5 	bl	800fb56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f000 f8f6 	bl	800fb7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	f003 0304 	and.w	r3, r3, #4
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d020      	beq.n	800f9e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	f003 0304 	and.w	r3, r3, #4
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d01b      	beq.n	800f9e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f06f 0204 	mvn.w	r2, #4
 800f9b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2202      	movs	r2, #2
 800f9ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	699b      	ldr	r3, [r3, #24]
 800f9c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d003      	beq.n	800f9d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f8cd 	bl	800fb6a <HAL_TIM_IC_CaptureCallback>
 800f9d0:	e005      	b.n	800f9de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f8bf 	bl	800fb56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 f8d0 	bl	800fb7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	f003 0308 	and.w	r3, r3, #8
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d020      	beq.n	800fa30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f003 0308 	and.w	r3, r3, #8
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d01b      	beq.n	800fa30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f06f 0208 	mvn.w	r2, #8
 800fa00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2204      	movs	r2, #4
 800fa06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	69db      	ldr	r3, [r3, #28]
 800fa0e:	f003 0303 	and.w	r3, r3, #3
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d003      	beq.n	800fa1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 f8a7 	bl	800fb6a <HAL_TIM_IC_CaptureCallback>
 800fa1c:	e005      	b.n	800fa2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f000 f899 	bl	800fb56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f000 f8aa 	bl	800fb7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	f003 0310 	and.w	r3, r3, #16
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d020      	beq.n	800fa7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f003 0310 	and.w	r3, r3, #16
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d01b      	beq.n	800fa7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f06f 0210 	mvn.w	r2, #16
 800fa4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2208      	movs	r2, #8
 800fa52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	69db      	ldr	r3, [r3, #28]
 800fa5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d003      	beq.n	800fa6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 f881 	bl	800fb6a <HAL_TIM_IC_CaptureCallback>
 800fa68:	e005      	b.n	800fa76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f000 f873 	bl	800fb56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 f884 	bl	800fb7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	f003 0301 	and.w	r3, r3, #1
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d00c      	beq.n	800faa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f003 0301 	and.w	r3, r3, #1
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d007      	beq.n	800faa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f06f 0201 	mvn.w	r2, #1
 800fa98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f000 f851 	bl	800fb42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d104      	bne.n	800fab4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00c      	beq.n	800face <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d007      	beq.n	800face <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800fac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 f917 	bl	800fcfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d00c      	beq.n	800faf2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d007      	beq.n	800faf2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800faea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 f90f 	bl	800fd10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00c      	beq.n	800fb16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d007      	beq.n	800fb16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fb0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f83e 	bl	800fb92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	f003 0320 	and.w	r3, r3, #32
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00c      	beq.n	800fb3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f003 0320 	and.w	r3, r3, #32
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d007      	beq.n	800fb3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f06f 0220 	mvn.w	r2, #32
 800fb32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 f8d7 	bl	800fce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fb3a:	bf00      	nop
 800fb3c:	3710      	adds	r7, #16
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fb42:	b480      	push	{r7}
 800fb44:	b083      	sub	sp, #12
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fb4a:	bf00      	nop
 800fb4c:	370c      	adds	r7, #12
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fb56:	b480      	push	{r7}
 800fb58:	b083      	sub	sp, #12
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fb5e:	bf00      	nop
 800fb60:	370c      	adds	r7, #12
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr

0800fb6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b083      	sub	sp, #12
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fb72:	bf00      	nop
 800fb74:	370c      	adds	r7, #12
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr

0800fb7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fb7e:	b480      	push	{r7}
 800fb80:	b083      	sub	sp, #12
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fb86:	bf00      	nop
 800fb88:	370c      	adds	r7, #12
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr

0800fb92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fb92:	b480      	push	{r7}
 800fb94:	b083      	sub	sp, #12
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fb9a:	bf00      	nop
 800fb9c:	370c      	adds	r7, #12
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr
	...

0800fba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a43      	ldr	r2, [pc, #268]	@ (800fcc8 <TIM_Base_SetConfig+0x120>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d013      	beq.n	800fbe8 <TIM_Base_SetConfig+0x40>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbc6:	d00f      	beq.n	800fbe8 <TIM_Base_SetConfig+0x40>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a40      	ldr	r2, [pc, #256]	@ (800fccc <TIM_Base_SetConfig+0x124>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d00b      	beq.n	800fbe8 <TIM_Base_SetConfig+0x40>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	4a3f      	ldr	r2, [pc, #252]	@ (800fcd0 <TIM_Base_SetConfig+0x128>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d007      	beq.n	800fbe8 <TIM_Base_SetConfig+0x40>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a3e      	ldr	r2, [pc, #248]	@ (800fcd4 <TIM_Base_SetConfig+0x12c>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d003      	beq.n	800fbe8 <TIM_Base_SetConfig+0x40>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a3d      	ldr	r2, [pc, #244]	@ (800fcd8 <TIM_Base_SetConfig+0x130>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d108      	bne.n	800fbfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4a32      	ldr	r2, [pc, #200]	@ (800fcc8 <TIM_Base_SetConfig+0x120>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d01f      	beq.n	800fc42 <TIM_Base_SetConfig+0x9a>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc08:	d01b      	beq.n	800fc42 <TIM_Base_SetConfig+0x9a>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4a2f      	ldr	r2, [pc, #188]	@ (800fccc <TIM_Base_SetConfig+0x124>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d017      	beq.n	800fc42 <TIM_Base_SetConfig+0x9a>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a2e      	ldr	r2, [pc, #184]	@ (800fcd0 <TIM_Base_SetConfig+0x128>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d013      	beq.n	800fc42 <TIM_Base_SetConfig+0x9a>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4a2d      	ldr	r2, [pc, #180]	@ (800fcd4 <TIM_Base_SetConfig+0x12c>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d00f      	beq.n	800fc42 <TIM_Base_SetConfig+0x9a>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4a2c      	ldr	r2, [pc, #176]	@ (800fcd8 <TIM_Base_SetConfig+0x130>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d00b      	beq.n	800fc42 <TIM_Base_SetConfig+0x9a>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4a2b      	ldr	r2, [pc, #172]	@ (800fcdc <TIM_Base_SetConfig+0x134>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d007      	beq.n	800fc42 <TIM_Base_SetConfig+0x9a>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4a2a      	ldr	r2, [pc, #168]	@ (800fce0 <TIM_Base_SetConfig+0x138>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d003      	beq.n	800fc42 <TIM_Base_SetConfig+0x9a>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4a29      	ldr	r2, [pc, #164]	@ (800fce4 <TIM_Base_SetConfig+0x13c>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d108      	bne.n	800fc54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fc48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	68fa      	ldr	r2, [r7, #12]
 800fc50:	4313      	orrs	r3, r2
 800fc52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	695b      	ldr	r3, [r3, #20]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	689a      	ldr	r2, [r3, #8]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4a14      	ldr	r2, [pc, #80]	@ (800fcc8 <TIM_Base_SetConfig+0x120>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d00f      	beq.n	800fc9a <TIM_Base_SetConfig+0xf2>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4a16      	ldr	r2, [pc, #88]	@ (800fcd8 <TIM_Base_SetConfig+0x130>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d00b      	beq.n	800fc9a <TIM_Base_SetConfig+0xf2>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a15      	ldr	r2, [pc, #84]	@ (800fcdc <TIM_Base_SetConfig+0x134>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d007      	beq.n	800fc9a <TIM_Base_SetConfig+0xf2>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a14      	ldr	r2, [pc, #80]	@ (800fce0 <TIM_Base_SetConfig+0x138>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d003      	beq.n	800fc9a <TIM_Base_SetConfig+0xf2>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	4a13      	ldr	r2, [pc, #76]	@ (800fce4 <TIM_Base_SetConfig+0x13c>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d103      	bne.n	800fca2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	691a      	ldr	r2, [r3, #16]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f043 0204 	orr.w	r2, r3, #4
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	601a      	str	r2, [r3, #0]
}
 800fcba:	bf00      	nop
 800fcbc:	3714      	adds	r7, #20
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop
 800fcc8:	40010000 	.word	0x40010000
 800fccc:	40000400 	.word	0x40000400
 800fcd0:	40000800 	.word	0x40000800
 800fcd4:	40000c00 	.word	0x40000c00
 800fcd8:	40010400 	.word	0x40010400
 800fcdc:	40014000 	.word	0x40014000
 800fce0:	40014400 	.word	0x40014400
 800fce4:	40014800 	.word	0x40014800

0800fce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fcf0:	bf00      	nop
 800fcf2:	370c      	adds	r7, #12
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr

0800fcfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd04:	bf00      	nop
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr

0800fd10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b083      	sub	sp, #12
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fd18:	bf00      	nop
 800fd1a:	370c      	adds	r7, #12
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d101      	bne.n	800fd36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd32:	2301      	movs	r3, #1
 800fd34:	e042      	b.n	800fdbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d106      	bne.n	800fd4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7f1 fc9d 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2224      	movs	r2, #36	@ 0x24
 800fd52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f022 0201 	bic.w	r2, r2, #1
 800fd64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 fd90 	bl	8010894 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 f825 	bl	800fdc4 <UART_SetConfig>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b01      	cmp	r3, #1
 800fd7e:	d101      	bne.n	800fd84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fd80:	2301      	movs	r3, #1
 800fd82:	e01b      	b.n	800fdbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	685a      	ldr	r2, [r3, #4]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fd92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	689a      	ldr	r2, [r3, #8]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fda2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f042 0201 	orr.w	r2, r2, #1
 800fdb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 fe0f 	bl	80109d8 <UART_CheckIdleState>
 800fdba:	4603      	mov	r3, r0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fdc8:	b092      	sub	sp, #72	@ 0x48
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	689a      	ldr	r2, [r3, #8]
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	691b      	ldr	r3, [r3, #16]
 800fddc:	431a      	orrs	r2, r3
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	695b      	ldr	r3, [r3, #20]
 800fde2:	431a      	orrs	r2, r3
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	69db      	ldr	r3, [r3, #28]
 800fde8:	4313      	orrs	r3, r2
 800fdea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	4bbe      	ldr	r3, [pc, #760]	@ (80100ec <UART_SetConfig+0x328>)
 800fdf4:	4013      	ands	r3, r2
 800fdf6:	697a      	ldr	r2, [r7, #20]
 800fdf8:	6812      	ldr	r2, [r2, #0]
 800fdfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fdfc:	430b      	orrs	r3, r1
 800fdfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	68da      	ldr	r2, [r3, #12]
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	430a      	orrs	r2, r1
 800fe14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	699b      	ldr	r3, [r3, #24]
 800fe1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4ab3      	ldr	r2, [pc, #716]	@ (80100f0 <UART_SetConfig+0x32c>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d004      	beq.n	800fe30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	6a1b      	ldr	r3, [r3, #32]
 800fe2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	689a      	ldr	r2, [r3, #8]
 800fe36:	4baf      	ldr	r3, [pc, #700]	@ (80100f4 <UART_SetConfig+0x330>)
 800fe38:	4013      	ands	r3, r2
 800fe3a:	697a      	ldr	r2, [r7, #20]
 800fe3c:	6812      	ldr	r2, [r2, #0]
 800fe3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe40:	430b      	orrs	r3, r1
 800fe42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe4a:	f023 010f 	bic.w	r1, r3, #15
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	430a      	orrs	r2, r1
 800fe58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4aa6      	ldr	r2, [pc, #664]	@ (80100f8 <UART_SetConfig+0x334>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d177      	bne.n	800ff54 <UART_SetConfig+0x190>
 800fe64:	4ba5      	ldr	r3, [pc, #660]	@ (80100fc <UART_SetConfig+0x338>)
 800fe66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe6c:	2b28      	cmp	r3, #40	@ 0x28
 800fe6e:	d86d      	bhi.n	800ff4c <UART_SetConfig+0x188>
 800fe70:	a201      	add	r2, pc, #4	@ (adr r2, 800fe78 <UART_SetConfig+0xb4>)
 800fe72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe76:	bf00      	nop
 800fe78:	0800ff1d 	.word	0x0800ff1d
 800fe7c:	0800ff4d 	.word	0x0800ff4d
 800fe80:	0800ff4d 	.word	0x0800ff4d
 800fe84:	0800ff4d 	.word	0x0800ff4d
 800fe88:	0800ff4d 	.word	0x0800ff4d
 800fe8c:	0800ff4d 	.word	0x0800ff4d
 800fe90:	0800ff4d 	.word	0x0800ff4d
 800fe94:	0800ff4d 	.word	0x0800ff4d
 800fe98:	0800ff25 	.word	0x0800ff25
 800fe9c:	0800ff4d 	.word	0x0800ff4d
 800fea0:	0800ff4d 	.word	0x0800ff4d
 800fea4:	0800ff4d 	.word	0x0800ff4d
 800fea8:	0800ff4d 	.word	0x0800ff4d
 800feac:	0800ff4d 	.word	0x0800ff4d
 800feb0:	0800ff4d 	.word	0x0800ff4d
 800feb4:	0800ff4d 	.word	0x0800ff4d
 800feb8:	0800ff2d 	.word	0x0800ff2d
 800febc:	0800ff4d 	.word	0x0800ff4d
 800fec0:	0800ff4d 	.word	0x0800ff4d
 800fec4:	0800ff4d 	.word	0x0800ff4d
 800fec8:	0800ff4d 	.word	0x0800ff4d
 800fecc:	0800ff4d 	.word	0x0800ff4d
 800fed0:	0800ff4d 	.word	0x0800ff4d
 800fed4:	0800ff4d 	.word	0x0800ff4d
 800fed8:	0800ff35 	.word	0x0800ff35
 800fedc:	0800ff4d 	.word	0x0800ff4d
 800fee0:	0800ff4d 	.word	0x0800ff4d
 800fee4:	0800ff4d 	.word	0x0800ff4d
 800fee8:	0800ff4d 	.word	0x0800ff4d
 800feec:	0800ff4d 	.word	0x0800ff4d
 800fef0:	0800ff4d 	.word	0x0800ff4d
 800fef4:	0800ff4d 	.word	0x0800ff4d
 800fef8:	0800ff3d 	.word	0x0800ff3d
 800fefc:	0800ff4d 	.word	0x0800ff4d
 800ff00:	0800ff4d 	.word	0x0800ff4d
 800ff04:	0800ff4d 	.word	0x0800ff4d
 800ff08:	0800ff4d 	.word	0x0800ff4d
 800ff0c:	0800ff4d 	.word	0x0800ff4d
 800ff10:	0800ff4d 	.word	0x0800ff4d
 800ff14:	0800ff4d 	.word	0x0800ff4d
 800ff18:	0800ff45 	.word	0x0800ff45
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff22:	e222      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff24:	2304      	movs	r3, #4
 800ff26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff2a:	e21e      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff2c:	2308      	movs	r3, #8
 800ff2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff32:	e21a      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff34:	2310      	movs	r3, #16
 800ff36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff3a:	e216      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff3c:	2320      	movs	r3, #32
 800ff3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff42:	e212      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff44:	2340      	movs	r3, #64	@ 0x40
 800ff46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff4a:	e20e      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff4c:	2380      	movs	r3, #128	@ 0x80
 800ff4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff52:	e20a      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4a69      	ldr	r2, [pc, #420]	@ (8010100 <UART_SetConfig+0x33c>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d130      	bne.n	800ffc0 <UART_SetConfig+0x1fc>
 800ff5e:	4b67      	ldr	r3, [pc, #412]	@ (80100fc <UART_SetConfig+0x338>)
 800ff60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff62:	f003 0307 	and.w	r3, r3, #7
 800ff66:	2b05      	cmp	r3, #5
 800ff68:	d826      	bhi.n	800ffb8 <UART_SetConfig+0x1f4>
 800ff6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ff70 <UART_SetConfig+0x1ac>)
 800ff6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff70:	0800ff89 	.word	0x0800ff89
 800ff74:	0800ff91 	.word	0x0800ff91
 800ff78:	0800ff99 	.word	0x0800ff99
 800ff7c:	0800ffa1 	.word	0x0800ffa1
 800ff80:	0800ffa9 	.word	0x0800ffa9
 800ff84:	0800ffb1 	.word	0x0800ffb1
 800ff88:	2300      	movs	r3, #0
 800ff8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8e:	e1ec      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff90:	2304      	movs	r3, #4
 800ff92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff96:	e1e8      	b.n	801036a <UART_SetConfig+0x5a6>
 800ff98:	2308      	movs	r3, #8
 800ff9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff9e:	e1e4      	b.n	801036a <UART_SetConfig+0x5a6>
 800ffa0:	2310      	movs	r3, #16
 800ffa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffa6:	e1e0      	b.n	801036a <UART_SetConfig+0x5a6>
 800ffa8:	2320      	movs	r3, #32
 800ffaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffae:	e1dc      	b.n	801036a <UART_SetConfig+0x5a6>
 800ffb0:	2340      	movs	r3, #64	@ 0x40
 800ffb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffb6:	e1d8      	b.n	801036a <UART_SetConfig+0x5a6>
 800ffb8:	2380      	movs	r3, #128	@ 0x80
 800ffba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffbe:	e1d4      	b.n	801036a <UART_SetConfig+0x5a6>
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a4f      	ldr	r2, [pc, #316]	@ (8010104 <UART_SetConfig+0x340>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d130      	bne.n	801002c <UART_SetConfig+0x268>
 800ffca:	4b4c      	ldr	r3, [pc, #304]	@ (80100fc <UART_SetConfig+0x338>)
 800ffcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffce:	f003 0307 	and.w	r3, r3, #7
 800ffd2:	2b05      	cmp	r3, #5
 800ffd4:	d826      	bhi.n	8010024 <UART_SetConfig+0x260>
 800ffd6:	a201      	add	r2, pc, #4	@ (adr r2, 800ffdc <UART_SetConfig+0x218>)
 800ffd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffdc:	0800fff5 	.word	0x0800fff5
 800ffe0:	0800fffd 	.word	0x0800fffd
 800ffe4:	08010005 	.word	0x08010005
 800ffe8:	0801000d 	.word	0x0801000d
 800ffec:	08010015 	.word	0x08010015
 800fff0:	0801001d 	.word	0x0801001d
 800fff4:	2300      	movs	r3, #0
 800fff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fffa:	e1b6      	b.n	801036a <UART_SetConfig+0x5a6>
 800fffc:	2304      	movs	r3, #4
 800fffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010002:	e1b2      	b.n	801036a <UART_SetConfig+0x5a6>
 8010004:	2308      	movs	r3, #8
 8010006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801000a:	e1ae      	b.n	801036a <UART_SetConfig+0x5a6>
 801000c:	2310      	movs	r3, #16
 801000e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010012:	e1aa      	b.n	801036a <UART_SetConfig+0x5a6>
 8010014:	2320      	movs	r3, #32
 8010016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801001a:	e1a6      	b.n	801036a <UART_SetConfig+0x5a6>
 801001c:	2340      	movs	r3, #64	@ 0x40
 801001e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010022:	e1a2      	b.n	801036a <UART_SetConfig+0x5a6>
 8010024:	2380      	movs	r3, #128	@ 0x80
 8010026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801002a:	e19e      	b.n	801036a <UART_SetConfig+0x5a6>
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4a35      	ldr	r2, [pc, #212]	@ (8010108 <UART_SetConfig+0x344>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d130      	bne.n	8010098 <UART_SetConfig+0x2d4>
 8010036:	4b31      	ldr	r3, [pc, #196]	@ (80100fc <UART_SetConfig+0x338>)
 8010038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801003a:	f003 0307 	and.w	r3, r3, #7
 801003e:	2b05      	cmp	r3, #5
 8010040:	d826      	bhi.n	8010090 <UART_SetConfig+0x2cc>
 8010042:	a201      	add	r2, pc, #4	@ (adr r2, 8010048 <UART_SetConfig+0x284>)
 8010044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010048:	08010061 	.word	0x08010061
 801004c:	08010069 	.word	0x08010069
 8010050:	08010071 	.word	0x08010071
 8010054:	08010079 	.word	0x08010079
 8010058:	08010081 	.word	0x08010081
 801005c:	08010089 	.word	0x08010089
 8010060:	2300      	movs	r3, #0
 8010062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010066:	e180      	b.n	801036a <UART_SetConfig+0x5a6>
 8010068:	2304      	movs	r3, #4
 801006a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801006e:	e17c      	b.n	801036a <UART_SetConfig+0x5a6>
 8010070:	2308      	movs	r3, #8
 8010072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010076:	e178      	b.n	801036a <UART_SetConfig+0x5a6>
 8010078:	2310      	movs	r3, #16
 801007a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801007e:	e174      	b.n	801036a <UART_SetConfig+0x5a6>
 8010080:	2320      	movs	r3, #32
 8010082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010086:	e170      	b.n	801036a <UART_SetConfig+0x5a6>
 8010088:	2340      	movs	r3, #64	@ 0x40
 801008a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801008e:	e16c      	b.n	801036a <UART_SetConfig+0x5a6>
 8010090:	2380      	movs	r3, #128	@ 0x80
 8010092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010096:	e168      	b.n	801036a <UART_SetConfig+0x5a6>
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a1b      	ldr	r2, [pc, #108]	@ (801010c <UART_SetConfig+0x348>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d142      	bne.n	8010128 <UART_SetConfig+0x364>
 80100a2:	4b16      	ldr	r3, [pc, #88]	@ (80100fc <UART_SetConfig+0x338>)
 80100a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100a6:	f003 0307 	and.w	r3, r3, #7
 80100aa:	2b05      	cmp	r3, #5
 80100ac:	d838      	bhi.n	8010120 <UART_SetConfig+0x35c>
 80100ae:	a201      	add	r2, pc, #4	@ (adr r2, 80100b4 <UART_SetConfig+0x2f0>)
 80100b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b4:	080100cd 	.word	0x080100cd
 80100b8:	080100d5 	.word	0x080100d5
 80100bc:	080100dd 	.word	0x080100dd
 80100c0:	080100e5 	.word	0x080100e5
 80100c4:	08010111 	.word	0x08010111
 80100c8:	08010119 	.word	0x08010119
 80100cc:	2300      	movs	r3, #0
 80100ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100d2:	e14a      	b.n	801036a <UART_SetConfig+0x5a6>
 80100d4:	2304      	movs	r3, #4
 80100d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100da:	e146      	b.n	801036a <UART_SetConfig+0x5a6>
 80100dc:	2308      	movs	r3, #8
 80100de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100e2:	e142      	b.n	801036a <UART_SetConfig+0x5a6>
 80100e4:	2310      	movs	r3, #16
 80100e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100ea:	e13e      	b.n	801036a <UART_SetConfig+0x5a6>
 80100ec:	cfff69f3 	.word	0xcfff69f3
 80100f0:	58000c00 	.word	0x58000c00
 80100f4:	11fff4ff 	.word	0x11fff4ff
 80100f8:	40011000 	.word	0x40011000
 80100fc:	58024400 	.word	0x58024400
 8010100:	40004400 	.word	0x40004400
 8010104:	40004800 	.word	0x40004800
 8010108:	40004c00 	.word	0x40004c00
 801010c:	40005000 	.word	0x40005000
 8010110:	2320      	movs	r3, #32
 8010112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010116:	e128      	b.n	801036a <UART_SetConfig+0x5a6>
 8010118:	2340      	movs	r3, #64	@ 0x40
 801011a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801011e:	e124      	b.n	801036a <UART_SetConfig+0x5a6>
 8010120:	2380      	movs	r3, #128	@ 0x80
 8010122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010126:	e120      	b.n	801036a <UART_SetConfig+0x5a6>
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4acb      	ldr	r2, [pc, #812]	@ (801045c <UART_SetConfig+0x698>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d176      	bne.n	8010220 <UART_SetConfig+0x45c>
 8010132:	4bcb      	ldr	r3, [pc, #812]	@ (8010460 <UART_SetConfig+0x69c>)
 8010134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801013a:	2b28      	cmp	r3, #40	@ 0x28
 801013c:	d86c      	bhi.n	8010218 <UART_SetConfig+0x454>
 801013e:	a201      	add	r2, pc, #4	@ (adr r2, 8010144 <UART_SetConfig+0x380>)
 8010140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010144:	080101e9 	.word	0x080101e9
 8010148:	08010219 	.word	0x08010219
 801014c:	08010219 	.word	0x08010219
 8010150:	08010219 	.word	0x08010219
 8010154:	08010219 	.word	0x08010219
 8010158:	08010219 	.word	0x08010219
 801015c:	08010219 	.word	0x08010219
 8010160:	08010219 	.word	0x08010219
 8010164:	080101f1 	.word	0x080101f1
 8010168:	08010219 	.word	0x08010219
 801016c:	08010219 	.word	0x08010219
 8010170:	08010219 	.word	0x08010219
 8010174:	08010219 	.word	0x08010219
 8010178:	08010219 	.word	0x08010219
 801017c:	08010219 	.word	0x08010219
 8010180:	08010219 	.word	0x08010219
 8010184:	080101f9 	.word	0x080101f9
 8010188:	08010219 	.word	0x08010219
 801018c:	08010219 	.word	0x08010219
 8010190:	08010219 	.word	0x08010219
 8010194:	08010219 	.word	0x08010219
 8010198:	08010219 	.word	0x08010219
 801019c:	08010219 	.word	0x08010219
 80101a0:	08010219 	.word	0x08010219
 80101a4:	08010201 	.word	0x08010201
 80101a8:	08010219 	.word	0x08010219
 80101ac:	08010219 	.word	0x08010219
 80101b0:	08010219 	.word	0x08010219
 80101b4:	08010219 	.word	0x08010219
 80101b8:	08010219 	.word	0x08010219
 80101bc:	08010219 	.word	0x08010219
 80101c0:	08010219 	.word	0x08010219
 80101c4:	08010209 	.word	0x08010209
 80101c8:	08010219 	.word	0x08010219
 80101cc:	08010219 	.word	0x08010219
 80101d0:	08010219 	.word	0x08010219
 80101d4:	08010219 	.word	0x08010219
 80101d8:	08010219 	.word	0x08010219
 80101dc:	08010219 	.word	0x08010219
 80101e0:	08010219 	.word	0x08010219
 80101e4:	08010211 	.word	0x08010211
 80101e8:	2301      	movs	r3, #1
 80101ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ee:	e0bc      	b.n	801036a <UART_SetConfig+0x5a6>
 80101f0:	2304      	movs	r3, #4
 80101f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101f6:	e0b8      	b.n	801036a <UART_SetConfig+0x5a6>
 80101f8:	2308      	movs	r3, #8
 80101fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101fe:	e0b4      	b.n	801036a <UART_SetConfig+0x5a6>
 8010200:	2310      	movs	r3, #16
 8010202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010206:	e0b0      	b.n	801036a <UART_SetConfig+0x5a6>
 8010208:	2320      	movs	r3, #32
 801020a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801020e:	e0ac      	b.n	801036a <UART_SetConfig+0x5a6>
 8010210:	2340      	movs	r3, #64	@ 0x40
 8010212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010216:	e0a8      	b.n	801036a <UART_SetConfig+0x5a6>
 8010218:	2380      	movs	r3, #128	@ 0x80
 801021a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801021e:	e0a4      	b.n	801036a <UART_SetConfig+0x5a6>
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4a8f      	ldr	r2, [pc, #572]	@ (8010464 <UART_SetConfig+0x6a0>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d130      	bne.n	801028c <UART_SetConfig+0x4c8>
 801022a:	4b8d      	ldr	r3, [pc, #564]	@ (8010460 <UART_SetConfig+0x69c>)
 801022c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801022e:	f003 0307 	and.w	r3, r3, #7
 8010232:	2b05      	cmp	r3, #5
 8010234:	d826      	bhi.n	8010284 <UART_SetConfig+0x4c0>
 8010236:	a201      	add	r2, pc, #4	@ (adr r2, 801023c <UART_SetConfig+0x478>)
 8010238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801023c:	08010255 	.word	0x08010255
 8010240:	0801025d 	.word	0x0801025d
 8010244:	08010265 	.word	0x08010265
 8010248:	0801026d 	.word	0x0801026d
 801024c:	08010275 	.word	0x08010275
 8010250:	0801027d 	.word	0x0801027d
 8010254:	2300      	movs	r3, #0
 8010256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801025a:	e086      	b.n	801036a <UART_SetConfig+0x5a6>
 801025c:	2304      	movs	r3, #4
 801025e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010262:	e082      	b.n	801036a <UART_SetConfig+0x5a6>
 8010264:	2308      	movs	r3, #8
 8010266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801026a:	e07e      	b.n	801036a <UART_SetConfig+0x5a6>
 801026c:	2310      	movs	r3, #16
 801026e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010272:	e07a      	b.n	801036a <UART_SetConfig+0x5a6>
 8010274:	2320      	movs	r3, #32
 8010276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801027a:	e076      	b.n	801036a <UART_SetConfig+0x5a6>
 801027c:	2340      	movs	r3, #64	@ 0x40
 801027e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010282:	e072      	b.n	801036a <UART_SetConfig+0x5a6>
 8010284:	2380      	movs	r3, #128	@ 0x80
 8010286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801028a:	e06e      	b.n	801036a <UART_SetConfig+0x5a6>
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4a75      	ldr	r2, [pc, #468]	@ (8010468 <UART_SetConfig+0x6a4>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d130      	bne.n	80102f8 <UART_SetConfig+0x534>
 8010296:	4b72      	ldr	r3, [pc, #456]	@ (8010460 <UART_SetConfig+0x69c>)
 8010298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801029a:	f003 0307 	and.w	r3, r3, #7
 801029e:	2b05      	cmp	r3, #5
 80102a0:	d826      	bhi.n	80102f0 <UART_SetConfig+0x52c>
 80102a2:	a201      	add	r2, pc, #4	@ (adr r2, 80102a8 <UART_SetConfig+0x4e4>)
 80102a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102a8:	080102c1 	.word	0x080102c1
 80102ac:	080102c9 	.word	0x080102c9
 80102b0:	080102d1 	.word	0x080102d1
 80102b4:	080102d9 	.word	0x080102d9
 80102b8:	080102e1 	.word	0x080102e1
 80102bc:	080102e9 	.word	0x080102e9
 80102c0:	2300      	movs	r3, #0
 80102c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102c6:	e050      	b.n	801036a <UART_SetConfig+0x5a6>
 80102c8:	2304      	movs	r3, #4
 80102ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ce:	e04c      	b.n	801036a <UART_SetConfig+0x5a6>
 80102d0:	2308      	movs	r3, #8
 80102d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102d6:	e048      	b.n	801036a <UART_SetConfig+0x5a6>
 80102d8:	2310      	movs	r3, #16
 80102da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102de:	e044      	b.n	801036a <UART_SetConfig+0x5a6>
 80102e0:	2320      	movs	r3, #32
 80102e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102e6:	e040      	b.n	801036a <UART_SetConfig+0x5a6>
 80102e8:	2340      	movs	r3, #64	@ 0x40
 80102ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ee:	e03c      	b.n	801036a <UART_SetConfig+0x5a6>
 80102f0:	2380      	movs	r3, #128	@ 0x80
 80102f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102f6:	e038      	b.n	801036a <UART_SetConfig+0x5a6>
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4a5b      	ldr	r2, [pc, #364]	@ (801046c <UART_SetConfig+0x6a8>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d130      	bne.n	8010364 <UART_SetConfig+0x5a0>
 8010302:	4b57      	ldr	r3, [pc, #348]	@ (8010460 <UART_SetConfig+0x69c>)
 8010304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010306:	f003 0307 	and.w	r3, r3, #7
 801030a:	2b05      	cmp	r3, #5
 801030c:	d826      	bhi.n	801035c <UART_SetConfig+0x598>
 801030e:	a201      	add	r2, pc, #4	@ (adr r2, 8010314 <UART_SetConfig+0x550>)
 8010310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010314:	0801032d 	.word	0x0801032d
 8010318:	08010335 	.word	0x08010335
 801031c:	0801033d 	.word	0x0801033d
 8010320:	08010345 	.word	0x08010345
 8010324:	0801034d 	.word	0x0801034d
 8010328:	08010355 	.word	0x08010355
 801032c:	2302      	movs	r3, #2
 801032e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010332:	e01a      	b.n	801036a <UART_SetConfig+0x5a6>
 8010334:	2304      	movs	r3, #4
 8010336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801033a:	e016      	b.n	801036a <UART_SetConfig+0x5a6>
 801033c:	2308      	movs	r3, #8
 801033e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010342:	e012      	b.n	801036a <UART_SetConfig+0x5a6>
 8010344:	2310      	movs	r3, #16
 8010346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801034a:	e00e      	b.n	801036a <UART_SetConfig+0x5a6>
 801034c:	2320      	movs	r3, #32
 801034e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010352:	e00a      	b.n	801036a <UART_SetConfig+0x5a6>
 8010354:	2340      	movs	r3, #64	@ 0x40
 8010356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801035a:	e006      	b.n	801036a <UART_SetConfig+0x5a6>
 801035c:	2380      	movs	r3, #128	@ 0x80
 801035e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010362:	e002      	b.n	801036a <UART_SetConfig+0x5a6>
 8010364:	2380      	movs	r3, #128	@ 0x80
 8010366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	4a3f      	ldr	r2, [pc, #252]	@ (801046c <UART_SetConfig+0x6a8>)
 8010370:	4293      	cmp	r3, r2
 8010372:	f040 80f8 	bne.w	8010566 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010376:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801037a:	2b20      	cmp	r3, #32
 801037c:	dc46      	bgt.n	801040c <UART_SetConfig+0x648>
 801037e:	2b02      	cmp	r3, #2
 8010380:	f2c0 8082 	blt.w	8010488 <UART_SetConfig+0x6c4>
 8010384:	3b02      	subs	r3, #2
 8010386:	2b1e      	cmp	r3, #30
 8010388:	d87e      	bhi.n	8010488 <UART_SetConfig+0x6c4>
 801038a:	a201      	add	r2, pc, #4	@ (adr r2, 8010390 <UART_SetConfig+0x5cc>)
 801038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010390:	08010413 	.word	0x08010413
 8010394:	08010489 	.word	0x08010489
 8010398:	0801041b 	.word	0x0801041b
 801039c:	08010489 	.word	0x08010489
 80103a0:	08010489 	.word	0x08010489
 80103a4:	08010489 	.word	0x08010489
 80103a8:	0801042b 	.word	0x0801042b
 80103ac:	08010489 	.word	0x08010489
 80103b0:	08010489 	.word	0x08010489
 80103b4:	08010489 	.word	0x08010489
 80103b8:	08010489 	.word	0x08010489
 80103bc:	08010489 	.word	0x08010489
 80103c0:	08010489 	.word	0x08010489
 80103c4:	08010489 	.word	0x08010489
 80103c8:	0801043b 	.word	0x0801043b
 80103cc:	08010489 	.word	0x08010489
 80103d0:	08010489 	.word	0x08010489
 80103d4:	08010489 	.word	0x08010489
 80103d8:	08010489 	.word	0x08010489
 80103dc:	08010489 	.word	0x08010489
 80103e0:	08010489 	.word	0x08010489
 80103e4:	08010489 	.word	0x08010489
 80103e8:	08010489 	.word	0x08010489
 80103ec:	08010489 	.word	0x08010489
 80103f0:	08010489 	.word	0x08010489
 80103f4:	08010489 	.word	0x08010489
 80103f8:	08010489 	.word	0x08010489
 80103fc:	08010489 	.word	0x08010489
 8010400:	08010489 	.word	0x08010489
 8010404:	08010489 	.word	0x08010489
 8010408:	0801047b 	.word	0x0801047b
 801040c:	2b40      	cmp	r3, #64	@ 0x40
 801040e:	d037      	beq.n	8010480 <UART_SetConfig+0x6bc>
 8010410:	e03a      	b.n	8010488 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010412:	f7fe fb85 	bl	800eb20 <HAL_RCCEx_GetD3PCLK1Freq>
 8010416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010418:	e03c      	b.n	8010494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801041a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801041e:	4618      	mov	r0, r3
 8010420:	f7fe fb94 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010428:	e034      	b.n	8010494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801042a:	f107 0318 	add.w	r3, r7, #24
 801042e:	4618      	mov	r0, r3
 8010430:	f7fe fce0 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010438:	e02c      	b.n	8010494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801043a:	4b09      	ldr	r3, [pc, #36]	@ (8010460 <UART_SetConfig+0x69c>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f003 0320 	and.w	r3, r3, #32
 8010442:	2b00      	cmp	r3, #0
 8010444:	d016      	beq.n	8010474 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010446:	4b06      	ldr	r3, [pc, #24]	@ (8010460 <UART_SetConfig+0x69c>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	08db      	lsrs	r3, r3, #3
 801044c:	f003 0303 	and.w	r3, r3, #3
 8010450:	4a07      	ldr	r2, [pc, #28]	@ (8010470 <UART_SetConfig+0x6ac>)
 8010452:	fa22 f303 	lsr.w	r3, r2, r3
 8010456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010458:	e01c      	b.n	8010494 <UART_SetConfig+0x6d0>
 801045a:	bf00      	nop
 801045c:	40011400 	.word	0x40011400
 8010460:	58024400 	.word	0x58024400
 8010464:	40007800 	.word	0x40007800
 8010468:	40007c00 	.word	0x40007c00
 801046c:	58000c00 	.word	0x58000c00
 8010470:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010474:	4b9d      	ldr	r3, [pc, #628]	@ (80106ec <UART_SetConfig+0x928>)
 8010476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010478:	e00c      	b.n	8010494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801047a:	4b9d      	ldr	r3, [pc, #628]	@ (80106f0 <UART_SetConfig+0x92c>)
 801047c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801047e:	e009      	b.n	8010494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010486:	e005      	b.n	8010494 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010488:	2300      	movs	r3, #0
 801048a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801048c:	2301      	movs	r3, #1
 801048e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010492:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010496:	2b00      	cmp	r3, #0
 8010498:	f000 81de 	beq.w	8010858 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104a0:	4a94      	ldr	r2, [pc, #592]	@ (80106f4 <UART_SetConfig+0x930>)
 80104a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104a6:	461a      	mov	r2, r3
 80104a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80104ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	685a      	ldr	r2, [r3, #4]
 80104b4:	4613      	mov	r3, r2
 80104b6:	005b      	lsls	r3, r3, #1
 80104b8:	4413      	add	r3, r2
 80104ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104bc:	429a      	cmp	r2, r3
 80104be:	d305      	bcc.n	80104cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d903      	bls.n	80104d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80104cc:	2301      	movs	r3, #1
 80104ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80104d2:	e1c1      	b.n	8010858 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104d6:	2200      	movs	r2, #0
 80104d8:	60bb      	str	r3, [r7, #8]
 80104da:	60fa      	str	r2, [r7, #12]
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e0:	4a84      	ldr	r2, [pc, #528]	@ (80106f4 <UART_SetConfig+0x930>)
 80104e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	2200      	movs	r2, #0
 80104ea:	603b      	str	r3, [r7, #0]
 80104ec:	607a      	str	r2, [r7, #4]
 80104ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80104f6:	f7ef ff4b 	bl	8000390 <__aeabi_uldivmod>
 80104fa:	4602      	mov	r2, r0
 80104fc:	460b      	mov	r3, r1
 80104fe:	4610      	mov	r0, r2
 8010500:	4619      	mov	r1, r3
 8010502:	f04f 0200 	mov.w	r2, #0
 8010506:	f04f 0300 	mov.w	r3, #0
 801050a:	020b      	lsls	r3, r1, #8
 801050c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010510:	0202      	lsls	r2, r0, #8
 8010512:	6979      	ldr	r1, [r7, #20]
 8010514:	6849      	ldr	r1, [r1, #4]
 8010516:	0849      	lsrs	r1, r1, #1
 8010518:	2000      	movs	r0, #0
 801051a:	460c      	mov	r4, r1
 801051c:	4605      	mov	r5, r0
 801051e:	eb12 0804 	adds.w	r8, r2, r4
 8010522:	eb43 0905 	adc.w	r9, r3, r5
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	469a      	mov	sl, r3
 801052e:	4693      	mov	fp, r2
 8010530:	4652      	mov	r2, sl
 8010532:	465b      	mov	r3, fp
 8010534:	4640      	mov	r0, r8
 8010536:	4649      	mov	r1, r9
 8010538:	f7ef ff2a 	bl	8000390 <__aeabi_uldivmod>
 801053c:	4602      	mov	r2, r0
 801053e:	460b      	mov	r3, r1
 8010540:	4613      	mov	r3, r2
 8010542:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801054a:	d308      	bcc.n	801055e <UART_SetConfig+0x79a>
 801054c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801054e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010552:	d204      	bcs.n	801055e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801055a:	60da      	str	r2, [r3, #12]
 801055c:	e17c      	b.n	8010858 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801055e:	2301      	movs	r3, #1
 8010560:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010564:	e178      	b.n	8010858 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	69db      	ldr	r3, [r3, #28]
 801056a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801056e:	f040 80c5 	bne.w	80106fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010572:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010576:	2b20      	cmp	r3, #32
 8010578:	dc48      	bgt.n	801060c <UART_SetConfig+0x848>
 801057a:	2b00      	cmp	r3, #0
 801057c:	db7b      	blt.n	8010676 <UART_SetConfig+0x8b2>
 801057e:	2b20      	cmp	r3, #32
 8010580:	d879      	bhi.n	8010676 <UART_SetConfig+0x8b2>
 8010582:	a201      	add	r2, pc, #4	@ (adr r2, 8010588 <UART_SetConfig+0x7c4>)
 8010584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010588:	08010613 	.word	0x08010613
 801058c:	0801061b 	.word	0x0801061b
 8010590:	08010677 	.word	0x08010677
 8010594:	08010677 	.word	0x08010677
 8010598:	08010623 	.word	0x08010623
 801059c:	08010677 	.word	0x08010677
 80105a0:	08010677 	.word	0x08010677
 80105a4:	08010677 	.word	0x08010677
 80105a8:	08010633 	.word	0x08010633
 80105ac:	08010677 	.word	0x08010677
 80105b0:	08010677 	.word	0x08010677
 80105b4:	08010677 	.word	0x08010677
 80105b8:	08010677 	.word	0x08010677
 80105bc:	08010677 	.word	0x08010677
 80105c0:	08010677 	.word	0x08010677
 80105c4:	08010677 	.word	0x08010677
 80105c8:	08010643 	.word	0x08010643
 80105cc:	08010677 	.word	0x08010677
 80105d0:	08010677 	.word	0x08010677
 80105d4:	08010677 	.word	0x08010677
 80105d8:	08010677 	.word	0x08010677
 80105dc:	08010677 	.word	0x08010677
 80105e0:	08010677 	.word	0x08010677
 80105e4:	08010677 	.word	0x08010677
 80105e8:	08010677 	.word	0x08010677
 80105ec:	08010677 	.word	0x08010677
 80105f0:	08010677 	.word	0x08010677
 80105f4:	08010677 	.word	0x08010677
 80105f8:	08010677 	.word	0x08010677
 80105fc:	08010677 	.word	0x08010677
 8010600:	08010677 	.word	0x08010677
 8010604:	08010677 	.word	0x08010677
 8010608:	08010669 	.word	0x08010669
 801060c:	2b40      	cmp	r3, #64	@ 0x40
 801060e:	d02e      	beq.n	801066e <UART_SetConfig+0x8aa>
 8010610:	e031      	b.n	8010676 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010612:	f7fc facf 	bl	800cbb4 <HAL_RCC_GetPCLK1Freq>
 8010616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010618:	e033      	b.n	8010682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801061a:	f7fc fae1 	bl	800cbe0 <HAL_RCC_GetPCLK2Freq>
 801061e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010620:	e02f      	b.n	8010682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010626:	4618      	mov	r0, r3
 8010628:	f7fe fa90 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801062c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010630:	e027      	b.n	8010682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010632:	f107 0318 	add.w	r3, r7, #24
 8010636:	4618      	mov	r0, r3
 8010638:	f7fe fbdc 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010640:	e01f      	b.n	8010682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010642:	4b2d      	ldr	r3, [pc, #180]	@ (80106f8 <UART_SetConfig+0x934>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f003 0320 	and.w	r3, r3, #32
 801064a:	2b00      	cmp	r3, #0
 801064c:	d009      	beq.n	8010662 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801064e:	4b2a      	ldr	r3, [pc, #168]	@ (80106f8 <UART_SetConfig+0x934>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	08db      	lsrs	r3, r3, #3
 8010654:	f003 0303 	and.w	r3, r3, #3
 8010658:	4a24      	ldr	r2, [pc, #144]	@ (80106ec <UART_SetConfig+0x928>)
 801065a:	fa22 f303 	lsr.w	r3, r2, r3
 801065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010660:	e00f      	b.n	8010682 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010662:	4b22      	ldr	r3, [pc, #136]	@ (80106ec <UART_SetConfig+0x928>)
 8010664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010666:	e00c      	b.n	8010682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010668:	4b21      	ldr	r3, [pc, #132]	@ (80106f0 <UART_SetConfig+0x92c>)
 801066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801066c:	e009      	b.n	8010682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801066e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010674:	e005      	b.n	8010682 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010676:	2300      	movs	r3, #0
 8010678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801067a:	2301      	movs	r3, #1
 801067c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010684:	2b00      	cmp	r3, #0
 8010686:	f000 80e7 	beq.w	8010858 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801068e:	4a19      	ldr	r2, [pc, #100]	@ (80106f4 <UART_SetConfig+0x930>)
 8010690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010694:	461a      	mov	r2, r3
 8010696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010698:	fbb3 f3f2 	udiv	r3, r3, r2
 801069c:	005a      	lsls	r2, r3, #1
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	085b      	lsrs	r3, r3, #1
 80106a4:	441a      	add	r2, r3
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80106ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b2:	2b0f      	cmp	r3, #15
 80106b4:	d916      	bls.n	80106e4 <UART_SetConfig+0x920>
 80106b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80106bc:	d212      	bcs.n	80106e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80106be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	f023 030f 	bic.w	r3, r3, #15
 80106c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80106c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ca:	085b      	lsrs	r3, r3, #1
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	f003 0307 	and.w	r3, r3, #7
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80106d6:	4313      	orrs	r3, r2
 80106d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80106e0:	60da      	str	r2, [r3, #12]
 80106e2:	e0b9      	b.n	8010858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80106e4:	2301      	movs	r3, #1
 80106e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80106ea:	e0b5      	b.n	8010858 <UART_SetConfig+0xa94>
 80106ec:	03d09000 	.word	0x03d09000
 80106f0:	003d0900 	.word	0x003d0900
 80106f4:	08015ca8 	.word	0x08015ca8
 80106f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80106fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010700:	2b20      	cmp	r3, #32
 8010702:	dc49      	bgt.n	8010798 <UART_SetConfig+0x9d4>
 8010704:	2b00      	cmp	r3, #0
 8010706:	db7c      	blt.n	8010802 <UART_SetConfig+0xa3e>
 8010708:	2b20      	cmp	r3, #32
 801070a:	d87a      	bhi.n	8010802 <UART_SetConfig+0xa3e>
 801070c:	a201      	add	r2, pc, #4	@ (adr r2, 8010714 <UART_SetConfig+0x950>)
 801070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010712:	bf00      	nop
 8010714:	0801079f 	.word	0x0801079f
 8010718:	080107a7 	.word	0x080107a7
 801071c:	08010803 	.word	0x08010803
 8010720:	08010803 	.word	0x08010803
 8010724:	080107af 	.word	0x080107af
 8010728:	08010803 	.word	0x08010803
 801072c:	08010803 	.word	0x08010803
 8010730:	08010803 	.word	0x08010803
 8010734:	080107bf 	.word	0x080107bf
 8010738:	08010803 	.word	0x08010803
 801073c:	08010803 	.word	0x08010803
 8010740:	08010803 	.word	0x08010803
 8010744:	08010803 	.word	0x08010803
 8010748:	08010803 	.word	0x08010803
 801074c:	08010803 	.word	0x08010803
 8010750:	08010803 	.word	0x08010803
 8010754:	080107cf 	.word	0x080107cf
 8010758:	08010803 	.word	0x08010803
 801075c:	08010803 	.word	0x08010803
 8010760:	08010803 	.word	0x08010803
 8010764:	08010803 	.word	0x08010803
 8010768:	08010803 	.word	0x08010803
 801076c:	08010803 	.word	0x08010803
 8010770:	08010803 	.word	0x08010803
 8010774:	08010803 	.word	0x08010803
 8010778:	08010803 	.word	0x08010803
 801077c:	08010803 	.word	0x08010803
 8010780:	08010803 	.word	0x08010803
 8010784:	08010803 	.word	0x08010803
 8010788:	08010803 	.word	0x08010803
 801078c:	08010803 	.word	0x08010803
 8010790:	08010803 	.word	0x08010803
 8010794:	080107f5 	.word	0x080107f5
 8010798:	2b40      	cmp	r3, #64	@ 0x40
 801079a:	d02e      	beq.n	80107fa <UART_SetConfig+0xa36>
 801079c:	e031      	b.n	8010802 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801079e:	f7fc fa09 	bl	800cbb4 <HAL_RCC_GetPCLK1Freq>
 80107a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80107a4:	e033      	b.n	801080e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80107a6:	f7fc fa1b 	bl	800cbe0 <HAL_RCC_GetPCLK2Freq>
 80107aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80107ac:	e02f      	b.n	801080e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fe f9ca 	bl	800eb4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80107b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107bc:	e027      	b.n	801080e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107be:	f107 0318 	add.w	r3, r7, #24
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fe fb16 	bl	800edf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107cc:	e01f      	b.n	801080e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80107ce:	4b2d      	ldr	r3, [pc, #180]	@ (8010884 <UART_SetConfig+0xac0>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f003 0320 	and.w	r3, r3, #32
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d009      	beq.n	80107ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80107da:	4b2a      	ldr	r3, [pc, #168]	@ (8010884 <UART_SetConfig+0xac0>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	08db      	lsrs	r3, r3, #3
 80107e0:	f003 0303 	and.w	r3, r3, #3
 80107e4:	4a28      	ldr	r2, [pc, #160]	@ (8010888 <UART_SetConfig+0xac4>)
 80107e6:	fa22 f303 	lsr.w	r3, r2, r3
 80107ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80107ec:	e00f      	b.n	801080e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80107ee:	4b26      	ldr	r3, [pc, #152]	@ (8010888 <UART_SetConfig+0xac4>)
 80107f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107f2:	e00c      	b.n	801080e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80107f4:	4b25      	ldr	r3, [pc, #148]	@ (801088c <UART_SetConfig+0xac8>)
 80107f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107f8:	e009      	b.n	801080e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80107fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80107fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010800:	e005      	b.n	801080e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010802:	2300      	movs	r3, #0
 8010804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010806:	2301      	movs	r3, #1
 8010808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801080c:	bf00      	nop
    }

    if (pclk != 0U)
 801080e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010810:	2b00      	cmp	r3, #0
 8010812:	d021      	beq.n	8010858 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010818:	4a1d      	ldr	r2, [pc, #116]	@ (8010890 <UART_SetConfig+0xacc>)
 801081a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801081e:	461a      	mov	r2, r3
 8010820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010822:	fbb3 f2f2 	udiv	r2, r3, r2
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	085b      	lsrs	r3, r3, #1
 801082c:	441a      	add	r2, r3
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	fbb2 f3f3 	udiv	r3, r2, r3
 8010836:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801083a:	2b0f      	cmp	r3, #15
 801083c:	d909      	bls.n	8010852 <UART_SetConfig+0xa8e>
 801083e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010844:	d205      	bcs.n	8010852 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010848:	b29a      	uxth	r2, r3
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	60da      	str	r2, [r3, #12]
 8010850:	e002      	b.n	8010858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010852:	2301      	movs	r3, #1
 8010854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	2201      	movs	r2, #1
 801085c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	2201      	movs	r2, #1
 8010864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	2200      	movs	r2, #0
 801086c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	2200      	movs	r2, #0
 8010872:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010874:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010878:	4618      	mov	r0, r3
 801087a:	3748      	adds	r7, #72	@ 0x48
 801087c:	46bd      	mov	sp, r7
 801087e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010882:	bf00      	nop
 8010884:	58024400 	.word	0x58024400
 8010888:	03d09000 	.word	0x03d09000
 801088c:	003d0900 	.word	0x003d0900
 8010890:	08015ca8 	.word	0x08015ca8

08010894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108a0:	f003 0308 	and.w	r3, r3, #8
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00a      	beq.n	80108be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	685b      	ldr	r3, [r3, #4]
 80108ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	430a      	orrs	r2, r1
 80108bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108c2:	f003 0301 	and.w	r3, r3, #1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d00a      	beq.n	80108e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	430a      	orrs	r2, r1
 80108de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108e4:	f003 0302 	and.w	r3, r3, #2
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d00a      	beq.n	8010902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	430a      	orrs	r2, r1
 8010900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010906:	f003 0304 	and.w	r3, r3, #4
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00a      	beq.n	8010924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	430a      	orrs	r2, r1
 8010922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010928:	f003 0310 	and.w	r3, r3, #16
 801092c:	2b00      	cmp	r3, #0
 801092e:	d00a      	beq.n	8010946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	430a      	orrs	r2, r1
 8010944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801094a:	f003 0320 	and.w	r3, r3, #32
 801094e:	2b00      	cmp	r3, #0
 8010950:	d00a      	beq.n	8010968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	689b      	ldr	r3, [r3, #8]
 8010958:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	430a      	orrs	r2, r1
 8010966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801096c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010970:	2b00      	cmp	r3, #0
 8010972:	d01a      	beq.n	80109aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	430a      	orrs	r2, r1
 8010988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801098e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010992:	d10a      	bne.n	80109aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	430a      	orrs	r2, r1
 80109a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00a      	beq.n	80109cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	430a      	orrs	r2, r1
 80109ca:	605a      	str	r2, [r3, #4]
  }
}
 80109cc:	bf00      	nop
 80109ce:	370c      	adds	r7, #12
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr

080109d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b098      	sub	sp, #96	@ 0x60
 80109dc:	af02      	add	r7, sp, #8
 80109de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80109e8:	f7f1 f976 	bl	8001cd8 <HAL_GetTick>
 80109ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f003 0308 	and.w	r3, r3, #8
 80109f8:	2b08      	cmp	r3, #8
 80109fa:	d12f      	bne.n	8010a5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80109fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a04:	2200      	movs	r2, #0
 8010a06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 f88e 	bl	8010b2c <UART_WaitOnFlagUntilTimeout>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d022      	beq.n	8010a5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a1e:	e853 3f00 	ldrex	r3, [r3]
 8010a22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	461a      	mov	r2, r3
 8010a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a3c:	e841 2300 	strex	r3, r2, [r1]
 8010a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d1e6      	bne.n	8010a16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2220      	movs	r2, #32
 8010a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	e063      	b.n	8010b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f003 0304 	and.w	r3, r3, #4
 8010a66:	2b04      	cmp	r3, #4
 8010a68:	d149      	bne.n	8010afe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a6e:	9300      	str	r3, [sp, #0]
 8010a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a72:	2200      	movs	r2, #0
 8010a74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 f857 	bl	8010b2c <UART_WaitOnFlagUntilTimeout>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d03c      	beq.n	8010afe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8c:	e853 3f00 	ldrex	r3, [r3]
 8010a90:	623b      	str	r3, [r7, #32]
   return(result);
 8010a92:	6a3b      	ldr	r3, [r7, #32]
 8010a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8010aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010aaa:	e841 2300 	strex	r3, r2, [r1]
 8010aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d1e6      	bne.n	8010a84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3308      	adds	r3, #8
 8010abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	e853 3f00 	ldrex	r3, [r3]
 8010ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f023 0301 	bic.w	r3, r3, #1
 8010acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	3308      	adds	r3, #8
 8010ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ad6:	61fa      	str	r2, [r7, #28]
 8010ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ada:	69b9      	ldr	r1, [r7, #24]
 8010adc:	69fa      	ldr	r2, [r7, #28]
 8010ade:	e841 2300 	strex	r3, r2, [r1]
 8010ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1e5      	bne.n	8010ab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2220      	movs	r2, #32
 8010aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010afa:	2303      	movs	r3, #3
 8010afc:	e012      	b.n	8010b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2220      	movs	r2, #32
 8010b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2220      	movs	r2, #32
 8010b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2200      	movs	r2, #0
 8010b12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2200      	movs	r2, #0
 8010b18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b22:	2300      	movs	r3, #0
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3758      	adds	r7, #88	@ 0x58
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	603b      	str	r3, [r7, #0]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b3c:	e04f      	b.n	8010bde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b3e:	69bb      	ldr	r3, [r7, #24]
 8010b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b44:	d04b      	beq.n	8010bde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b46:	f7f1 f8c7 	bl	8001cd8 <HAL_GetTick>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	69ba      	ldr	r2, [r7, #24]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d302      	bcc.n	8010b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d101      	bne.n	8010b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010b5c:	2303      	movs	r3, #3
 8010b5e:	e04e      	b.n	8010bfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f003 0304 	and.w	r3, r3, #4
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d037      	beq.n	8010bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	2b80      	cmp	r3, #128	@ 0x80
 8010b72:	d034      	beq.n	8010bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	2b40      	cmp	r3, #64	@ 0x40
 8010b78:	d031      	beq.n	8010bde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	69db      	ldr	r3, [r3, #28]
 8010b80:	f003 0308 	and.w	r3, r3, #8
 8010b84:	2b08      	cmp	r3, #8
 8010b86:	d110      	bne.n	8010baa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2208      	movs	r2, #8
 8010b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f000 f839 	bl	8010c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2208      	movs	r2, #8
 8010b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	e029      	b.n	8010bfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	69db      	ldr	r3, [r3, #28]
 8010bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010bb8:	d111      	bne.n	8010bde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	f000 f81f 	bl	8010c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2220      	movs	r2, #32
 8010bce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010bda:	2303      	movs	r3, #3
 8010bdc:	e00f      	b.n	8010bfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	69da      	ldr	r2, [r3, #28]
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	4013      	ands	r3, r2
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	bf0c      	ite	eq
 8010bee:	2301      	moveq	r3, #1
 8010bf0:	2300      	movne	r3, #0
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	79fb      	ldrb	r3, [r7, #7]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d0a0      	beq.n	8010b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010bfc:	2300      	movs	r3, #0
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3710      	adds	r7, #16
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
	...

08010c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b095      	sub	sp, #84	@ 0x54
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c18:	e853 3f00 	ldrex	r3, [r3]
 8010c1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010c36:	e841 2300 	strex	r3, r2, [r1]
 8010c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d1e6      	bne.n	8010c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	3308      	adds	r3, #8
 8010c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	e853 3f00 	ldrex	r3, [r3]
 8010c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c52:	69fa      	ldr	r2, [r7, #28]
 8010c54:	4b1e      	ldr	r3, [pc, #120]	@ (8010cd0 <UART_EndRxTransfer+0xc8>)
 8010c56:	4013      	ands	r3, r2
 8010c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	3308      	adds	r3, #8
 8010c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c6a:	e841 2300 	strex	r3, r2, [r1]
 8010c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1e5      	bne.n	8010c42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d118      	bne.n	8010cb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	e853 3f00 	ldrex	r3, [r3]
 8010c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	f023 0310 	bic.w	r3, r3, #16
 8010c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	461a      	mov	r2, r3
 8010c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c9c:	61bb      	str	r3, [r7, #24]
 8010c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca0:	6979      	ldr	r1, [r7, #20]
 8010ca2:	69ba      	ldr	r2, [r7, #24]
 8010ca4:	e841 2300 	strex	r3, r2, [r1]
 8010ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1e6      	bne.n	8010c7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2220      	movs	r2, #32
 8010cb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010cc4:	bf00      	nop
 8010cc6:	3754      	adds	r7, #84	@ 0x54
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr
 8010cd0:	effffffe 	.word	0xeffffffe

08010cd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b085      	sub	sp, #20
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d101      	bne.n	8010cea <HAL_UARTEx_DisableFifoMode+0x16>
 8010ce6:	2302      	movs	r3, #2
 8010ce8:	e027      	b.n	8010d3a <HAL_UARTEx_DisableFifoMode+0x66>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2201      	movs	r2, #1
 8010cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2224      	movs	r2, #36	@ 0x24
 8010cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	681a      	ldr	r2, [r3, #0]
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f022 0201 	bic.w	r2, r2, #1
 8010d10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010d18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2220      	movs	r2, #32
 8010d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2200      	movs	r2, #0
 8010d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010d38:	2300      	movs	r3, #0
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3714      	adds	r7, #20
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d44:	4770      	bx	lr

08010d46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010d46:	b580      	push	{r7, lr}
 8010d48:	b084      	sub	sp, #16
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]
 8010d4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010d56:	2b01      	cmp	r3, #1
 8010d58:	d101      	bne.n	8010d5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010d5a:	2302      	movs	r3, #2
 8010d5c:	e02d      	b.n	8010dba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2201      	movs	r2, #1
 8010d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2224      	movs	r2, #36	@ 0x24
 8010d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f022 0201 	bic.w	r2, r2, #1
 8010d84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	689b      	ldr	r3, [r3, #8]
 8010d8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	683a      	ldr	r2, [r7, #0]
 8010d96:	430a      	orrs	r2, r1
 8010d98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f000 f850 	bl	8010e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2220      	movs	r2, #32
 8010dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2200      	movs	r2, #0
 8010db4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010db8:	2300      	movs	r3, #0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b084      	sub	sp, #16
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
 8010dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d101      	bne.n	8010dda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010dd6:	2302      	movs	r3, #2
 8010dd8:	e02d      	b.n	8010e36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2224      	movs	r2, #36	@ 0x24
 8010de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f022 0201 	bic.w	r2, r2, #1
 8010e00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	689b      	ldr	r3, [r3, #8]
 8010e08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	683a      	ldr	r2, [r7, #0]
 8010e12:	430a      	orrs	r2, r1
 8010e14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f000 f812 	bl	8010e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	68fa      	ldr	r2, [r7, #12]
 8010e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2220      	movs	r2, #32
 8010e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3710      	adds	r7, #16
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}
	...

08010e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010e40:	b480      	push	{r7}
 8010e42:	b085      	sub	sp, #20
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d108      	bne.n	8010e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2201      	movs	r2, #1
 8010e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010e60:	e031      	b.n	8010ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010e62:	2310      	movs	r3, #16
 8010e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010e66:	2310      	movs	r3, #16
 8010e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	0e5b      	lsrs	r3, r3, #25
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	f003 0307 	and.w	r3, r3, #7
 8010e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	0f5b      	lsrs	r3, r3, #29
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	f003 0307 	and.w	r3, r3, #7
 8010e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010e8a:	7bbb      	ldrb	r3, [r7, #14]
 8010e8c:	7b3a      	ldrb	r2, [r7, #12]
 8010e8e:	4911      	ldr	r1, [pc, #68]	@ (8010ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8010e90:	5c8a      	ldrb	r2, [r1, r2]
 8010e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010e96:	7b3a      	ldrb	r2, [r7, #12]
 8010e98:	490f      	ldr	r1, [pc, #60]	@ (8010ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8010e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
 8010eaa:	7b7a      	ldrb	r2, [r7, #13]
 8010eac:	4909      	ldr	r1, [pc, #36]	@ (8010ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8010eae:	5c8a      	ldrb	r2, [r1, r2]
 8010eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010eb4:	7b7a      	ldrb	r2, [r7, #13]
 8010eb6:	4908      	ldr	r1, [pc, #32]	@ (8010ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8010eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010ec6:	bf00      	nop
 8010ec8:	3714      	adds	r7, #20
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	08015cc0 	.word	0x08015cc0
 8010ed8:	08015cc8 	.word	0x08015cc8

08010edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010edc:	b084      	sub	sp, #16
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b084      	sub	sp, #16
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	f107 001c 	add.w	r0, r7, #28
 8010eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010eee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	d121      	bne.n	8010f3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010efa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	68da      	ldr	r2, [r3, #12]
 8010f06:	4b2c      	ldr	r3, [pc, #176]	@ (8010fb8 <USB_CoreInit+0xdc>)
 8010f08:	4013      	ands	r3, r2
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d105      	bne.n	8010f2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f001 fafa 	bl	8012528 <USB_CoreReset>
 8010f34:	4603      	mov	r3, r0
 8010f36:	73fb      	strb	r3, [r7, #15]
 8010f38:	e01b      	b.n	8010f72 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f001 faee 	bl	8012528 <USB_CoreReset>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010f50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d106      	bne.n	8010f66 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	639a      	str	r2, [r3, #56]	@ 0x38
 8010f64:	e005      	b.n	8010f72 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010f72:	7fbb      	ldrb	r3, [r7, #30]
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d116      	bne.n	8010fa6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010f86:	4b0d      	ldr	r3, [pc, #52]	@ (8010fbc <USB_CoreInit+0xe0>)
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	f043 0206 	orr.w	r2, r3, #6
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	689b      	ldr	r3, [r3, #8]
 8010f9e:	f043 0220 	orr.w	r2, r3, #32
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010fb2:	b004      	add	sp, #16
 8010fb4:	4770      	bx	lr
 8010fb6:	bf00      	nop
 8010fb8:	ffbdffbf 	.word	0xffbdffbf
 8010fbc:	03ee0000 	.word	0x03ee0000

08010fc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b087      	sub	sp, #28
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	60f8      	str	r0, [r7, #12]
 8010fc8:	60b9      	str	r1, [r7, #8]
 8010fca:	4613      	mov	r3, r2
 8010fcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010fce:	79fb      	ldrb	r3, [r7, #7]
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	d165      	bne.n	80110a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	4a41      	ldr	r2, [pc, #260]	@ (80110dc <USB_SetTurnaroundTime+0x11c>)
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d906      	bls.n	8010fea <USB_SetTurnaroundTime+0x2a>
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	4a40      	ldr	r2, [pc, #256]	@ (80110e0 <USB_SetTurnaroundTime+0x120>)
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d202      	bcs.n	8010fea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010fe4:	230f      	movs	r3, #15
 8010fe6:	617b      	str	r3, [r7, #20]
 8010fe8:	e062      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	4a3c      	ldr	r2, [pc, #240]	@ (80110e0 <USB_SetTurnaroundTime+0x120>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d306      	bcc.n	8011000 <USB_SetTurnaroundTime+0x40>
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80110e4 <USB_SetTurnaroundTime+0x124>)
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	d202      	bcs.n	8011000 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010ffa:	230e      	movs	r3, #14
 8010ffc:	617b      	str	r3, [r7, #20]
 8010ffe:	e057      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	4a38      	ldr	r2, [pc, #224]	@ (80110e4 <USB_SetTurnaroundTime+0x124>)
 8011004:	4293      	cmp	r3, r2
 8011006:	d306      	bcc.n	8011016 <USB_SetTurnaroundTime+0x56>
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	4a37      	ldr	r2, [pc, #220]	@ (80110e8 <USB_SetTurnaroundTime+0x128>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d202      	bcs.n	8011016 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011010:	230d      	movs	r3, #13
 8011012:	617b      	str	r3, [r7, #20]
 8011014:	e04c      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	4a33      	ldr	r2, [pc, #204]	@ (80110e8 <USB_SetTurnaroundTime+0x128>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d306      	bcc.n	801102c <USB_SetTurnaroundTime+0x6c>
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	4a32      	ldr	r2, [pc, #200]	@ (80110ec <USB_SetTurnaroundTime+0x12c>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d802      	bhi.n	801102c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011026:	230c      	movs	r3, #12
 8011028:	617b      	str	r3, [r7, #20]
 801102a:	e041      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	4a2f      	ldr	r2, [pc, #188]	@ (80110ec <USB_SetTurnaroundTime+0x12c>)
 8011030:	4293      	cmp	r3, r2
 8011032:	d906      	bls.n	8011042 <USB_SetTurnaroundTime+0x82>
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	4a2e      	ldr	r2, [pc, #184]	@ (80110f0 <USB_SetTurnaroundTime+0x130>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d802      	bhi.n	8011042 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801103c:	230b      	movs	r3, #11
 801103e:	617b      	str	r3, [r7, #20]
 8011040:	e036      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	4a2a      	ldr	r2, [pc, #168]	@ (80110f0 <USB_SetTurnaroundTime+0x130>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d906      	bls.n	8011058 <USB_SetTurnaroundTime+0x98>
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	4a29      	ldr	r2, [pc, #164]	@ (80110f4 <USB_SetTurnaroundTime+0x134>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d802      	bhi.n	8011058 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011052:	230a      	movs	r3, #10
 8011054:	617b      	str	r3, [r7, #20]
 8011056:	e02b      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	4a26      	ldr	r2, [pc, #152]	@ (80110f4 <USB_SetTurnaroundTime+0x134>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d906      	bls.n	801106e <USB_SetTurnaroundTime+0xae>
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	4a25      	ldr	r2, [pc, #148]	@ (80110f8 <USB_SetTurnaroundTime+0x138>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d202      	bcs.n	801106e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011068:	2309      	movs	r3, #9
 801106a:	617b      	str	r3, [r7, #20]
 801106c:	e020      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	4a21      	ldr	r2, [pc, #132]	@ (80110f8 <USB_SetTurnaroundTime+0x138>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d306      	bcc.n	8011084 <USB_SetTurnaroundTime+0xc4>
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	4a20      	ldr	r2, [pc, #128]	@ (80110fc <USB_SetTurnaroundTime+0x13c>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d802      	bhi.n	8011084 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801107e:	2308      	movs	r3, #8
 8011080:	617b      	str	r3, [r7, #20]
 8011082:	e015      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	4a1d      	ldr	r2, [pc, #116]	@ (80110fc <USB_SetTurnaroundTime+0x13c>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d906      	bls.n	801109a <USB_SetTurnaroundTime+0xda>
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	4a1c      	ldr	r2, [pc, #112]	@ (8011100 <USB_SetTurnaroundTime+0x140>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d202      	bcs.n	801109a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011094:	2307      	movs	r3, #7
 8011096:	617b      	str	r3, [r7, #20]
 8011098:	e00a      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801109a:	2306      	movs	r3, #6
 801109c:	617b      	str	r3, [r7, #20]
 801109e:	e007      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80110a0:	79fb      	ldrb	r3, [r7, #7]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d102      	bne.n	80110ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80110a6:	2309      	movs	r3, #9
 80110a8:	617b      	str	r3, [r7, #20]
 80110aa:	e001      	b.n	80110b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80110ac:	2309      	movs	r3, #9
 80110ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	68da      	ldr	r2, [r3, #12]
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	029b      	lsls	r3, r3, #10
 80110c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80110c8:	431a      	orrs	r2, r3
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	371c      	adds	r7, #28
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr
 80110dc:	00d8acbf 	.word	0x00d8acbf
 80110e0:	00e4e1c0 	.word	0x00e4e1c0
 80110e4:	00f42400 	.word	0x00f42400
 80110e8:	01067380 	.word	0x01067380
 80110ec:	011a499f 	.word	0x011a499f
 80110f0:	01312cff 	.word	0x01312cff
 80110f4:	014ca43f 	.word	0x014ca43f
 80110f8:	016e3600 	.word	0x016e3600
 80110fc:	01a6ab1f 	.word	0x01a6ab1f
 8011100:	01e84800 	.word	0x01e84800

08011104 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	689b      	ldr	r3, [r3, #8]
 8011110:	f043 0201 	orr.w	r2, r3, #1
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	370c      	adds	r7, #12
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr

08011126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011126:	b480      	push	{r7}
 8011128:	b083      	sub	sp, #12
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	689b      	ldr	r3, [r3, #8]
 8011132:	f023 0201 	bic.w	r2, r3, #1
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801113a:	2300      	movs	r3, #0
}
 801113c:	4618      	mov	r0, r3
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	460b      	mov	r3, r1
 8011152:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011154:	2300      	movs	r3, #0
 8011156:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011164:	78fb      	ldrb	r3, [r7, #3]
 8011166:	2b01      	cmp	r3, #1
 8011168:	d115      	bne.n	8011196 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011176:	200a      	movs	r0, #10
 8011178:	f7f0 fdba 	bl	8001cf0 <HAL_Delay>
      ms += 10U;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	330a      	adds	r3, #10
 8011180:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f001 f93f 	bl	8012406 <USB_GetMode>
 8011188:	4603      	mov	r3, r0
 801118a:	2b01      	cmp	r3, #1
 801118c:	d01e      	beq.n	80111cc <USB_SetCurrentMode+0x84>
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2bc7      	cmp	r3, #199	@ 0xc7
 8011192:	d9f0      	bls.n	8011176 <USB_SetCurrentMode+0x2e>
 8011194:	e01a      	b.n	80111cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011196:	78fb      	ldrb	r3, [r7, #3]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d115      	bne.n	80111c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80111a8:	200a      	movs	r0, #10
 80111aa:	f7f0 fda1 	bl	8001cf0 <HAL_Delay>
      ms += 10U;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	330a      	adds	r3, #10
 80111b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	f001 f926 	bl	8012406 <USB_GetMode>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d005      	beq.n	80111cc <USB_SetCurrentMode+0x84>
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80111c4:	d9f0      	bls.n	80111a8 <USB_SetCurrentMode+0x60>
 80111c6:	e001      	b.n	80111cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80111c8:	2301      	movs	r3, #1
 80111ca:	e005      	b.n	80111d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2bc8      	cmp	r3, #200	@ 0xc8
 80111d0:	d101      	bne.n	80111d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80111d2:	2301      	movs	r3, #1
 80111d4:	e000      	b.n	80111d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80111d6:	2300      	movs	r3, #0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3710      	adds	r7, #16
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80111e0:	b084      	sub	sp, #16
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b086      	sub	sp, #24
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
 80111ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80111ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80111f2:	2300      	movs	r3, #0
 80111f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80111fa:	2300      	movs	r3, #0
 80111fc:	613b      	str	r3, [r7, #16]
 80111fe:	e009      	b.n	8011214 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	3340      	adds	r3, #64	@ 0x40
 8011206:	009b      	lsls	r3, r3, #2
 8011208:	4413      	add	r3, r2
 801120a:	2200      	movs	r2, #0
 801120c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	3301      	adds	r3, #1
 8011212:	613b      	str	r3, [r7, #16]
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	2b0e      	cmp	r3, #14
 8011218:	d9f2      	bls.n	8011200 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801121a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801121e:	2b00      	cmp	r3, #0
 8011220:	d11c      	bne.n	801125c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	68fa      	ldr	r2, [r7, #12]
 801122c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011230:	f043 0302 	orr.w	r3, r3, #2
 8011234:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801123a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	601a      	str	r2, [r3, #0]
 801125a:	e005      	b.n	8011268 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011260:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801126e:	461a      	mov	r2, r3
 8011270:	2300      	movs	r3, #0
 8011272:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011274:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8011278:	2b01      	cmp	r3, #1
 801127a:	d10d      	bne.n	8011298 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801127c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011280:	2b00      	cmp	r3, #0
 8011282:	d104      	bne.n	801128e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011284:	2100      	movs	r1, #0
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 f968 	bl	801155c <USB_SetDevSpeed>
 801128c:	e008      	b.n	80112a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801128e:	2101      	movs	r1, #1
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 f963 	bl	801155c <USB_SetDevSpeed>
 8011296:	e003      	b.n	80112a0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011298:	2103      	movs	r1, #3
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 f95e 	bl	801155c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80112a0:	2110      	movs	r1, #16
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 f8fa 	bl	801149c <USB_FlushTxFifo>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d001      	beq.n	80112b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80112ae:	2301      	movs	r3, #1
 80112b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 f924 	bl	8011500 <USB_FlushRxFifo>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d001      	beq.n	80112c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80112be:	2301      	movs	r3, #1
 80112c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112c8:	461a      	mov	r2, r3
 80112ca:	2300      	movs	r3, #0
 80112cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112d4:	461a      	mov	r2, r3
 80112d6:	2300      	movs	r3, #0
 80112d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80112e0:	461a      	mov	r2, r3
 80112e2:	2300      	movs	r3, #0
 80112e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80112e6:	2300      	movs	r3, #0
 80112e8:	613b      	str	r3, [r7, #16]
 80112ea:	e043      	b.n	8011374 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	015a      	lsls	r2, r3, #5
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	4413      	add	r3, r2
 80112f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80112fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011302:	d118      	bne.n	8011336 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d10a      	bne.n	8011320 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	015a      	lsls	r2, r3, #5
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	4413      	add	r3, r2
 8011312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011316:	461a      	mov	r2, r3
 8011318:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801131c:	6013      	str	r3, [r2, #0]
 801131e:	e013      	b.n	8011348 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	015a      	lsls	r2, r3, #5
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	4413      	add	r3, r2
 8011328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801132c:	461a      	mov	r2, r3
 801132e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011332:	6013      	str	r3, [r2, #0]
 8011334:	e008      	b.n	8011348 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	015a      	lsls	r2, r3, #5
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	4413      	add	r3, r2
 801133e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011342:	461a      	mov	r2, r3
 8011344:	2300      	movs	r3, #0
 8011346:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	015a      	lsls	r2, r3, #5
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	4413      	add	r3, r2
 8011350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011354:	461a      	mov	r2, r3
 8011356:	2300      	movs	r3, #0
 8011358:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	015a      	lsls	r2, r3, #5
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	4413      	add	r3, r2
 8011362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011366:	461a      	mov	r2, r3
 8011368:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801136c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	3301      	adds	r3, #1
 8011372:	613b      	str	r3, [r7, #16]
 8011374:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011378:	461a      	mov	r2, r3
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	4293      	cmp	r3, r2
 801137e:	d3b5      	bcc.n	80112ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011380:	2300      	movs	r3, #0
 8011382:	613b      	str	r3, [r7, #16]
 8011384:	e043      	b.n	801140e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	015a      	lsls	r2, r3, #5
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	4413      	add	r3, r2
 801138e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801139c:	d118      	bne.n	80113d0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d10a      	bne.n	80113ba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	015a      	lsls	r2, r3, #5
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	4413      	add	r3, r2
 80113ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113b0:	461a      	mov	r2, r3
 80113b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80113b6:	6013      	str	r3, [r2, #0]
 80113b8:	e013      	b.n	80113e2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	015a      	lsls	r2, r3, #5
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	4413      	add	r3, r2
 80113c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113c6:	461a      	mov	r2, r3
 80113c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80113cc:	6013      	str	r3, [r2, #0]
 80113ce:	e008      	b.n	80113e2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	015a      	lsls	r2, r3, #5
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	4413      	add	r3, r2
 80113d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113dc:	461a      	mov	r2, r3
 80113de:	2300      	movs	r3, #0
 80113e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	015a      	lsls	r2, r3, #5
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	4413      	add	r3, r2
 80113ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113ee:	461a      	mov	r2, r3
 80113f0:	2300      	movs	r3, #0
 80113f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	015a      	lsls	r2, r3, #5
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	4413      	add	r3, r2
 80113fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011400:	461a      	mov	r2, r3
 8011402:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011406:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	3301      	adds	r3, #1
 801140c:	613b      	str	r3, [r7, #16]
 801140e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011412:	461a      	mov	r2, r3
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	4293      	cmp	r3, r2
 8011418:	d3b5      	bcc.n	8011386 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011420:	691b      	ldr	r3, [r3, #16]
 8011422:	68fa      	ldr	r2, [r7, #12]
 8011424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801142c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801143a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801143c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011440:	2b00      	cmp	r3, #0
 8011442:	d105      	bne.n	8011450 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	699b      	ldr	r3, [r3, #24]
 8011448:	f043 0210 	orr.w	r2, r3, #16
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	699a      	ldr	r2, [r3, #24]
 8011454:	4b0f      	ldr	r3, [pc, #60]	@ (8011494 <USB_DevInit+0x2b4>)
 8011456:	4313      	orrs	r3, r2
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801145c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8011460:	2b00      	cmp	r3, #0
 8011462:	d005      	beq.n	8011470 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	699b      	ldr	r3, [r3, #24]
 8011468:	f043 0208 	orr.w	r2, r3, #8
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011470:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011474:	2b01      	cmp	r3, #1
 8011476:	d105      	bne.n	8011484 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	699a      	ldr	r2, [r3, #24]
 801147c:	4b06      	ldr	r3, [pc, #24]	@ (8011498 <USB_DevInit+0x2b8>)
 801147e:	4313      	orrs	r3, r2
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011484:	7dfb      	ldrb	r3, [r7, #23]
}
 8011486:	4618      	mov	r0, r3
 8011488:	3718      	adds	r7, #24
 801148a:	46bd      	mov	sp, r7
 801148c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011490:	b004      	add	sp, #16
 8011492:	4770      	bx	lr
 8011494:	803c3800 	.word	0x803c3800
 8011498:	40000004 	.word	0x40000004

0801149c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801149c:	b480      	push	{r7}
 801149e:	b085      	sub	sp, #20
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80114a6:	2300      	movs	r3, #0
 80114a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	3301      	adds	r3, #1
 80114ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80114b6:	d901      	bls.n	80114bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80114b8:	2303      	movs	r3, #3
 80114ba:	e01b      	b.n	80114f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	691b      	ldr	r3, [r3, #16]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	daf2      	bge.n	80114aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80114c4:	2300      	movs	r3, #0
 80114c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	019b      	lsls	r3, r3, #6
 80114cc:	f043 0220 	orr.w	r2, r3, #32
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	3301      	adds	r3, #1
 80114d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80114e0:	d901      	bls.n	80114e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80114e2:	2303      	movs	r3, #3
 80114e4:	e006      	b.n	80114f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	691b      	ldr	r3, [r3, #16]
 80114ea:	f003 0320 	and.w	r3, r3, #32
 80114ee:	2b20      	cmp	r3, #32
 80114f0:	d0f0      	beq.n	80114d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80114f2:	2300      	movs	r3, #0
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3714      	adds	r7, #20
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr

08011500 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011500:	b480      	push	{r7}
 8011502:	b085      	sub	sp, #20
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011508:	2300      	movs	r3, #0
 801150a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	3301      	adds	r3, #1
 8011510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011518:	d901      	bls.n	801151e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801151a:	2303      	movs	r3, #3
 801151c:	e018      	b.n	8011550 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	691b      	ldr	r3, [r3, #16]
 8011522:	2b00      	cmp	r3, #0
 8011524:	daf2      	bge.n	801150c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011526:	2300      	movs	r3, #0
 8011528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2210      	movs	r2, #16
 801152e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	3301      	adds	r3, #1
 8011534:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801153c:	d901      	bls.n	8011542 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801153e:	2303      	movs	r3, #3
 8011540:	e006      	b.n	8011550 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	691b      	ldr	r3, [r3, #16]
 8011546:	f003 0310 	and.w	r3, r3, #16
 801154a:	2b10      	cmp	r3, #16
 801154c:	d0f0      	beq.n	8011530 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801154e:	2300      	movs	r3, #0
}
 8011550:	4618      	mov	r0, r3
 8011552:	3714      	adds	r7, #20
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801155c:	b480      	push	{r7}
 801155e:	b085      	sub	sp, #20
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	460b      	mov	r3, r1
 8011566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	78fb      	ldrb	r3, [r7, #3]
 8011576:	68f9      	ldr	r1, [r7, #12]
 8011578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801157c:	4313      	orrs	r3, r2
 801157e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011580:	2300      	movs	r3, #0
}
 8011582:	4618      	mov	r0, r3
 8011584:	3714      	adds	r7, #20
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr

0801158e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801158e:	b480      	push	{r7}
 8011590:	b087      	sub	sp, #28
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	f003 0306 	and.w	r3, r3, #6
 80115a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d102      	bne.n	80115b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80115ae:	2300      	movs	r3, #0
 80115b0:	75fb      	strb	r3, [r7, #23]
 80115b2:	e00a      	b.n	80115ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2b02      	cmp	r3, #2
 80115b8:	d002      	beq.n	80115c0 <USB_GetDevSpeed+0x32>
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2b06      	cmp	r3, #6
 80115be:	d102      	bne.n	80115c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80115c0:	2302      	movs	r3, #2
 80115c2:	75fb      	strb	r3, [r7, #23]
 80115c4:	e001      	b.n	80115ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80115c6:	230f      	movs	r3, #15
 80115c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80115ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	371c      	adds	r7, #28
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80115d8:	b480      	push	{r7}
 80115da:	b085      	sub	sp, #20
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	781b      	ldrb	r3, [r3, #0]
 80115ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	785b      	ldrb	r3, [r3, #1]
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	d139      	bne.n	8011668 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80115fa:	69da      	ldr	r2, [r3, #28]
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	f003 030f 	and.w	r3, r3, #15
 8011604:	2101      	movs	r1, #1
 8011606:	fa01 f303 	lsl.w	r3, r1, r3
 801160a:	b29b      	uxth	r3, r3
 801160c:	68f9      	ldr	r1, [r7, #12]
 801160e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011612:	4313      	orrs	r3, r2
 8011614:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	015a      	lsls	r2, r3, #5
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	4413      	add	r3, r2
 801161e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011628:	2b00      	cmp	r3, #0
 801162a:	d153      	bne.n	80116d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	015a      	lsls	r2, r3, #5
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	4413      	add	r3, r2
 8011634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011638:	681a      	ldr	r2, [r3, #0]
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	689b      	ldr	r3, [r3, #8]
 801163e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	791b      	ldrb	r3, [r3, #4]
 8011646:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011648:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	059b      	lsls	r3, r3, #22
 801164e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011650:	431a      	orrs	r2, r3
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	0159      	lsls	r1, r3, #5
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	440b      	add	r3, r1
 801165a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801165e:	4619      	mov	r1, r3
 8011660:	4b20      	ldr	r3, [pc, #128]	@ (80116e4 <USB_ActivateEndpoint+0x10c>)
 8011662:	4313      	orrs	r3, r2
 8011664:	600b      	str	r3, [r1, #0]
 8011666:	e035      	b.n	80116d4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801166e:	69da      	ldr	r2, [r3, #28]
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	f003 030f 	and.w	r3, r3, #15
 8011678:	2101      	movs	r1, #1
 801167a:	fa01 f303 	lsl.w	r3, r1, r3
 801167e:	041b      	lsls	r3, r3, #16
 8011680:	68f9      	ldr	r1, [r7, #12]
 8011682:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011686:	4313      	orrs	r3, r2
 8011688:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	015a      	lsls	r2, r3, #5
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	4413      	add	r3, r2
 8011692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801169c:	2b00      	cmp	r3, #0
 801169e:	d119      	bne.n	80116d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	015a      	lsls	r2, r3, #5
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	4413      	add	r3, r2
 80116a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	689b      	ldr	r3, [r3, #8]
 80116b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	791b      	ldrb	r3, [r3, #4]
 80116ba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80116bc:	430b      	orrs	r3, r1
 80116be:	431a      	orrs	r2, r3
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	0159      	lsls	r1, r3, #5
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	440b      	add	r3, r1
 80116c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116cc:	4619      	mov	r1, r3
 80116ce:	4b05      	ldr	r3, [pc, #20]	@ (80116e4 <USB_ActivateEndpoint+0x10c>)
 80116d0:	4313      	orrs	r3, r2
 80116d2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3714      	adds	r7, #20
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	10008000 	.word	0x10008000

080116e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b085      	sub	sp, #20
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	785b      	ldrb	r3, [r3, #1]
 8011700:	2b01      	cmp	r3, #1
 8011702:	d161      	bne.n	80117c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	015a      	lsls	r2, r3, #5
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	4413      	add	r3, r2
 801170c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801171a:	d11f      	bne.n	801175c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	015a      	lsls	r2, r3, #5
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	4413      	add	r3, r2
 8011724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	68ba      	ldr	r2, [r7, #8]
 801172c:	0151      	lsls	r1, r2, #5
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	440a      	add	r2, r1
 8011732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011736:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801173a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	015a      	lsls	r2, r3, #5
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	4413      	add	r3, r2
 8011744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	68ba      	ldr	r2, [r7, #8]
 801174c:	0151      	lsls	r1, r2, #5
 801174e:	68fa      	ldr	r2, [r7, #12]
 8011750:	440a      	add	r2, r1
 8011752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011756:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801175a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	f003 030f 	and.w	r3, r3, #15
 801176c:	2101      	movs	r1, #1
 801176e:	fa01 f303 	lsl.w	r3, r1, r3
 8011772:	b29b      	uxth	r3, r3
 8011774:	43db      	mvns	r3, r3
 8011776:	68f9      	ldr	r1, [r7, #12]
 8011778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801177c:	4013      	ands	r3, r2
 801177e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011786:	69da      	ldr	r2, [r3, #28]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	f003 030f 	and.w	r3, r3, #15
 8011790:	2101      	movs	r1, #1
 8011792:	fa01 f303 	lsl.w	r3, r1, r3
 8011796:	b29b      	uxth	r3, r3
 8011798:	43db      	mvns	r3, r3
 801179a:	68f9      	ldr	r1, [r7, #12]
 801179c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80117a0:	4013      	ands	r3, r2
 80117a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	015a      	lsls	r2, r3, #5
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	4413      	add	r3, r2
 80117ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117b0:	681a      	ldr	r2, [r3, #0]
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	0159      	lsls	r1, r3, #5
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	440b      	add	r3, r1
 80117ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117be:	4619      	mov	r1, r3
 80117c0:	4b35      	ldr	r3, [pc, #212]	@ (8011898 <USB_DeactivateEndpoint+0x1b0>)
 80117c2:	4013      	ands	r3, r2
 80117c4:	600b      	str	r3, [r1, #0]
 80117c6:	e060      	b.n	801188a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	015a      	lsls	r2, r3, #5
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	4413      	add	r3, r2
 80117d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80117da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80117de:	d11f      	bne.n	8011820 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	015a      	lsls	r2, r3, #5
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	4413      	add	r3, r2
 80117e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	68ba      	ldr	r2, [r7, #8]
 80117f0:	0151      	lsls	r1, r2, #5
 80117f2:	68fa      	ldr	r2, [r7, #12]
 80117f4:	440a      	add	r2, r1
 80117f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80117fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80117fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	015a      	lsls	r2, r3, #5
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	4413      	add	r3, r2
 8011808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	0151      	lsls	r1, r2, #5
 8011812:	68fa      	ldr	r2, [r7, #12]
 8011814:	440a      	add	r2, r1
 8011816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801181a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801181e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	f003 030f 	and.w	r3, r3, #15
 8011830:	2101      	movs	r1, #1
 8011832:	fa01 f303 	lsl.w	r3, r1, r3
 8011836:	041b      	lsls	r3, r3, #16
 8011838:	43db      	mvns	r3, r3
 801183a:	68f9      	ldr	r1, [r7, #12]
 801183c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011840:	4013      	ands	r3, r2
 8011842:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801184a:	69da      	ldr	r2, [r3, #28]
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	f003 030f 	and.w	r3, r3, #15
 8011854:	2101      	movs	r1, #1
 8011856:	fa01 f303 	lsl.w	r3, r1, r3
 801185a:	041b      	lsls	r3, r3, #16
 801185c:	43db      	mvns	r3, r3
 801185e:	68f9      	ldr	r1, [r7, #12]
 8011860:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011864:	4013      	ands	r3, r2
 8011866:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	015a      	lsls	r2, r3, #5
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	4413      	add	r3, r2
 8011870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011874:	681a      	ldr	r2, [r3, #0]
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	0159      	lsls	r1, r3, #5
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	440b      	add	r3, r1
 801187e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011882:	4619      	mov	r1, r3
 8011884:	4b05      	ldr	r3, [pc, #20]	@ (801189c <USB_DeactivateEndpoint+0x1b4>)
 8011886:	4013      	ands	r3, r2
 8011888:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801188a:	2300      	movs	r3, #0
}
 801188c:	4618      	mov	r0, r3
 801188e:	3714      	adds	r7, #20
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr
 8011898:	ec337800 	.word	0xec337800
 801189c:	eff37800 	.word	0xeff37800

080118a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b08a      	sub	sp, #40	@ 0x28
 80118a4:	af02      	add	r7, sp, #8
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	4613      	mov	r3, r2
 80118ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	785b      	ldrb	r3, [r3, #1]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	f040 8185 	bne.w	8011bcc <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	691b      	ldr	r3, [r3, #16]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d132      	bne.n	8011930 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	015a      	lsls	r2, r3, #5
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	4413      	add	r3, r2
 80118d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118d6:	691a      	ldr	r2, [r3, #16]
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	0159      	lsls	r1, r3, #5
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	440b      	add	r3, r1
 80118e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118e4:	4619      	mov	r1, r3
 80118e6:	4ba7      	ldr	r3, [pc, #668]	@ (8011b84 <USB_EPStartXfer+0x2e4>)
 80118e8:	4013      	ands	r3, r2
 80118ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	015a      	lsls	r2, r3, #5
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	4413      	add	r3, r2
 80118f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80118f8:	691b      	ldr	r3, [r3, #16]
 80118fa:	69ba      	ldr	r2, [r7, #24]
 80118fc:	0151      	lsls	r1, r2, #5
 80118fe:	69fa      	ldr	r2, [r7, #28]
 8011900:	440a      	add	r2, r1
 8011902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011906:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801190a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801190c:	69bb      	ldr	r3, [r7, #24]
 801190e:	015a      	lsls	r2, r3, #5
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	4413      	add	r3, r2
 8011914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011918:	691a      	ldr	r2, [r3, #16]
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	0159      	lsls	r1, r3, #5
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	440b      	add	r3, r1
 8011922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011926:	4619      	mov	r1, r3
 8011928:	4b97      	ldr	r3, [pc, #604]	@ (8011b88 <USB_EPStartXfer+0x2e8>)
 801192a:	4013      	ands	r3, r2
 801192c:	610b      	str	r3, [r1, #16]
 801192e:	e097      	b.n	8011a60 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	015a      	lsls	r2, r3, #5
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	4413      	add	r3, r2
 8011938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801193c:	691a      	ldr	r2, [r3, #16]
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	0159      	lsls	r1, r3, #5
 8011942:	69fb      	ldr	r3, [r7, #28]
 8011944:	440b      	add	r3, r1
 8011946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801194a:	4619      	mov	r1, r3
 801194c:	4b8e      	ldr	r3, [pc, #568]	@ (8011b88 <USB_EPStartXfer+0x2e8>)
 801194e:	4013      	ands	r3, r2
 8011950:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011952:	69bb      	ldr	r3, [r7, #24]
 8011954:	015a      	lsls	r2, r3, #5
 8011956:	69fb      	ldr	r3, [r7, #28]
 8011958:	4413      	add	r3, r2
 801195a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801195e:	691a      	ldr	r2, [r3, #16]
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	0159      	lsls	r1, r3, #5
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	440b      	add	r3, r1
 8011968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801196c:	4619      	mov	r1, r3
 801196e:	4b85      	ldr	r3, [pc, #532]	@ (8011b84 <USB_EPStartXfer+0x2e4>)
 8011970:	4013      	ands	r3, r2
 8011972:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d11a      	bne.n	80119b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	691a      	ldr	r2, [r3, #16]
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	689b      	ldr	r3, [r3, #8]
 8011982:	429a      	cmp	r2, r3
 8011984:	d903      	bls.n	801198e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	689a      	ldr	r2, [r3, #8]
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801198e:	69bb      	ldr	r3, [r7, #24]
 8011990:	015a      	lsls	r2, r3, #5
 8011992:	69fb      	ldr	r3, [r7, #28]
 8011994:	4413      	add	r3, r2
 8011996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801199a:	691b      	ldr	r3, [r3, #16]
 801199c:	69ba      	ldr	r2, [r7, #24]
 801199e:	0151      	lsls	r1, r2, #5
 80119a0:	69fa      	ldr	r2, [r7, #28]
 80119a2:	440a      	add	r2, r1
 80119a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80119a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80119ac:	6113      	str	r3, [r2, #16]
 80119ae:	e044      	b.n	8011a3a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	691a      	ldr	r2, [r3, #16]
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	4413      	add	r3, r2
 80119ba:	1e5a      	subs	r2, r3, #1
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	689b      	ldr	r3, [r3, #8]
 80119c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80119c4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	015a      	lsls	r2, r3, #5
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	4413      	add	r3, r2
 80119ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119d2:	691a      	ldr	r2, [r3, #16]
 80119d4:	8afb      	ldrh	r3, [r7, #22]
 80119d6:	04d9      	lsls	r1, r3, #19
 80119d8:	4b6c      	ldr	r3, [pc, #432]	@ (8011b8c <USB_EPStartXfer+0x2ec>)
 80119da:	400b      	ands	r3, r1
 80119dc:	69b9      	ldr	r1, [r7, #24]
 80119de:	0148      	lsls	r0, r1, #5
 80119e0:	69f9      	ldr	r1, [r7, #28]
 80119e2:	4401      	add	r1, r0
 80119e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80119e8:	4313      	orrs	r3, r2
 80119ea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	791b      	ldrb	r3, [r3, #4]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d122      	bne.n	8011a3a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	015a      	lsls	r2, r3, #5
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	4413      	add	r3, r2
 80119fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a00:	691b      	ldr	r3, [r3, #16]
 8011a02:	69ba      	ldr	r2, [r7, #24]
 8011a04:	0151      	lsls	r1, r2, #5
 8011a06:	69fa      	ldr	r2, [r7, #28]
 8011a08:	440a      	add	r2, r1
 8011a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a0e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8011a12:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	015a      	lsls	r2, r3, #5
 8011a18:	69fb      	ldr	r3, [r7, #28]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a20:	691a      	ldr	r2, [r3, #16]
 8011a22:	8afb      	ldrh	r3, [r7, #22]
 8011a24:	075b      	lsls	r3, r3, #29
 8011a26:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8011a2a:	69b9      	ldr	r1, [r7, #24]
 8011a2c:	0148      	lsls	r0, r1, #5
 8011a2e:	69f9      	ldr	r1, [r7, #28]
 8011a30:	4401      	add	r1, r0
 8011a32:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011a36:	4313      	orrs	r3, r2
 8011a38:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	015a      	lsls	r2, r3, #5
 8011a3e:	69fb      	ldr	r3, [r7, #28]
 8011a40:	4413      	add	r3, r2
 8011a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a46:	691a      	ldr	r2, [r3, #16]
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	691b      	ldr	r3, [r3, #16]
 8011a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011a50:	69b9      	ldr	r1, [r7, #24]
 8011a52:	0148      	lsls	r0, r1, #5
 8011a54:	69f9      	ldr	r1, [r7, #28]
 8011a56:	4401      	add	r1, r0
 8011a58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011a5c:	4313      	orrs	r3, r2
 8011a5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011a60:	79fb      	ldrb	r3, [r7, #7]
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d14b      	bne.n	8011afe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	69db      	ldr	r3, [r3, #28]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d009      	beq.n	8011a82 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	015a      	lsls	r2, r3, #5
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	4413      	add	r3, r2
 8011a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	69db      	ldr	r3, [r3, #28]
 8011a80:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	791b      	ldrb	r3, [r3, #4]
 8011a86:	2b01      	cmp	r3, #1
 8011a88:	d128      	bne.n	8011adc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011a90:	689b      	ldr	r3, [r3, #8]
 8011a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d110      	bne.n	8011abc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	015a      	lsls	r2, r3, #5
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	69ba      	ldr	r2, [r7, #24]
 8011aaa:	0151      	lsls	r1, r2, #5
 8011aac:	69fa      	ldr	r2, [r7, #28]
 8011aae:	440a      	add	r2, r1
 8011ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ab4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011ab8:	6013      	str	r3, [r2, #0]
 8011aba:	e00f      	b.n	8011adc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	015a      	lsls	r2, r3, #5
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	69ba      	ldr	r2, [r7, #24]
 8011acc:	0151      	lsls	r1, r2, #5
 8011ace:	69fa      	ldr	r2, [r7, #28]
 8011ad0:	440a      	add	r2, r1
 8011ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011ada:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	015a      	lsls	r2, r3, #5
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	4413      	add	r3, r2
 8011ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	69ba      	ldr	r2, [r7, #24]
 8011aec:	0151      	lsls	r1, r2, #5
 8011aee:	69fa      	ldr	r2, [r7, #28]
 8011af0:	440a      	add	r2, r1
 8011af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011af6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011afa:	6013      	str	r3, [r2, #0]
 8011afc:	e169      	b.n	8011dd2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	015a      	lsls	r2, r3, #5
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	4413      	add	r3, r2
 8011b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	69ba      	ldr	r2, [r7, #24]
 8011b0e:	0151      	lsls	r1, r2, #5
 8011b10:	69fa      	ldr	r2, [r7, #28]
 8011b12:	440a      	add	r2, r1
 8011b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011b1c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	791b      	ldrb	r3, [r3, #4]
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d015      	beq.n	8011b52 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	691b      	ldr	r3, [r3, #16]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	f000 8151 	beq.w	8011dd2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	f003 030f 	and.w	r3, r3, #15
 8011b40:	2101      	movs	r1, #1
 8011b42:	fa01 f303 	lsl.w	r3, r1, r3
 8011b46:	69f9      	ldr	r1, [r7, #28]
 8011b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011b4c:	4313      	orrs	r3, r2
 8011b4e:	634b      	str	r3, [r1, #52]	@ 0x34
 8011b50:	e13f      	b.n	8011dd2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011b52:	69fb      	ldr	r3, [r7, #28]
 8011b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b58:	689b      	ldr	r3, [r3, #8]
 8011b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d116      	bne.n	8011b90 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	015a      	lsls	r2, r3, #5
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	4413      	add	r3, r2
 8011b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	69ba      	ldr	r2, [r7, #24]
 8011b72:	0151      	lsls	r1, r2, #5
 8011b74:	69fa      	ldr	r2, [r7, #28]
 8011b76:	440a      	add	r2, r1
 8011b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011b80:	6013      	str	r3, [r2, #0]
 8011b82:	e015      	b.n	8011bb0 <USB_EPStartXfer+0x310>
 8011b84:	e007ffff 	.word	0xe007ffff
 8011b88:	fff80000 	.word	0xfff80000
 8011b8c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011b90:	69bb      	ldr	r3, [r7, #24]
 8011b92:	015a      	lsls	r2, r3, #5
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	4413      	add	r3, r2
 8011b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	69ba      	ldr	r2, [r7, #24]
 8011ba0:	0151      	lsls	r1, r2, #5
 8011ba2:	69fa      	ldr	r2, [r7, #28]
 8011ba4:	440a      	add	r2, r1
 8011ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011bae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	68d9      	ldr	r1, [r3, #12]
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	781a      	ldrb	r2, [r3, #0]
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	691b      	ldr	r3, [r3, #16]
 8011bbc:	b298      	uxth	r0, r3
 8011bbe:	79fb      	ldrb	r3, [r7, #7]
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f000 f9b9 	bl	8011f3c <USB_WritePacket>
 8011bca:	e102      	b.n	8011dd2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	015a      	lsls	r2, r3, #5
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	4413      	add	r3, r2
 8011bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bd8:	691a      	ldr	r2, [r3, #16]
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	0159      	lsls	r1, r3, #5
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	440b      	add	r3, r1
 8011be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011be6:	4619      	mov	r1, r3
 8011be8:	4b7c      	ldr	r3, [pc, #496]	@ (8011ddc <USB_EPStartXfer+0x53c>)
 8011bea:	4013      	ands	r3, r2
 8011bec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	015a      	lsls	r2, r3, #5
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011bfa:	691a      	ldr	r2, [r3, #16]
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	0159      	lsls	r1, r3, #5
 8011c00:	69fb      	ldr	r3, [r7, #28]
 8011c02:	440b      	add	r3, r1
 8011c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c08:	4619      	mov	r1, r3
 8011c0a:	4b75      	ldr	r3, [pc, #468]	@ (8011de0 <USB_EPStartXfer+0x540>)
 8011c0c:	4013      	ands	r3, r2
 8011c0e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d12f      	bne.n	8011c76 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	691b      	ldr	r3, [r3, #16]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d003      	beq.n	8011c26 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	689a      	ldr	r2, [r3, #8]
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	689a      	ldr	r2, [r3, #8]
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	015a      	lsls	r2, r3, #5
 8011c32:	69fb      	ldr	r3, [r7, #28]
 8011c34:	4413      	add	r3, r2
 8011c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c3a:	691a      	ldr	r2, [r3, #16]
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	6a1b      	ldr	r3, [r3, #32]
 8011c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c44:	69b9      	ldr	r1, [r7, #24]
 8011c46:	0148      	lsls	r0, r1, #5
 8011c48:	69f9      	ldr	r1, [r7, #28]
 8011c4a:	4401      	add	r1, r0
 8011c4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011c50:	4313      	orrs	r3, r2
 8011c52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011c54:	69bb      	ldr	r3, [r7, #24]
 8011c56:	015a      	lsls	r2, r3, #5
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c60:	691b      	ldr	r3, [r3, #16]
 8011c62:	69ba      	ldr	r2, [r7, #24]
 8011c64:	0151      	lsls	r1, r2, #5
 8011c66:	69fa      	ldr	r2, [r7, #28]
 8011c68:	440a      	add	r2, r1
 8011c6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011c6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011c72:	6113      	str	r3, [r2, #16]
 8011c74:	e05f      	b.n	8011d36 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	691b      	ldr	r3, [r3, #16]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d123      	bne.n	8011cc6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	015a      	lsls	r2, r3, #5
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	4413      	add	r3, r2
 8011c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011c8a:	691a      	ldr	r2, [r3, #16]
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c94:	69b9      	ldr	r1, [r7, #24]
 8011c96:	0148      	lsls	r0, r1, #5
 8011c98:	69f9      	ldr	r1, [r7, #28]
 8011c9a:	4401      	add	r1, r0
 8011c9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011ca0:	4313      	orrs	r3, r2
 8011ca2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	015a      	lsls	r2, r3, #5
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	4413      	add	r3, r2
 8011cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cb0:	691b      	ldr	r3, [r3, #16]
 8011cb2:	69ba      	ldr	r2, [r7, #24]
 8011cb4:	0151      	lsls	r1, r2, #5
 8011cb6:	69fa      	ldr	r2, [r7, #28]
 8011cb8:	440a      	add	r2, r1
 8011cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011cbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011cc2:	6113      	str	r3, [r2, #16]
 8011cc4:	e037      	b.n	8011d36 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	691a      	ldr	r2, [r3, #16]
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	689b      	ldr	r3, [r3, #8]
 8011cce:	4413      	add	r3, r2
 8011cd0:	1e5a      	subs	r2, r3, #1
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cda:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	689b      	ldr	r3, [r3, #8]
 8011ce0:	8afa      	ldrh	r2, [r7, #22]
 8011ce2:	fb03 f202 	mul.w	r2, r3, r2
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011cea:	69bb      	ldr	r3, [r7, #24]
 8011cec:	015a      	lsls	r2, r3, #5
 8011cee:	69fb      	ldr	r3, [r7, #28]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cf6:	691a      	ldr	r2, [r3, #16]
 8011cf8:	8afb      	ldrh	r3, [r7, #22]
 8011cfa:	04d9      	lsls	r1, r3, #19
 8011cfc:	4b39      	ldr	r3, [pc, #228]	@ (8011de4 <USB_EPStartXfer+0x544>)
 8011cfe:	400b      	ands	r3, r1
 8011d00:	69b9      	ldr	r1, [r7, #24]
 8011d02:	0148      	lsls	r0, r1, #5
 8011d04:	69f9      	ldr	r1, [r7, #28]
 8011d06:	4401      	add	r1, r0
 8011d08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011d0c:	4313      	orrs	r3, r2
 8011d0e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	015a      	lsls	r2, r3, #5
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	4413      	add	r3, r2
 8011d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d1c:	691a      	ldr	r2, [r3, #16]
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	6a1b      	ldr	r3, [r3, #32]
 8011d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d26:	69b9      	ldr	r1, [r7, #24]
 8011d28:	0148      	lsls	r0, r1, #5
 8011d2a:	69f9      	ldr	r1, [r7, #28]
 8011d2c:	4401      	add	r1, r0
 8011d2e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011d32:	4313      	orrs	r3, r2
 8011d34:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011d36:	79fb      	ldrb	r3, [r7, #7]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d10d      	bne.n	8011d58 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	68db      	ldr	r3, [r3, #12]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d009      	beq.n	8011d58 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	68d9      	ldr	r1, [r3, #12]
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	015a      	lsls	r2, r3, #5
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	4413      	add	r3, r2
 8011d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d54:	460a      	mov	r2, r1
 8011d56:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	791b      	ldrb	r3, [r3, #4]
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d128      	bne.n	8011db2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d110      	bne.n	8011d92 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	015a      	lsls	r2, r3, #5
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	4413      	add	r3, r2
 8011d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	69ba      	ldr	r2, [r7, #24]
 8011d80:	0151      	lsls	r1, r2, #5
 8011d82:	69fa      	ldr	r2, [r7, #28]
 8011d84:	440a      	add	r2, r1
 8011d86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011d8e:	6013      	str	r3, [r2, #0]
 8011d90:	e00f      	b.n	8011db2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	015a      	lsls	r2, r3, #5
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	4413      	add	r3, r2
 8011d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	69ba      	ldr	r2, [r7, #24]
 8011da2:	0151      	lsls	r1, r2, #5
 8011da4:	69fa      	ldr	r2, [r7, #28]
 8011da6:	440a      	add	r2, r1
 8011da8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011db0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011db2:	69bb      	ldr	r3, [r7, #24]
 8011db4:	015a      	lsls	r2, r3, #5
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	4413      	add	r3, r2
 8011dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	69ba      	ldr	r2, [r7, #24]
 8011dc2:	0151      	lsls	r1, r2, #5
 8011dc4:	69fa      	ldr	r2, [r7, #28]
 8011dc6:	440a      	add	r2, r1
 8011dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011dcc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011dd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011dd2:	2300      	movs	r3, #0
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3720      	adds	r7, #32
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}
 8011ddc:	fff80000 	.word	0xfff80000
 8011de0:	e007ffff 	.word	0xe007ffff
 8011de4:	1ff80000 	.word	0x1ff80000

08011de8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b087      	sub	sp, #28
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011df2:	2300      	movs	r3, #0
 8011df4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011df6:	2300      	movs	r3, #0
 8011df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	785b      	ldrb	r3, [r3, #1]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d14a      	bne.n	8011e9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	015a      	lsls	r2, r3, #5
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	4413      	add	r3, r2
 8011e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011e1e:	f040 8086 	bne.w	8011f2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	015a      	lsls	r2, r3, #5
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	683a      	ldr	r2, [r7, #0]
 8011e34:	7812      	ldrb	r2, [r2, #0]
 8011e36:	0151      	lsls	r1, r2, #5
 8011e38:	693a      	ldr	r2, [r7, #16]
 8011e3a:	440a      	add	r2, r1
 8011e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011e40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011e44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	015a      	lsls	r2, r3, #5
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	4413      	add	r3, r2
 8011e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	7812      	ldrb	r2, [r2, #0]
 8011e5a:	0151      	lsls	r1, r2, #5
 8011e5c:	693a      	ldr	r2, [r7, #16]
 8011e5e:	440a      	add	r2, r1
 8011e60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011e64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011e68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d902      	bls.n	8011e80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8011e7e:	e056      	b.n	8011f2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	015a      	lsls	r2, r3, #5
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	4413      	add	r3, r2
 8011e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011e98:	d0e7      	beq.n	8011e6a <USB_EPStopXfer+0x82>
 8011e9a:	e048      	b.n	8011f2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	015a      	lsls	r2, r3, #5
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	4413      	add	r3, r2
 8011ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011eb4:	d13b      	bne.n	8011f2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	015a      	lsls	r2, r3, #5
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	7812      	ldrb	r2, [r2, #0]
 8011eca:	0151      	lsls	r1, r2, #5
 8011ecc:	693a      	ldr	r2, [r7, #16]
 8011ece:	440a      	add	r2, r1
 8011ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ed4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011ed8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	015a      	lsls	r2, r3, #5
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	683a      	ldr	r2, [r7, #0]
 8011eec:	7812      	ldrb	r2, [r2, #0]
 8011eee:	0151      	lsls	r1, r2, #5
 8011ef0:	693a      	ldr	r2, [r7, #16]
 8011ef2:	440a      	add	r2, r1
 8011ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ef8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011efc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	3301      	adds	r3, #1
 8011f02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d902      	bls.n	8011f14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011f0e:	2301      	movs	r3, #1
 8011f10:	75fb      	strb	r3, [r7, #23]
          break;
 8011f12:	e00c      	b.n	8011f2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	015a      	lsls	r2, r3, #5
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011f2c:	d0e7      	beq.n	8011efe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	371c      	adds	r7, #28
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr

08011f3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b089      	sub	sp, #36	@ 0x24
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	4611      	mov	r1, r2
 8011f48:	461a      	mov	r2, r3
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	71fb      	strb	r3, [r7, #7]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d123      	bne.n	8011faa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011f62:	88bb      	ldrh	r3, [r7, #4]
 8011f64:	3303      	adds	r3, #3
 8011f66:	089b      	lsrs	r3, r3, #2
 8011f68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	61bb      	str	r3, [r7, #24]
 8011f6e:	e018      	b.n	8011fa2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011f70:	79fb      	ldrb	r3, [r7, #7]
 8011f72:	031a      	lsls	r2, r3, #12
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	4413      	add	r3, r2
 8011f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	3301      	adds	r3, #1
 8011f88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011f8a:	69fb      	ldr	r3, [r7, #28]
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	3301      	adds	r3, #1
 8011f94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	3301      	adds	r3, #1
 8011f9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011f9c:	69bb      	ldr	r3, [r7, #24]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	61bb      	str	r3, [r7, #24]
 8011fa2:	69ba      	ldr	r2, [r7, #24]
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d3e2      	bcc.n	8011f70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011faa:	2300      	movs	r3, #0
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3724      	adds	r7, #36	@ 0x24
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b08b      	sub	sp, #44	@ 0x2c
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	60f8      	str	r0, [r7, #12]
 8011fc0:	60b9      	str	r1, [r7, #8]
 8011fc2:	4613      	mov	r3, r2
 8011fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011fce:	88fb      	ldrh	r3, [r7, #6]
 8011fd0:	089b      	lsrs	r3, r3, #2
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011fd6:	88fb      	ldrh	r3, [r7, #6]
 8011fd8:	f003 0303 	and.w	r3, r3, #3
 8011fdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011fde:	2300      	movs	r3, #0
 8011fe0:	623b      	str	r3, [r7, #32]
 8011fe2:	e014      	b.n	801200e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011fe4:	69bb      	ldr	r3, [r7, #24]
 8011fe6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fee:	601a      	str	r2, [r3, #0]
    pDest++;
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ffe:	3301      	adds	r3, #1
 8012000:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012004:	3301      	adds	r3, #1
 8012006:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8012008:	6a3b      	ldr	r3, [r7, #32]
 801200a:	3301      	adds	r3, #1
 801200c:	623b      	str	r3, [r7, #32]
 801200e:	6a3a      	ldr	r2, [r7, #32]
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	429a      	cmp	r2, r3
 8012014:	d3e6      	bcc.n	8011fe4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012016:	8bfb      	ldrh	r3, [r7, #30]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d01e      	beq.n	801205a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801201c:	2300      	movs	r3, #0
 801201e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012026:	461a      	mov	r2, r3
 8012028:	f107 0310 	add.w	r3, r7, #16
 801202c:	6812      	ldr	r2, [r2, #0]
 801202e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012030:	693a      	ldr	r2, [r7, #16]
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	b2db      	uxtb	r3, r3
 8012036:	00db      	lsls	r3, r3, #3
 8012038:	fa22 f303 	lsr.w	r3, r2, r3
 801203c:	b2da      	uxtb	r2, r3
 801203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012040:	701a      	strb	r2, [r3, #0]
      i++;
 8012042:	6a3b      	ldr	r3, [r7, #32]
 8012044:	3301      	adds	r3, #1
 8012046:	623b      	str	r3, [r7, #32]
      pDest++;
 8012048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801204a:	3301      	adds	r3, #1
 801204c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801204e:	8bfb      	ldrh	r3, [r7, #30]
 8012050:	3b01      	subs	r3, #1
 8012052:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012054:	8bfb      	ldrh	r3, [r7, #30]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1ea      	bne.n	8012030 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801205c:	4618      	mov	r0, r3
 801205e:	372c      	adds	r7, #44	@ 0x2c
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr

08012068 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012068:	b480      	push	{r7}
 801206a:	b085      	sub	sp, #20
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	785b      	ldrb	r3, [r3, #1]
 8012080:	2b01      	cmp	r3, #1
 8012082:	d12c      	bne.n	80120de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	015a      	lsls	r2, r3, #5
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	4413      	add	r3, r2
 801208c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	db12      	blt.n	80120bc <USB_EPSetStall+0x54>
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00f      	beq.n	80120bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	015a      	lsls	r2, r3, #5
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	4413      	add	r3, r2
 80120a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68ba      	ldr	r2, [r7, #8]
 80120ac:	0151      	lsls	r1, r2, #5
 80120ae:	68fa      	ldr	r2, [r7, #12]
 80120b0:	440a      	add	r2, r1
 80120b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80120b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80120ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	015a      	lsls	r2, r3, #5
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	4413      	add	r3, r2
 80120c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	68ba      	ldr	r2, [r7, #8]
 80120cc:	0151      	lsls	r1, r2, #5
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	440a      	add	r2, r1
 80120d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80120d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80120da:	6013      	str	r3, [r2, #0]
 80120dc:	e02b      	b.n	8012136 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	015a      	lsls	r2, r3, #5
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	4413      	add	r3, r2
 80120e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	db12      	blt.n	8012116 <USB_EPSetStall+0xae>
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d00f      	beq.n	8012116 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	015a      	lsls	r2, r3, #5
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	4413      	add	r3, r2
 80120fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	68ba      	ldr	r2, [r7, #8]
 8012106:	0151      	lsls	r1, r2, #5
 8012108:	68fa      	ldr	r2, [r7, #12]
 801210a:	440a      	add	r2, r1
 801210c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012110:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012114:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	015a      	lsls	r2, r3, #5
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	4413      	add	r3, r2
 801211e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	68ba      	ldr	r2, [r7, #8]
 8012126:	0151      	lsls	r1, r2, #5
 8012128:	68fa      	ldr	r2, [r7, #12]
 801212a:	440a      	add	r2, r1
 801212c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012130:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012134:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012136:	2300      	movs	r3, #0
}
 8012138:	4618      	mov	r0, r3
 801213a:	3714      	adds	r7, #20
 801213c:	46bd      	mov	sp, r7
 801213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012142:	4770      	bx	lr

08012144 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012144:	b480      	push	{r7}
 8012146:	b085      	sub	sp, #20
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
 801214c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	785b      	ldrb	r3, [r3, #1]
 801215c:	2b01      	cmp	r3, #1
 801215e:	d128      	bne.n	80121b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	015a      	lsls	r2, r3, #5
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	4413      	add	r3, r2
 8012168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	68ba      	ldr	r2, [r7, #8]
 8012170:	0151      	lsls	r1, r2, #5
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	440a      	add	r2, r1
 8012176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801217a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801217e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	791b      	ldrb	r3, [r3, #4]
 8012184:	2b03      	cmp	r3, #3
 8012186:	d003      	beq.n	8012190 <USB_EPClearStall+0x4c>
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	791b      	ldrb	r3, [r3, #4]
 801218c:	2b02      	cmp	r3, #2
 801218e:	d138      	bne.n	8012202 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	015a      	lsls	r2, r3, #5
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	4413      	add	r3, r2
 8012198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	68ba      	ldr	r2, [r7, #8]
 80121a0:	0151      	lsls	r1, r2, #5
 80121a2:	68fa      	ldr	r2, [r7, #12]
 80121a4:	440a      	add	r2, r1
 80121a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80121aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80121ae:	6013      	str	r3, [r2, #0]
 80121b0:	e027      	b.n	8012202 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	015a      	lsls	r2, r3, #5
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	4413      	add	r3, r2
 80121ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	68ba      	ldr	r2, [r7, #8]
 80121c2:	0151      	lsls	r1, r2, #5
 80121c4:	68fa      	ldr	r2, [r7, #12]
 80121c6:	440a      	add	r2, r1
 80121c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80121cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80121d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	791b      	ldrb	r3, [r3, #4]
 80121d6:	2b03      	cmp	r3, #3
 80121d8:	d003      	beq.n	80121e2 <USB_EPClearStall+0x9e>
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	791b      	ldrb	r3, [r3, #4]
 80121de:	2b02      	cmp	r3, #2
 80121e0:	d10f      	bne.n	8012202 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	015a      	lsls	r2, r3, #5
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	4413      	add	r3, r2
 80121ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	68ba      	ldr	r2, [r7, #8]
 80121f2:	0151      	lsls	r1, r2, #5
 80121f4:	68fa      	ldr	r2, [r7, #12]
 80121f6:	440a      	add	r2, r1
 80121f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80121fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012200:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012202:	2300      	movs	r3, #0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3714      	adds	r7, #20
 8012208:	46bd      	mov	sp, r7
 801220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220e:	4770      	bx	lr

08012210 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012210:	b480      	push	{r7}
 8012212:	b085      	sub	sp, #20
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	460b      	mov	r3, r1
 801221a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	68fa      	ldr	r2, [r7, #12]
 801222a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801222e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012232:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	78fb      	ldrb	r3, [r7, #3]
 801223e:	011b      	lsls	r3, r3, #4
 8012240:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012244:	68f9      	ldr	r1, [r7, #12]
 8012246:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801224a:	4313      	orrs	r3, r2
 801224c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801224e:	2300      	movs	r3, #0
}
 8012250:	4618      	mov	r0, r3
 8012252:	3714      	adds	r7, #20
 8012254:	46bd      	mov	sp, r7
 8012256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225a:	4770      	bx	lr

0801225c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801225c:	b480      	push	{r7}
 801225e:	b085      	sub	sp, #20
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	68fa      	ldr	r2, [r7, #12]
 8012272:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012276:	f023 0303 	bic.w	r3, r3, #3
 801227a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	68fa      	ldr	r2, [r7, #12]
 8012286:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801228a:	f023 0302 	bic.w	r3, r3, #2
 801228e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3714      	adds	r7, #20
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr

0801229e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801229e:	b480      	push	{r7}
 80122a0:	b085      	sub	sp, #20
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	68fa      	ldr	r2, [r7, #12]
 80122b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80122b8:	f023 0303 	bic.w	r3, r3, #3
 80122bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	68fa      	ldr	r2, [r7, #12]
 80122c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80122cc:	f043 0302 	orr.w	r3, r3, #2
 80122d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80122d2:	2300      	movs	r3, #0
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3714      	adds	r7, #20
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b085      	sub	sp, #20
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	695b      	ldr	r3, [r3, #20]
 80122ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	699b      	ldr	r3, [r3, #24]
 80122f2:	68fa      	ldr	r2, [r7, #12]
 80122f4:	4013      	ands	r3, r2
 80122f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80122f8:	68fb      	ldr	r3, [r7, #12]
}
 80122fa:	4618      	mov	r0, r3
 80122fc:	3714      	adds	r7, #20
 80122fe:	46bd      	mov	sp, r7
 8012300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012304:	4770      	bx	lr

08012306 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012306:	b480      	push	{r7}
 8012308:	b085      	sub	sp, #20
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012318:	699b      	ldr	r3, [r3, #24]
 801231a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012322:	69db      	ldr	r3, [r3, #28]
 8012324:	68ba      	ldr	r2, [r7, #8]
 8012326:	4013      	ands	r3, r2
 8012328:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	0c1b      	lsrs	r3, r3, #16
}
 801232e:	4618      	mov	r0, r3
 8012330:	3714      	adds	r7, #20
 8012332:	46bd      	mov	sp, r7
 8012334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012338:	4770      	bx	lr

0801233a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801233a:	b480      	push	{r7}
 801233c:	b085      	sub	sp, #20
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801234c:	699b      	ldr	r3, [r3, #24]
 801234e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012356:	69db      	ldr	r3, [r3, #28]
 8012358:	68ba      	ldr	r2, [r7, #8]
 801235a:	4013      	ands	r3, r2
 801235c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	b29b      	uxth	r3, r3
}
 8012362:	4618      	mov	r0, r3
 8012364:	3714      	adds	r7, #20
 8012366:	46bd      	mov	sp, r7
 8012368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236c:	4770      	bx	lr

0801236e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801236e:	b480      	push	{r7}
 8012370:	b085      	sub	sp, #20
 8012372:	af00      	add	r7, sp, #0
 8012374:	6078      	str	r0, [r7, #4]
 8012376:	460b      	mov	r3, r1
 8012378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801237e:	78fb      	ldrb	r3, [r7, #3]
 8012380:	015a      	lsls	r2, r3, #5
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	4413      	add	r3, r2
 8012386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801238a:	689b      	ldr	r3, [r3, #8]
 801238c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012394:	695b      	ldr	r3, [r3, #20]
 8012396:	68ba      	ldr	r2, [r7, #8]
 8012398:	4013      	ands	r3, r2
 801239a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801239c:	68bb      	ldr	r3, [r7, #8]
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3714      	adds	r7, #20
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr

080123aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80123aa:	b480      	push	{r7}
 80123ac:	b087      	sub	sp, #28
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
 80123b2:	460b      	mov	r3, r1
 80123b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123c0:	691b      	ldr	r3, [r3, #16]
 80123c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80123ce:	78fb      	ldrb	r3, [r7, #3]
 80123d0:	f003 030f 	and.w	r3, r3, #15
 80123d4:	68fa      	ldr	r2, [r7, #12]
 80123d6:	fa22 f303 	lsr.w	r3, r2, r3
 80123da:	01db      	lsls	r3, r3, #7
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	693a      	ldr	r2, [r7, #16]
 80123e0:	4313      	orrs	r3, r2
 80123e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80123e4:	78fb      	ldrb	r3, [r7, #3]
 80123e6:	015a      	lsls	r2, r3, #5
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	4413      	add	r3, r2
 80123ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123f0:	689b      	ldr	r3, [r3, #8]
 80123f2:	693a      	ldr	r2, [r7, #16]
 80123f4:	4013      	ands	r3, r2
 80123f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80123f8:	68bb      	ldr	r3, [r7, #8]
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	371c      	adds	r7, #28
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8012406:	b480      	push	{r7}
 8012408:	b083      	sub	sp, #12
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	695b      	ldr	r3, [r3, #20]
 8012412:	f003 0301 	and.w	r3, r3, #1
}
 8012416:	4618      	mov	r0, r3
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
	...

08012424 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801243e:	4619      	mov	r1, r3
 8012440:	4b09      	ldr	r3, [pc, #36]	@ (8012468 <USB_ActivateSetup+0x44>)
 8012442:	4013      	ands	r3, r2
 8012444:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	68fa      	ldr	r2, [r7, #12]
 8012450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801245a:	2300      	movs	r3, #0
}
 801245c:	4618      	mov	r0, r3
 801245e:	3714      	adds	r7, #20
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr
 8012468:	fffff800 	.word	0xfffff800

0801246c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801246c:	b480      	push	{r7}
 801246e:	b087      	sub	sp, #28
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	460b      	mov	r3, r1
 8012476:	607a      	str	r2, [r7, #4]
 8012478:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	333c      	adds	r3, #60	@ 0x3c
 8012482:	3304      	adds	r3, #4
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	4a26      	ldr	r2, [pc, #152]	@ (8012524 <USB_EP0_OutStart+0xb8>)
 801248c:	4293      	cmp	r3, r2
 801248e:	d90a      	bls.n	80124a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801249c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80124a0:	d101      	bne.n	80124a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80124a2:	2300      	movs	r3, #0
 80124a4:	e037      	b.n	8012516 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124ac:	461a      	mov	r2, r3
 80124ae:	2300      	movs	r3, #0
 80124b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124b8:	691b      	ldr	r3, [r3, #16]
 80124ba:	697a      	ldr	r2, [r7, #20]
 80124bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80124c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80124c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124cc:	691b      	ldr	r3, [r3, #16]
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80124d4:	f043 0318 	orr.w	r3, r3, #24
 80124d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124e0:	691b      	ldr	r3, [r3, #16]
 80124e2:	697a      	ldr	r2, [r7, #20]
 80124e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80124e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80124ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80124ee:	7afb      	ldrb	r3, [r7, #11]
 80124f0:	2b01      	cmp	r3, #1
 80124f2:	d10f      	bne.n	8012514 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124fa:	461a      	mov	r2, r3
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	697a      	ldr	r2, [r7, #20]
 801250a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801250e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012512:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	371c      	adds	r7, #28
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop
 8012524:	4f54300a 	.word	0x4f54300a

08012528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012528:	b480      	push	{r7}
 801252a:	b085      	sub	sp, #20
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012530:	2300      	movs	r3, #0
 8012532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	3301      	adds	r3, #1
 8012538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012540:	d901      	bls.n	8012546 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012542:	2303      	movs	r3, #3
 8012544:	e01b      	b.n	801257e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	691b      	ldr	r3, [r3, #16]
 801254a:	2b00      	cmp	r3, #0
 801254c:	daf2      	bge.n	8012534 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801254e:	2300      	movs	r3, #0
 8012550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	691b      	ldr	r3, [r3, #16]
 8012556:	f043 0201 	orr.w	r2, r3, #1
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	3301      	adds	r3, #1
 8012562:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801256a:	d901      	bls.n	8012570 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801256c:	2303      	movs	r3, #3
 801256e:	e006      	b.n	801257e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	691b      	ldr	r3, [r3, #16]
 8012574:	f003 0301 	and.w	r3, r3, #1
 8012578:	2b01      	cmp	r3, #1
 801257a:	d0f0      	beq.n	801255e <USB_CoreReset+0x36>

  return HAL_OK;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3714      	adds	r7, #20
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
	...

0801258c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	460b      	mov	r3, r1
 8012596:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012598:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801259c:	f002 fcfe 	bl	8014f9c <USBD_static_malloc>
 80125a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d109      	bne.n	80125bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	32b0      	adds	r2, #176	@ 0xb0
 80125b2:	2100      	movs	r1, #0
 80125b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80125b8:	2302      	movs	r3, #2
 80125ba:	e0d4      	b.n	8012766 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80125bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80125c0:	2100      	movs	r1, #0
 80125c2:	68f8      	ldr	r0, [r7, #12]
 80125c4:	f002 fd50 	bl	8015068 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	32b0      	adds	r2, #176	@ 0xb0
 80125d2:	68f9      	ldr	r1, [r7, #12]
 80125d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	32b0      	adds	r2, #176	@ 0xb0
 80125e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	7c1b      	ldrb	r3, [r3, #16]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d138      	bne.n	8012666 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80125f4:	4b5e      	ldr	r3, [pc, #376]	@ (8012770 <USBD_CDC_Init+0x1e4>)
 80125f6:	7819      	ldrb	r1, [r3, #0]
 80125f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80125fc:	2202      	movs	r2, #2
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f002 fba9 	bl	8014d56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012604:	4b5a      	ldr	r3, [pc, #360]	@ (8012770 <USBD_CDC_Init+0x1e4>)
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	f003 020f 	and.w	r2, r3, #15
 801260c:	6879      	ldr	r1, [r7, #4]
 801260e:	4613      	mov	r3, r2
 8012610:	009b      	lsls	r3, r3, #2
 8012612:	4413      	add	r3, r2
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	440b      	add	r3, r1
 8012618:	3324      	adds	r3, #36	@ 0x24
 801261a:	2201      	movs	r2, #1
 801261c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801261e:	4b55      	ldr	r3, [pc, #340]	@ (8012774 <USBD_CDC_Init+0x1e8>)
 8012620:	7819      	ldrb	r1, [r3, #0]
 8012622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012626:	2202      	movs	r2, #2
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	f002 fb94 	bl	8014d56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801262e:	4b51      	ldr	r3, [pc, #324]	@ (8012774 <USBD_CDC_Init+0x1e8>)
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	f003 020f 	and.w	r2, r3, #15
 8012636:	6879      	ldr	r1, [r7, #4]
 8012638:	4613      	mov	r3, r2
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	4413      	add	r3, r2
 801263e:	009b      	lsls	r3, r3, #2
 8012640:	440b      	add	r3, r1
 8012642:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012646:	2201      	movs	r2, #1
 8012648:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801264a:	4b4b      	ldr	r3, [pc, #300]	@ (8012778 <USBD_CDC_Init+0x1ec>)
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	f003 020f 	and.w	r2, r3, #15
 8012652:	6879      	ldr	r1, [r7, #4]
 8012654:	4613      	mov	r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	4413      	add	r3, r2
 801265a:	009b      	lsls	r3, r3, #2
 801265c:	440b      	add	r3, r1
 801265e:	3326      	adds	r3, #38	@ 0x26
 8012660:	2210      	movs	r2, #16
 8012662:	801a      	strh	r2, [r3, #0]
 8012664:	e035      	b.n	80126d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012666:	4b42      	ldr	r3, [pc, #264]	@ (8012770 <USBD_CDC_Init+0x1e4>)
 8012668:	7819      	ldrb	r1, [r3, #0]
 801266a:	2340      	movs	r3, #64	@ 0x40
 801266c:	2202      	movs	r2, #2
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f002 fb71 	bl	8014d56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012674:	4b3e      	ldr	r3, [pc, #248]	@ (8012770 <USBD_CDC_Init+0x1e4>)
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	f003 020f 	and.w	r2, r3, #15
 801267c:	6879      	ldr	r1, [r7, #4]
 801267e:	4613      	mov	r3, r2
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	4413      	add	r3, r2
 8012684:	009b      	lsls	r3, r3, #2
 8012686:	440b      	add	r3, r1
 8012688:	3324      	adds	r3, #36	@ 0x24
 801268a:	2201      	movs	r2, #1
 801268c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801268e:	4b39      	ldr	r3, [pc, #228]	@ (8012774 <USBD_CDC_Init+0x1e8>)
 8012690:	7819      	ldrb	r1, [r3, #0]
 8012692:	2340      	movs	r3, #64	@ 0x40
 8012694:	2202      	movs	r2, #2
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f002 fb5d 	bl	8014d56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801269c:	4b35      	ldr	r3, [pc, #212]	@ (8012774 <USBD_CDC_Init+0x1e8>)
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	f003 020f 	and.w	r2, r3, #15
 80126a4:	6879      	ldr	r1, [r7, #4]
 80126a6:	4613      	mov	r3, r2
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	4413      	add	r3, r2
 80126ac:	009b      	lsls	r3, r3, #2
 80126ae:	440b      	add	r3, r1
 80126b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80126b4:	2201      	movs	r2, #1
 80126b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80126b8:	4b2f      	ldr	r3, [pc, #188]	@ (8012778 <USBD_CDC_Init+0x1ec>)
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	f003 020f 	and.w	r2, r3, #15
 80126c0:	6879      	ldr	r1, [r7, #4]
 80126c2:	4613      	mov	r3, r2
 80126c4:	009b      	lsls	r3, r3, #2
 80126c6:	4413      	add	r3, r2
 80126c8:	009b      	lsls	r3, r3, #2
 80126ca:	440b      	add	r3, r1
 80126cc:	3326      	adds	r3, #38	@ 0x26
 80126ce:	2210      	movs	r2, #16
 80126d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80126d2:	4b29      	ldr	r3, [pc, #164]	@ (8012778 <USBD_CDC_Init+0x1ec>)
 80126d4:	7819      	ldrb	r1, [r3, #0]
 80126d6:	2308      	movs	r3, #8
 80126d8:	2203      	movs	r2, #3
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f002 fb3b 	bl	8014d56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80126e0:	4b25      	ldr	r3, [pc, #148]	@ (8012778 <USBD_CDC_Init+0x1ec>)
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	f003 020f 	and.w	r2, r3, #15
 80126e8:	6879      	ldr	r1, [r7, #4]
 80126ea:	4613      	mov	r3, r2
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	4413      	add	r3, r2
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	440b      	add	r3, r1
 80126f4:	3324      	adds	r3, #36	@ 0x24
 80126f6:	2201      	movs	r2, #1
 80126f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	2200      	movs	r2, #0
 80126fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	33b0      	adds	r3, #176	@ 0xb0
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	2200      	movs	r2, #0
 801271a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2200      	movs	r2, #0
 8012722:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801272c:	2b00      	cmp	r3, #0
 801272e:	d101      	bne.n	8012734 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012730:	2302      	movs	r3, #2
 8012732:	e018      	b.n	8012766 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	7c1b      	ldrb	r3, [r3, #16]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d10a      	bne.n	8012752 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801273c:	4b0d      	ldr	r3, [pc, #52]	@ (8012774 <USBD_CDC_Init+0x1e8>)
 801273e:	7819      	ldrb	r1, [r3, #0]
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012746:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f002 fbf2 	bl	8014f34 <USBD_LL_PrepareReceive>
 8012750:	e008      	b.n	8012764 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012752:	4b08      	ldr	r3, [pc, #32]	@ (8012774 <USBD_CDC_Init+0x1e8>)
 8012754:	7819      	ldrb	r1, [r3, #0]
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801275c:	2340      	movs	r3, #64	@ 0x40
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f002 fbe8 	bl	8014f34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012764:	2300      	movs	r3, #0
}
 8012766:	4618      	mov	r0, r3
 8012768:	3710      	adds	r7, #16
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	24000097 	.word	0x24000097
 8012774:	24000098 	.word	0x24000098
 8012778:	24000099 	.word	0x24000099

0801277c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	460b      	mov	r3, r1
 8012786:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012788:	4b3a      	ldr	r3, [pc, #232]	@ (8012874 <USBD_CDC_DeInit+0xf8>)
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	4619      	mov	r1, r3
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f002 fb07 	bl	8014da2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012794:	4b37      	ldr	r3, [pc, #220]	@ (8012874 <USBD_CDC_DeInit+0xf8>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	f003 020f 	and.w	r2, r3, #15
 801279c:	6879      	ldr	r1, [r7, #4]
 801279e:	4613      	mov	r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4413      	add	r3, r2
 80127a4:	009b      	lsls	r3, r3, #2
 80127a6:	440b      	add	r3, r1
 80127a8:	3324      	adds	r3, #36	@ 0x24
 80127aa:	2200      	movs	r2, #0
 80127ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80127ae:	4b32      	ldr	r3, [pc, #200]	@ (8012878 <USBD_CDC_DeInit+0xfc>)
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	4619      	mov	r1, r3
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f002 faf4 	bl	8014da2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80127ba:	4b2f      	ldr	r3, [pc, #188]	@ (8012878 <USBD_CDC_DeInit+0xfc>)
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	f003 020f 	and.w	r2, r3, #15
 80127c2:	6879      	ldr	r1, [r7, #4]
 80127c4:	4613      	mov	r3, r2
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	4413      	add	r3, r2
 80127ca:	009b      	lsls	r3, r3, #2
 80127cc:	440b      	add	r3, r1
 80127ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80127d2:	2200      	movs	r2, #0
 80127d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80127d6:	4b29      	ldr	r3, [pc, #164]	@ (801287c <USBD_CDC_DeInit+0x100>)
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	4619      	mov	r1, r3
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f002 fae0 	bl	8014da2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80127e2:	4b26      	ldr	r3, [pc, #152]	@ (801287c <USBD_CDC_DeInit+0x100>)
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	f003 020f 	and.w	r2, r3, #15
 80127ea:	6879      	ldr	r1, [r7, #4]
 80127ec:	4613      	mov	r3, r2
 80127ee:	009b      	lsls	r3, r3, #2
 80127f0:	4413      	add	r3, r2
 80127f2:	009b      	lsls	r3, r3, #2
 80127f4:	440b      	add	r3, r1
 80127f6:	3324      	adds	r3, #36	@ 0x24
 80127f8:	2200      	movs	r2, #0
 80127fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80127fc:	4b1f      	ldr	r3, [pc, #124]	@ (801287c <USBD_CDC_DeInit+0x100>)
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	f003 020f 	and.w	r2, r3, #15
 8012804:	6879      	ldr	r1, [r7, #4]
 8012806:	4613      	mov	r3, r2
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	4413      	add	r3, r2
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	440b      	add	r3, r1
 8012810:	3326      	adds	r3, #38	@ 0x26
 8012812:	2200      	movs	r2, #0
 8012814:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	32b0      	adds	r2, #176	@ 0xb0
 8012820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d01f      	beq.n	8012868 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	33b0      	adds	r3, #176	@ 0xb0
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	4413      	add	r3, r2
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	32b0      	adds	r2, #176	@ 0xb0
 8012846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801284a:	4618      	mov	r0, r3
 801284c:	f002 fbb4 	bl	8014fb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	32b0      	adds	r2, #176	@ 0xb0
 801285a:	2100      	movs	r1, #0
 801285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3708      	adds	r7, #8
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	24000097 	.word	0x24000097
 8012878:	24000098 	.word	0x24000098
 801287c:	24000099 	.word	0x24000099

08012880 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b086      	sub	sp, #24
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	32b0      	adds	r2, #176	@ 0xb0
 8012894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012898:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801289a:	2300      	movs	r3, #0
 801289c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801289e:	2300      	movs	r3, #0
 80128a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80128a2:	2300      	movs	r3, #0
 80128a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d101      	bne.n	80128b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80128ac:	2303      	movs	r3, #3
 80128ae:	e0bf      	b.n	8012a30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d050      	beq.n	801295e <USBD_CDC_Setup+0xde>
 80128bc:	2b20      	cmp	r3, #32
 80128be:	f040 80af 	bne.w	8012a20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	88db      	ldrh	r3, [r3, #6]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d03a      	beq.n	8012940 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	b25b      	sxtb	r3, r3
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	da1b      	bge.n	801290c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	33b0      	adds	r3, #176	@ 0xb0
 80128de:	009b      	lsls	r3, r3, #2
 80128e0:	4413      	add	r3, r2
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	689b      	ldr	r3, [r3, #8]
 80128e6:	683a      	ldr	r2, [r7, #0]
 80128e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80128ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80128ec:	683a      	ldr	r2, [r7, #0]
 80128ee:	88d2      	ldrh	r2, [r2, #6]
 80128f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	88db      	ldrh	r3, [r3, #6]
 80128f6:	2b07      	cmp	r3, #7
 80128f8:	bf28      	it	cs
 80128fa:	2307      	movcs	r3, #7
 80128fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	89fa      	ldrh	r2, [r7, #14]
 8012902:	4619      	mov	r1, r3
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f001 fdbd 	bl	8014484 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801290a:	e090      	b.n	8012a2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	785a      	ldrb	r2, [r3, #1]
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	88db      	ldrh	r3, [r3, #6]
 801291a:	2b3f      	cmp	r3, #63	@ 0x3f
 801291c:	d803      	bhi.n	8012926 <USBD_CDC_Setup+0xa6>
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	88db      	ldrh	r3, [r3, #6]
 8012922:	b2da      	uxtb	r2, r3
 8012924:	e000      	b.n	8012928 <USBD_CDC_Setup+0xa8>
 8012926:	2240      	movs	r2, #64	@ 0x40
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801292e:	6939      	ldr	r1, [r7, #16]
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012936:	461a      	mov	r2, r3
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f001 fdcf 	bl	80144dc <USBD_CtlPrepareRx>
      break;
 801293e:	e076      	b.n	8012a2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012946:	687a      	ldr	r2, [r7, #4]
 8012948:	33b0      	adds	r3, #176	@ 0xb0
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	4413      	add	r3, r2
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	689b      	ldr	r3, [r3, #8]
 8012952:	683a      	ldr	r2, [r7, #0]
 8012954:	7850      	ldrb	r0, [r2, #1]
 8012956:	2200      	movs	r2, #0
 8012958:	6839      	ldr	r1, [r7, #0]
 801295a:	4798      	blx	r3
      break;
 801295c:	e067      	b.n	8012a2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	785b      	ldrb	r3, [r3, #1]
 8012962:	2b0b      	cmp	r3, #11
 8012964:	d851      	bhi.n	8012a0a <USBD_CDC_Setup+0x18a>
 8012966:	a201      	add	r2, pc, #4	@ (adr r2, 801296c <USBD_CDC_Setup+0xec>)
 8012968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801296c:	0801299d 	.word	0x0801299d
 8012970:	08012a19 	.word	0x08012a19
 8012974:	08012a0b 	.word	0x08012a0b
 8012978:	08012a0b 	.word	0x08012a0b
 801297c:	08012a0b 	.word	0x08012a0b
 8012980:	08012a0b 	.word	0x08012a0b
 8012984:	08012a0b 	.word	0x08012a0b
 8012988:	08012a0b 	.word	0x08012a0b
 801298c:	08012a0b 	.word	0x08012a0b
 8012990:	08012a0b 	.word	0x08012a0b
 8012994:	080129c7 	.word	0x080129c7
 8012998:	080129f1 	.word	0x080129f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129a2:	b2db      	uxtb	r3, r3
 80129a4:	2b03      	cmp	r3, #3
 80129a6:	d107      	bne.n	80129b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80129a8:	f107 030a 	add.w	r3, r7, #10
 80129ac:	2202      	movs	r2, #2
 80129ae:	4619      	mov	r1, r3
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f001 fd67 	bl	8014484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80129b6:	e032      	b.n	8012a1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80129b8:	6839      	ldr	r1, [r7, #0]
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f001 fce5 	bl	801438a <USBD_CtlError>
            ret = USBD_FAIL;
 80129c0:	2303      	movs	r3, #3
 80129c2:	75fb      	strb	r3, [r7, #23]
          break;
 80129c4:	e02b      	b.n	8012a1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	2b03      	cmp	r3, #3
 80129d0:	d107      	bne.n	80129e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80129d2:	f107 030d 	add.w	r3, r7, #13
 80129d6:	2201      	movs	r2, #1
 80129d8:	4619      	mov	r1, r3
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f001 fd52 	bl	8014484 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80129e0:	e01d      	b.n	8012a1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80129e2:	6839      	ldr	r1, [r7, #0]
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f001 fcd0 	bl	801438a <USBD_CtlError>
            ret = USBD_FAIL;
 80129ea:	2303      	movs	r3, #3
 80129ec:	75fb      	strb	r3, [r7, #23]
          break;
 80129ee:	e016      	b.n	8012a1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	2b03      	cmp	r3, #3
 80129fa:	d00f      	beq.n	8012a1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f001 fcc3 	bl	801438a <USBD_CtlError>
            ret = USBD_FAIL;
 8012a04:	2303      	movs	r3, #3
 8012a06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012a08:	e008      	b.n	8012a1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012a0a:	6839      	ldr	r1, [r7, #0]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f001 fcbc 	bl	801438a <USBD_CtlError>
          ret = USBD_FAIL;
 8012a12:	2303      	movs	r3, #3
 8012a14:	75fb      	strb	r3, [r7, #23]
          break;
 8012a16:	e002      	b.n	8012a1e <USBD_CDC_Setup+0x19e>
          break;
 8012a18:	bf00      	nop
 8012a1a:	e008      	b.n	8012a2e <USBD_CDC_Setup+0x1ae>
          break;
 8012a1c:	bf00      	nop
      }
      break;
 8012a1e:	e006      	b.n	8012a2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f001 fcb1 	bl	801438a <USBD_CtlError>
      ret = USBD_FAIL;
 8012a28:	2303      	movs	r3, #3
 8012a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8012a2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8012a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3718      	adds	r7, #24
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	460b      	mov	r3, r1
 8012a42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012a4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	32b0      	adds	r2, #176	@ 0xb0
 8012a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d101      	bne.n	8012a62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012a5e:	2303      	movs	r3, #3
 8012a60:	e065      	b.n	8012b2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	32b0      	adds	r2, #176	@ 0xb0
 8012a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012a72:	78fb      	ldrb	r3, [r7, #3]
 8012a74:	f003 020f 	and.w	r2, r3, #15
 8012a78:	6879      	ldr	r1, [r7, #4]
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	009b      	lsls	r3, r3, #2
 8012a7e:	4413      	add	r3, r2
 8012a80:	009b      	lsls	r3, r3, #2
 8012a82:	440b      	add	r3, r1
 8012a84:	3318      	adds	r3, #24
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d02f      	beq.n	8012aec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012a8c:	78fb      	ldrb	r3, [r7, #3]
 8012a8e:	f003 020f 	and.w	r2, r3, #15
 8012a92:	6879      	ldr	r1, [r7, #4]
 8012a94:	4613      	mov	r3, r2
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	4413      	add	r3, r2
 8012a9a:	009b      	lsls	r3, r3, #2
 8012a9c:	440b      	add	r3, r1
 8012a9e:	3318      	adds	r3, #24
 8012aa0:	681a      	ldr	r2, [r3, #0]
 8012aa2:	78fb      	ldrb	r3, [r7, #3]
 8012aa4:	f003 010f 	and.w	r1, r3, #15
 8012aa8:	68f8      	ldr	r0, [r7, #12]
 8012aaa:	460b      	mov	r3, r1
 8012aac:	00db      	lsls	r3, r3, #3
 8012aae:	440b      	add	r3, r1
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	4403      	add	r3, r0
 8012ab4:	331c      	adds	r3, #28
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	fbb2 f1f3 	udiv	r1, r2, r3
 8012abc:	fb01 f303 	mul.w	r3, r1, r3
 8012ac0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d112      	bne.n	8012aec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012ac6:	78fb      	ldrb	r3, [r7, #3]
 8012ac8:	f003 020f 	and.w	r2, r3, #15
 8012acc:	6879      	ldr	r1, [r7, #4]
 8012ace:	4613      	mov	r3, r2
 8012ad0:	009b      	lsls	r3, r3, #2
 8012ad2:	4413      	add	r3, r2
 8012ad4:	009b      	lsls	r3, r3, #2
 8012ad6:	440b      	add	r3, r1
 8012ad8:	3318      	adds	r3, #24
 8012ada:	2200      	movs	r2, #0
 8012adc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012ade:	78f9      	ldrb	r1, [r7, #3]
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f002 fa04 	bl	8014ef2 <USBD_LL_Transmit>
 8012aea:	e01f      	b.n	8012b2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	2200      	movs	r2, #0
 8012af0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012afa:	687a      	ldr	r2, [r7, #4]
 8012afc:	33b0      	adds	r3, #176	@ 0xb0
 8012afe:	009b      	lsls	r3, r3, #2
 8012b00:	4413      	add	r3, r2
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	691b      	ldr	r3, [r3, #16]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d010      	beq.n	8012b2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	33b0      	adds	r3, #176	@ 0xb0
 8012b14:	009b      	lsls	r3, r3, #2
 8012b16:	4413      	add	r3, r2
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	691b      	ldr	r3, [r3, #16]
 8012b1c:	68ba      	ldr	r2, [r7, #8]
 8012b1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8012b22:	68ba      	ldr	r2, [r7, #8]
 8012b24:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012b28:	78fa      	ldrb	r2, [r7, #3]
 8012b2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012b2c:	2300      	movs	r3, #0
}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3710      	adds	r7, #16
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}

08012b36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012b36:	b580      	push	{r7, lr}
 8012b38:	b084      	sub	sp, #16
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	6078      	str	r0, [r7, #4]
 8012b3e:	460b      	mov	r3, r1
 8012b40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	32b0      	adds	r2, #176	@ 0xb0
 8012b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	32b0      	adds	r2, #176	@ 0xb0
 8012b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d101      	bne.n	8012b68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012b64:	2303      	movs	r3, #3
 8012b66:	e01a      	b.n	8012b9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012b68:	78fb      	ldrb	r3, [r7, #3]
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f002 fa02 	bl	8014f76 <USBD_LL_GetRxDataSize>
 8012b72:	4602      	mov	r2, r0
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	33b0      	adds	r3, #176	@ 0xb0
 8012b84:	009b      	lsls	r3, r3, #2
 8012b86:	4413      	add	r3, r2
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8012b92:	68fa      	ldr	r2, [r7, #12]
 8012b94:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012b98:	4611      	mov	r1, r2
 8012b9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012b9c:	2300      	movs	r3, #0
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3710      	adds	r7, #16
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012ba6:	b580      	push	{r7, lr}
 8012ba8:	b084      	sub	sp, #16
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	32b0      	adds	r2, #176	@ 0xb0
 8012bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d101      	bne.n	8012bc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012bc4:	2303      	movs	r3, #3
 8012bc6:	e024      	b.n	8012c12 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	33b0      	adds	r3, #176	@ 0xb0
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	4413      	add	r3, r2
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d019      	beq.n	8012c10 <USBD_CDC_EP0_RxReady+0x6a>
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012be2:	2bff      	cmp	r3, #255	@ 0xff
 8012be4:	d014      	beq.n	8012c10 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012bec:	687a      	ldr	r2, [r7, #4]
 8012bee:	33b0      	adds	r3, #176	@ 0xb0
 8012bf0:	009b      	lsls	r3, r3, #2
 8012bf2:	4413      	add	r3, r2
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8012bfe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012c00:	68fa      	ldr	r2, [r7, #12]
 8012c02:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012c06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	22ff      	movs	r2, #255	@ 0xff
 8012c0c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8012c10:	2300      	movs	r3, #0
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3710      	adds	r7, #16
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
	...

08012c1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b086      	sub	sp, #24
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012c24:	2182      	movs	r1, #130	@ 0x82
 8012c26:	4818      	ldr	r0, [pc, #96]	@ (8012c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012c28:	f000 fd4f 	bl	80136ca <USBD_GetEpDesc>
 8012c2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012c2e:	2101      	movs	r1, #1
 8012c30:	4815      	ldr	r0, [pc, #84]	@ (8012c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012c32:	f000 fd4a 	bl	80136ca <USBD_GetEpDesc>
 8012c36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012c38:	2181      	movs	r1, #129	@ 0x81
 8012c3a:	4813      	ldr	r0, [pc, #76]	@ (8012c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012c3c:	f000 fd45 	bl	80136ca <USBD_GetEpDesc>
 8012c40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d002      	beq.n	8012c4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	2210      	movs	r2, #16
 8012c4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d006      	beq.n	8012c62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	2200      	movs	r2, #0
 8012c58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012c5c:	711a      	strb	r2, [r3, #4]
 8012c5e:	2200      	movs	r2, #0
 8012c60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d006      	beq.n	8012c76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012c70:	711a      	strb	r2, [r3, #4]
 8012c72:	2200      	movs	r2, #0
 8012c74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2243      	movs	r2, #67	@ 0x43
 8012c7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012c7c:	4b02      	ldr	r3, [pc, #8]	@ (8012c88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3718      	adds	r7, #24
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	24000054 	.word	0x24000054

08012c8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012c94:	2182      	movs	r1, #130	@ 0x82
 8012c96:	4818      	ldr	r0, [pc, #96]	@ (8012cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012c98:	f000 fd17 	bl	80136ca <USBD_GetEpDesc>
 8012c9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012c9e:	2101      	movs	r1, #1
 8012ca0:	4815      	ldr	r0, [pc, #84]	@ (8012cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012ca2:	f000 fd12 	bl	80136ca <USBD_GetEpDesc>
 8012ca6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012ca8:	2181      	movs	r1, #129	@ 0x81
 8012caa:	4813      	ldr	r0, [pc, #76]	@ (8012cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012cac:	f000 fd0d 	bl	80136ca <USBD_GetEpDesc>
 8012cb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d002      	beq.n	8012cbe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	2210      	movs	r2, #16
 8012cbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d006      	beq.n	8012cd2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	711a      	strb	r2, [r3, #4]
 8012cca:	2200      	movs	r2, #0
 8012ccc:	f042 0202 	orr.w	r2, r2, #2
 8012cd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d006      	beq.n	8012ce6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	711a      	strb	r2, [r3, #4]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	f042 0202 	orr.w	r2, r2, #2
 8012ce4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2243      	movs	r2, #67	@ 0x43
 8012cea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012cec:	4b02      	ldr	r3, [pc, #8]	@ (8012cf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3718      	adds	r7, #24
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	24000054 	.word	0x24000054

08012cfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b086      	sub	sp, #24
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012d04:	2182      	movs	r1, #130	@ 0x82
 8012d06:	4818      	ldr	r0, [pc, #96]	@ (8012d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012d08:	f000 fcdf 	bl	80136ca <USBD_GetEpDesc>
 8012d0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012d0e:	2101      	movs	r1, #1
 8012d10:	4815      	ldr	r0, [pc, #84]	@ (8012d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012d12:	f000 fcda 	bl	80136ca <USBD_GetEpDesc>
 8012d16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012d18:	2181      	movs	r1, #129	@ 0x81
 8012d1a:	4813      	ldr	r0, [pc, #76]	@ (8012d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012d1c:	f000 fcd5 	bl	80136ca <USBD_GetEpDesc>
 8012d20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d002      	beq.n	8012d2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	2210      	movs	r2, #16
 8012d2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d006      	beq.n	8012d42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	2200      	movs	r2, #0
 8012d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012d3c:	711a      	strb	r2, [r3, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d006      	beq.n	8012d56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012d50:	711a      	strb	r2, [r3, #4]
 8012d52:	2200      	movs	r2, #0
 8012d54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2243      	movs	r2, #67	@ 0x43
 8012d5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012d5c:	4b02      	ldr	r3, [pc, #8]	@ (8012d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3718      	adds	r7, #24
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	24000054 	.word	0x24000054

08012d6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	220a      	movs	r2, #10
 8012d78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012d7a:	4b03      	ldr	r3, [pc, #12]	@ (8012d88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr
 8012d88:	24000010 	.word	0x24000010

08012d8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d101      	bne.n	8012da0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012d9c:	2303      	movs	r3, #3
 8012d9e:	e009      	b.n	8012db4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	33b0      	adds	r3, #176	@ 0xb0
 8012daa:	009b      	lsls	r3, r3, #2
 8012dac:	4413      	add	r3, r2
 8012dae:	683a      	ldr	r2, [r7, #0]
 8012db0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012db2:	2300      	movs	r3, #0
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr

08012dc0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b087      	sub	sp, #28
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	32b0      	adds	r2, #176	@ 0xb0
 8012dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dda:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d101      	bne.n	8012de6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012de2:	2303      	movs	r3, #3
 8012de4:	e008      	b.n	8012df8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	68ba      	ldr	r2, [r7, #8]
 8012dea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	687a      	ldr	r2, [r7, #4]
 8012df2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012df6:	2300      	movs	r3, #0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	371c      	adds	r7, #28
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	32b0      	adds	r2, #176	@ 0xb0
 8012e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d101      	bne.n	8012e28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012e24:	2303      	movs	r3, #3
 8012e26:	e004      	b.n	8012e32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	683a      	ldr	r2, [r7, #0]
 8012e2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012e30:	2300      	movs	r3, #0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3714      	adds	r7, #20
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr
	...

08012e40 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	32b0      	adds	r2, #176	@ 0xb0
 8012e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e56:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012e58:	2301      	movs	r3, #1
 8012e5a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012e5c:	68bb      	ldr	r3, [r7, #8]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012e62:	2303      	movs	r3, #3
 8012e64:	e025      	b.n	8012eb2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d11f      	bne.n	8012eb0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	2201      	movs	r2, #1
 8012e74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012e78:	4b10      	ldr	r3, [pc, #64]	@ (8012ebc <USBD_CDC_TransmitPacket+0x7c>)
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	f003 020f 	and.w	r2, r3, #15
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	4613      	mov	r3, r2
 8012e8a:	009b      	lsls	r3, r3, #2
 8012e8c:	4413      	add	r3, r2
 8012e8e:	009b      	lsls	r3, r3, #2
 8012e90:	4403      	add	r3, r0
 8012e92:	3318      	adds	r3, #24
 8012e94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012e96:	4b09      	ldr	r3, [pc, #36]	@ (8012ebc <USBD_CDC_TransmitPacket+0x7c>)
 8012e98:	7819      	ldrb	r1, [r3, #0]
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f002 f823 	bl	8014ef2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8012eac:	2300      	movs	r3, #0
 8012eae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3710      	adds	r7, #16
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	24000097 	.word	0x24000097

08012ec0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	32b0      	adds	r2, #176	@ 0xb0
 8012ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ed6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	32b0      	adds	r2, #176	@ 0xb0
 8012ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d101      	bne.n	8012eee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012eea:	2303      	movs	r3, #3
 8012eec:	e018      	b.n	8012f20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	7c1b      	ldrb	r3, [r3, #16]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d10a      	bne.n	8012f0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8012f28 <USBD_CDC_ReceivePacket+0x68>)
 8012ef8:	7819      	ldrb	r1, [r3, #0]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012f00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f002 f815 	bl	8014f34 <USBD_LL_PrepareReceive>
 8012f0a:	e008      	b.n	8012f1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012f0c:	4b06      	ldr	r3, [pc, #24]	@ (8012f28 <USBD_CDC_ReceivePacket+0x68>)
 8012f0e:	7819      	ldrb	r1, [r3, #0]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012f16:	2340      	movs	r3, #64	@ 0x40
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f002 f80b 	bl	8014f34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012f1e:	2300      	movs	r3, #0
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	3710      	adds	r7, #16
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	24000098 	.word	0x24000098

08012f2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b086      	sub	sp, #24
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	4613      	mov	r3, r2
 8012f38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d101      	bne.n	8012f44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012f40:	2303      	movs	r3, #3
 8012f42:	e01f      	b.n	8012f84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2200      	movs	r2, #0
 8012f48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	2200      	movs	r2, #0
 8012f58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d003      	beq.n	8012f6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	68ba      	ldr	r2, [r7, #8]
 8012f66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	79fa      	ldrb	r2, [r7, #7]
 8012f76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f001 fe81 	bl	8014c80 <USBD_LL_Init>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3718      	adds	r7, #24
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b084      	sub	sp, #16
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012f96:	2300      	movs	r3, #0
 8012f98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d101      	bne.n	8012fa4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012fa0:	2303      	movs	r3, #3
 8012fa2:	e025      	b.n	8012ff0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	683a      	ldr	r2, [r7, #0]
 8012fa8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	32ae      	adds	r2, #174	@ 0xae
 8012fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d00f      	beq.n	8012fe0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	32ae      	adds	r2, #174	@ 0xae
 8012fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fd0:	f107 020e 	add.w	r2, r7, #14
 8012fd4:	4610      	mov	r0, r2
 8012fd6:	4798      	blx	r3
 8012fd8:	4602      	mov	r2, r0
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012fe6:	1c5a      	adds	r2, r3, #1
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012fee:	2300      	movs	r3, #0
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3710      	adds	r7, #16
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f001 fe8d 	bl	8014d20 <USBD_LL_Start>
 8013006:	4603      	mov	r3, r0
}
 8013008:	4618      	mov	r0, r3
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013018:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801301a:	4618      	mov	r0, r3
 801301c:	370c      	adds	r7, #12
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr

08013026 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013026:	b580      	push	{r7, lr}
 8013028:	b084      	sub	sp, #16
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
 801302e:	460b      	mov	r3, r1
 8013030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013032:	2300      	movs	r3, #0
 8013034:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801303c:	2b00      	cmp	r3, #0
 801303e:	d009      	beq.n	8013054 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	78fa      	ldrb	r2, [r7, #3]
 801304a:	4611      	mov	r1, r2
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	4798      	blx	r3
 8013050:	4603      	mov	r3, r0
 8013052:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013054:	7bfb      	ldrb	r3, [r7, #15]
}
 8013056:	4618      	mov	r0, r3
 8013058:	3710      	adds	r7, #16
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}

0801305e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801305e:	b580      	push	{r7, lr}
 8013060:	b084      	sub	sp, #16
 8013062:	af00      	add	r7, sp, #0
 8013064:	6078      	str	r0, [r7, #4]
 8013066:	460b      	mov	r3, r1
 8013068:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801306a:	2300      	movs	r3, #0
 801306c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	78fa      	ldrb	r2, [r7, #3]
 8013078:	4611      	mov	r1, r2
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	4798      	blx	r3
 801307e:	4603      	mov	r3, r0
 8013080:	2b00      	cmp	r3, #0
 8013082:	d001      	beq.n	8013088 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013084:	2303      	movs	r3, #3
 8013086:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013088:	7bfb      	ldrb	r3, [r7, #15]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3710      	adds	r7, #16
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}

08013092 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013092:	b580      	push	{r7, lr}
 8013094:	b084      	sub	sp, #16
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
 801309a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f001 f936 	bl	8014316 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2201      	movs	r2, #1
 80130ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80130b8:	461a      	mov	r2, r3
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80130c6:	f003 031f 	and.w	r3, r3, #31
 80130ca:	2b02      	cmp	r3, #2
 80130cc:	d01a      	beq.n	8013104 <USBD_LL_SetupStage+0x72>
 80130ce:	2b02      	cmp	r3, #2
 80130d0:	d822      	bhi.n	8013118 <USBD_LL_SetupStage+0x86>
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d002      	beq.n	80130dc <USBD_LL_SetupStage+0x4a>
 80130d6:	2b01      	cmp	r3, #1
 80130d8:	d00a      	beq.n	80130f0 <USBD_LL_SetupStage+0x5e>
 80130da:	e01d      	b.n	8013118 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80130e2:	4619      	mov	r1, r3
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 fb63 	bl	80137b0 <USBD_StdDevReq>
 80130ea:	4603      	mov	r3, r0
 80130ec:	73fb      	strb	r3, [r7, #15]
      break;
 80130ee:	e020      	b.n	8013132 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80130f6:	4619      	mov	r1, r3
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 fbcb 	bl	8013894 <USBD_StdItfReq>
 80130fe:	4603      	mov	r3, r0
 8013100:	73fb      	strb	r3, [r7, #15]
      break;
 8013102:	e016      	b.n	8013132 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801310a:	4619      	mov	r1, r3
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f000 fc2d 	bl	801396c <USBD_StdEPReq>
 8013112:	4603      	mov	r3, r0
 8013114:	73fb      	strb	r3, [r7, #15]
      break;
 8013116:	e00c      	b.n	8013132 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801311e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013122:	b2db      	uxtb	r3, r3
 8013124:	4619      	mov	r1, r3
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f001 fe5a 	bl	8014de0 <USBD_LL_StallEP>
 801312c:	4603      	mov	r3, r0
 801312e:	73fb      	strb	r3, [r7, #15]
      break;
 8013130:	bf00      	nop
  }

  return ret;
 8013132:	7bfb      	ldrb	r3, [r7, #15]
}
 8013134:	4618      	mov	r0, r3
 8013136:	3710      	adds	r7, #16
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b086      	sub	sp, #24
 8013140:	af00      	add	r7, sp, #0
 8013142:	60f8      	str	r0, [r7, #12]
 8013144:	460b      	mov	r3, r1
 8013146:	607a      	str	r2, [r7, #4]
 8013148:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801314a:	2300      	movs	r3, #0
 801314c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801314e:	7afb      	ldrb	r3, [r7, #11]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d16e      	bne.n	8013232 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801315a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013162:	2b03      	cmp	r3, #3
 8013164:	f040 8098 	bne.w	8013298 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	689a      	ldr	r2, [r3, #8]
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	429a      	cmp	r2, r3
 8013172:	d913      	bls.n	801319c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	689a      	ldr	r2, [r3, #8]
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	68db      	ldr	r3, [r3, #12]
 801317c:	1ad2      	subs	r2, r2, r3
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	68da      	ldr	r2, [r3, #12]
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	689b      	ldr	r3, [r3, #8]
 801318a:	4293      	cmp	r3, r2
 801318c:	bf28      	it	cs
 801318e:	4613      	movcs	r3, r2
 8013190:	461a      	mov	r2, r3
 8013192:	6879      	ldr	r1, [r7, #4]
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f001 f9be 	bl	8014516 <USBD_CtlContinueRx>
 801319a:	e07d      	b.n	8013298 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80131a2:	f003 031f 	and.w	r3, r3, #31
 80131a6:	2b02      	cmp	r3, #2
 80131a8:	d014      	beq.n	80131d4 <USBD_LL_DataOutStage+0x98>
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	d81d      	bhi.n	80131ea <USBD_LL_DataOutStage+0xae>
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d002      	beq.n	80131b8 <USBD_LL_DataOutStage+0x7c>
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	d003      	beq.n	80131be <USBD_LL_DataOutStage+0x82>
 80131b6:	e018      	b.n	80131ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80131b8:	2300      	movs	r3, #0
 80131ba:	75bb      	strb	r3, [r7, #22]
            break;
 80131bc:	e018      	b.n	80131f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80131c4:	b2db      	uxtb	r3, r3
 80131c6:	4619      	mov	r1, r3
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f000 fa64 	bl	8013696 <USBD_CoreFindIF>
 80131ce:	4603      	mov	r3, r0
 80131d0:	75bb      	strb	r3, [r7, #22]
            break;
 80131d2:	e00d      	b.n	80131f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	4619      	mov	r1, r3
 80131de:	68f8      	ldr	r0, [r7, #12]
 80131e0:	f000 fa66 	bl	80136b0 <USBD_CoreFindEP>
 80131e4:	4603      	mov	r3, r0
 80131e6:	75bb      	strb	r3, [r7, #22]
            break;
 80131e8:	e002      	b.n	80131f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80131ea:	2300      	movs	r3, #0
 80131ec:	75bb      	strb	r3, [r7, #22]
            break;
 80131ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80131f0:	7dbb      	ldrb	r3, [r7, #22]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d119      	bne.n	801322a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	2b03      	cmp	r3, #3
 8013200:	d113      	bne.n	801322a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013202:	7dba      	ldrb	r2, [r7, #22]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	32ae      	adds	r2, #174	@ 0xae
 8013208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d00b      	beq.n	801322a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013212:	7dba      	ldrb	r2, [r7, #22]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801321a:	7dba      	ldrb	r2, [r7, #22]
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	32ae      	adds	r2, #174	@ 0xae
 8013220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f001 f984 	bl	8014538 <USBD_CtlSendStatus>
 8013230:	e032      	b.n	8013298 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013232:	7afb      	ldrb	r3, [r7, #11]
 8013234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013238:	b2db      	uxtb	r3, r3
 801323a:	4619      	mov	r1, r3
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f000 fa37 	bl	80136b0 <USBD_CoreFindEP>
 8013242:	4603      	mov	r3, r0
 8013244:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013246:	7dbb      	ldrb	r3, [r7, #22]
 8013248:	2bff      	cmp	r3, #255	@ 0xff
 801324a:	d025      	beq.n	8013298 <USBD_LL_DataOutStage+0x15c>
 801324c:	7dbb      	ldrb	r3, [r7, #22]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d122      	bne.n	8013298 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013258:	b2db      	uxtb	r3, r3
 801325a:	2b03      	cmp	r3, #3
 801325c:	d117      	bne.n	801328e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801325e:	7dba      	ldrb	r2, [r7, #22]
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	32ae      	adds	r2, #174	@ 0xae
 8013264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013268:	699b      	ldr	r3, [r3, #24]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d00f      	beq.n	801328e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801326e:	7dba      	ldrb	r2, [r7, #22]
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013276:	7dba      	ldrb	r2, [r7, #22]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	32ae      	adds	r2, #174	@ 0xae
 801327c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013280:	699b      	ldr	r3, [r3, #24]
 8013282:	7afa      	ldrb	r2, [r7, #11]
 8013284:	4611      	mov	r1, r2
 8013286:	68f8      	ldr	r0, [r7, #12]
 8013288:	4798      	blx	r3
 801328a:	4603      	mov	r3, r0
 801328c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801328e:	7dfb      	ldrb	r3, [r7, #23]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d001      	beq.n	8013298 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013294:	7dfb      	ldrb	r3, [r7, #23]
 8013296:	e000      	b.n	801329a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013298:	2300      	movs	r3, #0
}
 801329a:	4618      	mov	r0, r3
 801329c:	3718      	adds	r7, #24
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b086      	sub	sp, #24
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	60f8      	str	r0, [r7, #12]
 80132aa:	460b      	mov	r3, r1
 80132ac:	607a      	str	r2, [r7, #4]
 80132ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80132b0:	7afb      	ldrb	r3, [r7, #11]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d16f      	bne.n	8013396 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	3314      	adds	r3, #20
 80132ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80132c2:	2b02      	cmp	r3, #2
 80132c4:	d15a      	bne.n	801337c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	689a      	ldr	r2, [r3, #8]
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	68db      	ldr	r3, [r3, #12]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d914      	bls.n	80132fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	689a      	ldr	r2, [r3, #8]
 80132d6:	693b      	ldr	r3, [r7, #16]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	1ad2      	subs	r2, r2, r3
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	689b      	ldr	r3, [r3, #8]
 80132e4:	461a      	mov	r2, r3
 80132e6:	6879      	ldr	r1, [r7, #4]
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f001 f8e6 	bl	80144ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80132ee:	2300      	movs	r3, #0
 80132f0:	2200      	movs	r2, #0
 80132f2:	2100      	movs	r1, #0
 80132f4:	68f8      	ldr	r0, [r7, #12]
 80132f6:	f001 fe1d 	bl	8014f34 <USBD_LL_PrepareReceive>
 80132fa:	e03f      	b.n	801337c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	68da      	ldr	r2, [r3, #12]
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	689b      	ldr	r3, [r3, #8]
 8013304:	429a      	cmp	r2, r3
 8013306:	d11c      	bne.n	8013342 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	685a      	ldr	r2, [r3, #4]
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013310:	429a      	cmp	r2, r3
 8013312:	d316      	bcc.n	8013342 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	685a      	ldr	r2, [r3, #4]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801331e:	429a      	cmp	r2, r3
 8013320:	d20f      	bcs.n	8013342 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013322:	2200      	movs	r2, #0
 8013324:	2100      	movs	r1, #0
 8013326:	68f8      	ldr	r0, [r7, #12]
 8013328:	f001 f8c7 	bl	80144ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	2200      	movs	r2, #0
 8013330:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013334:	2300      	movs	r3, #0
 8013336:	2200      	movs	r2, #0
 8013338:	2100      	movs	r1, #0
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f001 fdfa 	bl	8014f34 <USBD_LL_PrepareReceive>
 8013340:	e01c      	b.n	801337c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013348:	b2db      	uxtb	r3, r3
 801334a:	2b03      	cmp	r3, #3
 801334c:	d10f      	bne.n	801336e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013354:	68db      	ldr	r3, [r3, #12]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d009      	beq.n	801336e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	2200      	movs	r2, #0
 801335e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013368:	68db      	ldr	r3, [r3, #12]
 801336a:	68f8      	ldr	r0, [r7, #12]
 801336c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801336e:	2180      	movs	r1, #128	@ 0x80
 8013370:	68f8      	ldr	r0, [r7, #12]
 8013372:	f001 fd35 	bl	8014de0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013376:	68f8      	ldr	r0, [r7, #12]
 8013378:	f001 f8f1 	bl	801455e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d03a      	beq.n	80133fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013386:	68f8      	ldr	r0, [r7, #12]
 8013388:	f7ff fe42 	bl	8013010 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	2200      	movs	r2, #0
 8013390:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013394:	e032      	b.n	80133fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013396:	7afb      	ldrb	r3, [r7, #11]
 8013398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801339c:	b2db      	uxtb	r3, r3
 801339e:	4619      	mov	r1, r3
 80133a0:	68f8      	ldr	r0, [r7, #12]
 80133a2:	f000 f985 	bl	80136b0 <USBD_CoreFindEP>
 80133a6:	4603      	mov	r3, r0
 80133a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80133aa:	7dfb      	ldrb	r3, [r7, #23]
 80133ac:	2bff      	cmp	r3, #255	@ 0xff
 80133ae:	d025      	beq.n	80133fc <USBD_LL_DataInStage+0x15a>
 80133b0:	7dfb      	ldrb	r3, [r7, #23]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d122      	bne.n	80133fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	2b03      	cmp	r3, #3
 80133c0:	d11c      	bne.n	80133fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80133c2:	7dfa      	ldrb	r2, [r7, #23]
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	32ae      	adds	r2, #174	@ 0xae
 80133c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133cc:	695b      	ldr	r3, [r3, #20]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d014      	beq.n	80133fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80133d2:	7dfa      	ldrb	r2, [r7, #23]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80133da:	7dfa      	ldrb	r2, [r7, #23]
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	32ae      	adds	r2, #174	@ 0xae
 80133e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133e4:	695b      	ldr	r3, [r3, #20]
 80133e6:	7afa      	ldrb	r2, [r7, #11]
 80133e8:	4611      	mov	r1, r2
 80133ea:	68f8      	ldr	r0, [r7, #12]
 80133ec:	4798      	blx	r3
 80133ee:	4603      	mov	r3, r0
 80133f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80133f2:	7dbb      	ldrb	r3, [r7, #22]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d001      	beq.n	80133fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80133f8:	7dbb      	ldrb	r3, [r7, #22]
 80133fa:	e000      	b.n	80133fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3718      	adds	r7, #24
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}

08013406 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013406:	b580      	push	{r7, lr}
 8013408:	b084      	sub	sp, #16
 801340a:	af00      	add	r7, sp, #0
 801340c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801340e:	2300      	movs	r3, #0
 8013410:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2201      	movs	r2, #1
 8013416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2200      	movs	r2, #0
 801341e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2200      	movs	r2, #0
 8013426:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2200      	movs	r2, #0
 801342c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2200      	movs	r2, #0
 8013434:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801343e:	2b00      	cmp	r3, #0
 8013440:	d014      	beq.n	801346c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d00e      	beq.n	801346c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	6852      	ldr	r2, [r2, #4]
 801345a:	b2d2      	uxtb	r2, r2
 801345c:	4611      	mov	r1, r2
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	4798      	blx	r3
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d001      	beq.n	801346c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013468:	2303      	movs	r3, #3
 801346a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801346c:	2340      	movs	r3, #64	@ 0x40
 801346e:	2200      	movs	r2, #0
 8013470:	2100      	movs	r1, #0
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f001 fc6f 	bl	8014d56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2201      	movs	r2, #1
 801347c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2240      	movs	r2, #64	@ 0x40
 8013484:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013488:	2340      	movs	r3, #64	@ 0x40
 801348a:	2200      	movs	r2, #0
 801348c:	2180      	movs	r1, #128	@ 0x80
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f001 fc61 	bl	8014d56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2201      	movs	r2, #1
 8013498:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2240      	movs	r2, #64	@ 0x40
 801349e:	621a      	str	r2, [r3, #32]

  return ret;
 80134a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3710      	adds	r7, #16
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}

080134aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80134aa:	b480      	push	{r7}
 80134ac:	b083      	sub	sp, #12
 80134ae:	af00      	add	r7, sp, #0
 80134b0:	6078      	str	r0, [r7, #4]
 80134b2:	460b      	mov	r3, r1
 80134b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	78fa      	ldrb	r2, [r7, #3]
 80134ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80134bc:	2300      	movs	r3, #0
}
 80134be:	4618      	mov	r0, r3
 80134c0:	370c      	adds	r7, #12
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr

080134ca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80134ca:	b480      	push	{r7}
 80134cc:	b083      	sub	sp, #12
 80134ce:	af00      	add	r7, sp, #0
 80134d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	2b04      	cmp	r3, #4
 80134dc:	d006      	beq.n	80134ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2204      	movs	r2, #4
 80134f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80134f4:	2300      	movs	r3, #0
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	370c      	adds	r7, #12
 80134fa:	46bd      	mov	sp, r7
 80134fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013500:	4770      	bx	lr

08013502 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013502:	b480      	push	{r7}
 8013504:	b083      	sub	sp, #12
 8013506:	af00      	add	r7, sp, #0
 8013508:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013510:	b2db      	uxtb	r3, r3
 8013512:	2b04      	cmp	r3, #4
 8013514:	d106      	bne.n	8013524 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801351c:	b2da      	uxtb	r2, r3
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013524:	2300      	movs	r3, #0
}
 8013526:	4618      	mov	r0, r3
 8013528:	370c      	adds	r7, #12
 801352a:	46bd      	mov	sp, r7
 801352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013530:	4770      	bx	lr

08013532 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013532:	b580      	push	{r7, lr}
 8013534:	b082      	sub	sp, #8
 8013536:	af00      	add	r7, sp, #0
 8013538:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013540:	b2db      	uxtb	r3, r3
 8013542:	2b03      	cmp	r3, #3
 8013544:	d110      	bne.n	8013568 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801354c:	2b00      	cmp	r3, #0
 801354e:	d00b      	beq.n	8013568 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013556:	69db      	ldr	r3, [r3, #28]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d005      	beq.n	8013568 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013562:	69db      	ldr	r3, [r3, #28]
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013568:	2300      	movs	r3, #0
}
 801356a:	4618      	mov	r0, r3
 801356c:	3708      	adds	r7, #8
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}

08013572 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013572:	b580      	push	{r7, lr}
 8013574:	b082      	sub	sp, #8
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
 801357a:	460b      	mov	r3, r1
 801357c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	32ae      	adds	r2, #174	@ 0xae
 8013588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d101      	bne.n	8013594 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013590:	2303      	movs	r3, #3
 8013592:	e01c      	b.n	80135ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801359a:	b2db      	uxtb	r3, r3
 801359c:	2b03      	cmp	r3, #3
 801359e:	d115      	bne.n	80135cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	32ae      	adds	r2, #174	@ 0xae
 80135aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135ae:	6a1b      	ldr	r3, [r3, #32]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d00b      	beq.n	80135cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	32ae      	adds	r2, #174	@ 0xae
 80135be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135c2:	6a1b      	ldr	r3, [r3, #32]
 80135c4:	78fa      	ldrb	r2, [r7, #3]
 80135c6:	4611      	mov	r1, r2
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80135cc:	2300      	movs	r3, #0
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3708      	adds	r7, #8
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}

080135d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80135d6:	b580      	push	{r7, lr}
 80135d8:	b082      	sub	sp, #8
 80135da:	af00      	add	r7, sp, #0
 80135dc:	6078      	str	r0, [r7, #4]
 80135de:	460b      	mov	r3, r1
 80135e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	32ae      	adds	r2, #174	@ 0xae
 80135ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d101      	bne.n	80135f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80135f4:	2303      	movs	r3, #3
 80135f6:	e01c      	b.n	8013632 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	2b03      	cmp	r3, #3
 8013602:	d115      	bne.n	8013630 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	32ae      	adds	r2, #174	@ 0xae
 801360e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013614:	2b00      	cmp	r3, #0
 8013616:	d00b      	beq.n	8013630 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	32ae      	adds	r2, #174	@ 0xae
 8013622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013628:	78fa      	ldrb	r2, [r7, #3]
 801362a:	4611      	mov	r1, r2
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013630:	2300      	movs	r3, #0
}
 8013632:	4618      	mov	r0, r3
 8013634:	3708      	adds	r7, #8
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801363a:	b480      	push	{r7}
 801363c:	b083      	sub	sp, #12
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013642:	2300      	movs	r3, #0
}
 8013644:	4618      	mov	r0, r3
 8013646:	370c      	adds	r7, #12
 8013648:	46bd      	mov	sp, r7
 801364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364e:	4770      	bx	lr

08013650 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b084      	sub	sp, #16
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013658:	2300      	movs	r3, #0
 801365a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2201      	movs	r2, #1
 8013660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801366a:	2b00      	cmp	r3, #0
 801366c:	d00e      	beq.n	801368c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013674:	685b      	ldr	r3, [r3, #4]
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	6852      	ldr	r2, [r2, #4]
 801367a:	b2d2      	uxtb	r2, r2
 801367c:	4611      	mov	r1, r2
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	4798      	blx	r3
 8013682:	4603      	mov	r3, r0
 8013684:	2b00      	cmp	r3, #0
 8013686:	d001      	beq.n	801368c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013688:	2303      	movs	r3, #3
 801368a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801368c:	7bfb      	ldrb	r3, [r7, #15]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3710      	adds	r7, #16
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}

08013696 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013696:	b480      	push	{r7}
 8013698:	b083      	sub	sp, #12
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
 801369e:	460b      	mov	r3, r1
 80136a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80136a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr

080136b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80136b0:	b480      	push	{r7}
 80136b2:	b083      	sub	sp, #12
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	460b      	mov	r3, r1
 80136ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80136bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80136be:	4618      	mov	r0, r3
 80136c0:	370c      	adds	r7, #12
 80136c2:	46bd      	mov	sp, r7
 80136c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c8:	4770      	bx	lr

080136ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80136ca:	b580      	push	{r7, lr}
 80136cc:	b086      	sub	sp, #24
 80136ce:	af00      	add	r7, sp, #0
 80136d0:	6078      	str	r0, [r7, #4]
 80136d2:	460b      	mov	r3, r1
 80136d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80136de:	2300      	movs	r3, #0
 80136e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	885b      	ldrh	r3, [r3, #2]
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	68fa      	ldr	r2, [r7, #12]
 80136ea:	7812      	ldrb	r2, [r2, #0]
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d91f      	bls.n	8013730 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80136f6:	e013      	b.n	8013720 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80136f8:	f107 030a 	add.w	r3, r7, #10
 80136fc:	4619      	mov	r1, r3
 80136fe:	6978      	ldr	r0, [r7, #20]
 8013700:	f000 f81b 	bl	801373a <USBD_GetNextDesc>
 8013704:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	785b      	ldrb	r3, [r3, #1]
 801370a:	2b05      	cmp	r3, #5
 801370c:	d108      	bne.n	8013720 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	789b      	ldrb	r3, [r3, #2]
 8013716:	78fa      	ldrb	r2, [r7, #3]
 8013718:	429a      	cmp	r2, r3
 801371a:	d008      	beq.n	801372e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801371c:	2300      	movs	r3, #0
 801371e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	885b      	ldrh	r3, [r3, #2]
 8013724:	b29a      	uxth	r2, r3
 8013726:	897b      	ldrh	r3, [r7, #10]
 8013728:	429a      	cmp	r2, r3
 801372a:	d8e5      	bhi.n	80136f8 <USBD_GetEpDesc+0x2e>
 801372c:	e000      	b.n	8013730 <USBD_GetEpDesc+0x66>
          break;
 801372e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013730:	693b      	ldr	r3, [r7, #16]
}
 8013732:	4618      	mov	r0, r3
 8013734:	3718      	adds	r7, #24
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}

0801373a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801373a:	b480      	push	{r7}
 801373c:	b085      	sub	sp, #20
 801373e:	af00      	add	r7, sp, #0
 8013740:	6078      	str	r0, [r7, #4]
 8013742:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	881b      	ldrh	r3, [r3, #0]
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	7812      	ldrb	r2, [r2, #0]
 8013750:	4413      	add	r3, r2
 8013752:	b29a      	uxth	r2, r3
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	461a      	mov	r2, r3
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	4413      	add	r3, r2
 8013762:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013764:	68fb      	ldr	r3, [r7, #12]
}
 8013766:	4618      	mov	r0, r3
 8013768:	3714      	adds	r7, #20
 801376a:	46bd      	mov	sp, r7
 801376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013770:	4770      	bx	lr

08013772 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013772:	b480      	push	{r7}
 8013774:	b087      	sub	sp, #28
 8013776:	af00      	add	r7, sp, #0
 8013778:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	3301      	adds	r3, #1
 8013788:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013790:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013794:	021b      	lsls	r3, r3, #8
 8013796:	b21a      	sxth	r2, r3
 8013798:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801379c:	4313      	orrs	r3, r2
 801379e:	b21b      	sxth	r3, r3
 80137a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80137a2:	89fb      	ldrh	r3, [r7, #14]
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	371c      	adds	r7, #28
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b084      	sub	sp, #16
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80137ba:	2300      	movs	r3, #0
 80137bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	781b      	ldrb	r3, [r3, #0]
 80137c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80137c6:	2b40      	cmp	r3, #64	@ 0x40
 80137c8:	d005      	beq.n	80137d6 <USBD_StdDevReq+0x26>
 80137ca:	2b40      	cmp	r3, #64	@ 0x40
 80137cc:	d857      	bhi.n	801387e <USBD_StdDevReq+0xce>
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d00f      	beq.n	80137f2 <USBD_StdDevReq+0x42>
 80137d2:	2b20      	cmp	r3, #32
 80137d4:	d153      	bne.n	801387e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	32ae      	adds	r2, #174	@ 0xae
 80137e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137e4:	689b      	ldr	r3, [r3, #8]
 80137e6:	6839      	ldr	r1, [r7, #0]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	4798      	blx	r3
 80137ec:	4603      	mov	r3, r0
 80137ee:	73fb      	strb	r3, [r7, #15]
      break;
 80137f0:	e04a      	b.n	8013888 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	785b      	ldrb	r3, [r3, #1]
 80137f6:	2b09      	cmp	r3, #9
 80137f8:	d83b      	bhi.n	8013872 <USBD_StdDevReq+0xc2>
 80137fa:	a201      	add	r2, pc, #4	@ (adr r2, 8013800 <USBD_StdDevReq+0x50>)
 80137fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013800:	08013855 	.word	0x08013855
 8013804:	08013869 	.word	0x08013869
 8013808:	08013873 	.word	0x08013873
 801380c:	0801385f 	.word	0x0801385f
 8013810:	08013873 	.word	0x08013873
 8013814:	08013833 	.word	0x08013833
 8013818:	08013829 	.word	0x08013829
 801381c:	08013873 	.word	0x08013873
 8013820:	0801384b 	.word	0x0801384b
 8013824:	0801383d 	.word	0x0801383d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013828:	6839      	ldr	r1, [r7, #0]
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f000 fa3c 	bl	8013ca8 <USBD_GetDescriptor>
          break;
 8013830:	e024      	b.n	801387c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013832:	6839      	ldr	r1, [r7, #0]
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f000 fbcb 	bl	8013fd0 <USBD_SetAddress>
          break;
 801383a:	e01f      	b.n	801387c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801383c:	6839      	ldr	r1, [r7, #0]
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f000 fc0a 	bl	8014058 <USBD_SetConfig>
 8013844:	4603      	mov	r3, r0
 8013846:	73fb      	strb	r3, [r7, #15]
          break;
 8013848:	e018      	b.n	801387c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801384a:	6839      	ldr	r1, [r7, #0]
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f000 fcad 	bl	80141ac <USBD_GetConfig>
          break;
 8013852:	e013      	b.n	801387c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013854:	6839      	ldr	r1, [r7, #0]
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 fcde 	bl	8014218 <USBD_GetStatus>
          break;
 801385c:	e00e      	b.n	801387c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801385e:	6839      	ldr	r1, [r7, #0]
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 fd0d 	bl	8014280 <USBD_SetFeature>
          break;
 8013866:	e009      	b.n	801387c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013868:	6839      	ldr	r1, [r7, #0]
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 fd31 	bl	80142d2 <USBD_ClrFeature>
          break;
 8013870:	e004      	b.n	801387c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013872:	6839      	ldr	r1, [r7, #0]
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f000 fd88 	bl	801438a <USBD_CtlError>
          break;
 801387a:	bf00      	nop
      }
      break;
 801387c:	e004      	b.n	8013888 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801387e:	6839      	ldr	r1, [r7, #0]
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f000 fd82 	bl	801438a <USBD_CtlError>
      break;
 8013886:	bf00      	nop
  }

  return ret;
 8013888:	7bfb      	ldrb	r3, [r7, #15]
}
 801388a:	4618      	mov	r0, r3
 801388c:	3710      	adds	r7, #16
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop

08013894 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b084      	sub	sp, #16
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801389e:	2300      	movs	r3, #0
 80138a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80138aa:	2b40      	cmp	r3, #64	@ 0x40
 80138ac:	d005      	beq.n	80138ba <USBD_StdItfReq+0x26>
 80138ae:	2b40      	cmp	r3, #64	@ 0x40
 80138b0:	d852      	bhi.n	8013958 <USBD_StdItfReq+0xc4>
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d001      	beq.n	80138ba <USBD_StdItfReq+0x26>
 80138b6:	2b20      	cmp	r3, #32
 80138b8:	d14e      	bne.n	8013958 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80138c0:	b2db      	uxtb	r3, r3
 80138c2:	3b01      	subs	r3, #1
 80138c4:	2b02      	cmp	r3, #2
 80138c6:	d840      	bhi.n	801394a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	889b      	ldrh	r3, [r3, #4]
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	2b01      	cmp	r3, #1
 80138d0:	d836      	bhi.n	8013940 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	889b      	ldrh	r3, [r3, #4]
 80138d6:	b2db      	uxtb	r3, r3
 80138d8:	4619      	mov	r1, r3
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f7ff fedb 	bl	8013696 <USBD_CoreFindIF>
 80138e0:	4603      	mov	r3, r0
 80138e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80138e4:	7bbb      	ldrb	r3, [r7, #14]
 80138e6:	2bff      	cmp	r3, #255	@ 0xff
 80138e8:	d01d      	beq.n	8013926 <USBD_StdItfReq+0x92>
 80138ea:	7bbb      	ldrb	r3, [r7, #14]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d11a      	bne.n	8013926 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80138f0:	7bba      	ldrb	r2, [r7, #14]
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	32ae      	adds	r2, #174	@ 0xae
 80138f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138fa:	689b      	ldr	r3, [r3, #8]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d00f      	beq.n	8013920 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013900:	7bba      	ldrb	r2, [r7, #14]
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013908:	7bba      	ldrb	r2, [r7, #14]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	32ae      	adds	r2, #174	@ 0xae
 801390e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013912:	689b      	ldr	r3, [r3, #8]
 8013914:	6839      	ldr	r1, [r7, #0]
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	4798      	blx	r3
 801391a:	4603      	mov	r3, r0
 801391c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801391e:	e004      	b.n	801392a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013920:	2303      	movs	r3, #3
 8013922:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013924:	e001      	b.n	801392a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013926:	2303      	movs	r3, #3
 8013928:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	88db      	ldrh	r3, [r3, #6]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d110      	bne.n	8013954 <USBD_StdItfReq+0xc0>
 8013932:	7bfb      	ldrb	r3, [r7, #15]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d10d      	bne.n	8013954 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f000 fdfd 	bl	8014538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801393e:	e009      	b.n	8013954 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013940:	6839      	ldr	r1, [r7, #0]
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f000 fd21 	bl	801438a <USBD_CtlError>
          break;
 8013948:	e004      	b.n	8013954 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801394a:	6839      	ldr	r1, [r7, #0]
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f000 fd1c 	bl	801438a <USBD_CtlError>
          break;
 8013952:	e000      	b.n	8013956 <USBD_StdItfReq+0xc2>
          break;
 8013954:	bf00      	nop
      }
      break;
 8013956:	e004      	b.n	8013962 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013958:	6839      	ldr	r1, [r7, #0]
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 fd15 	bl	801438a <USBD_CtlError>
      break;
 8013960:	bf00      	nop
  }

  return ret;
 8013962:	7bfb      	ldrb	r3, [r7, #15]
}
 8013964:	4618      	mov	r0, r3
 8013966:	3710      	adds	r7, #16
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b084      	sub	sp, #16
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013976:	2300      	movs	r3, #0
 8013978:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	889b      	ldrh	r3, [r3, #4]
 801397e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013988:	2b40      	cmp	r3, #64	@ 0x40
 801398a:	d007      	beq.n	801399c <USBD_StdEPReq+0x30>
 801398c:	2b40      	cmp	r3, #64	@ 0x40
 801398e:	f200 817f 	bhi.w	8013c90 <USBD_StdEPReq+0x324>
 8013992:	2b00      	cmp	r3, #0
 8013994:	d02a      	beq.n	80139ec <USBD_StdEPReq+0x80>
 8013996:	2b20      	cmp	r3, #32
 8013998:	f040 817a 	bne.w	8013c90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801399c:	7bbb      	ldrb	r3, [r7, #14]
 801399e:	4619      	mov	r1, r3
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f7ff fe85 	bl	80136b0 <USBD_CoreFindEP>
 80139a6:	4603      	mov	r3, r0
 80139a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80139aa:	7b7b      	ldrb	r3, [r7, #13]
 80139ac:	2bff      	cmp	r3, #255	@ 0xff
 80139ae:	f000 8174 	beq.w	8013c9a <USBD_StdEPReq+0x32e>
 80139b2:	7b7b      	ldrb	r3, [r7, #13]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f040 8170 	bne.w	8013c9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80139ba:	7b7a      	ldrb	r2, [r7, #13]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80139c2:	7b7a      	ldrb	r2, [r7, #13]
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	32ae      	adds	r2, #174	@ 0xae
 80139c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139cc:	689b      	ldr	r3, [r3, #8]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	f000 8163 	beq.w	8013c9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80139d4:	7b7a      	ldrb	r2, [r7, #13]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	32ae      	adds	r2, #174	@ 0xae
 80139da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139de:	689b      	ldr	r3, [r3, #8]
 80139e0:	6839      	ldr	r1, [r7, #0]
 80139e2:	6878      	ldr	r0, [r7, #4]
 80139e4:	4798      	blx	r3
 80139e6:	4603      	mov	r3, r0
 80139e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80139ea:	e156      	b.n	8013c9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	785b      	ldrb	r3, [r3, #1]
 80139f0:	2b03      	cmp	r3, #3
 80139f2:	d008      	beq.n	8013a06 <USBD_StdEPReq+0x9a>
 80139f4:	2b03      	cmp	r3, #3
 80139f6:	f300 8145 	bgt.w	8013c84 <USBD_StdEPReq+0x318>
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	f000 809b 	beq.w	8013b36 <USBD_StdEPReq+0x1ca>
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d03c      	beq.n	8013a7e <USBD_StdEPReq+0x112>
 8013a04:	e13e      	b.n	8013c84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	2b02      	cmp	r3, #2
 8013a10:	d002      	beq.n	8013a18 <USBD_StdEPReq+0xac>
 8013a12:	2b03      	cmp	r3, #3
 8013a14:	d016      	beq.n	8013a44 <USBD_StdEPReq+0xd8>
 8013a16:	e02c      	b.n	8013a72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013a18:	7bbb      	ldrb	r3, [r7, #14]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00d      	beq.n	8013a3a <USBD_StdEPReq+0xce>
 8013a1e:	7bbb      	ldrb	r3, [r7, #14]
 8013a20:	2b80      	cmp	r3, #128	@ 0x80
 8013a22:	d00a      	beq.n	8013a3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a24:	7bbb      	ldrb	r3, [r7, #14]
 8013a26:	4619      	mov	r1, r3
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f001 f9d9 	bl	8014de0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a2e:	2180      	movs	r1, #128	@ 0x80
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f001 f9d5 	bl	8014de0 <USBD_LL_StallEP>
 8013a36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013a38:	e020      	b.n	8013a7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013a3a:	6839      	ldr	r1, [r7, #0]
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f000 fca4 	bl	801438a <USBD_CtlError>
              break;
 8013a42:	e01b      	b.n	8013a7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	885b      	ldrh	r3, [r3, #2]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10e      	bne.n	8013a6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013a4c:	7bbb      	ldrb	r3, [r7, #14]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d00b      	beq.n	8013a6a <USBD_StdEPReq+0xfe>
 8013a52:	7bbb      	ldrb	r3, [r7, #14]
 8013a54:	2b80      	cmp	r3, #128	@ 0x80
 8013a56:	d008      	beq.n	8013a6a <USBD_StdEPReq+0xfe>
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	88db      	ldrh	r3, [r3, #6]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d104      	bne.n	8013a6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a60:	7bbb      	ldrb	r3, [r7, #14]
 8013a62:	4619      	mov	r1, r3
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f001 f9bb 	bl	8014de0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f000 fd64 	bl	8014538 <USBD_CtlSendStatus>

              break;
 8013a70:	e004      	b.n	8013a7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013a72:	6839      	ldr	r1, [r7, #0]
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f000 fc88 	bl	801438a <USBD_CtlError>
              break;
 8013a7a:	bf00      	nop
          }
          break;
 8013a7c:	e107      	b.n	8013c8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	d002      	beq.n	8013a90 <USBD_StdEPReq+0x124>
 8013a8a:	2b03      	cmp	r3, #3
 8013a8c:	d016      	beq.n	8013abc <USBD_StdEPReq+0x150>
 8013a8e:	e04b      	b.n	8013b28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013a90:	7bbb      	ldrb	r3, [r7, #14]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d00d      	beq.n	8013ab2 <USBD_StdEPReq+0x146>
 8013a96:	7bbb      	ldrb	r3, [r7, #14]
 8013a98:	2b80      	cmp	r3, #128	@ 0x80
 8013a9a:	d00a      	beq.n	8013ab2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a9c:	7bbb      	ldrb	r3, [r7, #14]
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f001 f99d 	bl	8014de0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013aa6:	2180      	movs	r1, #128	@ 0x80
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f001 f999 	bl	8014de0 <USBD_LL_StallEP>
 8013aae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ab0:	e040      	b.n	8013b34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013ab2:	6839      	ldr	r1, [r7, #0]
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 fc68 	bl	801438a <USBD_CtlError>
              break;
 8013aba:	e03b      	b.n	8013b34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	885b      	ldrh	r3, [r3, #2]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d136      	bne.n	8013b32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013ac4:	7bbb      	ldrb	r3, [r7, #14]
 8013ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d004      	beq.n	8013ad8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013ace:	7bbb      	ldrb	r3, [r7, #14]
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f001 f9a3 	bl	8014e1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 fd2d 	bl	8014538 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013ade:	7bbb      	ldrb	r3, [r7, #14]
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7ff fde4 	bl	80136b0 <USBD_CoreFindEP>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013aec:	7b7b      	ldrb	r3, [r7, #13]
 8013aee:	2bff      	cmp	r3, #255	@ 0xff
 8013af0:	d01f      	beq.n	8013b32 <USBD_StdEPReq+0x1c6>
 8013af2:	7b7b      	ldrb	r3, [r7, #13]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d11c      	bne.n	8013b32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013af8:	7b7a      	ldrb	r2, [r7, #13]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013b00:	7b7a      	ldrb	r2, [r7, #13]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	32ae      	adds	r2, #174	@ 0xae
 8013b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d010      	beq.n	8013b32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013b10:	7b7a      	ldrb	r2, [r7, #13]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	32ae      	adds	r2, #174	@ 0xae
 8013b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	6839      	ldr	r1, [r7, #0]
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	4798      	blx	r3
 8013b22:	4603      	mov	r3, r0
 8013b24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013b26:	e004      	b.n	8013b32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013b28:	6839      	ldr	r1, [r7, #0]
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f000 fc2d 	bl	801438a <USBD_CtlError>
              break;
 8013b30:	e000      	b.n	8013b34 <USBD_StdEPReq+0x1c8>
              break;
 8013b32:	bf00      	nop
          }
          break;
 8013b34:	e0ab      	b.n	8013c8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	2b02      	cmp	r3, #2
 8013b40:	d002      	beq.n	8013b48 <USBD_StdEPReq+0x1dc>
 8013b42:	2b03      	cmp	r3, #3
 8013b44:	d032      	beq.n	8013bac <USBD_StdEPReq+0x240>
 8013b46:	e097      	b.n	8013c78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b48:	7bbb      	ldrb	r3, [r7, #14]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d007      	beq.n	8013b5e <USBD_StdEPReq+0x1f2>
 8013b4e:	7bbb      	ldrb	r3, [r7, #14]
 8013b50:	2b80      	cmp	r3, #128	@ 0x80
 8013b52:	d004      	beq.n	8013b5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013b54:	6839      	ldr	r1, [r7, #0]
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 fc17 	bl	801438a <USBD_CtlError>
                break;
 8013b5c:	e091      	b.n	8013c82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	da0b      	bge.n	8013b7e <USBD_StdEPReq+0x212>
 8013b66:	7bbb      	ldrb	r3, [r7, #14]
 8013b68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013b6c:	4613      	mov	r3, r2
 8013b6e:	009b      	lsls	r3, r3, #2
 8013b70:	4413      	add	r3, r2
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	3310      	adds	r3, #16
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	4413      	add	r3, r2
 8013b7a:	3304      	adds	r3, #4
 8013b7c:	e00b      	b.n	8013b96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013b7e:	7bbb      	ldrb	r3, [r7, #14]
 8013b80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b84:	4613      	mov	r3, r2
 8013b86:	009b      	lsls	r3, r3, #2
 8013b88:	4413      	add	r3, r2
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	4413      	add	r3, r2
 8013b94:	3304      	adds	r3, #4
 8013b96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	2202      	movs	r2, #2
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 fc6d 	bl	8014484 <USBD_CtlSendData>
              break;
 8013baa:	e06a      	b.n	8013c82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	da11      	bge.n	8013bd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013bb4:	7bbb      	ldrb	r3, [r7, #14]
 8013bb6:	f003 020f 	and.w	r2, r3, #15
 8013bba:	6879      	ldr	r1, [r7, #4]
 8013bbc:	4613      	mov	r3, r2
 8013bbe:	009b      	lsls	r3, r3, #2
 8013bc0:	4413      	add	r3, r2
 8013bc2:	009b      	lsls	r3, r3, #2
 8013bc4:	440b      	add	r3, r1
 8013bc6:	3324      	adds	r3, #36	@ 0x24
 8013bc8:	881b      	ldrh	r3, [r3, #0]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d117      	bne.n	8013bfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013bce:	6839      	ldr	r1, [r7, #0]
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 fbda 	bl	801438a <USBD_CtlError>
                  break;
 8013bd6:	e054      	b.n	8013c82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013bd8:	7bbb      	ldrb	r3, [r7, #14]
 8013bda:	f003 020f 	and.w	r2, r3, #15
 8013bde:	6879      	ldr	r1, [r7, #4]
 8013be0:	4613      	mov	r3, r2
 8013be2:	009b      	lsls	r3, r3, #2
 8013be4:	4413      	add	r3, r2
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	440b      	add	r3, r1
 8013bea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013bee:	881b      	ldrh	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d104      	bne.n	8013bfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013bf4:	6839      	ldr	r1, [r7, #0]
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f000 fbc7 	bl	801438a <USBD_CtlError>
                  break;
 8013bfc:	e041      	b.n	8013c82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013bfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	da0b      	bge.n	8013c1e <USBD_StdEPReq+0x2b2>
 8013c06:	7bbb      	ldrb	r3, [r7, #14]
 8013c08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013c0c:	4613      	mov	r3, r2
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	4413      	add	r3, r2
 8013c12:	009b      	lsls	r3, r3, #2
 8013c14:	3310      	adds	r3, #16
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	4413      	add	r3, r2
 8013c1a:	3304      	adds	r3, #4
 8013c1c:	e00b      	b.n	8013c36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013c1e:	7bbb      	ldrb	r3, [r7, #14]
 8013c20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c24:	4613      	mov	r3, r2
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	4413      	add	r3, r2
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	4413      	add	r3, r2
 8013c34:	3304      	adds	r3, #4
 8013c36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013c38:	7bbb      	ldrb	r3, [r7, #14]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d002      	beq.n	8013c44 <USBD_StdEPReq+0x2d8>
 8013c3e:	7bbb      	ldrb	r3, [r7, #14]
 8013c40:	2b80      	cmp	r3, #128	@ 0x80
 8013c42:	d103      	bne.n	8013c4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2200      	movs	r2, #0
 8013c48:	601a      	str	r2, [r3, #0]
 8013c4a:	e00e      	b.n	8013c6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013c4c:	7bbb      	ldrb	r3, [r7, #14]
 8013c4e:	4619      	mov	r1, r3
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f001 f903 	bl	8014e5c <USBD_LL_IsStallEP>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d003      	beq.n	8013c64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	2201      	movs	r2, #1
 8013c60:	601a      	str	r2, [r3, #0]
 8013c62:	e002      	b.n	8013c6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2200      	movs	r2, #0
 8013c68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	2202      	movs	r2, #2
 8013c6e:	4619      	mov	r1, r3
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f000 fc07 	bl	8014484 <USBD_CtlSendData>
              break;
 8013c76:	e004      	b.n	8013c82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013c78:	6839      	ldr	r1, [r7, #0]
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f000 fb85 	bl	801438a <USBD_CtlError>
              break;
 8013c80:	bf00      	nop
          }
          break;
 8013c82:	e004      	b.n	8013c8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013c84:	6839      	ldr	r1, [r7, #0]
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f000 fb7f 	bl	801438a <USBD_CtlError>
          break;
 8013c8c:	bf00      	nop
      }
      break;
 8013c8e:	e005      	b.n	8013c9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013c90:	6839      	ldr	r1, [r7, #0]
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f000 fb79 	bl	801438a <USBD_CtlError>
      break;
 8013c98:	e000      	b.n	8013c9c <USBD_StdEPReq+0x330>
      break;
 8013c9a:	bf00      	nop
  }

  return ret;
 8013c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3710      	adds	r7, #16
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
	...

08013ca8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b084      	sub	sp, #16
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	885b      	ldrh	r3, [r3, #2]
 8013cc2:	0a1b      	lsrs	r3, r3, #8
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	3b01      	subs	r3, #1
 8013cc8:	2b0e      	cmp	r3, #14
 8013cca:	f200 8152 	bhi.w	8013f72 <USBD_GetDescriptor+0x2ca>
 8013cce:	a201      	add	r2, pc, #4	@ (adr r2, 8013cd4 <USBD_GetDescriptor+0x2c>)
 8013cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cd4:	08013d45 	.word	0x08013d45
 8013cd8:	08013d5d 	.word	0x08013d5d
 8013cdc:	08013d9d 	.word	0x08013d9d
 8013ce0:	08013f73 	.word	0x08013f73
 8013ce4:	08013f73 	.word	0x08013f73
 8013ce8:	08013f13 	.word	0x08013f13
 8013cec:	08013f3f 	.word	0x08013f3f
 8013cf0:	08013f73 	.word	0x08013f73
 8013cf4:	08013f73 	.word	0x08013f73
 8013cf8:	08013f73 	.word	0x08013f73
 8013cfc:	08013f73 	.word	0x08013f73
 8013d00:	08013f73 	.word	0x08013f73
 8013d04:	08013f73 	.word	0x08013f73
 8013d08:	08013f73 	.word	0x08013f73
 8013d0c:	08013d11 	.word	0x08013d11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013d16:	69db      	ldr	r3, [r3, #28]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d00b      	beq.n	8013d34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013d22:	69db      	ldr	r3, [r3, #28]
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	7c12      	ldrb	r2, [r2, #16]
 8013d28:	f107 0108 	add.w	r1, r7, #8
 8013d2c:	4610      	mov	r0, r2
 8013d2e:	4798      	blx	r3
 8013d30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013d32:	e126      	b.n	8013f82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013d34:	6839      	ldr	r1, [r7, #0]
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f000 fb27 	bl	801438a <USBD_CtlError>
        err++;
 8013d3c:	7afb      	ldrb	r3, [r7, #11]
 8013d3e:	3301      	adds	r3, #1
 8013d40:	72fb      	strb	r3, [r7, #11]
      break;
 8013d42:	e11e      	b.n	8013f82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	687a      	ldr	r2, [r7, #4]
 8013d4e:	7c12      	ldrb	r2, [r2, #16]
 8013d50:	f107 0108 	add.w	r1, r7, #8
 8013d54:	4610      	mov	r0, r2
 8013d56:	4798      	blx	r3
 8013d58:	60f8      	str	r0, [r7, #12]
      break;
 8013d5a:	e112      	b.n	8013f82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	7c1b      	ldrb	r3, [r3, #16]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d10d      	bne.n	8013d80 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d6c:	f107 0208 	add.w	r2, r7, #8
 8013d70:	4610      	mov	r0, r2
 8013d72:	4798      	blx	r3
 8013d74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	3301      	adds	r3, #1
 8013d7a:	2202      	movs	r2, #2
 8013d7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013d7e:	e100      	b.n	8013f82 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d88:	f107 0208 	add.w	r2, r7, #8
 8013d8c:	4610      	mov	r0, r2
 8013d8e:	4798      	blx	r3
 8013d90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	3301      	adds	r3, #1
 8013d96:	2202      	movs	r2, #2
 8013d98:	701a      	strb	r2, [r3, #0]
      break;
 8013d9a:	e0f2      	b.n	8013f82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	885b      	ldrh	r3, [r3, #2]
 8013da0:	b2db      	uxtb	r3, r3
 8013da2:	2b05      	cmp	r3, #5
 8013da4:	f200 80ac 	bhi.w	8013f00 <USBD_GetDescriptor+0x258>
 8013da8:	a201      	add	r2, pc, #4	@ (adr r2, 8013db0 <USBD_GetDescriptor+0x108>)
 8013daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dae:	bf00      	nop
 8013db0:	08013dc9 	.word	0x08013dc9
 8013db4:	08013dfd 	.word	0x08013dfd
 8013db8:	08013e31 	.word	0x08013e31
 8013dbc:	08013e65 	.word	0x08013e65
 8013dc0:	08013e99 	.word	0x08013e99
 8013dc4:	08013ecd 	.word	0x08013ecd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d00b      	beq.n	8013dec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	7c12      	ldrb	r2, [r2, #16]
 8013de0:	f107 0108 	add.w	r1, r7, #8
 8013de4:	4610      	mov	r0, r2
 8013de6:	4798      	blx	r3
 8013de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dea:	e091      	b.n	8013f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013dec:	6839      	ldr	r1, [r7, #0]
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 facb 	bl	801438a <USBD_CtlError>
            err++;
 8013df4:	7afb      	ldrb	r3, [r7, #11]
 8013df6:	3301      	adds	r3, #1
 8013df8:	72fb      	strb	r3, [r7, #11]
          break;
 8013dfa:	e089      	b.n	8013f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e02:	689b      	ldr	r3, [r3, #8]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d00b      	beq.n	8013e20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	7c12      	ldrb	r2, [r2, #16]
 8013e14:	f107 0108 	add.w	r1, r7, #8
 8013e18:	4610      	mov	r0, r2
 8013e1a:	4798      	blx	r3
 8013e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e1e:	e077      	b.n	8013f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e20:	6839      	ldr	r1, [r7, #0]
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f000 fab1 	bl	801438a <USBD_CtlError>
            err++;
 8013e28:	7afb      	ldrb	r3, [r7, #11]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8013e2e:	e06f      	b.n	8013f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d00b      	beq.n	8013e54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	687a      	ldr	r2, [r7, #4]
 8013e46:	7c12      	ldrb	r2, [r2, #16]
 8013e48:	f107 0108 	add.w	r1, r7, #8
 8013e4c:	4610      	mov	r0, r2
 8013e4e:	4798      	blx	r3
 8013e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e52:	e05d      	b.n	8013f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e54:	6839      	ldr	r1, [r7, #0]
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f000 fa97 	bl	801438a <USBD_CtlError>
            err++;
 8013e5c:	7afb      	ldrb	r3, [r7, #11]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	72fb      	strb	r3, [r7, #11]
          break;
 8013e62:	e055      	b.n	8013f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e6a:	691b      	ldr	r3, [r3, #16]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d00b      	beq.n	8013e88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e76:	691b      	ldr	r3, [r3, #16]
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	7c12      	ldrb	r2, [r2, #16]
 8013e7c:	f107 0108 	add.w	r1, r7, #8
 8013e80:	4610      	mov	r0, r2
 8013e82:	4798      	blx	r3
 8013e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e86:	e043      	b.n	8013f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e88:	6839      	ldr	r1, [r7, #0]
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f000 fa7d 	bl	801438a <USBD_CtlError>
            err++;
 8013e90:	7afb      	ldrb	r3, [r7, #11]
 8013e92:	3301      	adds	r3, #1
 8013e94:	72fb      	strb	r3, [r7, #11]
          break;
 8013e96:	e03b      	b.n	8013f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e9e:	695b      	ldr	r3, [r3, #20]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d00b      	beq.n	8013ebc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013eaa:	695b      	ldr	r3, [r3, #20]
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	7c12      	ldrb	r2, [r2, #16]
 8013eb0:	f107 0108 	add.w	r1, r7, #8
 8013eb4:	4610      	mov	r0, r2
 8013eb6:	4798      	blx	r3
 8013eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013eba:	e029      	b.n	8013f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ebc:	6839      	ldr	r1, [r7, #0]
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f000 fa63 	bl	801438a <USBD_CtlError>
            err++;
 8013ec4:	7afb      	ldrb	r3, [r7, #11]
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8013eca:	e021      	b.n	8013f10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ed2:	699b      	ldr	r3, [r3, #24]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d00b      	beq.n	8013ef0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ede:	699b      	ldr	r3, [r3, #24]
 8013ee0:	687a      	ldr	r2, [r7, #4]
 8013ee2:	7c12      	ldrb	r2, [r2, #16]
 8013ee4:	f107 0108 	add.w	r1, r7, #8
 8013ee8:	4610      	mov	r0, r2
 8013eea:	4798      	blx	r3
 8013eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013eee:	e00f      	b.n	8013f10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013ef0:	6839      	ldr	r1, [r7, #0]
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f000 fa49 	bl	801438a <USBD_CtlError>
            err++;
 8013ef8:	7afb      	ldrb	r3, [r7, #11]
 8013efa:	3301      	adds	r3, #1
 8013efc:	72fb      	strb	r3, [r7, #11]
          break;
 8013efe:	e007      	b.n	8013f10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013f00:	6839      	ldr	r1, [r7, #0]
 8013f02:	6878      	ldr	r0, [r7, #4]
 8013f04:	f000 fa41 	bl	801438a <USBD_CtlError>
          err++;
 8013f08:	7afb      	ldrb	r3, [r7, #11]
 8013f0a:	3301      	adds	r3, #1
 8013f0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013f0e:	bf00      	nop
      }
      break;
 8013f10:	e037      	b.n	8013f82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	7c1b      	ldrb	r3, [r3, #16]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d109      	bne.n	8013f2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f22:	f107 0208 	add.w	r2, r7, #8
 8013f26:	4610      	mov	r0, r2
 8013f28:	4798      	blx	r3
 8013f2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f2c:	e029      	b.n	8013f82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013f2e:	6839      	ldr	r1, [r7, #0]
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f000 fa2a 	bl	801438a <USBD_CtlError>
        err++;
 8013f36:	7afb      	ldrb	r3, [r7, #11]
 8013f38:	3301      	adds	r3, #1
 8013f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8013f3c:	e021      	b.n	8013f82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	7c1b      	ldrb	r3, [r3, #16]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d10d      	bne.n	8013f62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f4e:	f107 0208 	add.w	r2, r7, #8
 8013f52:	4610      	mov	r0, r2
 8013f54:	4798      	blx	r3
 8013f56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	2207      	movs	r2, #7
 8013f5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013f60:	e00f      	b.n	8013f82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013f62:	6839      	ldr	r1, [r7, #0]
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f000 fa10 	bl	801438a <USBD_CtlError>
        err++;
 8013f6a:	7afb      	ldrb	r3, [r7, #11]
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8013f70:	e007      	b.n	8013f82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013f72:	6839      	ldr	r1, [r7, #0]
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f000 fa08 	bl	801438a <USBD_CtlError>
      err++;
 8013f7a:	7afb      	ldrb	r3, [r7, #11]
 8013f7c:	3301      	adds	r3, #1
 8013f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8013f80:	bf00      	nop
  }

  if (err != 0U)
 8013f82:	7afb      	ldrb	r3, [r7, #11]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d11e      	bne.n	8013fc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	88db      	ldrh	r3, [r3, #6]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d016      	beq.n	8013fbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013f90:	893b      	ldrh	r3, [r7, #8]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d00e      	beq.n	8013fb4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	88da      	ldrh	r2, [r3, #6]
 8013f9a:	893b      	ldrh	r3, [r7, #8]
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	bf28      	it	cs
 8013fa0:	4613      	movcs	r3, r2
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013fa6:	893b      	ldrh	r3, [r7, #8]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	68f9      	ldr	r1, [r7, #12]
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f000 fa69 	bl	8014484 <USBD_CtlSendData>
 8013fb2:	e009      	b.n	8013fc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013fb4:	6839      	ldr	r1, [r7, #0]
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f000 f9e7 	bl	801438a <USBD_CtlError>
 8013fbc:	e004      	b.n	8013fc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f000 faba 	bl	8014538 <USBD_CtlSendStatus>
 8013fc4:	e000      	b.n	8013fc8 <USBD_GetDescriptor+0x320>
    return;
 8013fc6:	bf00      	nop
  }
}
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop

08013fd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	889b      	ldrh	r3, [r3, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d131      	bne.n	8014046 <USBD_SetAddress+0x76>
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	88db      	ldrh	r3, [r3, #6]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d12d      	bne.n	8014046 <USBD_SetAddress+0x76>
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	885b      	ldrh	r3, [r3, #2]
 8013fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ff0:	d829      	bhi.n	8014046 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	885b      	ldrh	r3, [r3, #2]
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014004:	b2db      	uxtb	r3, r3
 8014006:	2b03      	cmp	r3, #3
 8014008:	d104      	bne.n	8014014 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801400a:	6839      	ldr	r1, [r7, #0]
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f000 f9bc 	bl	801438a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014012:	e01d      	b.n	8014050 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	7bfa      	ldrb	r2, [r7, #15]
 8014018:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801401c:	7bfb      	ldrb	r3, [r7, #15]
 801401e:	4619      	mov	r1, r3
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f000 ff47 	bl	8014eb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f000 fa86 	bl	8014538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801402c:	7bfb      	ldrb	r3, [r7, #15]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d004      	beq.n	801403c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2202      	movs	r2, #2
 8014036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801403a:	e009      	b.n	8014050 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	2201      	movs	r2, #1
 8014040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014044:	e004      	b.n	8014050 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014046:	6839      	ldr	r1, [r7, #0]
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 f99e 	bl	801438a <USBD_CtlError>
  }
}
 801404e:	bf00      	nop
 8014050:	bf00      	nop
 8014052:	3710      	adds	r7, #16
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
 8014060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014062:	2300      	movs	r3, #0
 8014064:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	885b      	ldrh	r3, [r3, #2]
 801406a:	b2da      	uxtb	r2, r3
 801406c:	4b4e      	ldr	r3, [pc, #312]	@ (80141a8 <USBD_SetConfig+0x150>)
 801406e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014070:	4b4d      	ldr	r3, [pc, #308]	@ (80141a8 <USBD_SetConfig+0x150>)
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	2b01      	cmp	r3, #1
 8014076:	d905      	bls.n	8014084 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014078:	6839      	ldr	r1, [r7, #0]
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	f000 f985 	bl	801438a <USBD_CtlError>
    return USBD_FAIL;
 8014080:	2303      	movs	r3, #3
 8014082:	e08c      	b.n	801419e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801408a:	b2db      	uxtb	r3, r3
 801408c:	2b02      	cmp	r3, #2
 801408e:	d002      	beq.n	8014096 <USBD_SetConfig+0x3e>
 8014090:	2b03      	cmp	r3, #3
 8014092:	d029      	beq.n	80140e8 <USBD_SetConfig+0x90>
 8014094:	e075      	b.n	8014182 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014096:	4b44      	ldr	r3, [pc, #272]	@ (80141a8 <USBD_SetConfig+0x150>)
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d020      	beq.n	80140e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801409e:	4b42      	ldr	r3, [pc, #264]	@ (80141a8 <USBD_SetConfig+0x150>)
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	461a      	mov	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80140a8:	4b3f      	ldr	r3, [pc, #252]	@ (80141a8 <USBD_SetConfig+0x150>)
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	4619      	mov	r1, r3
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	f7fe ffb9 	bl	8013026 <USBD_SetClassConfig>
 80140b4:	4603      	mov	r3, r0
 80140b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80140b8:	7bfb      	ldrb	r3, [r7, #15]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d008      	beq.n	80140d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80140be:	6839      	ldr	r1, [r7, #0]
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f000 f962 	bl	801438a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2202      	movs	r2, #2
 80140ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80140ce:	e065      	b.n	801419c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f000 fa31 	bl	8014538 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2203      	movs	r2, #3
 80140da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80140de:	e05d      	b.n	801419c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f000 fa29 	bl	8014538 <USBD_CtlSendStatus>
      break;
 80140e6:	e059      	b.n	801419c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80140e8:	4b2f      	ldr	r3, [pc, #188]	@ (80141a8 <USBD_SetConfig+0x150>)
 80140ea:	781b      	ldrb	r3, [r3, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d112      	bne.n	8014116 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2202      	movs	r2, #2
 80140f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80140f8:	4b2b      	ldr	r3, [pc, #172]	@ (80141a8 <USBD_SetConfig+0x150>)
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	461a      	mov	r2, r3
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014102:	4b29      	ldr	r3, [pc, #164]	@ (80141a8 <USBD_SetConfig+0x150>)
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	4619      	mov	r1, r3
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7fe ffa8 	bl	801305e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f000 fa12 	bl	8014538 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014114:	e042      	b.n	801419c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014116:	4b24      	ldr	r3, [pc, #144]	@ (80141a8 <USBD_SetConfig+0x150>)
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	461a      	mov	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	429a      	cmp	r2, r3
 8014122:	d02a      	beq.n	801417a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	685b      	ldr	r3, [r3, #4]
 8014128:	b2db      	uxtb	r3, r3
 801412a:	4619      	mov	r1, r3
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f7fe ff96 	bl	801305e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014132:	4b1d      	ldr	r3, [pc, #116]	@ (80141a8 <USBD_SetConfig+0x150>)
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	461a      	mov	r2, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801413c:	4b1a      	ldr	r3, [pc, #104]	@ (80141a8 <USBD_SetConfig+0x150>)
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	4619      	mov	r1, r3
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7fe ff6f 	bl	8013026 <USBD_SetClassConfig>
 8014148:	4603      	mov	r3, r0
 801414a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801414c:	7bfb      	ldrb	r3, [r7, #15]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d00f      	beq.n	8014172 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014152:	6839      	ldr	r1, [r7, #0]
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f000 f918 	bl	801438a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	b2db      	uxtb	r3, r3
 8014160:	4619      	mov	r1, r3
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f7fe ff7b 	bl	801305e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2202      	movs	r2, #2
 801416c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014170:	e014      	b.n	801419c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f000 f9e0 	bl	8014538 <USBD_CtlSendStatus>
      break;
 8014178:	e010      	b.n	801419c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f000 f9dc 	bl	8014538 <USBD_CtlSendStatus>
      break;
 8014180:	e00c      	b.n	801419c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014182:	6839      	ldr	r1, [r7, #0]
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f000 f900 	bl	801438a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801418a:	4b07      	ldr	r3, [pc, #28]	@ (80141a8 <USBD_SetConfig+0x150>)
 801418c:	781b      	ldrb	r3, [r3, #0]
 801418e:	4619      	mov	r1, r3
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f7fe ff64 	bl	801305e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014196:	2303      	movs	r3, #3
 8014198:	73fb      	strb	r3, [r7, #15]
      break;
 801419a:	bf00      	nop
  }

  return ret;
 801419c:	7bfb      	ldrb	r3, [r7, #15]
}
 801419e:	4618      	mov	r0, r3
 80141a0:	3710      	adds	r7, #16
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bd80      	pop	{r7, pc}
 80141a6:	bf00      	nop
 80141a8:	24000f38 	.word	0x24000f38

080141ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	88db      	ldrh	r3, [r3, #6]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d004      	beq.n	80141c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80141be:	6839      	ldr	r1, [r7, #0]
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f000 f8e2 	bl	801438a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80141c6:	e023      	b.n	8014210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	2b02      	cmp	r3, #2
 80141d2:	dc02      	bgt.n	80141da <USBD_GetConfig+0x2e>
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	dc03      	bgt.n	80141e0 <USBD_GetConfig+0x34>
 80141d8:	e015      	b.n	8014206 <USBD_GetConfig+0x5a>
 80141da:	2b03      	cmp	r3, #3
 80141dc:	d00b      	beq.n	80141f6 <USBD_GetConfig+0x4a>
 80141de:	e012      	b.n	8014206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2200      	movs	r2, #0
 80141e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	3308      	adds	r3, #8
 80141ea:	2201      	movs	r2, #1
 80141ec:	4619      	mov	r1, r3
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f000 f948 	bl	8014484 <USBD_CtlSendData>
        break;
 80141f4:	e00c      	b.n	8014210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	3304      	adds	r3, #4
 80141fa:	2201      	movs	r2, #1
 80141fc:	4619      	mov	r1, r3
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f000 f940 	bl	8014484 <USBD_CtlSendData>
        break;
 8014204:	e004      	b.n	8014210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014206:	6839      	ldr	r1, [r7, #0]
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f000 f8be 	bl	801438a <USBD_CtlError>
        break;
 801420e:	bf00      	nop
}
 8014210:	bf00      	nop
 8014212:	3708      	adds	r7, #8
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}

08014218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014228:	b2db      	uxtb	r3, r3
 801422a:	3b01      	subs	r3, #1
 801422c:	2b02      	cmp	r3, #2
 801422e:	d81e      	bhi.n	801426e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	88db      	ldrh	r3, [r3, #6]
 8014234:	2b02      	cmp	r3, #2
 8014236:	d004      	beq.n	8014242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014238:	6839      	ldr	r1, [r7, #0]
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f000 f8a5 	bl	801438a <USBD_CtlError>
        break;
 8014240:	e01a      	b.n	8014278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2201      	movs	r2, #1
 8014246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801424e:	2b00      	cmp	r3, #0
 8014250:	d005      	beq.n	801425e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	68db      	ldr	r3, [r3, #12]
 8014256:	f043 0202 	orr.w	r2, r3, #2
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	330c      	adds	r3, #12
 8014262:	2202      	movs	r2, #2
 8014264:	4619      	mov	r1, r3
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f000 f90c 	bl	8014484 <USBD_CtlSendData>
      break;
 801426c:	e004      	b.n	8014278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801426e:	6839      	ldr	r1, [r7, #0]
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f000 f88a 	bl	801438a <USBD_CtlError>
      break;
 8014276:	bf00      	nop
  }
}
 8014278:	bf00      	nop
 801427a:	3708      	adds	r7, #8
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	885b      	ldrh	r3, [r3, #2]
 801428e:	2b01      	cmp	r3, #1
 8014290:	d107      	bne.n	80142a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2201      	movs	r2, #1
 8014296:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f000 f94c 	bl	8014538 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80142a0:	e013      	b.n	80142ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	885b      	ldrh	r3, [r3, #2]
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	d10b      	bne.n	80142c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	889b      	ldrh	r3, [r3, #4]
 80142ae:	0a1b      	lsrs	r3, r3, #8
 80142b0:	b29b      	uxth	r3, r3
 80142b2:	b2da      	uxtb	r2, r3
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f000 f93c 	bl	8014538 <USBD_CtlSendStatus>
}
 80142c0:	e003      	b.n	80142ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80142c2:	6839      	ldr	r1, [r7, #0]
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 f860 	bl	801438a <USBD_CtlError>
}
 80142ca:	bf00      	nop
 80142cc:	3708      	adds	r7, #8
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bd80      	pop	{r7, pc}

080142d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142d2:	b580      	push	{r7, lr}
 80142d4:	b082      	sub	sp, #8
 80142d6:	af00      	add	r7, sp, #0
 80142d8:	6078      	str	r0, [r7, #4]
 80142da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	3b01      	subs	r3, #1
 80142e6:	2b02      	cmp	r3, #2
 80142e8:	d80b      	bhi.n	8014302 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	885b      	ldrh	r3, [r3, #2]
 80142ee:	2b01      	cmp	r3, #1
 80142f0:	d10c      	bne.n	801430c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2200      	movs	r2, #0
 80142f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 f91c 	bl	8014538 <USBD_CtlSendStatus>
      }
      break;
 8014300:	e004      	b.n	801430c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014302:	6839      	ldr	r1, [r7, #0]
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f000 f840 	bl	801438a <USBD_CtlError>
      break;
 801430a:	e000      	b.n	801430e <USBD_ClrFeature+0x3c>
      break;
 801430c:	bf00      	nop
  }
}
 801430e:	bf00      	nop
 8014310:	3708      	adds	r7, #8
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}

08014316 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014316:	b580      	push	{r7, lr}
 8014318:	b084      	sub	sp, #16
 801431a:	af00      	add	r7, sp, #0
 801431c:	6078      	str	r0, [r7, #4]
 801431e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	781a      	ldrb	r2, [r3, #0]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	3301      	adds	r3, #1
 8014330:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	781a      	ldrb	r2, [r3, #0]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	3301      	adds	r3, #1
 801433e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014340:	68f8      	ldr	r0, [r7, #12]
 8014342:	f7ff fa16 	bl	8013772 <SWAPBYTE>
 8014346:	4603      	mov	r3, r0
 8014348:	461a      	mov	r2, r3
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	3301      	adds	r3, #1
 8014352:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	3301      	adds	r3, #1
 8014358:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801435a:	68f8      	ldr	r0, [r7, #12]
 801435c:	f7ff fa09 	bl	8013772 <SWAPBYTE>
 8014360:	4603      	mov	r3, r0
 8014362:	461a      	mov	r2, r3
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	3301      	adds	r3, #1
 801436c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	3301      	adds	r3, #1
 8014372:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014374:	68f8      	ldr	r0, [r7, #12]
 8014376:	f7ff f9fc 	bl	8013772 <SWAPBYTE>
 801437a:	4603      	mov	r3, r0
 801437c:	461a      	mov	r2, r3
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	80da      	strh	r2, [r3, #6]
}
 8014382:	bf00      	nop
 8014384:	3710      	adds	r7, #16
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801438a:	b580      	push	{r7, lr}
 801438c:	b082      	sub	sp, #8
 801438e:	af00      	add	r7, sp, #0
 8014390:	6078      	str	r0, [r7, #4]
 8014392:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014394:	2180      	movs	r1, #128	@ 0x80
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 fd22 	bl	8014de0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801439c:	2100      	movs	r1, #0
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 fd1e 	bl	8014de0 <USBD_LL_StallEP>
}
 80143a4:	bf00      	nop
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b086      	sub	sp, #24
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	60f8      	str	r0, [r7, #12]
 80143b4:	60b9      	str	r1, [r7, #8]
 80143b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80143b8:	2300      	movs	r3, #0
 80143ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d042      	beq.n	8014448 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80143c6:	6938      	ldr	r0, [r7, #16]
 80143c8:	f000 f842 	bl	8014450 <USBD_GetLen>
 80143cc:	4603      	mov	r3, r0
 80143ce:	3301      	adds	r3, #1
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80143d6:	d808      	bhi.n	80143ea <USBD_GetString+0x3e>
 80143d8:	6938      	ldr	r0, [r7, #16]
 80143da:	f000 f839 	bl	8014450 <USBD_GetLen>
 80143de:	4603      	mov	r3, r0
 80143e0:	3301      	adds	r3, #1
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	005b      	lsls	r3, r3, #1
 80143e6:	b29a      	uxth	r2, r3
 80143e8:	e001      	b.n	80143ee <USBD_GetString+0x42>
 80143ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80143f2:	7dfb      	ldrb	r3, [r7, #23]
 80143f4:	68ba      	ldr	r2, [r7, #8]
 80143f6:	4413      	add	r3, r2
 80143f8:	687a      	ldr	r2, [r7, #4]
 80143fa:	7812      	ldrb	r2, [r2, #0]
 80143fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80143fe:	7dfb      	ldrb	r3, [r7, #23]
 8014400:	3301      	adds	r3, #1
 8014402:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014404:	7dfb      	ldrb	r3, [r7, #23]
 8014406:	68ba      	ldr	r2, [r7, #8]
 8014408:	4413      	add	r3, r2
 801440a:	2203      	movs	r2, #3
 801440c:	701a      	strb	r2, [r3, #0]
  idx++;
 801440e:	7dfb      	ldrb	r3, [r7, #23]
 8014410:	3301      	adds	r3, #1
 8014412:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014414:	e013      	b.n	801443e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014416:	7dfb      	ldrb	r3, [r7, #23]
 8014418:	68ba      	ldr	r2, [r7, #8]
 801441a:	4413      	add	r3, r2
 801441c:	693a      	ldr	r2, [r7, #16]
 801441e:	7812      	ldrb	r2, [r2, #0]
 8014420:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	3301      	adds	r3, #1
 8014426:	613b      	str	r3, [r7, #16]
    idx++;
 8014428:	7dfb      	ldrb	r3, [r7, #23]
 801442a:	3301      	adds	r3, #1
 801442c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801442e:	7dfb      	ldrb	r3, [r7, #23]
 8014430:	68ba      	ldr	r2, [r7, #8]
 8014432:	4413      	add	r3, r2
 8014434:	2200      	movs	r2, #0
 8014436:	701a      	strb	r2, [r3, #0]
    idx++;
 8014438:	7dfb      	ldrb	r3, [r7, #23]
 801443a:	3301      	adds	r3, #1
 801443c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d1e7      	bne.n	8014416 <USBD_GetString+0x6a>
 8014446:	e000      	b.n	801444a <USBD_GetString+0x9e>
    return;
 8014448:	bf00      	nop
  }
}
 801444a:	3718      	adds	r7, #24
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014450:	b480      	push	{r7}
 8014452:	b085      	sub	sp, #20
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014458:	2300      	movs	r3, #0
 801445a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014460:	e005      	b.n	801446e <USBD_GetLen+0x1e>
  {
    len++;
 8014462:	7bfb      	ldrb	r3, [r7, #15]
 8014464:	3301      	adds	r3, #1
 8014466:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	3301      	adds	r3, #1
 801446c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d1f5      	bne.n	8014462 <USBD_GetLen+0x12>
  }

  return len;
 8014476:	7bfb      	ldrb	r3, [r7, #15]
}
 8014478:	4618      	mov	r0, r3
 801447a:	3714      	adds	r7, #20
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr

08014484 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2202      	movs	r2, #2
 8014494:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	687a      	ldr	r2, [r7, #4]
 80144a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	2100      	movs	r1, #0
 80144aa:	68f8      	ldr	r0, [r7, #12]
 80144ac:	f000 fd21 	bl	8014ef2 <USBD_LL_Transmit>

  return USBD_OK;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3710      	adds	r7, #16
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}

080144ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80144ba:	b580      	push	{r7, lr}
 80144bc:	b084      	sub	sp, #16
 80144be:	af00      	add	r7, sp, #0
 80144c0:	60f8      	str	r0, [r7, #12]
 80144c2:	60b9      	str	r1, [r7, #8]
 80144c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	68ba      	ldr	r2, [r7, #8]
 80144ca:	2100      	movs	r1, #0
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	f000 fd10 	bl	8014ef2 <USBD_LL_Transmit>

  return USBD_OK;
 80144d2:	2300      	movs	r3, #0
}
 80144d4:	4618      	mov	r0, r3
 80144d6:	3710      	adds	r7, #16
 80144d8:	46bd      	mov	sp, r7
 80144da:	bd80      	pop	{r7, pc}

080144dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2203      	movs	r2, #3
 80144ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	68ba      	ldr	r2, [r7, #8]
 8014504:	2100      	movs	r1, #0
 8014506:	68f8      	ldr	r0, [r7, #12]
 8014508:	f000 fd14 	bl	8014f34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801450c:	2300      	movs	r3, #0
}
 801450e:	4618      	mov	r0, r3
 8014510:	3710      	adds	r7, #16
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}

08014516 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014516:	b580      	push	{r7, lr}
 8014518:	b084      	sub	sp, #16
 801451a:	af00      	add	r7, sp, #0
 801451c:	60f8      	str	r0, [r7, #12]
 801451e:	60b9      	str	r1, [r7, #8]
 8014520:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	68ba      	ldr	r2, [r7, #8]
 8014526:	2100      	movs	r1, #0
 8014528:	68f8      	ldr	r0, [r7, #12]
 801452a:	f000 fd03 	bl	8014f34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801452e:	2300      	movs	r3, #0
}
 8014530:	4618      	mov	r0, r3
 8014532:	3710      	adds	r7, #16
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2204      	movs	r2, #4
 8014544:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014548:	2300      	movs	r3, #0
 801454a:	2200      	movs	r2, #0
 801454c:	2100      	movs	r1, #0
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f000 fccf 	bl	8014ef2 <USBD_LL_Transmit>

  return USBD_OK;
 8014554:	2300      	movs	r3, #0
}
 8014556:	4618      	mov	r0, r3
 8014558:	3708      	adds	r7, #8
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}

0801455e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801455e:	b580      	push	{r7, lr}
 8014560:	b082      	sub	sp, #8
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2205      	movs	r2, #5
 801456a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801456e:	2300      	movs	r3, #0
 8014570:	2200      	movs	r2, #0
 8014572:	2100      	movs	r1, #0
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 fcdd 	bl	8014f34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801457a:	2300      	movs	r3, #0
}
 801457c:	4618      	mov	r0, r3
 801457e:	3708      	adds	r7, #8
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}

08014584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014588:	2200      	movs	r2, #0
 801458a:	4918      	ldr	r1, [pc, #96]	@ (80145ec <MX_USB_DEVICE_Init+0x68>)
 801458c:	4818      	ldr	r0, [pc, #96]	@ (80145f0 <MX_USB_DEVICE_Init+0x6c>)
 801458e:	f7fe fccd 	bl	8012f2c <USBD_Init>
 8014592:	4603      	mov	r3, r0
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014598:	f7ec fd4a 	bl	8001030 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801459c:	4915      	ldr	r1, [pc, #84]	@ (80145f4 <MX_USB_DEVICE_Init+0x70>)
 801459e:	4814      	ldr	r0, [pc, #80]	@ (80145f0 <MX_USB_DEVICE_Init+0x6c>)
 80145a0:	f7fe fcf4 	bl	8012f8c <USBD_RegisterClass>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d001      	beq.n	80145ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80145aa:	f7ec fd41 	bl	8001030 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80145ae:	4912      	ldr	r1, [pc, #72]	@ (80145f8 <MX_USB_DEVICE_Init+0x74>)
 80145b0:	480f      	ldr	r0, [pc, #60]	@ (80145f0 <MX_USB_DEVICE_Init+0x6c>)
 80145b2:	f7fe fbeb 	bl	8012d8c <USBD_CDC_RegisterInterface>
 80145b6:	4603      	mov	r3, r0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d001      	beq.n	80145c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80145bc:	f7ec fd38 	bl	8001030 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80145c0:	480b      	ldr	r0, [pc, #44]	@ (80145f0 <MX_USB_DEVICE_Init+0x6c>)
 80145c2:	f7fe fd19 	bl	8012ff8 <USBD_Start>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80145cc:	f7ec fd30 	bl	8001030 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80145d0:	f7f7 fb26 	bl	800bc20 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 80145d4:	4b06      	ldr	r3, [pc, #24]	@ (80145f0 <MX_USB_DEVICE_Init+0x6c>)
 80145d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80145da:	4a05      	ldr	r2, [pc, #20]	@ (80145f0 <MX_USB_DEVICE_Init+0x6c>)
 80145dc:	33b0      	adds	r3, #176	@ 0xb0
 80145de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145e2:	4a06      	ldr	r2, [pc, #24]	@ (80145fc <MX_USB_DEVICE_Init+0x78>)
 80145e4:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80145e6:	bf00      	nop
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	240000b0 	.word	0x240000b0
 80145f0:	24000f3c 	.word	0x24000f3c
 80145f4:	2400001c 	.word	0x2400001c
 80145f8:	2400009c 	.word	0x2400009c
 80145fc:	24001218 	.word	0x24001218

08014600 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014604:	2200      	movs	r2, #0
 8014606:	4905      	ldr	r1, [pc, #20]	@ (801461c <CDC_Init_FS+0x1c>)
 8014608:	4805      	ldr	r0, [pc, #20]	@ (8014620 <CDC_Init_FS+0x20>)
 801460a:	f7fe fbd9 	bl	8012dc0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801460e:	4905      	ldr	r1, [pc, #20]	@ (8014624 <CDC_Init_FS+0x24>)
 8014610:	4803      	ldr	r0, [pc, #12]	@ (8014620 <CDC_Init_FS+0x20>)
 8014612:	f7fe fbf7 	bl	8012e04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014616:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014618:	4618      	mov	r0, r3
 801461a:	bd80      	pop	{r7, pc}
 801461c:	24001a1c 	.word	0x24001a1c
 8014620:	24000f3c 	.word	0x24000f3c
 8014624:	2400121c 	.word	0x2400121c

08014628 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014628:	b480      	push	{r7}
 801462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801462c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801462e:	4618      	mov	r0, r3
 8014630:	46bd      	mov	sp, r7
 8014632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014636:	4770      	bx	lr

08014638 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014638:	b480      	push	{r7}
 801463a:	b083      	sub	sp, #12
 801463c:	af00      	add	r7, sp, #0
 801463e:	4603      	mov	r3, r0
 8014640:	6039      	str	r1, [r7, #0]
 8014642:	71fb      	strb	r3, [r7, #7]
 8014644:	4613      	mov	r3, r2
 8014646:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014648:	79fb      	ldrb	r3, [r7, #7]
 801464a:	2b23      	cmp	r3, #35	@ 0x23
 801464c:	d84a      	bhi.n	80146e4 <CDC_Control_FS+0xac>
 801464e:	a201      	add	r2, pc, #4	@ (adr r2, 8014654 <CDC_Control_FS+0x1c>)
 8014650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014654:	080146e5 	.word	0x080146e5
 8014658:	080146e5 	.word	0x080146e5
 801465c:	080146e5 	.word	0x080146e5
 8014660:	080146e5 	.word	0x080146e5
 8014664:	080146e5 	.word	0x080146e5
 8014668:	080146e5 	.word	0x080146e5
 801466c:	080146e5 	.word	0x080146e5
 8014670:	080146e5 	.word	0x080146e5
 8014674:	080146e5 	.word	0x080146e5
 8014678:	080146e5 	.word	0x080146e5
 801467c:	080146e5 	.word	0x080146e5
 8014680:	080146e5 	.word	0x080146e5
 8014684:	080146e5 	.word	0x080146e5
 8014688:	080146e5 	.word	0x080146e5
 801468c:	080146e5 	.word	0x080146e5
 8014690:	080146e5 	.word	0x080146e5
 8014694:	080146e5 	.word	0x080146e5
 8014698:	080146e5 	.word	0x080146e5
 801469c:	080146e5 	.word	0x080146e5
 80146a0:	080146e5 	.word	0x080146e5
 80146a4:	080146e5 	.word	0x080146e5
 80146a8:	080146e5 	.word	0x080146e5
 80146ac:	080146e5 	.word	0x080146e5
 80146b0:	080146e5 	.word	0x080146e5
 80146b4:	080146e5 	.word	0x080146e5
 80146b8:	080146e5 	.word	0x080146e5
 80146bc:	080146e5 	.word	0x080146e5
 80146c0:	080146e5 	.word	0x080146e5
 80146c4:	080146e5 	.word	0x080146e5
 80146c8:	080146e5 	.word	0x080146e5
 80146cc:	080146e5 	.word	0x080146e5
 80146d0:	080146e5 	.word	0x080146e5
 80146d4:	080146e5 	.word	0x080146e5
 80146d8:	080146e5 	.word	0x080146e5
 80146dc:	080146e5 	.word	0x080146e5
 80146e0:	080146e5 	.word	0x080146e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80146e4:	bf00      	nop
  }

  return (USBD_OK);
 80146e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	370c      	adds	r7, #12
 80146ec:	46bd      	mov	sp, r7
 80146ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f2:	4770      	bx	lr

080146f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80146fe:	6879      	ldr	r1, [r7, #4]
 8014700:	4806      	ldr	r0, [pc, #24]	@ (801471c <CDC_Receive_FS+0x28>)
 8014702:	f7fe fb7f 	bl	8012e04 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014706:	4805      	ldr	r0, [pc, #20]	@ (801471c <CDC_Receive_FS+0x28>)
 8014708:	f7fe fbda 	bl	8012ec0 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 801470c:	4b04      	ldr	r3, [pc, #16]	@ (8014720 <CDC_Receive_FS+0x2c>)
 801470e:	2201      	movs	r2, #1
 8014710:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8014712:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014714:	4618      	mov	r0, r3
 8014716:	3708      	adds	r7, #8
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}
 801471c:	24000f3c 	.word	0x24000f3c
 8014720:	24000f2c 	.word	0x24000f2c

08014724 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	460b      	mov	r3, r1
 801472e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014730:	2300      	movs	r3, #0
 8014732:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014734:	4b0d      	ldr	r3, [pc, #52]	@ (801476c <CDC_Transmit_FS+0x48>)
 8014736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801473a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014742:	2b00      	cmp	r3, #0
 8014744:	d001      	beq.n	801474a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014746:	2301      	movs	r3, #1
 8014748:	e00b      	b.n	8014762 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801474a:	887b      	ldrh	r3, [r7, #2]
 801474c:	461a      	mov	r2, r3
 801474e:	6879      	ldr	r1, [r7, #4]
 8014750:	4806      	ldr	r0, [pc, #24]	@ (801476c <CDC_Transmit_FS+0x48>)
 8014752:	f7fe fb35 	bl	8012dc0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014756:	4805      	ldr	r0, [pc, #20]	@ (801476c <CDC_Transmit_FS+0x48>)
 8014758:	f7fe fb72 	bl	8012e40 <USBD_CDC_TransmitPacket>
 801475c:	4603      	mov	r3, r0
 801475e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014760:	7bfb      	ldrb	r3, [r7, #15]
}
 8014762:	4618      	mov	r0, r3
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	24000f3c 	.word	0x24000f3c

08014770 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014770:	b480      	push	{r7}
 8014772:	b087      	sub	sp, #28
 8014774:	af00      	add	r7, sp, #0
 8014776:	60f8      	str	r0, [r7, #12]
 8014778:	60b9      	str	r1, [r7, #8]
 801477a:	4613      	mov	r3, r2
 801477c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801477e:	2300      	movs	r3, #0
 8014780:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014782:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014786:	4618      	mov	r0, r3
 8014788:	371c      	adds	r7, #28
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr
	...

08014794 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014794:	b480      	push	{r7}
 8014796:	b083      	sub	sp, #12
 8014798:	af00      	add	r7, sp, #0
 801479a:	4603      	mov	r3, r0
 801479c:	6039      	str	r1, [r7, #0]
 801479e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	2212      	movs	r2, #18
 80147a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80147a6:	4b03      	ldr	r3, [pc, #12]	@ (80147b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	370c      	adds	r7, #12
 80147ac:	46bd      	mov	sp, r7
 80147ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b2:	4770      	bx	lr
 80147b4:	240000d0 	.word	0x240000d0

080147b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	4603      	mov	r3, r0
 80147c0:	6039      	str	r1, [r7, #0]
 80147c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	2204      	movs	r2, #4
 80147c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80147ca:	4b03      	ldr	r3, [pc, #12]	@ (80147d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	370c      	adds	r7, #12
 80147d0:	46bd      	mov	sp, r7
 80147d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d6:	4770      	bx	lr
 80147d8:	240000e4 	.word	0x240000e4

080147dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	4603      	mov	r3, r0
 80147e4:	6039      	str	r1, [r7, #0]
 80147e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147e8:	79fb      	ldrb	r3, [r7, #7]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d105      	bne.n	80147fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80147ee:	683a      	ldr	r2, [r7, #0]
 80147f0:	4907      	ldr	r1, [pc, #28]	@ (8014810 <USBD_FS_ProductStrDescriptor+0x34>)
 80147f2:	4808      	ldr	r0, [pc, #32]	@ (8014814 <USBD_FS_ProductStrDescriptor+0x38>)
 80147f4:	f7ff fdda 	bl	80143ac <USBD_GetString>
 80147f8:	e004      	b.n	8014804 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80147fa:	683a      	ldr	r2, [r7, #0]
 80147fc:	4904      	ldr	r1, [pc, #16]	@ (8014810 <USBD_FS_ProductStrDescriptor+0x34>)
 80147fe:	4805      	ldr	r0, [pc, #20]	@ (8014814 <USBD_FS_ProductStrDescriptor+0x38>)
 8014800:	f7ff fdd4 	bl	80143ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8014804:	4b02      	ldr	r3, [pc, #8]	@ (8014810 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014806:	4618      	mov	r0, r3
 8014808:	3708      	adds	r7, #8
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	2400221c 	.word	0x2400221c
 8014814:	080159b4 	.word	0x080159b4

08014818 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	6039      	str	r1, [r7, #0]
 8014822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014824:	683a      	ldr	r2, [r7, #0]
 8014826:	4904      	ldr	r1, [pc, #16]	@ (8014838 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014828:	4804      	ldr	r0, [pc, #16]	@ (801483c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801482a:	f7ff fdbf 	bl	80143ac <USBD_GetString>
  return USBD_StrDesc;
 801482e:	4b02      	ldr	r3, [pc, #8]	@ (8014838 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014830:	4618      	mov	r0, r3
 8014832:	3708      	adds	r7, #8
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}
 8014838:	2400221c 	.word	0x2400221c
 801483c:	080159cc 	.word	0x080159cc

08014840 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
 8014846:	4603      	mov	r3, r0
 8014848:	6039      	str	r1, [r7, #0]
 801484a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	221a      	movs	r2, #26
 8014850:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014852:	f000 f843 	bl	80148dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014856:	4b02      	ldr	r3, [pc, #8]	@ (8014860 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014858:	4618      	mov	r0, r3
 801485a:	3708      	adds	r7, #8
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}
 8014860:	240000e8 	.word	0x240000e8

08014864 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b082      	sub	sp, #8
 8014868:	af00      	add	r7, sp, #0
 801486a:	4603      	mov	r3, r0
 801486c:	6039      	str	r1, [r7, #0]
 801486e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014870:	79fb      	ldrb	r3, [r7, #7]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d105      	bne.n	8014882 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014876:	683a      	ldr	r2, [r7, #0]
 8014878:	4907      	ldr	r1, [pc, #28]	@ (8014898 <USBD_FS_ConfigStrDescriptor+0x34>)
 801487a:	4808      	ldr	r0, [pc, #32]	@ (801489c <USBD_FS_ConfigStrDescriptor+0x38>)
 801487c:	f7ff fd96 	bl	80143ac <USBD_GetString>
 8014880:	e004      	b.n	801488c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014882:	683a      	ldr	r2, [r7, #0]
 8014884:	4904      	ldr	r1, [pc, #16]	@ (8014898 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014886:	4805      	ldr	r0, [pc, #20]	@ (801489c <USBD_FS_ConfigStrDescriptor+0x38>)
 8014888:	f7ff fd90 	bl	80143ac <USBD_GetString>
  }
  return USBD_StrDesc;
 801488c:	4b02      	ldr	r3, [pc, #8]	@ (8014898 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801488e:	4618      	mov	r0, r3
 8014890:	3708      	adds	r7, #8
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	2400221c 	.word	0x2400221c
 801489c:	080159e0 	.word	0x080159e0

080148a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b082      	sub	sp, #8
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	4603      	mov	r3, r0
 80148a8:	6039      	str	r1, [r7, #0]
 80148aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80148ac:	79fb      	ldrb	r3, [r7, #7]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d105      	bne.n	80148be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80148b2:	683a      	ldr	r2, [r7, #0]
 80148b4:	4907      	ldr	r1, [pc, #28]	@ (80148d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80148b6:	4808      	ldr	r0, [pc, #32]	@ (80148d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80148b8:	f7ff fd78 	bl	80143ac <USBD_GetString>
 80148bc:	e004      	b.n	80148c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80148be:	683a      	ldr	r2, [r7, #0]
 80148c0:	4904      	ldr	r1, [pc, #16]	@ (80148d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80148c2:	4805      	ldr	r0, [pc, #20]	@ (80148d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80148c4:	f7ff fd72 	bl	80143ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80148c8:	4b02      	ldr	r3, [pc, #8]	@ (80148d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3708      	adds	r7, #8
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	2400221c 	.word	0x2400221c
 80148d8:	080159ec 	.word	0x080159ec

080148dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80148e2:	4b0f      	ldr	r3, [pc, #60]	@ (8014920 <Get_SerialNum+0x44>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80148e8:	4b0e      	ldr	r3, [pc, #56]	@ (8014924 <Get_SerialNum+0x48>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80148ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014928 <Get_SerialNum+0x4c>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80148f4:	68fa      	ldr	r2, [r7, #12]
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	4413      	add	r3, r2
 80148fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d009      	beq.n	8014916 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014902:	2208      	movs	r2, #8
 8014904:	4909      	ldr	r1, [pc, #36]	@ (801492c <Get_SerialNum+0x50>)
 8014906:	68f8      	ldr	r0, [r7, #12]
 8014908:	f000 f814 	bl	8014934 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801490c:	2204      	movs	r2, #4
 801490e:	4908      	ldr	r1, [pc, #32]	@ (8014930 <Get_SerialNum+0x54>)
 8014910:	68b8      	ldr	r0, [r7, #8]
 8014912:	f000 f80f 	bl	8014934 <IntToUnicode>
  }
}
 8014916:	bf00      	nop
 8014918:	3710      	adds	r7, #16
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
 801491e:	bf00      	nop
 8014920:	1ff1e800 	.word	0x1ff1e800
 8014924:	1ff1e804 	.word	0x1ff1e804
 8014928:	1ff1e808 	.word	0x1ff1e808
 801492c:	240000ea 	.word	0x240000ea
 8014930:	240000fa 	.word	0x240000fa

08014934 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014934:	b480      	push	{r7}
 8014936:	b087      	sub	sp, #28
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	60b9      	str	r1, [r7, #8]
 801493e:	4613      	mov	r3, r2
 8014940:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014942:	2300      	movs	r3, #0
 8014944:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014946:	2300      	movs	r3, #0
 8014948:	75fb      	strb	r3, [r7, #23]
 801494a:	e027      	b.n	801499c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	0f1b      	lsrs	r3, r3, #28
 8014950:	2b09      	cmp	r3, #9
 8014952:	d80b      	bhi.n	801496c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	0f1b      	lsrs	r3, r3, #28
 8014958:	b2da      	uxtb	r2, r3
 801495a:	7dfb      	ldrb	r3, [r7, #23]
 801495c:	005b      	lsls	r3, r3, #1
 801495e:	4619      	mov	r1, r3
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	440b      	add	r3, r1
 8014964:	3230      	adds	r2, #48	@ 0x30
 8014966:	b2d2      	uxtb	r2, r2
 8014968:	701a      	strb	r2, [r3, #0]
 801496a:	e00a      	b.n	8014982 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	0f1b      	lsrs	r3, r3, #28
 8014970:	b2da      	uxtb	r2, r3
 8014972:	7dfb      	ldrb	r3, [r7, #23]
 8014974:	005b      	lsls	r3, r3, #1
 8014976:	4619      	mov	r1, r3
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	440b      	add	r3, r1
 801497c:	3237      	adds	r2, #55	@ 0x37
 801497e:	b2d2      	uxtb	r2, r2
 8014980:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	011b      	lsls	r3, r3, #4
 8014986:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014988:	7dfb      	ldrb	r3, [r7, #23]
 801498a:	005b      	lsls	r3, r3, #1
 801498c:	3301      	adds	r3, #1
 801498e:	68ba      	ldr	r2, [r7, #8]
 8014990:	4413      	add	r3, r2
 8014992:	2200      	movs	r2, #0
 8014994:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014996:	7dfb      	ldrb	r3, [r7, #23]
 8014998:	3301      	adds	r3, #1
 801499a:	75fb      	strb	r3, [r7, #23]
 801499c:	7dfa      	ldrb	r2, [r7, #23]
 801499e:	79fb      	ldrb	r3, [r7, #7]
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d3d3      	bcc.n	801494c <IntToUnicode+0x18>
  }
}
 80149a4:	bf00      	nop
 80149a6:	bf00      	nop
 80149a8:	371c      	adds	r7, #28
 80149aa:	46bd      	mov	sp, r7
 80149ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b0:	4770      	bx	lr
	...

080149b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b0ba      	sub	sp, #232	@ 0xe8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80149bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80149c0:	2200      	movs	r2, #0
 80149c2:	601a      	str	r2, [r3, #0]
 80149c4:	605a      	str	r2, [r3, #4]
 80149c6:	609a      	str	r2, [r3, #8]
 80149c8:	60da      	str	r2, [r3, #12]
 80149ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80149cc:	f107 0310 	add.w	r3, r7, #16
 80149d0:	22c0      	movs	r2, #192	@ 0xc0
 80149d2:	2100      	movs	r1, #0
 80149d4:	4618      	mov	r0, r3
 80149d6:	f000 fb47 	bl	8015068 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	4a2c      	ldr	r2, [pc, #176]	@ (8014a90 <HAL_PCD_MspInit+0xdc>)
 80149e0:	4293      	cmp	r3, r2
 80149e2:	d151      	bne.n	8014a88 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80149e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80149e8:	f04f 0300 	mov.w	r3, #0
 80149ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80149f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80149f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80149f8:	f107 0310 	add.w	r3, r7, #16
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7f8 f905 	bl	800cc0c <HAL_RCCEx_PeriphCLKConfig>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d001      	beq.n	8014a0c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8014a08:	f7ec fb12 	bl	8001030 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8014a0c:	f7f7 f908 	bl	800bc20 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014a10:	4b20      	ldr	r3, [pc, #128]	@ (8014a94 <HAL_PCD_MspInit+0xe0>)
 8014a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014a16:	4a1f      	ldr	r2, [pc, #124]	@ (8014a94 <HAL_PCD_MspInit+0xe0>)
 8014a18:	f043 0301 	orr.w	r3, r3, #1
 8014a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014a20:	4b1c      	ldr	r3, [pc, #112]	@ (8014a94 <HAL_PCD_MspInit+0xe0>)
 8014a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014a26:	f003 0301 	and.w	r3, r3, #1
 8014a2a:	60fb      	str	r3, [r7, #12]
 8014a2c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014a2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014a32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a36:	2302      	movs	r3, #2
 8014a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a42:	2300      	movs	r3, #0
 8014a44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8014a48:	230a      	movs	r3, #10
 8014a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014a4e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014a52:	4619      	mov	r1, r3
 8014a54:	4810      	ldr	r0, [pc, #64]	@ (8014a98 <HAL_PCD_MspInit+0xe4>)
 8014a56:	f7f1 f8ed 	bl	8005c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8014a94 <HAL_PCD_MspInit+0xe0>)
 8014a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014a60:	4a0c      	ldr	r2, [pc, #48]	@ (8014a94 <HAL_PCD_MspInit+0xe0>)
 8014a62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014a66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8014a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8014a94 <HAL_PCD_MspInit+0xe0>)
 8014a6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8014a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014a74:	60bb      	str	r3, [r7, #8]
 8014a76:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014a78:	2200      	movs	r2, #0
 8014a7a:	2100      	movs	r1, #0
 8014a7c:	2065      	movs	r0, #101	@ 0x65
 8014a7e:	f7ee fcf4 	bl	800346a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014a82:	2065      	movs	r0, #101	@ 0x65
 8014a84:	f7ee fd0b 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014a88:	bf00      	nop
 8014a8a:	37e8      	adds	r7, #232	@ 0xe8
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	40080000 	.word	0x40080000
 8014a94:	58024400 	.word	0x58024400
 8014a98:	58020000 	.word	0x58020000

08014a9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	4610      	mov	r0, r2
 8014ab4:	f7fe faed 	bl	8013092 <USBD_LL_SetupStage>
}
 8014ab8:	bf00      	nop
 8014aba:	3708      	adds	r7, #8
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}

08014ac0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	460b      	mov	r3, r1
 8014aca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014ad2:	78fa      	ldrb	r2, [r7, #3]
 8014ad4:	6879      	ldr	r1, [r7, #4]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	00db      	lsls	r3, r3, #3
 8014ada:	4413      	add	r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	440b      	add	r3, r1
 8014ae0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014ae4:	681a      	ldr	r2, [r3, #0]
 8014ae6:	78fb      	ldrb	r3, [r7, #3]
 8014ae8:	4619      	mov	r1, r3
 8014aea:	f7fe fb27 	bl	801313c <USBD_LL_DataOutStage>
}
 8014aee:	bf00      	nop
 8014af0:	3708      	adds	r7, #8
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}

08014af6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014af6:	b580      	push	{r7, lr}
 8014af8:	b082      	sub	sp, #8
 8014afa:	af00      	add	r7, sp, #0
 8014afc:	6078      	str	r0, [r7, #4]
 8014afe:	460b      	mov	r3, r1
 8014b00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8014b08:	78fa      	ldrb	r2, [r7, #3]
 8014b0a:	6879      	ldr	r1, [r7, #4]
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	00db      	lsls	r3, r3, #3
 8014b10:	4413      	add	r3, r2
 8014b12:	009b      	lsls	r3, r3, #2
 8014b14:	440b      	add	r3, r1
 8014b16:	3320      	adds	r3, #32
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	78fb      	ldrb	r3, [r7, #3]
 8014b1c:	4619      	mov	r1, r3
 8014b1e:	f7fe fbc0 	bl	80132a2 <USBD_LL_DataInStage>
}
 8014b22:	bf00      	nop
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}

08014b2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b2a:	b580      	push	{r7, lr}
 8014b2c:	b082      	sub	sp, #8
 8014b2e:	af00      	add	r7, sp, #0
 8014b30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7fe fcfa 	bl	8013532 <USBD_LL_SOF>
}
 8014b3e:	bf00      	nop
 8014b40:	3708      	adds	r7, #8
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}

08014b46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b46:	b580      	push	{r7, lr}
 8014b48:	b084      	sub	sp, #16
 8014b4a:	af00      	add	r7, sp, #0
 8014b4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014b4e:	2301      	movs	r3, #1
 8014b50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	79db      	ldrb	r3, [r3, #7]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d102      	bne.n	8014b60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	73fb      	strb	r3, [r7, #15]
 8014b5e:	e008      	b.n	8014b72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	79db      	ldrb	r3, [r3, #7]
 8014b64:	2b02      	cmp	r3, #2
 8014b66:	d102      	bne.n	8014b6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014b68:	2301      	movs	r3, #1
 8014b6a:	73fb      	strb	r3, [r7, #15]
 8014b6c:	e001      	b.n	8014b72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014b6e:	f7ec fa5f 	bl	8001030 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014b78:	7bfa      	ldrb	r2, [r7, #15]
 8014b7a:	4611      	mov	r1, r2
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7fe fc94 	bl	80134aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7fe fc3c 	bl	8013406 <USBD_LL_Reset>
}
 8014b8e:	bf00      	nop
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
	...

08014b98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b082      	sub	sp, #8
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fe fc8f 	bl	80134ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	6812      	ldr	r2, [r2, #0]
 8014bba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8014bbe:	f043 0301 	orr.w	r3, r3, #1
 8014bc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	7adb      	ldrb	r3, [r3, #11]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d005      	beq.n	8014bd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014bcc:	4b04      	ldr	r3, [pc, #16]	@ (8014be0 <HAL_PCD_SuspendCallback+0x48>)
 8014bce:	691b      	ldr	r3, [r3, #16]
 8014bd0:	4a03      	ldr	r2, [pc, #12]	@ (8014be0 <HAL_PCD_SuspendCallback+0x48>)
 8014bd2:	f043 0306 	orr.w	r3, r3, #6
 8014bd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014bd8:	bf00      	nop
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	e000ed00 	.word	0xe000ed00

08014be4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7fe fc85 	bl	8013502 <USBD_LL_Resume>
}
 8014bf8:	bf00      	nop
 8014bfa:	3708      	adds	r7, #8
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}

08014c00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
 8014c08:	460b      	mov	r3, r1
 8014c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014c12:	78fa      	ldrb	r2, [r7, #3]
 8014c14:	4611      	mov	r1, r2
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7fe fcdd 	bl	80135d6 <USBD_LL_IsoOUTIncomplete>
}
 8014c1c:	bf00      	nop
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014c36:	78fa      	ldrb	r2, [r7, #3]
 8014c38:	4611      	mov	r1, r2
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7fe fc99 	bl	8013572 <USBD_LL_IsoINIncomplete>
}
 8014c40:	bf00      	nop
 8014c42:	3708      	adds	r7, #8
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7fe fcef 	bl	801363a <USBD_LL_DevConnected>
}
 8014c5c:	bf00      	nop
 8014c5e:	3708      	adds	r7, #8
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}

08014c64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b082      	sub	sp, #8
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7fe fcec 	bl	8013650 <USBD_LL_DevDisconnected>
}
 8014c78:	bf00      	nop
 8014c7a:	3708      	adds	r7, #8
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}

08014c80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d13e      	bne.n	8014d0e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014c90:	4a21      	ldr	r2, [pc, #132]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014c9c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8014d1c <USBD_LL_Init+0x9c>)
 8014ca4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8014ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014ca8:	2209      	movs	r2, #9
 8014caa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014cac:	4b1a      	ldr	r3, [pc, #104]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cae:	2202      	movs	r2, #2
 8014cb0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014cb2:	4b19      	ldr	r3, [pc, #100]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014cb8:	4b17      	ldr	r3, [pc, #92]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cba:	2202      	movs	r2, #2
 8014cbc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014cbe:	4b16      	ldr	r3, [pc, #88]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014cc4:	4b14      	ldr	r3, [pc, #80]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014cca:	4b13      	ldr	r3, [pc, #76]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014ccc:	2200      	movs	r2, #0
 8014cce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014cd0:	4b11      	ldr	r3, [pc, #68]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014cd6:	4b10      	ldr	r3, [pc, #64]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cd8:	2200      	movs	r2, #0
 8014cda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cde:	2200      	movs	r2, #0
 8014ce0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014ce2:	480d      	ldr	r0, [pc, #52]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014ce4:	f7f5 fcc2 	bl	800a66c <HAL_PCD_Init>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d001      	beq.n	8014cf2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8014cee:	f7ec f99f 	bl	8001030 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014cf2:	2180      	movs	r1, #128	@ 0x80
 8014cf4:	4808      	ldr	r0, [pc, #32]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014cf6:	f7f6 ff18 	bl	800bb2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014cfa:	2240      	movs	r2, #64	@ 0x40
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	4806      	ldr	r0, [pc, #24]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014d00:	f7f6 fecc 	bl	800ba9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014d04:	2280      	movs	r2, #128	@ 0x80
 8014d06:	2101      	movs	r1, #1
 8014d08:	4803      	ldr	r0, [pc, #12]	@ (8014d18 <USBD_LL_Init+0x98>)
 8014d0a:	f7f6 fec7 	bl	800ba9c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8014d0e:	2300      	movs	r3, #0
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3708      	adds	r7, #8
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	2400241c 	.word	0x2400241c
 8014d1c:	40080000 	.word	0x40080000

08014d20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b084      	sub	sp, #16
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7f5 fda4 	bl	800a884 <HAL_PCD_Start>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d40:	7bfb      	ldrb	r3, [r7, #15]
 8014d42:	4618      	mov	r0, r3
 8014d44:	f000 f942 	bl	8014fcc <USBD_Get_USB_Status>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3710      	adds	r7, #16
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bd80      	pop	{r7, pc}

08014d56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014d56:	b580      	push	{r7, lr}
 8014d58:	b084      	sub	sp, #16
 8014d5a:	af00      	add	r7, sp, #0
 8014d5c:	6078      	str	r0, [r7, #4]
 8014d5e:	4608      	mov	r0, r1
 8014d60:	4611      	mov	r1, r2
 8014d62:	461a      	mov	r2, r3
 8014d64:	4603      	mov	r3, r0
 8014d66:	70fb      	strb	r3, [r7, #3]
 8014d68:	460b      	mov	r3, r1
 8014d6a:	70bb      	strb	r3, [r7, #2]
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d70:	2300      	movs	r3, #0
 8014d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d74:	2300      	movs	r3, #0
 8014d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014d7e:	78bb      	ldrb	r3, [r7, #2]
 8014d80:	883a      	ldrh	r2, [r7, #0]
 8014d82:	78f9      	ldrb	r1, [r7, #3]
 8014d84:	f7f6 faa5 	bl	800b2d2 <HAL_PCD_EP_Open>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d8c:	7bfb      	ldrb	r3, [r7, #15]
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f000 f91c 	bl	8014fcc <USBD_Get_USB_Status>
 8014d94:	4603      	mov	r3, r0
 8014d96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3710      	adds	r7, #16
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}

08014da2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014da2:	b580      	push	{r7, lr}
 8014da4:	b084      	sub	sp, #16
 8014da6:	af00      	add	r7, sp, #0
 8014da8:	6078      	str	r0, [r7, #4]
 8014daa:	460b      	mov	r3, r1
 8014dac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dae:	2300      	movs	r3, #0
 8014db0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014db2:	2300      	movs	r3, #0
 8014db4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014dbc:	78fa      	ldrb	r2, [r7, #3]
 8014dbe:	4611      	mov	r1, r2
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7f6 faf0 	bl	800b3a6 <HAL_PCD_EP_Close>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014dca:	7bfb      	ldrb	r3, [r7, #15]
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f000 f8fd 	bl	8014fcc <USBD_Get_USB_Status>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014dd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3710      	adds	r7, #16
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b084      	sub	sp, #16
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
 8014de8:	460b      	mov	r3, r1
 8014dea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dec:	2300      	movs	r3, #0
 8014dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014df0:	2300      	movs	r3, #0
 8014df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014dfa:	78fa      	ldrb	r2, [r7, #3]
 8014dfc:	4611      	mov	r1, r2
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7f6 fba8 	bl	800b554 <HAL_PCD_EP_SetStall>
 8014e04:	4603      	mov	r3, r0
 8014e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e08:	7bfb      	ldrb	r3, [r7, #15]
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f000 f8de 	bl	8014fcc <USBD_Get_USB_Status>
 8014e10:	4603      	mov	r3, r0
 8014e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3710      	adds	r7, #16
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}

08014e1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e1e:	b580      	push	{r7, lr}
 8014e20:	b084      	sub	sp, #16
 8014e22:	af00      	add	r7, sp, #0
 8014e24:	6078      	str	r0, [r7, #4]
 8014e26:	460b      	mov	r3, r1
 8014e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014e38:	78fa      	ldrb	r2, [r7, #3]
 8014e3a:	4611      	mov	r1, r2
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7f6 fbec 	bl	800b61a <HAL_PCD_EP_ClrStall>
 8014e42:	4603      	mov	r3, r0
 8014e44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e46:	7bfb      	ldrb	r3, [r7, #15]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f000 f8bf 	bl	8014fcc <USBD_Get_USB_Status>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3710      	adds	r7, #16
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}

08014e5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e5c:	b480      	push	{r7}
 8014e5e:	b085      	sub	sp, #20
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	460b      	mov	r3, r1
 8014e66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014e6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	da0b      	bge.n	8014e90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014e78:	78fb      	ldrb	r3, [r7, #3]
 8014e7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014e7e:	68f9      	ldr	r1, [r7, #12]
 8014e80:	4613      	mov	r3, r2
 8014e82:	00db      	lsls	r3, r3, #3
 8014e84:	4413      	add	r3, r2
 8014e86:	009b      	lsls	r3, r3, #2
 8014e88:	440b      	add	r3, r1
 8014e8a:	3316      	adds	r3, #22
 8014e8c:	781b      	ldrb	r3, [r3, #0]
 8014e8e:	e00b      	b.n	8014ea8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014e90:	78fb      	ldrb	r3, [r7, #3]
 8014e92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014e96:	68f9      	ldr	r1, [r7, #12]
 8014e98:	4613      	mov	r3, r2
 8014e9a:	00db      	lsls	r3, r3, #3
 8014e9c:	4413      	add	r3, r2
 8014e9e:	009b      	lsls	r3, r3, #2
 8014ea0:	440b      	add	r3, r1
 8014ea2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8014ea6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3714      	adds	r7, #20
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr

08014eb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b084      	sub	sp, #16
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	460b      	mov	r3, r1
 8014ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014ece:	78fa      	ldrb	r2, [r7, #3]
 8014ed0:	4611      	mov	r1, r2
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f7f6 f9d9 	bl	800b28a <HAL_PCD_SetAddress>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014edc:	7bfb      	ldrb	r3, [r7, #15]
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f000 f874 	bl	8014fcc <USBD_Get_USB_Status>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8014eea:	4618      	mov	r0, r3
 8014eec:	3710      	adds	r7, #16
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}

08014ef2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b086      	sub	sp, #24
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	60f8      	str	r0, [r7, #12]
 8014efa:	607a      	str	r2, [r7, #4]
 8014efc:	603b      	str	r3, [r7, #0]
 8014efe:	460b      	mov	r3, r1
 8014f00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f02:	2300      	movs	r3, #0
 8014f04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f06:	2300      	movs	r3, #0
 8014f08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f10:	7af9      	ldrb	r1, [r7, #11]
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	687a      	ldr	r2, [r7, #4]
 8014f16:	f7f6 fae3 	bl	800b4e0 <HAL_PCD_EP_Transmit>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f000 f853 	bl	8014fcc <USBD_Get_USB_Status>
 8014f26:	4603      	mov	r3, r0
 8014f28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014f2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3718      	adds	r7, #24
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}

08014f34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b086      	sub	sp, #24
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	60f8      	str	r0, [r7, #12]
 8014f3c:	607a      	str	r2, [r7, #4]
 8014f3e:	603b      	str	r3, [r7, #0]
 8014f40:	460b      	mov	r3, r1
 8014f42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f44:	2300      	movs	r3, #0
 8014f46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f52:	7af9      	ldrb	r1, [r7, #11]
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	687a      	ldr	r2, [r7, #4]
 8014f58:	f7f6 fa6f 	bl	800b43a <HAL_PCD_EP_Receive>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f60:	7dfb      	ldrb	r3, [r7, #23]
 8014f62:	4618      	mov	r0, r3
 8014f64:	f000 f832 	bl	8014fcc <USBD_Get_USB_Status>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014f6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3718      	adds	r7, #24
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}

08014f76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f76:	b580      	push	{r7, lr}
 8014f78:	b082      	sub	sp, #8
 8014f7a:	af00      	add	r7, sp, #0
 8014f7c:	6078      	str	r0, [r7, #4]
 8014f7e:	460b      	mov	r3, r1
 8014f80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014f88:	78fa      	ldrb	r2, [r7, #3]
 8014f8a:	4611      	mov	r1, r2
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7f6 fa8f 	bl	800b4b0 <HAL_PCD_EP_GetRxCount>
 8014f92:	4603      	mov	r3, r0
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	3708      	adds	r7, #8
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}

08014f9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b083      	sub	sp, #12
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014fa4:	4b03      	ldr	r3, [pc, #12]	@ (8014fb4 <USBD_static_malloc+0x18>)
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	370c      	adds	r7, #12
 8014faa:	46bd      	mov	sp, r7
 8014fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	24002900 	.word	0x24002900

08014fb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014fb8:	b480      	push	{r7}
 8014fba:	b083      	sub	sp, #12
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8014fc0:	bf00      	nop
 8014fc2:	370c      	adds	r7, #12
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fca:	4770      	bx	lr

08014fcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014fcc:	b480      	push	{r7}
 8014fce:	b085      	sub	sp, #20
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014fda:	79fb      	ldrb	r3, [r7, #7]
 8014fdc:	2b03      	cmp	r3, #3
 8014fde:	d817      	bhi.n	8015010 <USBD_Get_USB_Status+0x44>
 8014fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8014fe8 <USBD_Get_USB_Status+0x1c>)
 8014fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fe6:	bf00      	nop
 8014fe8:	08014ff9 	.word	0x08014ff9
 8014fec:	08014fff 	.word	0x08014fff
 8014ff0:	08015005 	.word	0x08015005
 8014ff4:	0801500b 	.word	0x0801500b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8014ffc:	e00b      	b.n	8015016 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014ffe:	2303      	movs	r3, #3
 8015000:	73fb      	strb	r3, [r7, #15]
    break;
 8015002:	e008      	b.n	8015016 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015004:	2301      	movs	r3, #1
 8015006:	73fb      	strb	r3, [r7, #15]
    break;
 8015008:	e005      	b.n	8015016 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801500a:	2303      	movs	r3, #3
 801500c:	73fb      	strb	r3, [r7, #15]
    break;
 801500e:	e002      	b.n	8015016 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015010:	2303      	movs	r3, #3
 8015012:	73fb      	strb	r3, [r7, #15]
    break;
 8015014:	bf00      	nop
  }
  return usb_status;
 8015016:	7bfb      	ldrb	r3, [r7, #15]
}
 8015018:	4618      	mov	r0, r3
 801501a:	3714      	adds	r7, #20
 801501c:	46bd      	mov	sp, r7
 801501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015022:	4770      	bx	lr

08015024 <siprintf>:
 8015024:	b40e      	push	{r1, r2, r3}
 8015026:	b510      	push	{r4, lr}
 8015028:	b09d      	sub	sp, #116	@ 0x74
 801502a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801502c:	9002      	str	r0, [sp, #8]
 801502e:	9006      	str	r0, [sp, #24]
 8015030:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015034:	480a      	ldr	r0, [pc, #40]	@ (8015060 <siprintf+0x3c>)
 8015036:	9107      	str	r1, [sp, #28]
 8015038:	9104      	str	r1, [sp, #16]
 801503a:	490a      	ldr	r1, [pc, #40]	@ (8015064 <siprintf+0x40>)
 801503c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015040:	9105      	str	r1, [sp, #20]
 8015042:	2400      	movs	r4, #0
 8015044:	a902      	add	r1, sp, #8
 8015046:	6800      	ldr	r0, [r0, #0]
 8015048:	9301      	str	r3, [sp, #4]
 801504a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801504c:	f000 f994 	bl	8015378 <_svfiprintf_r>
 8015050:	9b02      	ldr	r3, [sp, #8]
 8015052:	701c      	strb	r4, [r3, #0]
 8015054:	b01d      	add	sp, #116	@ 0x74
 8015056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801505a:	b003      	add	sp, #12
 801505c:	4770      	bx	lr
 801505e:	bf00      	nop
 8015060:	24000104 	.word	0x24000104
 8015064:	ffff0208 	.word	0xffff0208

08015068 <memset>:
 8015068:	4402      	add	r2, r0
 801506a:	4603      	mov	r3, r0
 801506c:	4293      	cmp	r3, r2
 801506e:	d100      	bne.n	8015072 <memset+0xa>
 8015070:	4770      	bx	lr
 8015072:	f803 1b01 	strb.w	r1, [r3], #1
 8015076:	e7f9      	b.n	801506c <memset+0x4>

08015078 <__errno>:
 8015078:	4b01      	ldr	r3, [pc, #4]	@ (8015080 <__errno+0x8>)
 801507a:	6818      	ldr	r0, [r3, #0]
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	24000104 	.word	0x24000104

08015084 <__libc_init_array>:
 8015084:	b570      	push	{r4, r5, r6, lr}
 8015086:	4d0d      	ldr	r5, [pc, #52]	@ (80150bc <__libc_init_array+0x38>)
 8015088:	4c0d      	ldr	r4, [pc, #52]	@ (80150c0 <__libc_init_array+0x3c>)
 801508a:	1b64      	subs	r4, r4, r5
 801508c:	10a4      	asrs	r4, r4, #2
 801508e:	2600      	movs	r6, #0
 8015090:	42a6      	cmp	r6, r4
 8015092:	d109      	bne.n	80150a8 <__libc_init_array+0x24>
 8015094:	4d0b      	ldr	r5, [pc, #44]	@ (80150c4 <__libc_init_array+0x40>)
 8015096:	4c0c      	ldr	r4, [pc, #48]	@ (80150c8 <__libc_init_array+0x44>)
 8015098:	f000 fc64 	bl	8015964 <_init>
 801509c:	1b64      	subs	r4, r4, r5
 801509e:	10a4      	asrs	r4, r4, #2
 80150a0:	2600      	movs	r6, #0
 80150a2:	42a6      	cmp	r6, r4
 80150a4:	d105      	bne.n	80150b2 <__libc_init_array+0x2e>
 80150a6:	bd70      	pop	{r4, r5, r6, pc}
 80150a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80150ac:	4798      	blx	r3
 80150ae:	3601      	adds	r6, #1
 80150b0:	e7ee      	b.n	8015090 <__libc_init_array+0xc>
 80150b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80150b6:	4798      	blx	r3
 80150b8:	3601      	adds	r6, #1
 80150ba:	e7f2      	b.n	80150a2 <__libc_init_array+0x1e>
 80150bc:	08015d0c 	.word	0x08015d0c
 80150c0:	08015d0c 	.word	0x08015d0c
 80150c4:	08015d0c 	.word	0x08015d0c
 80150c8:	08015d10 	.word	0x08015d10

080150cc <__retarget_lock_acquire_recursive>:
 80150cc:	4770      	bx	lr

080150ce <__retarget_lock_release_recursive>:
 80150ce:	4770      	bx	lr

080150d0 <_free_r>:
 80150d0:	b538      	push	{r3, r4, r5, lr}
 80150d2:	4605      	mov	r5, r0
 80150d4:	2900      	cmp	r1, #0
 80150d6:	d041      	beq.n	801515c <_free_r+0x8c>
 80150d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150dc:	1f0c      	subs	r4, r1, #4
 80150de:	2b00      	cmp	r3, #0
 80150e0:	bfb8      	it	lt
 80150e2:	18e4      	addlt	r4, r4, r3
 80150e4:	f000 f8e0 	bl	80152a8 <__malloc_lock>
 80150e8:	4a1d      	ldr	r2, [pc, #116]	@ (8015160 <_free_r+0x90>)
 80150ea:	6813      	ldr	r3, [r2, #0]
 80150ec:	b933      	cbnz	r3, 80150fc <_free_r+0x2c>
 80150ee:	6063      	str	r3, [r4, #4]
 80150f0:	6014      	str	r4, [r2, #0]
 80150f2:	4628      	mov	r0, r5
 80150f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150f8:	f000 b8dc 	b.w	80152b4 <__malloc_unlock>
 80150fc:	42a3      	cmp	r3, r4
 80150fe:	d908      	bls.n	8015112 <_free_r+0x42>
 8015100:	6820      	ldr	r0, [r4, #0]
 8015102:	1821      	adds	r1, r4, r0
 8015104:	428b      	cmp	r3, r1
 8015106:	bf01      	itttt	eq
 8015108:	6819      	ldreq	r1, [r3, #0]
 801510a:	685b      	ldreq	r3, [r3, #4]
 801510c:	1809      	addeq	r1, r1, r0
 801510e:	6021      	streq	r1, [r4, #0]
 8015110:	e7ed      	b.n	80150ee <_free_r+0x1e>
 8015112:	461a      	mov	r2, r3
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	b10b      	cbz	r3, 801511c <_free_r+0x4c>
 8015118:	42a3      	cmp	r3, r4
 801511a:	d9fa      	bls.n	8015112 <_free_r+0x42>
 801511c:	6811      	ldr	r1, [r2, #0]
 801511e:	1850      	adds	r0, r2, r1
 8015120:	42a0      	cmp	r0, r4
 8015122:	d10b      	bne.n	801513c <_free_r+0x6c>
 8015124:	6820      	ldr	r0, [r4, #0]
 8015126:	4401      	add	r1, r0
 8015128:	1850      	adds	r0, r2, r1
 801512a:	4283      	cmp	r3, r0
 801512c:	6011      	str	r1, [r2, #0]
 801512e:	d1e0      	bne.n	80150f2 <_free_r+0x22>
 8015130:	6818      	ldr	r0, [r3, #0]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	6053      	str	r3, [r2, #4]
 8015136:	4408      	add	r0, r1
 8015138:	6010      	str	r0, [r2, #0]
 801513a:	e7da      	b.n	80150f2 <_free_r+0x22>
 801513c:	d902      	bls.n	8015144 <_free_r+0x74>
 801513e:	230c      	movs	r3, #12
 8015140:	602b      	str	r3, [r5, #0]
 8015142:	e7d6      	b.n	80150f2 <_free_r+0x22>
 8015144:	6820      	ldr	r0, [r4, #0]
 8015146:	1821      	adds	r1, r4, r0
 8015148:	428b      	cmp	r3, r1
 801514a:	bf04      	itt	eq
 801514c:	6819      	ldreq	r1, [r3, #0]
 801514e:	685b      	ldreq	r3, [r3, #4]
 8015150:	6063      	str	r3, [r4, #4]
 8015152:	bf04      	itt	eq
 8015154:	1809      	addeq	r1, r1, r0
 8015156:	6021      	streq	r1, [r4, #0]
 8015158:	6054      	str	r4, [r2, #4]
 801515a:	e7ca      	b.n	80150f2 <_free_r+0x22>
 801515c:	bd38      	pop	{r3, r4, r5, pc}
 801515e:	bf00      	nop
 8015160:	24002c64 	.word	0x24002c64

08015164 <sbrk_aligned>:
 8015164:	b570      	push	{r4, r5, r6, lr}
 8015166:	4e0f      	ldr	r6, [pc, #60]	@ (80151a4 <sbrk_aligned+0x40>)
 8015168:	460c      	mov	r4, r1
 801516a:	6831      	ldr	r1, [r6, #0]
 801516c:	4605      	mov	r5, r0
 801516e:	b911      	cbnz	r1, 8015176 <sbrk_aligned+0x12>
 8015170:	f000 fba4 	bl	80158bc <_sbrk_r>
 8015174:	6030      	str	r0, [r6, #0]
 8015176:	4621      	mov	r1, r4
 8015178:	4628      	mov	r0, r5
 801517a:	f000 fb9f 	bl	80158bc <_sbrk_r>
 801517e:	1c43      	adds	r3, r0, #1
 8015180:	d103      	bne.n	801518a <sbrk_aligned+0x26>
 8015182:	f04f 34ff 	mov.w	r4, #4294967295
 8015186:	4620      	mov	r0, r4
 8015188:	bd70      	pop	{r4, r5, r6, pc}
 801518a:	1cc4      	adds	r4, r0, #3
 801518c:	f024 0403 	bic.w	r4, r4, #3
 8015190:	42a0      	cmp	r0, r4
 8015192:	d0f8      	beq.n	8015186 <sbrk_aligned+0x22>
 8015194:	1a21      	subs	r1, r4, r0
 8015196:	4628      	mov	r0, r5
 8015198:	f000 fb90 	bl	80158bc <_sbrk_r>
 801519c:	3001      	adds	r0, #1
 801519e:	d1f2      	bne.n	8015186 <sbrk_aligned+0x22>
 80151a0:	e7ef      	b.n	8015182 <sbrk_aligned+0x1e>
 80151a2:	bf00      	nop
 80151a4:	24002c60 	.word	0x24002c60

080151a8 <_malloc_r>:
 80151a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151ac:	1ccd      	adds	r5, r1, #3
 80151ae:	f025 0503 	bic.w	r5, r5, #3
 80151b2:	3508      	adds	r5, #8
 80151b4:	2d0c      	cmp	r5, #12
 80151b6:	bf38      	it	cc
 80151b8:	250c      	movcc	r5, #12
 80151ba:	2d00      	cmp	r5, #0
 80151bc:	4606      	mov	r6, r0
 80151be:	db01      	blt.n	80151c4 <_malloc_r+0x1c>
 80151c0:	42a9      	cmp	r1, r5
 80151c2:	d904      	bls.n	80151ce <_malloc_r+0x26>
 80151c4:	230c      	movs	r3, #12
 80151c6:	6033      	str	r3, [r6, #0]
 80151c8:	2000      	movs	r0, #0
 80151ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80152a4 <_malloc_r+0xfc>
 80151d2:	f000 f869 	bl	80152a8 <__malloc_lock>
 80151d6:	f8d8 3000 	ldr.w	r3, [r8]
 80151da:	461c      	mov	r4, r3
 80151dc:	bb44      	cbnz	r4, 8015230 <_malloc_r+0x88>
 80151de:	4629      	mov	r1, r5
 80151e0:	4630      	mov	r0, r6
 80151e2:	f7ff ffbf 	bl	8015164 <sbrk_aligned>
 80151e6:	1c43      	adds	r3, r0, #1
 80151e8:	4604      	mov	r4, r0
 80151ea:	d158      	bne.n	801529e <_malloc_r+0xf6>
 80151ec:	f8d8 4000 	ldr.w	r4, [r8]
 80151f0:	4627      	mov	r7, r4
 80151f2:	2f00      	cmp	r7, #0
 80151f4:	d143      	bne.n	801527e <_malloc_r+0xd6>
 80151f6:	2c00      	cmp	r4, #0
 80151f8:	d04b      	beq.n	8015292 <_malloc_r+0xea>
 80151fa:	6823      	ldr	r3, [r4, #0]
 80151fc:	4639      	mov	r1, r7
 80151fe:	4630      	mov	r0, r6
 8015200:	eb04 0903 	add.w	r9, r4, r3
 8015204:	f000 fb5a 	bl	80158bc <_sbrk_r>
 8015208:	4581      	cmp	r9, r0
 801520a:	d142      	bne.n	8015292 <_malloc_r+0xea>
 801520c:	6821      	ldr	r1, [r4, #0]
 801520e:	1a6d      	subs	r5, r5, r1
 8015210:	4629      	mov	r1, r5
 8015212:	4630      	mov	r0, r6
 8015214:	f7ff ffa6 	bl	8015164 <sbrk_aligned>
 8015218:	3001      	adds	r0, #1
 801521a:	d03a      	beq.n	8015292 <_malloc_r+0xea>
 801521c:	6823      	ldr	r3, [r4, #0]
 801521e:	442b      	add	r3, r5
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	f8d8 3000 	ldr.w	r3, [r8]
 8015226:	685a      	ldr	r2, [r3, #4]
 8015228:	bb62      	cbnz	r2, 8015284 <_malloc_r+0xdc>
 801522a:	f8c8 7000 	str.w	r7, [r8]
 801522e:	e00f      	b.n	8015250 <_malloc_r+0xa8>
 8015230:	6822      	ldr	r2, [r4, #0]
 8015232:	1b52      	subs	r2, r2, r5
 8015234:	d420      	bmi.n	8015278 <_malloc_r+0xd0>
 8015236:	2a0b      	cmp	r2, #11
 8015238:	d917      	bls.n	801526a <_malloc_r+0xc2>
 801523a:	1961      	adds	r1, r4, r5
 801523c:	42a3      	cmp	r3, r4
 801523e:	6025      	str	r5, [r4, #0]
 8015240:	bf18      	it	ne
 8015242:	6059      	strne	r1, [r3, #4]
 8015244:	6863      	ldr	r3, [r4, #4]
 8015246:	bf08      	it	eq
 8015248:	f8c8 1000 	streq.w	r1, [r8]
 801524c:	5162      	str	r2, [r4, r5]
 801524e:	604b      	str	r3, [r1, #4]
 8015250:	4630      	mov	r0, r6
 8015252:	f000 f82f 	bl	80152b4 <__malloc_unlock>
 8015256:	f104 000b 	add.w	r0, r4, #11
 801525a:	1d23      	adds	r3, r4, #4
 801525c:	f020 0007 	bic.w	r0, r0, #7
 8015260:	1ac2      	subs	r2, r0, r3
 8015262:	bf1c      	itt	ne
 8015264:	1a1b      	subne	r3, r3, r0
 8015266:	50a3      	strne	r3, [r4, r2]
 8015268:	e7af      	b.n	80151ca <_malloc_r+0x22>
 801526a:	6862      	ldr	r2, [r4, #4]
 801526c:	42a3      	cmp	r3, r4
 801526e:	bf0c      	ite	eq
 8015270:	f8c8 2000 	streq.w	r2, [r8]
 8015274:	605a      	strne	r2, [r3, #4]
 8015276:	e7eb      	b.n	8015250 <_malloc_r+0xa8>
 8015278:	4623      	mov	r3, r4
 801527a:	6864      	ldr	r4, [r4, #4]
 801527c:	e7ae      	b.n	80151dc <_malloc_r+0x34>
 801527e:	463c      	mov	r4, r7
 8015280:	687f      	ldr	r7, [r7, #4]
 8015282:	e7b6      	b.n	80151f2 <_malloc_r+0x4a>
 8015284:	461a      	mov	r2, r3
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	42a3      	cmp	r3, r4
 801528a:	d1fb      	bne.n	8015284 <_malloc_r+0xdc>
 801528c:	2300      	movs	r3, #0
 801528e:	6053      	str	r3, [r2, #4]
 8015290:	e7de      	b.n	8015250 <_malloc_r+0xa8>
 8015292:	230c      	movs	r3, #12
 8015294:	6033      	str	r3, [r6, #0]
 8015296:	4630      	mov	r0, r6
 8015298:	f000 f80c 	bl	80152b4 <__malloc_unlock>
 801529c:	e794      	b.n	80151c8 <_malloc_r+0x20>
 801529e:	6005      	str	r5, [r0, #0]
 80152a0:	e7d6      	b.n	8015250 <_malloc_r+0xa8>
 80152a2:	bf00      	nop
 80152a4:	24002c64 	.word	0x24002c64

080152a8 <__malloc_lock>:
 80152a8:	4801      	ldr	r0, [pc, #4]	@ (80152b0 <__malloc_lock+0x8>)
 80152aa:	f7ff bf0f 	b.w	80150cc <__retarget_lock_acquire_recursive>
 80152ae:	bf00      	nop
 80152b0:	24002c5c 	.word	0x24002c5c

080152b4 <__malloc_unlock>:
 80152b4:	4801      	ldr	r0, [pc, #4]	@ (80152bc <__malloc_unlock+0x8>)
 80152b6:	f7ff bf0a 	b.w	80150ce <__retarget_lock_release_recursive>
 80152ba:	bf00      	nop
 80152bc:	24002c5c 	.word	0x24002c5c

080152c0 <__ssputs_r>:
 80152c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152c4:	688e      	ldr	r6, [r1, #8]
 80152c6:	461f      	mov	r7, r3
 80152c8:	42be      	cmp	r6, r7
 80152ca:	680b      	ldr	r3, [r1, #0]
 80152cc:	4682      	mov	sl, r0
 80152ce:	460c      	mov	r4, r1
 80152d0:	4690      	mov	r8, r2
 80152d2:	d82d      	bhi.n	8015330 <__ssputs_r+0x70>
 80152d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80152d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80152dc:	d026      	beq.n	801532c <__ssputs_r+0x6c>
 80152de:	6965      	ldr	r5, [r4, #20]
 80152e0:	6909      	ldr	r1, [r1, #16]
 80152e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80152e6:	eba3 0901 	sub.w	r9, r3, r1
 80152ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80152ee:	1c7b      	adds	r3, r7, #1
 80152f0:	444b      	add	r3, r9
 80152f2:	106d      	asrs	r5, r5, #1
 80152f4:	429d      	cmp	r5, r3
 80152f6:	bf38      	it	cc
 80152f8:	461d      	movcc	r5, r3
 80152fa:	0553      	lsls	r3, r2, #21
 80152fc:	d527      	bpl.n	801534e <__ssputs_r+0x8e>
 80152fe:	4629      	mov	r1, r5
 8015300:	f7ff ff52 	bl	80151a8 <_malloc_r>
 8015304:	4606      	mov	r6, r0
 8015306:	b360      	cbz	r0, 8015362 <__ssputs_r+0xa2>
 8015308:	6921      	ldr	r1, [r4, #16]
 801530a:	464a      	mov	r2, r9
 801530c:	f000 fae6 	bl	80158dc <memcpy>
 8015310:	89a3      	ldrh	r3, [r4, #12]
 8015312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801531a:	81a3      	strh	r3, [r4, #12]
 801531c:	6126      	str	r6, [r4, #16]
 801531e:	6165      	str	r5, [r4, #20]
 8015320:	444e      	add	r6, r9
 8015322:	eba5 0509 	sub.w	r5, r5, r9
 8015326:	6026      	str	r6, [r4, #0]
 8015328:	60a5      	str	r5, [r4, #8]
 801532a:	463e      	mov	r6, r7
 801532c:	42be      	cmp	r6, r7
 801532e:	d900      	bls.n	8015332 <__ssputs_r+0x72>
 8015330:	463e      	mov	r6, r7
 8015332:	6820      	ldr	r0, [r4, #0]
 8015334:	4632      	mov	r2, r6
 8015336:	4641      	mov	r1, r8
 8015338:	f000 faa6 	bl	8015888 <memmove>
 801533c:	68a3      	ldr	r3, [r4, #8]
 801533e:	1b9b      	subs	r3, r3, r6
 8015340:	60a3      	str	r3, [r4, #8]
 8015342:	6823      	ldr	r3, [r4, #0]
 8015344:	4433      	add	r3, r6
 8015346:	6023      	str	r3, [r4, #0]
 8015348:	2000      	movs	r0, #0
 801534a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801534e:	462a      	mov	r2, r5
 8015350:	f000 fad2 	bl	80158f8 <_realloc_r>
 8015354:	4606      	mov	r6, r0
 8015356:	2800      	cmp	r0, #0
 8015358:	d1e0      	bne.n	801531c <__ssputs_r+0x5c>
 801535a:	6921      	ldr	r1, [r4, #16]
 801535c:	4650      	mov	r0, sl
 801535e:	f7ff feb7 	bl	80150d0 <_free_r>
 8015362:	230c      	movs	r3, #12
 8015364:	f8ca 3000 	str.w	r3, [sl]
 8015368:	89a3      	ldrh	r3, [r4, #12]
 801536a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801536e:	81a3      	strh	r3, [r4, #12]
 8015370:	f04f 30ff 	mov.w	r0, #4294967295
 8015374:	e7e9      	b.n	801534a <__ssputs_r+0x8a>
	...

08015378 <_svfiprintf_r>:
 8015378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801537c:	4698      	mov	r8, r3
 801537e:	898b      	ldrh	r3, [r1, #12]
 8015380:	061b      	lsls	r3, r3, #24
 8015382:	b09d      	sub	sp, #116	@ 0x74
 8015384:	4607      	mov	r7, r0
 8015386:	460d      	mov	r5, r1
 8015388:	4614      	mov	r4, r2
 801538a:	d510      	bpl.n	80153ae <_svfiprintf_r+0x36>
 801538c:	690b      	ldr	r3, [r1, #16]
 801538e:	b973      	cbnz	r3, 80153ae <_svfiprintf_r+0x36>
 8015390:	2140      	movs	r1, #64	@ 0x40
 8015392:	f7ff ff09 	bl	80151a8 <_malloc_r>
 8015396:	6028      	str	r0, [r5, #0]
 8015398:	6128      	str	r0, [r5, #16]
 801539a:	b930      	cbnz	r0, 80153aa <_svfiprintf_r+0x32>
 801539c:	230c      	movs	r3, #12
 801539e:	603b      	str	r3, [r7, #0]
 80153a0:	f04f 30ff 	mov.w	r0, #4294967295
 80153a4:	b01d      	add	sp, #116	@ 0x74
 80153a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153aa:	2340      	movs	r3, #64	@ 0x40
 80153ac:	616b      	str	r3, [r5, #20]
 80153ae:	2300      	movs	r3, #0
 80153b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80153b2:	2320      	movs	r3, #32
 80153b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80153b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80153bc:	2330      	movs	r3, #48	@ 0x30
 80153be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801555c <_svfiprintf_r+0x1e4>
 80153c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80153c6:	f04f 0901 	mov.w	r9, #1
 80153ca:	4623      	mov	r3, r4
 80153cc:	469a      	mov	sl, r3
 80153ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153d2:	b10a      	cbz	r2, 80153d8 <_svfiprintf_r+0x60>
 80153d4:	2a25      	cmp	r2, #37	@ 0x25
 80153d6:	d1f9      	bne.n	80153cc <_svfiprintf_r+0x54>
 80153d8:	ebba 0b04 	subs.w	fp, sl, r4
 80153dc:	d00b      	beq.n	80153f6 <_svfiprintf_r+0x7e>
 80153de:	465b      	mov	r3, fp
 80153e0:	4622      	mov	r2, r4
 80153e2:	4629      	mov	r1, r5
 80153e4:	4638      	mov	r0, r7
 80153e6:	f7ff ff6b 	bl	80152c0 <__ssputs_r>
 80153ea:	3001      	adds	r0, #1
 80153ec:	f000 80a7 	beq.w	801553e <_svfiprintf_r+0x1c6>
 80153f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153f2:	445a      	add	r2, fp
 80153f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80153f6:	f89a 3000 	ldrb.w	r3, [sl]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	f000 809f 	beq.w	801553e <_svfiprintf_r+0x1c6>
 8015400:	2300      	movs	r3, #0
 8015402:	f04f 32ff 	mov.w	r2, #4294967295
 8015406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801540a:	f10a 0a01 	add.w	sl, sl, #1
 801540e:	9304      	str	r3, [sp, #16]
 8015410:	9307      	str	r3, [sp, #28]
 8015412:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015416:	931a      	str	r3, [sp, #104]	@ 0x68
 8015418:	4654      	mov	r4, sl
 801541a:	2205      	movs	r2, #5
 801541c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015420:	484e      	ldr	r0, [pc, #312]	@ (801555c <_svfiprintf_r+0x1e4>)
 8015422:	f7ea ff65 	bl	80002f0 <memchr>
 8015426:	9a04      	ldr	r2, [sp, #16]
 8015428:	b9d8      	cbnz	r0, 8015462 <_svfiprintf_r+0xea>
 801542a:	06d0      	lsls	r0, r2, #27
 801542c:	bf44      	itt	mi
 801542e:	2320      	movmi	r3, #32
 8015430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015434:	0711      	lsls	r1, r2, #28
 8015436:	bf44      	itt	mi
 8015438:	232b      	movmi	r3, #43	@ 0x2b
 801543a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801543e:	f89a 3000 	ldrb.w	r3, [sl]
 8015442:	2b2a      	cmp	r3, #42	@ 0x2a
 8015444:	d015      	beq.n	8015472 <_svfiprintf_r+0xfa>
 8015446:	9a07      	ldr	r2, [sp, #28]
 8015448:	4654      	mov	r4, sl
 801544a:	2000      	movs	r0, #0
 801544c:	f04f 0c0a 	mov.w	ip, #10
 8015450:	4621      	mov	r1, r4
 8015452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015456:	3b30      	subs	r3, #48	@ 0x30
 8015458:	2b09      	cmp	r3, #9
 801545a:	d94b      	bls.n	80154f4 <_svfiprintf_r+0x17c>
 801545c:	b1b0      	cbz	r0, 801548c <_svfiprintf_r+0x114>
 801545e:	9207      	str	r2, [sp, #28]
 8015460:	e014      	b.n	801548c <_svfiprintf_r+0x114>
 8015462:	eba0 0308 	sub.w	r3, r0, r8
 8015466:	fa09 f303 	lsl.w	r3, r9, r3
 801546a:	4313      	orrs	r3, r2
 801546c:	9304      	str	r3, [sp, #16]
 801546e:	46a2      	mov	sl, r4
 8015470:	e7d2      	b.n	8015418 <_svfiprintf_r+0xa0>
 8015472:	9b03      	ldr	r3, [sp, #12]
 8015474:	1d19      	adds	r1, r3, #4
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	9103      	str	r1, [sp, #12]
 801547a:	2b00      	cmp	r3, #0
 801547c:	bfbb      	ittet	lt
 801547e:	425b      	neglt	r3, r3
 8015480:	f042 0202 	orrlt.w	r2, r2, #2
 8015484:	9307      	strge	r3, [sp, #28]
 8015486:	9307      	strlt	r3, [sp, #28]
 8015488:	bfb8      	it	lt
 801548a:	9204      	strlt	r2, [sp, #16]
 801548c:	7823      	ldrb	r3, [r4, #0]
 801548e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015490:	d10a      	bne.n	80154a8 <_svfiprintf_r+0x130>
 8015492:	7863      	ldrb	r3, [r4, #1]
 8015494:	2b2a      	cmp	r3, #42	@ 0x2a
 8015496:	d132      	bne.n	80154fe <_svfiprintf_r+0x186>
 8015498:	9b03      	ldr	r3, [sp, #12]
 801549a:	1d1a      	adds	r2, r3, #4
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	9203      	str	r2, [sp, #12]
 80154a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80154a4:	3402      	adds	r4, #2
 80154a6:	9305      	str	r3, [sp, #20]
 80154a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801556c <_svfiprintf_r+0x1f4>
 80154ac:	7821      	ldrb	r1, [r4, #0]
 80154ae:	2203      	movs	r2, #3
 80154b0:	4650      	mov	r0, sl
 80154b2:	f7ea ff1d 	bl	80002f0 <memchr>
 80154b6:	b138      	cbz	r0, 80154c8 <_svfiprintf_r+0x150>
 80154b8:	9b04      	ldr	r3, [sp, #16]
 80154ba:	eba0 000a 	sub.w	r0, r0, sl
 80154be:	2240      	movs	r2, #64	@ 0x40
 80154c0:	4082      	lsls	r2, r0
 80154c2:	4313      	orrs	r3, r2
 80154c4:	3401      	adds	r4, #1
 80154c6:	9304      	str	r3, [sp, #16]
 80154c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154cc:	4824      	ldr	r0, [pc, #144]	@ (8015560 <_svfiprintf_r+0x1e8>)
 80154ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80154d2:	2206      	movs	r2, #6
 80154d4:	f7ea ff0c 	bl	80002f0 <memchr>
 80154d8:	2800      	cmp	r0, #0
 80154da:	d036      	beq.n	801554a <_svfiprintf_r+0x1d2>
 80154dc:	4b21      	ldr	r3, [pc, #132]	@ (8015564 <_svfiprintf_r+0x1ec>)
 80154de:	bb1b      	cbnz	r3, 8015528 <_svfiprintf_r+0x1b0>
 80154e0:	9b03      	ldr	r3, [sp, #12]
 80154e2:	3307      	adds	r3, #7
 80154e4:	f023 0307 	bic.w	r3, r3, #7
 80154e8:	3308      	adds	r3, #8
 80154ea:	9303      	str	r3, [sp, #12]
 80154ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154ee:	4433      	add	r3, r6
 80154f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80154f2:	e76a      	b.n	80153ca <_svfiprintf_r+0x52>
 80154f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80154f8:	460c      	mov	r4, r1
 80154fa:	2001      	movs	r0, #1
 80154fc:	e7a8      	b.n	8015450 <_svfiprintf_r+0xd8>
 80154fe:	2300      	movs	r3, #0
 8015500:	3401      	adds	r4, #1
 8015502:	9305      	str	r3, [sp, #20]
 8015504:	4619      	mov	r1, r3
 8015506:	f04f 0c0a 	mov.w	ip, #10
 801550a:	4620      	mov	r0, r4
 801550c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015510:	3a30      	subs	r2, #48	@ 0x30
 8015512:	2a09      	cmp	r2, #9
 8015514:	d903      	bls.n	801551e <_svfiprintf_r+0x1a6>
 8015516:	2b00      	cmp	r3, #0
 8015518:	d0c6      	beq.n	80154a8 <_svfiprintf_r+0x130>
 801551a:	9105      	str	r1, [sp, #20]
 801551c:	e7c4      	b.n	80154a8 <_svfiprintf_r+0x130>
 801551e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015522:	4604      	mov	r4, r0
 8015524:	2301      	movs	r3, #1
 8015526:	e7f0      	b.n	801550a <_svfiprintf_r+0x192>
 8015528:	ab03      	add	r3, sp, #12
 801552a:	9300      	str	r3, [sp, #0]
 801552c:	462a      	mov	r2, r5
 801552e:	4b0e      	ldr	r3, [pc, #56]	@ (8015568 <_svfiprintf_r+0x1f0>)
 8015530:	a904      	add	r1, sp, #16
 8015532:	4638      	mov	r0, r7
 8015534:	f3af 8000 	nop.w
 8015538:	1c42      	adds	r2, r0, #1
 801553a:	4606      	mov	r6, r0
 801553c:	d1d6      	bne.n	80154ec <_svfiprintf_r+0x174>
 801553e:	89ab      	ldrh	r3, [r5, #12]
 8015540:	065b      	lsls	r3, r3, #25
 8015542:	f53f af2d 	bmi.w	80153a0 <_svfiprintf_r+0x28>
 8015546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015548:	e72c      	b.n	80153a4 <_svfiprintf_r+0x2c>
 801554a:	ab03      	add	r3, sp, #12
 801554c:	9300      	str	r3, [sp, #0]
 801554e:	462a      	mov	r2, r5
 8015550:	4b05      	ldr	r3, [pc, #20]	@ (8015568 <_svfiprintf_r+0x1f0>)
 8015552:	a904      	add	r1, sp, #16
 8015554:	4638      	mov	r0, r7
 8015556:	f000 f879 	bl	801564c <_printf_i>
 801555a:	e7ed      	b.n	8015538 <_svfiprintf_r+0x1c0>
 801555c:	08015cd0 	.word	0x08015cd0
 8015560:	08015cda 	.word	0x08015cda
 8015564:	00000000 	.word	0x00000000
 8015568:	080152c1 	.word	0x080152c1
 801556c:	08015cd6 	.word	0x08015cd6

08015570 <_printf_common>:
 8015570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015574:	4616      	mov	r6, r2
 8015576:	4698      	mov	r8, r3
 8015578:	688a      	ldr	r2, [r1, #8]
 801557a:	690b      	ldr	r3, [r1, #16]
 801557c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015580:	4293      	cmp	r3, r2
 8015582:	bfb8      	it	lt
 8015584:	4613      	movlt	r3, r2
 8015586:	6033      	str	r3, [r6, #0]
 8015588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801558c:	4607      	mov	r7, r0
 801558e:	460c      	mov	r4, r1
 8015590:	b10a      	cbz	r2, 8015596 <_printf_common+0x26>
 8015592:	3301      	adds	r3, #1
 8015594:	6033      	str	r3, [r6, #0]
 8015596:	6823      	ldr	r3, [r4, #0]
 8015598:	0699      	lsls	r1, r3, #26
 801559a:	bf42      	ittt	mi
 801559c:	6833      	ldrmi	r3, [r6, #0]
 801559e:	3302      	addmi	r3, #2
 80155a0:	6033      	strmi	r3, [r6, #0]
 80155a2:	6825      	ldr	r5, [r4, #0]
 80155a4:	f015 0506 	ands.w	r5, r5, #6
 80155a8:	d106      	bne.n	80155b8 <_printf_common+0x48>
 80155aa:	f104 0a19 	add.w	sl, r4, #25
 80155ae:	68e3      	ldr	r3, [r4, #12]
 80155b0:	6832      	ldr	r2, [r6, #0]
 80155b2:	1a9b      	subs	r3, r3, r2
 80155b4:	42ab      	cmp	r3, r5
 80155b6:	dc26      	bgt.n	8015606 <_printf_common+0x96>
 80155b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80155bc:	6822      	ldr	r2, [r4, #0]
 80155be:	3b00      	subs	r3, #0
 80155c0:	bf18      	it	ne
 80155c2:	2301      	movne	r3, #1
 80155c4:	0692      	lsls	r2, r2, #26
 80155c6:	d42b      	bmi.n	8015620 <_printf_common+0xb0>
 80155c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80155cc:	4641      	mov	r1, r8
 80155ce:	4638      	mov	r0, r7
 80155d0:	47c8      	blx	r9
 80155d2:	3001      	adds	r0, #1
 80155d4:	d01e      	beq.n	8015614 <_printf_common+0xa4>
 80155d6:	6823      	ldr	r3, [r4, #0]
 80155d8:	6922      	ldr	r2, [r4, #16]
 80155da:	f003 0306 	and.w	r3, r3, #6
 80155de:	2b04      	cmp	r3, #4
 80155e0:	bf02      	ittt	eq
 80155e2:	68e5      	ldreq	r5, [r4, #12]
 80155e4:	6833      	ldreq	r3, [r6, #0]
 80155e6:	1aed      	subeq	r5, r5, r3
 80155e8:	68a3      	ldr	r3, [r4, #8]
 80155ea:	bf0c      	ite	eq
 80155ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80155f0:	2500      	movne	r5, #0
 80155f2:	4293      	cmp	r3, r2
 80155f4:	bfc4      	itt	gt
 80155f6:	1a9b      	subgt	r3, r3, r2
 80155f8:	18ed      	addgt	r5, r5, r3
 80155fa:	2600      	movs	r6, #0
 80155fc:	341a      	adds	r4, #26
 80155fe:	42b5      	cmp	r5, r6
 8015600:	d11a      	bne.n	8015638 <_printf_common+0xc8>
 8015602:	2000      	movs	r0, #0
 8015604:	e008      	b.n	8015618 <_printf_common+0xa8>
 8015606:	2301      	movs	r3, #1
 8015608:	4652      	mov	r2, sl
 801560a:	4641      	mov	r1, r8
 801560c:	4638      	mov	r0, r7
 801560e:	47c8      	blx	r9
 8015610:	3001      	adds	r0, #1
 8015612:	d103      	bne.n	801561c <_printf_common+0xac>
 8015614:	f04f 30ff 	mov.w	r0, #4294967295
 8015618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801561c:	3501      	adds	r5, #1
 801561e:	e7c6      	b.n	80155ae <_printf_common+0x3e>
 8015620:	18e1      	adds	r1, r4, r3
 8015622:	1c5a      	adds	r2, r3, #1
 8015624:	2030      	movs	r0, #48	@ 0x30
 8015626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801562a:	4422      	add	r2, r4
 801562c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015634:	3302      	adds	r3, #2
 8015636:	e7c7      	b.n	80155c8 <_printf_common+0x58>
 8015638:	2301      	movs	r3, #1
 801563a:	4622      	mov	r2, r4
 801563c:	4641      	mov	r1, r8
 801563e:	4638      	mov	r0, r7
 8015640:	47c8      	blx	r9
 8015642:	3001      	adds	r0, #1
 8015644:	d0e6      	beq.n	8015614 <_printf_common+0xa4>
 8015646:	3601      	adds	r6, #1
 8015648:	e7d9      	b.n	80155fe <_printf_common+0x8e>
	...

0801564c <_printf_i>:
 801564c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015650:	7e0f      	ldrb	r7, [r1, #24]
 8015652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015654:	2f78      	cmp	r7, #120	@ 0x78
 8015656:	4691      	mov	r9, r2
 8015658:	4680      	mov	r8, r0
 801565a:	460c      	mov	r4, r1
 801565c:	469a      	mov	sl, r3
 801565e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015662:	d807      	bhi.n	8015674 <_printf_i+0x28>
 8015664:	2f62      	cmp	r7, #98	@ 0x62
 8015666:	d80a      	bhi.n	801567e <_printf_i+0x32>
 8015668:	2f00      	cmp	r7, #0
 801566a:	f000 80d1 	beq.w	8015810 <_printf_i+0x1c4>
 801566e:	2f58      	cmp	r7, #88	@ 0x58
 8015670:	f000 80b8 	beq.w	80157e4 <_printf_i+0x198>
 8015674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801567c:	e03a      	b.n	80156f4 <_printf_i+0xa8>
 801567e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015682:	2b15      	cmp	r3, #21
 8015684:	d8f6      	bhi.n	8015674 <_printf_i+0x28>
 8015686:	a101      	add	r1, pc, #4	@ (adr r1, 801568c <_printf_i+0x40>)
 8015688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801568c:	080156e5 	.word	0x080156e5
 8015690:	080156f9 	.word	0x080156f9
 8015694:	08015675 	.word	0x08015675
 8015698:	08015675 	.word	0x08015675
 801569c:	08015675 	.word	0x08015675
 80156a0:	08015675 	.word	0x08015675
 80156a4:	080156f9 	.word	0x080156f9
 80156a8:	08015675 	.word	0x08015675
 80156ac:	08015675 	.word	0x08015675
 80156b0:	08015675 	.word	0x08015675
 80156b4:	08015675 	.word	0x08015675
 80156b8:	080157f7 	.word	0x080157f7
 80156bc:	08015723 	.word	0x08015723
 80156c0:	080157b1 	.word	0x080157b1
 80156c4:	08015675 	.word	0x08015675
 80156c8:	08015675 	.word	0x08015675
 80156cc:	08015819 	.word	0x08015819
 80156d0:	08015675 	.word	0x08015675
 80156d4:	08015723 	.word	0x08015723
 80156d8:	08015675 	.word	0x08015675
 80156dc:	08015675 	.word	0x08015675
 80156e0:	080157b9 	.word	0x080157b9
 80156e4:	6833      	ldr	r3, [r6, #0]
 80156e6:	1d1a      	adds	r2, r3, #4
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	6032      	str	r2, [r6, #0]
 80156ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80156f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80156f4:	2301      	movs	r3, #1
 80156f6:	e09c      	b.n	8015832 <_printf_i+0x1e6>
 80156f8:	6833      	ldr	r3, [r6, #0]
 80156fa:	6820      	ldr	r0, [r4, #0]
 80156fc:	1d19      	adds	r1, r3, #4
 80156fe:	6031      	str	r1, [r6, #0]
 8015700:	0606      	lsls	r6, r0, #24
 8015702:	d501      	bpl.n	8015708 <_printf_i+0xbc>
 8015704:	681d      	ldr	r5, [r3, #0]
 8015706:	e003      	b.n	8015710 <_printf_i+0xc4>
 8015708:	0645      	lsls	r5, r0, #25
 801570a:	d5fb      	bpl.n	8015704 <_printf_i+0xb8>
 801570c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015710:	2d00      	cmp	r5, #0
 8015712:	da03      	bge.n	801571c <_printf_i+0xd0>
 8015714:	232d      	movs	r3, #45	@ 0x2d
 8015716:	426d      	negs	r5, r5
 8015718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801571c:	4858      	ldr	r0, [pc, #352]	@ (8015880 <_printf_i+0x234>)
 801571e:	230a      	movs	r3, #10
 8015720:	e011      	b.n	8015746 <_printf_i+0xfa>
 8015722:	6821      	ldr	r1, [r4, #0]
 8015724:	6833      	ldr	r3, [r6, #0]
 8015726:	0608      	lsls	r0, r1, #24
 8015728:	f853 5b04 	ldr.w	r5, [r3], #4
 801572c:	d402      	bmi.n	8015734 <_printf_i+0xe8>
 801572e:	0649      	lsls	r1, r1, #25
 8015730:	bf48      	it	mi
 8015732:	b2ad      	uxthmi	r5, r5
 8015734:	2f6f      	cmp	r7, #111	@ 0x6f
 8015736:	4852      	ldr	r0, [pc, #328]	@ (8015880 <_printf_i+0x234>)
 8015738:	6033      	str	r3, [r6, #0]
 801573a:	bf14      	ite	ne
 801573c:	230a      	movne	r3, #10
 801573e:	2308      	moveq	r3, #8
 8015740:	2100      	movs	r1, #0
 8015742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015746:	6866      	ldr	r6, [r4, #4]
 8015748:	60a6      	str	r6, [r4, #8]
 801574a:	2e00      	cmp	r6, #0
 801574c:	db05      	blt.n	801575a <_printf_i+0x10e>
 801574e:	6821      	ldr	r1, [r4, #0]
 8015750:	432e      	orrs	r6, r5
 8015752:	f021 0104 	bic.w	r1, r1, #4
 8015756:	6021      	str	r1, [r4, #0]
 8015758:	d04b      	beq.n	80157f2 <_printf_i+0x1a6>
 801575a:	4616      	mov	r6, r2
 801575c:	fbb5 f1f3 	udiv	r1, r5, r3
 8015760:	fb03 5711 	mls	r7, r3, r1, r5
 8015764:	5dc7      	ldrb	r7, [r0, r7]
 8015766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801576a:	462f      	mov	r7, r5
 801576c:	42bb      	cmp	r3, r7
 801576e:	460d      	mov	r5, r1
 8015770:	d9f4      	bls.n	801575c <_printf_i+0x110>
 8015772:	2b08      	cmp	r3, #8
 8015774:	d10b      	bne.n	801578e <_printf_i+0x142>
 8015776:	6823      	ldr	r3, [r4, #0]
 8015778:	07df      	lsls	r7, r3, #31
 801577a:	d508      	bpl.n	801578e <_printf_i+0x142>
 801577c:	6923      	ldr	r3, [r4, #16]
 801577e:	6861      	ldr	r1, [r4, #4]
 8015780:	4299      	cmp	r1, r3
 8015782:	bfde      	ittt	le
 8015784:	2330      	movle	r3, #48	@ 0x30
 8015786:	f806 3c01 	strble.w	r3, [r6, #-1]
 801578a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801578e:	1b92      	subs	r2, r2, r6
 8015790:	6122      	str	r2, [r4, #16]
 8015792:	f8cd a000 	str.w	sl, [sp]
 8015796:	464b      	mov	r3, r9
 8015798:	aa03      	add	r2, sp, #12
 801579a:	4621      	mov	r1, r4
 801579c:	4640      	mov	r0, r8
 801579e:	f7ff fee7 	bl	8015570 <_printf_common>
 80157a2:	3001      	adds	r0, #1
 80157a4:	d14a      	bne.n	801583c <_printf_i+0x1f0>
 80157a6:	f04f 30ff 	mov.w	r0, #4294967295
 80157aa:	b004      	add	sp, #16
 80157ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157b0:	6823      	ldr	r3, [r4, #0]
 80157b2:	f043 0320 	orr.w	r3, r3, #32
 80157b6:	6023      	str	r3, [r4, #0]
 80157b8:	4832      	ldr	r0, [pc, #200]	@ (8015884 <_printf_i+0x238>)
 80157ba:	2778      	movs	r7, #120	@ 0x78
 80157bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80157c0:	6823      	ldr	r3, [r4, #0]
 80157c2:	6831      	ldr	r1, [r6, #0]
 80157c4:	061f      	lsls	r7, r3, #24
 80157c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80157ca:	d402      	bmi.n	80157d2 <_printf_i+0x186>
 80157cc:	065f      	lsls	r7, r3, #25
 80157ce:	bf48      	it	mi
 80157d0:	b2ad      	uxthmi	r5, r5
 80157d2:	6031      	str	r1, [r6, #0]
 80157d4:	07d9      	lsls	r1, r3, #31
 80157d6:	bf44      	itt	mi
 80157d8:	f043 0320 	orrmi.w	r3, r3, #32
 80157dc:	6023      	strmi	r3, [r4, #0]
 80157de:	b11d      	cbz	r5, 80157e8 <_printf_i+0x19c>
 80157e0:	2310      	movs	r3, #16
 80157e2:	e7ad      	b.n	8015740 <_printf_i+0xf4>
 80157e4:	4826      	ldr	r0, [pc, #152]	@ (8015880 <_printf_i+0x234>)
 80157e6:	e7e9      	b.n	80157bc <_printf_i+0x170>
 80157e8:	6823      	ldr	r3, [r4, #0]
 80157ea:	f023 0320 	bic.w	r3, r3, #32
 80157ee:	6023      	str	r3, [r4, #0]
 80157f0:	e7f6      	b.n	80157e0 <_printf_i+0x194>
 80157f2:	4616      	mov	r6, r2
 80157f4:	e7bd      	b.n	8015772 <_printf_i+0x126>
 80157f6:	6833      	ldr	r3, [r6, #0]
 80157f8:	6825      	ldr	r5, [r4, #0]
 80157fa:	6961      	ldr	r1, [r4, #20]
 80157fc:	1d18      	adds	r0, r3, #4
 80157fe:	6030      	str	r0, [r6, #0]
 8015800:	062e      	lsls	r6, r5, #24
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	d501      	bpl.n	801580a <_printf_i+0x1be>
 8015806:	6019      	str	r1, [r3, #0]
 8015808:	e002      	b.n	8015810 <_printf_i+0x1c4>
 801580a:	0668      	lsls	r0, r5, #25
 801580c:	d5fb      	bpl.n	8015806 <_printf_i+0x1ba>
 801580e:	8019      	strh	r1, [r3, #0]
 8015810:	2300      	movs	r3, #0
 8015812:	6123      	str	r3, [r4, #16]
 8015814:	4616      	mov	r6, r2
 8015816:	e7bc      	b.n	8015792 <_printf_i+0x146>
 8015818:	6833      	ldr	r3, [r6, #0]
 801581a:	1d1a      	adds	r2, r3, #4
 801581c:	6032      	str	r2, [r6, #0]
 801581e:	681e      	ldr	r6, [r3, #0]
 8015820:	6862      	ldr	r2, [r4, #4]
 8015822:	2100      	movs	r1, #0
 8015824:	4630      	mov	r0, r6
 8015826:	f7ea fd63 	bl	80002f0 <memchr>
 801582a:	b108      	cbz	r0, 8015830 <_printf_i+0x1e4>
 801582c:	1b80      	subs	r0, r0, r6
 801582e:	6060      	str	r0, [r4, #4]
 8015830:	6863      	ldr	r3, [r4, #4]
 8015832:	6123      	str	r3, [r4, #16]
 8015834:	2300      	movs	r3, #0
 8015836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801583a:	e7aa      	b.n	8015792 <_printf_i+0x146>
 801583c:	6923      	ldr	r3, [r4, #16]
 801583e:	4632      	mov	r2, r6
 8015840:	4649      	mov	r1, r9
 8015842:	4640      	mov	r0, r8
 8015844:	47d0      	blx	sl
 8015846:	3001      	adds	r0, #1
 8015848:	d0ad      	beq.n	80157a6 <_printf_i+0x15a>
 801584a:	6823      	ldr	r3, [r4, #0]
 801584c:	079b      	lsls	r3, r3, #30
 801584e:	d413      	bmi.n	8015878 <_printf_i+0x22c>
 8015850:	68e0      	ldr	r0, [r4, #12]
 8015852:	9b03      	ldr	r3, [sp, #12]
 8015854:	4298      	cmp	r0, r3
 8015856:	bfb8      	it	lt
 8015858:	4618      	movlt	r0, r3
 801585a:	e7a6      	b.n	80157aa <_printf_i+0x15e>
 801585c:	2301      	movs	r3, #1
 801585e:	4632      	mov	r2, r6
 8015860:	4649      	mov	r1, r9
 8015862:	4640      	mov	r0, r8
 8015864:	47d0      	blx	sl
 8015866:	3001      	adds	r0, #1
 8015868:	d09d      	beq.n	80157a6 <_printf_i+0x15a>
 801586a:	3501      	adds	r5, #1
 801586c:	68e3      	ldr	r3, [r4, #12]
 801586e:	9903      	ldr	r1, [sp, #12]
 8015870:	1a5b      	subs	r3, r3, r1
 8015872:	42ab      	cmp	r3, r5
 8015874:	dcf2      	bgt.n	801585c <_printf_i+0x210>
 8015876:	e7eb      	b.n	8015850 <_printf_i+0x204>
 8015878:	2500      	movs	r5, #0
 801587a:	f104 0619 	add.w	r6, r4, #25
 801587e:	e7f5      	b.n	801586c <_printf_i+0x220>
 8015880:	08015ce1 	.word	0x08015ce1
 8015884:	08015cf2 	.word	0x08015cf2

08015888 <memmove>:
 8015888:	4288      	cmp	r0, r1
 801588a:	b510      	push	{r4, lr}
 801588c:	eb01 0402 	add.w	r4, r1, r2
 8015890:	d902      	bls.n	8015898 <memmove+0x10>
 8015892:	4284      	cmp	r4, r0
 8015894:	4623      	mov	r3, r4
 8015896:	d807      	bhi.n	80158a8 <memmove+0x20>
 8015898:	1e43      	subs	r3, r0, #1
 801589a:	42a1      	cmp	r1, r4
 801589c:	d008      	beq.n	80158b0 <memmove+0x28>
 801589e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80158a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80158a6:	e7f8      	b.n	801589a <memmove+0x12>
 80158a8:	4402      	add	r2, r0
 80158aa:	4601      	mov	r1, r0
 80158ac:	428a      	cmp	r2, r1
 80158ae:	d100      	bne.n	80158b2 <memmove+0x2a>
 80158b0:	bd10      	pop	{r4, pc}
 80158b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80158b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80158ba:	e7f7      	b.n	80158ac <memmove+0x24>

080158bc <_sbrk_r>:
 80158bc:	b538      	push	{r3, r4, r5, lr}
 80158be:	4d06      	ldr	r5, [pc, #24]	@ (80158d8 <_sbrk_r+0x1c>)
 80158c0:	2300      	movs	r3, #0
 80158c2:	4604      	mov	r4, r0
 80158c4:	4608      	mov	r0, r1
 80158c6:	602b      	str	r3, [r5, #0]
 80158c8:	f7eb ffd6 	bl	8001878 <_sbrk>
 80158cc:	1c43      	adds	r3, r0, #1
 80158ce:	d102      	bne.n	80158d6 <_sbrk_r+0x1a>
 80158d0:	682b      	ldr	r3, [r5, #0]
 80158d2:	b103      	cbz	r3, 80158d6 <_sbrk_r+0x1a>
 80158d4:	6023      	str	r3, [r4, #0]
 80158d6:	bd38      	pop	{r3, r4, r5, pc}
 80158d8:	24002c58 	.word	0x24002c58

080158dc <memcpy>:
 80158dc:	440a      	add	r2, r1
 80158de:	4291      	cmp	r1, r2
 80158e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80158e4:	d100      	bne.n	80158e8 <memcpy+0xc>
 80158e6:	4770      	bx	lr
 80158e8:	b510      	push	{r4, lr}
 80158ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80158f2:	4291      	cmp	r1, r2
 80158f4:	d1f9      	bne.n	80158ea <memcpy+0xe>
 80158f6:	bd10      	pop	{r4, pc}

080158f8 <_realloc_r>:
 80158f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158fc:	4607      	mov	r7, r0
 80158fe:	4614      	mov	r4, r2
 8015900:	460d      	mov	r5, r1
 8015902:	b921      	cbnz	r1, 801590e <_realloc_r+0x16>
 8015904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015908:	4611      	mov	r1, r2
 801590a:	f7ff bc4d 	b.w	80151a8 <_malloc_r>
 801590e:	b92a      	cbnz	r2, 801591c <_realloc_r+0x24>
 8015910:	f7ff fbde 	bl	80150d0 <_free_r>
 8015914:	4625      	mov	r5, r4
 8015916:	4628      	mov	r0, r5
 8015918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801591c:	f000 f81a 	bl	8015954 <_malloc_usable_size_r>
 8015920:	4284      	cmp	r4, r0
 8015922:	4606      	mov	r6, r0
 8015924:	d802      	bhi.n	801592c <_realloc_r+0x34>
 8015926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801592a:	d8f4      	bhi.n	8015916 <_realloc_r+0x1e>
 801592c:	4621      	mov	r1, r4
 801592e:	4638      	mov	r0, r7
 8015930:	f7ff fc3a 	bl	80151a8 <_malloc_r>
 8015934:	4680      	mov	r8, r0
 8015936:	b908      	cbnz	r0, 801593c <_realloc_r+0x44>
 8015938:	4645      	mov	r5, r8
 801593a:	e7ec      	b.n	8015916 <_realloc_r+0x1e>
 801593c:	42b4      	cmp	r4, r6
 801593e:	4622      	mov	r2, r4
 8015940:	4629      	mov	r1, r5
 8015942:	bf28      	it	cs
 8015944:	4632      	movcs	r2, r6
 8015946:	f7ff ffc9 	bl	80158dc <memcpy>
 801594a:	4629      	mov	r1, r5
 801594c:	4638      	mov	r0, r7
 801594e:	f7ff fbbf 	bl	80150d0 <_free_r>
 8015952:	e7f1      	b.n	8015938 <_realloc_r+0x40>

08015954 <_malloc_usable_size_r>:
 8015954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015958:	1f18      	subs	r0, r3, #4
 801595a:	2b00      	cmp	r3, #0
 801595c:	bfbc      	itt	lt
 801595e:	580b      	ldrlt	r3, [r1, r0]
 8015960:	18c0      	addlt	r0, r0, r3
 8015962:	4770      	bx	lr

08015964 <_init>:
 8015964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015966:	bf00      	nop
 8015968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801596a:	bc08      	pop	{r3}
 801596c:	469e      	mov	lr, r3
 801596e:	4770      	bx	lr

08015970 <_fini>:
 8015970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015972:	bf00      	nop
 8015974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015976:	bc08      	pop	{r3}
 8015978:	469e      	mov	lr, r3
 801597a:	4770      	bx	lr
