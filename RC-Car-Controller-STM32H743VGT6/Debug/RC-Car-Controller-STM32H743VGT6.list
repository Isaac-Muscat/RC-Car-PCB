
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016478  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08016718  08016718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016cf8  08016cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016d00  08016d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016d04  08016d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  08016d08  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b2c  24000154  08016e5c  00018154  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002c80  08016e5c  00018c80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00018154  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aa56  00000000  00000000  00018182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050cb  00000000  00000000  00042bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e90  00000000  00000000  00047ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017a3  00000000  00000000  00049b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d852  00000000  00000000  0004b2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c4e6  00000000  00000000  00088b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001782bb  00000000  00000000  000b5013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022d2ce  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008824  00000000  00000000  0022d314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00235b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016700 	.word	0x08016700

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	08016700 	.word	0x08016700

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f000 fc6d 	bl	8000fa0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f001 fad9 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8d5 	bl	8000878 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 f94d 	bl	800096c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fb8f 	bl	8000df4 <MX_GPIO_Init>
  MX_MDMA_Init();
 80006d6:	f000 fb6d 	bl	8000db4 <MX_MDMA_Init>
  MX_DMA_Init();
 80006da:	f000 fb3b 	bl	8000d54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006de:	f000 faed 	bl	8000cbc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006e2:	f014 fe1d 	bl	8015320 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 80006e6:	f000 fa7f 	bl	8000be8 <MX_JPEG_Init>
  MX_I2C1_Init();
 80006ea:	f000 f9fd 	bl	8000ae8 <MX_I2C1_Init>
  MX_SPI4_Init();
 80006ee:	f000 fa8f 	bl	8000c10 <MX_SPI4_Init>
  MX_ADC1_Init();
 80006f2:	f000 f96d 	bl	80009d0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80006f6:	f000 fa37 	bl	8000b68 <MX_I2C2_Init>

  //HAL_Delay(3000);

  // ------------------------------------------------------------ SETUP ADC DMA -- //

  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	494c      	ldr	r1, [pc, #304]	@ (8000830 <main+0x174>)
 80006fe:	484d      	ldr	r0, [pc, #308]	@ (8000834 <main+0x178>)
 8000700:	f001 ff3a 	bl	8002578 <HAL_ADC_Start_DMA>

  // ------------------------------------------------------------ SETUP SSD1306 -- //

  hssd1.i2c_handle = &hi2c2;
 8000704:	4b4c      	ldr	r3, [pc, #304]	@ (8000838 <main+0x17c>)
 8000706:	4a4d      	ldr	r2, [pc, #308]	@ (800083c <main+0x180>)
 8000708:	601a      	str	r2, [r3, #0]
  hssd1.address = OLED_ADDR;
 800070a:	4b4b      	ldr	r3, [pc, #300]	@ (8000838 <main+0x17c>)
 800070c:	223c      	movs	r2, #60	@ 0x3c
 800070e:	711a      	strb	r2, [r3, #4]
  hssd1.vram = ssd1_vram;
 8000710:	4b49      	ldr	r3, [pc, #292]	@ (8000838 <main+0x17c>)
 8000712:	4a4b      	ldr	r2, [pc, #300]	@ (8000840 <main+0x184>)
 8000714:	609a      	str	r2, [r3, #8]
  uint8_t ssd_initres = SSD1306_Init(&hssd1);
 8000716:	4848      	ldr	r0, [pc, #288]	@ (8000838 <main+0x17c>)
 8000718:	f001 f9d0 	bl	8001abc <SSD1306_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	73fb      	strb	r3, [r7, #15]
  if (ssd_initres) {
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d013      	beq.n	800074e <main+0x92>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", ssd_initres);
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	461a      	mov	r2, r3
 800072a:	4946      	ldr	r1, [pc, #280]	@ (8000844 <main+0x188>)
 800072c:	4846      	ldr	r0, [pc, #280]	@ (8000848 <main+0x18c>)
 800072e:	f015 fb47 	bl	8015dc0 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000732:	4845      	ldr	r0, [pc, #276]	@ (8000848 <main+0x18c>)
 8000734:	f7ff fdd4 	bl	80002e0 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	4619      	mov	r1, r3
 800073c:	4842      	ldr	r0, [pc, #264]	@ (8000848 <main+0x18c>)
 800073e:	f014 febf 	bl	80154c0 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 8000742:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000746:	f001 fb2b 	bl	8001da0 <HAL_Delay>
	  while (1) {
 800074a:	bf00      	nop
 800074c:	e7eb      	b.n	8000726 <main+0x6a>
	  }
  }

  hssd2.i2c_handle = &hi2c1;
 800074e:	4b3f      	ldr	r3, [pc, #252]	@ (800084c <main+0x190>)
 8000750:	4a3f      	ldr	r2, [pc, #252]	@ (8000850 <main+0x194>)
 8000752:	601a      	str	r2, [r3, #0]
  hssd2.address = OLED_ADDR;
 8000754:	4b3d      	ldr	r3, [pc, #244]	@ (800084c <main+0x190>)
 8000756:	223c      	movs	r2, #60	@ 0x3c
 8000758:	711a      	strb	r2, [r3, #4]
  hssd2.vram = ssd2_vram;
 800075a:	4b3c      	ldr	r3, [pc, #240]	@ (800084c <main+0x190>)
 800075c:	4a3d      	ldr	r2, [pc, #244]	@ (8000854 <main+0x198>)
 800075e:	609a      	str	r2, [r3, #8]
  ssd_initres = SSD1306_Init(&hssd2);
 8000760:	483a      	ldr	r0, [pc, #232]	@ (800084c <main+0x190>)
 8000762:	f001 f9ab 	bl	8001abc <SSD1306_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
  if (ssd_initres) {
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d013      	beq.n	8000798 <main+0xdc>
	  while (1) {
		  sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", ssd_initres);
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	461a      	mov	r2, r3
 8000774:	4938      	ldr	r1, [pc, #224]	@ (8000858 <main+0x19c>)
 8000776:	4834      	ldr	r0, [pc, #208]	@ (8000848 <main+0x18c>)
 8000778:	f015 fb22 	bl	8015dc0 <siprintf>
		  CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800077c:	4832      	ldr	r0, [pc, #200]	@ (8000848 <main+0x18c>)
 800077e:	f7ff fdaf 	bl	80002e0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	4619      	mov	r1, r3
 8000786:	4830      	ldr	r0, [pc, #192]	@ (8000848 <main+0x18c>)
 8000788:	f014 fe9a 	bl	80154c0 <CDC_Transmit_FS>
		  HAL_Delay(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000790:	f001 fb06 	bl	8001da0 <HAL_Delay>
	  while (1) {
 8000794:	bf00      	nop
 8000796:	e7eb      	b.n	8000770 <main+0xb4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(2000);
 8000798:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800079c:	f001 fb00 	bl	8001da0 <HAL_Delay>

	  sprintf(ssd_msg, " Writing to XBEE...");
 80007a0:	492e      	ldr	r1, [pc, #184]	@ (800085c <main+0x1a0>)
 80007a2:	482f      	ldr	r0, [pc, #188]	@ (8000860 <main+0x1a4>)
 80007a4:	f015 fb0c 	bl	8015dc0 <siprintf>
	  WriteDebug(ssd_msg, strlen(ssd_msg));
 80007a8:	482d      	ldr	r0, [pc, #180]	@ (8000860 <main+0x1a4>)
 80007aa:	f7ff fd99 	bl	80002e0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	482a      	ldr	r0, [pc, #168]	@ (8000860 <main+0x1a4>)
 80007b6:	f000 fbcd 	bl	8000f54 <WriteDebug>

	  uint8_t at_enter[] = "+++";
 80007ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <main+0x1a8>)
 80007bc:	60bb      	str	r3, [r7, #8]
	  uint8_t at_test[] = "AT\r";
 80007be:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <main+0x1ac>)
 80007c0:	607b      	str	r3, [r7, #4]
	  uint8_t recv_buf[2] = {0};
 80007c2:	2300      	movs	r3, #0
 80007c4:	803b      	strh	r3, [r7, #0]
	  HAL_UART_Transmit(&huart1, at_enter, 3, 1000);
 80007c6:	f107 0108 	add.w	r1, r7, #8
 80007ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ce:	2203      	movs	r2, #3
 80007d0:	4826      	ldr	r0, [pc, #152]	@ (800086c <main+0x1b0>)
 80007d2:	f00f fc1e 	bl	8010012 <HAL_UART_Transmit>
	  //HAL_Delay(3000);
	  //HAL_UART_Transmit(&huart1, at_test, strlen(at_test), 1000);
	  if (HAL_UART_Receive(&huart1, recv_buf, 2, 6000)) {
 80007d6:	4639      	mov	r1, r7
 80007d8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80007dc:	2202      	movs	r2, #2
 80007de:	4823      	ldr	r0, [pc, #140]	@ (800086c <main+0x1b0>)
 80007e0:	f00f fca5 	bl	801012e <HAL_UART_Receive>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00d      	beq.n	8000806 <main+0x14a>
		  sprintf(ssd_msg, " READ TIMEOUT");
 80007ea:	4921      	ldr	r1, [pc, #132]	@ (8000870 <main+0x1b4>)
 80007ec:	481c      	ldr	r0, [pc, #112]	@ (8000860 <main+0x1a4>)
 80007ee:	f015 fae7 	bl	8015dc0 <siprintf>
		  WriteDebug(ssd_msg, strlen(ssd_msg));
 80007f2:	481b      	ldr	r0, [pc, #108]	@ (8000860 <main+0x1a4>)
 80007f4:	f7ff fd74 	bl	80002e0 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	4818      	ldr	r0, [pc, #96]	@ (8000860 <main+0x1a4>)
 8000800:	f000 fba8 	bl	8000f54 <WriteDebug>
 8000804:	e00f      	b.n	8000826 <main+0x16a>
	  } else {
		  sprintf(ssd_msg, " GOT: %c%c", recv_buf[0], recv_buf[1]);
 8000806:	783b      	ldrb	r3, [r7, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	787b      	ldrb	r3, [r7, #1]
 800080c:	4919      	ldr	r1, [pc, #100]	@ (8000874 <main+0x1b8>)
 800080e:	4814      	ldr	r0, [pc, #80]	@ (8000860 <main+0x1a4>)
 8000810:	f015 fad6 	bl	8015dc0 <siprintf>
		  WriteDebug(ssd_msg, strlen(ssd_msg));
 8000814:	4812      	ldr	r0, [pc, #72]	@ (8000860 <main+0x1a4>)
 8000816:	f7ff fd63 	bl	80002e0 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	480f      	ldr	r0, [pc, #60]	@ (8000860 <main+0x1a4>)
 8000822:	f000 fb97 	bl	8000f54 <WriteDebug>
	  }

	  HAL_Delay(1000);
 8000826:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800082a:	f001 fab9 	bl	8001da0 <HAL_Delay>
  {
 800082e:	e7b3      	b.n	8000798 <main+0xdc>
 8000830:	24000f18 	.word	0x24000f18
 8000834:	24000170 	.word	0x24000170
 8000838:	24000630 	.word	0x24000630
 800083c:	240002a0 	.word	0x240002a0
 8000840:	24000650 	.word	0x24000650
 8000844:	08016718 	.word	0x08016718
 8000848:	24000eb4 	.word	0x24000eb4
 800084c:	24000640 	.word	0x24000640
 8000850:	2400024c 	.word	0x2400024c
 8000854:	24000a50 	.word	0x24000a50
 8000858:	08016734 	.word	0x08016734
 800085c:	08016750 	.word	0x08016750
 8000860:	24000e50 	.word	0x24000e50
 8000864:	002b2b2b 	.word	0x002b2b2b
 8000868:	000d5441 	.word	0x000d5441
 800086c:	2400059c 	.word	0x2400059c
 8000870:	08016764 	.word	0x08016764
 8000874:	08016774 	.word	0x08016774

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	@ 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	224c      	movs	r2, #76	@ 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f015 fabc 	bl	8015e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f015 fab6 	bl	8015e04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000898:	2002      	movs	r0, #2
 800089a:	f00b fcfd 	bl	800c298 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <SystemClock_Config+0xec>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a6:	4a2f      	ldr	r2, [pc, #188]	@ (8000964 <SystemClock_Config+0xec>)
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <SystemClock_Config+0xec>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <SystemClock_Config+0xf0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000968 <SystemClock_Config+0xf0>)
 80008be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <SystemClock_Config+0xf0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d0:	bf00      	nop
 80008d2:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <SystemClock_Config+0xf0>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008de:	d1f8      	bne.n	80008d2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008f6:	2318      	movs	r3, #24
 80008f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008fe:	2306      	movs	r3, #6
 8000900:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000906:	230c      	movs	r3, #12
 8000908:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800090a:	2300      	movs	r3, #0
 800090c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000916:	4618      	mov	r0, r3
 8000918:	f00b fd08 	bl	800c32c <HAL_RCC_OscConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000922:	f000 fb69 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	233f      	movs	r3, #63	@ 0x3f
 8000928:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2303      	movs	r3, #3
 800092c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000936:	2340      	movs	r3, #64	@ 0x40
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800093a:	2340      	movs	r3, #64	@ 0x40
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800093e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f00c f947 	bl	800cbe0 <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000958:	f000 fb4e 	bl	8000ff8 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3770      	adds	r7, #112	@ 0x70
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	58000400 	.word	0x58000400
 8000968:	58024800 	.word	0x58024800

0800096c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0b0      	sub	sp, #192	@ 0xc0
 8000970:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	22c0      	movs	r2, #192	@ 0xc0
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f015 fa43 	bl	8015e04 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 800097e:	f04f 0208 	mov.w	r2, #8
 8000982:	f04f 0300 	mov.w	r3, #0
 8000986:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 800098e:	230c      	movs	r3, #12
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000992:	2302      	movs	r3, #2
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 800099a:	2303      	movs	r3, #3
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800099e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80009a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a8:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80009ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	4618      	mov	r0, r3
 80009ba:	f00c fc9d 	bl	800d2f8 <HAL_RCCEx_PeriphCLKConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80009c4:	f000 fb18 	bl	8000ff8 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	37c0      	adds	r7, #192	@ 0xc0
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f4:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 80009f6:	4a39      	ldr	r2, [pc, #228]	@ (8000adc <MX_ADC1_Init+0x10c>)
 80009f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80009fa:	4b37      	ldr	r3, [pc, #220]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 80009fc:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000a00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a02:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a08:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a10:	2208      	movs	r2, #8
 8000a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a14:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000a20:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a38:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a58:	481f      	ldr	r0, [pc, #124]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a5a:	f001 fbeb 	bl	8002234 <HAL_ADC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a64:	f000 fac8 	bl	8000ff8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4819      	ldr	r0, [pc, #100]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000a74:	f002 fb98 	bl	80031a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a7e:	f000 fabb 	bl	8000ff8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_ADC1_Init+0x110>)
 8000a84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a86:	2306      	movs	r3, #6
 8000a88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a92:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a94:	2304      	movs	r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000aa6:	f001 fe3f 	bl	8002728 <HAL_ADC_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ab0:	f000 faa2 	bl	8000ff8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_ADC1_Init+0x114>)
 8000ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_ADC1_Init+0x108>)
 8000ac2:	f001 fe31 	bl	8002728 <HAL_ADC_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000acc:	f000 fa94 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	24000170 	.word	0x24000170
 8000adc:	40022000 	.word	0x40022000
 8000ae0:	0c900008 	.word	0x0c900008
 8000ae4:	10c00010 	.word	0x10c00010

08000ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	@ (8000b60 <MX_I2C1_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <MX_I2C1_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b22:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b24:	f005 fdac 	bl	8006680 <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b2e:	f000 fa63 	bl	8000ff8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b36:	f008 f9dd 	bl	8008ef4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 fa5a 	bl	8000ff8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b48:	f008 fa1f 	bl	8008f8a <HAL_I2CEx_ConfigDigitalFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 fa51 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2400024c 	.word	0x2400024c
 8000b60:	40005400 	.word	0x40005400
 8000b64:	00401959 	.word	0x00401959

08000b68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <MX_I2C2_Init+0x78>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <MX_I2C2_Init+0x7c>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000ba4:	f005 fd6c 	bl	8006680 <HAL_I2C_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bae:	f000 fa23 	bl	8000ff8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000bb6:	f008 f99d 	bl	8008ef4 <HAL_I2CEx_ConfigAnalogFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f000 fa1a 	bl	8000ff8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_I2C2_Init+0x74>)
 8000bc8:	f008 f9df 	bl	8008f8a <HAL_I2CEx_ConfigDigitalFilter>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 fa11 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002a0 	.word	0x240002a0
 8000be0:	40005800 	.word	0x40005800
 8000be4:	00401959 	.word	0x00401959

08000be8 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_JPEG_Init+0x20>)
 8000bee:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <MX_JPEG_Init+0x24>)
 8000bf0:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_JPEG_Init+0x20>)
 8000bf4:	f008 fa16 	bl	8009024 <HAL_JPEG_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000bfe:	f000 f9fb 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	240003e4 	.word	0x240003e4
 8000c0c:	52003000 	.word	0x52003000

08000c10 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c14:	4b27      	ldr	r3, [pc, #156]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c16:	4a28      	ldr	r2, [pc, #160]	@ (8000cb8 <MX_SPI4_Init+0xa8>)
 8000c18:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c1a:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c1c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c20:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c22:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c3c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c40:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c66:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_SPI4_Init+0xa4>)
 8000ca0:	f00f f828 	bl	800fcf4 <HAL_SPI_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000caa:	f000 f9a5 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000514 	.word	0x24000514
 8000cb8:	40013400 	.word	0x40013400

08000cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000cc2:	4a23      	ldr	r2, [pc, #140]	@ (8000d50 <MX_USART1_UART_Init+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000cc8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000d06:	f00f f934 	bl	800ff72 <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 f972 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000d18:	f010 fee4 	bl	8011ae4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f969 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000d2a:	f010 ff19 	bl	8011b60 <HAL_UARTEx_SetRxFifoThreshold>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 f960 	bl	8000ff8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_USART1_UART_Init+0x90>)
 8000d3a:	f010 fe9a 	bl	8011a72 <HAL_UARTEx_DisableFifoMode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 f958 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2400059c 	.word	0x2400059c
 8000d50:	40011000 	.word	0x40011000

08000d54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_DMA_Init+0x5c>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d60:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <MX_DMA_Init+0x5c>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d6a:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <MX_DMA_Init+0x5c>)
 8000d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	200b      	movs	r0, #11
 8000d7e:	f002 fbcc 	bl	800351a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d82:	200b      	movs	r0, #11
 8000d84:	f002 fbe3 	bl	800354e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	200c      	movs	r0, #12
 8000d8e:	f002 fbc4 	bl	800351a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d92:	200c      	movs	r0, #12
 8000d94:	f002 fbdb 	bl	800354e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	200d      	movs	r0, #13
 8000d9e:	f002 fbbc 	bl	800351a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000da2:	200d      	movs	r0, #13
 8000da4:	f002 fbd3 	bl	800354e <HAL_NVIC_EnableIRQ>

}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	58024400 	.word	0x58024400

08000db4 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <MX_MDMA_Init+0x3c>)
 8000dbc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <MX_MDMA_Init+0x3c>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_MDMA_Init+0x3c>)
 8000dcc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	207a      	movs	r0, #122	@ 0x7a
 8000dde:	f002 fb9c 	bl	800351a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000de2:	207a      	movs	r0, #122	@ 0x7a
 8000de4:	f002 fbb3 	bl	800354e <HAL_NVIC_EnableIRQ>

}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58024400 	.word	0x58024400

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a31      	ldr	r2, [pc, #196]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e28:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	4a22      	ldr	r2, [pc, #136]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e88:	4a13      	ldr	r2, [pc, #76]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_GPIO_Init+0xe4>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BTN_L_Pin */
  GPIO_InitStruct.Pin = BTN_L_Pin;
 8000ea0:	2320      	movs	r3, #32
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_L_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480a      	ldr	r0, [pc, #40]	@ (8000edc <MX_GPIO_Init+0xe8>)
 8000eb4:	f005 fa34 	bl	8006320 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_R_Pin */
  GPIO_InitStruct.Pin = BTN_R_Pin;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_R_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_GPIO_Init+0xec>)
 8000ecc:	f005 fa28 	bl	8006320 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	58020800 	.word	0x58020800

08000ee4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	adc_average[0] = 0;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_ADC_ConvCpltCallback+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	801a      	strh	r2, [r3, #0]
	adc_average[1] = 0;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_ADC_ConvCpltCallback+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < 20; i++) {
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e019      	b.n	8000f32 <HAL_ADC_ConvCpltCallback+0x4e>
		// Have to pre-divide so the result fits in a uint16
		adc_average[i%2] += adc_buffer[i]/10;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	bfb8      	it	lt
 8000f08:	425b      	neglt	r3, r3
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_ADC_ConvCpltCallback+0x64>)
 8000f0c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000f10:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <HAL_ADC_ConvCpltCallback+0x68>)
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8000f18:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f1a:	fba0 0202 	umull	r0, r2, r0, r2
 8000f1e:	08d2      	lsrs	r2, r2, #3
 8000f20:	b292      	uxth	r2, r2
 8000f22:	440a      	add	r2, r1
 8000f24:	b291      	uxth	r1, r2
 8000f26:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <HAL_ADC_ConvCpltCallback+0x64>)
 8000f28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 20; i++) {
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b13      	cmp	r3, #19
 8000f36:	dde2      	ble.n	8000efe <HAL_ADC_ConvCpltCallback+0x1a>

	// present it
	//sprintf(usb_msg, "%d, %d\r\n", adc_average[0], adc_average[1]);
	//CDC_Transmit_FS(usb_msg, strlen(usb_msg));
	//HAL_Delay(50);
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	24000f40 	.word	0x24000f40
 8000f4c:	24000f18 	.word	0x24000f18
 8000f50:	cccccccd 	.word	0xcccccccd

08000f54 <WriteDebug>:

// TEMP
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
	  SSD1306_Clear(&hssd1);
 8000f60:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <WriteDebug+0x44>)
 8000f62:	f000 fdf1 	bl	8001b48 <SSD1306_Clear>
	  SSD1306_Clear(&hssd2);
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <WriteDebug+0x48>)
 8000f68:	f000 fdee 	bl	8001b48 <SSD1306_Clear>
	  SSD1306_DrawString(&hssd1, str_ptr, str_len);
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <WriteDebug+0x44>)
 8000f74:	f000 fe5a 	bl	8001c2c <SSD1306_DrawString>
	  SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <WriteDebug+0x48>)
 8000f80:	f000 fe54 	bl	8001c2c <SSD1306_DrawString>
	  SSD1306_Update(&hssd1);
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <WriteDebug+0x44>)
 8000f86:	f000 fdf3 	bl	8001b70 <SSD1306_Update>
	  SSD1306_Update(&hssd2);
 8000f8a:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <WriteDebug+0x48>)
 8000f8c:	f000 fdf0 	bl	8001b70 <SSD1306_Update>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	24000630 	.word	0x24000630
 8000f9c:	24000640 	.word	0x24000640

08000fa0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fb2:	f002 fae7 	bl	8003584 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fc6:	2387      	movs	r3, #135	@ 0x87
 8000fc8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fb05 	bl	80035f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fea:	2004      	movs	r0, #4
 8000fec:	f002 fae2 	bl	80035b4 <HAL_MPU_Enable>

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <Error_Handler+0x8>

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_MspInit+0x30>)
 800100c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001010:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <HAL_MspInit+0x30>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_MspInit+0x30>)
 800101c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	58024400 	.word	0x58024400

08001038 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0bc      	sub	sp, #240	@ 0xf0
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	22c0      	movs	r2, #192	@ 0xc0
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f014 fed3 	bl	8015e04 <memset>
  if(hadc->Instance==ADC1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a53      	ldr	r2, [pc, #332]	@ (80011b0 <HAL_ADC_MspInit+0x178>)
 8001064:	4293      	cmp	r3, r2
 8001066:	f040 809f 	bne.w	80011a8 <HAL_ADC_MspInit+0x170>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800106a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 8001076:	2310      	movs	r3, #16
 8001078:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 20;
 800107e:	2314      	movs	r3, #20
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001086:	2302      	movs	r3, #2
 8001088:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800108e:	2300      	movs	r3, #0
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00c f929 	bl	800d2f8 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80010ac:	f7ff ffa4 	bl	8000ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010b0:	4b40      	ldr	r3, [pc, #256]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010b6:	4a3f      	ldr	r2, [pc, #252]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010c0:	4b3c      	ldr	r3, [pc, #240]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b39      	ldr	r3, [pc, #228]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d4:	4a37      	ldr	r2, [pc, #220]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010de:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f2:	4a30      	ldr	r2, [pc, #192]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010fc:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <HAL_ADC_MspInit+0x17c>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 800110a:	2340      	movs	r3, #64	@ 0x40
 800110c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001110:	2303      	movs	r3, #3
 8001112:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001120:	4619      	mov	r1, r3
 8001122:	4825      	ldr	r0, [pc, #148]	@ (80011b8 <HAL_ADC_MspInit+0x180>)
 8001124:	f005 f8fc 	bl	8006320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001128:	2310      	movs	r3, #16
 800112a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800113e:	4619      	mov	r1, r3
 8001140:	481e      	ldr	r0, [pc, #120]	@ (80011bc <HAL_ADC_MspInit+0x184>)
 8001142:	f005 f8ed 	bl	8006320 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001146:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 8001148:	4a1e      	ldr	r2, [pc, #120]	@ (80011c4 <HAL_ADC_MspInit+0x18c>)
 800114a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800114c:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 800114e:	2209      	movs	r2, #9
 8001150:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 8001160:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001164:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 8001168:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800116c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 8001170:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001174:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 8001178:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800117c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 8001180:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001184:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 800118e:	f002 fa71 	bl	8003674 <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001198:	f7ff ff2e 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 80011a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011a2:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_ADC_MspInit+0x188>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011a8:	bf00      	nop
 80011aa:	37f0      	adds	r7, #240	@ 0xf0
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40022000 	.word	0x40022000
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020000 	.word	0x58020000
 80011bc:	58020800 	.word	0x58020800
 80011c0:	240001d4 	.word	0x240001d4
 80011c4:	40020010 	.word	0x40020010

080011c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	@ 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a73      	ldr	r2, [pc, #460]	@ (80013b4 <HAL_I2C_MspInit+0x1ec>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d16d      	bne.n	80012c6 <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b73      	ldr	r3, [pc, #460]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	4a71      	ldr	r2, [pc, #452]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fa:	4b6f      	ldr	r3, [pc, #444]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001208:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120e:	2312      	movs	r3, #18
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121a:	2304      	movs	r3, #4
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4865      	ldr	r0, [pc, #404]	@ (80013bc <HAL_I2C_MspInit+0x1f4>)
 8001226:	f005 f87b 	bl	8006320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122a:	4b63      	ldr	r3, [pc, #396]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 800122c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001230:	4a61      	ldr	r2, [pc, #388]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 8001232:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001236:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800123a:	4b5f      	ldr	r3, [pc, #380]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 800123c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001248:	4b5d      	ldr	r3, [pc, #372]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 800124a:	4a5e      	ldr	r2, [pc, #376]	@ (80013c4 <HAL_I2C_MspInit+0x1fc>)
 800124c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800124e:	4b5c      	ldr	r3, [pc, #368]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 8001250:	2222      	movs	r2, #34	@ 0x22
 8001252:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001254:	4b5a      	ldr	r3, [pc, #360]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 8001256:	2240      	movs	r2, #64	@ 0x40
 8001258:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125a:	4b59      	ldr	r3, [pc, #356]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001260:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 8001262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001266:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001268:	4b55      	ldr	r3, [pc, #340]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126e:	4b54      	ldr	r3, [pc, #336]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001274:	4b52      	ldr	r3, [pc, #328]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800127a:	4b51      	ldr	r3, [pc, #324]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 800127c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001280:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001282:	4b4f      	ldr	r3, [pc, #316]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001288:	484d      	ldr	r0, [pc, #308]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 800128a:	f002 f9f3 	bl	8003674 <HAL_DMA_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001294:	f7ff feb0 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a49      	ldr	r2, [pc, #292]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 800129c:	639a      	str	r2, [r3, #56]	@ 0x38
 800129e:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <HAL_I2C_MspInit+0x1f8>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	201f      	movs	r0, #31
 80012aa:	f002 f936 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012ae:	201f      	movs	r0, #31
 80012b0:	f002 f94d 	bl	800354e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2020      	movs	r0, #32
 80012ba:	f002 f92e 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012be:	2020      	movs	r0, #32
 80012c0:	f002 f945 	bl	800354e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012c4:	e071      	b.n	80013aa <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a3f      	ldr	r2, [pc, #252]	@ (80013c8 <HAL_I2C_MspInit+0x200>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d16c      	bne.n	80013aa <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b39      	ldr	r3, [pc, #228]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	4a38      	ldr	r2, [pc, #224]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e0:	4b35      	ldr	r3, [pc, #212]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f4:	2312      	movs	r3, #18
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001300:	2304      	movs	r3, #4
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	482c      	ldr	r0, [pc, #176]	@ (80013bc <HAL_I2C_MspInit+0x1f4>)
 800130c:	f005 f808 	bl	8006320 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001310:	4b29      	ldr	r3, [pc, #164]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 8001312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001316:	4a28      	ldr	r2, [pc, #160]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 8001318:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800131c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001320:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <HAL_I2C_MspInit+0x1f0>)
 8001322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 800132e:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001330:	4a27      	ldr	r2, [pc, #156]	@ (80013d0 <HAL_I2C_MspInit+0x208>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001336:	2224      	movs	r2, #36	@ 0x24
 8001338:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 800133c:	2240      	movs	r2, #64	@ 0x40
 800133e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001348:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800134c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134e:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001362:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001366:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800136e:	4817      	ldr	r0, [pc, #92]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001370:	f002 f980 	bl	8003674 <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 800137a:	f7ff fe3d 	bl	8000ff8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001382:	639a      	str	r2, [r3, #56]	@ 0x38
 8001384:	4a11      	ldr	r2, [pc, #68]	@ (80013cc <HAL_I2C_MspInit+0x204>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2021      	movs	r0, #33	@ 0x21
 8001390:	f002 f8c3 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001394:	2021      	movs	r0, #33	@ 0x21
 8001396:	f002 f8da 	bl	800354e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2022      	movs	r0, #34	@ 0x22
 80013a0:	f002 f8bb 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80013a4:	2022      	movs	r0, #34	@ 0x22
 80013a6:	f002 f8d2 	bl	800354e <HAL_NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	@ 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40005400 	.word	0x40005400
 80013b8:	58024400 	.word	0x58024400
 80013bc:	58020400 	.word	0x58020400
 80013c0:	240002f4 	.word	0x240002f4
 80013c4:	40020040 	.word	0x40020040
 80013c8:	40005800 	.word	0x40005800
 80013cc:	2400036c 	.word	0x2400036c
 80013d0:	40020028 	.word	0x40020028

080013d4 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a55      	ldr	r2, [pc, #340]	@ (8001538 <HAL_JPEG_MspInit+0x164>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	f040 80a3 	bne.w	800152e <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80013e8:	4b54      	ldr	r3, [pc, #336]	@ (800153c <HAL_JPEG_MspInit+0x168>)
 80013ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013ee:	4a53      	ldr	r2, [pc, #332]	@ (800153c <HAL_JPEG_MspInit+0x168>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80013f8:	4b50      	ldr	r3, [pc, #320]	@ (800153c <HAL_JPEG_MspInit+0x168>)
 80013fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001406:	4b4e      	ldr	r3, [pc, #312]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001408:	4a4e      	ldr	r2, [pc, #312]	@ (8001544 <HAL_JPEG_MspInit+0x170>)
 800140a:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800140c:	4b4c      	ldr	r3, [pc, #304]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 800140e:	2211      	movs	r2, #17
 8001410:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001412:	4b4b      	ldr	r3, [pc, #300]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001418:	4b49      	ldr	r3, [pc, #292]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 800141a:	2240      	movs	r2, #64	@ 0x40
 800141c:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800141e:	4b48      	ldr	r3, [pc, #288]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001424:	4b46      	ldr	r3, [pc, #280]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001426:	2202      	movs	r2, #2
 8001428:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800142a:	4b45      	ldr	r3, [pc, #276]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001430:	4b43      	ldr	r3, [pc, #268]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001436:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001438:	2280      	movs	r2, #128	@ 0x80
 800143a:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800143c:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 800143e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001444:	4b3e      	ldr	r3, [pc, #248]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001446:	2220      	movs	r2, #32
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800144a:	4b3d      	ldr	r3, [pc, #244]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 800144c:	2200      	movs	r2, #0
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001450:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001452:	2200      	movs	r2, #0
 8001454:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001456:	4b3a      	ldr	r3, [pc, #232]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001458:	2200      	movs	r2, #0
 800145a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800145c:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 800145e:	2200      	movs	r2, #0
 8001460:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001462:	4837      	ldr	r0, [pc, #220]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001464:	f009 f9c6 	bl	800a7f4 <HAL_MDMA_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 800146e:	f7ff fdc3 	bl	8000ff8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	4832      	ldr	r0, [pc, #200]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 8001478:	f009 fa08 	bl	800a88c <HAL_MDMA_ConfigPostRequestMask>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001482:	f7ff fdb9 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a2d      	ldr	r2, [pc, #180]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 800148a:	631a      	str	r2, [r3, #48]	@ 0x30
 800148c:	4a2c      	ldr	r2, [pc, #176]	@ (8001540 <HAL_JPEG_MspInit+0x16c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001492:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 8001494:	4a2d      	ldr	r2, [pc, #180]	@ (800154c <HAL_JPEG_MspInit+0x178>)
 8001496:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001498:	4b2b      	ldr	r3, [pc, #172]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 800149a:	2214      	movs	r2, #20
 800149c:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 800149e:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 80014a4:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014a6:	2240      	movs	r2, #64	@ 0x40
 80014a8:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80014aa:	4b27      	ldr	r3, [pc, #156]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80014b0:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 80014b6:	4b24      	ldr	r3, [pc, #144]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014b8:	2208      	movs	r2, #8
 80014ba:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014bc:	4b22      	ldr	r3, [pc, #136]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014be:	2220      	movs	r2, #32
 80014c0:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014d8:	2200      	movs	r2, #0
 80014da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014de:	2200      	movs	r2, #0
 80014e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 80014ee:	4816      	ldr	r0, [pc, #88]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 80014f0:	f009 f980 	bl	800a7f4 <HAL_MDMA_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 80014fa:	f7ff fd7d 	bl	8000ff8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	4811      	ldr	r0, [pc, #68]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 8001504:	f009 f9c2 	bl	800a88c <HAL_MDMA_ConfigPostRequestMask>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 800150e:	f7ff fd73 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a0c      	ldr	r2, [pc, #48]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
 8001518:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <HAL_JPEG_MspInit+0x174>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2079      	movs	r0, #121	@ 0x79
 8001524:	f001 fff9 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001528:	2079      	movs	r0, #121	@ 0x79
 800152a:	f002 f810 	bl	800354e <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	52003000 	.word	0x52003000
 800153c:	58024400 	.word	0x58024400
 8001540:	2400043c 	.word	0x2400043c
 8001544:	52000040 	.word	0x52000040
 8001548:	240004a8 	.word	0x240004a8
 800154c:	52000080 	.word	0x52000080

08001550 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0ba      	sub	sp, #232	@ 0xe8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	22c0      	movs	r2, #192	@ 0xc0
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f014 fc47 	bl	8015e04 <memset>
  if(hspi->Instance==SPI4)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a26      	ldr	r2, [pc, #152]	@ (8001614 <HAL_SPI_MspInit+0xc4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d144      	bne.n	800160a <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4618      	mov	r0, r3
 8001596:	f00b feaf 	bl	800d2f8 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80015a0:	f7ff fd2a 	bl	8000ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <HAL_SPI_MspInit+0xc8>)
 80015a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001618 <HAL_SPI_MspInit+0xc8>)
 80015ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <HAL_SPI_MspInit+0xc8>)
 80015b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_SPI_MspInit+0xc8>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c8:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <HAL_SPI_MspInit+0xc8>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_SPI_MspInit+0xc8>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80015e0:	2364      	movs	r3, #100	@ 0x64
 80015e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015f8:	2305      	movs	r3, #5
 80015fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <HAL_SPI_MspInit+0xcc>)
 8001606:	f004 fe8b 	bl	8006320 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800160a:	bf00      	nop
 800160c:	37e8      	adds	r7, #232	@ 0xe8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40013400 	.word	0x40013400
 8001618:	58024400 	.word	0x58024400
 800161c:	58021000 	.word	0x58021000

08001620 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0ba      	sub	sp, #232	@ 0xe8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	22c0      	movs	r2, #192	@ 0xc0
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f014 fbdf 	bl	8015e04 <memset>
  if(huart->Instance==USART1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2b      	ldr	r2, [pc, #172]	@ (80016f8 <HAL_UART_MspInit+0xd8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d14e      	bne.n	80016ee <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001650:	f04f 0201 	mov.w	r2, #1
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4618      	mov	r0, r3
 8001668:	f00b fe46 	bl	800d2f8 <HAL_RCCEx_PeriphCLKConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001672:	f7ff fcc1 	bl	8000ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <HAL_UART_MspInit+0xdc>)
 8001678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800167c:	4a1f      	ldr	r2, [pc, #124]	@ (80016fc <HAL_UART_MspInit+0xdc>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <HAL_UART_MspInit+0xdc>)
 8001688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800168c:	f003 0310 	and.w	r3, r3, #16
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_UART_MspInit+0xdc>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169a:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <HAL_UART_MspInit+0xdc>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_UART_MspInit+0xdc>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016b2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80016cc:	2304      	movs	r3, #4
 80016ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4809      	ldr	r0, [pc, #36]	@ (8001700 <HAL_UART_MspInit+0xe0>)
 80016da:	f004 fe21 	bl	8006320 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2025      	movs	r0, #37	@ 0x25
 80016e4:	f001 ff19 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016e8:	2025      	movs	r0, #37	@ 0x25
 80016ea:	f001 ff30 	bl	800354e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016ee:	bf00      	nop
 80016f0:	37e8      	adds	r7, #232	@ 0xe8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40011000 	.word	0x40011000
 80016fc:	58024400 	.word	0x58024400
 8001700:	58020400 	.word	0x58020400

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <NMI_Handler+0x4>

0800170c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <UsageFault_Handler+0x4>

0800172c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 fb01 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <DMA1_Stream0_IRQHandler+0x10>)
 800176a:	f003 faad 	bl	8004cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	240001d4 	.word	0x240001d4

08001778 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <DMA1_Stream1_IRQHandler+0x10>)
 800177e:	f003 faa3 	bl	8004cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2400036c 	.word	0x2400036c

0800178c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <DMA1_Stream2_IRQHandler+0x10>)
 8001792:	f003 fa99 	bl	8004cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	240002f4 	.word	0x240002f4

080017a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <I2C1_EV_IRQHandler+0x10>)
 80017a6:	f005 fa33 	bl	8006c10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2400024c 	.word	0x2400024c

080017b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <I2C1_ER_IRQHandler+0x10>)
 80017ba:	f005 fa43 	bl	8006c44 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2400024c 	.word	0x2400024c

080017c8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <I2C2_EV_IRQHandler+0x10>)
 80017ce:	f005 fa1f 	bl	8006c10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	240002a0 	.word	0x240002a0

080017dc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <I2C2_ER_IRQHandler+0x10>)
 80017e2:	f005 fa2f 	bl	8006c44 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	240002a0 	.word	0x240002a0

080017f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <USART1_IRQHandler+0x10>)
 80017f6:	f00e fd63 	bl	80102c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2400059c 	.word	0x2400059c

08001804 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <OTG_FS_IRQHandler+0x10>)
 800180a:	f009 fbe6 	bl	800afda <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	24002434 	.word	0x24002434

08001818 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <JPEG_IRQHandler+0x10>)
 800181e:	f007 fda6 	bl	800936e <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	240003e4 	.word	0x240003e4

0800182c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <MDMA_IRQHandler+0x14>)
 8001832:	f009 f8a5 	bl	800a980 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8001836:	4803      	ldr	r0, [pc, #12]	@ (8001844 <MDMA_IRQHandler+0x18>)
 8001838:	f009 f8a2 	bl	800a980 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2400043c 	.word	0x2400043c
 8001844:	240004a8 	.word	0x240004a8

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f014 facc 	bl	8015e14 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	24080000 	.word	0x24080000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	24000f48 	.word	0x24000f48
 80018b0:	24002c80 	.word	0x24002c80

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018b8:	4b43      	ldr	r3, [pc, #268]	@ (80019c8 <SystemInit+0x114>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018be:	4a42      	ldr	r2, [pc, #264]	@ (80019c8 <SystemInit+0x114>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018c8:	4b40      	ldr	r3, [pc, #256]	@ (80019cc <SystemInit+0x118>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	2b06      	cmp	r3, #6
 80018d2:	d807      	bhi.n	80018e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018d4:	4b3d      	ldr	r3, [pc, #244]	@ (80019cc <SystemInit+0x118>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 030f 	bic.w	r3, r3, #15
 80018dc:	4a3b      	ldr	r2, [pc, #236]	@ (80019cc <SystemInit+0x118>)
 80018de:	f043 0307 	orr.w	r3, r3, #7
 80018e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018e4:	4b3a      	ldr	r3, [pc, #232]	@ (80019d0 <SystemInit+0x11c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a39      	ldr	r2, [pc, #228]	@ (80019d0 <SystemInit+0x11c>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018f0:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <SystemInit+0x11c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018f6:	4b36      	ldr	r3, [pc, #216]	@ (80019d0 <SystemInit+0x11c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4935      	ldr	r1, [pc, #212]	@ (80019d0 <SystemInit+0x11c>)
 80018fc:	4b35      	ldr	r3, [pc, #212]	@ (80019d4 <SystemInit+0x120>)
 80018fe:	4013      	ands	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001902:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <SystemInit+0x118>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800190e:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <SystemInit+0x118>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 030f 	bic.w	r3, r3, #15
 8001916:	4a2d      	ldr	r2, [pc, #180]	@ (80019cc <SystemInit+0x118>)
 8001918:	f043 0307 	orr.w	r3, r3, #7
 800191c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <SystemInit+0x11c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001924:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <SystemInit+0x11c>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <SystemInit+0x11c>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001930:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <SystemInit+0x11c>)
 8001932:	4a29      	ldr	r2, [pc, #164]	@ (80019d8 <SystemInit+0x124>)
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <SystemInit+0x11c>)
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <SystemInit+0x128>)
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800193c:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <SystemInit+0x11c>)
 800193e:	4a28      	ldr	r2, [pc, #160]	@ (80019e0 <SystemInit+0x12c>)
 8001940:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001942:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <SystemInit+0x11c>)
 8001944:	2200      	movs	r2, #0
 8001946:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001948:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <SystemInit+0x11c>)
 800194a:	4a25      	ldr	r2, [pc, #148]	@ (80019e0 <SystemInit+0x12c>)
 800194c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800194e:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <SystemInit+0x11c>)
 8001950:	2200      	movs	r2, #0
 8001952:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <SystemInit+0x11c>)
 8001956:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <SystemInit+0x12c>)
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <SystemInit+0x11c>)
 800195c:	2200      	movs	r2, #0
 800195e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001960:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <SystemInit+0x11c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1a      	ldr	r2, [pc, #104]	@ (80019d0 <SystemInit+0x11c>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800196c:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <SystemInit+0x11c>)
 800196e:	2200      	movs	r2, #0
 8001970:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <SystemInit+0x130>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <SystemInit+0x134>)
 8001978:	4013      	ands	r3, r2
 800197a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800197e:	d202      	bcs.n	8001986 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001980:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <SystemInit+0x138>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <SystemInit+0x11c>)
 8001988:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800198c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d113      	bne.n	80019bc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <SystemInit+0x11c>)
 8001996:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800199a:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <SystemInit+0x11c>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019a0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <SystemInit+0x13c>)
 80019a6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019aa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <SystemInit+0x11c>)
 80019ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019b2:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <SystemInit+0x11c>)
 80019b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	52002000 	.word	0x52002000
 80019d0:	58024400 	.word	0x58024400
 80019d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019d8:	02020200 	.word	0x02020200
 80019dc:	01ff0000 	.word	0x01ff0000
 80019e0:	01010280 	.word	0x01010280
 80019e4:	5c001000 	.word	0x5c001000
 80019e8:	ffff0000 	.word	0xffff0000
 80019ec:	51008108 	.word	0x51008108
 80019f0:	52004000 	.word	0x52004000

080019f4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <ExitRun0Mode+0x2c>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <ExitRun0Mode+0x2c>)
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001a04:	bf00      	nop
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <ExitRun0Mode+0x2c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f9      	beq.n	8001a06 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	58024800 	.word	0x58024800

08001a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a60 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a28:	f7ff ffe4 	bl	80019f4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a2c:	f7ff ff42 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	@ (8001a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	@ (8001a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f014 f9e3 	bl	8015e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a5a:	f7fe fe2f 	bl	80006bc <main>
  bx  lr
 8001a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a68:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8001a6c:	08016d08 	.word	0x08016d08
  ldr r2, =_sbss
 8001a70:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001a74:	24002c80 	.word	0x24002c80

08001a78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC3_IRQHandler>

08001a7a <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af02      	add	r7, sp, #8
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	733b      	strb	r3, [r7, #12]
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	791b      	ldrb	r3, [r3, #4]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	b299      	uxth	r1, r3
 8001a9a:	f107 020c 	add.w	r2, r7, #12
 8001a9e:	2364      	movs	r3, #100	@ 0x64
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f004 fe88 	bl	80067b8 <HAL_I2C_Master_Transmit>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SSD1306_SendCommand+0x38>
		return ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	819a      	strh	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8001aca:	2312      	movs	r3, #18
 8001acc:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8001ad2:	e02c      	b.n	8001b2e <SSD1306_Init+0x72>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8001ad4:	897b      	ldrh	r3, [r7, #10]
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <SSD1306_Init+0x88>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8001adc:	897b      	ldrh	r3, [r7, #10]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <SSD1306_Init+0x88>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffc5 	bl	8001a7a <SSD1306_SendCommand>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <SSD1306_Init+0x40>
 8001af6:	897b      	ldrh	r3, [r7, #10]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e01e      	b.n	8001b3a <SSD1306_Init+0x7e>
	        cmd_idx++;
 8001afc:	897b      	ldrh	r3, [r7, #10]
 8001afe:	3301      	adds	r3, #1
 8001b00:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8001b02:	e00f      	b.n	8001b24 <SSD1306_Init+0x68>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <SSD1306_Init+0x88>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffb4 	bl	8001a7a <SSD1306_SendCommand>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <SSD1306_Init+0x62>
 8001b18:	897b      	ldrh	r3, [r7, #10]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	e00d      	b.n	8001b3a <SSD1306_Init+0x7e>
	            cmd_idx++;
 8001b1e:	897b      	ldrh	r3, [r7, #10]
 8001b20:	3301      	adds	r3, #1
 8001b22:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8001b24:	89bb      	ldrh	r3, [r7, #12]
 8001b26:	1e5a      	subs	r2, r3, #1
 8001b28:	81ba      	strh	r2, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ea      	bne.n	8001b04 <SSD1306_Init+0x48>
	while (n_commands--) {
 8001b2e:	89fb      	ldrh	r3, [r7, #14]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	81fa      	strh	r2, [r7, #14]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1cd      	bne.n	8001ad4 <SSD1306_Init+0x18>
	        }
	    }
	    return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	080167d8 	.word	0x080167d8

08001b48 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 1;							// Reset the cursor to top-left
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	819a      	strh	r2, [r3, #12]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM + 1);	// set all bytes to 0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f240 4201 	movw	r2, #1025	@ 0x401
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f014 f94f 	bl	8015e04 <memset>
	return 0;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	hssd->vram[0] = DATA_STREAM; // Identify the outgoing data as a stream
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2240      	movs	r2, #64	@ 0x40
 8001b7e:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram, CACHE_SIZE_MEM + 1);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	791b      	ldrb	r3, [r3, #4]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	b299      	uxth	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	f240 4301 	movw	r3, #1025	@ 0x401
 8001b94:	f004 ff28 	bl	80069e8 <HAL_I2C_Master_Transmit_DMA>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	2b1f      	cmp	r3, #31
 8001bb4:	d902      	bls.n	8001bbc <SSD1306_DrawChar+0x18>
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	2b7e      	cmp	r3, #126	@ 0x7e
 8001bba:	d901      	bls.n	8001bc0 <SSD1306_DrawChar+0x1c>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e02e      	b.n	8001c1e <SSD1306_DrawChar+0x7a>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	3b20      	subs	r3, #32
 8001bc4:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	2b60      	cmp	r3, #96	@ 0x60
 8001bca:	d906      	bls.n	8001bda <SSD1306_DrawChar+0x36>
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b7a      	cmp	r3, #122	@ 0x7a
 8001bd0:	d803      	bhi.n	8001bda <SSD1306_DrawChar+0x36>
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	3b20      	subs	r3, #32
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e005      	b.n	8001be6 <SSD1306_DrawChar+0x42>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	2b7a      	cmp	r3, #122	@ 0x7a
 8001bde:	d902      	bls.n	8001be6 <SSD1306_DrawChar+0x42>
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	3b1a      	subs	r3, #26
 8001be4:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4a0f      	ldr	r2, [pc, #60]	@ (8001c28 <SSD1306_DrawChar+0x84>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	8992      	ldrh	r2, [r2, #12]
 8001bf8:	1898      	adds	r0, r3, r2
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <SSD1306_DrawChar+0x84>)
 8001c02:	4413      	add	r3, r2
 8001c04:	7bba      	ldrb	r2, [r7, #14]
 8001c06:	4619      	mov	r1, r3
 8001c08:	f014 f930 	bl	8015e6c <memcpy>
	hssd->str_cursor += len;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	899a      	ldrh	r2, [r3, #12]
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	819a      	strh	r2, [r3, #12]
	return SUCCESS;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	0801680c 	.word	0x0801680c

08001c2c <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
 8001c3e:	e013      	b.n	8001c68 <SSD1306_DrawString+0x3c>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff ffaa 	bl	8001ba4 <SSD1306_DrawChar>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <SSD1306_DrawString+0x36>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	899b      	ldrh	r3, [r3, #12]
 8001c5a:	3306      	adds	r3, #6
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	819a      	strh	r2, [r3, #12]
	for (uint8_t i = 0; i < length; i++) {
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	3301      	adds	r3, #1
 8001c66:	75fb      	strb	r3, [r7, #23]
 8001c68:	7dfa      	ldrb	r2, [r7, #23]
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3e7      	bcc.n	8001c40 <SSD1306_DrawString+0x14>
	}

	return SUCCESS;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c82:	2003      	movs	r0, #3
 8001c84:	f001 fc3e 	bl	8003504 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c88:	f00b f960 	bl	800cf4c <HAL_RCC_GetSysClockFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_Init+0x68>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	4913      	ldr	r1, [pc, #76]	@ (8001ce8 <HAL_Init+0x6c>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <HAL_Init+0x68>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce8 <HAL_Init+0x6c>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <HAL_Init+0x70>)
 8001cbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf0 <HAL_Init+0x74>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc6:	200f      	movs	r0, #15
 8001cc8:	f000 f814 	bl	8001cf4 <HAL_InitTick>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e002      	b.n	8001cdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd6:	f7ff f995 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	080167c8 	.word	0x080167c8
 8001cec:	24000004 	.word	0x24000004
 8001cf0:	24000000 	.word	0x24000000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_InitTick+0x60>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e021      	b.n	8001d4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_InitTick+0x64>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_InitTick+0x60>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 fc23 	bl	800356a <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00e      	b.n	8001d4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d80a      	bhi.n	8001d4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f001 fbed 	bl	800351a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d40:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <HAL_InitTick+0x68>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2400000c 	.word	0x2400000c
 8001d58:	24000000 	.word	0x24000000
 8001d5c:	24000008 	.word	0x24000008

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	2400000c 	.word	0x2400000c
 8001d84:	24000f4c 	.word	0x24000f4c

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	24000f4c 	.word	0x24000f4c

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff ffee 	bl	8001d88 <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffde 	bl	8001d88 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2400000c 	.word	0x2400000c

08001de8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <HAL_GetREVID+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0c1b      	lsrs	r3, r3, #16
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	5c001000 	.word	0x5c001000

08001e00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <LL_ADC_SetChannelPreselection+0x24>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	0e9b      	lsrs	r3, r3, #26
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2201      	movs	r2, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	e015      	b.n	8001eb8 <LL_ADC_SetChannelPreselection+0x50>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	e003      	b.n	8001eae <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	69d2      	ldr	r2, [r2, #28]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b087      	sub	sp, #28
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3360      	adds	r3, #96	@ 0x60
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	430b      	orrs	r3, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	611a      	str	r2, [r3, #16]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3360      	adds	r3, #96	@ 0x60
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3330      	adds	r3, #48	@ 0x30
 8001fac:	461a      	mov	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	4413      	add	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	211f      	movs	r1, #31
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	401a      	ands	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	0e9b      	lsrs	r3, r3, #26
 8001fd4:	f003 011f 	and.w	r1, r3, #31
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fe8:	bf00      	nop
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60da      	str	r2, [r3, #12]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800201a:	b480      	push	{r7}
 800201c:	b087      	sub	sp, #28
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3314      	adds	r3, #20
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	0e5b      	lsrs	r3, r3, #25
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	4413      	add	r3, r2
 8002038:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	0d1b      	lsrs	r3, r3, #20
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2107      	movs	r1, #7
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	401a      	ands	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	0d1b      	lsrs	r3, r3, #20
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	431a      	orrs	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002088:	43db      	mvns	r3, r3
 800208a:	401a      	ands	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0318 	and.w	r3, r3, #24
 8002092:	4908      	ldr	r1, [pc, #32]	@ (80020b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002094:	40d9      	lsrs	r1, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	400b      	ands	r3, r1
 800209a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	000fffff 	.word	0x000fffff

080020b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 031f 	and.w	r3, r3, #31
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6093      	str	r3, [r2, #8]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	5fffffc0 	.word	0x5fffffc0

080020f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800210c:	d101      	bne.n	8002112 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <LL_ADC_EnableInternalRegulator+0x24>)
 800212e:	4013      	ands	r3, r2
 8002130:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	6fffffc0 	.word	0x6fffffc0

08002148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800215c:	d101      	bne.n	8002162 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <LL_ADC_Enable+0x24>)
 800217e:	4013      	ands	r3, r2
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	7fffffc0 	.word	0x7fffffc0

08002198 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <LL_ADC_IsEnabled+0x18>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_ADC_IsEnabled+0x1a>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <LL_ADC_REG_StartConversion+0x24>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	f043 0204 	orr.w	r2, r3, #4
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	7fffffc0 	.word	0x7fffffc0

080021e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d101      	bne.n	8002200 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b08      	cmp	r3, #8
 8002220:	d101      	bne.n	8002226 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e18f      	b.n	800256e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7fe feeb 	bl	8001038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff3f 	bl	80020f8 <LL_ADC_IsDeepPowerDownEnabled>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff25 	bl	80020d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff5a 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d114      	bne.n	80022c4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff3e 	bl	8002120 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a4:	4b87      	ldr	r3, [pc, #540]	@ (80024c4 <HAL_ADC_Init+0x290>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	4a87      	ldr	r2, [pc, #540]	@ (80024c8 <HAL_ADC_Init+0x294>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	3301      	adds	r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022b6:	e002      	b.n	80022be <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff3d 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d8:	f043 0210 	orr.w	r2, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff77 	bl	80021e8 <LL_ADC_REG_IsConversionOngoing>
 80022fa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 8129 	bne.w	800255c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f040 8125 	bne.w	800255c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002316:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800231a:	f043 0202 	orr.w	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff36 	bl	8002198 <LL_ADC_IsEnabled>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d136      	bne.n	80023a0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a65      	ldr	r2, [pc, #404]	@ (80024cc <HAL_ADC_Init+0x298>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_ADC_Init+0x112>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a63      	ldr	r2, [pc, #396]	@ (80024d0 <HAL_ADC_Init+0x29c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10e      	bne.n	8002364 <HAL_ADC_Init+0x130>
 8002346:	4861      	ldr	r0, [pc, #388]	@ (80024cc <HAL_ADC_Init+0x298>)
 8002348:	f7ff ff26 	bl	8002198 <LL_ADC_IsEnabled>
 800234c:	4604      	mov	r4, r0
 800234e:	4860      	ldr	r0, [pc, #384]	@ (80024d0 <HAL_ADC_Init+0x29c>)
 8002350:	f7ff ff22 	bl	8002198 <LL_ADC_IsEnabled>
 8002354:	4603      	mov	r3, r0
 8002356:	4323      	orrs	r3, r4
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e008      	b.n	8002376 <HAL_ADC_Init+0x142>
 8002364:	485b      	ldr	r0, [pc, #364]	@ (80024d4 <HAL_ADC_Init+0x2a0>)
 8002366:	f7ff ff17 	bl	8002198 <LL_ADC_IsEnabled>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d012      	beq.n	80023a0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a53      	ldr	r2, [pc, #332]	@ (80024cc <HAL_ADC_Init+0x298>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_ADC_Init+0x15a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a51      	ldr	r2, [pc, #324]	@ (80024d0 <HAL_ADC_Init+0x29c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Init+0x15e>
 800238e:	4a52      	ldr	r2, [pc, #328]	@ (80024d8 <HAL_ADC_Init+0x2a4>)
 8002390:	e000      	b.n	8002394 <HAL_ADC_Init+0x160>
 8002392:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_ADC_Init+0x2a8>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f7ff fd30 	bl	8001e00 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023a0:	f7ff fd22 	bl	8001de8 <HAL_GetREVID>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d914      	bls.n	80023d8 <HAL_ADC_Init+0x1a4>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d110      	bne.n	80023d8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7d5b      	ldrb	r3, [r3, #21]
 80023ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023c0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7f1b      	ldrb	r3, [r3, #28]
 80023cc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023ce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023d0:	f043 030c 	orr.w	r3, r3, #12
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	e00d      	b.n	80023f4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7d5b      	ldrb	r3, [r3, #21]
 80023dc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023e2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023e8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7f1b      	ldrb	r3, [r3, #28]
 80023ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7f1b      	ldrb	r3, [r3, #28]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	3b01      	subs	r3, #1
 8002402:	045b      	lsls	r3, r3, #17
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b2c      	ldr	r3, [pc, #176]	@ (80024e0 <HAL_ADC_Init+0x2ac>)
 800242e:	4013      	ands	r3, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	69b9      	ldr	r1, [r7, #24]
 8002436:	430b      	orrs	r3, r1
 8002438:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fed2 	bl	80021e8 <LL_ADC_REG_IsConversionOngoing>
 8002444:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fedf 	bl	800220e <LL_ADC_INJ_IsConversionOngoing>
 8002450:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d15f      	bne.n	8002518 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d15c      	bne.n	8002518 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7d1b      	ldrb	r3, [r3, #20]
 8002462:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b1c      	ldr	r3, [pc, #112]	@ (80024e4 <HAL_ADC_Init+0x2b0>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	430b      	orrs	r3, r1
 800247e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002486:	2b01      	cmp	r3, #1
 8002488:	d130      	bne.n	80024ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <HAL_ADC_Init+0x2b4>)
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800249e:	3a01      	subs	r2, #1
 80024a0:	0411      	lsls	r1, r2, #16
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024b2:	430a      	orrs	r2, r1
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	611a      	str	r2, [r3, #16]
 80024c0:	e01c      	b.n	80024fc <HAL_ADC_Init+0x2c8>
 80024c2:	bf00      	nop
 80024c4:	24000000 	.word	0x24000000
 80024c8:	053e2d63 	.word	0x053e2d63
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40022100 	.word	0x40022100
 80024d4:	58026000 	.word	0x58026000
 80024d8:	40022300 	.word	0x40022300
 80024dc:	58026300 	.word	0x58026300
 80024e0:	fff0c003 	.word	0xfff0c003
 80024e4:	ffffbffc 	.word	0xffffbffc
 80024e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fd16 	bl	8002f44 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10c      	bne.n	800253a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f023 010f 	bic.w	r1, r3, #15
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	1e5a      	subs	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	631a      	str	r2, [r3, #48]	@ 0x30
 8002538:	e007      	b.n	800254a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 020f 	bic.w	r2, r2, #15
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	655a      	str	r2, [r3, #84]	@ 0x54
 800255a:	e007      	b.n	800256c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002560:	f043 0210 	orr.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800256c:	7ffb      	ldrb	r3, [r7, #31]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	bf00      	nop

08002578 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a55      	ldr	r2, [pc, #340]	@ (80026e0 <HAL_ADC_Start_DMA+0x168>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_ADC_Start_DMA+0x20>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a54      	ldr	r2, [pc, #336]	@ (80026e4 <HAL_ADC_Start_DMA+0x16c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_ADC_Start_DMA+0x24>
 8002598:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <HAL_ADC_Start_DMA+0x170>)
 800259a:	e000      	b.n	800259e <HAL_ADC_Start_DMA+0x26>
 800259c:	4b53      	ldr	r3, [pc, #332]	@ (80026ec <HAL_ADC_Start_DMA+0x174>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fd8a 	bl	80020b8 <LL_ADC_GetMultimode>
 80025a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fe1c 	bl	80021e8 <LL_ADC_REG_IsConversionOngoing>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 808c 	bne.w	80026d0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_Start_DMA+0x4e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e087      	b.n	80026d6 <HAL_ADC_Start_DMA+0x15e>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d002      	beq.n	80025e0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	2b09      	cmp	r3, #9
 80025de:	d170      	bne.n	80026c2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fb91 	bl	8002d08 <ADC_Enable>
 80025e6:	4603      	mov	r3, r0
 80025e8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d163      	bne.n	80026b8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025f4:	4b3e      	ldr	r3, [pc, #248]	@ (80026f0 <HAL_ADC_Start_DMA+0x178>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a37      	ldr	r2, [pc, #220]	@ (80026e4 <HAL_ADC_Start_DMA+0x16c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d002      	beq.n	8002610 <HAL_ADC_Start_DMA+0x98>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	e000      	b.n	8002612 <HAL_ADC_Start_DMA+0x9a>
 8002610:	4b33      	ldr	r3, [pc, #204]	@ (80026e0 <HAL_ADC_Start_DMA+0x168>)
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4293      	cmp	r3, r2
 8002618:	d002      	beq.n	8002620 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002630:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	f023 0206 	bic.w	r2, r3, #6
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	659a      	str	r2, [r3, #88]	@ 0x58
 8002644:	e002      	b.n	800264c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002650:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <HAL_ADC_Start_DMA+0x17c>)
 8002652:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002658:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <HAL_ADC_Start_DMA+0x180>)
 800265a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002660:	4a26      	ldr	r2, [pc, #152]	@ (80026fc <HAL_ADC_Start_DMA+0x184>)
 8002662:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	221c      	movs	r2, #28
 800266a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0210 	orr.w	r2, r2, #16
 8002682:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	4619      	mov	r1, r3
 800268e:	4610      	mov	r0, r2
 8002690:	f7ff fcb0 	bl	8001ff4 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3340      	adds	r3, #64	@ 0x40
 800269e:	4619      	mov	r1, r3
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f001 fb42 	bl	8003d2c <HAL_DMA_Start_IT>
 80026a8:	4603      	mov	r3, r0
 80026aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fd85 	bl	80021c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80026b6:	e00d      	b.n	80026d4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80026c0:	e008      	b.n	80026d4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80026ce:	e001      	b.n	80026d4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
 80026d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40022100 	.word	0x40022100
 80026e8:	40022300 	.word	0x40022300
 80026ec:	58026300 	.word	0x58026300
 80026f0:	fffff0fe 	.word	0xfffff0fe
 80026f4:	08002e1d 	.word	0x08002e1d
 80026f8:	08002ef5 	.word	0x08002ef5
 80026fc:	08002f11 	.word	0x08002f11

08002700 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b08d      	sub	sp, #52	@ 0x34
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a65      	ldr	r2, [pc, #404]	@ (80028d8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002742:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x2a>
 800274e:	2302      	movs	r3, #2
 8002750:	e2c7      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x5ba>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fd42 	bl	80021e8 <LL_ADC_REG_IsConversionOngoing>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 82ac 	bne.w	8002cc4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db2c      	blt.n	80027ce <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800277c:	2b00      	cmp	r3, #0
 800277e:	d108      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x6a>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e9b      	lsrs	r3, r3, #26
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	2201      	movs	r2, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	e016      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x98>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	613b      	str	r3, [r7, #16]
  return result;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2201      	movs	r2, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	69d1      	ldr	r1, [r2, #28]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	430b      	orrs	r3, r1
 80027cc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	f7ff fbde 	bl	8001f9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fcff 	bl	80021e8 <LL_ADC_REG_IsConversionOngoing>
 80027ea:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fd0c 	bl	800220e <LL_ADC_INJ_IsConversionOngoing>
 80027f6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 80b8 	bne.w	8002970 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 80b4 	bne.w	8002970 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	461a      	mov	r2, r3
 8002816:	f7ff fc00 	bl	800201a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800281a:	4b30      	ldr	r3, [pc, #192]	@ (80028dc <HAL_ADC_ConfigChannel+0x1b4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002826:	d10b      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x118>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	e01d      	b.n	800287c <HAL_ADC_ConfigChannel+0x154>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10b      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x13e>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	e00a      	b.n	800287c <HAL_ADC_ConfigChannel+0x154>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b04      	cmp	r3, #4
 8002884:	d02c      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6919      	ldr	r1, [r3, #16]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f7ff fb1b 	bl	8001ece <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6919      	ldr	r1, [r3, #16]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	7e5b      	ldrb	r3, [r3, #25]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d102      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x186>
 80028a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80028ac:	e000      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x188>
 80028ae:	2300      	movs	r3, #0
 80028b0:	461a      	mov	r2, r3
 80028b2:	f7ff fb45 	bl	8001f40 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6919      	ldr	r1, [r3, #16]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7e1b      	ldrb	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x1a4>
 80028c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028ca:	e000      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1a6>
 80028cc:	2300      	movs	r3, #0
 80028ce:	461a      	mov	r2, r3
 80028d0:	f7ff fb1d 	bl	8001f0e <LL_ADC_SetDataRightShift>
 80028d4:	e04c      	b.n	8002970 <HAL_ADC_ConfigChannel+0x248>
 80028d6:	bf00      	nop
 80028d8:	47ff0000 	.word	0x47ff0000
 80028dc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	069b      	lsls	r3, r3, #26
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002902:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800290a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	069b      	lsls	r3, r3, #26
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002926:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800292e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	069b      	lsls	r3, r3, #26
 8002938:	429a      	cmp	r2, r3
 800293a:	d107      	bne.n	800294c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800294a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002952:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	069b      	lsls	r3, r3, #26
 800295c:	429a      	cmp	r2, r3
 800295e:	d107      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800296e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fc0f 	bl	8002198 <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 81aa 	bne.w	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	461a      	mov	r2, r3
 8002990:	f7ff fb6e 	bl	8002070 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a87      	ldr	r2, [pc, #540]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x490>)
 800299a:	4293      	cmp	r3, r2
 800299c:	f040 809a 	bne.w	8002ad4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4984      	ldr	r1, [pc, #528]	@ (8002bbc <HAL_ADC_ConfigChannel+0x494>)
 80029aa:	428b      	cmp	r3, r1
 80029ac:	d147      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x316>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4983      	ldr	r1, [pc, #524]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x498>)
 80029b4:	428b      	cmp	r3, r1
 80029b6:	d040      	beq.n	8002a3a <HAL_ADC_ConfigChannel+0x312>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4981      	ldr	r1, [pc, #516]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x49c>)
 80029be:	428b      	cmp	r3, r1
 80029c0:	d039      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x30e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4980      	ldr	r1, [pc, #512]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x4a0>)
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d032      	beq.n	8002a32 <HAL_ADC_ConfigChannel+0x30a>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	497e      	ldr	r1, [pc, #504]	@ (8002bcc <HAL_ADC_ConfigChannel+0x4a4>)
 80029d2:	428b      	cmp	r3, r1
 80029d4:	d02b      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x306>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	497d      	ldr	r1, [pc, #500]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x4a8>)
 80029dc:	428b      	cmp	r3, r1
 80029de:	d024      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x302>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	497b      	ldr	r1, [pc, #492]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x4ac>)
 80029e6:	428b      	cmp	r3, r1
 80029e8:	d01d      	beq.n	8002a26 <HAL_ADC_ConfigChannel+0x2fe>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	497a      	ldr	r1, [pc, #488]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x4b0>)
 80029f0:	428b      	cmp	r3, r1
 80029f2:	d016      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x2fa>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4978      	ldr	r1, [pc, #480]	@ (8002bdc <HAL_ADC_ConfigChannel+0x4b4>)
 80029fa:	428b      	cmp	r3, r1
 80029fc:	d00f      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0x2f6>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4977      	ldr	r1, [pc, #476]	@ (8002be0 <HAL_ADC_ConfigChannel+0x4b8>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d008      	beq.n	8002a1a <HAL_ADC_ConfigChannel+0x2f2>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4975      	ldr	r1, [pc, #468]	@ (8002be4 <HAL_ADC_ConfigChannel+0x4bc>)
 8002a0e:	428b      	cmp	r3, r1
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x2ee>
 8002a12:	4b75      	ldr	r3, [pc, #468]	@ (8002be8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002a14:	e05a      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a16:	2300      	movs	r3, #0
 8002a18:	e058      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a1a:	4b74      	ldr	r3, [pc, #464]	@ (8002bec <HAL_ADC_ConfigChannel+0x4c4>)
 8002a1c:	e056      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a1e:	4b74      	ldr	r3, [pc, #464]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002a20:	e054      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a22:	4b6e      	ldr	r3, [pc, #440]	@ (8002bdc <HAL_ADC_ConfigChannel+0x4b4>)
 8002a24:	e052      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a26:	4b6c      	ldr	r3, [pc, #432]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002a28:	e050      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a2a:	4b72      	ldr	r3, [pc, #456]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x4cc>)
 8002a2c:	e04e      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a2e:	4b72      	ldr	r3, [pc, #456]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002a30:	e04c      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a32:	4b72      	ldr	r3, [pc, #456]	@ (8002bfc <HAL_ADC_ConfigChannel+0x4d4>)
 8002a34:	e04a      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a36:	4b72      	ldr	r3, [pc, #456]	@ (8002c00 <HAL_ADC_ConfigChannel+0x4d8>)
 8002a38:	e048      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e046      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4970      	ldr	r1, [pc, #448]	@ (8002c04 <HAL_ADC_ConfigChannel+0x4dc>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d140      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x3a2>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	495c      	ldr	r1, [pc, #368]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x498>)
 8002a4e:	428b      	cmp	r3, r1
 8002a50:	d039      	beq.n	8002ac6 <HAL_ADC_ConfigChannel+0x39e>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	495b      	ldr	r1, [pc, #364]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x49c>)
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	d032      	beq.n	8002ac2 <HAL_ADC_ConfigChannel+0x39a>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4959      	ldr	r1, [pc, #356]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x4a0>)
 8002a62:	428b      	cmp	r3, r1
 8002a64:	d02b      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x396>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4958      	ldr	r1, [pc, #352]	@ (8002bcc <HAL_ADC_ConfigChannel+0x4a4>)
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d024      	beq.n	8002aba <HAL_ADC_ConfigChannel+0x392>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4956      	ldr	r1, [pc, #344]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x4a8>)
 8002a76:	428b      	cmp	r3, r1
 8002a78:	d01d      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x38e>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4955      	ldr	r1, [pc, #340]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x4ac>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d016      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x38a>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4953      	ldr	r1, [pc, #332]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d00f      	beq.n	8002aae <HAL_ADC_ConfigChannel+0x386>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4952      	ldr	r1, [pc, #328]	@ (8002bdc <HAL_ADC_ConfigChannel+0x4b4>)
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d008      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x382>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4951      	ldr	r1, [pc, #324]	@ (8002be4 <HAL_ADC_ConfigChannel+0x4bc>)
 8002a9e:	428b      	cmp	r3, r1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x37e>
 8002aa2:	4b51      	ldr	r3, [pc, #324]	@ (8002be8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002aa4:	e012      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e010      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002aaa:	4b51      	ldr	r3, [pc, #324]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002aac:	e00e      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002aae:	4b4b      	ldr	r3, [pc, #300]	@ (8002bdc <HAL_ADC_ConfigChannel+0x4b4>)
 8002ab0:	e00c      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002ab2:	4b49      	ldr	r3, [pc, #292]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002ab4:	e00a      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x4cc>)
 8002ab8:	e008      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002aba:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002abc:	e006      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002abe:	4b4f      	ldr	r3, [pc, #316]	@ (8002bfc <HAL_ADC_ConfigChannel+0x4d4>)
 8002ac0:	e004      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8002c00 <HAL_ADC_ConfigChannel+0x4d8>)
 8002ac4:	e002      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_ADC_ConfigChannel+0x3a4>
 8002aca:	2300      	movs	r3, #0
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f7ff f9ca 	bl	8001e68 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f280 80fc 	bge.w	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a36      	ldr	r2, [pc, #216]	@ (8002bbc <HAL_ADC_ConfigChannel+0x494>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_ADC_ConfigChannel+0x3ca>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a45      	ldr	r2, [pc, #276]	@ (8002c04 <HAL_ADC_ConfigChannel+0x4dc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x3ce>
 8002af2:	4b45      	ldr	r3, [pc, #276]	@ (8002c08 <HAL_ADC_ConfigChannel+0x4e0>)
 8002af4:	e000      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x3d0>
 8002af6:	4b45      	ldr	r3, [pc, #276]	@ (8002c0c <HAL_ADC_ConfigChannel+0x4e4>)
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f9a7 	bl	8001e4c <LL_ADC_GetCommonPathInternalCh>
 8002afe:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <HAL_ADC_ConfigChannel+0x494>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_ADC_ConfigChannel+0x3ec>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8002c04 <HAL_ADC_ConfigChannel+0x4dc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10e      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x40a>
 8002b14:	4829      	ldr	r0, [pc, #164]	@ (8002bbc <HAL_ADC_ConfigChannel+0x494>)
 8002b16:	f7ff fb3f 	bl	8002198 <LL_ADC_IsEnabled>
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	4839      	ldr	r0, [pc, #228]	@ (8002c04 <HAL_ADC_ConfigChannel+0x4dc>)
 8002b1e:	f7ff fb3b 	bl	8002198 <LL_ADC_IsEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4323      	orrs	r3, r4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	e008      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x41c>
 8002b32:	4837      	ldr	r0, [pc, #220]	@ (8002c10 <HAL_ADC_ConfigChannel+0x4e8>)
 8002b34:	f7ff fb30 	bl	8002198 <LL_ADC_IsEnabled>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf0c      	ite	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	2300      	movne	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80b3 	beq.w	8002cb0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a31      	ldr	r2, [pc, #196]	@ (8002c14 <HAL_ADC_ConfigChannel+0x4ec>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d165      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x4f8>
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d160      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2b      	ldr	r2, [pc, #172]	@ (8002c10 <HAL_ADC_ConfigChannel+0x4e8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	f040 80b6 	bne.w	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <HAL_ADC_ConfigChannel+0x494>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0x456>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_ADC_ConfigChannel+0x4dc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x45a>
 8002b7e:	4a22      	ldr	r2, [pc, #136]	@ (8002c08 <HAL_ADC_ConfigChannel+0x4e0>)
 8002b80:	e000      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x45c>
 8002b82:	4a22      	ldr	r2, [pc, #136]	@ (8002c0c <HAL_ADC_ConfigChannel+0x4e4>)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7ff f94a 	bl	8001e26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b92:	4b21      	ldr	r3, [pc, #132]	@ (8002c18 <HAL_ADC_ConfigChannel+0x4f0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	4a20      	ldr	r2, [pc, #128]	@ (8002c1c <HAL_ADC_ConfigChannel+0x4f4>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002ba6:	e002      	b.n	8002bae <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f9      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb4:	e08f      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
 8002bb6:	bf00      	nop
 8002bb8:	47ff0000 	.word	0x47ff0000
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	04300002 	.word	0x04300002
 8002bc4:	08600004 	.word	0x08600004
 8002bc8:	0c900008 	.word	0x0c900008
 8002bcc:	10c00010 	.word	0x10c00010
 8002bd0:	14f00020 	.word	0x14f00020
 8002bd4:	2a000400 	.word	0x2a000400
 8002bd8:	2e300800 	.word	0x2e300800
 8002bdc:	32601000 	.word	0x32601000
 8002be0:	43210000 	.word	0x43210000
 8002be4:	4b840000 	.word	0x4b840000
 8002be8:	4fb80000 	.word	0x4fb80000
 8002bec:	47520000 	.word	0x47520000
 8002bf0:	36902000 	.word	0x36902000
 8002bf4:	25b00200 	.word	0x25b00200
 8002bf8:	21800100 	.word	0x21800100
 8002bfc:	1d500080 	.word	0x1d500080
 8002c00:	19200040 	.word	0x19200040
 8002c04:	40022100 	.word	0x40022100
 8002c08:	40022300 	.word	0x40022300
 8002c0c:	58026300 	.word	0x58026300
 8002c10:	58026000 	.word	0x58026000
 8002c14:	cb840000 	.word	0xcb840000
 8002c18:	24000000 	.word	0x24000000
 8002c1c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a31      	ldr	r2, [pc, #196]	@ (8002cec <HAL_ADC_ConfigChannel+0x5c4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d11e      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x540>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d14b      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2c      	ldr	r2, [pc, #176]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_ADC_ConfigChannel+0x52a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x52e>
 8002c52:	4a2a      	ldr	r2, [pc, #168]	@ (8002cfc <HAL_ADC_ConfigChannel+0x5d4>)
 8002c54:	e000      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x530>
 8002c56:	4a2a      	ldr	r2, [pc, #168]	@ (8002d00 <HAL_ADC_ConfigChannel+0x5d8>)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f7ff f8e0 	bl	8001e26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c66:	e036      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a25      	ldr	r2, [pc, #148]	@ (8002d04 <HAL_ADC_ConfigChannel+0x5dc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d131      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d12c      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d127      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_ADC_ConfigChannel+0x572>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x576>
 8002c9a:	4a18      	ldr	r2, [pc, #96]	@ (8002cfc <HAL_ADC_ConfigChannel+0x5d4>)
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x578>
 8002c9e:	4a18      	ldr	r2, [pc, #96]	@ (8002d00 <HAL_ADC_ConfigChannel+0x5d8>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	f7ff f8bc 	bl	8001e26 <LL_ADC_SetCommonPathInternalCh>
 8002cae:	e012      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002cc2:	e008      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3734      	adds	r7, #52	@ 0x34
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	c7520000 	.word	0xc7520000
 8002cf0:	58026000 	.word	0x58026000
 8002cf4:	40022000 	.word	0x40022000
 8002cf8:	40022100 	.word	0x40022100
 8002cfc:	40022300 	.word	0x40022300
 8002d00:	58026300 	.word	0x58026300
 8002d04:	cfb80000 	.word	0xcfb80000

08002d08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fa3f 	bl	8002198 <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d16e      	bne.n	8002dfe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <ADC_Enable+0x100>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e05a      	b.n	8002e00 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fa0e 	bl	8002170 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d54:	f7ff f818 	bl	8001d88 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e0c <ADC_Enable+0x104>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <ADC_Enable+0x66>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a29      	ldr	r2, [pc, #164]	@ (8002e10 <ADC_Enable+0x108>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <ADC_Enable+0x6a>
 8002d6e:	4b29      	ldr	r3, [pc, #164]	@ (8002e14 <ADC_Enable+0x10c>)
 8002d70:	e000      	b.n	8002d74 <ADC_Enable+0x6c>
 8002d72:	4b29      	ldr	r3, [pc, #164]	@ (8002e18 <ADC_Enable+0x110>)
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f99f 	bl	80020b8 <LL_ADC_GetMultimode>
 8002d7a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <ADC_Enable+0x108>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d002      	beq.n	8002d8c <ADC_Enable+0x84>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	e000      	b.n	8002d8e <ADC_Enable+0x86>
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e0c <ADC_Enable+0x104>)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02c      	beq.n	8002df0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d130      	bne.n	8002dfe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d9c:	e028      	b.n	8002df0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f9f8 	bl	8002198 <LL_ADC_IsEnabled>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d104      	bne.n	8002db8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff f9dc 	bl	8002170 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002db8:	f7fe ffe6 	bl	8001d88 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d914      	bls.n	8002df0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d00d      	beq.n	8002df0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	f043 0210 	orr.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e007      	b.n	8002e00 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d1cf      	bne.n	8002d9e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	8000003f 	.word	0x8000003f
 8002e0c:	40022000 	.word	0x40022000
 8002e10:	40022100 	.word	0x40022100
 8002e14:	40022300 	.word	0x40022300
 8002e18:	58026300 	.word	0x58026300

08002e1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d14b      	bne.n	8002ece <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d021      	beq.n	8002e94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f88e 	bl	8001f76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d032      	beq.n	8002ec6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d12b      	bne.n	8002ec6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e72:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d11f      	bne.n	8002ec6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e92:	e018      	b.n	8002ec6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d111      	bne.n	8002ec6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7fe f80c 	bl	8000ee4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ecc:	e00e      	b.n	8002eec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7ff fc1a 	bl	8002714 <HAL_ADC_ErrorCallback>
}
 8002ee0:	e004      	b.n	8002eec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fbfc 	bl	8002700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f043 0204 	orr.w	r2, r3, #4
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff fbec 	bl	8002714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a7a      	ldr	r2, [pc, #488]	@ (800313c <ADC_ConfigureBoostMode+0x1f8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <ADC_ConfigureBoostMode+0x1c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a79      	ldr	r2, [pc, #484]	@ (8003140 <ADC_ConfigureBoostMode+0x1fc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d109      	bne.n	8002f74 <ADC_ConfigureBoostMode+0x30>
 8002f60:	4b78      	ldr	r3, [pc, #480]	@ (8003144 <ADC_ConfigureBoostMode+0x200>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e008      	b.n	8002f86 <ADC_ConfigureBoostMode+0x42>
 8002f74:	4b74      	ldr	r3, [pc, #464]	@ (8003148 <ADC_ConfigureBoostMode+0x204>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01c      	beq.n	8002fc4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f8a:	f00a f959 	bl	800d240 <HAL_RCC_GetHCLKFreq>
 8002f8e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f98:	d010      	beq.n	8002fbc <ADC_ConfigureBoostMode+0x78>
 8002f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f9e:	d873      	bhi.n	8003088 <ADC_ConfigureBoostMode+0x144>
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d002      	beq.n	8002fac <ADC_ConfigureBoostMode+0x68>
 8002fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002faa:	d16d      	bne.n	8003088 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	60fb      	str	r3, [r7, #12]
        break;
 8002fba:	e068      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	60fb      	str	r3, [r7, #12]
        break;
 8002fc2:	e064      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002fc4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002fc8:	f04f 0100 	mov.w	r1, #0
 8002fcc:	f00b fb9e 	bl	800e70c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002fda:	d051      	beq.n	8003080 <ADC_ConfigureBoostMode+0x13c>
 8002fdc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002fe0:	d854      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 8002fe2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002fe6:	d047      	beq.n	8003078 <ADC_ConfigureBoostMode+0x134>
 8002fe8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002fec:	d84e      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 8002fee:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ff2:	d03d      	beq.n	8003070 <ADC_ConfigureBoostMode+0x12c>
 8002ff4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ff8:	d848      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 8002ffa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ffe:	d033      	beq.n	8003068 <ADC_ConfigureBoostMode+0x124>
 8003000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003004:	d842      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 8003006:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800300a:	d029      	beq.n	8003060 <ADC_ConfigureBoostMode+0x11c>
 800300c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003010:	d83c      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 8003012:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003016:	d01a      	beq.n	800304e <ADC_ConfigureBoostMode+0x10a>
 8003018:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800301c:	d836      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 800301e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003022:	d014      	beq.n	800304e <ADC_ConfigureBoostMode+0x10a>
 8003024:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003028:	d830      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 800302a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800302e:	d00e      	beq.n	800304e <ADC_ConfigureBoostMode+0x10a>
 8003030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003034:	d82a      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 8003036:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800303a:	d008      	beq.n	800304e <ADC_ConfigureBoostMode+0x10a>
 800303c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003040:	d824      	bhi.n	800308c <ADC_ConfigureBoostMode+0x148>
 8003042:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003046:	d002      	beq.n	800304e <ADC_ConfigureBoostMode+0x10a>
 8003048:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800304c:	d11e      	bne.n	800308c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	60fb      	str	r3, [r7, #12]
        break;
 800305e:	e016      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	60fb      	str	r3, [r7, #12]
        break;
 8003066:	e012      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	60fb      	str	r3, [r7, #12]
        break;
 800306e:	e00e      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	60fb      	str	r3, [r7, #12]
        break;
 8003076:	e00a      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	09db      	lsrs	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]
        break;
 800307e:	e006      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	60fb      	str	r3, [r7, #12]
        break;
 8003086:	e002      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003088:	bf00      	nop
 800308a:	e000      	b.n	800308e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800308c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800308e:	f7fe feab 	bl	8001de8 <HAL_GetREVID>
 8003092:	4603      	mov	r3, r0
 8003094:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003098:	4293      	cmp	r3, r2
 800309a:	d815      	bhi.n	80030c8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a2b      	ldr	r2, [pc, #172]	@ (800314c <ADC_ConfigureBoostMode+0x208>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d908      	bls.n	80030b6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030b4:	e03e      	b.n	8003134 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030c4:	609a      	str	r2, [r3, #8]
}
 80030c6:	e035      	b.n	8003134 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	085b      	lsrs	r3, r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003150 <ADC_ConfigureBoostMode+0x20c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d808      	bhi.n	80030e8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80030e4:	609a      	str	r2, [r3, #8]
}
 80030e6:	e025      	b.n	8003134 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003154 <ADC_ConfigureBoostMode+0x210>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d80a      	bhi.n	8003106 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003102:	609a      	str	r2, [r3, #8]
}
 8003104:	e016      	b.n	8003134 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a13      	ldr	r2, [pc, #76]	@ (8003158 <ADC_ConfigureBoostMode+0x214>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d80a      	bhi.n	8003124 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003120:	609a      	str	r2, [r3, #8]
}
 8003122:	e007      	b.n	8003134 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40022000 	.word	0x40022000
 8003140:	40022100 	.word	0x40022100
 8003144:	40022300 	.word	0x40022300
 8003148:	58026300 	.word	0x58026300
 800314c:	01312d00 	.word	0x01312d00
 8003150:	005f5e10 	.word	0x005f5e10
 8003154:	00bebc20 	.word	0x00bebc20
 8003158:	017d7840 	.word	0x017d7840

0800315c <LL_ADC_IsEnabled>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <LL_ADC_IsEnabled+0x18>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <LL_ADC_IsEnabled+0x1a>
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_ADC_REG_IsConversionOngoing>:
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d101      	bne.n	800319a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b09f      	sub	sp, #124	@ 0x7c
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0be      	b.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5c      	ldr	r2, [pc, #368]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d102      	bne.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	e001      	b.n	80031ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e09d      	b.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ffb9 	bl	8003182 <LL_ADC_REG_IsConversionOngoing>
 8003210:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ffb3 	bl	8003182 <LL_ADC_REG_IsConversionOngoing>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d17f      	bne.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003224:	2b00      	cmp	r3, #0
 8003226:	d17c      	bne.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a47      	ldr	r2, [pc, #284]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a46      	ldr	r2, [pc, #280]	@ (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800323c:	4b45      	ldr	r3, [pc, #276]	@ (8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800323e:	e000      	b.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003240:	4b45      	ldr	r3, [pc, #276]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003242:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d039      	beq.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800324c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	431a      	orrs	r2, r3
 800325a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800325c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a3a      	ldr	r2, [pc, #232]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a38      	ldr	r2, [pc, #224]	@ (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10e      	bne.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003272:	4836      	ldr	r0, [pc, #216]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003274:	f7ff ff72 	bl	800315c <LL_ADC_IsEnabled>
 8003278:	4604      	mov	r4, r0
 800327a:	4835      	ldr	r0, [pc, #212]	@ (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800327c:	f7ff ff6e 	bl	800315c <LL_ADC_IsEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	4323      	orrs	r3, r4
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e008      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003290:	4832      	ldr	r0, [pc, #200]	@ (800335c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003292:	f7ff ff63 	bl	800315c <LL_ADC_IsEnabled>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d047      	beq.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	6811      	ldr	r1, [r2, #0]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	6892      	ldr	r2, [r2, #8]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	431a      	orrs	r2, r3
 80032ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032bc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032be:	e03a      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1d      	ldr	r2, [pc, #116]	@ (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10e      	bne.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80032e0:	481a      	ldr	r0, [pc, #104]	@ (800334c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032e2:	f7ff ff3b 	bl	800315c <LL_ADC_IsEnabled>
 80032e6:	4604      	mov	r4, r0
 80032e8:	4819      	ldr	r0, [pc, #100]	@ (8003350 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032ea:	f7ff ff37 	bl	800315c <LL_ADC_IsEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4323      	orrs	r3, r4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	e008      	b.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80032fe:	4817      	ldr	r0, [pc, #92]	@ (800335c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003300:	f7ff ff2c 	bl	800315c <LL_ADC_IsEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d010      	beq.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800331a:	4013      	ands	r3, r2
 800331c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800331e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003320:	e009      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003334:	e000      	b.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003336:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003340:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003344:	4618      	mov	r0, r3
 8003346:	377c      	adds	r7, #124	@ 0x7c
 8003348:	46bd      	mov	sp, r7
 800334a:	bd90      	pop	{r4, r7, pc}
 800334c:	40022000 	.word	0x40022000
 8003350:	40022100 	.word	0x40022100
 8003354:	40022300 	.word	0x40022300
 8003358:	58026300 	.word	0x58026300
 800335c:	58026000 	.word	0x58026000
 8003360:	fffff0e0 	.word	0xfffff0e0

08003364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003374:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003380:	4013      	ands	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 800338e:	4313      	orrs	r3, r2
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x40>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00
 80033a8:	05fa0000 	.word	0x05fa0000

080033ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b0:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <__NVIC_GetPriorityGrouping+0x18>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	f003 0307 	and.w	r3, r3, #7
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	db0b      	blt.n	80033f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4907      	ldr	r1, [pc, #28]	@ (8003400 <__NVIC_EnableIRQ+0x38>)
 80033e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	2001      	movs	r0, #1
 80033ea:	fa00 f202 	lsl.w	r2, r0, r2
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000e100 	.word	0xe000e100

08003404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003414:	2b00      	cmp	r3, #0
 8003416:	db0a      	blt.n	800342e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	490c      	ldr	r1, [pc, #48]	@ (8003450 <__NVIC_SetPriority+0x4c>)
 800341e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003422:	0112      	lsls	r2, r2, #4
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	440b      	add	r3, r1
 8003428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800342c:	e00a      	b.n	8003444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4908      	ldr	r1, [pc, #32]	@ (8003454 <__NVIC_SetPriority+0x50>)
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3b04      	subs	r3, #4
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	440b      	add	r3, r1
 8003442:	761a      	strb	r2, [r3, #24]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000e100 	.word	0xe000e100
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	@ 0x24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f1c3 0307 	rsb	r3, r3, #7
 8003472:	2b04      	cmp	r3, #4
 8003474:	bf28      	it	cs
 8003476:	2304      	movcs	r3, #4
 8003478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3304      	adds	r3, #4
 800347e:	2b06      	cmp	r3, #6
 8003480:	d902      	bls.n	8003488 <NVIC_EncodePriority+0x30>
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3b03      	subs	r3, #3
 8003486:	e000      	b.n	800348a <NVIC_EncodePriority+0x32>
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	401a      	ands	r2, r3
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a0:	f04f 31ff 	mov.w	r1, #4294967295
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	43d9      	mvns	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b0:	4313      	orrs	r3, r2
         );
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3724      	adds	r7, #36	@ 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d0:	d301      	bcc.n	80034d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d2:	2301      	movs	r3, #1
 80034d4:	e00f      	b.n	80034f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <SysTick_Config+0x40>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034de:	210f      	movs	r1, #15
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	f7ff ff8e 	bl	8003404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <SysTick_Config+0x40>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ee:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <SysTick_Config+0x40>)
 80034f0:	2207      	movs	r2, #7
 80034f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	e000e010 	.word	0xe000e010

08003504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff29 	bl	8003364 <__NVIC_SetPriorityGrouping>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003528:	f7ff ff40 	bl	80033ac <__NVIC_GetPriorityGrouping>
 800352c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	6978      	ldr	r0, [r7, #20]
 8003534:	f7ff ff90 	bl	8003458 <NVIC_EncodePriority>
 8003538:	4602      	mov	r2, r0
 800353a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff5f 	bl	8003404 <__NVIC_SetPriority>
}
 8003546:	bf00      	nop
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff33 	bl	80033c8 <__NVIC_EnableIRQ>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffa4 	bl	80034c0 <SysTick_Config>
 8003578:	4603      	mov	r3, r0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003588:	f3bf 8f5f 	dmb	sy
}
 800358c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800358e:	4b07      	ldr	r3, [pc, #28]	@ (80035ac <HAL_MPU_Disable+0x28>)
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	4a06      	ldr	r2, [pc, #24]	@ (80035ac <HAL_MPU_Disable+0x28>)
 8003594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003598:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800359a:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_MPU_Disable+0x2c>)
 800359c:	2200      	movs	r2, #0
 800359e:	605a      	str	r2, [r3, #4]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000ed00 	.word	0xe000ed00
 80035b0:	e000ed90 	.word	0xe000ed90

080035b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80035bc:	4a0b      	ldr	r2, [pc, #44]	@ (80035ec <HAL_MPU_Enable+0x38>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_MPU_Enable+0x3c>)
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	4a09      	ldr	r2, [pc, #36]	@ (80035f0 <HAL_MPU_Enable+0x3c>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80035d2:	f3bf 8f4f 	dsb	sy
}
 80035d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035d8:	f3bf 8f6f 	isb	sy
}
 80035dc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000ed90 	.word	0xe000ed90
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	785a      	ldrb	r2, [r3, #1]
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_MPU_ConfigRegion+0x7c>)
 8003602:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003604:	4b1a      	ldr	r3, [pc, #104]	@ (8003670 <HAL_MPU_ConfigRegion+0x7c>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <HAL_MPU_ConfigRegion+0x7c>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003610:	4a17      	ldr	r2, [pc, #92]	@ (8003670 <HAL_MPU_ConfigRegion+0x7c>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7b1b      	ldrb	r3, [r3, #12]
 800361c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7adb      	ldrb	r3, [r3, #11]
 8003622:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003624:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7a9b      	ldrb	r3, [r3, #10]
 800362a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800362c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7b5b      	ldrb	r3, [r3, #13]
 8003632:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003634:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7b9b      	ldrb	r3, [r3, #14]
 800363a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800363c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7bdb      	ldrb	r3, [r3, #15]
 8003642:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003644:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7a5b      	ldrb	r3, [r3, #9]
 800364a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800364c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	7a1b      	ldrb	r3, [r3, #8]
 8003652:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003654:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800365c:	4a04      	ldr	r2, [pc, #16]	@ (8003670 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800365e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003660:	6113      	str	r3, [r2, #16]
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000ed90 	.word	0xe000ed90

08003674 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800367c:	f7fe fb84 	bl	8001d88 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e316      	b.n	8003cba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a66      	ldr	r2, [pc, #408]	@ (800382c <HAL_DMA_Init+0x1b8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04a      	beq.n	800372c <HAL_DMA_Init+0xb8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a65      	ldr	r2, [pc, #404]	@ (8003830 <HAL_DMA_Init+0x1bc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d045      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a63      	ldr	r2, [pc, #396]	@ (8003834 <HAL_DMA_Init+0x1c0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d040      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a62      	ldr	r2, [pc, #392]	@ (8003838 <HAL_DMA_Init+0x1c4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d03b      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a60      	ldr	r2, [pc, #384]	@ (800383c <HAL_DMA_Init+0x1c8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003840 <HAL_DMA_Init+0x1cc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d031      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003844 <HAL_DMA_Init+0x1d0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02c      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a5c      	ldr	r2, [pc, #368]	@ (8003848 <HAL_DMA_Init+0x1d4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5a      	ldr	r2, [pc, #360]	@ (800384c <HAL_DMA_Init+0x1d8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a59      	ldr	r2, [pc, #356]	@ (8003850 <HAL_DMA_Init+0x1dc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a57      	ldr	r2, [pc, #348]	@ (8003854 <HAL_DMA_Init+0x1e0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_Init+0xb8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a56      	ldr	r2, [pc, #344]	@ (8003858 <HAL_DMA_Init+0x1e4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_DMA_Init+0xb8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a54      	ldr	r2, [pc, #336]	@ (800385c <HAL_DMA_Init+0x1e8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_DMA_Init+0xb8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a53      	ldr	r2, [pc, #332]	@ (8003860 <HAL_DMA_Init+0x1ec>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_DMA_Init+0xb8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a51      	ldr	r2, [pc, #324]	@ (8003864 <HAL_DMA_Init+0x1f0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_DMA_Init+0xb8>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a50      	ldr	r2, [pc, #320]	@ (8003868 <HAL_DMA_Init+0x1f4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_DMA_Init+0xbc>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_DMA_Init+0xbe>
 8003730:	2300      	movs	r3, #0
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 813b 	beq.w	80039ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a37      	ldr	r2, [pc, #220]	@ (800382c <HAL_DMA_Init+0x1b8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04a      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a36      	ldr	r2, [pc, #216]	@ (8003830 <HAL_DMA_Init+0x1bc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d045      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a34      	ldr	r2, [pc, #208]	@ (8003834 <HAL_DMA_Init+0x1c0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d040      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a33      	ldr	r2, [pc, #204]	@ (8003838 <HAL_DMA_Init+0x1c4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d03b      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a31      	ldr	r2, [pc, #196]	@ (800383c <HAL_DMA_Init+0x1c8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d036      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a30      	ldr	r2, [pc, #192]	@ (8003840 <HAL_DMA_Init+0x1cc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d031      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2e      	ldr	r2, [pc, #184]	@ (8003844 <HAL_DMA_Init+0x1d0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02c      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2d      	ldr	r2, [pc, #180]	@ (8003848 <HAL_DMA_Init+0x1d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d027      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2b      	ldr	r2, [pc, #172]	@ (800384c <HAL_DMA_Init+0x1d8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003850 <HAL_DMA_Init+0x1dc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01d      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a28      	ldr	r2, [pc, #160]	@ (8003854 <HAL_DMA_Init+0x1e0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a27      	ldr	r2, [pc, #156]	@ (8003858 <HAL_DMA_Init+0x1e4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a25      	ldr	r2, [pc, #148]	@ (800385c <HAL_DMA_Init+0x1e8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a24      	ldr	r2, [pc, #144]	@ (8003860 <HAL_DMA_Init+0x1ec>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a22      	ldr	r2, [pc, #136]	@ (8003864 <HAL_DMA_Init+0x1f0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_Init+0x174>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a21      	ldr	r2, [pc, #132]	@ (8003868 <HAL_DMA_Init+0x1f4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <HAL_DMA_Init+0x186>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e007      	b.n	800380a <HAL_DMA_Init+0x196>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800380a:	e02f      	b.n	800386c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800380c:	f7fe fabc 	bl	8001d88 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b05      	cmp	r3, #5
 8003818:	d928      	bls.n	800386c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2203      	movs	r2, #3
 8003824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e246      	b.n	8003cba <HAL_DMA_Init+0x646>
 800382c:	40020010 	.word	0x40020010
 8003830:	40020028 	.word	0x40020028
 8003834:	40020040 	.word	0x40020040
 8003838:	40020058 	.word	0x40020058
 800383c:	40020070 	.word	0x40020070
 8003840:	40020088 	.word	0x40020088
 8003844:	400200a0 	.word	0x400200a0
 8003848:	400200b8 	.word	0x400200b8
 800384c:	40020410 	.word	0x40020410
 8003850:	40020428 	.word	0x40020428
 8003854:	40020440 	.word	0x40020440
 8003858:	40020458 	.word	0x40020458
 800385c:	40020470 	.word	0x40020470
 8003860:	40020488 	.word	0x40020488
 8003864:	400204a0 	.word	0x400204a0
 8003868:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1c8      	bne.n	800380c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4b83      	ldr	r3, [pc, #524]	@ (8003a94 <HAL_DMA_Init+0x420>)
 8003886:	4013      	ands	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003892:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d107      	bne.n	80038d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	4313      	orrs	r3, r2
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80038d0:	4b71      	ldr	r3, [pc, #452]	@ (8003a98 <HAL_DMA_Init+0x424>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b71      	ldr	r3, [pc, #452]	@ (8003a9c <HAL_DMA_Init+0x428>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038dc:	d328      	bcc.n	8003930 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b28      	cmp	r3, #40	@ 0x28
 80038e4:	d903      	bls.n	80038ee <HAL_DMA_Init+0x27a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80038ec:	d917      	bls.n	800391e <HAL_DMA_Init+0x2aa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80038f4:	d903      	bls.n	80038fe <HAL_DMA_Init+0x28a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b42      	cmp	r3, #66	@ 0x42
 80038fc:	d90f      	bls.n	800391e <HAL_DMA_Init+0x2aa>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b46      	cmp	r3, #70	@ 0x46
 8003904:	d903      	bls.n	800390e <HAL_DMA_Init+0x29a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b48      	cmp	r3, #72	@ 0x48
 800390c:	d907      	bls.n	800391e <HAL_DMA_Init+0x2aa>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b4e      	cmp	r3, #78	@ 0x4e
 8003914:	d905      	bls.n	8003922 <HAL_DMA_Init+0x2ae>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b52      	cmp	r3, #82	@ 0x52
 800391c:	d801      	bhi.n	8003922 <HAL_DMA_Init+0x2ae>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_DMA_Init+0x2b0>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800392e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 0307 	bic.w	r3, r3, #7
 8003946:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	2b04      	cmp	r3, #4
 8003958:	d117      	bne.n	800398a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f002 fb4d 	bl	800600c <DMA_CheckFifoParam>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2240      	movs	r2, #64	@ 0x40
 800397c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e197      	b.n	8003cba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f002 fa88 	bl	8005ea8 <DMA_CalcBaseAndBitshift>
 8003998:	4603      	mov	r3, r0
 800399a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	223f      	movs	r2, #63	@ 0x3f
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	e0cd      	b.n	8003b4a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa0 <HAL_DMA_Init+0x42c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_DMA_Init+0x38a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a39      	ldr	r2, [pc, #228]	@ (8003aa4 <HAL_DMA_Init+0x430>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01d      	beq.n	80039fe <HAL_DMA_Init+0x38a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a38      	ldr	r2, [pc, #224]	@ (8003aa8 <HAL_DMA_Init+0x434>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d018      	beq.n	80039fe <HAL_DMA_Init+0x38a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a36      	ldr	r2, [pc, #216]	@ (8003aac <HAL_DMA_Init+0x438>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_DMA_Init+0x38a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a35      	ldr	r2, [pc, #212]	@ (8003ab0 <HAL_DMA_Init+0x43c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_DMA_Init+0x38a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a33      	ldr	r2, [pc, #204]	@ (8003ab4 <HAL_DMA_Init+0x440>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_DMA_Init+0x38a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a32      	ldr	r2, [pc, #200]	@ (8003ab8 <HAL_DMA_Init+0x444>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_DMA_Init+0x38a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a30      	ldr	r2, [pc, #192]	@ (8003abc <HAL_DMA_Init+0x448>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_DMA_Init+0x38e>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_DMA_Init+0x390>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8097 	beq.w	8003b38 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a24      	ldr	r2, [pc, #144]	@ (8003aa0 <HAL_DMA_Init+0x42c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d021      	beq.n	8003a58 <HAL_DMA_Init+0x3e4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <HAL_DMA_Init+0x430>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01c      	beq.n	8003a58 <HAL_DMA_Init+0x3e4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	@ (8003aa8 <HAL_DMA_Init+0x434>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d017      	beq.n	8003a58 <HAL_DMA_Init+0x3e4>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aac <HAL_DMA_Init+0x438>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d012      	beq.n	8003a58 <HAL_DMA_Init+0x3e4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab0 <HAL_DMA_Init+0x43c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00d      	beq.n	8003a58 <HAL_DMA_Init+0x3e4>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_DMA_Init+0x440>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d008      	beq.n	8003a58 <HAL_DMA_Init+0x3e4>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab8 <HAL_DMA_Init+0x444>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA_Init+0x3e4>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	@ (8003abc <HAL_DMA_Init+0x448>)
 8003a56:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <HAL_DMA_Init+0x44c>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b40      	cmp	r3, #64	@ 0x40
 8003a7e:	d021      	beq.n	8003ac4 <HAL_DMA_Init+0x450>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b80      	cmp	r3, #128	@ 0x80
 8003a86:	d102      	bne.n	8003a8e <HAL_DMA_Init+0x41a>
 8003a88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a8c:	e01b      	b.n	8003ac6 <HAL_DMA_Init+0x452>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e019      	b.n	8003ac6 <HAL_DMA_Init+0x452>
 8003a92:	bf00      	nop
 8003a94:	fe10803f 	.word	0xfe10803f
 8003a98:	5c001000 	.word	0x5c001000
 8003a9c:	ffff0000 	.word	0xffff0000
 8003aa0:	58025408 	.word	0x58025408
 8003aa4:	5802541c 	.word	0x5802541c
 8003aa8:	58025430 	.word	0x58025430
 8003aac:	58025444 	.word	0x58025444
 8003ab0:	58025458 	.word	0x58025458
 8003ab4:	5802546c 	.word	0x5802546c
 8003ab8:	58025480 	.word	0x58025480
 8003abc:	58025494 	.word	0x58025494
 8003ac0:	fffe000f 	.word	0xfffe000f
 8003ac4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003acc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ad4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003adc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ae4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003aec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003af4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b6e      	ldr	r3, [pc, #440]	@ (8003cc4 <HAL_DMA_Init+0x650>)
 8003b0c:	4413      	add	r3, r2
 8003b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8003cc8 <HAL_DMA_Init+0x654>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	009a      	lsls	r2, r3, #2
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f002 f9c3 	bl	8005ea8 <DMA_CalcBaseAndBitshift>
 8003b22:	4603      	mov	r3, r0
 8003b24:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2201      	movs	r2, #1
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	e008      	b.n	8003b4a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2240      	movs	r2, #64	@ 0x40
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0b7      	b.n	8003cba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8003ccc <HAL_DMA_Init+0x658>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d072      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd0 <HAL_DMA_Init+0x65c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d06d      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5c      	ldr	r2, [pc, #368]	@ (8003cd4 <HAL_DMA_Init+0x660>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d068      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd8 <HAL_DMA_Init+0x664>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d063      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a59      	ldr	r2, [pc, #356]	@ (8003cdc <HAL_DMA_Init+0x668>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d05e      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a57      	ldr	r2, [pc, #348]	@ (8003ce0 <HAL_DMA_Init+0x66c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d059      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a56      	ldr	r2, [pc, #344]	@ (8003ce4 <HAL_DMA_Init+0x670>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d054      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a54      	ldr	r2, [pc, #336]	@ (8003ce8 <HAL_DMA_Init+0x674>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d04f      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a53      	ldr	r2, [pc, #332]	@ (8003cec <HAL_DMA_Init+0x678>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d04a      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a51      	ldr	r2, [pc, #324]	@ (8003cf0 <HAL_DMA_Init+0x67c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d045      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a50      	ldr	r2, [pc, #320]	@ (8003cf4 <HAL_DMA_Init+0x680>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d040      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a4e      	ldr	r2, [pc, #312]	@ (8003cf8 <HAL_DMA_Init+0x684>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03b      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a4d      	ldr	r2, [pc, #308]	@ (8003cfc <HAL_DMA_Init+0x688>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d036      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8003d00 <HAL_DMA_Init+0x68c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d031      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a4a      	ldr	r2, [pc, #296]	@ (8003d04 <HAL_DMA_Init+0x690>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d02c      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a48      	ldr	r2, [pc, #288]	@ (8003d08 <HAL_DMA_Init+0x694>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d027      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a47      	ldr	r2, [pc, #284]	@ (8003d0c <HAL_DMA_Init+0x698>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a45      	ldr	r2, [pc, #276]	@ (8003d10 <HAL_DMA_Init+0x69c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a44      	ldr	r2, [pc, #272]	@ (8003d14 <HAL_DMA_Init+0x6a0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a42      	ldr	r2, [pc, #264]	@ (8003d18 <HAL_DMA_Init+0x6a4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a41      	ldr	r2, [pc, #260]	@ (8003d1c <HAL_DMA_Init+0x6a8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3f      	ldr	r2, [pc, #252]	@ (8003d20 <HAL_DMA_Init+0x6ac>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d24 <HAL_DMA_Init+0x6b0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_Init+0x5c6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a3c      	ldr	r2, [pc, #240]	@ (8003d28 <HAL_DMA_Init+0x6b4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_DMA_Init+0x5ca>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_DMA_Init+0x5cc>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d032      	beq.n	8003caa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f002 fa5d 	bl	8006104 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b80      	cmp	r3, #128	@ 0x80
 8003c50:	d102      	bne.n	8003c58 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c6c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_DMA_Init+0x624>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d80c      	bhi.n	8003c98 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f002 fada 	bl	8006238 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	e008      	b.n	8003caa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	a7fdabf8 	.word	0xa7fdabf8
 8003cc8:	cccccccd 	.word	0xcccccccd
 8003ccc:	40020010 	.word	0x40020010
 8003cd0:	40020028 	.word	0x40020028
 8003cd4:	40020040 	.word	0x40020040
 8003cd8:	40020058 	.word	0x40020058
 8003cdc:	40020070 	.word	0x40020070
 8003ce0:	40020088 	.word	0x40020088
 8003ce4:	400200a0 	.word	0x400200a0
 8003ce8:	400200b8 	.word	0x400200b8
 8003cec:	40020410 	.word	0x40020410
 8003cf0:	40020428 	.word	0x40020428
 8003cf4:	40020440 	.word	0x40020440
 8003cf8:	40020458 	.word	0x40020458
 8003cfc:	40020470 	.word	0x40020470
 8003d00:	40020488 	.word	0x40020488
 8003d04:	400204a0 	.word	0x400204a0
 8003d08:	400204b8 	.word	0x400204b8
 8003d0c:	58025408 	.word	0x58025408
 8003d10:	5802541c 	.word	0x5802541c
 8003d14:	58025430 	.word	0x58025430
 8003d18:	58025444 	.word	0x58025444
 8003d1c:	58025458 	.word	0x58025458
 8003d20:	5802546c 	.word	0x5802546c
 8003d24:	58025480 	.word	0x58025480
 8003d28:	58025494 	.word	0x58025494

08003d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e226      	b.n	8004196 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_DMA_Start_IT+0x2a>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e21f      	b.n	8004196 <HAL_DMA_Start_IT+0x46a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	f040 820a 	bne.w	8004180 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a68      	ldr	r2, [pc, #416]	@ (8003f20 <HAL_DMA_Start_IT+0x1f4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d04a      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a66      	ldr	r2, [pc, #408]	@ (8003f24 <HAL_DMA_Start_IT+0x1f8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d045      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a65      	ldr	r2, [pc, #404]	@ (8003f28 <HAL_DMA_Start_IT+0x1fc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d040      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a63      	ldr	r2, [pc, #396]	@ (8003f2c <HAL_DMA_Start_IT+0x200>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d03b      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a62      	ldr	r2, [pc, #392]	@ (8003f30 <HAL_DMA_Start_IT+0x204>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d036      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a60      	ldr	r2, [pc, #384]	@ (8003f34 <HAL_DMA_Start_IT+0x208>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d031      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5f      	ldr	r2, [pc, #380]	@ (8003f38 <HAL_DMA_Start_IT+0x20c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d02c      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f3c <HAL_DMA_Start_IT+0x210>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d027      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5c      	ldr	r2, [pc, #368]	@ (8003f40 <HAL_DMA_Start_IT+0x214>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f44 <HAL_DMA_Start_IT+0x218>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a59      	ldr	r2, [pc, #356]	@ (8003f48 <HAL_DMA_Start_IT+0x21c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a57      	ldr	r2, [pc, #348]	@ (8003f4c <HAL_DMA_Start_IT+0x220>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a56      	ldr	r2, [pc, #344]	@ (8003f50 <HAL_DMA_Start_IT+0x224>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a54      	ldr	r2, [pc, #336]	@ (8003f54 <HAL_DMA_Start_IT+0x228>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a53      	ldr	r2, [pc, #332]	@ (8003f58 <HAL_DMA_Start_IT+0x22c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_Start_IT+0xee>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a51      	ldr	r2, [pc, #324]	@ (8003f5c <HAL_DMA_Start_IT+0x230>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_Start_IT+0x100>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e007      	b.n	8003e3c <HAL_DMA_Start_IT+0x110>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f001 fe84 	bl	8005b50 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a34      	ldr	r2, [pc, #208]	@ (8003f20 <HAL_DMA_Start_IT+0x1f4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d04a      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a33      	ldr	r2, [pc, #204]	@ (8003f24 <HAL_DMA_Start_IT+0x1f8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d045      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a31      	ldr	r2, [pc, #196]	@ (8003f28 <HAL_DMA_Start_IT+0x1fc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d040      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a30      	ldr	r2, [pc, #192]	@ (8003f2c <HAL_DMA_Start_IT+0x200>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d03b      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2e      	ldr	r2, [pc, #184]	@ (8003f30 <HAL_DMA_Start_IT+0x204>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d036      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f34 <HAL_DMA_Start_IT+0x208>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d031      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2b      	ldr	r2, [pc, #172]	@ (8003f38 <HAL_DMA_Start_IT+0x20c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02c      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2a      	ldr	r2, [pc, #168]	@ (8003f3c <HAL_DMA_Start_IT+0x210>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d027      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	@ (8003f40 <HAL_DMA_Start_IT+0x214>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d022      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a27      	ldr	r2, [pc, #156]	@ (8003f44 <HAL_DMA_Start_IT+0x218>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01d      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a25      	ldr	r2, [pc, #148]	@ (8003f48 <HAL_DMA_Start_IT+0x21c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d018      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a24      	ldr	r2, [pc, #144]	@ (8003f4c <HAL_DMA_Start_IT+0x220>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d013      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	@ (8003f50 <HAL_DMA_Start_IT+0x224>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	@ (8003f54 <HAL_DMA_Start_IT+0x228>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d009      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f58 <HAL_DMA_Start_IT+0x22c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x1bc>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f5c <HAL_DMA_Start_IT+0x230>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <HAL_DMA_Start_IT+0x1c0>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_DMA_Start_IT+0x1c2>
 8003eec:	2300      	movs	r3, #0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d036      	beq.n	8003f60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f023 021e 	bic.w	r2, r3, #30
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0216 	orr.w	r2, r2, #22
 8003f04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d03e      	beq.n	8003f8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0208 	orr.w	r2, r2, #8
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e035      	b.n	8003f8c <HAL_DMA_Start_IT+0x260>
 8003f20:	40020010 	.word	0x40020010
 8003f24:	40020028 	.word	0x40020028
 8003f28:	40020040 	.word	0x40020040
 8003f2c:	40020058 	.word	0x40020058
 8003f30:	40020070 	.word	0x40020070
 8003f34:	40020088 	.word	0x40020088
 8003f38:	400200a0 	.word	0x400200a0
 8003f3c:	400200b8 	.word	0x400200b8
 8003f40:	40020410 	.word	0x40020410
 8003f44:	40020428 	.word	0x40020428
 8003f48:	40020440 	.word	0x40020440
 8003f4c:	40020458 	.word	0x40020458
 8003f50:	40020470 	.word	0x40020470
 8003f54:	40020488 	.word	0x40020488
 8003f58:	400204a0 	.word	0x400204a0
 8003f5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 020e 	bic.w	r2, r3, #14
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 020a 	orr.w	r2, r2, #10
 8003f72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0204 	orr.w	r2, r2, #4
 8003f8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a83      	ldr	r2, [pc, #524]	@ (80041a0 <HAL_DMA_Start_IT+0x474>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d072      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a82      	ldr	r2, [pc, #520]	@ (80041a4 <HAL_DMA_Start_IT+0x478>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d06d      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a80      	ldr	r2, [pc, #512]	@ (80041a8 <HAL_DMA_Start_IT+0x47c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d068      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7f      	ldr	r2, [pc, #508]	@ (80041ac <HAL_DMA_Start_IT+0x480>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d063      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7d      	ldr	r2, [pc, #500]	@ (80041b0 <HAL_DMA_Start_IT+0x484>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d05e      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80041b4 <HAL_DMA_Start_IT+0x488>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d059      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7a      	ldr	r2, [pc, #488]	@ (80041b8 <HAL_DMA_Start_IT+0x48c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d054      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a79      	ldr	r2, [pc, #484]	@ (80041bc <HAL_DMA_Start_IT+0x490>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d04f      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a77      	ldr	r2, [pc, #476]	@ (80041c0 <HAL_DMA_Start_IT+0x494>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d04a      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a76      	ldr	r2, [pc, #472]	@ (80041c4 <HAL_DMA_Start_IT+0x498>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d045      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a74      	ldr	r2, [pc, #464]	@ (80041c8 <HAL_DMA_Start_IT+0x49c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d040      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a73      	ldr	r2, [pc, #460]	@ (80041cc <HAL_DMA_Start_IT+0x4a0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d03b      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a71      	ldr	r2, [pc, #452]	@ (80041d0 <HAL_DMA_Start_IT+0x4a4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d036      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a70      	ldr	r2, [pc, #448]	@ (80041d4 <HAL_DMA_Start_IT+0x4a8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d031      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6e      	ldr	r2, [pc, #440]	@ (80041d8 <HAL_DMA_Start_IT+0x4ac>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02c      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a6d      	ldr	r2, [pc, #436]	@ (80041dc <HAL_DMA_Start_IT+0x4b0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d027      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a6b      	ldr	r2, [pc, #428]	@ (80041e0 <HAL_DMA_Start_IT+0x4b4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6a      	ldr	r2, [pc, #424]	@ (80041e4 <HAL_DMA_Start_IT+0x4b8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d01d      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a68      	ldr	r2, [pc, #416]	@ (80041e8 <HAL_DMA_Start_IT+0x4bc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a67      	ldr	r2, [pc, #412]	@ (80041ec <HAL_DMA_Start_IT+0x4c0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a65      	ldr	r2, [pc, #404]	@ (80041f0 <HAL_DMA_Start_IT+0x4c4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a64      	ldr	r2, [pc, #400]	@ (80041f4 <HAL_DMA_Start_IT+0x4c8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a62      	ldr	r2, [pc, #392]	@ (80041f8 <HAL_DMA_Start_IT+0x4cc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_DMA_Start_IT+0x350>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a61      	ldr	r2, [pc, #388]	@ (80041fc <HAL_DMA_Start_IT+0x4d0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <HAL_DMA_Start_IT+0x354>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_DMA_Start_IT+0x356>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01a      	beq.n	80040bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a37      	ldr	r2, [pc, #220]	@ (80041a0 <HAL_DMA_Start_IT+0x474>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a36      	ldr	r2, [pc, #216]	@ (80041a4 <HAL_DMA_Start_IT+0x478>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d045      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a34      	ldr	r2, [pc, #208]	@ (80041a8 <HAL_DMA_Start_IT+0x47c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d040      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a33      	ldr	r2, [pc, #204]	@ (80041ac <HAL_DMA_Start_IT+0x480>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03b      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a31      	ldr	r2, [pc, #196]	@ (80041b0 <HAL_DMA_Start_IT+0x484>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d036      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a30      	ldr	r2, [pc, #192]	@ (80041b4 <HAL_DMA_Start_IT+0x488>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d031      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2e      	ldr	r2, [pc, #184]	@ (80041b8 <HAL_DMA_Start_IT+0x48c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2d      	ldr	r2, [pc, #180]	@ (80041bc <HAL_DMA_Start_IT+0x490>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d027      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2b      	ldr	r2, [pc, #172]	@ (80041c0 <HAL_DMA_Start_IT+0x494>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2a      	ldr	r2, [pc, #168]	@ (80041c4 <HAL_DMA_Start_IT+0x498>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a28      	ldr	r2, [pc, #160]	@ (80041c8 <HAL_DMA_Start_IT+0x49c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a27      	ldr	r2, [pc, #156]	@ (80041cc <HAL_DMA_Start_IT+0x4a0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a25      	ldr	r2, [pc, #148]	@ (80041d0 <HAL_DMA_Start_IT+0x4a4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a24      	ldr	r2, [pc, #144]	@ (80041d4 <HAL_DMA_Start_IT+0x4a8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a22      	ldr	r2, [pc, #136]	@ (80041d8 <HAL_DMA_Start_IT+0x4ac>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_DMA_Start_IT+0x430>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a21      	ldr	r2, [pc, #132]	@ (80041dc <HAL_DMA_Start_IT+0x4b0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <HAL_DMA_Start_IT+0x442>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e012      	b.n	8004194 <HAL_DMA_Start_IT+0x468>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e009      	b.n	8004194 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004186:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004194:	7dfb      	ldrb	r3, [r7, #23]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40020010 	.word	0x40020010
 80041a4:	40020028 	.word	0x40020028
 80041a8:	40020040 	.word	0x40020040
 80041ac:	40020058 	.word	0x40020058
 80041b0:	40020070 	.word	0x40020070
 80041b4:	40020088 	.word	0x40020088
 80041b8:	400200a0 	.word	0x400200a0
 80041bc:	400200b8 	.word	0x400200b8
 80041c0:	40020410 	.word	0x40020410
 80041c4:	40020428 	.word	0x40020428
 80041c8:	40020440 	.word	0x40020440
 80041cc:	40020458 	.word	0x40020458
 80041d0:	40020470 	.word	0x40020470
 80041d4:	40020488 	.word	0x40020488
 80041d8:	400204a0 	.word	0x400204a0
 80041dc:	400204b8 	.word	0x400204b8
 80041e0:	58025408 	.word	0x58025408
 80041e4:	5802541c 	.word	0x5802541c
 80041e8:	58025430 	.word	0x58025430
 80041ec:	58025444 	.word	0x58025444
 80041f0:	58025458 	.word	0x58025458
 80041f4:	5802546c 	.word	0x5802546c
 80041f8:	58025480 	.word	0x58025480
 80041fc:	58025494 	.word	0x58025494

08004200 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004208:	f7fd fdbe 	bl	8001d88 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e2dc      	b.n	80047d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d008      	beq.n	8004236 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e2cd      	b.n	80047d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a76      	ldr	r2, [pc, #472]	@ (8004414 <HAL_DMA_Abort+0x214>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d04a      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a74      	ldr	r2, [pc, #464]	@ (8004418 <HAL_DMA_Abort+0x218>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d045      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a73      	ldr	r2, [pc, #460]	@ (800441c <HAL_DMA_Abort+0x21c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d040      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a71      	ldr	r2, [pc, #452]	@ (8004420 <HAL_DMA_Abort+0x220>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d03b      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a70      	ldr	r2, [pc, #448]	@ (8004424 <HAL_DMA_Abort+0x224>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d036      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a6e      	ldr	r2, [pc, #440]	@ (8004428 <HAL_DMA_Abort+0x228>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d031      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6d      	ldr	r2, [pc, #436]	@ (800442c <HAL_DMA_Abort+0x22c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d02c      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a6b      	ldr	r2, [pc, #428]	@ (8004430 <HAL_DMA_Abort+0x230>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d027      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6a      	ldr	r2, [pc, #424]	@ (8004434 <HAL_DMA_Abort+0x234>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d022      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a68      	ldr	r2, [pc, #416]	@ (8004438 <HAL_DMA_Abort+0x238>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01d      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a67      	ldr	r2, [pc, #412]	@ (800443c <HAL_DMA_Abort+0x23c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a65      	ldr	r2, [pc, #404]	@ (8004440 <HAL_DMA_Abort+0x240>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a64      	ldr	r2, [pc, #400]	@ (8004444 <HAL_DMA_Abort+0x244>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a62      	ldr	r2, [pc, #392]	@ (8004448 <HAL_DMA_Abort+0x248>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a61      	ldr	r2, [pc, #388]	@ (800444c <HAL_DMA_Abort+0x24c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_DMA_Abort+0xd6>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5f      	ldr	r2, [pc, #380]	@ (8004450 <HAL_DMA_Abort+0x250>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_DMA_Abort+0xda>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_DMA_Abort+0xdc>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 021e 	bic.w	r2, r2, #30
 80042ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	e00a      	b.n	800431e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 020e 	bic.w	r2, r2, #14
 8004316:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a3c      	ldr	r2, [pc, #240]	@ (8004414 <HAL_DMA_Abort+0x214>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d072      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a3a      	ldr	r2, [pc, #232]	@ (8004418 <HAL_DMA_Abort+0x218>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d06d      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a39      	ldr	r2, [pc, #228]	@ (800441c <HAL_DMA_Abort+0x21c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d068      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a37      	ldr	r2, [pc, #220]	@ (8004420 <HAL_DMA_Abort+0x220>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d063      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a36      	ldr	r2, [pc, #216]	@ (8004424 <HAL_DMA_Abort+0x224>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d05e      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a34      	ldr	r2, [pc, #208]	@ (8004428 <HAL_DMA_Abort+0x228>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d059      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a33      	ldr	r2, [pc, #204]	@ (800442c <HAL_DMA_Abort+0x22c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d054      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a31      	ldr	r2, [pc, #196]	@ (8004430 <HAL_DMA_Abort+0x230>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d04f      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a30      	ldr	r2, [pc, #192]	@ (8004434 <HAL_DMA_Abort+0x234>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d04a      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2e      	ldr	r2, [pc, #184]	@ (8004438 <HAL_DMA_Abort+0x238>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d045      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2d      	ldr	r2, [pc, #180]	@ (800443c <HAL_DMA_Abort+0x23c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d040      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2b      	ldr	r2, [pc, #172]	@ (8004440 <HAL_DMA_Abort+0x240>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d03b      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2a      	ldr	r2, [pc, #168]	@ (8004444 <HAL_DMA_Abort+0x244>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d036      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a28      	ldr	r2, [pc, #160]	@ (8004448 <HAL_DMA_Abort+0x248>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d031      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a27      	ldr	r2, [pc, #156]	@ (800444c <HAL_DMA_Abort+0x24c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d02c      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a25      	ldr	r2, [pc, #148]	@ (8004450 <HAL_DMA_Abort+0x250>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d027      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a24      	ldr	r2, [pc, #144]	@ (8004454 <HAL_DMA_Abort+0x254>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a22      	ldr	r2, [pc, #136]	@ (8004458 <HAL_DMA_Abort+0x258>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01d      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a21      	ldr	r2, [pc, #132]	@ (800445c <HAL_DMA_Abort+0x25c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <HAL_DMA_Abort+0x260>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_DMA_Abort+0x264>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004468 <HAL_DMA_Abort+0x268>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <HAL_DMA_Abort+0x26c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_DMA_Abort+0x20e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a19      	ldr	r2, [pc, #100]	@ (8004470 <HAL_DMA_Abort+0x270>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d132      	bne.n	8004474 <HAL_DMA_Abort+0x274>
 800440e:	2301      	movs	r3, #1
 8004410:	e031      	b.n	8004476 <HAL_DMA_Abort+0x276>
 8004412:	bf00      	nop
 8004414:	40020010 	.word	0x40020010
 8004418:	40020028 	.word	0x40020028
 800441c:	40020040 	.word	0x40020040
 8004420:	40020058 	.word	0x40020058
 8004424:	40020070 	.word	0x40020070
 8004428:	40020088 	.word	0x40020088
 800442c:	400200a0 	.word	0x400200a0
 8004430:	400200b8 	.word	0x400200b8
 8004434:	40020410 	.word	0x40020410
 8004438:	40020428 	.word	0x40020428
 800443c:	40020440 	.word	0x40020440
 8004440:	40020458 	.word	0x40020458
 8004444:	40020470 	.word	0x40020470
 8004448:	40020488 	.word	0x40020488
 800444c:	400204a0 	.word	0x400204a0
 8004450:	400204b8 	.word	0x400204b8
 8004454:	58025408 	.word	0x58025408
 8004458:	5802541c 	.word	0x5802541c
 800445c:	58025430 	.word	0x58025430
 8004460:	58025444 	.word	0x58025444
 8004464:	58025458 	.word	0x58025458
 8004468:	5802546c 	.word	0x5802546c
 800446c:	58025480 	.word	0x58025480
 8004470:	58025494 	.word	0x58025494
 8004474:	2300      	movs	r3, #0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004488:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6d      	ldr	r2, [pc, #436]	@ (8004644 <HAL_DMA_Abort+0x444>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d04a      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a6b      	ldr	r2, [pc, #428]	@ (8004648 <HAL_DMA_Abort+0x448>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d045      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a6a      	ldr	r2, [pc, #424]	@ (800464c <HAL_DMA_Abort+0x44c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d040      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a68      	ldr	r2, [pc, #416]	@ (8004650 <HAL_DMA_Abort+0x450>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d03b      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a67      	ldr	r2, [pc, #412]	@ (8004654 <HAL_DMA_Abort+0x454>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d036      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a65      	ldr	r2, [pc, #404]	@ (8004658 <HAL_DMA_Abort+0x458>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d031      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a64      	ldr	r2, [pc, #400]	@ (800465c <HAL_DMA_Abort+0x45c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d02c      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a62      	ldr	r2, [pc, #392]	@ (8004660 <HAL_DMA_Abort+0x460>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d027      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a61      	ldr	r2, [pc, #388]	@ (8004664 <HAL_DMA_Abort+0x464>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d022      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004668 <HAL_DMA_Abort+0x468>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01d      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a5e      	ldr	r2, [pc, #376]	@ (800466c <HAL_DMA_Abort+0x46c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d018      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004670 <HAL_DMA_Abort+0x470>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a5b      	ldr	r2, [pc, #364]	@ (8004674 <HAL_DMA_Abort+0x474>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a59      	ldr	r2, [pc, #356]	@ (8004678 <HAL_DMA_Abort+0x478>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a58      	ldr	r2, [pc, #352]	@ (800467c <HAL_DMA_Abort+0x47c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_DMA_Abort+0x32a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a56      	ldr	r2, [pc, #344]	@ (8004680 <HAL_DMA_Abort+0x480>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <HAL_DMA_Abort+0x33c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e007      	b.n	800454c <HAL_DMA_Abort+0x34c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800454c:	e013      	b.n	8004576 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800454e:	f7fd fc1b 	bl	8001d88 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b05      	cmp	r3, #5
 800455a:	d90c      	bls.n	8004576 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2203      	movs	r2, #3
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e12d      	b.n	80047d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2f      	ldr	r2, [pc, #188]	@ (8004644 <HAL_DMA_Abort+0x444>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d04a      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2d      	ldr	r2, [pc, #180]	@ (8004648 <HAL_DMA_Abort+0x448>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d045      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2c      	ldr	r2, [pc, #176]	@ (800464c <HAL_DMA_Abort+0x44c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d040      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004650 <HAL_DMA_Abort+0x450>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d03b      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a29      	ldr	r2, [pc, #164]	@ (8004654 <HAL_DMA_Abort+0x454>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d036      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a27      	ldr	r2, [pc, #156]	@ (8004658 <HAL_DMA_Abort+0x458>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d031      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a26      	ldr	r2, [pc, #152]	@ (800465c <HAL_DMA_Abort+0x45c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d02c      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a24      	ldr	r2, [pc, #144]	@ (8004660 <HAL_DMA_Abort+0x460>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d027      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a23      	ldr	r2, [pc, #140]	@ (8004664 <HAL_DMA_Abort+0x464>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a21      	ldr	r2, [pc, #132]	@ (8004668 <HAL_DMA_Abort+0x468>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01d      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a20      	ldr	r2, [pc, #128]	@ (800466c <HAL_DMA_Abort+0x46c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004670 <HAL_DMA_Abort+0x470>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004674 <HAL_DMA_Abort+0x474>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1b      	ldr	r2, [pc, #108]	@ (8004678 <HAL_DMA_Abort+0x478>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_DMA_Abort+0x47c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_DMA_Abort+0x422>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <HAL_DMA_Abort+0x480>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_DMA_Abort+0x426>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <HAL_DMA_Abort+0x428>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02b      	beq.n	8004684 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004630:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	223f      	movs	r2, #63	@ 0x3f
 800463c:	409a      	lsls	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	609a      	str	r2, [r3, #8]
 8004642:	e02a      	b.n	800469a <HAL_DMA_Abort+0x49a>
 8004644:	40020010 	.word	0x40020010
 8004648:	40020028 	.word	0x40020028
 800464c:	40020040 	.word	0x40020040
 8004650:	40020058 	.word	0x40020058
 8004654:	40020070 	.word	0x40020070
 8004658:	40020088 	.word	0x40020088
 800465c:	400200a0 	.word	0x400200a0
 8004660:	400200b8 	.word	0x400200b8
 8004664:	40020410 	.word	0x40020410
 8004668:	40020428 	.word	0x40020428
 800466c:	40020440 	.word	0x40020440
 8004670:	40020458 	.word	0x40020458
 8004674:	40020470 	.word	0x40020470
 8004678:	40020488 	.word	0x40020488
 800467c:	400204a0 	.word	0x400204a0
 8004680:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004688:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	2201      	movs	r2, #1
 8004694:	409a      	lsls	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4f      	ldr	r2, [pc, #316]	@ (80047dc <HAL_DMA_Abort+0x5dc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d072      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a4d      	ldr	r2, [pc, #308]	@ (80047e0 <HAL_DMA_Abort+0x5e0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d06d      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4c      	ldr	r2, [pc, #304]	@ (80047e4 <HAL_DMA_Abort+0x5e4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d068      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a4a      	ldr	r2, [pc, #296]	@ (80047e8 <HAL_DMA_Abort+0x5e8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d063      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a49      	ldr	r2, [pc, #292]	@ (80047ec <HAL_DMA_Abort+0x5ec>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d05e      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a47      	ldr	r2, [pc, #284]	@ (80047f0 <HAL_DMA_Abort+0x5f0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d059      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a46      	ldr	r2, [pc, #280]	@ (80047f4 <HAL_DMA_Abort+0x5f4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d054      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a44      	ldr	r2, [pc, #272]	@ (80047f8 <HAL_DMA_Abort+0x5f8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d04f      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a43      	ldr	r2, [pc, #268]	@ (80047fc <HAL_DMA_Abort+0x5fc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d04a      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a41      	ldr	r2, [pc, #260]	@ (8004800 <HAL_DMA_Abort+0x600>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d045      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a40      	ldr	r2, [pc, #256]	@ (8004804 <HAL_DMA_Abort+0x604>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d040      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3e      	ldr	r2, [pc, #248]	@ (8004808 <HAL_DMA_Abort+0x608>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d03b      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3d      	ldr	r2, [pc, #244]	@ (800480c <HAL_DMA_Abort+0x60c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d036      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a3b      	ldr	r2, [pc, #236]	@ (8004810 <HAL_DMA_Abort+0x610>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d031      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a3a      	ldr	r2, [pc, #232]	@ (8004814 <HAL_DMA_Abort+0x614>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d02c      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a38      	ldr	r2, [pc, #224]	@ (8004818 <HAL_DMA_Abort+0x618>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d027      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a37      	ldr	r2, [pc, #220]	@ (800481c <HAL_DMA_Abort+0x61c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d022      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a35      	ldr	r2, [pc, #212]	@ (8004820 <HAL_DMA_Abort+0x620>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01d      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a34      	ldr	r2, [pc, #208]	@ (8004824 <HAL_DMA_Abort+0x624>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d018      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a32      	ldr	r2, [pc, #200]	@ (8004828 <HAL_DMA_Abort+0x628>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a31      	ldr	r2, [pc, #196]	@ (800482c <HAL_DMA_Abort+0x62c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00e      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2f      	ldr	r2, [pc, #188]	@ (8004830 <HAL_DMA_Abort+0x630>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2e      	ldr	r2, [pc, #184]	@ (8004834 <HAL_DMA_Abort+0x634>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_DMA_Abort+0x58a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a2c      	ldr	r2, [pc, #176]	@ (8004838 <HAL_DMA_Abort+0x638>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_DMA_Abort+0x58e>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_DMA_Abort+0x590>
 800478e:	2300      	movs	r3, #0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d015      	beq.n	80047c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800479c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00c      	beq.n	80047c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80047be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40020010 	.word	0x40020010
 80047e0:	40020028 	.word	0x40020028
 80047e4:	40020040 	.word	0x40020040
 80047e8:	40020058 	.word	0x40020058
 80047ec:	40020070 	.word	0x40020070
 80047f0:	40020088 	.word	0x40020088
 80047f4:	400200a0 	.word	0x400200a0
 80047f8:	400200b8 	.word	0x400200b8
 80047fc:	40020410 	.word	0x40020410
 8004800:	40020428 	.word	0x40020428
 8004804:	40020440 	.word	0x40020440
 8004808:	40020458 	.word	0x40020458
 800480c:	40020470 	.word	0x40020470
 8004810:	40020488 	.word	0x40020488
 8004814:	400204a0 	.word	0x400204a0
 8004818:	400204b8 	.word	0x400204b8
 800481c:	58025408 	.word	0x58025408
 8004820:	5802541c 	.word	0x5802541c
 8004824:	58025430 	.word	0x58025430
 8004828:	58025444 	.word	0x58025444
 800482c:	58025458 	.word	0x58025458
 8004830:	5802546c 	.word	0x5802546c
 8004834:	58025480 	.word	0x58025480
 8004838:	58025494 	.word	0x58025494

0800483c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e237      	b.n	8004cbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d004      	beq.n	8004864 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2280      	movs	r2, #128	@ 0x80
 800485e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e22c      	b.n	8004cbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5c      	ldr	r2, [pc, #368]	@ (80049dc <HAL_DMA_Abort_IT+0x1a0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d04a      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5b      	ldr	r2, [pc, #364]	@ (80049e0 <HAL_DMA_Abort_IT+0x1a4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d045      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a59      	ldr	r2, [pc, #356]	@ (80049e4 <HAL_DMA_Abort_IT+0x1a8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d040      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a58      	ldr	r2, [pc, #352]	@ (80049e8 <HAL_DMA_Abort_IT+0x1ac>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d03b      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a56      	ldr	r2, [pc, #344]	@ (80049ec <HAL_DMA_Abort_IT+0x1b0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d036      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a55      	ldr	r2, [pc, #340]	@ (80049f0 <HAL_DMA_Abort_IT+0x1b4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d031      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a53      	ldr	r2, [pc, #332]	@ (80049f4 <HAL_DMA_Abort_IT+0x1b8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02c      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a52      	ldr	r2, [pc, #328]	@ (80049f8 <HAL_DMA_Abort_IT+0x1bc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d027      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a50      	ldr	r2, [pc, #320]	@ (80049fc <HAL_DMA_Abort_IT+0x1c0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d022      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a4f      	ldr	r2, [pc, #316]	@ (8004a00 <HAL_DMA_Abort_IT+0x1c4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01d      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a4d      	ldr	r2, [pc, #308]	@ (8004a04 <HAL_DMA_Abort_IT+0x1c8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4c      	ldr	r2, [pc, #304]	@ (8004a08 <HAL_DMA_Abort_IT+0x1cc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4a      	ldr	r2, [pc, #296]	@ (8004a0c <HAL_DMA_Abort_IT+0x1d0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a49      	ldr	r2, [pc, #292]	@ (8004a10 <HAL_DMA_Abort_IT+0x1d4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a47      	ldr	r2, [pc, #284]	@ (8004a14 <HAL_DMA_Abort_IT+0x1d8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_DMA_Abort_IT+0xc8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a46      	ldr	r2, [pc, #280]	@ (8004a18 <HAL_DMA_Abort_IT+0x1dc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_DMA_Abort_IT+0xcc>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_DMA_Abort_IT+0xce>
 8004908:	2300      	movs	r3, #0
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8086 	beq.w	8004a1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2204      	movs	r2, #4
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2f      	ldr	r2, [pc, #188]	@ (80049dc <HAL_DMA_Abort_IT+0x1a0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d04a      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2e      	ldr	r2, [pc, #184]	@ (80049e0 <HAL_DMA_Abort_IT+0x1a4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d045      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2c      	ldr	r2, [pc, #176]	@ (80049e4 <HAL_DMA_Abort_IT+0x1a8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d040      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2b      	ldr	r2, [pc, #172]	@ (80049e8 <HAL_DMA_Abort_IT+0x1ac>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d03b      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a29      	ldr	r2, [pc, #164]	@ (80049ec <HAL_DMA_Abort_IT+0x1b0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d036      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a28      	ldr	r2, [pc, #160]	@ (80049f0 <HAL_DMA_Abort_IT+0x1b4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d031      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a26      	ldr	r2, [pc, #152]	@ (80049f4 <HAL_DMA_Abort_IT+0x1b8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02c      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a25      	ldr	r2, [pc, #148]	@ (80049f8 <HAL_DMA_Abort_IT+0x1bc>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d027      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a23      	ldr	r2, [pc, #140]	@ (80049fc <HAL_DMA_Abort_IT+0x1c0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a22      	ldr	r2, [pc, #136]	@ (8004a00 <HAL_DMA_Abort_IT+0x1c4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01d      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a20      	ldr	r2, [pc, #128]	@ (8004a04 <HAL_DMA_Abort_IT+0x1c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a08 <HAL_DMA_Abort_IT+0x1cc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	@ (8004a0c <HAL_DMA_Abort_IT+0x1d0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a10 <HAL_DMA_Abort_IT+0x1d4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004a14 <HAL_DMA_Abort_IT+0x1d8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_DMA_Abort_IT+0x17c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_DMA_Abort_IT+0x1dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d108      	bne.n	80049ca <HAL_DMA_Abort_IT+0x18e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0201 	bic.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e178      	b.n	8004cbc <HAL_DMA_Abort_IT+0x480>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0201 	bic.w	r2, r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	e16f      	b.n	8004cbc <HAL_DMA_Abort_IT+0x480>
 80049dc:	40020010 	.word	0x40020010
 80049e0:	40020028 	.word	0x40020028
 80049e4:	40020040 	.word	0x40020040
 80049e8:	40020058 	.word	0x40020058
 80049ec:	40020070 	.word	0x40020070
 80049f0:	40020088 	.word	0x40020088
 80049f4:	400200a0 	.word	0x400200a0
 80049f8:	400200b8 	.word	0x400200b8
 80049fc:	40020410 	.word	0x40020410
 8004a00:	40020428 	.word	0x40020428
 8004a04:	40020440 	.word	0x40020440
 8004a08:	40020458 	.word	0x40020458
 8004a0c:	40020470 	.word	0x40020470
 8004a10:	40020488 	.word	0x40020488
 8004a14:	400204a0 	.word	0x400204a0
 8004a18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 020e 	bic.w	r2, r2, #14
 8004a2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a6c      	ldr	r2, [pc, #432]	@ (8004be4 <HAL_DMA_Abort_IT+0x3a8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d04a      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a6b      	ldr	r2, [pc, #428]	@ (8004be8 <HAL_DMA_Abort_IT+0x3ac>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d045      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a69      	ldr	r2, [pc, #420]	@ (8004bec <HAL_DMA_Abort_IT+0x3b0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d040      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a68      	ldr	r2, [pc, #416]	@ (8004bf0 <HAL_DMA_Abort_IT+0x3b4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d03b      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a66      	ldr	r2, [pc, #408]	@ (8004bf4 <HAL_DMA_Abort_IT+0x3b8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d036      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a65      	ldr	r2, [pc, #404]	@ (8004bf8 <HAL_DMA_Abort_IT+0x3bc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d031      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a63      	ldr	r2, [pc, #396]	@ (8004bfc <HAL_DMA_Abort_IT+0x3c0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d02c      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a62      	ldr	r2, [pc, #392]	@ (8004c00 <HAL_DMA_Abort_IT+0x3c4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d027      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a60      	ldr	r2, [pc, #384]	@ (8004c04 <HAL_DMA_Abort_IT+0x3c8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a5f      	ldr	r2, [pc, #380]	@ (8004c08 <HAL_DMA_Abort_IT+0x3cc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d01d      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a5d      	ldr	r2, [pc, #372]	@ (8004c0c <HAL_DMA_Abort_IT+0x3d0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8004c10 <HAL_DMA_Abort_IT+0x3d4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c14 <HAL_DMA_Abort_IT+0x3d8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a59      	ldr	r2, [pc, #356]	@ (8004c18 <HAL_DMA_Abort_IT+0x3dc>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a57      	ldr	r2, [pc, #348]	@ (8004c1c <HAL_DMA_Abort_IT+0x3e0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_DMA_Abort_IT+0x290>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a56      	ldr	r2, [pc, #344]	@ (8004c20 <HAL_DMA_Abort_IT+0x3e4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d108      	bne.n	8004ade <HAL_DMA_Abort_IT+0x2a2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e007      	b.n	8004aee <HAL_DMA_Abort_IT+0x2b2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3c      	ldr	r2, [pc, #240]	@ (8004be4 <HAL_DMA_Abort_IT+0x3a8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d072      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3a      	ldr	r2, [pc, #232]	@ (8004be8 <HAL_DMA_Abort_IT+0x3ac>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d06d      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a39      	ldr	r2, [pc, #228]	@ (8004bec <HAL_DMA_Abort_IT+0x3b0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d068      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a37      	ldr	r2, [pc, #220]	@ (8004bf0 <HAL_DMA_Abort_IT+0x3b4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d063      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a36      	ldr	r2, [pc, #216]	@ (8004bf4 <HAL_DMA_Abort_IT+0x3b8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d05e      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a34      	ldr	r2, [pc, #208]	@ (8004bf8 <HAL_DMA_Abort_IT+0x3bc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d059      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a33      	ldr	r2, [pc, #204]	@ (8004bfc <HAL_DMA_Abort_IT+0x3c0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d054      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a31      	ldr	r2, [pc, #196]	@ (8004c00 <HAL_DMA_Abort_IT+0x3c4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d04f      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a30      	ldr	r2, [pc, #192]	@ (8004c04 <HAL_DMA_Abort_IT+0x3c8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d04a      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004c08 <HAL_DMA_Abort_IT+0x3cc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d045      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2d      	ldr	r2, [pc, #180]	@ (8004c0c <HAL_DMA_Abort_IT+0x3d0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d040      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2b      	ldr	r2, [pc, #172]	@ (8004c10 <HAL_DMA_Abort_IT+0x3d4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d03b      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004c14 <HAL_DMA_Abort_IT+0x3d8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d036      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a28      	ldr	r2, [pc, #160]	@ (8004c18 <HAL_DMA_Abort_IT+0x3dc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d031      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a27      	ldr	r2, [pc, #156]	@ (8004c1c <HAL_DMA_Abort_IT+0x3e0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d02c      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a25      	ldr	r2, [pc, #148]	@ (8004c20 <HAL_DMA_Abort_IT+0x3e4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d027      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a24      	ldr	r2, [pc, #144]	@ (8004c24 <HAL_DMA_Abort_IT+0x3e8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d022      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <HAL_DMA_Abort_IT+0x3ec>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01d      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a21      	ldr	r2, [pc, #132]	@ (8004c2c <HAL_DMA_Abort_IT+0x3f0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c30 <HAL_DMA_Abort_IT+0x3f4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	@ (8004c34 <HAL_DMA_Abort_IT+0x3f8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <HAL_DMA_Abort_IT+0x3fc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <HAL_DMA_Abort_IT+0x400>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_DMA_Abort_IT+0x3a2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	@ (8004c40 <HAL_DMA_Abort_IT+0x404>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d132      	bne.n	8004c44 <HAL_DMA_Abort_IT+0x408>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e031      	b.n	8004c46 <HAL_DMA_Abort_IT+0x40a>
 8004be2:	bf00      	nop
 8004be4:	40020010 	.word	0x40020010
 8004be8:	40020028 	.word	0x40020028
 8004bec:	40020040 	.word	0x40020040
 8004bf0:	40020058 	.word	0x40020058
 8004bf4:	40020070 	.word	0x40020070
 8004bf8:	40020088 	.word	0x40020088
 8004bfc:	400200a0 	.word	0x400200a0
 8004c00:	400200b8 	.word	0x400200b8
 8004c04:	40020410 	.word	0x40020410
 8004c08:	40020428 	.word	0x40020428
 8004c0c:	40020440 	.word	0x40020440
 8004c10:	40020458 	.word	0x40020458
 8004c14:	40020470 	.word	0x40020470
 8004c18:	40020488 	.word	0x40020488
 8004c1c:	400204a0 	.word	0x400204a0
 8004c20:	400204b8 	.word	0x400204b8
 8004c24:	58025408 	.word	0x58025408
 8004c28:	5802541c 	.word	0x5802541c
 8004c2c:	58025430 	.word	0x58025430
 8004c30:	58025444 	.word	0x58025444
 8004c34:	58025458 	.word	0x58025458
 8004c38:	5802546c 	.word	0x5802546c
 8004c3c:	58025480 	.word	0x58025480
 8004c40:	58025494 	.word	0x58025494
 8004c44:	2300      	movs	r3, #0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d028      	beq.n	8004c9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2201      	movs	r2, #1
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop

08004cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08a      	sub	sp, #40	@ 0x28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cd4:	4b67      	ldr	r3, [pc, #412]	@ (8004e74 <HAL_DMA_IRQHandler+0x1ac>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a67      	ldr	r2, [pc, #412]	@ (8004e78 <HAL_DMA_IRQHandler+0x1b0>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	0a9b      	lsrs	r3, r3, #10
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a5f      	ldr	r2, [pc, #380]	@ (8004e7c <HAL_DMA_IRQHandler+0x1b4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d04a      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a5d      	ldr	r2, [pc, #372]	@ (8004e80 <HAL_DMA_IRQHandler+0x1b8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d045      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a5c      	ldr	r2, [pc, #368]	@ (8004e84 <HAL_DMA_IRQHandler+0x1bc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d040      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5a      	ldr	r2, [pc, #360]	@ (8004e88 <HAL_DMA_IRQHandler+0x1c0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d03b      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a59      	ldr	r2, [pc, #356]	@ (8004e8c <HAL_DMA_IRQHandler+0x1c4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d036      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a57      	ldr	r2, [pc, #348]	@ (8004e90 <HAL_DMA_IRQHandler+0x1c8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d031      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a56      	ldr	r2, [pc, #344]	@ (8004e94 <HAL_DMA_IRQHandler+0x1cc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d02c      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a54      	ldr	r2, [pc, #336]	@ (8004e98 <HAL_DMA_IRQHandler+0x1d0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d027      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a53      	ldr	r2, [pc, #332]	@ (8004e9c <HAL_DMA_IRQHandler+0x1d4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d022      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a51      	ldr	r2, [pc, #324]	@ (8004ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01d      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a50      	ldr	r2, [pc, #320]	@ (8004ea4 <HAL_DMA_IRQHandler+0x1dc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d018      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea8 <HAL_DMA_IRQHandler+0x1e0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4d      	ldr	r2, [pc, #308]	@ (8004eac <HAL_DMA_IRQHandler+0x1e4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb0 <HAL_DMA_IRQHandler+0x1e8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb4 <HAL_DMA_IRQHandler+0x1ec>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xd2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a48      	ldr	r2, [pc, #288]	@ (8004eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <HAL_DMA_IRQHandler+0xd6>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <HAL_DMA_IRQHandler+0xd8>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 842b 	beq.w	80055fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2208      	movs	r2, #8
 8004db0:	409a      	lsls	r2, r3
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80a2 	beq.w	8004f00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e7c <HAL_DMA_IRQHandler+0x1b4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d04a      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2d      	ldr	r2, [pc, #180]	@ (8004e80 <HAL_DMA_IRQHandler+0x1b8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d045      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e84 <HAL_DMA_IRQHandler+0x1bc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d040      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a2a      	ldr	r2, [pc, #168]	@ (8004e88 <HAL_DMA_IRQHandler+0x1c0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d03b      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a28      	ldr	r2, [pc, #160]	@ (8004e8c <HAL_DMA_IRQHandler+0x1c4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d036      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a27      	ldr	r2, [pc, #156]	@ (8004e90 <HAL_DMA_IRQHandler+0x1c8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d031      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	@ (8004e94 <HAL_DMA_IRQHandler+0x1cc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d02c      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a24      	ldr	r2, [pc, #144]	@ (8004e98 <HAL_DMA_IRQHandler+0x1d0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d027      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a22      	ldr	r2, [pc, #136]	@ (8004e9c <HAL_DMA_IRQHandler+0x1d4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d022      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a21      	ldr	r2, [pc, #132]	@ (8004ea0 <HAL_DMA_IRQHandler+0x1d8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d01d      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea4 <HAL_DMA_IRQHandler+0x1dc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d018      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea8 <HAL_DMA_IRQHandler+0x1e0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1c      	ldr	r2, [pc, #112]	@ (8004eac <HAL_DMA_IRQHandler+0x1e4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00e      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb0 <HAL_DMA_IRQHandler+0x1e8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d009      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a19      	ldr	r2, [pc, #100]	@ (8004eb4 <HAL_DMA_IRQHandler+0x1ec>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <HAL_DMA_IRQHandler+0x194>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a18      	ldr	r2, [pc, #96]	@ (8004eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d12f      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x1f4>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	e02e      	b.n	8004ed0 <HAL_DMA_IRQHandler+0x208>
 8004e72:	bf00      	nop
 8004e74:	24000000 	.word	0x24000000
 8004e78:	1b4e81b5 	.word	0x1b4e81b5
 8004e7c:	40020010 	.word	0x40020010
 8004e80:	40020028 	.word	0x40020028
 8004e84:	40020040 	.word	0x40020040
 8004e88:	40020058 	.word	0x40020058
 8004e8c:	40020070 	.word	0x40020070
 8004e90:	40020088 	.word	0x40020088
 8004e94:	400200a0 	.word	0x400200a0
 8004e98:	400200b8 	.word	0x400200b8
 8004e9c:	40020410 	.word	0x40020410
 8004ea0:	40020428 	.word	0x40020428
 8004ea4:	40020440 	.word	0x40020440
 8004ea8:	40020458 	.word	0x40020458
 8004eac:	40020470 	.word	0x40020470
 8004eb0:	40020488 	.word	0x40020488
 8004eb4:	400204a0 	.word	0x400204a0
 8004eb8:	400204b8 	.word	0x400204b8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bf14      	ite	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	2300      	moveq	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d015      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0204 	bic.w	r2, r2, #4
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	2208      	movs	r2, #8
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef8:	f043 0201 	orr.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d06e      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a69      	ldr	r2, [pc, #420]	@ (80050c0 <HAL_DMA_IRQHandler+0x3f8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d04a      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a67      	ldr	r2, [pc, #412]	@ (80050c4 <HAL_DMA_IRQHandler+0x3fc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d045      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a66      	ldr	r2, [pc, #408]	@ (80050c8 <HAL_DMA_IRQHandler+0x400>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d040      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a64      	ldr	r2, [pc, #400]	@ (80050cc <HAL_DMA_IRQHandler+0x404>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d03b      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a63      	ldr	r2, [pc, #396]	@ (80050d0 <HAL_DMA_IRQHandler+0x408>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d036      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a61      	ldr	r2, [pc, #388]	@ (80050d4 <HAL_DMA_IRQHandler+0x40c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d031      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a60      	ldr	r2, [pc, #384]	@ (80050d8 <HAL_DMA_IRQHandler+0x410>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d02c      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a5e      	ldr	r2, [pc, #376]	@ (80050dc <HAL_DMA_IRQHandler+0x414>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d027      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80050e0 <HAL_DMA_IRQHandler+0x418>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d022      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a5b      	ldr	r2, [pc, #364]	@ (80050e4 <HAL_DMA_IRQHandler+0x41c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01d      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80050e8 <HAL_DMA_IRQHandler+0x420>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d018      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a58      	ldr	r2, [pc, #352]	@ (80050ec <HAL_DMA_IRQHandler+0x424>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a57      	ldr	r2, [pc, #348]	@ (80050f0 <HAL_DMA_IRQHandler+0x428>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00e      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a55      	ldr	r2, [pc, #340]	@ (80050f4 <HAL_DMA_IRQHandler+0x42c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a54      	ldr	r2, [pc, #336]	@ (80050f8 <HAL_DMA_IRQHandler+0x430>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x2ee>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a52      	ldr	r2, [pc, #328]	@ (80050fc <HAL_DMA_IRQHandler+0x434>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d10a      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x304>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e003      	b.n	8004fd4 <HAL_DMA_IRQHandler+0x30c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fec:	f043 0202 	orr.w	r2, r3, #2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	409a      	lsls	r2, r3
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 808f 	beq.w	8005128 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2c      	ldr	r2, [pc, #176]	@ (80050c0 <HAL_DMA_IRQHandler+0x3f8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d04a      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a2a      	ldr	r2, [pc, #168]	@ (80050c4 <HAL_DMA_IRQHandler+0x3fc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d045      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a29      	ldr	r2, [pc, #164]	@ (80050c8 <HAL_DMA_IRQHandler+0x400>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d040      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a27      	ldr	r2, [pc, #156]	@ (80050cc <HAL_DMA_IRQHandler+0x404>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d03b      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a26      	ldr	r2, [pc, #152]	@ (80050d0 <HAL_DMA_IRQHandler+0x408>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d036      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a24      	ldr	r2, [pc, #144]	@ (80050d4 <HAL_DMA_IRQHandler+0x40c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d031      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a23      	ldr	r2, [pc, #140]	@ (80050d8 <HAL_DMA_IRQHandler+0x410>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d02c      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a21      	ldr	r2, [pc, #132]	@ (80050dc <HAL_DMA_IRQHandler+0x414>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d027      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a20      	ldr	r2, [pc, #128]	@ (80050e0 <HAL_DMA_IRQHandler+0x418>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d022      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1e      	ldr	r2, [pc, #120]	@ (80050e4 <HAL_DMA_IRQHandler+0x41c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01d      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1d      	ldr	r2, [pc, #116]	@ (80050e8 <HAL_DMA_IRQHandler+0x420>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d018      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ec <HAL_DMA_IRQHandler+0x424>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1a      	ldr	r2, [pc, #104]	@ (80050f0 <HAL_DMA_IRQHandler+0x428>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00e      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a18      	ldr	r2, [pc, #96]	@ (80050f4 <HAL_DMA_IRQHandler+0x42c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a17      	ldr	r2, [pc, #92]	@ (80050f8 <HAL_DMA_IRQHandler+0x430>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_DMA_IRQHandler+0x3e2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a15      	ldr	r2, [pc, #84]	@ (80050fc <HAL_DMA_IRQHandler+0x434>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d12a      	bne.n	8005100 <HAL_DMA_IRQHandler+0x438>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e023      	b.n	8005108 <HAL_DMA_IRQHandler+0x440>
 80050c0:	40020010 	.word	0x40020010
 80050c4:	40020028 	.word	0x40020028
 80050c8:	40020040 	.word	0x40020040
 80050cc:	40020058 	.word	0x40020058
 80050d0:	40020070 	.word	0x40020070
 80050d4:	40020088 	.word	0x40020088
 80050d8:	400200a0 	.word	0x400200a0
 80050dc:	400200b8 	.word	0x400200b8
 80050e0:	40020410 	.word	0x40020410
 80050e4:	40020428 	.word	0x40020428
 80050e8:	40020440 	.word	0x40020440
 80050ec:	40020458 	.word	0x40020458
 80050f0:	40020470 	.word	0x40020470
 80050f4:	40020488 	.word	0x40020488
 80050f8:	400204a0 	.word	0x400204a0
 80050fc:	400204b8 	.word	0x400204b8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2204      	movs	r2, #4
 8005116:	409a      	lsls	r2, r3
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005120:	f043 0204 	orr.w	r2, r3, #4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2210      	movs	r2, #16
 8005132:	409a      	lsls	r2, r3
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80a6 	beq.w	800528a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a85      	ldr	r2, [pc, #532]	@ (8005358 <HAL_DMA_IRQHandler+0x690>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a83      	ldr	r2, [pc, #524]	@ (800535c <HAL_DMA_IRQHandler+0x694>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d045      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a82      	ldr	r2, [pc, #520]	@ (8005360 <HAL_DMA_IRQHandler+0x698>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a80      	ldr	r2, [pc, #512]	@ (8005364 <HAL_DMA_IRQHandler+0x69c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d03b      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a7f      	ldr	r2, [pc, #508]	@ (8005368 <HAL_DMA_IRQHandler+0x6a0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d036      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a7d      	ldr	r2, [pc, #500]	@ (800536c <HAL_DMA_IRQHandler+0x6a4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d031      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7c      	ldr	r2, [pc, #496]	@ (8005370 <HAL_DMA_IRQHandler+0x6a8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d02c      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a7a      	ldr	r2, [pc, #488]	@ (8005374 <HAL_DMA_IRQHandler+0x6ac>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d027      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a79      	ldr	r2, [pc, #484]	@ (8005378 <HAL_DMA_IRQHandler+0x6b0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d022      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a77      	ldr	r2, [pc, #476]	@ (800537c <HAL_DMA_IRQHandler+0x6b4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a76      	ldr	r2, [pc, #472]	@ (8005380 <HAL_DMA_IRQHandler+0x6b8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d018      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a74      	ldr	r2, [pc, #464]	@ (8005384 <HAL_DMA_IRQHandler+0x6bc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a73      	ldr	r2, [pc, #460]	@ (8005388 <HAL_DMA_IRQHandler+0x6c0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a71      	ldr	r2, [pc, #452]	@ (800538c <HAL_DMA_IRQHandler+0x6c4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a70      	ldr	r2, [pc, #448]	@ (8005390 <HAL_DMA_IRQHandler+0x6c8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_DMA_IRQHandler+0x516>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005394 <HAL_DMA_IRQHandler+0x6cc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10a      	bne.n	80051f4 <HAL_DMA_IRQHandler+0x52c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e009      	b.n	8005208 <HAL_DMA_IRQHandler+0x540>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d03e      	beq.n	800528a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2210      	movs	r2, #16
 8005216:	409a      	lsls	r2, r3
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d018      	beq.n	800525c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d024      	beq.n	800528a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
 8005248:	e01f      	b.n	800528a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01b      	beq.n	800528a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
 800525a:	e016      	b.n	800528a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d107      	bne.n	800527a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0208 	bic.w	r2, r2, #8
 8005278:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	2220      	movs	r2, #32
 8005294:	409a      	lsls	r2, r3
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 8110 	beq.w	80054c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005358 <HAL_DMA_IRQHandler+0x690>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d04a      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	@ (800535c <HAL_DMA_IRQHandler+0x694>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d045      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a29      	ldr	r2, [pc, #164]	@ (8005360 <HAL_DMA_IRQHandler+0x698>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d040      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a28      	ldr	r2, [pc, #160]	@ (8005364 <HAL_DMA_IRQHandler+0x69c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d03b      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a26      	ldr	r2, [pc, #152]	@ (8005368 <HAL_DMA_IRQHandler+0x6a0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d036      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a25      	ldr	r2, [pc, #148]	@ (800536c <HAL_DMA_IRQHandler+0x6a4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d031      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a23      	ldr	r2, [pc, #140]	@ (8005370 <HAL_DMA_IRQHandler+0x6a8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d02c      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a22      	ldr	r2, [pc, #136]	@ (8005374 <HAL_DMA_IRQHandler+0x6ac>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d027      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a20      	ldr	r2, [pc, #128]	@ (8005378 <HAL_DMA_IRQHandler+0x6b0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d022      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1f      	ldr	r2, [pc, #124]	@ (800537c <HAL_DMA_IRQHandler+0x6b4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d01d      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <HAL_DMA_IRQHandler+0x6b8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d018      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1c      	ldr	r2, [pc, #112]	@ (8005384 <HAL_DMA_IRQHandler+0x6bc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1a      	ldr	r2, [pc, #104]	@ (8005388 <HAL_DMA_IRQHandler+0x6c0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00e      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a19      	ldr	r2, [pc, #100]	@ (800538c <HAL_DMA_IRQHandler+0x6c4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d009      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <HAL_DMA_IRQHandler+0x6c8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <HAL_DMA_IRQHandler+0x678>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a16      	ldr	r2, [pc, #88]	@ (8005394 <HAL_DMA_IRQHandler+0x6cc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d12b      	bne.n	8005398 <HAL_DMA_IRQHandler+0x6d0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	bf14      	ite	ne
 800534e:	2301      	movne	r3, #1
 8005350:	2300      	moveq	r3, #0
 8005352:	b2db      	uxtb	r3, r3
 8005354:	e02a      	b.n	80053ac <HAL_DMA_IRQHandler+0x6e4>
 8005356:	bf00      	nop
 8005358:	40020010 	.word	0x40020010
 800535c:	40020028 	.word	0x40020028
 8005360:	40020040 	.word	0x40020040
 8005364:	40020058 	.word	0x40020058
 8005368:	40020070 	.word	0x40020070
 800536c:	40020088 	.word	0x40020088
 8005370:	400200a0 	.word	0x400200a0
 8005374:	400200b8 	.word	0x400200b8
 8005378:	40020410 	.word	0x40020410
 800537c:	40020428 	.word	0x40020428
 8005380:	40020440 	.word	0x40020440
 8005384:	40020458 	.word	0x40020458
 8005388:	40020470 	.word	0x40020470
 800538c:	40020488 	.word	0x40020488
 8005390:	400204a0 	.word	0x400204a0
 8005394:	400204b8 	.word	0x400204b8
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8087 	beq.w	80054c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2220      	movs	r2, #32
 80053bc:	409a      	lsls	r2, r3
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d139      	bne.n	8005442 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0216 	bic.w	r2, r2, #22
 80053dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <HAL_DMA_IRQHandler+0x736>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0208 	bic.w	r2, r2, #8
 800540c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	223f      	movs	r2, #63	@ 0x3f
 8005418:	409a      	lsls	r2, r3
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 834a 	beq.w	8005acc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	4798      	blx	r3
          }
          return;
 8005440:	e344      	b.n	8005acc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d018      	beq.n	8005482 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d108      	bne.n	8005470 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02c      	beq.n	80054c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
 800546e:	e027      	b.n	80054c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d023      	beq.n	80054c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
 8005480:	e01e      	b.n	80054c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10f      	bne.n	80054b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0210 	bic.w	r2, r2, #16
 800549e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8306 	beq.w	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8088 	beq.w	80055e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a7a      	ldr	r2, [pc, #488]	@ (80056d0 <HAL_DMA_IRQHandler+0xa08>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d04a      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a79      	ldr	r2, [pc, #484]	@ (80056d4 <HAL_DMA_IRQHandler+0xa0c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d045      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a77      	ldr	r2, [pc, #476]	@ (80056d8 <HAL_DMA_IRQHandler+0xa10>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d040      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a76      	ldr	r2, [pc, #472]	@ (80056dc <HAL_DMA_IRQHandler+0xa14>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d03b      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a74      	ldr	r2, [pc, #464]	@ (80056e0 <HAL_DMA_IRQHandler+0xa18>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d036      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	@ (80056e4 <HAL_DMA_IRQHandler+0xa1c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d031      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a71      	ldr	r2, [pc, #452]	@ (80056e8 <HAL_DMA_IRQHandler+0xa20>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d02c      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a70      	ldr	r2, [pc, #448]	@ (80056ec <HAL_DMA_IRQHandler+0xa24>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d027      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a6e      	ldr	r2, [pc, #440]	@ (80056f0 <HAL_DMA_IRQHandler+0xa28>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d022      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a6d      	ldr	r2, [pc, #436]	@ (80056f4 <HAL_DMA_IRQHandler+0xa2c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d01d      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6b      	ldr	r2, [pc, #428]	@ (80056f8 <HAL_DMA_IRQHandler+0xa30>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d018      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6a      	ldr	r2, [pc, #424]	@ (80056fc <HAL_DMA_IRQHandler+0xa34>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a68      	ldr	r2, [pc, #416]	@ (8005700 <HAL_DMA_IRQHandler+0xa38>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00e      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a67      	ldr	r2, [pc, #412]	@ (8005704 <HAL_DMA_IRQHandler+0xa3c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a65      	ldr	r2, [pc, #404]	@ (8005708 <HAL_DMA_IRQHandler+0xa40>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_DMA_IRQHandler+0x8b8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a64      	ldr	r2, [pc, #400]	@ (800570c <HAL_DMA_IRQHandler+0xa44>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d108      	bne.n	8005592 <HAL_DMA_IRQHandler+0x8ca>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e007      	b.n	80055a2 <HAL_DMA_IRQHandler+0x8da>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0201 	bic.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d307      	bcc.n	80055be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f2      	bne.n	80055a2 <HAL_DMA_IRQHandler+0x8da>
 80055bc:	e000      	b.n	80055c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80055be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2203      	movs	r2, #3
 80055d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80055d6:	e003      	b.n	80055e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8272 	beq.w	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4798      	blx	r3
 80055fa:	e26c      	b.n	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a43      	ldr	r2, [pc, #268]	@ (8005710 <HAL_DMA_IRQHandler+0xa48>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d022      	beq.n	800564c <HAL_DMA_IRQHandler+0x984>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a42      	ldr	r2, [pc, #264]	@ (8005714 <HAL_DMA_IRQHandler+0xa4c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d01d      	beq.n	800564c <HAL_DMA_IRQHandler+0x984>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a40      	ldr	r2, [pc, #256]	@ (8005718 <HAL_DMA_IRQHandler+0xa50>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d018      	beq.n	800564c <HAL_DMA_IRQHandler+0x984>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3f      	ldr	r2, [pc, #252]	@ (800571c <HAL_DMA_IRQHandler+0xa54>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d013      	beq.n	800564c <HAL_DMA_IRQHandler+0x984>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a3d      	ldr	r2, [pc, #244]	@ (8005720 <HAL_DMA_IRQHandler+0xa58>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <HAL_DMA_IRQHandler+0x984>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a3c      	ldr	r2, [pc, #240]	@ (8005724 <HAL_DMA_IRQHandler+0xa5c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_DMA_IRQHandler+0x984>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a3a      	ldr	r2, [pc, #232]	@ (8005728 <HAL_DMA_IRQHandler+0xa60>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_DMA_IRQHandler+0x984>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a39      	ldr	r2, [pc, #228]	@ (800572c <HAL_DMA_IRQHandler+0xa64>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d101      	bne.n	8005650 <HAL_DMA_IRQHandler+0x988>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <HAL_DMA_IRQHandler+0x98a>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 823f 	beq.w	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	2204      	movs	r2, #4
 800566a:	409a      	lsls	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4013      	ands	r3, r2
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80cd 	beq.w	8005810 <HAL_DMA_IRQHandler+0xb48>
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 80c7 	beq.w	8005810 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2204      	movs	r2, #4
 800568c:	409a      	lsls	r2, r3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d049      	beq.n	8005730 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 8210 	beq.w	8005ad0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056b8:	e20a      	b.n	8005ad0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 8206 	beq.w	8005ad0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056cc:	e200      	b.n	8005ad0 <HAL_DMA_IRQHandler+0xe08>
 80056ce:	bf00      	nop
 80056d0:	40020010 	.word	0x40020010
 80056d4:	40020028 	.word	0x40020028
 80056d8:	40020040 	.word	0x40020040
 80056dc:	40020058 	.word	0x40020058
 80056e0:	40020070 	.word	0x40020070
 80056e4:	40020088 	.word	0x40020088
 80056e8:	400200a0 	.word	0x400200a0
 80056ec:	400200b8 	.word	0x400200b8
 80056f0:	40020410 	.word	0x40020410
 80056f4:	40020428 	.word	0x40020428
 80056f8:	40020440 	.word	0x40020440
 80056fc:	40020458 	.word	0x40020458
 8005700:	40020470 	.word	0x40020470
 8005704:	40020488 	.word	0x40020488
 8005708:	400204a0 	.word	0x400204a0
 800570c:	400204b8 	.word	0x400204b8
 8005710:	58025408 	.word	0x58025408
 8005714:	5802541c 	.word	0x5802541c
 8005718:	58025430 	.word	0x58025430
 800571c:	58025444 	.word	0x58025444
 8005720:	58025458 	.word	0x58025458
 8005724:	5802546c 	.word	0x5802546c
 8005728:	58025480 	.word	0x58025480
 800572c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d160      	bne.n	80057fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a7f      	ldr	r2, [pc, #508]	@ (800593c <HAL_DMA_IRQHandler+0xc74>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d04a      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a7d      	ldr	r2, [pc, #500]	@ (8005940 <HAL_DMA_IRQHandler+0xc78>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d045      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a7c      	ldr	r2, [pc, #496]	@ (8005944 <HAL_DMA_IRQHandler+0xc7c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d040      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a7a      	ldr	r2, [pc, #488]	@ (8005948 <HAL_DMA_IRQHandler+0xc80>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03b      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a79      	ldr	r2, [pc, #484]	@ (800594c <HAL_DMA_IRQHandler+0xc84>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d036      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a77      	ldr	r2, [pc, #476]	@ (8005950 <HAL_DMA_IRQHandler+0xc88>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d031      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a76      	ldr	r2, [pc, #472]	@ (8005954 <HAL_DMA_IRQHandler+0xc8c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d02c      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a74      	ldr	r2, [pc, #464]	@ (8005958 <HAL_DMA_IRQHandler+0xc90>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d027      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a73      	ldr	r2, [pc, #460]	@ (800595c <HAL_DMA_IRQHandler+0xc94>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a71      	ldr	r2, [pc, #452]	@ (8005960 <HAL_DMA_IRQHandler+0xc98>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a70      	ldr	r2, [pc, #448]	@ (8005964 <HAL_DMA_IRQHandler+0xc9c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a6e      	ldr	r2, [pc, #440]	@ (8005968 <HAL_DMA_IRQHandler+0xca0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a6d      	ldr	r2, [pc, #436]	@ (800596c <HAL_DMA_IRQHandler+0xca4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a6b      	ldr	r2, [pc, #428]	@ (8005970 <HAL_DMA_IRQHandler+0xca8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a6a      	ldr	r2, [pc, #424]	@ (8005974 <HAL_DMA_IRQHandler+0xcac>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_IRQHandler+0xb12>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a68      	ldr	r2, [pc, #416]	@ (8005978 <HAL_DMA_IRQHandler+0xcb0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d108      	bne.n	80057ec <HAL_DMA_IRQHandler+0xb24>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0208 	bic.w	r2, r2, #8
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e007      	b.n	80057fc <HAL_DMA_IRQHandler+0xb34>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0204 	bic.w	r2, r2, #4
 80057fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8165 	beq.w	8005ad0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800580e:	e15f      	b.n	8005ad0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	2202      	movs	r2, #2
 800581a:	409a      	lsls	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80c5 	beq.w	80059b0 <HAL_DMA_IRQHandler+0xce8>
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80bf 	beq.w	80059b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2202      	movs	r2, #2
 800583c:	409a      	lsls	r2, r3
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d018      	beq.n	800587e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 813a 	beq.w	8005ad4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005868:	e134      	b.n	8005ad4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8130 	beq.w	8005ad4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800587c:	e12a      	b.n	8005ad4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	f040 8089 	bne.w	800599c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2b      	ldr	r2, [pc, #172]	@ (800593c <HAL_DMA_IRQHandler+0xc74>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d04a      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a29      	ldr	r2, [pc, #164]	@ (8005940 <HAL_DMA_IRQHandler+0xc78>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d045      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a28      	ldr	r2, [pc, #160]	@ (8005944 <HAL_DMA_IRQHandler+0xc7c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d040      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a26      	ldr	r2, [pc, #152]	@ (8005948 <HAL_DMA_IRQHandler+0xc80>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d03b      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a25      	ldr	r2, [pc, #148]	@ (800594c <HAL_DMA_IRQHandler+0xc84>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d036      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a23      	ldr	r2, [pc, #140]	@ (8005950 <HAL_DMA_IRQHandler+0xc88>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d031      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a22      	ldr	r2, [pc, #136]	@ (8005954 <HAL_DMA_IRQHandler+0xc8c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d02c      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a20      	ldr	r2, [pc, #128]	@ (8005958 <HAL_DMA_IRQHandler+0xc90>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d027      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1f      	ldr	r2, [pc, #124]	@ (800595c <HAL_DMA_IRQHandler+0xc94>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d022      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005960 <HAL_DMA_IRQHandler+0xc98>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01d      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005964 <HAL_DMA_IRQHandler+0xc9c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d018      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005968 <HAL_DMA_IRQHandler+0xca0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a19      	ldr	r2, [pc, #100]	@ (800596c <HAL_DMA_IRQHandler+0xca4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00e      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a17      	ldr	r2, [pc, #92]	@ (8005970 <HAL_DMA_IRQHandler+0xca8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d009      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a16      	ldr	r2, [pc, #88]	@ (8005974 <HAL_DMA_IRQHandler+0xcac>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d004      	beq.n	800592a <HAL_DMA_IRQHandler+0xc62>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a14      	ldr	r2, [pc, #80]	@ (8005978 <HAL_DMA_IRQHandler+0xcb0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d128      	bne.n	800597c <HAL_DMA_IRQHandler+0xcb4>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0214 	bic.w	r2, r2, #20
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e027      	b.n	800598c <HAL_DMA_IRQHandler+0xcc4>
 800593c:	40020010 	.word	0x40020010
 8005940:	40020028 	.word	0x40020028
 8005944:	40020040 	.word	0x40020040
 8005948:	40020058 	.word	0x40020058
 800594c:	40020070 	.word	0x40020070
 8005950:	40020088 	.word	0x40020088
 8005954:	400200a0 	.word	0x400200a0
 8005958:	400200b8 	.word	0x400200b8
 800595c:	40020410 	.word	0x40020410
 8005960:	40020428 	.word	0x40020428
 8005964:	40020440 	.word	0x40020440
 8005968:	40020458 	.word	0x40020458
 800596c:	40020470 	.word	0x40020470
 8005970:	40020488 	.word	0x40020488
 8005974:	400204a0 	.word	0x400204a0
 8005978:	400204b8 	.word	0x400204b8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 020a 	bic.w	r2, r2, #10
 800598a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8097 	beq.w	8005ad4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059ae:	e091      	b.n	8005ad4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	2208      	movs	r2, #8
 80059ba:	409a      	lsls	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4013      	ands	r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8088 	beq.w	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8082 	beq.w	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a41      	ldr	r2, [pc, #260]	@ (8005adc <HAL_DMA_IRQHandler+0xe14>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d04a      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a3f      	ldr	r2, [pc, #252]	@ (8005ae0 <HAL_DMA_IRQHandler+0xe18>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d045      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a3e      	ldr	r2, [pc, #248]	@ (8005ae4 <HAL_DMA_IRQHandler+0xe1c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d040      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ae8 <HAL_DMA_IRQHandler+0xe20>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d03b      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a3b      	ldr	r2, [pc, #236]	@ (8005aec <HAL_DMA_IRQHandler+0xe24>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d036      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a39      	ldr	r2, [pc, #228]	@ (8005af0 <HAL_DMA_IRQHandler+0xe28>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d031      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a38      	ldr	r2, [pc, #224]	@ (8005af4 <HAL_DMA_IRQHandler+0xe2c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d02c      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a36      	ldr	r2, [pc, #216]	@ (8005af8 <HAL_DMA_IRQHandler+0xe30>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d027      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a35      	ldr	r2, [pc, #212]	@ (8005afc <HAL_DMA_IRQHandler+0xe34>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d022      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a33      	ldr	r2, [pc, #204]	@ (8005b00 <HAL_DMA_IRQHandler+0xe38>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01d      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a32      	ldr	r2, [pc, #200]	@ (8005b04 <HAL_DMA_IRQHandler+0xe3c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d018      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a30      	ldr	r2, [pc, #192]	@ (8005b08 <HAL_DMA_IRQHandler+0xe40>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b0c <HAL_DMA_IRQHandler+0xe44>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00e      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2d      	ldr	r2, [pc, #180]	@ (8005b10 <HAL_DMA_IRQHandler+0xe48>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2c      	ldr	r2, [pc, #176]	@ (8005b14 <HAL_DMA_IRQHandler+0xe4c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_DMA_IRQHandler+0xdaa>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005b18 <HAL_DMA_IRQHandler+0xe50>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <HAL_DMA_IRQHandler+0xdbc>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 021c 	bic.w	r2, r2, #28
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e007      	b.n	8005a94 <HAL_DMA_IRQHandler+0xdcc>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 020e 	bic.w	r2, r2, #14
 8005a92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
 8005aca:	e004      	b.n	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005acc:	bf00      	nop
 8005ace:	e002      	b.n	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ad0:	bf00      	nop
 8005ad2:	e000      	b.n	8005ad6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ad4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ad6:	3728      	adds	r7, #40	@ 0x28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40020010 	.word	0x40020010
 8005ae0:	40020028 	.word	0x40020028
 8005ae4:	40020040 	.word	0x40020040
 8005ae8:	40020058 	.word	0x40020058
 8005aec:	40020070 	.word	0x40020070
 8005af0:	40020088 	.word	0x40020088
 8005af4:	400200a0 	.word	0x400200a0
 8005af8:	400200b8 	.word	0x400200b8
 8005afc:	40020410 	.word	0x40020410
 8005b00:	40020428 	.word	0x40020428
 8005b04:	40020440 	.word	0x40020440
 8005b08:	40020458 	.word	0x40020458
 8005b0c:	40020470 	.word	0x40020470
 8005b10:	40020488 	.word	0x40020488
 8005b14:	400204a0 	.word	0x400204a0
 8005b18:	400204b8 	.word	0x400204b8

08005b1c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b2a:	b2db      	uxtb	r3, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a7f      	ldr	r2, [pc, #508]	@ (8005d6c <DMA_SetConfig+0x21c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d072      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a7d      	ldr	r2, [pc, #500]	@ (8005d70 <DMA_SetConfig+0x220>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d06d      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a7c      	ldr	r2, [pc, #496]	@ (8005d74 <DMA_SetConfig+0x224>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d068      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a7a      	ldr	r2, [pc, #488]	@ (8005d78 <DMA_SetConfig+0x228>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d063      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a79      	ldr	r2, [pc, #484]	@ (8005d7c <DMA_SetConfig+0x22c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d05e      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a77      	ldr	r2, [pc, #476]	@ (8005d80 <DMA_SetConfig+0x230>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d059      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a76      	ldr	r2, [pc, #472]	@ (8005d84 <DMA_SetConfig+0x234>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d054      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a74      	ldr	r2, [pc, #464]	@ (8005d88 <DMA_SetConfig+0x238>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d04f      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a73      	ldr	r2, [pc, #460]	@ (8005d8c <DMA_SetConfig+0x23c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d04a      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a71      	ldr	r2, [pc, #452]	@ (8005d90 <DMA_SetConfig+0x240>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d045      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a70      	ldr	r2, [pc, #448]	@ (8005d94 <DMA_SetConfig+0x244>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d040      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a6e      	ldr	r2, [pc, #440]	@ (8005d98 <DMA_SetConfig+0x248>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d03b      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a6d      	ldr	r2, [pc, #436]	@ (8005d9c <DMA_SetConfig+0x24c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d036      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6b      	ldr	r2, [pc, #428]	@ (8005da0 <DMA_SetConfig+0x250>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d031      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6a      	ldr	r2, [pc, #424]	@ (8005da4 <DMA_SetConfig+0x254>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d02c      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a68      	ldr	r2, [pc, #416]	@ (8005da8 <DMA_SetConfig+0x258>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d027      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a67      	ldr	r2, [pc, #412]	@ (8005dac <DMA_SetConfig+0x25c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d022      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a65      	ldr	r2, [pc, #404]	@ (8005db0 <DMA_SetConfig+0x260>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01d      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a64      	ldr	r2, [pc, #400]	@ (8005db4 <DMA_SetConfig+0x264>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d018      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a62      	ldr	r2, [pc, #392]	@ (8005db8 <DMA_SetConfig+0x268>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a61      	ldr	r2, [pc, #388]	@ (8005dbc <DMA_SetConfig+0x26c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a5f      	ldr	r2, [pc, #380]	@ (8005dc0 <DMA_SetConfig+0x270>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8005dc4 <DMA_SetConfig+0x274>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <DMA_SetConfig+0x10a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a5c      	ldr	r2, [pc, #368]	@ (8005dc8 <DMA_SetConfig+0x278>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <DMA_SetConfig+0x10e>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <DMA_SetConfig+0x110>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00d      	beq.n	8005c80 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005c6c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c7e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a39      	ldr	r2, [pc, #228]	@ (8005d6c <DMA_SetConfig+0x21c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d04a      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a38      	ldr	r2, [pc, #224]	@ (8005d70 <DMA_SetConfig+0x220>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d045      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a36      	ldr	r2, [pc, #216]	@ (8005d74 <DMA_SetConfig+0x224>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d040      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a35      	ldr	r2, [pc, #212]	@ (8005d78 <DMA_SetConfig+0x228>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d03b      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a33      	ldr	r2, [pc, #204]	@ (8005d7c <DMA_SetConfig+0x22c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d036      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a32      	ldr	r2, [pc, #200]	@ (8005d80 <DMA_SetConfig+0x230>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d031      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a30      	ldr	r2, [pc, #192]	@ (8005d84 <DMA_SetConfig+0x234>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d02c      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2f      	ldr	r2, [pc, #188]	@ (8005d88 <DMA_SetConfig+0x238>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d027      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d8c <DMA_SetConfig+0x23c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d022      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a2c      	ldr	r2, [pc, #176]	@ (8005d90 <DMA_SetConfig+0x240>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d01d      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d94 <DMA_SetConfig+0x244>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d018      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a29      	ldr	r2, [pc, #164]	@ (8005d98 <DMA_SetConfig+0x248>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d013      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a27      	ldr	r2, [pc, #156]	@ (8005d9c <DMA_SetConfig+0x24c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00e      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a26      	ldr	r2, [pc, #152]	@ (8005da0 <DMA_SetConfig+0x250>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d009      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a24      	ldr	r2, [pc, #144]	@ (8005da4 <DMA_SetConfig+0x254>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d004      	beq.n	8005d20 <DMA_SetConfig+0x1d0>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a23      	ldr	r2, [pc, #140]	@ (8005da8 <DMA_SetConfig+0x258>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d101      	bne.n	8005d24 <DMA_SetConfig+0x1d4>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <DMA_SetConfig+0x1d6>
 8005d24:	2300      	movs	r3, #0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d059      	beq.n	8005dde <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	223f      	movs	r2, #63	@ 0x3f
 8005d34:	409a      	lsls	r2, r3
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005d48:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b40      	cmp	r3, #64	@ 0x40
 8005d58:	d138      	bne.n	8005dcc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d6a:	e086      	b.n	8005e7a <DMA_SetConfig+0x32a>
 8005d6c:	40020010 	.word	0x40020010
 8005d70:	40020028 	.word	0x40020028
 8005d74:	40020040 	.word	0x40020040
 8005d78:	40020058 	.word	0x40020058
 8005d7c:	40020070 	.word	0x40020070
 8005d80:	40020088 	.word	0x40020088
 8005d84:	400200a0 	.word	0x400200a0
 8005d88:	400200b8 	.word	0x400200b8
 8005d8c:	40020410 	.word	0x40020410
 8005d90:	40020428 	.word	0x40020428
 8005d94:	40020440 	.word	0x40020440
 8005d98:	40020458 	.word	0x40020458
 8005d9c:	40020470 	.word	0x40020470
 8005da0:	40020488 	.word	0x40020488
 8005da4:	400204a0 	.word	0x400204a0
 8005da8:	400204b8 	.word	0x400204b8
 8005dac:	58025408 	.word	0x58025408
 8005db0:	5802541c 	.word	0x5802541c
 8005db4:	58025430 	.word	0x58025430
 8005db8:	58025444 	.word	0x58025444
 8005dbc:	58025458 	.word	0x58025458
 8005dc0:	5802546c 	.word	0x5802546c
 8005dc4:	58025480 	.word	0x58025480
 8005dc8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]
}
 8005ddc:	e04d      	b.n	8005e7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a29      	ldr	r2, [pc, #164]	@ (8005e88 <DMA_SetConfig+0x338>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d022      	beq.n	8005e2e <DMA_SetConfig+0x2de>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a27      	ldr	r2, [pc, #156]	@ (8005e8c <DMA_SetConfig+0x33c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01d      	beq.n	8005e2e <DMA_SetConfig+0x2de>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a26      	ldr	r2, [pc, #152]	@ (8005e90 <DMA_SetConfig+0x340>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d018      	beq.n	8005e2e <DMA_SetConfig+0x2de>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a24      	ldr	r2, [pc, #144]	@ (8005e94 <DMA_SetConfig+0x344>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <DMA_SetConfig+0x2de>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a23      	ldr	r2, [pc, #140]	@ (8005e98 <DMA_SetConfig+0x348>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <DMA_SetConfig+0x2de>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a21      	ldr	r2, [pc, #132]	@ (8005e9c <DMA_SetConfig+0x34c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d009      	beq.n	8005e2e <DMA_SetConfig+0x2de>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a20      	ldr	r2, [pc, #128]	@ (8005ea0 <DMA_SetConfig+0x350>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d004      	beq.n	8005e2e <DMA_SetConfig+0x2de>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea4 <DMA_SetConfig+0x354>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d101      	bne.n	8005e32 <DMA_SetConfig+0x2e2>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <DMA_SetConfig+0x2e4>
 8005e32:	2300      	movs	r3, #0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d020      	beq.n	8005e7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2201      	movs	r2, #1
 8005e42:	409a      	lsls	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	2b40      	cmp	r3, #64	@ 0x40
 8005e56:	d108      	bne.n	8005e6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	60da      	str	r2, [r3, #12]
}
 8005e68:	e007      	b.n	8005e7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	60da      	str	r2, [r3, #12]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	58025408 	.word	0x58025408
 8005e8c:	5802541c 	.word	0x5802541c
 8005e90:	58025430 	.word	0x58025430
 8005e94:	58025444 	.word	0x58025444
 8005e98:	58025458 	.word	0x58025458
 8005e9c:	5802546c 	.word	0x5802546c
 8005ea0:	58025480 	.word	0x58025480
 8005ea4:	58025494 	.word	0x58025494

08005ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a42      	ldr	r2, [pc, #264]	@ (8005fc0 <DMA_CalcBaseAndBitshift+0x118>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d04a      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a41      	ldr	r2, [pc, #260]	@ (8005fc4 <DMA_CalcBaseAndBitshift+0x11c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d045      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a3f      	ldr	r2, [pc, #252]	@ (8005fc8 <DMA_CalcBaseAndBitshift+0x120>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d040      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8005fcc <DMA_CalcBaseAndBitshift+0x124>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d03b      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a3c      	ldr	r2, [pc, #240]	@ (8005fd0 <DMA_CalcBaseAndBitshift+0x128>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d036      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8005fd4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d031      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a39      	ldr	r2, [pc, #228]	@ (8005fd8 <DMA_CalcBaseAndBitshift+0x130>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02c      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a38      	ldr	r2, [pc, #224]	@ (8005fdc <DMA_CalcBaseAndBitshift+0x134>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d027      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a36      	ldr	r2, [pc, #216]	@ (8005fe0 <DMA_CalcBaseAndBitshift+0x138>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d022      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a35      	ldr	r2, [pc, #212]	@ (8005fe4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d01d      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a33      	ldr	r2, [pc, #204]	@ (8005fe8 <DMA_CalcBaseAndBitshift+0x140>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d018      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a32      	ldr	r2, [pc, #200]	@ (8005fec <DMA_CalcBaseAndBitshift+0x144>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a30      	ldr	r2, [pc, #192]	@ (8005ff0 <DMA_CalcBaseAndBitshift+0x148>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00e      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a2f      	ldr	r2, [pc, #188]	@ (8005ff4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff8 <DMA_CalcBaseAndBitshift+0x150>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <DMA_CalcBaseAndBitshift+0xa8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8005ffc <DMA_CalcBaseAndBitshift+0x154>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d101      	bne.n	8005f54 <DMA_CalcBaseAndBitshift+0xac>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <DMA_CalcBaseAndBitshift+0xae>
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d024      	beq.n	8005fa4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	3b10      	subs	r3, #16
 8005f62:	4a27      	ldr	r2, [pc, #156]	@ (8006000 <DMA_CalcBaseAndBitshift+0x158>)
 8005f64:	fba2 2303 	umull	r2, r3, r2, r3
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	4a24      	ldr	r2, [pc, #144]	@ (8006004 <DMA_CalcBaseAndBitshift+0x15c>)
 8005f74:	5cd3      	ldrb	r3, [r2, r3]
 8005f76:	461a      	mov	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d908      	bls.n	8005f94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	4b1f      	ldr	r3, [pc, #124]	@ (8006008 <DMA_CalcBaseAndBitshift+0x160>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	1d1a      	adds	r2, r3, #4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f92:	e00d      	b.n	8005fb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006008 <DMA_CalcBaseAndBitshift+0x160>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fa2:	e005      	b.n	8005fb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	40020010 	.word	0x40020010
 8005fc4:	40020028 	.word	0x40020028
 8005fc8:	40020040 	.word	0x40020040
 8005fcc:	40020058 	.word	0x40020058
 8005fd0:	40020070 	.word	0x40020070
 8005fd4:	40020088 	.word	0x40020088
 8005fd8:	400200a0 	.word	0x400200a0
 8005fdc:	400200b8 	.word	0x400200b8
 8005fe0:	40020410 	.word	0x40020410
 8005fe4:	40020428 	.word	0x40020428
 8005fe8:	40020440 	.word	0x40020440
 8005fec:	40020458 	.word	0x40020458
 8005ff0:	40020470 	.word	0x40020470
 8005ff4:	40020488 	.word	0x40020488
 8005ff8:	400204a0 	.word	0x400204a0
 8005ffc:	400204b8 	.word	0x400204b8
 8006000:	aaaaaaab 	.word	0xaaaaaaab
 8006004:	08016a34 	.word	0x08016a34
 8006008:	fffffc00 	.word	0xfffffc00

0800600c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d120      	bne.n	8006062 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	2b03      	cmp	r3, #3
 8006026:	d858      	bhi.n	80060da <DMA_CheckFifoParam+0xce>
 8006028:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <DMA_CheckFifoParam+0x24>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006041 	.word	0x08006041
 8006034:	08006053 	.word	0x08006053
 8006038:	08006041 	.word	0x08006041
 800603c:	080060db 	.word	0x080060db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d048      	beq.n	80060de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006050:	e045      	b.n	80060de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800605a:	d142      	bne.n	80060e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006060:	e03f      	b.n	80060e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800606a:	d123      	bne.n	80060b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006070:	2b03      	cmp	r3, #3
 8006072:	d838      	bhi.n	80060e6 <DMA_CheckFifoParam+0xda>
 8006074:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <DMA_CheckFifoParam+0x70>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	0800608d 	.word	0x0800608d
 8006080:	08006093 	.word	0x08006093
 8006084:	0800608d 	.word	0x0800608d
 8006088:	080060a5 	.word	0x080060a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
        break;
 8006090:	e030      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006096:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d025      	beq.n	80060ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060a2:	e022      	b.n	80060ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060ac:	d11f      	bne.n	80060ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060b2:	e01c      	b.n	80060ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d902      	bls.n	80060c2 <DMA_CheckFifoParam+0xb6>
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d003      	beq.n	80060c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80060c0:	e018      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	73fb      	strb	r3, [r7, #15]
        break;
 80060c6:	e015      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00e      	beq.n	80060f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
    break;
 80060d8:	e00b      	b.n	80060f2 <DMA_CheckFifoParam+0xe6>
        break;
 80060da:	bf00      	nop
 80060dc:	e00a      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>
        break;
 80060de:	bf00      	nop
 80060e0:	e008      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>
        break;
 80060e2:	bf00      	nop
 80060e4:	e006      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>
        break;
 80060e6:	bf00      	nop
 80060e8:	e004      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>
        break;
 80060ea:	bf00      	nop
 80060ec:	e002      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>
        break;
 80060ee:	bf00      	nop
 80060f0:	e000      	b.n	80060f4 <DMA_CheckFifoParam+0xe8>
    break;
 80060f2:	bf00      	nop
    }
  }

  return status;
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop

08006104 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a38      	ldr	r2, [pc, #224]	@ (80061f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d022      	beq.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a36      	ldr	r2, [pc, #216]	@ (80061fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01d      	beq.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a35      	ldr	r2, [pc, #212]	@ (8006200 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d018      	beq.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a33      	ldr	r2, [pc, #204]	@ (8006204 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a32      	ldr	r2, [pc, #200]	@ (8006208 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00e      	beq.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a30      	ldr	r2, [pc, #192]	@ (800620c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2f      	ldr	r2, [pc, #188]	@ (8006210 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a2d      	ldr	r2, [pc, #180]	@ (8006214 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d101      	bne.n	8006166 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006166:	2300      	movs	r3, #0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01a      	beq.n	80061a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	3b08      	subs	r3, #8
 8006174:	4a28      	ldr	r2, [pc, #160]	@ (8006218 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4b26      	ldr	r3, [pc, #152]	@ (800621c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	461a      	mov	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a24      	ldr	r2, [pc, #144]	@ (8006220 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006190:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	2201      	movs	r2, #1
 800619a:	409a      	lsls	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80061a0:	e024      	b.n	80061ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	3b10      	subs	r3, #16
 80061aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006224 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80061ac:	fba2 2303 	umull	r2, r3, r2, r3
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d806      	bhi.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4a1b      	ldr	r2, [pc, #108]	@ (800622c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d902      	bls.n	80061ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3308      	adds	r3, #8
 80061c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4b18      	ldr	r3, [pc, #96]	@ (8006230 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	461a      	mov	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a16      	ldr	r2, [pc, #88]	@ (8006234 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80061dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	2201      	movs	r2, #1
 80061e6:	409a      	lsls	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	58025408 	.word	0x58025408
 80061fc:	5802541c 	.word	0x5802541c
 8006200:	58025430 	.word	0x58025430
 8006204:	58025444 	.word	0x58025444
 8006208:	58025458 	.word	0x58025458
 800620c:	5802546c 	.word	0x5802546c
 8006210:	58025480 	.word	0x58025480
 8006214:	58025494 	.word	0x58025494
 8006218:	cccccccd 	.word	0xcccccccd
 800621c:	16009600 	.word	0x16009600
 8006220:	58025880 	.word	0x58025880
 8006224:	aaaaaaab 	.word	0xaaaaaaab
 8006228:	400204b8 	.word	0x400204b8
 800622c:	4002040f 	.word	0x4002040f
 8006230:	10008200 	.word	0x10008200
 8006234:	40020880 	.word	0x40020880

08006238 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d04a      	beq.n	80062e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d847      	bhi.n	80062e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a25      	ldr	r2, [pc, #148]	@ (80062f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d022      	beq.n	80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a24      	ldr	r2, [pc, #144]	@ (80062f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d01d      	beq.n	80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a22      	ldr	r2, [pc, #136]	@ (80062f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d018      	beq.n	80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a21      	ldr	r2, [pc, #132]	@ (80062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1f      	ldr	r2, [pc, #124]	@ (8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00e      	beq.n	80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1e      	ldr	r2, [pc, #120]	@ (8006304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1c      	ldr	r2, [pc, #112]	@ (8006308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1b      	ldr	r2, [pc, #108]	@ (800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4b17      	ldr	r3, [pc, #92]	@ (8006310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a15      	ldr	r2, [pc, #84]	@ (8006314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80062c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80062c2:	e009      	b.n	80062d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4b14      	ldr	r3, [pc, #80]	@ (8006318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	461a      	mov	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a11      	ldr	r2, [pc, #68]	@ (800631c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80062d6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	2201      	movs	r2, #1
 80062de:	409a      	lsls	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	58025408 	.word	0x58025408
 80062f4:	5802541c 	.word	0x5802541c
 80062f8:	58025430 	.word	0x58025430
 80062fc:	58025444 	.word	0x58025444
 8006300:	58025458 	.word	0x58025458
 8006304:	5802546c 	.word	0x5802546c
 8006308:	58025480 	.word	0x58025480
 800630c:	58025494 	.word	0x58025494
 8006310:	1600963f 	.word	0x1600963f
 8006314:	58025940 	.word	0x58025940
 8006318:	1000823f 	.word	0x1000823f
 800631c:	40020940 	.word	0x40020940

08006320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006320:	b480      	push	{r7}
 8006322:	b089      	sub	sp, #36	@ 0x24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800632e:	4b89      	ldr	r3, [pc, #548]	@ (8006554 <HAL_GPIO_Init+0x234>)
 8006330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006332:	e194      	b.n	800665e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	2101      	movs	r1, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa01 f303 	lsl.w	r3, r1, r3
 8006340:	4013      	ands	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8186 	beq.w	8006658 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d005      	beq.n	8006364 <HAL_GPIO_Init+0x44>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d130      	bne.n	80063c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	2203      	movs	r2, #3
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4013      	ands	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800639a:	2201      	movs	r2, #1
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43db      	mvns	r3, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4013      	ands	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	f003 0201 	and.w	r2, r3, #1
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	4313      	orrs	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d017      	beq.n	8006402 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	2203      	movs	r2, #3
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d123      	bne.n	8006456 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	08da      	lsrs	r2, r3, #3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3208      	adds	r2, #8
 8006416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	220f      	movs	r2, #15
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43db      	mvns	r3, r3
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	4013      	ands	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	691a      	ldr	r2, [r3, #16]
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	fa02 f303 	lsl.w	r3, r2, r3
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	4313      	orrs	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	08da      	lsrs	r2, r3, #3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3208      	adds	r2, #8
 8006450:	69b9      	ldr	r1, [r7, #24]
 8006452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	2203      	movs	r2, #3
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	43db      	mvns	r3, r3
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	4013      	ands	r3, r2
 800646c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 0203 	and.w	r2, r3, #3
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4313      	orrs	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 80e0 	beq.w	8006658 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006498:	4b2f      	ldr	r3, [pc, #188]	@ (8006558 <HAL_GPIO_Init+0x238>)
 800649a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800649e:	4a2e      	ldr	r2, [pc, #184]	@ (8006558 <HAL_GPIO_Init+0x238>)
 80064a0:	f043 0302 	orr.w	r3, r3, #2
 80064a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80064a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006558 <HAL_GPIO_Init+0x238>)
 80064aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064b6:	4a29      	ldr	r2, [pc, #164]	@ (800655c <HAL_GPIO_Init+0x23c>)
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	089b      	lsrs	r3, r3, #2
 80064bc:	3302      	adds	r3, #2
 80064be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	220f      	movs	r2, #15
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	43db      	mvns	r3, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a20      	ldr	r2, [pc, #128]	@ (8006560 <HAL_GPIO_Init+0x240>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d052      	beq.n	8006588 <HAL_GPIO_Init+0x268>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006564 <HAL_GPIO_Init+0x244>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d031      	beq.n	800654e <HAL_GPIO_Init+0x22e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006568 <HAL_GPIO_Init+0x248>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d02b      	beq.n	800654a <HAL_GPIO_Init+0x22a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a1d      	ldr	r2, [pc, #116]	@ (800656c <HAL_GPIO_Init+0x24c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d025      	beq.n	8006546 <HAL_GPIO_Init+0x226>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006570 <HAL_GPIO_Init+0x250>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d01f      	beq.n	8006542 <HAL_GPIO_Init+0x222>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1b      	ldr	r2, [pc, #108]	@ (8006574 <HAL_GPIO_Init+0x254>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d019      	beq.n	800653e <HAL_GPIO_Init+0x21e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1a      	ldr	r2, [pc, #104]	@ (8006578 <HAL_GPIO_Init+0x258>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <HAL_GPIO_Init+0x21a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a19      	ldr	r2, [pc, #100]	@ (800657c <HAL_GPIO_Init+0x25c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00d      	beq.n	8006536 <HAL_GPIO_Init+0x216>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a18      	ldr	r2, [pc, #96]	@ (8006580 <HAL_GPIO_Init+0x260>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <HAL_GPIO_Init+0x212>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a17      	ldr	r2, [pc, #92]	@ (8006584 <HAL_GPIO_Init+0x264>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d101      	bne.n	800652e <HAL_GPIO_Init+0x20e>
 800652a:	2309      	movs	r3, #9
 800652c:	e02d      	b.n	800658a <HAL_GPIO_Init+0x26a>
 800652e:	230a      	movs	r3, #10
 8006530:	e02b      	b.n	800658a <HAL_GPIO_Init+0x26a>
 8006532:	2308      	movs	r3, #8
 8006534:	e029      	b.n	800658a <HAL_GPIO_Init+0x26a>
 8006536:	2307      	movs	r3, #7
 8006538:	e027      	b.n	800658a <HAL_GPIO_Init+0x26a>
 800653a:	2306      	movs	r3, #6
 800653c:	e025      	b.n	800658a <HAL_GPIO_Init+0x26a>
 800653e:	2305      	movs	r3, #5
 8006540:	e023      	b.n	800658a <HAL_GPIO_Init+0x26a>
 8006542:	2304      	movs	r3, #4
 8006544:	e021      	b.n	800658a <HAL_GPIO_Init+0x26a>
 8006546:	2303      	movs	r3, #3
 8006548:	e01f      	b.n	800658a <HAL_GPIO_Init+0x26a>
 800654a:	2302      	movs	r3, #2
 800654c:	e01d      	b.n	800658a <HAL_GPIO_Init+0x26a>
 800654e:	2301      	movs	r3, #1
 8006550:	e01b      	b.n	800658a <HAL_GPIO_Init+0x26a>
 8006552:	bf00      	nop
 8006554:	58000080 	.word	0x58000080
 8006558:	58024400 	.word	0x58024400
 800655c:	58000400 	.word	0x58000400
 8006560:	58020000 	.word	0x58020000
 8006564:	58020400 	.word	0x58020400
 8006568:	58020800 	.word	0x58020800
 800656c:	58020c00 	.word	0x58020c00
 8006570:	58021000 	.word	0x58021000
 8006574:	58021400 	.word	0x58021400
 8006578:	58021800 	.word	0x58021800
 800657c:	58021c00 	.word	0x58021c00
 8006580:	58022000 	.word	0x58022000
 8006584:	58022400 	.word	0x58022400
 8006588:	2300      	movs	r3, #0
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	f002 0203 	and.w	r2, r2, #3
 8006590:	0092      	lsls	r2, r2, #2
 8006592:	4093      	lsls	r3, r2
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4313      	orrs	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800659a:	4938      	ldr	r1, [pc, #224]	@ (800667c <HAL_GPIO_Init+0x35c>)
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	089b      	lsrs	r3, r3, #2
 80065a0:	3302      	adds	r3, #2
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	43db      	mvns	r3, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	4013      	ands	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80065ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80065d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4013      	ands	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80065fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	43db      	mvns	r3, r3
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	4013      	ands	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	43db      	mvns	r3, r3
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	4013      	ands	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	3301      	adds	r3, #1
 800665c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	f47f ae63 	bne.w	8006334 <HAL_GPIO_Init+0x14>
  }
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	3724      	adds	r7, #36	@ 0x24
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	58000400 	.word	0x58000400

08006680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e08b      	b.n	80067aa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fa fd8e 	bl	80011c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2224      	movs	r2, #36	@ 0x24
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80066d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d107      	bne.n	80066fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066f6:	609a      	str	r2, [r3, #8]
 80066f8:	e006      	b.n	8006708 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006706:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d108      	bne.n	8006722 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800671e:	605a      	str	r2, [r3, #4]
 8006720:	e007      	b.n	8006732 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006730:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6859      	ldr	r1, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	4b1d      	ldr	r3, [pc, #116]	@ (80067b4 <HAL_I2C_Init+0x134>)
 800673e:	430b      	orrs	r3, r1
 8006740:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006750:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69d9      	ldr	r1, [r3, #28]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1a      	ldr	r2, [r3, #32]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	02008000 	.word	0x02008000

080067b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	461a      	mov	r2, r3
 80067c4:	460b      	mov	r3, r1
 80067c6:	817b      	strh	r3, [r7, #10]
 80067c8:	4613      	mov	r3, r2
 80067ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	f040 80fd 	bne.w	80069d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_I2C_Master_Transmit+0x30>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e0f6      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x21e>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067f0:	f7fb faca 	bl	8001d88 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	2319      	movs	r3, #25
 80067fc:	2201      	movs	r2, #1
 80067fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f002 f89e 	bl	8008944 <I2C_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0e1      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2221      	movs	r2, #33	@ 0x21
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2210      	movs	r2, #16
 800681e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	893a      	ldrh	r2, [r7, #8]
 8006832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	2bff      	cmp	r3, #255	@ 0xff
 8006842:	d906      	bls.n	8006852 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	22ff      	movs	r2, #255	@ 0xff
 8006848:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800684a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e007      	b.n	8006862 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800685c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006860:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006866:	2b00      	cmp	r3, #0
 8006868:	d024      	beq.n	80068b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	3301      	adds	r3, #1
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	8979      	ldrh	r1, [r7, #10]
 80068a6:	4b4e      	ldr	r3, [pc, #312]	@ (80069e0 <HAL_I2C_Master_Transmit+0x228>)
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f002 fa0d 	bl	8008ccc <I2C_TransferConfig>
 80068b2:	e066      	b.n	8006982 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	8979      	ldrh	r1, [r7, #10]
 80068bc:	4b48      	ldr	r3, [pc, #288]	@ (80069e0 <HAL_I2C_Master_Transmit+0x228>)
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f002 fa02 	bl	8008ccc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80068c8:	e05b      	b.n	8006982 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	6a39      	ldr	r1, [r7, #32]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f002 f891 	bl	80089f6 <I2C_WaitOnTXISFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e07b      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d034      	beq.n	8006982 <HAL_I2C_Master_Transmit+0x1ca>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691c:	2b00      	cmp	r3, #0
 800691e:	d130      	bne.n	8006982 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	2200      	movs	r2, #0
 8006928:	2180      	movs	r1, #128	@ 0x80
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f002 f80a 	bl	8008944 <I2C_WaitOnFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e04d      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800693e:	b29b      	uxth	r3, r3
 8006940:	2bff      	cmp	r3, #255	@ 0xff
 8006942:	d90e      	bls.n	8006962 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	22ff      	movs	r2, #255	@ 0xff
 8006948:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800694e:	b2da      	uxtb	r2, r3
 8006950:	8979      	ldrh	r1, [r7, #10]
 8006952:	2300      	movs	r3, #0
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f002 f9b6 	bl	8008ccc <I2C_TransferConfig>
 8006960:	e00f      	b.n	8006982 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006970:	b2da      	uxtb	r2, r3
 8006972:	8979      	ldrh	r1, [r7, #10]
 8006974:	2300      	movs	r3, #0
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f002 f9a5 	bl	8008ccc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d19e      	bne.n	80068ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	6a39      	ldr	r1, [r7, #32]
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f002 f877 	bl	8008a84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e01a      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2220      	movs	r2, #32
 80069a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6859      	ldr	r1, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <HAL_I2C_Master_Transmit+0x22c>)
 80069b4:	400b      	ands	r3, r1
 80069b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e000      	b.n	80069d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	80002000 	.word	0x80002000
 80069e4:	fe00e800 	.word	0xfe00e800

080069e8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	@ 0x28
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	461a      	mov	r2, r3
 80069f4:	460b      	mov	r3, r1
 80069f6:	817b      	strh	r3, [r7, #10]
 80069f8:	4613      	mov	r3, r2
 80069fa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	f040 80ef 	bne.w	8006bec <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1c:	d101      	bne.n	8006a22 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e0e5      	b.n	8006bee <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_I2C_Master_Transmit_DMA+0x48>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e0de      	b.n	8006bee <HAL_I2C_Master_Transmit_DMA+0x206>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2221      	movs	r2, #33	@ 0x21
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2210      	movs	r2, #16
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	893a      	ldrh	r2, [r7, #8]
 8006a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a66      	ldr	r2, [pc, #408]	@ (8006bf8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a66      	ldr	r2, [pc, #408]	@ (8006bfc <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006a64:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2bff      	cmp	r3, #255	@ 0xff
 8006a6e:	d906      	bls.n	8006a7e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	22ff      	movs	r2, #255	@ 0xff
 8006a74:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006a76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	e007      	b.n	8006a8e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006a88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a8c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01a      	beq.n	8006acc <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	781a      	ldrb	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d074      	beq.n	8006bbe <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d022      	beq.n	8006b22 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae0:	4a47      	ldr	r2, [pc, #284]	@ (8006c00 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8006ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae8:	4a46      	ldr	r2, [pc, #280]	@ (8006c04 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8006aea:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af0:	2200      	movs	r2, #0
 8006af2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af8:	2200      	movs	r2, #0
 8006afa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006b0c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006b12:	f7fd f90b 	bl	8003d2c <HAL_DMA_Start_IT>
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d13a      	bne.n	8006b96 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8006b20:	e013      	b.n	8006b4a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e051      	b.n	8006bee <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	3301      	adds	r3, #1
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	8979      	ldrh	r1, [r7, #10]
 8006b56:	4b2c      	ldr	r3, [pc, #176]	@ (8006c08 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f002 f8b5 	bl	8008ccc <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b7c:	2110      	movs	r1, #16
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f002 f8d6 	bl	8008d30 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e028      	b.n	8006be8 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006baa:	f043 0210 	orr.w	r2, r3, #16
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e017      	b.n	8006bee <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a12      	ldr	r2, [pc, #72]	@ (8006c0c <HAL_I2C_Master_Transmit_DMA+0x224>)
 8006bc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	8979      	ldrh	r1, [r7, #10]
 8006bca:	4b0f      	ldr	r3, [pc, #60]	@ (8006c08 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f002 f87a 	bl	8008ccc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006be0:	2101      	movs	r1, #1
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f002 f8a4 	bl	8008d30 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	e000      	b.n	8006bee <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006bec:	2302      	movs	r3, #2
  }
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	ffff0000 	.word	0xffff0000
 8006bfc:	08007247 	.word	0x08007247
 8006c00:	080085ff 	.word	0x080085ff
 8006c04:	08008695 	.word	0x08008695
 8006c08:	80002000 	.word	0x80002000
 8006c0c:	08006dd7 	.word	0x08006dd7

08006c10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	68f9      	ldr	r1, [r7, #12]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d010      	beq.n	8006c8a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	09db      	lsrs	r3, r3, #7
 8006c6c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c78:	f043 0201 	orr.w	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c88:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	0a9b      	lsrs	r3, r3, #10
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	09db      	lsrs	r3, r3, #7
 8006c9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca6:	f043 0208 	orr.w	r2, r3, #8
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cb6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	0a5b      	lsrs	r3, r3, #9
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d010      	beq.n	8006ce6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	09db      	lsrs	r3, r3, #7
 8006cc8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd4:	f043 0202 	orr.w	r2, r3, #2
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ce4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 030b 	and.w	r3, r3, #11
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fb45 	bl	8008388 <I2C_ITError>
  }
}
 8006cfe:	bf00      	nop
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
 8006d62:	4613      	mov	r3, r2
 8006d64:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b088      	sub	sp, #32
 8006dda:	af02      	add	r7, sp, #8
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <I2C_Master_ISR_IT+0x1e>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e120      	b.n	8007036 <I2C_Master_ISR_IT+0x260>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	091b      	lsrs	r3, r3, #4
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d013      	beq.n	8006e30 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	091b      	lsrs	r3, r3, #4
 8006e0c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00d      	beq.n	8006e30 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2210      	movs	r2, #16
 8006e1a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e20:	f043 0204 	orr.w	r2, r3, #4
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f001 fbc4 	bl	80085b6 <I2C_Flush_TXDR>
 8006e2e:	e0ed      	b.n	800700c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	089b      	lsrs	r3, r3, #2
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d023      	beq.n	8006e84 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	089b      	lsrs	r3, r3, #2
 8006e40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01d      	beq.n	8006e84 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f023 0304 	bic.w	r3, r3, #4
 8006e4e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e82:	e0c3      	b.n	800700c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	099b      	lsrs	r3, r3, #6
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d12a      	bne.n	8006ee6 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d024      	beq.n	8006ee6 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01e      	beq.n	8006ee6 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80ac 	beq.w	800700c <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	781a      	ldrb	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006ee4:	e092      	b.n	800700c <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	09db      	lsrs	r3, r3, #7
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d05d      	beq.n	8006fae <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	099b      	lsrs	r3, r3, #6
 8006ef6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d057      	beq.n	8006fae <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d040      	beq.n	8006f8a <I2C_Master_ISR_IT+0x1b4>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d13c      	bne.n	8006f8a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f1c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2bff      	cmp	r3, #255	@ 0xff
 8006f26:	d90e      	bls.n	8006f46 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	22ff      	movs	r2, #255	@ 0xff
 8006f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	8a79      	ldrh	r1, [r7, #18]
 8006f36:	2300      	movs	r3, #0
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f001 fec4 	bl	8008ccc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f44:	e032      	b.n	8006fac <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f58:	d00b      	beq.n	8006f72 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006f64:	8a79      	ldrh	r1, [r7, #18]
 8006f66:	2000      	movs	r0, #0
 8006f68:	9000      	str	r0, [sp, #0]
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 feae 	bl	8008ccc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f70:	e01c      	b.n	8006fac <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	8a79      	ldrh	r1, [r7, #18]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f001 fea2 	bl	8008ccc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f88:	e010      	b.n	8006fac <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f98:	d003      	beq.n	8006fa2 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fdde 	bl	8007b5c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fa0:	e034      	b.n	800700c <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006fa2:	2140      	movs	r1, #64	@ 0x40
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f001 f9ef 	bl	8008388 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006faa:	e02f      	b.n	800700c <I2C_Master_ISR_IT+0x236>
 8006fac:	e02e      	b.n	800700c <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	099b      	lsrs	r3, r3, #6
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d028      	beq.n	800700c <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	099b      	lsrs	r3, r3, #6
 8006fbe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d022      	beq.n	800700c <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d119      	bne.n	8007004 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fde:	d015      	beq.n	800700c <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fe8:	d108      	bne.n	8006ffc <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	e007      	b.n	800700c <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fdad 	bl	8007b5c <I2C_ITMasterSeqCplt>
 8007002:	e003      	b.n	800700c <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007004:	2140      	movs	r1, #64	@ 0x40
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f001 f9be 	bl	8008388 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007024:	6979      	ldr	r1, [r7, #20]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 fe34 	bl	8007c94 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b086      	sub	sp, #24
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <I2C_Slave_ISR_IT+0x24>
 800705e:	2302      	movs	r3, #2
 8007060:	e0ed      	b.n	800723e <I2C_Slave_ISR_IT+0x200>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800707e:	2b00      	cmp	r3, #0
 8007080:	d004      	beq.n	800708c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007082:	6939      	ldr	r1, [r7, #16]
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 fecf 	bl	8007e28 <I2C_ITSlaveCplt>
 800708a:	e0d3      	b.n	8007234 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	091b      	lsrs	r3, r3, #4
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d04d      	beq.n	8007134 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d047      	beq.n	8007134 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d128      	bne.n	8007100 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b28      	cmp	r3, #40	@ 0x28
 80070b8:	d108      	bne.n	80070cc <I2C_Slave_ISR_IT+0x8e>
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070c0:	d104      	bne.n	80070cc <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80070c2:	6939      	ldr	r1, [r7, #16]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f001 f909 	bl	80082dc <I2C_ITListenCplt>
 80070ca:	e032      	b.n	8007132 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b29      	cmp	r3, #41	@ 0x29
 80070d6:	d10e      	bne.n	80070f6 <I2C_Slave_ISR_IT+0xb8>
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80070de:	d00a      	beq.n	80070f6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2210      	movs	r2, #16
 80070e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f001 fa64 	bl	80085b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fd71 	bl	8007bd6 <I2C_ITSlaveSeqCplt>
 80070f4:	e01d      	b.n	8007132 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2210      	movs	r2, #16
 80070fc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80070fe:	e096      	b.n	800722e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2210      	movs	r2, #16
 8007106:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710c:	f043 0204 	orr.w	r2, r3, #4
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d004      	beq.n	8007124 <I2C_Slave_ISR_IT+0xe6>
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007120:	f040 8085 	bne.w	800722e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007128:	4619      	mov	r1, r3
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f001 f92c 	bl	8008388 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007130:	e07d      	b.n	800722e <I2C_Slave_ISR_IT+0x1f0>
 8007132:	e07c      	b.n	800722e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d030      	beq.n	80071a2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	089b      	lsrs	r3, r3, #2
 8007144:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02a      	beq.n	80071a2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d018      	beq.n	8007188 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d14f      	bne.n	8007232 <I2C_Slave_ISR_IT+0x1f4>
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007198:	d04b      	beq.n	8007232 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fd1b 	bl	8007bd6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80071a0:	e047      	b.n	8007232 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	08db      	lsrs	r3, r3, #3
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	08db      	lsrs	r3, r3, #3
 80071b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80071ba:	6939      	ldr	r1, [r7, #16]
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fc49 	bl	8007a54 <I2C_ITAddrCplt>
 80071c2:	e037      	b.n	8007234 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d031      	beq.n	8007234 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d02b      	beq.n	8007234 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d018      	beq.n	8007218 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720e:	3b01      	subs	r3, #1
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007216:	e00d      	b.n	8007234 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800721e:	d002      	beq.n	8007226 <I2C_Slave_ISR_IT+0x1e8>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d106      	bne.n	8007234 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fcd5 	bl	8007bd6 <I2C_ITSlaveSeqCplt>
 800722c:	e002      	b.n	8007234 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800722e:	bf00      	nop
 8007230:	e000      	b.n	8007234 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8007232:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b088      	sub	sp, #32
 800724a:	af02      	add	r7, sp, #8
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <I2C_Master_ISR_DMA+0x1a>
 800725c:	2302      	movs	r3, #2
 800725e:	e0e1      	b.n	8007424 <I2C_Master_ISR_DMA+0x1de>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	091b      	lsrs	r3, r3, #4
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d017      	beq.n	80072a4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	091b      	lsrs	r3, r3, #4
 8007278:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800727c:	2b00      	cmp	r3, #0
 800727e:	d011      	beq.n	80072a4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2210      	movs	r2, #16
 8007286:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728c:	f043 0204 	orr.w	r2, r3, #4
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007294:	2120      	movs	r1, #32
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f001 fd4a 	bl	8008d30 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f001 f98a 	bl	80085b6 <I2C_Flush_TXDR>
 80072a2:	e0ba      	b.n	800741a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	09db      	lsrs	r3, r3, #7
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d072      	beq.n	8007396 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	099b      	lsrs	r3, r3, #6
 80072b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d06c      	beq.n	8007396 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072ca:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d04e      	beq.n	8007374 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2bff      	cmp	r3, #255	@ 0xff
 80072ec:	d906      	bls.n	80072fc <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	22ff      	movs	r2, #255	@ 0xff
 80072f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80072f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	e010      	b.n	800731e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800730e:	d003      	beq.n	8007318 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	e002      	b.n	800731e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007318:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800731c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007322:	b2da      	uxtb	r2, r3
 8007324:	8a79      	ldrh	r1, [r7, #18]
 8007326:	2300      	movs	r3, #0
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f001 fccd 	bl	8008ccc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b22      	cmp	r3, #34	@ 0x22
 800734e:	d108      	bne.n	8007362 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800735e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007360:	e05b      	b.n	800741a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007370:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007372:	e052      	b.n	800741a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800737e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007382:	d003      	beq.n	800738c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fbe9 	bl	8007b5c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800738a:	e046      	b.n	800741a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800738c:	2140      	movs	r1, #64	@ 0x40
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 fffa 	bl	8008388 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007394:	e041      	b.n	800741a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	099b      	lsrs	r3, r3, #6
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d029      	beq.n	80073f6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	099b      	lsrs	r3, r3, #6
 80073a6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d023      	beq.n	80073f6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d119      	bne.n	80073ec <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073c6:	d027      	beq.n	8007418 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80073d0:	d108      	bne.n	80073e4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073e0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80073e2:	e019      	b.n	8007418 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fbb9 	bl	8007b5c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80073ea:	e015      	b.n	8007418 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80073ec:	2140      	movs	r1, #64	@ 0x40
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 ffca 	bl	8008388 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80073f4:	e010      	b.n	8007418 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	095b      	lsrs	r3, r3, #5
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fc3f 	bl	8007c94 <I2C_ITMasterCplt>
 8007416:	e000      	b.n	800741a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007418:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007438:	4b92      	ldr	r3, [pc, #584]	@ (8007684 <I2C_Mem_ISR_DMA+0x258>)
 800743a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <I2C_Mem_ISR_DMA+0x1e>
 8007446:	2302      	movs	r3, #2
 8007448:	e118      	b.n	800767c <I2C_Mem_ISR_DMA+0x250>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	091b      	lsrs	r3, r3, #4
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d017      	beq.n	800748e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	091b      	lsrs	r3, r3, #4
 8007462:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007466:	2b00      	cmp	r3, #0
 8007468:	d011      	beq.n	800748e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2210      	movs	r2, #16
 8007470:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007476:	f043 0204 	orr.w	r2, r3, #4
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800747e:	2120      	movs	r1, #32
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f001 fc55 	bl	8008d30 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f001 f895 	bl	80085b6 <I2C_Flush_TXDR>
 800748c:	e0f1      	b.n	8007672 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00f      	beq.n	80074ba <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80074ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80074b8:	e0db      	b.n	8007672 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	09db      	lsrs	r3, r3, #7
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d060      	beq.n	8007588 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	099b      	lsrs	r3, r3, #6
 80074ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d05a      	beq.n	8007588 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80074d2:	2101      	movs	r1, #1
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f001 fcaf 	bl	8008e38 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80074da:	2110      	movs	r1, #16
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f001 fc27 	bl	8008d30 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d048      	beq.n	800757e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2bff      	cmp	r3, #255	@ 0xff
 80074f4:	d910      	bls.n	8007518 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	22ff      	movs	r2, #255	@ 0xff
 80074fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007500:	b299      	uxth	r1, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007506:	b2da      	uxtb	r2, r3
 8007508:	2300      	movs	r3, #0
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f001 fbdb 	bl	8008ccc <I2C_TransferConfig>
 8007516:	e011      	b.n	800753c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800751c:	b29a      	uxth	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007526:	b299      	uxth	r1, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800752c:	b2da      	uxtb	r2, r3
 800752e:	2300      	movs	r3, #0
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f001 fbc8 	bl	8008ccc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b22      	cmp	r3, #34	@ 0x22
 8007558:	d108      	bne.n	800756c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007568:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800756a:	e082      	b.n	8007672 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800757a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800757c:	e079      	b.n	8007672 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800757e:	2140      	movs	r1, #64	@ 0x40
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 ff01 	bl	8008388 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007586:	e074      	b.n	8007672 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	099b      	lsrs	r3, r3, #6
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d05e      	beq.n	8007652 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	099b      	lsrs	r3, r3, #6
 8007598:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800759c:	2b00      	cmp	r3, #0
 800759e:	d058      	beq.n	8007652 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80075a0:	2101      	movs	r1, #1
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f001 fc48 	bl	8008e38 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80075a8:	2110      	movs	r1, #16
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 fbc0 	bl	8008d30 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b22      	cmp	r3, #34	@ 0x22
 80075ba:	d101      	bne.n	80075c0 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80075bc:	4b32      	ldr	r3, [pc, #200]	@ (8007688 <I2C_Mem_ISR_DMA+0x25c>)
 80075be:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2bff      	cmp	r3, #255	@ 0xff
 80075c8:	d910      	bls.n	80075ec <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	22ff      	movs	r2, #255	@ 0xff
 80075ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d4:	b299      	uxth	r1, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f001 fb71 	bl	8008ccc <I2C_TransferConfig>
 80075ea:	e011      	b.n	8007610 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075fa:	b299      	uxth	r1, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007600:	b2da      	uxtb	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f001 fb5e 	bl	8008ccc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b22      	cmp	r3, #34	@ 0x22
 800762c:	d108      	bne.n	8007640 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800763c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800763e:	e018      	b.n	8007672 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800764e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007650:	e00f      	b.n	8007672 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fb11 	bl	8007c94 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	80002000 	.word	0x80002000
 8007688:	80002400 	.word	0x80002400

0800768c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d101      	bne.n	80076b0 <I2C_Slave_ISR_DMA+0x24>
 80076ac:	2302      	movs	r3, #2
 80076ae:	e1cc      	b.n	8007a4a <I2C_Slave_ISR_DMA+0x3be>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fba8 	bl	8007e28 <I2C_ITSlaveCplt>
 80076d8:	e1b2      	b.n	8007a40 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	091b      	lsrs	r3, r3, #4
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 819c 	beq.w	8007a20 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	091b      	lsrs	r3, r3, #4
 80076ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8195 	beq.w	8007a20 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	0b9b      	lsrs	r3, r3, #14
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	0bdb      	lsrs	r3, r3, #15
 8007706:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 8181 	beq.w	8007a12 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d07c      	beq.n	8007812 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	0bdb      	lsrs	r3, r3, #15
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d076      	beq.n	8007812 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a75      	ldr	r2, [pc, #468]	@ (8007900 <I2C_Slave_ISR_DMA+0x274>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d059      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a73      	ldr	r2, [pc, #460]	@ (8007904 <I2C_Slave_ISR_DMA+0x278>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d053      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a71      	ldr	r2, [pc, #452]	@ (8007908 <I2C_Slave_ISR_DMA+0x27c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d04d      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a6f      	ldr	r2, [pc, #444]	@ (800790c <I2C_Slave_ISR_DMA+0x280>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d047      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a6d      	ldr	r2, [pc, #436]	@ (8007910 <I2C_Slave_ISR_DMA+0x284>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d041      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a6b      	ldr	r2, [pc, #428]	@ (8007914 <I2C_Slave_ISR_DMA+0x288>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d03b      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a69      	ldr	r2, [pc, #420]	@ (8007918 <I2C_Slave_ISR_DMA+0x28c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d035      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a67      	ldr	r2, [pc, #412]	@ (800791c <I2C_Slave_ISR_DMA+0x290>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d02f      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a65      	ldr	r2, [pc, #404]	@ (8007920 <I2C_Slave_ISR_DMA+0x294>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d029      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a63      	ldr	r2, [pc, #396]	@ (8007924 <I2C_Slave_ISR_DMA+0x298>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d023      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a61      	ldr	r2, [pc, #388]	@ (8007928 <I2C_Slave_ISR_DMA+0x29c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d01d      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a5f      	ldr	r2, [pc, #380]	@ (800792c <I2C_Slave_ISR_DMA+0x2a0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d017      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a5d      	ldr	r2, [pc, #372]	@ (8007930 <I2C_Slave_ISR_DMA+0x2a4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d011      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a5b      	ldr	r2, [pc, #364]	@ (8007934 <I2C_Slave_ISR_DMA+0x2a8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a59      	ldr	r2, [pc, #356]	@ (8007938 <I2C_Slave_ISR_DMA+0x2ac>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d005      	beq.n	80077e4 <I2C_Slave_ISR_DMA+0x158>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a57      	ldr	r2, [pc, #348]	@ (800793c <I2C_Slave_ISR_DMA+0x2b0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d109      	bne.n	80077f8 <I2C_Slave_ISR_DMA+0x16c>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	bf0c      	ite	eq
 80077f0:	2301      	moveq	r3, #1
 80077f2:	2300      	movne	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	e008      	b.n	800780a <I2C_Slave_ISR_DMA+0x17e>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf0c      	ite	eq
 8007804:	2301      	moveq	r3, #1
 8007806:	2300      	movne	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800780e:	2301      	movs	r3, #1
 8007810:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 809f 	beq.w	800795a <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	0b9b      	lsrs	r3, r3, #14
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8098 	beq.w	800795a <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a33      	ldr	r2, [pc, #204]	@ (8007900 <I2C_Slave_ISR_DMA+0x274>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d059      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a31      	ldr	r2, [pc, #196]	@ (8007904 <I2C_Slave_ISR_DMA+0x278>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d053      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a2f      	ldr	r2, [pc, #188]	@ (8007908 <I2C_Slave_ISR_DMA+0x27c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d04d      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2d      	ldr	r2, [pc, #180]	@ (800790c <I2C_Slave_ISR_DMA+0x280>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d047      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a2b      	ldr	r2, [pc, #172]	@ (8007910 <I2C_Slave_ISR_DMA+0x284>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d041      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a29      	ldr	r2, [pc, #164]	@ (8007914 <I2C_Slave_ISR_DMA+0x288>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d03b      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a27      	ldr	r2, [pc, #156]	@ (8007918 <I2C_Slave_ISR_DMA+0x28c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d035      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a25      	ldr	r2, [pc, #148]	@ (800791c <I2C_Slave_ISR_DMA+0x290>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d02f      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a23      	ldr	r2, [pc, #140]	@ (8007920 <I2C_Slave_ISR_DMA+0x294>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d029      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a21      	ldr	r2, [pc, #132]	@ (8007924 <I2C_Slave_ISR_DMA+0x298>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d023      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007928 <I2C_Slave_ISR_DMA+0x29c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d01d      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1d      	ldr	r2, [pc, #116]	@ (800792c <I2C_Slave_ISR_DMA+0x2a0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d017      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <I2C_Slave_ISR_DMA+0x2a4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d011      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a19      	ldr	r2, [pc, #100]	@ (8007934 <I2C_Slave_ISR_DMA+0x2a8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00b      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a17      	ldr	r2, [pc, #92]	@ (8007938 <I2C_Slave_ISR_DMA+0x2ac>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d005      	beq.n	80078ea <I2C_Slave_ISR_DMA+0x25e>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a15      	ldr	r2, [pc, #84]	@ (800793c <I2C_Slave_ISR_DMA+0x2b0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d12a      	bne.n	8007940 <I2C_Slave_ISR_DMA+0x2b4>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bf0c      	ite	eq
 80078f6:	2301      	moveq	r3, #1
 80078f8:	2300      	movne	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	e029      	b.n	8007952 <I2C_Slave_ISR_DMA+0x2c6>
 80078fe:	bf00      	nop
 8007900:	40020010 	.word	0x40020010
 8007904:	40020028 	.word	0x40020028
 8007908:	40020040 	.word	0x40020040
 800790c:	40020058 	.word	0x40020058
 8007910:	40020070 	.word	0x40020070
 8007914:	40020088 	.word	0x40020088
 8007918:	400200a0 	.word	0x400200a0
 800791c:	400200b8 	.word	0x400200b8
 8007920:	40020410 	.word	0x40020410
 8007924:	40020428 	.word	0x40020428
 8007928:	40020440 	.word	0x40020440
 800792c:	40020458 	.word	0x40020458
 8007930:	40020470 	.word	0x40020470
 8007934:	40020488 	.word	0x40020488
 8007938:	400204a0 	.word	0x400204a0
 800793c:	400204b8 	.word	0x400204b8
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	bf0c      	ite	eq
 800794c:	2301      	moveq	r3, #1
 800794e:	2300      	movne	r3, #0
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8007956:	2301      	movs	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d128      	bne.n	80079b2 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b28      	cmp	r3, #40	@ 0x28
 800796a:	d108      	bne.n	800797e <I2C_Slave_ISR_DMA+0x2f2>
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007972:	d104      	bne.n	800797e <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fcb0 	bl	80082dc <I2C_ITListenCplt>
 800797c:	e048      	b.n	8007a10 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b29      	cmp	r3, #41	@ 0x29
 8007988:	d10e      	bne.n	80079a8 <I2C_Slave_ISR_DMA+0x31c>
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007990:	d00a      	beq.n	80079a8 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2210      	movs	r2, #16
 8007998:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fe0b 	bl	80085b6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 f918 	bl	8007bd6 <I2C_ITSlaveSeqCplt>
 80079a6:	e033      	b.n	8007a10 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2210      	movs	r2, #16
 80079ae:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80079b0:	e034      	b.n	8007a1c <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2210      	movs	r2, #16
 80079b8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079be:	f043 0204 	orr.w	r2, r3, #4
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079cc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d003      	beq.n	80079dc <I2C_Slave_ISR_DMA+0x350>
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079da:	d11f      	bne.n	8007a1c <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b21      	cmp	r3, #33	@ 0x21
 80079e0:	d002      	beq.n	80079e8 <I2C_Slave_ISR_DMA+0x35c>
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2b29      	cmp	r3, #41	@ 0x29
 80079e6:	d103      	bne.n	80079f0 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2221      	movs	r2, #33	@ 0x21
 80079ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80079ee:	e008      	b.n	8007a02 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	2b22      	cmp	r3, #34	@ 0x22
 80079f4:	d002      	beq.n	80079fc <I2C_Slave_ISR_DMA+0x370>
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079fa:	d102      	bne.n	8007a02 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2222      	movs	r2, #34	@ 0x22
 8007a00:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a06:	4619      	mov	r1, r3
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 fcbd 	bl	8008388 <I2C_ITError>
      if (treatdmanack == 1U)
 8007a0e:	e005      	b.n	8007a1c <I2C_Slave_ISR_DMA+0x390>
 8007a10:	e004      	b.n	8007a1c <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2210      	movs	r2, #16
 8007a18:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007a1a:	e011      	b.n	8007a40 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8007a1c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007a1e:	e00f      	b.n	8007a40 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	08db      	lsrs	r3, r3, #3
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	08db      	lsrs	r3, r3, #3
 8007a30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f80a 	bl	8007a54 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop

08007a54 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007a6a:	2b28      	cmp	r3, #40	@ 0x28
 8007a6c:	d16a      	bne.n	8007b44 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	0c1b      	lsrs	r3, r3, #16
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	0c1b      	lsrs	r3, r3, #16
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007a8c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a9a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007aa8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d138      	bne.n	8007b24 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007ab2:	897b      	ldrh	r3, [r7, #10]
 8007ab4:	09db      	lsrs	r3, r3, #7
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	89bb      	ldrh	r3, [r7, #12]
 8007aba:	4053      	eors	r3, r2
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	f003 0306 	and.w	r3, r3, #6
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d11c      	bne.n	8007b00 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007ac6:	897b      	ldrh	r3, [r7, #10]
 8007ac8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d13b      	bne.n	8007b54 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2208      	movs	r2, #8
 8007ae8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007af2:	89ba      	ldrh	r2, [r7, #12]
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff f92c 	bl	8006d56 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007afe:	e029      	b.n	8007b54 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f995 	bl	8008e38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007b16:	89ba      	ldrh	r2, [r7, #12]
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff f91a 	bl	8006d56 <HAL_I2C_AddrCallback>
}
 8007b22:	e017      	b.n	8007b54 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007b24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 f985 	bl	8008e38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007b36:	89ba      	ldrh	r2, [r7, #12]
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff f90a 	bl	8006d56 <HAL_I2C_AddrCallback>
}
 8007b42:	e007      	b.n	8007b54 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2208      	movs	r2, #8
 8007b4a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007b54:	bf00      	nop
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b21      	cmp	r3, #33	@ 0x21
 8007b76:	d115      	bne.n	8007ba4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2211      	movs	r2, #17
 8007b84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 f952 	bl	8008e38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff f8b2 	bl	8006d06 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ba2:	e014      	b.n	8007bce <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2212      	movs	r2, #18
 8007bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007bb8:	2102      	movs	r1, #2
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 f93c 	bl	8008e38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff f8a6 	bl	8006d1a <HAL_I2C_MasterRxCpltCallback>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	0b9b      	lsrs	r3, r3, #14
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e00d      	b.n	8007c28 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	0bdb      	lsrs	r3, r3, #15
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d007      	beq.n	8007c28 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c26:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b29      	cmp	r3, #41	@ 0x29
 8007c32:	d112      	bne.n	8007c5a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2228      	movs	r2, #40	@ 0x28
 8007c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2221      	movs	r2, #33	@ 0x21
 8007c40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c42:	2101      	movs	r1, #1
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f8f7 	bl	8008e38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff f86b 	bl	8006d2e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c58:	e017      	b.n	8007c8a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c64:	d111      	bne.n	8007c8a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2228      	movs	r2, #40	@ 0x28
 8007c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2222      	movs	r2, #34	@ 0x22
 8007c72:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007c74:	2102      	movs	r1, #2
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 f8de 	bl	8008e38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff f85c 	bl	8006d42 <HAL_I2C_SlaveRxCpltCallback>
}
 8007c8a:	bf00      	nop
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b21      	cmp	r3, #33	@ 0x21
 8007cb4:	d107      	bne.n	8007cc6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f8bd 	bl	8008e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2211      	movs	r2, #17
 8007cc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cc4:	e00c      	b.n	8007ce0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b22      	cmp	r3, #34	@ 0x22
 8007cd0:	d106      	bne.n	8007ce0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007cd2:	2102      	movs	r1, #2
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 f8af 	bl	8008e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2212      	movs	r2, #18
 8007cde:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6859      	ldr	r1, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b4d      	ldr	r3, [pc, #308]	@ (8007e20 <I2C_ITMasterCplt+0x18c>)
 8007cec:	400b      	ands	r3, r1
 8007cee:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8007e24 <I2C_ITMasterCplt+0x190>)
 8007cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	091b      	lsrs	r3, r3, #4
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2210      	movs	r2, #16
 8007d0e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d14:	f043 0204 	orr.w	r2, r3, #4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b60      	cmp	r3, #96	@ 0x60
 8007d26:	d10b      	bne.n	8007d40 <I2C_ITMasterCplt+0xac>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	089b      	lsrs	r3, r3, #2
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fc38 	bl	80085b6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d4a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b60      	cmp	r3, #96	@ 0x60
 8007d56:	d002      	beq.n	8007d5e <I2C_ITMasterCplt+0xca>
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d006      	beq.n	8007d6c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fb0f 	bl	8008388 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d6a:	e054      	b.n	8007e16 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b21      	cmp	r3, #33	@ 0x21
 8007d76:	d124      	bne.n	8007dc2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b40      	cmp	r3, #64	@ 0x40
 8007d90:	d10b      	bne.n	8007daa <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7fe ffef 	bl	8006d86 <HAL_I2C_MemTxCpltCallback>
}
 8007da8:	e035      	b.n	8007e16 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fe ffa3 	bl	8006d06 <HAL_I2C_MasterTxCpltCallback>
}
 8007dc0:	e029      	b.n	8007e16 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b22      	cmp	r3, #34	@ 0x22
 8007dcc:	d123      	bne.n	8007e16 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b40      	cmp	r3, #64	@ 0x40
 8007de6:	d10b      	bne.n	8007e00 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7fe ffce 	bl	8006d9a <HAL_I2C_MemRxCpltCallback>
}
 8007dfe:	e00a      	b.n	8007e16 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fe ff82 	bl	8006d1a <HAL_I2C_MasterRxCpltCallback>
}
 8007e16:	bf00      	nop
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	fe00e800 	.word	0xfe00e800
 8007e24:	ffff0000 	.word	0xffff0000

08007e28 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e42:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e4a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2220      	movs	r2, #32
 8007e52:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	2b21      	cmp	r3, #33	@ 0x21
 8007e58:	d002      	beq.n	8007e60 <I2C_ITSlaveCplt+0x38>
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	2b29      	cmp	r3, #41	@ 0x29
 8007e5e:	d108      	bne.n	8007e72 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007e60:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 ffe7 	bl	8008e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2221      	movs	r2, #33	@ 0x21
 8007e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e70:	e019      	b.n	8007ea6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	2b22      	cmp	r3, #34	@ 0x22
 8007e76:	d002      	beq.n	8007e7e <I2C_ITSlaveCplt+0x56>
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e7c:	d108      	bne.n	8007e90 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007e7e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 ffd8 	bl	8008e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2222      	movs	r2, #34	@ 0x22
 8007e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e8e:	e00a      	b.n	8007ea6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007e90:	7afb      	ldrb	r3, [r7, #11]
 8007e92:	2b28      	cmp	r3, #40	@ 0x28
 8007e94:	d107      	bne.n	8007ea6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007e96:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 ffcc 	bl	8008e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007eb4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6859      	ldr	r1, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b80      	ldr	r3, [pc, #512]	@ (80080c4 <I2C_ITSlaveCplt+0x29c>)
 8007ec2:	400b      	ands	r3, r1
 8007ec4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fb75 	bl	80085b6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	0b9b      	lsrs	r3, r3, #14
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d07a      	beq.n	8007fce <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ee6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 8112 	beq.w	8008116 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a73      	ldr	r2, [pc, #460]	@ (80080c8 <I2C_ITSlaveCplt+0x2a0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d059      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a71      	ldr	r2, [pc, #452]	@ (80080cc <I2C_ITSlaveCplt+0x2a4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d053      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a6f      	ldr	r2, [pc, #444]	@ (80080d0 <I2C_ITSlaveCplt+0x2a8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d04d      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a6d      	ldr	r2, [pc, #436]	@ (80080d4 <I2C_ITSlaveCplt+0x2ac>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d047      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a6b      	ldr	r2, [pc, #428]	@ (80080d8 <I2C_ITSlaveCplt+0x2b0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d041      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a69      	ldr	r2, [pc, #420]	@ (80080dc <I2C_ITSlaveCplt+0x2b4>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d03b      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a67      	ldr	r2, [pc, #412]	@ (80080e0 <I2C_ITSlaveCplt+0x2b8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d035      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a65      	ldr	r2, [pc, #404]	@ (80080e4 <I2C_ITSlaveCplt+0x2bc>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d02f      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a63      	ldr	r2, [pc, #396]	@ (80080e8 <I2C_ITSlaveCplt+0x2c0>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d029      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a61      	ldr	r2, [pc, #388]	@ (80080ec <I2C_ITSlaveCplt+0x2c4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d023      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a5f      	ldr	r2, [pc, #380]	@ (80080f0 <I2C_ITSlaveCplt+0x2c8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d01d      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80080f4 <I2C_ITSlaveCplt+0x2cc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d017      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a5b      	ldr	r2, [pc, #364]	@ (80080f8 <I2C_ITSlaveCplt+0x2d0>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d011      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a59      	ldr	r2, [pc, #356]	@ (80080fc <I2C_ITSlaveCplt+0x2d4>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00b      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a57      	ldr	r2, [pc, #348]	@ (8008100 <I2C_ITSlaveCplt+0x2d8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d005      	beq.n	8007fb2 <I2C_ITSlaveCplt+0x18a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a55      	ldr	r2, [pc, #340]	@ (8008104 <I2C_ITSlaveCplt+0x2dc>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d105      	bne.n	8007fbe <I2C_ITSlaveCplt+0x196>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	e004      	b.n	8007fc8 <I2C_ITSlaveCplt+0x1a0>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007fcc:	e0a3      	b.n	8008116 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	0bdb      	lsrs	r3, r3, #15
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 809d 	beq.w	8008116 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007fea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 8090 	beq.w	8008116 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a32      	ldr	r2, [pc, #200]	@ (80080c8 <I2C_ITSlaveCplt+0x2a0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d059      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a30      	ldr	r2, [pc, #192]	@ (80080cc <I2C_ITSlaveCplt+0x2a4>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d053      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a2e      	ldr	r2, [pc, #184]	@ (80080d0 <I2C_ITSlaveCplt+0x2a8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d04d      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a2c      	ldr	r2, [pc, #176]	@ (80080d4 <I2C_ITSlaveCplt+0x2ac>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d047      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a2a      	ldr	r2, [pc, #168]	@ (80080d8 <I2C_ITSlaveCplt+0x2b0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d041      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a28      	ldr	r2, [pc, #160]	@ (80080dc <I2C_ITSlaveCplt+0x2b4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d03b      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a26      	ldr	r2, [pc, #152]	@ (80080e0 <I2C_ITSlaveCplt+0x2b8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d035      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a24      	ldr	r2, [pc, #144]	@ (80080e4 <I2C_ITSlaveCplt+0x2bc>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d02f      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a22      	ldr	r2, [pc, #136]	@ (80080e8 <I2C_ITSlaveCplt+0x2c0>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d029      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a20      	ldr	r2, [pc, #128]	@ (80080ec <I2C_ITSlaveCplt+0x2c4>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d023      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1e      	ldr	r2, [pc, #120]	@ (80080f0 <I2C_ITSlaveCplt+0x2c8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d01d      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1c      	ldr	r2, [pc, #112]	@ (80080f4 <I2C_ITSlaveCplt+0x2cc>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d017      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1a      	ldr	r2, [pc, #104]	@ (80080f8 <I2C_ITSlaveCplt+0x2d0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d011      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a18      	ldr	r2, [pc, #96]	@ (80080fc <I2C_ITSlaveCplt+0x2d4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00b      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a16      	ldr	r2, [pc, #88]	@ (8008100 <I2C_ITSlaveCplt+0x2d8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d005      	beq.n	80080b6 <I2C_ITSlaveCplt+0x28e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a14      	ldr	r2, [pc, #80]	@ (8008104 <I2C_ITSlaveCplt+0x2dc>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d128      	bne.n	8008108 <I2C_ITSlaveCplt+0x2e0>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	e027      	b.n	8008112 <I2C_ITSlaveCplt+0x2ea>
 80080c2:	bf00      	nop
 80080c4:	fe00e800 	.word	0xfe00e800
 80080c8:	40020010 	.word	0x40020010
 80080cc:	40020028 	.word	0x40020028
 80080d0:	40020040 	.word	0x40020040
 80080d4:	40020058 	.word	0x40020058
 80080d8:	40020070 	.word	0x40020070
 80080dc:	40020088 	.word	0x40020088
 80080e0:	400200a0 	.word	0x400200a0
 80080e4:	400200b8 	.word	0x400200b8
 80080e8:	40020410 	.word	0x40020410
 80080ec:	40020428 	.word	0x40020428
 80080f0:	40020440 	.word	0x40020440
 80080f4:	40020458 	.word	0x40020458
 80080f8:	40020470 	.word	0x40020470
 80080fc:	40020488 	.word	0x40020488
 8008100:	400204a0 	.word	0x400204a0
 8008104:	400204b8 	.word	0x400204b8
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	b29b      	uxth	r3, r3
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	089b      	lsrs	r3, r3, #2
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d020      	beq.n	8008164 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f023 0304 	bic.w	r3, r3, #4
 8008128:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00c      	beq.n	8008164 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800814e:	3b01      	subs	r3, #1
 8008150:	b29a      	uxth	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008172:	f043 0204 	orr.w	r2, r3, #4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	091b      	lsrs	r3, r3, #4
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d04a      	beq.n	800821c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	091b      	lsrs	r3, r3, #4
 800818a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800818e:	2b00      	cmp	r3, #0
 8008190:	d044      	beq.n	800821c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008196:	b29b      	uxth	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d128      	bne.n	80081ee <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b28      	cmp	r3, #40	@ 0x28
 80081a6:	d108      	bne.n	80081ba <I2C_ITSlaveCplt+0x392>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ae:	d104      	bne.n	80081ba <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80081b0:	6979      	ldr	r1, [r7, #20]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f892 	bl	80082dc <I2C_ITListenCplt>
 80081b8:	e030      	b.n	800821c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b29      	cmp	r3, #41	@ 0x29
 80081c4:	d10e      	bne.n	80081e4 <I2C_ITSlaveCplt+0x3bc>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80081cc:	d00a      	beq.n	80081e4 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2210      	movs	r2, #16
 80081d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f9ed 	bl	80085b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff fcfa 	bl	8007bd6 <I2C_ITSlaveSeqCplt>
 80081e2:	e01b      	b.n	800821c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2210      	movs	r2, #16
 80081ea:	61da      	str	r2, [r3, #28]
 80081ec:	e016      	b.n	800821c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2210      	movs	r2, #16
 80081f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fa:	f043 0204 	orr.w	r2, r3, #4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <I2C_ITSlaveCplt+0x3e8>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800820e:	d105      	bne.n	800821c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f8b6 	bl	8008388 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800822e:	2b00      	cmp	r3, #0
 8008230:	d010      	beq.n	8008254 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f8a5 	bl	8008388 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b28      	cmp	r3, #40	@ 0x28
 8008248:	d141      	bne.n	80082ce <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800824a:	6979      	ldr	r1, [r7, #20]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f845 	bl	80082dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008252:	e03c      	b.n	80082ce <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800825c:	d014      	beq.n	8008288 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff fcb9 	bl	8007bd6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a1c      	ldr	r2, [pc, #112]	@ (80082d8 <I2C_ITSlaveCplt+0x4b0>)
 8008268:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7fe fd76 	bl	8006d72 <HAL_I2C_ListenCpltCallback>
}
 8008286:	e022      	b.n	80082ce <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b22      	cmp	r3, #34	@ 0x22
 8008292:	d10e      	bne.n	80082b2 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2220      	movs	r2, #32
 8008298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7fe fd49 	bl	8006d42 <HAL_I2C_SlaveRxCpltCallback>
}
 80082b0:	e00d      	b.n	80082ce <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7fe fd30 	bl	8006d2e <HAL_I2C_SlaveTxCpltCallback>
}
 80082ce:	bf00      	nop
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	ffff0000 	.word	0xffff0000

080082dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a26      	ldr	r2, [pc, #152]	@ (8008384 <I2C_ITListenCplt+0xa8>)
 80082ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	089b      	lsrs	r3, r3, #2
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d022      	beq.n	800835a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008330:	2b00      	cmp	r3, #0
 8008332:	d012      	beq.n	800835a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008338:	3b01      	subs	r3, #1
 800833a:	b29a      	uxth	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008352:	f043 0204 	orr.w	r2, r3, #4
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800835a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fd6a 	bl	8008e38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2210      	movs	r2, #16
 800836a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fe fcfc 	bl	8006d72 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	ffff0000 	.word	0xffff0000

08008388 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008398:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a6d      	ldr	r2, [pc, #436]	@ (800855c <I2C_ITError+0x1d4>)
 80083a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	2b28      	cmp	r3, #40	@ 0x28
 80083be:	d005      	beq.n	80083cc <I2C_ITError+0x44>
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	2b29      	cmp	r3, #41	@ 0x29
 80083c4:	d002      	beq.n	80083cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ca:	d10b      	bne.n	80083e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80083cc:	2103      	movs	r1, #3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fd32 	bl	8008e38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2228      	movs	r2, #40	@ 0x28
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a60      	ldr	r2, [pc, #384]	@ (8008560 <I2C_ITError+0x1d8>)
 80083e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80083e2:	e030      	b.n	8008446 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80083e4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fd25 	bl	8008e38 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f8e1 	bl	80085b6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b60      	cmp	r3, #96	@ 0x60
 80083fe:	d01f      	beq.n	8008440 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b20      	cmp	r3, #32
 8008414:	d114      	bne.n	8008440 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b10      	cmp	r3, #16
 8008422:	d109      	bne.n	8008438 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2210      	movs	r2, #16
 800842a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008430:	f043 0204 	orr.w	r2, r3, #4
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2220      	movs	r2, #32
 800843e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008450:	2b00      	cmp	r3, #0
 8008452:	d039      	beq.n	80084c8 <I2C_ITError+0x140>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b11      	cmp	r3, #17
 8008458:	d002      	beq.n	8008460 <I2C_ITError+0xd8>
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b21      	cmp	r3, #33	@ 0x21
 800845e:	d133      	bne.n	80084c8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800846a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800846e:	d107      	bne.n	8008480 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800847e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008484:	4618      	mov	r0, r3
 8008486:	f7fd fb49 	bl	8005b1c <HAL_DMA_GetState>
 800848a:	4603      	mov	r3, r0
 800848c:	2b01      	cmp	r3, #1
 800848e:	d017      	beq.n	80084c0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008494:	4a33      	ldr	r2, [pc, #204]	@ (8008564 <I2C_ITError+0x1dc>)
 8008496:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fc f9c9 	bl	800483c <HAL_DMA_Abort_IT>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d04d      	beq.n	800854c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80084ba:	4610      	mov	r0, r2
 80084bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80084be:	e045      	b.n	800854c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f851 	bl	8008568 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80084c6:	e041      	b.n	800854c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d039      	beq.n	8008544 <I2C_ITError+0x1bc>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b12      	cmp	r3, #18
 80084d4:	d002      	beq.n	80084dc <I2C_ITError+0x154>
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b22      	cmp	r3, #34	@ 0x22
 80084da:	d133      	bne.n	8008544 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ea:	d107      	bne.n	80084fc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008500:	4618      	mov	r0, r3
 8008502:	f7fd fb0b 	bl	8005b1c <HAL_DMA_GetState>
 8008506:	4603      	mov	r3, r0
 8008508:	2b01      	cmp	r3, #1
 800850a:	d017      	beq.n	800853c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008510:	4a14      	ldr	r2, [pc, #80]	@ (8008564 <I2C_ITError+0x1dc>)
 8008512:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008520:	4618      	mov	r0, r3
 8008522:	f7fc f98b 	bl	800483c <HAL_DMA_Abort_IT>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d011      	beq.n	8008550 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008536:	4610      	mov	r0, r2
 8008538:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800853a:	e009      	b.n	8008550 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f813 	bl	8008568 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008542:	e005      	b.n	8008550 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f80f 	bl	8008568 <I2C_TreatErrorCallback>
  }
}
 800854a:	e002      	b.n	8008552 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800854c:	bf00      	nop
 800854e:	e000      	b.n	8008552 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008550:	bf00      	nop
}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	ffff0000 	.word	0xffff0000
 8008560:	0800703f 	.word	0x0800703f
 8008564:	08008909 	.word	0x08008909

08008568 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b60      	cmp	r3, #96	@ 0x60
 800857a:	d10e      	bne.n	800859a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fe fc15 	bl	8006dc2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008598:	e009      	b.n	80085ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7fe fc00 	bl	8006dae <HAL_I2C_ErrorCallback>
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d103      	bne.n	80085d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2200      	movs	r2, #0
 80085d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d007      	beq.n	80085f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0201 	orr.w	r2, r2, #1
 80085f0:	619a      	str	r2, [r3, #24]
  }
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800861a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008626:	2120      	movs	r1, #32
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fb81 	bl	8008d30 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800862e:	e02d      	b.n	800868c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008638:	441a      	add	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008642:	b29b      	uxth	r3, r3
 8008644:	2bff      	cmp	r3, #255	@ 0xff
 8008646:	d903      	bls.n	8008650 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	22ff      	movs	r2, #255	@ 0xff
 800864c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800864e:	e004      	b.n	800865a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008654:	b29a      	uxth	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	4619      	mov	r1, r3
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3328      	adds	r3, #40	@ 0x28
 800866a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008670:	f7fb fb5c 	bl	8003d2c <HAL_DMA_Start_IT>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800867a:	2110      	movs	r1, #16
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fe83 	bl	8008388 <I2C_ITError>
}
 8008682:	e003      	b.n	800868c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008684:	2140      	movs	r1, #64	@ 0x40
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 fb52 	bl	8008d30 <I2C_Enable_IRQ>
}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d076      	beq.n	800879c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a71      	ldr	r2, [pc, #452]	@ (800887c <I2C_DMAError+0x1e8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d059      	beq.n	800876e <I2C_DMAError+0xda>
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a6f      	ldr	r2, [pc, #444]	@ (8008880 <I2C_DMAError+0x1ec>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d053      	beq.n	800876e <I2C_DMAError+0xda>
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a6d      	ldr	r2, [pc, #436]	@ (8008884 <I2C_DMAError+0x1f0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d04d      	beq.n	800876e <I2C_DMAError+0xda>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a6b      	ldr	r2, [pc, #428]	@ (8008888 <I2C_DMAError+0x1f4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d047      	beq.n	800876e <I2C_DMAError+0xda>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a69      	ldr	r2, [pc, #420]	@ (800888c <I2C_DMAError+0x1f8>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d041      	beq.n	800876e <I2C_DMAError+0xda>
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a67      	ldr	r2, [pc, #412]	@ (8008890 <I2C_DMAError+0x1fc>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d03b      	beq.n	800876e <I2C_DMAError+0xda>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a65      	ldr	r2, [pc, #404]	@ (8008894 <I2C_DMAError+0x200>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d035      	beq.n	800876e <I2C_DMAError+0xda>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a63      	ldr	r2, [pc, #396]	@ (8008898 <I2C_DMAError+0x204>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d02f      	beq.n	800876e <I2C_DMAError+0xda>
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a61      	ldr	r2, [pc, #388]	@ (800889c <I2C_DMAError+0x208>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d029      	beq.n	800876e <I2C_DMAError+0xda>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a5f      	ldr	r2, [pc, #380]	@ (80088a0 <I2C_DMAError+0x20c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d023      	beq.n	800876e <I2C_DMAError+0xda>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a5d      	ldr	r2, [pc, #372]	@ (80088a4 <I2C_DMAError+0x210>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d01d      	beq.n	800876e <I2C_DMAError+0xda>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a5b      	ldr	r2, [pc, #364]	@ (80088a8 <I2C_DMAError+0x214>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d017      	beq.n	800876e <I2C_DMAError+0xda>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a59      	ldr	r2, [pc, #356]	@ (80088ac <I2C_DMAError+0x218>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d011      	beq.n	800876e <I2C_DMAError+0xda>
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a57      	ldr	r2, [pc, #348]	@ (80088b0 <I2C_DMAError+0x21c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00b      	beq.n	800876e <I2C_DMAError+0xda>
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a55      	ldr	r2, [pc, #340]	@ (80088b4 <I2C_DMAError+0x220>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d005      	beq.n	800876e <I2C_DMAError+0xda>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a53      	ldr	r2, [pc, #332]	@ (80088b8 <I2C_DMAError+0x224>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d109      	bne.n	8008782 <I2C_DMAError+0xee>
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	e008      	b.n	8008794 <I2C_DMAError+0x100>
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	bf0c      	ite	eq
 800878e:	2301      	moveq	r3, #1
 8008790:	2300      	movne	r3, #0
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8008798:	2301      	movs	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 8098 	beq.w	80088d6 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a33      	ldr	r2, [pc, #204]	@ (800887c <I2C_DMAError+0x1e8>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d059      	beq.n	8008866 <I2C_DMAError+0x1d2>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a31      	ldr	r2, [pc, #196]	@ (8008880 <I2C_DMAError+0x1ec>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d053      	beq.n	8008866 <I2C_DMAError+0x1d2>
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008884 <I2C_DMAError+0x1f0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d04d      	beq.n	8008866 <I2C_DMAError+0x1d2>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008888 <I2C_DMAError+0x1f4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d047      	beq.n	8008866 <I2C_DMAError+0x1d2>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a2b      	ldr	r2, [pc, #172]	@ (800888c <I2C_DMAError+0x1f8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d041      	beq.n	8008866 <I2C_DMAError+0x1d2>
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a29      	ldr	r2, [pc, #164]	@ (8008890 <I2C_DMAError+0x1fc>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d03b      	beq.n	8008866 <I2C_DMAError+0x1d2>
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a27      	ldr	r2, [pc, #156]	@ (8008894 <I2C_DMAError+0x200>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d035      	beq.n	8008866 <I2C_DMAError+0x1d2>
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a25      	ldr	r2, [pc, #148]	@ (8008898 <I2C_DMAError+0x204>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d02f      	beq.n	8008866 <I2C_DMAError+0x1d2>
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a23      	ldr	r2, [pc, #140]	@ (800889c <I2C_DMAError+0x208>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d029      	beq.n	8008866 <I2C_DMAError+0x1d2>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a21      	ldr	r2, [pc, #132]	@ (80088a0 <I2C_DMAError+0x20c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d023      	beq.n	8008866 <I2C_DMAError+0x1d2>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1f      	ldr	r2, [pc, #124]	@ (80088a4 <I2C_DMAError+0x210>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d01d      	beq.n	8008866 <I2C_DMAError+0x1d2>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1d      	ldr	r2, [pc, #116]	@ (80088a8 <I2C_DMAError+0x214>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d017      	beq.n	8008866 <I2C_DMAError+0x1d2>
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a1b      	ldr	r2, [pc, #108]	@ (80088ac <I2C_DMAError+0x218>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d011      	beq.n	8008866 <I2C_DMAError+0x1d2>
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a19      	ldr	r2, [pc, #100]	@ (80088b0 <I2C_DMAError+0x21c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00b      	beq.n	8008866 <I2C_DMAError+0x1d2>
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a17      	ldr	r2, [pc, #92]	@ (80088b4 <I2C_DMAError+0x220>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d005      	beq.n	8008866 <I2C_DMAError+0x1d2>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a15      	ldr	r2, [pc, #84]	@ (80088b8 <I2C_DMAError+0x224>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d12a      	bne.n	80088bc <I2C_DMAError+0x228>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	bf0c      	ite	eq
 8008872:	2301      	moveq	r3, #1
 8008874:	2300      	movne	r3, #0
 8008876:	b2db      	uxtb	r3, r3
 8008878:	e029      	b.n	80088ce <I2C_DMAError+0x23a>
 800887a:	bf00      	nop
 800887c:	40020010 	.word	0x40020010
 8008880:	40020028 	.word	0x40020028
 8008884:	40020040 	.word	0x40020040
 8008888:	40020058 	.word	0x40020058
 800888c:	40020070 	.word	0x40020070
 8008890:	40020088 	.word	0x40020088
 8008894:	400200a0 	.word	0x400200a0
 8008898:	400200b8 	.word	0x400200b8
 800889c:	40020410 	.word	0x40020410
 80088a0:	40020428 	.word	0x40020428
 80088a4:	40020440 	.word	0x40020440
 80088a8:	40020458 	.word	0x40020458
 80088ac:	40020470 	.word	0x40020470
 80088b0:	40020488 	.word	0x40020488
 80088b4:	400204a0 	.word	0x400204a0
 80088b8:	400204b8 	.word	0x400204b8
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bf0c      	ite	eq
 80088c8:	2301      	moveq	r3, #1
 80088ca:	2300      	movne	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 80088d2:	2301      	movs	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fd f92e 	bl	8005b38 <HAL_DMA_GetError>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d00e      	beq.n	8008900 <I2C_DMAError+0x26c>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00b      	beq.n	8008900 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088f6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80088f8:	2110      	movs	r1, #16
 80088fa:	68b8      	ldr	r0, [r7, #8]
 80088fc:	f7ff fd44 	bl	8008388 <I2C_ITError>
  }
}
 8008900:	bf00      	nop
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008914:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	2200      	movs	r2, #0
 8008924:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008932:	2200      	movs	r2, #0
 8008934:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f7ff fe16 	bl	8008568 <I2C_TreatErrorCallback>
}
 800893c:	bf00      	nop
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008954:	e03b      	b.n	80089ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f8d6 	bl	8008b0c <I2C_IsErrorOccurred>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e041      	b.n	80089ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d02d      	beq.n	80089ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008972:	f7f9 fa09 	bl	8001d88 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d302      	bcc.n	8008988 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d122      	bne.n	80089ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699a      	ldr	r2, [r3, #24]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	4013      	ands	r3, r2
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	429a      	cmp	r2, r3
 8008996:	bf0c      	ite	eq
 8008998:	2301      	moveq	r3, #1
 800899a:	2300      	movne	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d113      	bne.n	80089ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089aa:	f043 0220 	orr.w	r2, r3, #32
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e00f      	b.n	80089ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	699a      	ldr	r2, [r3, #24]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4013      	ands	r3, r2
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	429a      	cmp	r2, r3
 80089dc:	bf0c      	ite	eq
 80089de:	2301      	moveq	r3, #1
 80089e0:	2300      	movne	r3, #0
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d0b4      	beq.n	8008956 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a02:	e033      	b.n	8008a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f87f 	bl	8008b0c <I2C_IsErrorOccurred>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e031      	b.n	8008a7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	d025      	beq.n	8008a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a20:	f7f9 f9b2 	bl	8001d88 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d302      	bcc.n	8008a36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d11a      	bne.n	8008a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d013      	beq.n	8008a6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a48:	f043 0220 	orr.w	r2, r3, #32
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2220      	movs	r2, #32
 8008a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e007      	b.n	8008a7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d1c4      	bne.n	8008a04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a90:	e02f      	b.n	8008af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 f838 	bl	8008b0c <I2C_IsErrorOccurred>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e02d      	b.n	8008b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aa6:	f7f9 f96f 	bl	8001d88 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d302      	bcc.n	8008abc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d11a      	bne.n	8008af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d013      	beq.n	8008af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ace:	f043 0220 	orr.w	r2, r3, #32
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e007      	b.n	8008b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d1c8      	bne.n	8008a92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08a      	sub	sp, #40	@ 0x28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d068      	beq.n	8008c0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2210      	movs	r2, #16
 8008b3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b40:	e049      	b.n	8008bd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b48:	d045      	beq.n	8008bd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008b4a:	f7f9 f91d 	bl	8001d88 <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d302      	bcc.n	8008b60 <I2C_IsErrorOccurred+0x54>
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d13a      	bne.n	8008bd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b82:	d121      	bne.n	8008bc8 <I2C_IsErrorOccurred+0xbc>
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b8a:	d01d      	beq.n	8008bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008b8c:	7cfb      	ldrb	r3, [r7, #19]
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d01a      	beq.n	8008bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ba0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008ba2:	f7f9 f8f1 	bl	8001d88 <HAL_GetTick>
 8008ba6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ba8:	e00e      	b.n	8008bc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008baa:	f7f9 f8ed 	bl	8001d88 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b19      	cmp	r3, #25
 8008bb6:	d907      	bls.n	8008bc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	f043 0320 	orr.w	r3, r3, #32
 8008bbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008bc6:	e006      	b.n	8008bd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d1e9      	bne.n	8008baa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d003      	beq.n	8008bec <I2C_IsErrorOccurred+0xe0>
 8008be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0aa      	beq.n	8008b42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	f043 0304 	orr.w	r3, r3, #4
 8008c02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	f043 0308 	orr.w	r3, r3, #8
 8008c44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008c4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	f043 0302 	orr.w	r3, r3, #2
 8008c66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01c      	beq.n	8008cba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7ff fc98 	bl	80085b6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6859      	ldr	r1, [r3, #4]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc8 <I2C_IsErrorOccurred+0x1bc>)
 8008c92:	400b      	ands	r3, r1
 8008c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3728      	adds	r7, #40	@ 0x28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	fe00e800 	.word	0xfe00e800

08008ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	607b      	str	r3, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	817b      	strh	r3, [r7, #10]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008cde:	897b      	ldrh	r3, [r7, #10]
 8008ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ce4:	7a7b      	ldrb	r3, [r7, #9]
 8008ce6:	041b      	lsls	r3, r3, #16
 8008ce8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008cec:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cfa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	0d5b      	lsrs	r3, r3, #21
 8008d06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008d0a:	4b08      	ldr	r3, [pc, #32]	@ (8008d2c <I2C_TransferConfig+0x60>)
 8008d0c:	430b      	orrs	r3, r1
 8008d0e:	43db      	mvns	r3, r3
 8008d10:	ea02 0103 	and.w	r1, r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	03ff63ff 	.word	0x03ff63ff

08008d30 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d44:	4a39      	ldr	r2, [pc, #228]	@ (8008e2c <I2C_Enable_IRQ+0xfc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d032      	beq.n	8008db0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008d4e:	4a38      	ldr	r2, [pc, #224]	@ (8008e30 <I2C_Enable_IRQ+0x100>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d02d      	beq.n	8008db0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008d58:	4a36      	ldr	r2, [pc, #216]	@ (8008e34 <I2C_Enable_IRQ+0x104>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d028      	beq.n	8008db0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da03      	bge.n	8008d6e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008d6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008d6e:	887b      	ldrh	r3, [r7, #2]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008d7e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008d80:	887b      	ldrh	r3, [r7, #2]
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d003      	beq.n	8008d92 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008d90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008d92:	887b      	ldrh	r3, [r7, #2]
 8008d94:	2b10      	cmp	r3, #16
 8008d96:	d103      	bne.n	8008da0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008d9e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008da0:	887b      	ldrh	r3, [r7, #2]
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	d133      	bne.n	8008e0e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f043 0320 	orr.w	r3, r3, #32
 8008dac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008dae:	e02e      	b.n	8008e0e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	da03      	bge.n	8008dc0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008dbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008dc0:	887b      	ldrh	r3, [r7, #2]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008dd0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008dd2:	887b      	ldrh	r3, [r7, #2]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008de2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008de4:	887b      	ldrh	r3, [r7, #2]
 8008de6:	2b10      	cmp	r3, #16
 8008de8:	d103      	bne.n	8008df2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008df0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008df2:	887b      	ldrh	r3, [r7, #2]
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	d103      	bne.n	8008e00 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008dfe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008e00:	887b      	ldrh	r3, [r7, #2]
 8008e02:	2b40      	cmp	r3, #64	@ 0x40
 8008e04:	d103      	bne.n	8008e0e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6819      	ldr	r1, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	601a      	str	r2, [r3, #0]
}
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	08007247 	.word	0x08007247
 8008e30:	0800768d 	.word	0x0800768d
 8008e34:	0800742d 	.word	0x0800742d

08008e38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e48:	887b      	ldrh	r3, [r7, #2]
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00f      	beq.n	8008e72 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008e58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e66:	2b28      	cmp	r3, #40	@ 0x28
 8008e68:	d003      	beq.n	8008e72 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008e70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008e72:	887b      	ldrh	r3, [r7, #2]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00f      	beq.n	8008e9c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008e82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e90:	2b28      	cmp	r3, #40	@ 0x28
 8008e92:	d003      	beq.n	8008e9c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008e9a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	da03      	bge.n	8008eac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008eaa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008eac:	887b      	ldrh	r3, [r7, #2]
 8008eae:	2b10      	cmp	r3, #16
 8008eb0:	d103      	bne.n	8008eba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008eb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008eba:	887b      	ldrh	r3, [r7, #2]
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d103      	bne.n	8008ec8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f043 0320 	orr.w	r3, r3, #32
 8008ec6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008ec8:	887b      	ldrh	r3, [r7, #2]
 8008eca:	2b40      	cmp	r3, #64	@ 0x40
 8008ecc:	d103      	bne.n	8008ed6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ed4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6819      	ldr	r1, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	43da      	mvns	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	400a      	ands	r2, r1
 8008ee6:	601a      	str	r2, [r3, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	d138      	bne.n	8008f7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f14:	2302      	movs	r3, #2
 8008f16:	e032      	b.n	8008f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2224      	movs	r2, #36	@ 0x24
 8008f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0201 	bic.w	r2, r2, #1
 8008f36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6819      	ldr	r1, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e000      	b.n	8008f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f7c:	2302      	movs	r3, #2
  }
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d139      	bne.n	8009014 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008faa:	2302      	movs	r3, #2
 8008fac:	e033      	b.n	8009016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2224      	movs	r2, #36	@ 0x24
 8008fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0201 	bic.w	r2, r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008fdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	e000      	b.n	8009016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009014:	2302      	movs	r3, #2
  }
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
	...

08009024 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e070      	b.n	8009118 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7f8 f9c2 	bl	80013d4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0201 	bic.w	r2, r2, #1
 8009076:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009086:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009096:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090a6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80090b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a19      	ldr	r2, [pc, #100]	@ (8009120 <HAL_JPEG_Init+0xfc>)
 80090bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a18      	ldr	r2, [pc, #96]	@ (8009124 <HAL_JPEG_Init+0x100>)
 80090c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc81 	bl	80099d8 <JPEG_Set_HuffEnc_Mem>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d004      	beq.n	80090e6 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e018      	b.n	8009118 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090f4:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	08016c1c 	.word	0x08016c1c
 8009124:	08016c5c 	.word	0x08016c5c

08009128 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <HAL_JPEG_GetInfo+0x16>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e083      	b.n	800924a <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f003 0303 	and.w	r3, r3, #3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d103      	bne.n	8009158 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2210      	movs	r2, #16
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	e017      	b.n	8009188 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	e00c      	b.n	8009188 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	2b03      	cmp	r3, #3
 800917a:	d103      	bne.n	8009184 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2230      	movs	r2, #48	@ 0x30
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	e001      	b.n	8009188 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e060      	b.n	800924a <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	0c1b      	lsrs	r3, r3, #16
 8009190:	b29a      	uxth	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	0c1b      	lsrs	r3, r3, #16
 800919e:	b29a      	uxth	r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d003      	beq.n	80091b4 <HAL_JPEG_GetInfo+0x8c>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b30      	cmp	r3, #48	@ 0x30
 80091b2:	d140      	bne.n	8009236 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	091b      	lsrs	r3, r3, #4
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	091b      	lsrs	r3, r3, #4
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	091b      	lsrs	r3, r3, #4
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d109      	bne.n	80091f8 <HAL_JPEG_GetInfo+0xd0>
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <HAL_JPEG_GetInfo+0xd0>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2202      	movs	r2, #2
 80091f4:	605a      	str	r2, [r3, #4]
 80091f6:	e01d      	b.n	8009234 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <HAL_JPEG_GetInfo+0xea>
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <HAL_JPEG_GetInfo+0xea>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d103      	bne.n	8009212 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2200      	movs	r2, #0
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	e010      	b.n	8009234 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d109      	bne.n	800922c <HAL_JPEG_GetInfo+0x104>
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d106      	bne.n	800922c <HAL_JPEG_GetInfo+0x104>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d103      	bne.n	800922c <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2201      	movs	r2, #1
 8009228:	605a      	str	r2, [r3, #4]
 800922a:	e003      	b.n	8009234 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2200      	movs	r2, #0
 8009230:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009232:	e003      	b.n	800923c <HAL_JPEG_GetInfo+0x114>
 8009234:	e002      	b.n	800923c <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2200      	movs	r2, #0
 800923a:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fa7b 	bl	800a738 <JPEG_GetQuality>
 8009242:	4602      	mov	r2, r0
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009264:	f003 030c 	and.w	r3, r3, #12
 8009268:	2b0c      	cmp	r3, #12
 800926a:	d116      	bne.n	800929a <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d005      	beq.n	8009282 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800927a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d033      	beq.n	80092f4 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009290:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	655a      	str	r2, [r3, #84]	@ 0x54
 8009298:	e02c      	b.n	80092f4 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800929e:	f003 030c 	and.w	r3, r3, #12
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	d126      	bne.n	80092f4 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f043 0306 	orr.w	r3, r3, #6
 80092c2:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d009      	beq.n	80092e2 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80092e0:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	43da      	mvns	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	400a      	ands	r2, r1
 80092f2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_JPEG_DecodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <HAL_JPEG_DataReadyCallback>:
  * @param  pDataOut pointer to the output data buffer
  * @param  OutDataLength number in bytes of data available in the specified output buffer
  * @retval None
  */
__weak void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
  UNUSED(OutDataLength);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_DataReadyCallback could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800937c:	b2db      	uxtb	r3, r3
 800937e:	3b03      	subs	r3, #3
 8009380:	2b01      	cmp	r3, #1
 8009382:	d813      	bhi.n	80093ac <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009388:	f003 030c 	and.w	r3, r3, #12
 800938c:	2b08      	cmp	r3, #8
 800938e:	d103      	bne.n	8009398 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fda3 	bl	8009edc <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8009396:	e00b      	b.n	80093b0 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800939c:	f003 030c 	and.w	r3, r3, #12
 80093a0:	2b0c      	cmp	r3, #12
 80093a2:	d105      	bne.n	80093b0 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 f848 	bl	800a43a <JPEG_DMA_ContinueProcess>
      break;
 80093aa:	e001      	b.n	80093b0 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 80093ac:	bf00      	nop
 80093ae:	e000      	b.n	80093b2 <HAL_JPEG_IRQHandler+0x44>
      break;
 80093b0:	bf00      	nop
  }
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b08b      	sub	sp, #44	@ 0x2c
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80093cc:	2300      	movs	r3, #0
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	e020      	b.n	8009414 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	4413      	add	r3, r2
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 80093dc:	6a3a      	ldr	r2, [r7, #32]
 80093de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e0:	4413      	add	r3, r2
 80093e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093e6:	d90f      	bls.n	8009408 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e055      	b.n	8009498 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	68b9      	ldr	r1, [r7, #8]
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	440b      	add	r3, r1
 80093f6:	3201      	adds	r2, #1
 80093f8:	b2d2      	uxtb	r2, r2
 80093fa:	701a      	strb	r2, [r3, #0]
      p++;
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	3301      	adds	r3, #1
 8009400:	623b      	str	r3, [r7, #32]
      i--;
 8009402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009404:	3b01      	subs	r3, #1
 8009406:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1ee      	bne.n	80093ec <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	3301      	adds	r3, #1
 8009412:	61fb      	str	r3, [r7, #28]
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	2b0f      	cmp	r3, #15
 8009418:	d9db      	bls.n	80093d2 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	4413      	add	r3, r2
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	6a3a      	ldr	r2, [r7, #32]
 8009428:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	617b      	str	r3, [r7, #20]
  p = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8009438:	e027      	b.n	800948a <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	601a      	str	r2, [r3, #0]
      p++;
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	3301      	adds	r3, #1
 800944a:	623b      	str	r3, [r7, #32]
      code++;
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	3301      	adds	r3, #1
 8009450:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	4413      	add	r3, r2
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	4293      	cmp	r3, r2
 8009460:	d0eb      	beq.n	800943a <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b1f      	cmp	r3, #31
 8009466:	d901      	bls.n	800946c <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e015      	b.n	8009498 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800946c:	2201      	movs	r2, #1
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	fa02 f303 	lsl.w	r3, r2, r3
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	429a      	cmp	r2, r3
 8009478:	d301      	bcc.n	800947e <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e00c      	b.n	8009498 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	61bb      	str	r3, [r7, #24]
    si++;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	3301      	adds	r3, #1
 8009488:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	4413      	add	r3, r2
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1dd      	bne.n	8009452 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	372c      	adds	r7, #44	@ 0x2c
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80094b0:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80094b4:	6018      	str	r0, [r3, #0]
 80094b6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80094ba:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80094be:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80094c0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80094c4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80094c8:	6818      	ldr	r0, [r3, #0]
 80094ca:	f107 0308 	add.w	r3, r7, #8
 80094ce:	f107 020c 	add.w	r2, r7, #12
 80094d2:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80094d6:	f7ff ff70 	bl	80093ba <JPEG_Bits_To_SizeCodes>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80094e0:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80094e8:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80094ec:	e075      	b.n	80095da <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80094f4:	e067      	b.n	80095c6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80094f6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80094fa:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8009504:	4413      	add	r3, r2
 8009506:	3310      	adds	r3, #16
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800950e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009512:	2b00      	cmp	r3, #0
 8009514:	d103      	bne.n	800951e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8009516:	23a0      	movs	r3, #160	@ 0xa0
 8009518:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800951c:	e021      	b.n	8009562 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800951e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009522:	2bf0      	cmp	r3, #240	@ 0xf0
 8009524:	d103      	bne.n	800952e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8009526:	23a1      	movs	r3, #161	@ 0xa1
 8009528:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800952c:	e019      	b.n	8009562 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800952e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009532:	091b      	lsrs	r3, r3, #4
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800953c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009540:	f003 030f 	and.w	r3, r3, #15
 8009544:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8009548:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	461a      	mov	r2, r3
 8009556:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800955a:	4413      	add	r3, r2
 800955c:	3b01      	subs	r3, #1
 800955e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8009562:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8009566:	2ba1      	cmp	r3, #161	@ 0xa1
 8009568:	d901      	bls.n	800956e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800956a:	2301      	movs	r3, #1
 800956c:	e035      	b.n	80095da <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800956e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009572:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009576:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800957a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800957e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009582:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8009586:	6819      	ldr	r1, [r3, #0]
 8009588:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800958c:	3328      	adds	r3, #40	@ 0x28
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009594:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8009598:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800959c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80095a0:	4413      	add	r3, r2
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	b2d9      	uxtb	r1, r3
 80095a8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80095ac:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80095b6:	4413      	add	r3, r2
 80095b8:	460a      	mov	r2, r1
 80095ba:	701a      	strb	r2, [r3, #0]
      k++;
 80095bc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80095c0:	3301      	adds	r3, #1
 80095c2:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 80095c6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80095ca:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d38e      	bcc.n	80094f6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80095f0:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80095f4:	6018      	str	r0, [r3, #0]
 80095f6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80095fa:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80095fe:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009600:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009604:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8009608:	6818      	ldr	r0, [r3, #0]
 800960a:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800960e:	f107 0208 	add.w	r2, r7, #8
 8009612:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8009616:	f7ff fed0 	bl	80093ba <JPEG_Bits_To_SizeCodes>
 800961a:	4603      	mov	r3, r0
 800961c:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8009620:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8009628:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800962c:	e048      	b.n	80096c0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8009634:	e03d      	b.n	80096b2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8009636:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800963a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8009644:	4413      	add	r3, r2
 8009646:	3310      	adds	r3, #16
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800964e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009652:	2b0b      	cmp	r3, #11
 8009654:	d901      	bls.n	800965a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8009656:	2301      	movs	r3, #1
 8009658:	e032      	b.n	80096c0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800965a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800965e:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8009662:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8009666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800966a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800966e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8009678:	3302      	adds	r3, #2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	440b      	add	r3, r1
 800967e:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009680:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009684:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8009688:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800968c:	4413      	add	r3, r2
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	3b01      	subs	r3, #1
 8009692:	b2d9      	uxtb	r1, r3
 8009694:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8009698:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80096a2:	4413      	add	r3, r2
 80096a4:	460a      	mov	r2, r1
 80096a6:	701a      	strb	r2, [r3, #0]
      k++;
 80096a8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80096ac:	3301      	adds	r3, #1
 80096ae:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 80096b2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80096b6:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d3bb      	bcc.n	8009636 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b09a      	sub	sp, #104	@ 0x68
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d106      	bne.n	80096f2 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80096ec:	3318      	adds	r3, #24
 80096ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80096f0:	e00f      	b.n	8009712 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d106      	bne.n	800970e <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8009708:	3318      	adds	r3, #24
 800970a:	663b      	str	r3, [r7, #96]	@ 0x60
 800970c:	e001      	b.n	8009712 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e059      	b.n	80097c6 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d055      	beq.n	80097c4 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8009718:	f107 0314 	add.w	r3, r7, #20
 800971c:	4619      	mov	r1, r3
 800971e:	68b8      	ldr	r0, [r7, #8]
 8009720:	f7ff ff60 	bl	80095e4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8009724:	4603      	mov	r3, r0
 8009726:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800972a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8009732:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009736:	e046      	b.n	80097c6 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8009738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800973a:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800973c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800973e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009742:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009744:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009746:	3304      	adds	r3, #4
 8009748:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800974a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800974c:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8009750:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8009752:	230c      	movs	r3, #12
 8009754:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8009756:	e032      	b.n	80097be <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8009758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800975a:	3b01      	subs	r3, #1
 800975c:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800975e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009760:	3b04      	subs	r3, #4
 8009762:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8009764:	f107 0214 	add.w	r2, r7, #20
 8009768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800976a:	4413      	add	r3, r2
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009776:	3302      	adds	r3, #2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	3368      	adds	r3, #104	@ 0x68
 800977c:	443b      	add	r3, r7
 800977e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	4313      	orrs	r3, r2
 8009786:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8009788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800978a:	3b01      	subs	r3, #1
 800978c:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800978e:	f107 0214 	add.w	r2, r7, #20
 8009792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009794:	4413      	add	r3, r2
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800979e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097a0:	3302      	adds	r3, #2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	3368      	adds	r3, #104	@ 0x68
 80097a6:	443b      	add	r3, r7
 80097a8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	4313      	orrs	r3, r2
 80097b0:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80097b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097b4:	041a      	lsls	r2, r3, #16
 80097b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097b8:	431a      	orrs	r2, r3
 80097ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097bc:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80097be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d8c9      	bhi.n	8009758 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3768      	adds	r7, #104	@ 0x68
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80097dc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80097e0:	6018      	str	r0, [r3, #0]
 80097e2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80097e6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80097ea:	6019      	str	r1, [r3, #0]
 80097ec:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80097f0:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80097f4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80097f6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80097fa:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009806:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800980a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d10c      	bne.n	800982e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009814:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009818:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009824:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009828:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800982c:	e01d      	b.n	800986a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800982e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009832:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800983e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8009842:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8009846:	6812      	ldr	r2, [r2, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d10c      	bne.n	8009866 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800984c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009850:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800985c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8009860:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8009864:	e001      	b.n	800986a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e0a8      	b.n	80099bc <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800986a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800986e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80a0 	beq.w	80099ba <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800987a:	f107 0214 	add.w	r2, r7, #20
 800987e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009882:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8009886:	4611      	mov	r1, r2
 8009888:	6818      	ldr	r0, [r3, #0]
 800988a:	f7ff fe0b 	bl	80094a4 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800988e:	4603      	mov	r3, r0
 8009890:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8009894:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800989c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80098a0:	e08c      	b.n	80099bc <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80098a2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80098a6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80098aa:	2300      	movs	r3, #0
 80098ac:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80098b0:	e00e      	b.n	80098d0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80098b2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80098b6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80098ba:	601a      	str	r2, [r3, #0]
      addressDef++;
 80098bc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80098c0:	3304      	adds	r3, #4
 80098c2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80098c6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80098ca:	3301      	adds	r3, #1
 80098cc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80098d0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d9ec      	bls.n	80098b2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80098d8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80098dc:	4a3a      	ldr	r2, [pc, #232]	@ (80099c8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80098de:	601a      	str	r2, [r3, #0]
    addressDef++;
 80098e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80098e4:	3304      	adds	r3, #4
 80098e6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 80098ea:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80098ee:	4a37      	ldr	r2, [pc, #220]	@ (80099cc <JPEG_Set_HuffAC_Mem+0x1fc>)
 80098f0:	601a      	str	r2, [r3, #0]
    addressDef++;
 80098f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80098f6:	3304      	adds	r3, #4
 80098f8:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 80098fc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009900:	4a33      	ldr	r2, [pc, #204]	@ (80099d0 <JPEG_Set_HuffAC_Mem+0x200>)
 8009902:	601a      	str	r2, [r3, #0]
    addressDef++;
 8009904:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009908:	3304      	adds	r3, #4
 800990a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800990e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8009912:	4a30      	ldr	r2, [pc, #192]	@ (80099d4 <JPEG_Set_HuffAC_Mem+0x204>)
 8009914:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8009916:	23a2      	movs	r3, #162	@ 0xa2
 8009918:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800991c:	e049      	b.n	80099b2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800991e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009922:	3b01      	subs	r3, #1
 8009924:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8009928:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800992c:	3b04      	subs	r3, #4
 800992e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009932:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009936:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800993a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800993e:	4413      	add	r3, r2
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	021b      	lsls	r3, r3, #8
 8009944:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009948:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800994c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8009950:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009954:	3328      	adds	r3, #40	@ 0x28
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	4313      	orrs	r3, r2
 8009960:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8009964:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009968:	3b01      	subs	r3, #1
 800996a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800996e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009972:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8009976:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800997a:	4413      	add	r3, r2
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	021b      	lsls	r3, r3, #8
 8009980:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8009984:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8009988:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800998c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8009990:	3328      	adds	r3, #40	@ 0x28
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	b2db      	uxtb	r3, r3
 800999a:	4313      	orrs	r3, r2
 800999c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80099a0:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80099a4:	041a      	lsls	r2, r3, #16
 80099a6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80099aa:	431a      	orrs	r2, r3
 80099ac:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80099b0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80099b2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d8b1      	bhi.n	800991e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	0fd10fd0 	.word	0x0fd10fd0
 80099cc:	0fd30fd2 	.word	0x0fd30fd2
 80099d0:	0fd50fd4 	.word	0x0fd50fd4
 80099d4:	0fd70fd6 	.word	0x0fd70fd6

080099d8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f84d 	bl	8009a80 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80099ee:	461a      	mov	r2, r3
 80099f0:	491f      	ldr	r1, [pc, #124]	@ (8009a70 <JPEG_Set_HuffEnc_Mem+0x98>)
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7ff feec 	bl	80097d0 <JPEG_Set_HuffAC_Mem>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	e030      	b.n	8009a68 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4918      	ldr	r1, [pc, #96]	@ (8009a74 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff fedc 	bl	80097d0 <JPEG_Set_HuffAC_Mem>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	e020      	b.n	8009a68 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009a2e:	461a      	mov	r2, r3
 8009a30:	4911      	ldr	r1, [pc, #68]	@ (8009a78 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fe49 	bl	80096ca <JPEG_Set_HuffDC_Mem>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	e010      	b.n	8009a68 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009a4e:	461a      	mov	r2, r3
 8009a50:	490a      	ldr	r1, [pc, #40]	@ (8009a7c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff fe39 	bl	80096ca <JPEG_Set_HuffDC_Mem>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	e000      	b.n	8009a68 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	08016a74 	.word	0x08016a74
 8009a74:	08016b28 	.word	0x08016b28
 8009a78:	08016a3c 	.word	0x08016a3c
 8009a7c:	08016a58 	.word	0x08016a58

08009a80 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b08b      	sub	sp, #44	@ 0x2c
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8009a88:	4b80      	ldr	r3, [pc, #512]	@ (8009c8c <JPEG_Set_Huff_DHTMem+0x20c>)
 8009a8a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8009a8c:	4b80      	ldr	r3, [pc, #512]	@ (8009c90 <JPEG_Set_Huff_DHTMem+0x210>)
 8009a8e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8009a90:	4b80      	ldr	r3, [pc, #512]	@ (8009c94 <JPEG_Set_Huff_DHTMem+0x214>)
 8009a92:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8009a94:	4b80      	ldr	r3, [pc, #512]	@ (8009c98 <JPEG_Set_Huff_DHTMem+0x218>)
 8009a96:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009aa0:	330c      	adds	r3, #12
 8009aa2:	623b      	str	r3, [r7, #32]
  index = 16;
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009aa8:	e01d      	b.n	8009ae6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	3b01      	subs	r3, #1
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	5cd3      	ldrb	r3, [r2, r3]
 8009ab2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab6:	3b02      	subs	r3, #2
 8009ab8:	6979      	ldr	r1, [r7, #20]
 8009aba:	5ccb      	ldrb	r3, [r1, r3]
 8009abc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009abe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac2:	3b03      	subs	r3, #3
 8009ac4:	6979      	ldr	r1, [r7, #20]
 8009ac6:	5ccb      	ldrb	r3, [r1, r3]
 8009ac8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009aca:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8009acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ace:	3a04      	subs	r2, #4
 8009ad0:	6979      	ldr	r1, [r7, #20]
 8009ad2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009ad4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	601a      	str	r2, [r3, #0]
    address--;
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	3b04      	subs	r3, #4
 8009ade:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae2:	3b04      	subs	r3, #4
 8009ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d8de      	bhi.n	8009aaa <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009af4:	3318      	adds	r3, #24
 8009af6:	623b      	str	r3, [r7, #32]
  index = 12;
 8009af8:	230c      	movs	r3, #12
 8009afa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009afc:	e021      	b.n	8009b42 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	3b01      	subs	r3, #1
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4413      	add	r3, r2
 8009b06:	7c1b      	ldrb	r3, [r3, #16]
 8009b08:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0c:	3b02      	subs	r3, #2
 8009b0e:	6979      	ldr	r1, [r7, #20]
 8009b10:	440b      	add	r3, r1
 8009b12:	7c1b      	ldrb	r3, [r3, #16]
 8009b14:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009b16:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1a:	3b03      	subs	r3, #3
 8009b1c:	6979      	ldr	r1, [r7, #20]
 8009b1e:	440b      	add	r3, r1
 8009b20:	7c1b      	ldrb	r3, [r3, #16]
 8009b22:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009b24:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8009b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b28:	3a04      	subs	r2, #4
 8009b2a:	6979      	ldr	r1, [r7, #20]
 8009b2c:	440a      	add	r2, r1
 8009b2e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009b30:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	601a      	str	r2, [r3, #0]
    address--;
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	3b04      	subs	r3, #4
 8009b3a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	3b04      	subs	r3, #4
 8009b40:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d8da      	bhi.n	8009afe <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009b50:	3328      	adds	r3, #40	@ 0x28
 8009b52:	623b      	str	r3, [r7, #32]
  index = 16;
 8009b54:	2310      	movs	r3, #16
 8009b56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009b58:	e01d      	b.n	8009b96 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	69fa      	ldr	r2, [r7, #28]
 8009b60:	5cd3      	ldrb	r3, [r2, r3]
 8009b62:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b66:	3b02      	subs	r3, #2
 8009b68:	69f9      	ldr	r1, [r7, #28]
 8009b6a:	5ccb      	ldrb	r3, [r1, r3]
 8009b6c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009b6e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	3b03      	subs	r3, #3
 8009b74:	69f9      	ldr	r1, [r7, #28]
 8009b76:	5ccb      	ldrb	r3, [r1, r3]
 8009b78:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009b7a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8009b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b7e:	3a04      	subs	r2, #4
 8009b80:	69f9      	ldr	r1, [r7, #28]
 8009b82:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8009b84:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	601a      	str	r2, [r3, #0]
    address--;
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	3b04      	subs	r3, #4
 8009b8e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b92:	3b04      	subs	r3, #4
 8009b94:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d8de      	bhi.n	8009b5a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009ba4:	33cc      	adds	r3, #204	@ 0xcc
 8009ba6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	4b3b      	ldr	r3, [pc, #236]	@ (8009c9c <JPEG_Set_Huff_DHTMem+0x21c>)
 8009bae:	4013      	ands	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8009bb8:	021a      	lsls	r2, r3, #8
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	3b04      	subs	r3, #4
 8009bd2:	623b      	str	r3, [r7, #32]
  index = 160;
 8009bd4:	23a0      	movs	r3, #160	@ 0xa0
 8009bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009bd8:	e021      	b.n	8009c1e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	69fa      	ldr	r2, [r7, #28]
 8009be0:	4413      	add	r3, r2
 8009be2:	7c1b      	ldrb	r3, [r3, #16]
 8009be4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	3b02      	subs	r3, #2
 8009bea:	69f9      	ldr	r1, [r7, #28]
 8009bec:	440b      	add	r3, r1
 8009bee:	7c1b      	ldrb	r3, [r3, #16]
 8009bf0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009bf2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	3b03      	subs	r3, #3
 8009bf8:	69f9      	ldr	r1, [r7, #28]
 8009bfa:	440b      	add	r3, r1
 8009bfc:	7c1b      	ldrb	r3, [r3, #16]
 8009bfe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009c00:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8009c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c04:	3a04      	subs	r2, #4
 8009c06:	69f9      	ldr	r1, [r7, #28]
 8009c08:	440a      	add	r2, r1
 8009c0a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009c0c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	601a      	str	r2, [r3, #0]
    address--;
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	3b04      	subs	r3, #4
 8009c16:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1a:	3b04      	subs	r3, #4
 8009c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d8da      	bhi.n	8009bda <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009c2c:	33cc      	adds	r3, #204	@ 0xcc
 8009c2e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	061a      	lsls	r2, r3, #24
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	431a      	orrs	r2, r3
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	041b      	lsls	r3, r3, #16
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009c5a:	33dc      	adds	r3, #220	@ 0xdc
 8009c5c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4b0e      	ldr	r3, [pc, #56]	@ (8009c9c <JPEG_Set_Huff_DHTMem+0x21c>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	7bdb      	ldrb	r3, [r3, #15]
 8009c6c:	021a      	lsls	r2, r3, #8
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	7b92      	ldrb	r2, [r2, #14]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	3b04      	subs	r3, #4
 8009c84:	623b      	str	r3, [r7, #32]
  index = 12;
 8009c86:	230c      	movs	r3, #12
 8009c88:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009c8a:	e027      	b.n	8009cdc <JPEG_Set_Huff_DHTMem+0x25c>
 8009c8c:	08016a74 	.word	0x08016a74
 8009c90:	08016b28 	.word	0x08016b28
 8009c94:	08016a3c 	.word	0x08016a3c
 8009c98:	08016a58 	.word	0x08016a58
 8009c9c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	5cd3      	ldrb	r3, [r2, r3]
 8009ca8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8009caa:	6939      	ldr	r1, [r7, #16]
 8009cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cae:	440b      	add	r3, r1
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009cb4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	6939      	ldr	r1, [r7, #16]
 8009cbc:	5ccb      	ldrb	r3, [r1, r3]
 8009cbe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8009cc0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8009cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc4:	3a02      	subs	r2, #2
 8009cc6:	6939      	ldr	r1, [r7, #16]
 8009cc8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009cca:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	601a      	str	r2, [r3, #0]
    address--;
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	3b04      	subs	r3, #4
 8009cd4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d8de      	bhi.n	8009ca0 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009cea:	33dc      	adds	r3, #220	@ 0xdc
 8009cec:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	7c5b      	ldrb	r3, [r3, #17]
 8009cfa:	061a      	lsls	r2, r3, #24
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	7c1b      	ldrb	r3, [r3, #16]
 8009d04:	041b      	lsls	r3, r3, #16
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009d18:	33e8      	adds	r3, #232	@ 0xe8
 8009d1a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	4b6d      	ldr	r3, [pc, #436]	@ (8009ed8 <JPEG_Set_Huff_DHTMem+0x458>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	7edb      	ldrb	r3, [r3, #27]
 8009d2a:	021a      	lsls	r2, r3, #8
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	7e92      	ldrb	r2, [r2, #26]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	3b04      	subs	r3, #4
 8009d42:	623b      	str	r3, [r7, #32]
  index = 8;
 8009d44:	2308      	movs	r3, #8
 8009d46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009d48:	e021      	b.n	8009d8e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4413      	add	r3, r2
 8009d52:	7c1b      	ldrb	r3, [r3, #16]
 8009d54:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8009d56:	6939      	ldr	r1, [r7, #16]
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5a:	440b      	add	r3, r1
 8009d5c:	3310      	adds	r3, #16
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009d62:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	3b01      	subs	r3, #1
 8009d68:	6939      	ldr	r1, [r7, #16]
 8009d6a:	440b      	add	r3, r1
 8009d6c:	7c1b      	ldrb	r3, [r3, #16]
 8009d6e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8009d70:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8009d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d74:	3a02      	subs	r2, #2
 8009d76:	6939      	ldr	r1, [r7, #16]
 8009d78:	440a      	add	r2, r1
 8009d7a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009d7c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	601a      	str	r2, [r3, #0]
    address--;
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	3b04      	subs	r3, #4
 8009d86:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	3b04      	subs	r3, #4
 8009d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d8da      	bhi.n	8009d4a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009d9c:	33e8      	adds	r3, #232	@ 0xe8
 8009d9e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	061a      	lsls	r2, r3, #24
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	431a      	orrs	r2, r3
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	041b      	lsls	r3, r3, #16
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009dca:	33f8      	adds	r3, #248	@ 0xf8
 8009dcc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b41      	ldr	r3, [pc, #260]	@ (8009ed8 <JPEG_Set_Huff_DHTMem+0x458>)
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	7bdb      	ldrb	r3, [r3, #15]
 8009ddc:	021a      	lsls	r2, r3, #8
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	7b92      	ldrb	r2, [r2, #14]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]
  *address = value;
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	3b04      	subs	r3, #4
 8009df4:	623b      	str	r3, [r7, #32]
  index = 12;
 8009df6:	230c      	movs	r3, #12
 8009df8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009dfa:	e01d      	b.n	8009e38 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfe:	3301      	adds	r3, #1
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	5cd3      	ldrb	r3, [r2, r3]
 8009e04:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009e06:	69b9      	ldr	r1, [r7, #24]
 8009e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0a:	440b      	add	r3, r1
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009e10:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e14:	3b01      	subs	r3, #1
 8009e16:	69b9      	ldr	r1, [r7, #24]
 8009e18:	5ccb      	ldrb	r3, [r1, r3]
 8009e1a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8009e1c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8009e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e20:	3a02      	subs	r2, #2
 8009e22:	69b9      	ldr	r1, [r7, #24]
 8009e24:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8009e26:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	601a      	str	r2, [r3, #0]
    address--;
 8009e2c:	6a3b      	ldr	r3, [r7, #32]
 8009e2e:	3b04      	subs	r3, #4
 8009e30:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e34:	3b04      	subs	r3, #4
 8009e36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d8de      	bhi.n	8009dfc <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009e46:	33f8      	adds	r3, #248	@ 0xf8
 8009e48:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	7c5b      	ldrb	r3, [r3, #17]
 8009e56:	061a      	lsls	r2, r3, #24
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	7c1b      	ldrb	r3, [r3, #16]
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	4313      	orrs	r3, r2
 8009e64:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8009e74:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8009e78:	623b      	str	r3, [r7, #32]
  index = 160;
 8009e7a:	23a0      	movs	r3, #160	@ 0xa0
 8009e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009e7e:	e021      	b.n	8009ec4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	3301      	adds	r3, #1
 8009e84:	69ba      	ldr	r2, [r7, #24]
 8009e86:	4413      	add	r3, r2
 8009e88:	7c1b      	ldrb	r3, [r3, #16]
 8009e8a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009e8c:	69b9      	ldr	r1, [r7, #24]
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e90:	440b      	add	r3, r1
 8009e92:	3310      	adds	r3, #16
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009e98:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	69b9      	ldr	r1, [r7, #24]
 8009ea0:	440b      	add	r3, r1
 8009ea2:	7c1b      	ldrb	r3, [r3, #16]
 8009ea4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8009ea6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eaa:	3a02      	subs	r2, #2
 8009eac:	69b9      	ldr	r1, [r7, #24]
 8009eae:	440a      	add	r2, r1
 8009eb0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009eb2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	601a      	str	r2, [r3, #0]
    address--;
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	3b04      	subs	r3, #4
 8009ebc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d8da      	bhi.n	8009e80 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	372c      	adds	r7, #44	@ 0x2c
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	ffff0000 	.word	0xffff0000

08009edc <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ee8:	f003 0303 	and.w	r3, r3, #3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d125      	bne.n	8009f3c <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01e      	beq.n	8009f3c <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	3304      	adds	r3, #4
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7ff f90f 	bl	8009128 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff f9f3 	bl	8009302 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f2a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f3a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d116      	bne.n	8009f76 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d004      	beq.n	8009f60 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009f56:	2108      	movs	r1, #8
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f988 	bl	800a26e <JPEG_ReadInputData>
 8009f5e:	e00a      	b.n	8009f76 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f66:	f003 0304 	and.w	r3, r3, #4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8009f6e:	2101      	movs	r1, #1
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f97c 	bl	800a26e <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d116      	bne.n	8009fb0 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f88:	f003 0308 	and.w	r3, r3, #8
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d004      	beq.n	8009f9a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009f90:	2108      	movs	r1, #8
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f864 	bl	800a060 <JPEG_StoreOutputData>
 8009f98:	e00a      	b.n	8009fb0 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8009fa8:	2101      	movs	r1, #1
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f858 	bl	800a060 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fba:	2b20      	cmp	r3, #32
 8009fbc:	d14b      	bne.n	800a056 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0201 	bic.w	r2, r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd2:	f003 030c 	and.w	r3, r3, #12
 8009fd6:	2b08      	cmp	r3, #8
 8009fd8:	d107      	bne.n	8009fea <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009fe8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009ff8:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	69d9      	ldr	r1, [r3, #28]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a00a:	461a      	mov	r2, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff f9a2 	bl	8009356 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a022:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f003 0303 	and.w	r3, r3, #3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d103      	bne.n	800a04c <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff f971 	bl	800932c <HAL_JPEG_DecodeCpltCallback>
 800a04a:	e002      	b.n	800a052 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff f963 	bl	8009318 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	429a      	cmp	r2, r3
 800a07a:	d34b      	bcc.n	800a114 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	e031      	b.n	800a0e6 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a088:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69da      	ldr	r2, [r3, #28]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a092:	4413      	add	r3, r2
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	0a19      	lsrs	r1, r3, #8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	69da      	ldr	r2, [r3, #28]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	b2ca      	uxtb	r2, r1
 800a0ac:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	0c19      	lsrs	r1, r3, #16
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	69da      	ldr	r2, [r3, #28]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ba:	3302      	adds	r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	b2ca      	uxtb	r2, r1
 800a0c0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	0e19      	lsrs	r1, r3, #24
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69da      	ldr	r2, [r3, #28]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ce:	3303      	adds	r3, #3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	b2ca      	uxtb	r2, r1
 800a0d4:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0da:	1d1a      	adds	r2, r3, #4
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d3c9      	bcc.n	800a082 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	f040 80b5 	bne.w	800a266 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	69d9      	ldr	r1, [r3, #28]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a104:	461a      	mov	r2, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff f925 	bl	8009356 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800a112:	e0a8      	b.n	800a266 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11c:	429a      	cmp	r2, r3
 800a11e:	f240 80a2 	bls.w	800a266 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	089b      	lsrs	r3, r3, #2
 800a12e:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800a130:	2300      	movs	r3, #0
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	e031      	b.n	800a19a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a13c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	69da      	ldr	r2, [r3, #28]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a146:	4413      	add	r3, r2
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	b2d2      	uxtb	r2, r2
 800a14c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	0a19      	lsrs	r1, r3, #8
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	69da      	ldr	r2, [r3, #28]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15a:	3301      	adds	r3, #1
 800a15c:	4413      	add	r3, r2
 800a15e:	b2ca      	uxtb	r2, r1
 800a160:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	0c19      	lsrs	r1, r3, #16
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	69da      	ldr	r2, [r3, #28]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a16e:	3302      	adds	r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	b2ca      	uxtb	r2, r1
 800a174:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	0e19      	lsrs	r1, r3, #24
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69da      	ldr	r2, [r3, #28]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a182:	3303      	adds	r3, #3
 800a184:	4413      	add	r3, r2
 800a186:	b2ca      	uxtb	r2, r1
 800a188:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18e:	1d1a      	adds	r2, r3, #4
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	3301      	adds	r3, #1
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d3c9      	bcc.n	800a136 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d10b      	bne.n	800a1c6 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	69d9      	ldr	r1, [r3, #28]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff f8cc 	bl	8009356 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a1c4:	e04f      	b.n	800a266 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1d8:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800a1da:	2300      	movs	r3, #0
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e015      	b.n	800a20c <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f003 0303 	and.w	r3, r3, #3
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	fa22 f103 	lsr.w	r1, r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	69da      	ldr	r2, [r3, #28]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f6:	4413      	add	r3, r2
 800a1f8:	b2ca      	uxtb	r2, r1
 800a1fa:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	3301      	adds	r3, #1
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	429a      	cmp	r2, r3
 800a212:	d3e5      	bcc.n	800a1e0 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	69d9      	ldr	r1, [r3, #28]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21c:	461a      	mov	r2, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff f899 	bl	8009356 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f1c3 0304 	rsb	r3, r3, #4
 800a230:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	e013      	b.n	800a260 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	00db      	lsls	r3, r3, #3
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	fa22 f103 	lsr.w	r1, r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	69da      	ldr	r2, [r3, #28]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24a:	4413      	add	r3, r2
 800a24c:	b2ca      	uxtb	r2, r1
 800a24e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	3301      	adds	r3, #1
 800a25e:	617b      	str	r3, [r7, #20]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2b03      	cmp	r3, #3
 800a264:	d9e8      	bls.n	800a238 <JPEG_StoreOutputData+0x1d8>
}
 800a266:	bf00      	nop
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b088      	sub	sp, #32
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <JPEG_ReadInputData+0x1c>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d104      	bne.n	800a294 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800a28a:	2101      	movs	r1, #1
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7fe ffe0 	bl	8009252 <HAL_JPEG_Pause>
 800a292:	e028      	b.n	800a2e6 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d906      	bls.n	800a2ae <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	e01b      	b.n	800a2e6 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d115      	bne.n	800a2e6 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7ff f83d 	bl	8009340 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	d905      	bls.n	800a2da <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d2:	f023 0203 	bic.w	r2, r3, #3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e4:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f040 809f 	bne.w	800a432 <JPEG_ReadInputData+0x1c4>
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 809b 	beq.w	800a432 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	089b      	lsrs	r3, r3, #2
 800a300:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	429a      	cmp	r2, r3
 800a308:	d335      	bcc.n	800a376 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	e02d      	b.n	800a36c <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	699a      	ldr	r2, [r3, #24]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	699a      	ldr	r2, [r3, #24]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3301      	adds	r3, #1
 800a32a:	4413      	add	r3, r2
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a330:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6999      	ldr	r1, [r3, #24]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3302      	adds	r3, #2
 800a33c:	440b      	add	r3, r1
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a342:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	699a      	ldr	r2, [r3, #24]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3303      	adds	r3, #3
 800a34e:	4413      	add	r3, r2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a358:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a35a:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a1b      	ldr	r3, [r3, #32]
 800a360:	1d1a      	adds	r2, r3, #4
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	3301      	adds	r3, #1
 800a36a:	61bb      	str	r3, [r7, #24]
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d3cd      	bcc.n	800a310 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800a374:	e05d      	b.n	800a432 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d035      	beq.n	800a3e8 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800a37c:	2300      	movs	r3, #0
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	e02d      	b.n	800a3de <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	699a      	ldr	r2, [r3, #24]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	699a      	ldr	r2, [r3, #24]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3301      	adds	r3, #1
 800a39c:	4413      	add	r3, r2
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a3a2:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6999      	ldr	r1, [r3, #24]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3302      	adds	r3, #2
 800a3ae:	440b      	add	r3, r1
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800a3b4:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3303      	adds	r3, #3
 800a3c0:	4413      	add	r3, r2
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800a3ca:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800a3cc:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	1d1a      	adds	r2, r3, #4
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d3cd      	bcc.n	800a382 <JPEG_ReadInputData+0x114>
}
 800a3e6:	e024      	b.n	800a432 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	61bb      	str	r3, [r7, #24]
 800a3f0:	e017      	b.n	800a422 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	461a      	mov	r2, r3
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	fa02 f303 	lsl.w	r3, r2, r3
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	4313      	orrs	r3, r2
 800a410:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	3301      	adds	r3, #1
 800a420:	61bb      	str	r3, [r7, #24]
 800a422:	69ba      	ldr	r2, [r7, #24]
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	429a      	cmp	r2, r3
 800a428:	d3e3      	bcc.n	800a3f2 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a432:	bf00      	nop
 800a434:	3720      	adds	r7, #32
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a446:	f003 0303 	and.w	r3, r3, #3
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d125      	bne.n	800a49a <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01e      	beq.n	800a49a <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3304      	adds	r3, #4
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7fe fe60 	bl	8009128 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7fe ff44 	bl	8009302 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a488:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a498:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d039      	beq.n	800a51c <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ac:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0201 	bic.w	r2, r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a4d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a4e2:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d104      	bne.n	800a4fc <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fa1a 	bl	800a930 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b02      	cmp	r3, #2
 800a508:	d105      	bne.n	800a516 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fa0e 	bl	800a930 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800a514:	e002      	b.n	800a51c <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f804 	bl	800a524 <JPEG_DMA_EndProcess>
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800a53c:	1ad2      	subs	r2, r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d10a      	bne.n	800a564 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	69d9      	ldr	r1, [r3, #28]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a556:	461a      	mov	r2, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7fe fefc 	bl	8009356 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a56a:	f003 0310 	and.w	r3, r3, #16
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d134      	bne.n	800a5dc <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	69d9      	ldr	r1, [r3, #28]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a582:	461a      	mov	r2, r3
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7fe fee6 	bl	8009356 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f022 0201 	bic.w	r2, r2, #1
 800a59e:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5aa:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f003 0303 	and.w	r3, r3, #3
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d103      	bne.n	800a5d4 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fe fead 	bl	800932c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800a5d2:	e00c      	b.n	800a5ee <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7fe fe9f 	bl	8009318 <HAL_JPEG_EncodeCpltCallback>
}
 800a5da:	e008      	b.n	800a5ee <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d102      	bne.n	800a5ee <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f804 	bl	800a5f6 <JPEG_DMA_PollResidualData>
}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b086      	sub	sp, #24
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a5fe:	2310      	movs	r3, #16
 800a600:	617b      	str	r3, [r7, #20]
 800a602:	e04f      	b.n	800a6a4 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d146      	bne.n	800a69e <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a616:	f003 0310 	and.w	r3, r3, #16
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d03f      	beq.n	800a69e <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a624:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	69da      	ldr	r2, [r3, #28]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a62e:	4413      	add	r3, r2
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	b2d2      	uxtb	r2, r2
 800a634:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	0a19      	lsrs	r1, r3, #8
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	69da      	ldr	r2, [r3, #28]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a642:	3301      	adds	r3, #1
 800a644:	4413      	add	r3, r2
 800a646:	b2ca      	uxtb	r2, r1
 800a648:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	0c19      	lsrs	r1, r3, #16
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	69da      	ldr	r2, [r3, #28]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a656:	3302      	adds	r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	b2ca      	uxtb	r2, r1
 800a65c:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	0e19      	lsrs	r1, r3, #24
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	69da      	ldr	r2, [r3, #28]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a66a:	3303      	adds	r3, #3
 800a66c:	4413      	add	r3, r2
 800a66e:	b2ca      	uxtb	r2, r1
 800a670:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a676:	1d1a      	adds	r2, r3, #4
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a684:	429a      	cmp	r2, r3
 800a686:	d10a      	bne.n	800a69e <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	69d9      	ldr	r1, [r3, #28]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a690:	461a      	mov	r2, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7fe fe5f 	bl	8009356 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1ac      	bne.n	800a604 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ae:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6b6:	f003 0310 	and.w	r3, r3, #16
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d004      	beq.n	800a6c8 <JPEG_DMA_PollResidualData+0xd2>
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d133      	bne.n	800a730 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 0201 	bic.w	r2, r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00a      	beq.n	800a6f6 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	69d9      	ldr	r1, [r3, #28]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7fe fe33 	bl	8009356 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6fa:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a700:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d103      	bne.n	800a72a <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7fe fe02 	bl	800932c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800a728:	e002      	b.n	800a730 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7fe fdf4 	bl	8009318 <HAL_JPEG_EncodeCpltCallback>
}
 800a730:	bf00      	nop
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800a738:	b480      	push	{r7}
 800a73a:	b08b      	sub	sp, #44	@ 0x2c
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3350      	adds	r3, #80	@ 0x50
 800a74a:	61bb      	str	r3, [r7, #24]

  i = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a750:	e042      	b.n	800a7d8 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800a758:	2300      	movs	r3, #0
 800a75a:	61fb      	str	r3, [r7, #28]
 800a75c:	e033      	b.n	800a7c6 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	00db      	lsls	r3, r3, #3
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	fa22 f303 	lsr.w	r3, r2, r3
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d103      	bne.n	800a77a <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	3364      	adds	r3, #100	@ 0x64
 800a776:	627b      	str	r3, [r7, #36]	@ 0x24
 800a778:	e022      	b.n	800a7c0 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2264      	movs	r2, #100	@ 0x64
 800a77e:	fb02 f303 	mul.w	r3, r2, r3
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a786:	6a38      	ldr	r0, [r7, #32]
 800a788:	69f9      	ldr	r1, [r7, #28]
 800a78a:	4401      	add	r1, r0
 800a78c:	4818      	ldr	r0, [pc, #96]	@ (800a7f0 <JPEG_GetQuality+0xb8>)
 800a78e:	5c41      	ldrb	r1, [r0, r1]
 800a790:	440a      	add	r2, r1
 800a792:	7812      	ldrb	r2, [r2, #0]
 800a794:	fbb3 f3f2 	udiv	r3, r3, r2
 800a798:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b64      	cmp	r3, #100	@ 0x64
 800a79e:	d807      	bhi.n	800a7b0 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800a7a6:	085b      	lsrs	r3, r3, #1
 800a7a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7aa:	4413      	add	r3, r2
 800a7ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7ae:	e007      	b.n	800a7c0 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800a7b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7bc:	4413      	add	r3, r2
 800a7be:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	61fb      	str	r3, [r7, #28]
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d9c8      	bls.n	800a75e <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	2b3c      	cmp	r3, #60	@ 0x3c
 800a7dc:	d9b9      	bls.n	800a752 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800a7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e0:	099b      	lsrs	r3, r3, #6
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	372c      	adds	r7, #44	@ 0x2c
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	08016bdc 	.word	0x08016bdc

0800a7f4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a7fc:	f7f7 fac4 	bl	8001d88 <HAL_GetTick>
 800a800:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e03b      	b.n	800a884 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68da      	ldr	r2, [r3, #12]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f022 0201 	bic.w	r2, r2, #1
 800a82a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a82c:	e00f      	b.n	800a84e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a82e:	f7f7 faab 	bl	8001d88 <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	2b05      	cmp	r3, #5
 800a83a:	d908      	bls.n	800a84e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2240      	movs	r2, #64	@ 0x40
 800a840:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2203      	movs	r2, #3
 800a846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e01a      	b.n	800a884 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e8      	bne.n	800a82e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f9e3 	bl	800ac28 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e03e      	b.n	800a924 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	e037      	b.n	800a924 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d126      	bne.n	800a916 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d11c      	bne.n	800a910 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d108      	bne.n	800a8fe <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691a      	ldr	r2, [r3, #16]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a8fa:	611a      	str	r2, [r3, #16]
 800a8fc:	e00d      	b.n	800a91a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	691a      	ldr	r2, [r3, #16]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a90c:	611a      	str	r2, [r3, #16]
 800a90e:	e004      	b.n	800a91a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	75fb      	strb	r3, [r7, #23]
 800a914:	e001      	b.n	800a91a <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a922:	7dfb      	ldrb	r3, [r7, #23]
}
 800a924:	4618      	mov	r0, r3
 800a926:	371c      	adds	r7, #28
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e017      	b.n	800a972 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d004      	beq.n	800a958 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2280      	movs	r2, #128	@ 0x80
 800a952:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	e00c      	b.n	800a972 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2204      	movs	r2, #4
 800a95c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68da      	ldr	r2, [r3, #12]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f022 0201 	bic.w	r2, r2, #1
 800a96e:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
	...

0800a980 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a98c:	4b91      	ldr	r3, [pc, #580]	@ (800abd4 <HAL_MDMA_IRQHandler+0x254>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a91      	ldr	r2, [pc, #580]	@ (800abd8 <HAL_MDMA_IRQHandler+0x258>)
 800a992:	fba2 2303 	umull	r2, r3, r2, r3
 800a996:	0a9b      	lsrs	r3, r3, #10
 800a998:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	4b8e      	ldr	r3, [pc, #568]	@ (800abdc <HAL_MDMA_IRQHandler+0x25c>)
 800a9a2:	4413      	add	r3, r2
 800a9a4:	099b      	lsrs	r3, r3, #6
 800a9a6:	f003 031f 	and.w	r3, r3, #31
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a9b2:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 812d 	beq.w	800ac1c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d054      	beq.n	800aa7a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	f003 0302 	and.w	r3, r3, #2
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d04d      	beq.n	800aa7a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 0202 	bic.w	r2, r2, #2
 800a9ec:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa04:	f043 0201 	orr.w	r2, r3, #1
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	669a      	str	r2, [r3, #104]	@ 0x68
 800aa0c:	e005      	b.n	800aa1a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa12:	f043 0202 	orr.w	r2, r3, #2
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d005      	beq.n	800aa30 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa28:	f043 0204 	orr.w	r2, r3, #4
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d005      	beq.n	800aa46 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa3e:	f043 0208 	orr.w	r2, r3, #8
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d005      	beq.n	800aa5c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa54:	f043 0210 	orr.w	r2, r3, #16
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d005      	beq.n	800aa72 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa6a:	f043 0220 	orr.w	r2, r3, #32
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2201      	movs	r2, #1
 800aa78:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d012      	beq.n	800aaae <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	f003 0320 	and.w	r3, r3, #32
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2210      	movs	r2, #16
 800aa9c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0308 	and.w	r3, r3, #8
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d012      	beq.n	800aae2 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f003 0310 	and.w	r3, r3, #16
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00b      	beq.n	800aae2 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2208      	movs	r2, #8
 800aad0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f003 0304 	and.w	r3, r3, #4
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d012      	beq.n	800ab16 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f003 0308 	and.w	r3, r3, #8
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00b      	beq.n	800ab16 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2204      	movs	r2, #4
 800ab04:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0302 	and.w	r3, r3, #2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d039      	beq.n	800ab98 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f003 0304 	and.w	r3, r3, #4
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d032      	beq.n	800ab98 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68da      	ldr	r2, [r3, #12]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800ab40:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	d110      	bne.n	800ab70 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d05c      	beq.n	800ac20 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	4798      	blx	r3
        }
        return;
 800ab6e:	e057      	b.n	800ac20 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2202      	movs	r2, #2
 800ab76:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d040      	beq.n	800ac22 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2204      	movs	r2, #4
 800aba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f022 0201 	bic.w	r2, r2, #1
 800abb6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	3301      	adds	r3, #1
 800abbc:	60bb      	str	r3, [r7, #8]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d30d      	bcc.n	800abe0 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f2      	bne.n	800abb8 <HAL_MDMA_IRQHandler+0x238>
 800abd2:	e006      	b.n	800abe2 <HAL_MDMA_IRQHandler+0x262>
 800abd4:	24000000 	.word	0x24000000
 800abd8:	1b4e81b5 	.word	0x1b4e81b5
 800abdc:	adffffc0 	.word	0xadffffc0
        break;
 800abe0:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f003 0301 	and.w	r3, r3, #1
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d004      	beq.n	800ac02 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2203      	movs	r2, #3
 800abfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ac00:	e003      	b.n	800ac0a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d007      	beq.n	800ac22 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	4798      	blx	r3
 800ac1a:	e002      	b.n	800ac22 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800ac1c:	bf00      	nop
 800ac1e:	e000      	b.n	800ac22 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800ac20:	bf00      	nop
    }
  }
}
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68d9      	ldr	r1, [r3, #12]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691a      	ldr	r2, [r3, #16]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	695a      	ldr	r2, [r3, #20]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ac4e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ac5a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac60:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ac66:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800ac70:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ac7c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ac7e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac88:	d107      	bne.n	800ac9a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	691a      	ldr	r2, [r3, #16]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800ac98:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	da11      	bge.n	800acce <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	695a      	ldr	r2, [r3, #20]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800acb8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acbe:	425b      	negs	r3, r3
 800acc0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	b292      	uxth	r2, r2
 800acca:	621a      	str	r2, [r3, #32]
 800accc:	e006      	b.n	800acdc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd2:	461a      	mov	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	b292      	uxth	r2, r2
 800acda:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	da15      	bge.n	800ad10 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	695a      	ldr	r2, [r3, #20]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800acf2:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf8:	425b      	negs	r3, r3
 800acfa:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6a19      	ldr	r1, [r3, #32]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	041a      	lsls	r2, r3, #16
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	621a      	str	r2, [r3, #32]
 800ad0e:	e009      	b.n	800ad24 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6a19      	ldr	r1, [r3, #32]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1a:	041a      	lsls	r2, r3, #16
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad2c:	d006      	beq.n	800ad3c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	b2d2      	uxtb	r2, r2
 800ad38:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad3a:	e003      	b.n	800ad44 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2200      	movs	r2, #0
 800ad42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800ad4c:	bf00      	nop
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e0fe      	b.n	800af68 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f00a fce6 	bl	8015750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2203      	movs	r2, #3
 800ad88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f007 f896 	bl	8011ec2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	7c1a      	ldrb	r2, [r3, #16]
 800ad9e:	f88d 2000 	strb.w	r2, [sp]
 800ada2:	3304      	adds	r3, #4
 800ada4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ada6:	f006 ff67 	bl	8011c78 <USB_CoreInit>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d005      	beq.n	800adbc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2202      	movs	r2, #2
 800adb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	e0d5      	b.n	800af68 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2100      	movs	r1, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f007 f88e 	bl	8011ee4 <USB_SetCurrentMode>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2202      	movs	r2, #2
 800add2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e0c6      	b.n	800af68 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
 800adde:	e04a      	b.n	800ae76 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ade0:	7bfa      	ldrb	r2, [r7, #15]
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4613      	mov	r3, r2
 800ade6:	00db      	lsls	r3, r3, #3
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	3315      	adds	r3, #21
 800adf0:	2201      	movs	r2, #1
 800adf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800adf4:	7bfa      	ldrb	r2, [r7, #15]
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	4613      	mov	r3, r2
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	4413      	add	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	440b      	add	r3, r1
 800ae02:	3314      	adds	r3, #20
 800ae04:	7bfa      	ldrb	r2, [r7, #15]
 800ae06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ae08:	7bfa      	ldrb	r2, [r7, #15]
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	b298      	uxth	r0, r3
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	4613      	mov	r3, r2
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	4413      	add	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	440b      	add	r3, r1
 800ae1a:	332e      	adds	r3, #46	@ 0x2e
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ae20:	7bfa      	ldrb	r2, [r7, #15]
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	4613      	mov	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	4413      	add	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	440b      	add	r3, r1
 800ae2e:	3318      	adds	r3, #24
 800ae30:	2200      	movs	r2, #0
 800ae32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ae34:	7bfa      	ldrb	r2, [r7, #15]
 800ae36:	6879      	ldr	r1, [r7, #4]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	440b      	add	r3, r1
 800ae42:	331c      	adds	r3, #28
 800ae44:	2200      	movs	r2, #0
 800ae46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ae48:	7bfa      	ldrb	r2, [r7, #15]
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	440b      	add	r3, r1
 800ae56:	3320      	adds	r3, #32
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae5c:	7bfa      	ldrb	r2, [r7, #15]
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	4613      	mov	r3, r2
 800ae62:	00db      	lsls	r3, r3, #3
 800ae64:	4413      	add	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	440b      	add	r3, r1
 800ae6a:	3324      	adds	r3, #36	@ 0x24
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
 800ae72:	3301      	adds	r3, #1
 800ae74:	73fb      	strb	r3, [r7, #15]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	791b      	ldrb	r3, [r3, #4]
 800ae7a:	7bfa      	ldrb	r2, [r7, #15]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d3af      	bcc.n	800ade0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae80:	2300      	movs	r3, #0
 800ae82:	73fb      	strb	r3, [r7, #15]
 800ae84:	e044      	b.n	800af10 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ae86:	7bfa      	ldrb	r2, [r7, #15]
 800ae88:	6879      	ldr	r1, [r7, #4]
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	00db      	lsls	r3, r3, #3
 800ae8e:	4413      	add	r3, r2
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	440b      	add	r3, r1
 800ae94:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800ae98:	2200      	movs	r2, #0
 800ae9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ae9c:	7bfa      	ldrb	r2, [r7, #15]
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	4613      	mov	r3, r2
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	440b      	add	r3, r1
 800aeaa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800aeae:	7bfa      	ldrb	r2, [r7, #15]
 800aeb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aeb2:	7bfa      	ldrb	r2, [r7, #15]
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	00db      	lsls	r3, r3, #3
 800aeba:	4413      	add	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	440b      	add	r3, r1
 800aec0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800aec4:	2200      	movs	r2, #0
 800aec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800aec8:	7bfa      	ldrb	r2, [r7, #15]
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	4613      	mov	r3, r2
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	440b      	add	r3, r1
 800aed6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aede:	7bfa      	ldrb	r2, [r7, #15]
 800aee0:	6879      	ldr	r1, [r7, #4]
 800aee2:	4613      	mov	r3, r2
 800aee4:	00db      	lsls	r3, r3, #3
 800aee6:	4413      	add	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	440b      	add	r3, r1
 800aeec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800aef4:	7bfa      	ldrb	r2, [r7, #15]
 800aef6:	6879      	ldr	r1, [r7, #4]
 800aef8:	4613      	mov	r3, r2
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	4413      	add	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	440b      	add	r3, r1
 800af02:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800af06:	2200      	movs	r2, #0
 800af08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	3301      	adds	r3, #1
 800af0e:	73fb      	strb	r3, [r7, #15]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	791b      	ldrb	r3, [r3, #4]
 800af14:	7bfa      	ldrb	r2, [r7, #15]
 800af16:	429a      	cmp	r2, r3
 800af18:	d3b5      	bcc.n	800ae86 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6818      	ldr	r0, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	7c1a      	ldrb	r2, [r3, #16]
 800af22:	f88d 2000 	strb.w	r2, [sp]
 800af26:	3304      	adds	r3, #4
 800af28:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af2a:	f007 f827 	bl	8011f7c <USB_DevInit>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d005      	beq.n	800af40 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2202      	movs	r2, #2
 800af38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e013      	b.n	800af68 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2201      	movs	r2, #1
 800af4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7b1b      	ldrb	r3, [r3, #12]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d102      	bne.n	800af5c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 f96e 	bl	800c238 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4618      	mov	r0, r3
 800af62:	f008 f86a 	bl	801303a <USB_DevDisconnect>

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800af84:	2b01      	cmp	r3, #1
 800af86:	d101      	bne.n	800af8c <HAL_PCD_Start+0x1c>
 800af88:	2302      	movs	r3, #2
 800af8a:	e022      	b.n	800afd2 <HAL_PCD_Start+0x62>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d009      	beq.n	800afb4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d105      	bne.n	800afb4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4618      	mov	r0, r3
 800afba:	f006 ff71 	bl	8011ea0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f008 f818 	bl	8012ff8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800afda:	b590      	push	{r4, r7, lr}
 800afdc:	b08d      	sub	sp, #52	@ 0x34
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe8:	6a3b      	ldr	r3, [r7, #32]
 800afea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4618      	mov	r0, r3
 800aff2:	f008 f8d6 	bl	80131a2 <USB_GetMode>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f040 84b9 	bne.w	800b970 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f008 f83a 	bl	801307c <USB_ReadInterrupts>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f000 84af 	beq.w	800b96e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	0a1b      	lsrs	r3, r3, #8
 800b01a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4618      	mov	r0, r3
 800b02a:	f008 f827 	bl	801307c <USB_ReadInterrupts>
 800b02e:	4603      	mov	r3, r0
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	2b02      	cmp	r3, #2
 800b036:	d107      	bne.n	800b048 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	695a      	ldr	r2, [r3, #20]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f002 0202 	and.w	r2, r2, #2
 800b046:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f008 f815 	bl	801307c <USB_ReadInterrupts>
 800b052:	4603      	mov	r3, r0
 800b054:	f003 0310 	and.w	r3, r3, #16
 800b058:	2b10      	cmp	r3, #16
 800b05a:	d161      	bne.n	800b120 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	699a      	ldr	r2, [r3, #24]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0210 	bic.w	r2, r2, #16
 800b06a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	f003 020f 	and.w	r2, r3, #15
 800b078:	4613      	mov	r3, r2
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	4413      	add	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	4413      	add	r3, r2
 800b088:	3304      	adds	r3, #4
 800b08a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b092:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b096:	d124      	bne.n	800b0e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b09e:	4013      	ands	r3, r2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d035      	beq.n	800b110 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	091b      	lsrs	r3, r3, #4
 800b0ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b0ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	6a38      	ldr	r0, [r7, #32]
 800b0b8:	f007 fe4c 	bl	8012d54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	68da      	ldr	r2, [r3, #12]
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	091b      	lsrs	r3, r3, #4
 800b0c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0c8:	441a      	add	r2, r3
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	695a      	ldr	r2, [r3, #20]
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	091b      	lsrs	r3, r3, #4
 800b0d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0da:	441a      	add	r2, r3
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	615a      	str	r2, [r3, #20]
 800b0e0:	e016      	b.n	800b110 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b0e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b0ec:	d110      	bne.n	800b110 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b0f4:	2208      	movs	r2, #8
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6a38      	ldr	r0, [r7, #32]
 800b0fa:	f007 fe2b 	bl	8012d54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	695a      	ldr	r2, [r3, #20]
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	091b      	lsrs	r3, r3, #4
 800b106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b10a:	441a      	add	r2, r3
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	699a      	ldr	r2, [r3, #24]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f042 0210 	orr.w	r2, r2, #16
 800b11e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4618      	mov	r0, r3
 800b126:	f007 ffa9 	bl	801307c <USB_ReadInterrupts>
 800b12a:	4603      	mov	r3, r0
 800b12c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b130:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b134:	f040 80a7 	bne.w	800b286 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b138:	2300      	movs	r3, #0
 800b13a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4618      	mov	r0, r3
 800b142:	f007 ffae 	bl	80130a2 <USB_ReadDevAllOutEpInterrupt>
 800b146:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b148:	e099      	b.n	800b27e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 808e 	beq.w	800b272 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	4611      	mov	r1, r2
 800b160:	4618      	mov	r0, r3
 800b162:	f007 ffd2 	bl	801310a <USB_ReadDevOutEPInterrupt>
 800b166:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f003 0301 	and.w	r3, r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00c      	beq.n	800b18c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17e:	461a      	mov	r2, r3
 800b180:	2301      	movs	r3, #1
 800b182:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b184:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fed0 	bl	800bf2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f003 0308 	and.w	r3, r3, #8
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00c      	beq.n	800b1b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2308      	movs	r3, #8
 800b1a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b1a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 ffa6 	bl	800c0fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f003 0310 	and.w	r3, r3, #16
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d008      	beq.n	800b1cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	2310      	movs	r3, #16
 800b1ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	f003 0302 	and.w	r3, r3, #2
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d030      	beq.n	800b238 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1de:	2b80      	cmp	r3, #128	@ 0x80
 800b1e0:	d109      	bne.n	800b1f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	69fa      	ldr	r2, [r7, #28]
 800b1ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b1f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b1f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	00db      	lsls	r3, r3, #3
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	4413      	add	r3, r2
 800b208:	3304      	adds	r3, #4
 800b20a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	78db      	ldrb	r3, [r3, #3]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d108      	bne.n	800b226 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2200      	movs	r2, #0
 800b218:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f00a fbbb 	bl	801599c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b232:	461a      	mov	r2, r3
 800b234:	2302      	movs	r3, #2
 800b236:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f003 0320 	and.w	r3, r3, #32
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d008      	beq.n	800b254 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b24e:	461a      	mov	r2, r3
 800b250:	2320      	movs	r3, #32
 800b252:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d009      	beq.n	800b272 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b260:	015a      	lsls	r2, r3, #5
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	4413      	add	r3, r2
 800b266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b26a:	461a      	mov	r2, r3
 800b26c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b270:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b274:	3301      	adds	r3, #1
 800b276:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27a:	085b      	lsrs	r3, r3, #1
 800b27c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	2b00      	cmp	r3, #0
 800b282:	f47f af62 	bne.w	800b14a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f007 fef6 	bl	801307c <USB_ReadInterrupts>
 800b290:	4603      	mov	r3, r0
 800b292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b296:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b29a:	f040 80db 	bne.w	800b454 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f007 ff17 	bl	80130d6 <USB_ReadDevAllInEpInterrupt>
 800b2a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b2ae:	e0cd      	b.n	800b44c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 80c2 	beq.w	800b440 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f007 ff3d 	bl	8013146 <USB_ReadDevInEPInterrupt>
 800b2cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d057      	beq.n	800b388 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2da:	f003 030f 	and.w	r3, r3, #15
 800b2de:	2201      	movs	r2, #1
 800b2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	43db      	mvns	r3, r3
 800b2f2:	69f9      	ldr	r1, [r7, #28]
 800b2f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b308:	461a      	mov	r2, r3
 800b30a:	2301      	movs	r3, #1
 800b30c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	799b      	ldrb	r3, [r3, #6]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d132      	bne.n	800b37c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b316:	6879      	ldr	r1, [r7, #4]
 800b318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b31a:	4613      	mov	r3, r2
 800b31c:	00db      	lsls	r3, r3, #3
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	3320      	adds	r3, #32
 800b326:	6819      	ldr	r1, [r3, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b32c:	4613      	mov	r3, r2
 800b32e:	00db      	lsls	r3, r3, #3
 800b330:	4413      	add	r3, r2
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	4403      	add	r3, r0
 800b336:	331c      	adds	r3, #28
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4419      	add	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b340:	4613      	mov	r3, r2
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	4413      	add	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4403      	add	r3, r0
 800b34a:	3320      	adds	r3, #32
 800b34c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b350:	2b00      	cmp	r3, #0
 800b352:	d113      	bne.n	800b37c <HAL_PCD_IRQHandler+0x3a2>
 800b354:	6879      	ldr	r1, [r7, #4]
 800b356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b358:	4613      	mov	r3, r2
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	440b      	add	r3, r1
 800b362:	3324      	adds	r3, #36	@ 0x24
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d108      	bne.n	800b37c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b374:	461a      	mov	r2, r3
 800b376:	2101      	movs	r1, #1
 800b378:	f007 ff46 	bl	8013208 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f00a fa85 	bl	8015892 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f003 0308 	and.w	r3, r3, #8
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d008      	beq.n	800b3a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b394:	015a      	lsls	r2, r3, #5
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	4413      	add	r3, r2
 800b39a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b39e:	461a      	mov	r2, r3
 800b3a0:	2308      	movs	r3, #8
 800b3a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	f003 0310 	and.w	r3, r3, #16
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d008      	beq.n	800b3c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	2310      	movs	r3, #16
 800b3be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d008      	beq.n	800b3dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	2340      	movs	r3, #64	@ 0x40
 800b3da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	f003 0302 	and.w	r3, r3, #2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d023      	beq.n	800b42e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b3e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b3e8:	6a38      	ldr	r0, [r7, #32]
 800b3ea:	f006 ff25 	bl	8012238 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b3ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	00db      	lsls	r3, r3, #3
 800b3f4:	4413      	add	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	3310      	adds	r3, #16
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	3304      	adds	r3, #4
 800b400:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	78db      	ldrb	r3, [r3, #3]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d108      	bne.n	800b41c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2200      	movs	r2, #0
 800b40e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b412:	b2db      	uxtb	r3, r3
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f00a fad2 	bl	80159c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b428:	461a      	mov	r2, r3
 800b42a:	2302      	movs	r3, #2
 800b42c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b438:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fcea 	bl	800be14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b442:	3301      	adds	r3, #1
 800b444:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	085b      	lsrs	r3, r3, #1
 800b44a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f47f af2e 	bne.w	800b2b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4618      	mov	r0, r3
 800b45a:	f007 fe0f 	bl	801307c <USB_ReadInterrupts>
 800b45e:	4603      	mov	r3, r0
 800b460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b468:	d122      	bne.n	800b4b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b478:	f023 0301 	bic.w	r3, r3, #1
 800b47c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b484:	2b01      	cmp	r3, #1
 800b486:	d108      	bne.n	800b49a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b490:	2100      	movs	r1, #0
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fef4 	bl	800c280 <HAL_PCDEx_LPM_Callback>
 800b498:	e002      	b.n	800b4a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f00a fa70 	bl	8015980 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	695a      	ldr	r2, [r3, #20]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b4ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f007 fde1 	bl	801307c <USB_ReadInterrupts>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4c4:	d112      	bne.n	800b4ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d102      	bne.n	800b4dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f00a fa2c 	bl	8015934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	695a      	ldr	r2, [r3, #20]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b4ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f007 fdc3 	bl	801307c <USB_ReadInterrupts>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b500:	d121      	bne.n	800b546 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	695a      	ldr	r2, [r3, #20]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800b510:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d111      	bne.n	800b540 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b52a:	089b      	lsrs	r3, r3, #2
 800b52c:	f003 020f 	and.w	r2, r3, #15
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b536:	2101      	movs	r1, #1
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fea1 	bl	800c280 <HAL_PCDEx_LPM_Callback>
 800b53e:	e002      	b.n	800b546 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f00a f9f7 	bl	8015934 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f007 fd96 	bl	801307c <USB_ReadInterrupts>
 800b550:	4603      	mov	r3, r0
 800b552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b55a:	f040 80b7 	bne.w	800b6cc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	69fa      	ldr	r2, [r7, #28]
 800b568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b56c:	f023 0301 	bic.w	r3, r3, #1
 800b570:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2110      	movs	r1, #16
 800b578:	4618      	mov	r0, r3
 800b57a:	f006 fe5d 	bl	8012238 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b57e:	2300      	movs	r3, #0
 800b580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b582:	e046      	b.n	800b612 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b586:	015a      	lsls	r2, r3, #5
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	4413      	add	r3, r2
 800b58c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b590:	461a      	mov	r2, r3
 800b592:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b596:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5a8:	0151      	lsls	r1, r2, #5
 800b5aa:	69fa      	ldr	r2, [r7, #28]
 800b5ac:	440a      	add	r2, r1
 800b5ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b5b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b5ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5dc:	0151      	lsls	r1, r2, #5
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	440a      	add	r2, r1
 800b5e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b5ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ee:	015a      	lsls	r2, r3, #5
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5fc:	0151      	lsls	r1, r2, #5
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	440a      	add	r2, r1
 800b602:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b606:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b60a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60e:	3301      	adds	r3, #1
 800b610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	791b      	ldrb	r3, [r3, #4]
 800b616:	461a      	mov	r2, r3
 800b618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d3b2      	bcc.n	800b584 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	69fa      	ldr	r2, [r7, #28]
 800b628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b62c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b630:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	7bdb      	ldrb	r3, [r3, #15]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d016      	beq.n	800b668 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b644:	69fa      	ldr	r2, [r7, #28]
 800b646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b64a:	f043 030b 	orr.w	r3, r3, #11
 800b64e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b65a:	69fa      	ldr	r2, [r7, #28]
 800b65c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b660:	f043 030b 	orr.w	r3, r3, #11
 800b664:	6453      	str	r3, [r2, #68]	@ 0x44
 800b666:	e015      	b.n	800b694 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b66e:	695a      	ldr	r2, [r3, #20]
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b676:	4619      	mov	r1, r3
 800b678:	f242 032b 	movw	r3, #8235	@ 0x202b
 800b67c:	4313      	orrs	r3, r2
 800b67e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	69fa      	ldr	r2, [r7, #28]
 800b68a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b68e:	f043 030b 	orr.w	r3, r3, #11
 800b692:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b6a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6818      	ldr	r0, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f007 fda6 	bl	8013208 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	695a      	ldr	r2, [r3, #20]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800b6ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f007 fcd3 	bl	801307c <USB_ReadInterrupts>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b6dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6e0:	d123      	bne.n	800b72a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f007 fd6a 	bl	80131c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f006 fe1a 	bl	801232a <USB_GetDevSpeed>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681c      	ldr	r4, [r3, #0]
 800b702:	f001 fd9d 	bl	800d240 <HAL_RCC_GetHCLKFreq>
 800b706:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b70c:	461a      	mov	r2, r3
 800b70e:	4620      	mov	r0, r4
 800b710:	f006 fb24 	bl	8011d5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f00a f8e4 	bl	80158e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	695a      	ldr	r2, [r3, #20]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b728:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4618      	mov	r0, r3
 800b730:	f007 fca4 	bl	801307c <USB_ReadInterrupts>
 800b734:	4603      	mov	r3, r0
 800b736:	f003 0308 	and.w	r3, r3, #8
 800b73a:	2b08      	cmp	r3, #8
 800b73c:	d10a      	bne.n	800b754 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f00a f8c1 	bl	80158c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	695a      	ldr	r2, [r3, #20]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f002 0208 	and.w	r2, r2, #8
 800b752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4618      	mov	r0, r3
 800b75a:	f007 fc8f 	bl	801307c <USB_ReadInterrupts>
 800b75e:	4603      	mov	r3, r0
 800b760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b764:	2b80      	cmp	r3, #128	@ 0x80
 800b766:	d123      	bne.n	800b7b0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b774:	2301      	movs	r3, #1
 800b776:	627b      	str	r3, [r7, #36]	@ 0x24
 800b778:	e014      	b.n	800b7a4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b77a:	6879      	ldr	r1, [r7, #4]
 800b77c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b77e:	4613      	mov	r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	440b      	add	r3, r1
 800b788:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d105      	bne.n	800b79e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	b2db      	uxtb	r3, r3
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fb0a 	bl	800bdb2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	791b      	ldrb	r3, [r3, #4]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d3e4      	bcc.n	800b77a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f007 fc61 	bl	801307c <USB_ReadInterrupts>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b7c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7c4:	d13c      	bne.n	800b840 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7ca:	e02b      	b.n	800b824 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b7dc:	6879      	ldr	r1, [r7, #4]
 800b7de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	00db      	lsls	r3, r3, #3
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	440b      	add	r3, r1
 800b7ea:	3318      	adds	r3, #24
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d115      	bne.n	800b81e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b7f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	da12      	bge.n	800b81e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b7f8:	6879      	ldr	r1, [r7, #4]
 800b7fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	4413      	add	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	440b      	add	r3, r1
 800b806:	3317      	adds	r3, #23
 800b808:	2201      	movs	r2, #1
 800b80a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b814:	b2db      	uxtb	r3, r3
 800b816:	4619      	mov	r1, r3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 faca 	bl	800bdb2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	3301      	adds	r3, #1
 800b822:	627b      	str	r3, [r7, #36]	@ 0x24
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	791b      	ldrb	r3, [r3, #4]
 800b828:	461a      	mov	r2, r3
 800b82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d3cd      	bcc.n	800b7cc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	695a      	ldr	r2, [r3, #20]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800b83e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4618      	mov	r0, r3
 800b846:	f007 fc19 	bl	801307c <USB_ReadInterrupts>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b850:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b854:	d156      	bne.n	800b904 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b856:	2301      	movs	r3, #1
 800b858:	627b      	str	r3, [r7, #36]	@ 0x24
 800b85a:	e045      	b.n	800b8e8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85e:	015a      	lsls	r2, r3, #5
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	4413      	add	r3, r2
 800b864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b870:	4613      	mov	r3, r2
 800b872:	00db      	lsls	r3, r3, #3
 800b874:	4413      	add	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	440b      	add	r3, r1
 800b87a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d12e      	bne.n	800b8e2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b884:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b886:	2b00      	cmp	r3, #0
 800b888:	da2b      	bge.n	800b8e2 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	0c1a      	lsrs	r2, r3, #16
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800b894:	4053      	eors	r3, r2
 800b896:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d121      	bne.n	800b8e2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	00db      	lsls	r3, r3, #3
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	69fa      	ldr	r2, [r7, #28]
 800b8d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b8de:	6053      	str	r3, [r2, #4]
            break;
 800b8e0:	e008      	b.n	800b8f4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	791b      	ldrb	r3, [r3, #4]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d3b3      	bcc.n	800b85c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	695a      	ldr	r2, [r3, #20]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800b902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4618      	mov	r0, r3
 800b90a:	f007 fbb7 	bl	801307c <USB_ReadInterrupts>
 800b90e:	4603      	mov	r3, r0
 800b910:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b918:	d10a      	bne.n	800b930 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f00a f862 	bl	80159e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	695a      	ldr	r2, [r3, #20]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b92e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4618      	mov	r0, r3
 800b936:	f007 fba1 	bl	801307c <USB_ReadInterrupts>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f003 0304 	and.w	r3, r3, #4
 800b940:	2b04      	cmp	r3, #4
 800b942:	d115      	bne.n	800b970 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	f003 0304 	and.w	r3, r3, #4
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f00a f852 	bl	8015a00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	6859      	ldr	r1, [r3, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	430a      	orrs	r2, r1
 800b96a:	605a      	str	r2, [r3, #4]
 800b96c:	e000      	b.n	800b970 <HAL_PCD_IRQHandler+0x996>
      return;
 800b96e:	bf00      	nop
    }
  }
}
 800b970:	3734      	adds	r7, #52	@ 0x34
 800b972:	46bd      	mov	sp, r7
 800b974:	bd90      	pop	{r4, r7, pc}

0800b976 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	460b      	mov	r3, r1
 800b980:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d101      	bne.n	800b990 <HAL_PCD_SetAddress+0x1a>
 800b98c:	2302      	movs	r3, #2
 800b98e:	e012      	b.n	800b9b6 <HAL_PCD_SetAddress+0x40>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	78fa      	ldrb	r2, [r7, #3]
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f007 fb00 	bl	8012fac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	4608      	mov	r0, r1
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	70fb      	strb	r3, [r7, #3]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	803b      	strh	r3, [r7, #0]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b9dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	da0f      	bge.n	800ba04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9e4:	78fb      	ldrb	r3, [r7, #3]
 800b9e6:	f003 020f 	and.w	r2, r3, #15
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	4413      	add	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	3310      	adds	r3, #16
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	705a      	strb	r2, [r3, #1]
 800ba02:	e00f      	b.n	800ba24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	f003 020f 	and.w	r2, r3, #15
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	00db      	lsls	r3, r3, #3
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	4413      	add	r3, r2
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	f003 030f 	and.w	r3, r3, #15
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800ba30:	883b      	ldrh	r3, [r7, #0]
 800ba32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	78ba      	ldrb	r2, [r7, #2]
 800ba3e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	785b      	ldrb	r3, [r3, #1]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ba52:	78bb      	ldrb	r3, [r7, #2]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d102      	bne.n	800ba5e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d101      	bne.n	800ba6c <HAL_PCD_EP_Open+0xae>
 800ba68:	2302      	movs	r3, #2
 800ba6a:	e00e      	b.n	800ba8a <HAL_PCD_EP_Open+0xcc>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68f9      	ldr	r1, [r7, #12]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f006 fc7a 	bl	8012374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800ba88:	7afb      	ldrb	r3, [r7, #11]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ba9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	da0f      	bge.n	800bac6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800baa6:	78fb      	ldrb	r3, [r7, #3]
 800baa8:	f003 020f 	and.w	r2, r3, #15
 800baac:	4613      	mov	r3, r2
 800baae:	00db      	lsls	r3, r3, #3
 800bab0:	4413      	add	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	3310      	adds	r3, #16
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	4413      	add	r3, r2
 800baba:	3304      	adds	r3, #4
 800babc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2201      	movs	r2, #1
 800bac2:	705a      	strb	r2, [r3, #1]
 800bac4:	e00f      	b.n	800bae6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	f003 020f 	and.w	r2, r3, #15
 800bacc:	4613      	mov	r3, r2
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	4413      	add	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	4413      	add	r3, r2
 800badc:	3304      	adds	r3, #4
 800bade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800bae6:	78fb      	ldrb	r3, [r7, #3]
 800bae8:	f003 030f 	and.w	r3, r3, #15
 800baec:	b2da      	uxtb	r2, r3
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_PCD_EP_Close+0x6e>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e00e      	b.n	800bb1e <HAL_PCD_EP_Close+0x8c>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68f9      	ldr	r1, [r7, #12]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f006 fcb8 	bl	8012484 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b086      	sub	sp, #24
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	603b      	str	r3, [r7, #0]
 800bb32:	460b      	mov	r3, r1
 800bb34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb36:	7afb      	ldrb	r3, [r7, #11]
 800bb38:	f003 020f 	and.w	r2, r3, #15
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2200      	movs	r2, #0
 800bb66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb68:	7afb      	ldrb	r3, [r7, #11]
 800bb6a:	f003 030f 	and.w	r3, r3, #15
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	799b      	ldrb	r3, [r3, #6]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d102      	bne.n	800bb82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6818      	ldr	r0, [r3, #0]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	799b      	ldrb	r3, [r3, #6]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	6979      	ldr	r1, [r7, #20]
 800bb8e:	f006 fd55 	bl	801263c <USB_EPStartXfer>

  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bba8:	78fb      	ldrb	r3, [r7, #3]
 800bbaa:	f003 020f 	and.w	r2, r3, #15
 800bbae:	6879      	ldr	r1, [r7, #4]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	4413      	add	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	440b      	add	r3, r1
 800bbba:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800bbbe:	681b      	ldr	r3, [r3, #0]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	607a      	str	r2, [r7, #4]
 800bbd6:	603b      	str	r3, [r7, #0]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbdc:	7afb      	ldrb	r3, [r7, #11]
 800bbde:	f003 020f 	and.w	r2, r3, #15
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	3310      	adds	r3, #16
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	4413      	add	r3, r2
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	2200      	movs	r2, #0
 800bc04:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bc0c:	7afb      	ldrb	r3, [r7, #11]
 800bc0e:	f003 030f 	and.w	r3, r3, #15
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	799b      	ldrb	r3, [r3, #6]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d102      	bne.n	800bc26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6818      	ldr	r0, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	799b      	ldrb	r3, [r3, #6]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	6979      	ldr	r1, [r7, #20]
 800bc32:	f006 fd03 	bl	801263c <USB_EPStartXfer>

  return HAL_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	f003 030f 	and.w	r3, r3, #15
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	7912      	ldrb	r2, [r2, #4]
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d901      	bls.n	800bc5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e04f      	b.n	800bcfe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bc5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	da0f      	bge.n	800bc86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc66:	78fb      	ldrb	r3, [r7, #3]
 800bc68:	f003 020f 	and.w	r2, r3, #15
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	3310      	adds	r3, #16
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	4413      	add	r3, r2
 800bc7a:	3304      	adds	r3, #4
 800bc7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2201      	movs	r2, #1
 800bc82:	705a      	strb	r2, [r3, #1]
 800bc84:	e00d      	b.n	800bca2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bc86:	78fa      	ldrb	r2, [r7, #3]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	4413      	add	r3, r2
 800bc98:	3304      	adds	r3, #4
 800bc9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2201      	movs	r2, #1
 800bca6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bca8:	78fb      	ldrb	r3, [r7, #3]
 800bcaa:	f003 030f 	and.w	r3, r3, #15
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d101      	bne.n	800bcc2 <HAL_PCD_EP_SetStall+0x82>
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e01d      	b.n	800bcfe <HAL_PCD_EP_SetStall+0xbe>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68f9      	ldr	r1, [r7, #12]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f007 f897 	bl	8012e04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bcd6:	78fb      	ldrb	r3, [r7, #3]
 800bcd8:	f003 030f 	and.w	r3, r3, #15
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d109      	bne.n	800bcf4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6818      	ldr	r0, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	7999      	ldrb	r1, [r3, #6]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f007 fa8a 	bl	8013208 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b084      	sub	sp, #16
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	460b      	mov	r3, r1
 800bd10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bd12:	78fb      	ldrb	r3, [r7, #3]
 800bd14:	f003 030f 	and.w	r3, r3, #15
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	7912      	ldrb	r2, [r2, #4]
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d901      	bls.n	800bd24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e042      	b.n	800bdaa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bd24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	da0f      	bge.n	800bd4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	f003 020f 	and.w	r2, r3, #15
 800bd32:	4613      	mov	r3, r2
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	4413      	add	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	3310      	adds	r3, #16
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	4413      	add	r3, r2
 800bd40:	3304      	adds	r3, #4
 800bd42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2201      	movs	r2, #1
 800bd48:	705a      	strb	r2, [r3, #1]
 800bd4a:	e00f      	b.n	800bd6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd4c:	78fb      	ldrb	r3, [r7, #3]
 800bd4e:	f003 020f 	and.w	r2, r3, #15
 800bd52:	4613      	mov	r3, r2
 800bd54:	00db      	lsls	r3, r3, #3
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	4413      	add	r3, r2
 800bd62:	3304      	adds	r3, #4
 800bd64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bd72:	78fb      	ldrb	r3, [r7, #3]
 800bd74:	f003 030f 	and.w	r3, r3, #15
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d101      	bne.n	800bd8c <HAL_PCD_EP_ClrStall+0x86>
 800bd88:	2302      	movs	r3, #2
 800bd8a:	e00e      	b.n	800bdaa <HAL_PCD_EP_ClrStall+0xa4>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68f9      	ldr	r1, [r7, #12]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f007 f8a0 	bl	8012ee0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b084      	sub	sp, #16
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bdbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	da0c      	bge.n	800bde0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bdc6:	78fb      	ldrb	r3, [r7, #3]
 800bdc8:	f003 020f 	and.w	r2, r3, #15
 800bdcc:	4613      	mov	r3, r2
 800bdce:	00db      	lsls	r3, r3, #3
 800bdd0:	4413      	add	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	3310      	adds	r3, #16
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	4413      	add	r3, r2
 800bdda:	3304      	adds	r3, #4
 800bddc:	60fb      	str	r3, [r7, #12]
 800bdde:	e00c      	b.n	800bdfa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bde0:	78fb      	ldrb	r3, [r7, #3]
 800bde2:	f003 020f 	and.w	r2, r3, #15
 800bde6:	4613      	mov	r3, r2
 800bde8:	00db      	lsls	r3, r3, #3
 800bdea:	4413      	add	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3304      	adds	r3, #4
 800bdf8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68f9      	ldr	r1, [r7, #12]
 800be00:	4618      	mov	r0, r3
 800be02:	f006 febf 	bl	8012b84 <USB_EPStopXfer>
 800be06:	4603      	mov	r3, r0
 800be08:	72fb      	strb	r3, [r7, #11]

  return ret;
 800be0a:	7afb      	ldrb	r3, [r7, #11]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08a      	sub	sp, #40	@ 0x28
 800be18:	af02      	add	r7, sp, #8
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	4613      	mov	r3, r2
 800be2c:	00db      	lsls	r3, r3, #3
 800be2e:	4413      	add	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	3310      	adds	r3, #16
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	4413      	add	r3, r2
 800be38:	3304      	adds	r3, #4
 800be3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	695a      	ldr	r2, [r3, #20]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	429a      	cmp	r2, r3
 800be46:	d901      	bls.n	800be4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e06b      	b.n	800bf24 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	691a      	ldr	r2, [r3, #16]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	69fa      	ldr	r2, [r7, #28]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d902      	bls.n	800be68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	3303      	adds	r3, #3
 800be6c:	089b      	lsrs	r3, r3, #2
 800be6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be70:	e02a      	b.n	800bec8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	691a      	ldr	r2, [r3, #16]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	69fa      	ldr	r2, [r7, #28]
 800be84:	429a      	cmp	r2, r3
 800be86:	d902      	bls.n	800be8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	3303      	adds	r3, #3
 800be92:	089b      	lsrs	r3, r3, #2
 800be94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	68d9      	ldr	r1, [r3, #12]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	4603      	mov	r3, r0
 800beaa:	6978      	ldr	r0, [r7, #20]
 800beac:	f006 ff14 	bl	8012cd8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	441a      	add	r2, r3
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	695a      	ldr	r2, [r3, #20]
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	441a      	add	r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	015a      	lsls	r2, r3, #5
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d809      	bhi.n	800bef2 <PCD_WriteEmptyTxFifo+0xde>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	695a      	ldr	r2, [r3, #20]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d203      	bcs.n	800bef2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1bf      	bne.n	800be72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	691a      	ldr	r2, [r3, #16]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	429a      	cmp	r2, r3
 800befc:	d811      	bhi.n	800bf22 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	f003 030f 	and.w	r3, r3, #15
 800bf04:	2201      	movs	r2, #1
 800bf06:	fa02 f303 	lsl.w	r3, r2, r3
 800bf0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	43db      	mvns	r3, r3
 800bf18:	6939      	ldr	r1, [r7, #16]
 800bf1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf1e:	4013      	ands	r3, r2
 800bf20:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	333c      	adds	r3, #60	@ 0x3c
 800bf44:	3304      	adds	r3, #4
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	015a      	lsls	r2, r3, #5
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	4413      	add	r3, r2
 800bf52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	799b      	ldrb	r3, [r3, #6]
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d17b      	bne.n	800c05a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	f003 0308 	and.w	r3, r3, #8
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d015      	beq.n	800bf98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	4a61      	ldr	r2, [pc, #388]	@ (800c0f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	f240 80b9 	bls.w	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f000 80b3 	beq.w	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	015a      	lsls	r2, r3, #5
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	4413      	add	r3, r2
 800bf8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf94:	6093      	str	r3, [r2, #8]
 800bf96:	e0a7      	b.n	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	f003 0320 	and.w	r3, r3, #32
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d009      	beq.n	800bfb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	015a      	lsls	r2, r3, #5
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfae:	461a      	mov	r2, r3
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	6093      	str	r3, [r2, #8]
 800bfb4:	e098      	b.n	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f040 8093 	bne.w	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	4a4b      	ldr	r2, [pc, #300]	@ (800c0f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d90f      	bls.n	800bfea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	015a      	lsls	r2, r3, #5
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfe6:	6093      	str	r3, [r2, #8]
 800bfe8:	e07e      	b.n	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	4613      	mov	r3, r2
 800bfee:	00db      	lsls	r3, r3, #3
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	4413      	add	r3, r2
 800bffc:	3304      	adds	r3, #4
 800bffe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6a1a      	ldr	r2, [r3, #32]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	0159      	lsls	r1, r3, #5
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	440b      	add	r3, r1
 800c00c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c016:	1ad2      	subs	r2, r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d114      	bne.n	800c04c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d109      	bne.n	800c03e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c034:	461a      	mov	r2, r3
 800c036:	2101      	movs	r1, #1
 800c038:	f007 f8e6 	bl	8013208 <USB_EP0_OutStart>
 800c03c:	e006      	b.n	800c04c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	68da      	ldr	r2, [r3, #12]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	441a      	add	r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	4619      	mov	r1, r3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f009 fc02 	bl	801585c <HAL_PCD_DataOutStageCallback>
 800c058:	e046      	b.n	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	4a26      	ldr	r2, [pc, #152]	@ (800c0f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d124      	bne.n	800c0ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00a      	beq.n	800c082 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	4413      	add	r3, r2
 800c074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c078:	461a      	mov	r2, r3
 800c07a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c07e:	6093      	str	r3, [r2, #8]
 800c080:	e032      	b.n	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f003 0320 	and.w	r3, r3, #32
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d008      	beq.n	800c09e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	4413      	add	r3, r2
 800c094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c098:	461a      	mov	r2, r3
 800c09a:	2320      	movs	r3, #32
 800c09c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f009 fbd9 	bl	801585c <HAL_PCD_DataOutStageCallback>
 800c0aa:	e01d      	b.n	800c0e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d114      	bne.n	800c0dc <PCD_EP_OutXfrComplete_int+0x1b0>
 800c0b2:	6879      	ldr	r1, [r7, #4]
 800c0b4:	683a      	ldr	r2, [r7, #0]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	440b      	add	r3, r1
 800c0c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d108      	bne.n	800c0dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6818      	ldr	r0, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	f007 f896 	bl	8013208 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f009 fbba 	bl	801585c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3720      	adds	r7, #32
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	4f54300a 	.word	0x4f54300a
 800c0f8:	4f54310a 	.word	0x4f54310a

0800c0fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	333c      	adds	r3, #60	@ 0x3c
 800c114:	3304      	adds	r3, #4
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	4413      	add	r3, r2
 800c122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	4a15      	ldr	r2, [pc, #84]	@ (800c184 <PCD_EP_OutSetupPacket_int+0x88>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d90e      	bls.n	800c150 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d009      	beq.n	800c150 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	015a      	lsls	r2, r3, #5
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	4413      	add	r3, r2
 800c144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c148:	461a      	mov	r2, r3
 800c14a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c14e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f009 fb71 	bl	8015838 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	4a0a      	ldr	r2, [pc, #40]	@ (800c184 <PCD_EP_OutSetupPacket_int+0x88>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d90c      	bls.n	800c178 <PCD_EP_OutSetupPacket_int+0x7c>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	799b      	ldrb	r3, [r3, #6]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d108      	bne.n	800c178 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c170:	461a      	mov	r2, r3
 800c172:	2101      	movs	r1, #1
 800c174:	f007 f848 	bl	8013208 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3718      	adds	r7, #24
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	4f54300a 	.word	0x4f54300a

0800c188 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	460b      	mov	r3, r1
 800c192:	70fb      	strb	r3, [r7, #3]
 800c194:	4613      	mov	r3, r2
 800c196:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c19e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d107      	bne.n	800c1b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c1a6:	883b      	ldrh	r3, [r7, #0]
 800c1a8:	0419      	lsls	r1, r3, #16
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	430a      	orrs	r2, r1
 800c1b2:	629a      	str	r2, [r3, #40]	@ 0x28
 800c1b4:	e028      	b.n	800c208 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1bc:	0c1b      	lsrs	r3, r3, #16
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73fb      	strb	r3, [r7, #15]
 800c1c8:	e00d      	b.n	800c1e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	3340      	adds	r3, #64	@ 0x40
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	0c1b      	lsrs	r3, r3, #16
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	4413      	add	r3, r2
 800c1de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	73fb      	strb	r3, [r7, #15]
 800c1e6:	7bfa      	ldrb	r2, [r7, #15]
 800c1e8:	78fb      	ldrb	r3, [r7, #3]
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d3ec      	bcc.n	800c1ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c1f0:	883b      	ldrh	r3, [r7, #0]
 800c1f2:	0418      	lsls	r0, r3, #16
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6819      	ldr	r1, [r3, #0]
 800c1f8:	78fb      	ldrb	r3, [r7, #3]
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	4302      	orrs	r2, r0
 800c200:	3340      	adds	r3, #64	@ 0x40
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	440b      	add	r3, r1
 800c206:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3714      	adds	r7, #20
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c216:	b480      	push	{r7}
 800c218:	b083      	sub	sp, #12
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	460b      	mov	r3, r1
 800c220:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	887a      	ldrh	r2, [r7, #2]
 800c228:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c266:	4b05      	ldr	r3, [pc, #20]	@ (800c27c <HAL_PCDEx_ActivateLPM+0x44>)
 800c268:	4313      	orrs	r3, r2
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	10000003 	.word	0x10000003

0800c280 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	460b      	mov	r3, r1
 800c28a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c2a0:	4b19      	ldr	r3, [pc, #100]	@ (800c308 <HAL_PWREx_ConfigSupply+0x70>)
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	f003 0304 	and.w	r3, r3, #4
 800c2a8:	2b04      	cmp	r3, #4
 800c2aa:	d00a      	beq.n	800c2c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c2ac:	4b16      	ldr	r3, [pc, #88]	@ (800c308 <HAL_PWREx_ConfigSupply+0x70>)
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	f003 0307 	and.w	r3, r3, #7
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d001      	beq.n	800c2be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e01f      	b.n	800c2fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e01d      	b.n	800c2fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c2c2:	4b11      	ldr	r3, [pc, #68]	@ (800c308 <HAL_PWREx_ConfigSupply+0x70>)
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	f023 0207 	bic.w	r2, r3, #7
 800c2ca:	490f      	ldr	r1, [pc, #60]	@ (800c308 <HAL_PWREx_ConfigSupply+0x70>)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c2d2:	f7f5 fd59 	bl	8001d88 <HAL_GetTick>
 800c2d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c2d8:	e009      	b.n	800c2ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c2da:	f7f5 fd55 	bl	8001d88 <HAL_GetTick>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c2e8:	d901      	bls.n	800c2ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e007      	b.n	800c2fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c2ee:	4b06      	ldr	r3, [pc, #24]	@ (800c308 <HAL_PWREx_ConfigSupply+0x70>)
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c2f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2fa:	d1ee      	bne.n	800c2da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	58024800 	.word	0x58024800

0800c30c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c30c:	b480      	push	{r7}
 800c30e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c310:	4b05      	ldr	r3, [pc, #20]	@ (800c328 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	4a04      	ldr	r2, [pc, #16]	@ (800c328 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c31a:	60d3      	str	r3, [r2, #12]
}
 800c31c:	bf00      	nop
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	58024800 	.word	0x58024800

0800c32c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08c      	sub	sp, #48	@ 0x30
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d102      	bne.n	800c340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	f000 bc48 	b.w	800cbd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f000 8088 	beq.w	800c45e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c34e:	4b99      	ldr	r3, [pc, #612]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c358:	4b96      	ldr	r3, [pc, #600]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c35c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c360:	2b10      	cmp	r3, #16
 800c362:	d007      	beq.n	800c374 <HAL_RCC_OscConfig+0x48>
 800c364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c366:	2b18      	cmp	r3, #24
 800c368:	d111      	bne.n	800c38e <HAL_RCC_OscConfig+0x62>
 800c36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36c:	f003 0303 	and.w	r3, r3, #3
 800c370:	2b02      	cmp	r3, #2
 800c372:	d10c      	bne.n	800c38e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c374:	4b8f      	ldr	r3, [pc, #572]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d06d      	beq.n	800c45c <HAL_RCC_OscConfig+0x130>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d169      	bne.n	800c45c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	f000 bc21 	b.w	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c396:	d106      	bne.n	800c3a6 <HAL_RCC_OscConfig+0x7a>
 800c398:	4b86      	ldr	r3, [pc, #536]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a85      	ldr	r2, [pc, #532]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c39e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3a2:	6013      	str	r3, [r2, #0]
 800c3a4:	e02e      	b.n	800c404 <HAL_RCC_OscConfig+0xd8>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10c      	bne.n	800c3c8 <HAL_RCC_OscConfig+0x9c>
 800c3ae:	4b81      	ldr	r3, [pc, #516]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a80      	ldr	r2, [pc, #512]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c3b8:	6013      	str	r3, [r2, #0]
 800c3ba:	4b7e      	ldr	r3, [pc, #504]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a7d      	ldr	r2, [pc, #500]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	e01d      	b.n	800c404 <HAL_RCC_OscConfig+0xd8>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c3d0:	d10c      	bne.n	800c3ec <HAL_RCC_OscConfig+0xc0>
 800c3d2:	4b78      	ldr	r3, [pc, #480]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a77      	ldr	r2, [pc, #476]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	4b75      	ldr	r3, [pc, #468]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a74      	ldr	r2, [pc, #464]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	e00b      	b.n	800c404 <HAL_RCC_OscConfig+0xd8>
 800c3ec:	4b71      	ldr	r3, [pc, #452]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a70      	ldr	r2, [pc, #448]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	4b6e      	ldr	r3, [pc, #440]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a6d      	ldr	r2, [pc, #436]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c3fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d013      	beq.n	800c434 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c40c:	f7f5 fcbc 	bl	8001d88 <HAL_GetTick>
 800c410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c412:	e008      	b.n	800c426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c414:	f7f5 fcb8 	bl	8001d88 <HAL_GetTick>
 800c418:	4602      	mov	r2, r0
 800c41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	2b64      	cmp	r3, #100	@ 0x64
 800c420:	d901      	bls.n	800c426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c422:	2303      	movs	r3, #3
 800c424:	e3d4      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c426:	4b63      	ldr	r3, [pc, #396]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0f0      	beq.n	800c414 <HAL_RCC_OscConfig+0xe8>
 800c432:	e014      	b.n	800c45e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c434:	f7f5 fca8 	bl	8001d88 <HAL_GetTick>
 800c438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c43a:	e008      	b.n	800c44e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c43c:	f7f5 fca4 	bl	8001d88 <HAL_GetTick>
 800c440:	4602      	mov	r2, r0
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	2b64      	cmp	r3, #100	@ 0x64
 800c448:	d901      	bls.n	800c44e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c44a:	2303      	movs	r3, #3
 800c44c:	e3c0      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c44e:	4b59      	ldr	r3, [pc, #356]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1f0      	bne.n	800c43c <HAL_RCC_OscConfig+0x110>
 800c45a:	e000      	b.n	800c45e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c45c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 0302 	and.w	r3, r3, #2
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 80ca 	beq.w	800c600 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c46c:	4b51      	ldr	r3, [pc, #324]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c476:	4b4f      	ldr	r3, [pc, #316]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c47a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c47c:	6a3b      	ldr	r3, [r7, #32]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d007      	beq.n	800c492 <HAL_RCC_OscConfig+0x166>
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	2b18      	cmp	r3, #24
 800c486:	d156      	bne.n	800c536 <HAL_RCC_OscConfig+0x20a>
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	f003 0303 	and.w	r3, r3, #3
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d151      	bne.n	800c536 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c492:	4b48      	ldr	r3, [pc, #288]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 0304 	and.w	r3, r3, #4
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d005      	beq.n	800c4aa <HAL_RCC_OscConfig+0x17e>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e392      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c4aa:	4b42      	ldr	r3, [pc, #264]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f023 0219 	bic.w	r2, r3, #25
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	493f      	ldr	r1, [pc, #252]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4bc:	f7f5 fc64 	bl	8001d88 <HAL_GetTick>
 800c4c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4c2:	e008      	b.n	800c4d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4c4:	f7f5 fc60 	bl	8001d88 <HAL_GetTick>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d901      	bls.n	800c4d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c4d2:	2303      	movs	r3, #3
 800c4d4:	e37c      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4d6:	4b37      	ldr	r3, [pc, #220]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 0304 	and.w	r3, r3, #4
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d0f0      	beq.n	800c4c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4e2:	f7f5 fc81 	bl	8001de8 <HAL_GetREVID>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d817      	bhi.n	800c520 <HAL_RCC_OscConfig+0x1f4>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	2b40      	cmp	r3, #64	@ 0x40
 800c4f6:	d108      	bne.n	800c50a <HAL_RCC_OscConfig+0x1de>
 800c4f8:	4b2e      	ldr	r3, [pc, #184]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c500:	4a2c      	ldr	r2, [pc, #176]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c506:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c508:	e07a      	b.n	800c600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c50a:	4b2a      	ldr	r3, [pc, #168]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	031b      	lsls	r3, r3, #12
 800c518:	4926      	ldr	r1, [pc, #152]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c51e:	e06f      	b.n	800c600 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c520:	4b24      	ldr	r3, [pc, #144]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	061b      	lsls	r3, r3, #24
 800c52e:	4921      	ldr	r1, [pc, #132]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c530:	4313      	orrs	r3, r2
 800c532:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c534:	e064      	b.n	800c600 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d047      	beq.n	800c5ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c53e:	4b1d      	ldr	r3, [pc, #116]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f023 0219 	bic.w	r2, r3, #25
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	491a      	ldr	r1, [pc, #104]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c54c:	4313      	orrs	r3, r2
 800c54e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c550:	f7f5 fc1a 	bl	8001d88 <HAL_GetTick>
 800c554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c556:	e008      	b.n	800c56a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c558:	f7f5 fc16 	bl	8001d88 <HAL_GetTick>
 800c55c:	4602      	mov	r2, r0
 800c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	2b02      	cmp	r3, #2
 800c564:	d901      	bls.n	800c56a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	e332      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c56a:	4b12      	ldr	r3, [pc, #72]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 0304 	and.w	r3, r3, #4
 800c572:	2b00      	cmp	r3, #0
 800c574:	d0f0      	beq.n	800c558 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c576:	f7f5 fc37 	bl	8001de8 <HAL_GetREVID>
 800c57a:	4603      	mov	r3, r0
 800c57c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c580:	4293      	cmp	r3, r2
 800c582:	d819      	bhi.n	800c5b8 <HAL_RCC_OscConfig+0x28c>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	2b40      	cmp	r3, #64	@ 0x40
 800c58a:	d108      	bne.n	800c59e <HAL_RCC_OscConfig+0x272>
 800c58c:	4b09      	ldr	r3, [pc, #36]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800c594:	4a07      	ldr	r2, [pc, #28]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c59a:	6053      	str	r3, [r2, #4]
 800c59c:	e030      	b.n	800c600 <HAL_RCC_OscConfig+0x2d4>
 800c59e:	4b05      	ldr	r3, [pc, #20]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	031b      	lsls	r3, r3, #12
 800c5ac:	4901      	ldr	r1, [pc, #4]	@ (800c5b4 <HAL_RCC_OscConfig+0x288>)
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	604b      	str	r3, [r1, #4]
 800c5b2:	e025      	b.n	800c600 <HAL_RCC_OscConfig+0x2d4>
 800c5b4:	58024400 	.word	0x58024400
 800c5b8:	4b9a      	ldr	r3, [pc, #616]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	061b      	lsls	r3, r3, #24
 800c5c6:	4997      	ldr	r1, [pc, #604]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	604b      	str	r3, [r1, #4]
 800c5cc:	e018      	b.n	800c600 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5ce:	4b95      	ldr	r3, [pc, #596]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a94      	ldr	r2, [pc, #592]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c5d4:	f023 0301 	bic.w	r3, r3, #1
 800c5d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5da:	f7f5 fbd5 	bl	8001d88 <HAL_GetTick>
 800c5de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c5e0:	e008      	b.n	800c5f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5e2:	f7f5 fbd1 	bl	8001d88 <HAL_GetTick>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d901      	bls.n	800c5f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e2ed      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c5f4:	4b8b      	ldr	r3, [pc, #556]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 0304 	and.w	r3, r3, #4
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1f0      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f003 0310 	and.w	r3, r3, #16
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f000 80a9 	beq.w	800c760 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c60e:	4b85      	ldr	r3, [pc, #532]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c616:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c618:	4b82      	ldr	r3, [pc, #520]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	2b08      	cmp	r3, #8
 800c622:	d007      	beq.n	800c634 <HAL_RCC_OscConfig+0x308>
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	2b18      	cmp	r3, #24
 800c628:	d13a      	bne.n	800c6a0 <HAL_RCC_OscConfig+0x374>
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f003 0303 	and.w	r3, r3, #3
 800c630:	2b01      	cmp	r3, #1
 800c632:	d135      	bne.n	800c6a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c634:	4b7b      	ldr	r3, [pc, #492]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d005      	beq.n	800c64c <HAL_RCC_OscConfig+0x320>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	69db      	ldr	r3, [r3, #28]
 800c644:	2b80      	cmp	r3, #128	@ 0x80
 800c646:	d001      	beq.n	800c64c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e2c1      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c64c:	f7f5 fbcc 	bl	8001de8 <HAL_GetREVID>
 800c650:	4603      	mov	r3, r0
 800c652:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c656:	4293      	cmp	r3, r2
 800c658:	d817      	bhi.n	800c68a <HAL_RCC_OscConfig+0x35e>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	2b20      	cmp	r3, #32
 800c660:	d108      	bne.n	800c674 <HAL_RCC_OscConfig+0x348>
 800c662:	4b70      	ldr	r3, [pc, #448]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c66a:	4a6e      	ldr	r2, [pc, #440]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c66c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c670:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c672:	e075      	b.n	800c760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c674:	4b6b      	ldr	r3, [pc, #428]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a1b      	ldr	r3, [r3, #32]
 800c680:	069b      	lsls	r3, r3, #26
 800c682:	4968      	ldr	r1, [pc, #416]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c684:	4313      	orrs	r3, r2
 800c686:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c688:	e06a      	b.n	800c760 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c68a:	4b66      	ldr	r3, [pc, #408]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6a1b      	ldr	r3, [r3, #32]
 800c696:	061b      	lsls	r3, r3, #24
 800c698:	4962      	ldr	r1, [pc, #392]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c69a:	4313      	orrs	r3, r2
 800c69c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c69e:	e05f      	b.n	800c760 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d042      	beq.n	800c72e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c6a8:	4b5e      	ldr	r3, [pc, #376]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a5d      	ldr	r2, [pc, #372]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6b4:	f7f5 fb68 	bl	8001d88 <HAL_GetTick>
 800c6b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c6ba:	e008      	b.n	800c6ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c6bc:	f7f5 fb64 	bl	8001d88 <HAL_GetTick>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d901      	bls.n	800c6ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	e280      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c6ce:	4b55      	ldr	r3, [pc, #340]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0f0      	beq.n	800c6bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c6da:	f7f5 fb85 	bl	8001de8 <HAL_GetREVID>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d817      	bhi.n	800c718 <HAL_RCC_OscConfig+0x3ec>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a1b      	ldr	r3, [r3, #32]
 800c6ec:	2b20      	cmp	r3, #32
 800c6ee:	d108      	bne.n	800c702 <HAL_RCC_OscConfig+0x3d6>
 800c6f0:	4b4c      	ldr	r3, [pc, #304]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c6f8:	4a4a      	ldr	r2, [pc, #296]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c6fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c6fe:	6053      	str	r3, [r2, #4]
 800c700:	e02e      	b.n	800c760 <HAL_RCC_OscConfig+0x434>
 800c702:	4b48      	ldr	r3, [pc, #288]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	069b      	lsls	r3, r3, #26
 800c710:	4944      	ldr	r1, [pc, #272]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c712:	4313      	orrs	r3, r2
 800c714:	604b      	str	r3, [r1, #4]
 800c716:	e023      	b.n	800c760 <HAL_RCC_OscConfig+0x434>
 800c718:	4b42      	ldr	r3, [pc, #264]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a1b      	ldr	r3, [r3, #32]
 800c724:	061b      	lsls	r3, r3, #24
 800c726:	493f      	ldr	r1, [pc, #252]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c728:	4313      	orrs	r3, r2
 800c72a:	60cb      	str	r3, [r1, #12]
 800c72c:	e018      	b.n	800c760 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c72e:	4b3d      	ldr	r3, [pc, #244]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a3c      	ldr	r2, [pc, #240]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c734:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c73a:	f7f5 fb25 	bl	8001d88 <HAL_GetTick>
 800c73e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c740:	e008      	b.n	800c754 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c742:	f7f5 fb21 	bl	8001d88 <HAL_GetTick>
 800c746:	4602      	mov	r2, r0
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d901      	bls.n	800c754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e23d      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c754:	4b33      	ldr	r3, [pc, #204]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1f0      	bne.n	800c742 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 0308 	and.w	r3, r3, #8
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d036      	beq.n	800c7da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d019      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c774:	4b2b      	ldr	r3, [pc, #172]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c778:	4a2a      	ldr	r2, [pc, #168]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c77a:	f043 0301 	orr.w	r3, r3, #1
 800c77e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c780:	f7f5 fb02 	bl	8001d88 <HAL_GetTick>
 800c784:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c786:	e008      	b.n	800c79a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c788:	f7f5 fafe 	bl	8001d88 <HAL_GetTick>
 800c78c:	4602      	mov	r2, r0
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	1ad3      	subs	r3, r2, r3
 800c792:	2b02      	cmp	r3, #2
 800c794:	d901      	bls.n	800c79a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e21a      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c79a:	4b22      	ldr	r3, [pc, #136]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c79c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c79e:	f003 0302 	and.w	r3, r3, #2
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d0f0      	beq.n	800c788 <HAL_RCC_OscConfig+0x45c>
 800c7a6:	e018      	b.n	800c7da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7a8:	4b1e      	ldr	r3, [pc, #120]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ac:	4a1d      	ldr	r2, [pc, #116]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c7ae:	f023 0301 	bic.w	r3, r3, #1
 800c7b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7b4:	f7f5 fae8 	bl	8001d88 <HAL_GetTick>
 800c7b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c7ba:	e008      	b.n	800c7ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7bc:	f7f5 fae4 	bl	8001d88 <HAL_GetTick>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d901      	bls.n	800c7ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c7ca:	2303      	movs	r3, #3
 800c7cc:	e200      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c7ce:	4b15      	ldr	r3, [pc, #84]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c7d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7d2:	f003 0302 	and.w	r3, r3, #2
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1f0      	bne.n	800c7bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 0320 	and.w	r3, r3, #32
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d039      	beq.n	800c85a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d01c      	beq.n	800c828 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a0c      	ldr	r2, [pc, #48]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c7f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c7f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c7fa:	f7f5 fac5 	bl	8001d88 <HAL_GetTick>
 800c7fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c800:	e008      	b.n	800c814 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c802:	f7f5 fac1 	bl	8001d88 <HAL_GetTick>
 800c806:	4602      	mov	r2, r0
 800c808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	2b02      	cmp	r3, #2
 800c80e:	d901      	bls.n	800c814 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c810:	2303      	movs	r3, #3
 800c812:	e1dd      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c814:	4b03      	ldr	r3, [pc, #12]	@ (800c824 <HAL_RCC_OscConfig+0x4f8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d0f0      	beq.n	800c802 <HAL_RCC_OscConfig+0x4d6>
 800c820:	e01b      	b.n	800c85a <HAL_RCC_OscConfig+0x52e>
 800c822:	bf00      	nop
 800c824:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c828:	4b9b      	ldr	r3, [pc, #620]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a9a      	ldr	r2, [pc, #616]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c82e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c832:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c834:	f7f5 faa8 	bl	8001d88 <HAL_GetTick>
 800c838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c83a:	e008      	b.n	800c84e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c83c:	f7f5 faa4 	bl	8001d88 <HAL_GetTick>
 800c840:	4602      	mov	r2, r0
 800c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	2b02      	cmp	r3, #2
 800c848:	d901      	bls.n	800c84e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e1c0      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c84e:	4b92      	ldr	r3, [pc, #584]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1f0      	bne.n	800c83c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 8081 	beq.w	800c96a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c868:	4b8c      	ldr	r3, [pc, #560]	@ (800ca9c <HAL_RCC_OscConfig+0x770>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a8b      	ldr	r2, [pc, #556]	@ (800ca9c <HAL_RCC_OscConfig+0x770>)
 800c86e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c874:	f7f5 fa88 	bl	8001d88 <HAL_GetTick>
 800c878:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c87a:	e008      	b.n	800c88e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c87c:	f7f5 fa84 	bl	8001d88 <HAL_GetTick>
 800c880:	4602      	mov	r2, r0
 800c882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2b64      	cmp	r3, #100	@ 0x64
 800c888:	d901      	bls.n	800c88e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e1a0      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c88e:	4b83      	ldr	r3, [pc, #524]	@ (800ca9c <HAL_RCC_OscConfig+0x770>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0f0      	beq.n	800c87c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d106      	bne.n	800c8b0 <HAL_RCC_OscConfig+0x584>
 800c8a2:	4b7d      	ldr	r3, [pc, #500]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8a6:	4a7c      	ldr	r2, [pc, #496]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8a8:	f043 0301 	orr.w	r3, r3, #1
 800c8ac:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8ae:	e02d      	b.n	800c90c <HAL_RCC_OscConfig+0x5e0>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10c      	bne.n	800c8d2 <HAL_RCC_OscConfig+0x5a6>
 800c8b8:	4b77      	ldr	r3, [pc, #476]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8bc:	4a76      	ldr	r2, [pc, #472]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8be:	f023 0301 	bic.w	r3, r3, #1
 800c8c2:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8c4:	4b74      	ldr	r3, [pc, #464]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8c8:	4a73      	ldr	r2, [pc, #460]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8ca:	f023 0304 	bic.w	r3, r3, #4
 800c8ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8d0:	e01c      	b.n	800c90c <HAL_RCC_OscConfig+0x5e0>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	2b05      	cmp	r3, #5
 800c8d8:	d10c      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x5c8>
 800c8da:	4b6f      	ldr	r3, [pc, #444]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8de:	4a6e      	ldr	r2, [pc, #440]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8e0:	f043 0304 	orr.w	r3, r3, #4
 800c8e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8e6:	4b6c      	ldr	r3, [pc, #432]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8ea:	4a6b      	ldr	r2, [pc, #428]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8ec:	f043 0301 	orr.w	r3, r3, #1
 800c8f0:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8f2:	e00b      	b.n	800c90c <HAL_RCC_OscConfig+0x5e0>
 800c8f4:	4b68      	ldr	r3, [pc, #416]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8f8:	4a67      	ldr	r2, [pc, #412]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c8fa:	f023 0301 	bic.w	r3, r3, #1
 800c8fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800c900:	4b65      	ldr	r3, [pc, #404]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c904:	4a64      	ldr	r2, [pc, #400]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c906:	f023 0304 	bic.w	r3, r3, #4
 800c90a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d015      	beq.n	800c940 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c914:	f7f5 fa38 	bl	8001d88 <HAL_GetTick>
 800c918:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c91a:	e00a      	b.n	800c932 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c91c:	f7f5 fa34 	bl	8001d88 <HAL_GetTick>
 800c920:	4602      	mov	r2, r0
 800c922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d901      	bls.n	800c932 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c92e:	2303      	movs	r3, #3
 800c930:	e14e      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c932:	4b59      	ldr	r3, [pc, #356]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c936:	f003 0302 	and.w	r3, r3, #2
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d0ee      	beq.n	800c91c <HAL_RCC_OscConfig+0x5f0>
 800c93e:	e014      	b.n	800c96a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c940:	f7f5 fa22 	bl	8001d88 <HAL_GetTick>
 800c944:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c946:	e00a      	b.n	800c95e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c948:	f7f5 fa1e 	bl	8001d88 <HAL_GetTick>
 800c94c:	4602      	mov	r2, r0
 800c94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c956:	4293      	cmp	r3, r2
 800c958:	d901      	bls.n	800c95e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c95a:	2303      	movs	r3, #3
 800c95c:	e138      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c95e:	4b4e      	ldr	r3, [pc, #312]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c962:	f003 0302 	and.w	r3, r3, #2
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1ee      	bne.n	800c948 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 812d 	beq.w	800cbce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c974:	4b48      	ldr	r3, [pc, #288]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c97c:	2b18      	cmp	r3, #24
 800c97e:	f000 80bd 	beq.w	800cafc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c986:	2b02      	cmp	r3, #2
 800c988:	f040 809e 	bne.w	800cac8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c98c:	4b42      	ldr	r3, [pc, #264]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a41      	ldr	r2, [pc, #260]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c992:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c998:	f7f5 f9f6 	bl	8001d88 <HAL_GetTick>
 800c99c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c99e:	e008      	b.n	800c9b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9a0:	f7f5 f9f2 	bl	8001d88 <HAL_GetTick>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d901      	bls.n	800c9b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	e10e      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c9b2:	4b39      	ldr	r3, [pc, #228]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1f0      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c9be:	4b36      	ldr	r3, [pc, #216]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c9c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9c2:	4b37      	ldr	r3, [pc, #220]	@ (800caa0 <HAL_RCC_OscConfig+0x774>)
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c9ce:	0112      	lsls	r2, r2, #4
 800c9d0:	430a      	orrs	r2, r1
 800c9d2:	4931      	ldr	r1, [pc, #196]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	628b      	str	r3, [r1, #40]	@ 0x28
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	025b      	lsls	r3, r3, #9
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	431a      	orrs	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	041b      	lsls	r3, r3, #16
 800c9f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca00:	3b01      	subs	r3, #1
 800ca02:	061b      	lsls	r3, r3, #24
 800ca04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ca08:	4923      	ldr	r1, [pc, #140]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ca0e:	4b22      	ldr	r3, [pc, #136]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca12:	4a21      	ldr	r2, [pc, #132]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca14:	f023 0301 	bic.w	r3, r3, #1
 800ca18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ca1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca1e:	4b21      	ldr	r3, [pc, #132]	@ (800caa4 <HAL_RCC_OscConfig+0x778>)
 800ca20:	4013      	ands	r3, r2
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ca26:	00d2      	lsls	r2, r2, #3
 800ca28:	491b      	ldr	r1, [pc, #108]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ca2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca32:	f023 020c 	bic.w	r2, r3, #12
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca3a:	4917      	ldr	r1, [pc, #92]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ca40:	4b15      	ldr	r3, [pc, #84]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca44:	f023 0202 	bic.w	r2, r3, #2
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca4c:	4912      	ldr	r1, [pc, #72]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ca52:	4b11      	ldr	r3, [pc, #68]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca56:	4a10      	ldr	r2, [pc, #64]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca62:	4a0d      	ldr	r2, [pc, #52]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ca6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6e:	4a0a      	ldr	r2, [pc, #40]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ca74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ca76:	4b08      	ldr	r3, [pc, #32]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca7a:	4a07      	ldr	r2, [pc, #28]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca7c:	f043 0301 	orr.w	r3, r3, #1
 800ca80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca82:	4b05      	ldr	r3, [pc, #20]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a04      	ldr	r2, [pc, #16]	@ (800ca98 <HAL_RCC_OscConfig+0x76c>)
 800ca88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ca8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca8e:	f7f5 f97b 	bl	8001d88 <HAL_GetTick>
 800ca92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ca94:	e011      	b.n	800caba <HAL_RCC_OscConfig+0x78e>
 800ca96:	bf00      	nop
 800ca98:	58024400 	.word	0x58024400
 800ca9c:	58024800 	.word	0x58024800
 800caa0:	fffffc0c 	.word	0xfffffc0c
 800caa4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800caa8:	f7f5 f96e 	bl	8001d88 <HAL_GetTick>
 800caac:	4602      	mov	r2, r0
 800caae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	d901      	bls.n	800caba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800cab6:	2303      	movs	r3, #3
 800cab8:	e08a      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800caba:	4b47      	ldr	r3, [pc, #284]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d0f0      	beq.n	800caa8 <HAL_RCC_OscConfig+0x77c>
 800cac6:	e082      	b.n	800cbce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cac8:	4b43      	ldr	r3, [pc, #268]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a42      	ldr	r2, [pc, #264]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cad4:	f7f5 f958 	bl	8001d88 <HAL_GetTick>
 800cad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cada:	e008      	b.n	800caee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cadc:	f7f5 f954 	bl	8001d88 <HAL_GetTick>
 800cae0:	4602      	mov	r2, r0
 800cae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d901      	bls.n	800caee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800caea:	2303      	movs	r3, #3
 800caec:	e070      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800caee:	4b3a      	ldr	r3, [pc, #232]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1f0      	bne.n	800cadc <HAL_RCC_OscConfig+0x7b0>
 800cafa:	e068      	b.n	800cbce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cafc:	4b36      	ldr	r3, [pc, #216]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cb02:	4b35      	ldr	r3, [pc, #212]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d031      	beq.n	800cb74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	f003 0203 	and.w	r2, r3, #3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d12a      	bne.n	800cb74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	091b      	lsrs	r3, r3, #4
 800cb22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d122      	bne.n	800cb74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d11a      	bne.n	800cb74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	0a5b      	lsrs	r3, r3, #9
 800cb42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d111      	bne.n	800cb74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	0c1b      	lsrs	r3, r3, #16
 800cb54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d108      	bne.n	800cb74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	0e1b      	lsrs	r3, r3, #24
 800cb66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d001      	beq.n	800cb78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e02b      	b.n	800cbd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800cb78:	4b17      	ldr	r3, [pc, #92]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cb7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb7c:	08db      	lsrs	r3, r3, #3
 800cb7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d01f      	beq.n	800cbce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800cb8e:	4b12      	ldr	r3, [pc, #72]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb92:	4a11      	ldr	r2, [pc, #68]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cb94:	f023 0301 	bic.w	r3, r3, #1
 800cb98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cb9a:	f7f5 f8f5 	bl	8001d88 <HAL_GetTick>
 800cb9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800cba0:	bf00      	nop
 800cba2:	f7f5 f8f1 	bl	8001d88 <HAL_GetTick>
 800cba6:	4602      	mov	r2, r0
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d0f9      	beq.n	800cba2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cbae:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cbb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbb2:	4b0a      	ldr	r3, [pc, #40]	@ (800cbdc <HAL_RCC_OscConfig+0x8b0>)
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cbba:	00d2      	lsls	r2, r2, #3
 800cbbc:	4906      	ldr	r1, [pc, #24]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800cbc2:	4b05      	ldr	r3, [pc, #20]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbc6:	4a04      	ldr	r2, [pc, #16]	@ (800cbd8 <HAL_RCC_OscConfig+0x8ac>)
 800cbc8:	f043 0301 	orr.w	r3, r3, #1
 800cbcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800cbce:	2300      	movs	r3, #0
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3730      	adds	r7, #48	@ 0x30
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	58024400 	.word	0x58024400
 800cbdc:	ffff0007 	.word	0xffff0007

0800cbe0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e19c      	b.n	800cf2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cbf4:	4b8a      	ldr	r3, [pc, #552]	@ (800ce20 <HAL_RCC_ClockConfig+0x240>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 030f 	and.w	r3, r3, #15
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d910      	bls.n	800cc24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc02:	4b87      	ldr	r3, [pc, #540]	@ (800ce20 <HAL_RCC_ClockConfig+0x240>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f023 020f 	bic.w	r2, r3, #15
 800cc0a:	4985      	ldr	r1, [pc, #532]	@ (800ce20 <HAL_RCC_ClockConfig+0x240>)
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc12:	4b83      	ldr	r3, [pc, #524]	@ (800ce20 <HAL_RCC_ClockConfig+0x240>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 030f 	and.w	r3, r3, #15
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d001      	beq.n	800cc24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e184      	b.n	800cf2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0304 	and.w	r3, r3, #4
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d010      	beq.n	800cc52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	691a      	ldr	r2, [r3, #16]
 800cc34:	4b7b      	ldr	r3, [pc, #492]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cc36:	699b      	ldr	r3, [r3, #24]
 800cc38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d908      	bls.n	800cc52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cc40:	4b78      	ldr	r3, [pc, #480]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	4975      	ldr	r1, [pc, #468]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 0308 	and.w	r3, r3, #8
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d010      	beq.n	800cc80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	695a      	ldr	r2, [r3, #20]
 800cc62:	4b70      	ldr	r3, [pc, #448]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d908      	bls.n	800cc80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cc6e:	4b6d      	ldr	r3, [pc, #436]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cc70:	69db      	ldr	r3, [r3, #28]
 800cc72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	695b      	ldr	r3, [r3, #20]
 800cc7a:	496a      	ldr	r1, [pc, #424]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 0310 	and.w	r3, r3, #16
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d010      	beq.n	800ccae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	699a      	ldr	r2, [r3, #24]
 800cc90:	4b64      	ldr	r3, [pc, #400]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cc92:	69db      	ldr	r3, [r3, #28]
 800cc94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d908      	bls.n	800ccae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cc9c:	4b61      	ldr	r3, [pc, #388]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cc9e:	69db      	ldr	r3, [r3, #28]
 800cca0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	495e      	ldr	r1, [pc, #376]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f003 0320 	and.w	r3, r3, #32
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d010      	beq.n	800ccdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	69da      	ldr	r2, [r3, #28]
 800ccbe:	4b59      	ldr	r3, [pc, #356]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800ccc0:	6a1b      	ldr	r3, [r3, #32]
 800ccc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d908      	bls.n	800ccdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ccca:	4b56      	ldr	r3, [pc, #344]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cccc:	6a1b      	ldr	r3, [r3, #32]
 800ccce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	69db      	ldr	r3, [r3, #28]
 800ccd6:	4953      	ldr	r1, [pc, #332]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0302 	and.w	r3, r3, #2
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d010      	beq.n	800cd0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68da      	ldr	r2, [r3, #12]
 800ccec:	4b4d      	ldr	r3, [pc, #308]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	f003 030f 	and.w	r3, r3, #15
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d908      	bls.n	800cd0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ccf8:	4b4a      	ldr	r3, [pc, #296]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	f023 020f 	bic.w	r2, r3, #15
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	4947      	ldr	r1, [pc, #284]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd06:	4313      	orrs	r3, r2
 800cd08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d055      	beq.n	800cdc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cd16:	4b43      	ldr	r3, [pc, #268]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd18:	699b      	ldr	r3, [r3, #24]
 800cd1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	4940      	ldr	r1, [pc, #256]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd24:	4313      	orrs	r3, r2
 800cd26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d107      	bne.n	800cd40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cd30:	4b3c      	ldr	r3, [pc, #240]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d121      	bne.n	800cd80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e0f6      	b.n	800cf2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d107      	bne.n	800cd58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cd48:	4b36      	ldr	r3, [pc, #216]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d115      	bne.n	800cd80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e0ea      	b.n	800cf2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d107      	bne.n	800cd70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cd60:	4b30      	ldr	r3, [pc, #192]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d109      	bne.n	800cd80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e0de      	b.n	800cf2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd70:	4b2c      	ldr	r3, [pc, #176]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 0304 	and.w	r3, r3, #4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e0d6      	b.n	800cf2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cd80:	4b28      	ldr	r3, [pc, #160]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	f023 0207 	bic.w	r2, r3, #7
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	4925      	ldr	r1, [pc, #148]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd92:	f7f4 fff9 	bl	8001d88 <HAL_GetTick>
 800cd96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd98:	e00a      	b.n	800cdb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd9a:	f7f4 fff5 	bl	8001d88 <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d901      	bls.n	800cdb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e0be      	b.n	800cf2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cdb0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d1eb      	bne.n	800cd9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f003 0302 	and.w	r3, r3, #2
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d010      	beq.n	800cdf0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	68da      	ldr	r2, [r3, #12]
 800cdd2:	4b14      	ldr	r3, [pc, #80]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	f003 030f 	and.w	r3, r3, #15
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d208      	bcs.n	800cdf0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cdde:	4b11      	ldr	r3, [pc, #68]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	f023 020f 	bic.w	r2, r3, #15
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	490e      	ldr	r1, [pc, #56]	@ (800ce24 <HAL_RCC_ClockConfig+0x244>)
 800cdec:	4313      	orrs	r3, r2
 800cdee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cdf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ce20 <HAL_RCC_ClockConfig+0x240>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 030f 	and.w	r3, r3, #15
 800cdf8:	683a      	ldr	r2, [r7, #0]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d214      	bcs.n	800ce28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdfe:	4b08      	ldr	r3, [pc, #32]	@ (800ce20 <HAL_RCC_ClockConfig+0x240>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f023 020f 	bic.w	r2, r3, #15
 800ce06:	4906      	ldr	r1, [pc, #24]	@ (800ce20 <HAL_RCC_ClockConfig+0x240>)
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce0e:	4b04      	ldr	r3, [pc, #16]	@ (800ce20 <HAL_RCC_ClockConfig+0x240>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f003 030f 	and.w	r3, r3, #15
 800ce16:	683a      	ldr	r2, [r7, #0]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d005      	beq.n	800ce28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e086      	b.n	800cf2e <HAL_RCC_ClockConfig+0x34e>
 800ce20:	52002000 	.word	0x52002000
 800ce24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f003 0304 	and.w	r3, r3, #4
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d010      	beq.n	800ce56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	691a      	ldr	r2, [r3, #16]
 800ce38:	4b3f      	ldr	r3, [pc, #252]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ce3a:	699b      	ldr	r3, [r3, #24]
 800ce3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d208      	bcs.n	800ce56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ce44:	4b3c      	ldr	r3, [pc, #240]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	691b      	ldr	r3, [r3, #16]
 800ce50:	4939      	ldr	r1, [pc, #228]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ce52:	4313      	orrs	r3, r2
 800ce54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f003 0308 	and.w	r3, r3, #8
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d010      	beq.n	800ce84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	695a      	ldr	r2, [r3, #20]
 800ce66:	4b34      	ldr	r3, [pc, #208]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ce68:	69db      	ldr	r3, [r3, #28]
 800ce6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d208      	bcs.n	800ce84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ce72:	4b31      	ldr	r3, [pc, #196]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ce74:	69db      	ldr	r3, [r3, #28]
 800ce76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	695b      	ldr	r3, [r3, #20]
 800ce7e:	492e      	ldr	r1, [pc, #184]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ce80:	4313      	orrs	r3, r2
 800ce82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 0310 	and.w	r3, r3, #16
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d010      	beq.n	800ceb2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	699a      	ldr	r2, [r3, #24]
 800ce94:	4b28      	ldr	r3, [pc, #160]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d208      	bcs.n	800ceb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cea0:	4b25      	ldr	r3, [pc, #148]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800cea2:	69db      	ldr	r3, [r3, #28]
 800cea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	699b      	ldr	r3, [r3, #24]
 800ceac:	4922      	ldr	r1, [pc, #136]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0320 	and.w	r3, r3, #32
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d010      	beq.n	800cee0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	69da      	ldr	r2, [r3, #28]
 800cec2:	4b1d      	ldr	r3, [pc, #116]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d208      	bcs.n	800cee0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800cece:	4b1a      	ldr	r3, [pc, #104]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800ced0:	6a1b      	ldr	r3, [r3, #32]
 800ced2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	69db      	ldr	r3, [r3, #28]
 800ceda:	4917      	ldr	r1, [pc, #92]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800cedc:	4313      	orrs	r3, r2
 800cede:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800cee0:	f000 f834 	bl	800cf4c <HAL_RCC_GetSysClockFreq>
 800cee4:	4602      	mov	r2, r0
 800cee6:	4b14      	ldr	r3, [pc, #80]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	0a1b      	lsrs	r3, r3, #8
 800ceec:	f003 030f 	and.w	r3, r3, #15
 800cef0:	4912      	ldr	r1, [pc, #72]	@ (800cf3c <HAL_RCC_ClockConfig+0x35c>)
 800cef2:	5ccb      	ldrb	r3, [r1, r3]
 800cef4:	f003 031f 	and.w	r3, r3, #31
 800cef8:	fa22 f303 	lsr.w	r3, r2, r3
 800cefc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cefe:	4b0e      	ldr	r3, [pc, #56]	@ (800cf38 <HAL_RCC_ClockConfig+0x358>)
 800cf00:	699b      	ldr	r3, [r3, #24]
 800cf02:	f003 030f 	and.w	r3, r3, #15
 800cf06:	4a0d      	ldr	r2, [pc, #52]	@ (800cf3c <HAL_RCC_ClockConfig+0x35c>)
 800cf08:	5cd3      	ldrb	r3, [r2, r3]
 800cf0a:	f003 031f 	and.w	r3, r3, #31
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	fa22 f303 	lsr.w	r3, r2, r3
 800cf14:	4a0a      	ldr	r2, [pc, #40]	@ (800cf40 <HAL_RCC_ClockConfig+0x360>)
 800cf16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cf18:	4a0a      	ldr	r2, [pc, #40]	@ (800cf44 <HAL_RCC_ClockConfig+0x364>)
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800cf1e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf48 <HAL_RCC_ClockConfig+0x368>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7f4 fee6 	bl	8001cf4 <HAL_InitTick>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3718      	adds	r7, #24
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	58024400 	.word	0x58024400
 800cf3c:	080167c8 	.word	0x080167c8
 800cf40:	24000004 	.word	0x24000004
 800cf44:	24000000 	.word	0x24000000
 800cf48:	24000008 	.word	0x24000008

0800cf4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b089      	sub	sp, #36	@ 0x24
 800cf50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cf52:	4bb3      	ldr	r3, [pc, #716]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf5a:	2b18      	cmp	r3, #24
 800cf5c:	f200 8155 	bhi.w	800d20a <HAL_RCC_GetSysClockFreq+0x2be>
 800cf60:	a201      	add	r2, pc, #4	@ (adr r2, 800cf68 <HAL_RCC_GetSysClockFreq+0x1c>)
 800cf62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf66:	bf00      	nop
 800cf68:	0800cfcd 	.word	0x0800cfcd
 800cf6c:	0800d20b 	.word	0x0800d20b
 800cf70:	0800d20b 	.word	0x0800d20b
 800cf74:	0800d20b 	.word	0x0800d20b
 800cf78:	0800d20b 	.word	0x0800d20b
 800cf7c:	0800d20b 	.word	0x0800d20b
 800cf80:	0800d20b 	.word	0x0800d20b
 800cf84:	0800d20b 	.word	0x0800d20b
 800cf88:	0800cff3 	.word	0x0800cff3
 800cf8c:	0800d20b 	.word	0x0800d20b
 800cf90:	0800d20b 	.word	0x0800d20b
 800cf94:	0800d20b 	.word	0x0800d20b
 800cf98:	0800d20b 	.word	0x0800d20b
 800cf9c:	0800d20b 	.word	0x0800d20b
 800cfa0:	0800d20b 	.word	0x0800d20b
 800cfa4:	0800d20b 	.word	0x0800d20b
 800cfa8:	0800cff9 	.word	0x0800cff9
 800cfac:	0800d20b 	.word	0x0800d20b
 800cfb0:	0800d20b 	.word	0x0800d20b
 800cfb4:	0800d20b 	.word	0x0800d20b
 800cfb8:	0800d20b 	.word	0x0800d20b
 800cfbc:	0800d20b 	.word	0x0800d20b
 800cfc0:	0800d20b 	.word	0x0800d20b
 800cfc4:	0800d20b 	.word	0x0800d20b
 800cfc8:	0800cfff 	.word	0x0800cfff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfcc:	4b94      	ldr	r3, [pc, #592]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 0320 	and.w	r3, r3, #32
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d009      	beq.n	800cfec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfd8:	4b91      	ldr	r3, [pc, #580]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	08db      	lsrs	r3, r3, #3
 800cfde:	f003 0303 	and.w	r3, r3, #3
 800cfe2:	4a90      	ldr	r2, [pc, #576]	@ (800d224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cfe4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800cfea:	e111      	b.n	800d210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800cfec:	4b8d      	ldr	r3, [pc, #564]	@ (800d224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cfee:	61bb      	str	r3, [r7, #24]
      break;
 800cff0:	e10e      	b.n	800d210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800cff2:	4b8d      	ldr	r3, [pc, #564]	@ (800d228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cff4:	61bb      	str	r3, [r7, #24]
      break;
 800cff6:	e10b      	b.n	800d210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800cff8:	4b8c      	ldr	r3, [pc, #560]	@ (800d22c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800cffa:	61bb      	str	r3, [r7, #24]
      break;
 800cffc:	e108      	b.n	800d210 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cffe:	4b88      	ldr	r3, [pc, #544]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d002:	f003 0303 	and.w	r3, r3, #3
 800d006:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d008:	4b85      	ldr	r3, [pc, #532]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d00c:	091b      	lsrs	r3, r3, #4
 800d00e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d012:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d014:	4b82      	ldr	r3, [pc, #520]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d018:	f003 0301 	and.w	r3, r3, #1
 800d01c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d01e:	4b80      	ldr	r3, [pc, #512]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d022:	08db      	lsrs	r3, r3, #3
 800d024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	fb02 f303 	mul.w	r3, r2, r3
 800d02e:	ee07 3a90 	vmov	s15, r3
 800d032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d036:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 80e1 	beq.w	800d204 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	2b02      	cmp	r3, #2
 800d046:	f000 8083 	beq.w	800d150 <HAL_RCC_GetSysClockFreq+0x204>
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	f200 80a1 	bhi.w	800d194 <HAL_RCC_GetSysClockFreq+0x248>
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d003      	beq.n	800d060 <HAL_RCC_GetSysClockFreq+0x114>
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d056      	beq.n	800d10c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d05e:	e099      	b.n	800d194 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d060:	4b6f      	ldr	r3, [pc, #444]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 0320 	and.w	r3, r3, #32
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d02d      	beq.n	800d0c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d06c:	4b6c      	ldr	r3, [pc, #432]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	08db      	lsrs	r3, r3, #3
 800d072:	f003 0303 	and.w	r3, r3, #3
 800d076:	4a6b      	ldr	r2, [pc, #428]	@ (800d224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d078:	fa22 f303 	lsr.w	r3, r2, r3
 800d07c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	ee07 3a90 	vmov	s15, r3
 800d084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	ee07 3a90 	vmov	s15, r3
 800d08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d096:	4b62      	ldr	r3, [pc, #392]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09e:	ee07 3a90 	vmov	s15, r3
 800d0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d0aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d0ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d0c6:	e087      	b.n	800d1d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d234 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d0d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0da:	4b51      	ldr	r3, [pc, #324]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e2:	ee07 3a90 	vmov	s15, r3
 800d0e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800d0ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d0f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d102:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d10a:	e065      	b.n	800d1d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	ee07 3a90 	vmov	s15, r3
 800d112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d116:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d238 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d11e:	4b40      	ldr	r3, [pc, #256]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d126:	ee07 3a90 	vmov	s15, r3
 800d12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d12e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d132:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d13e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d14a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d14e:	e043      	b.n	800d1d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	ee07 3a90 	vmov	s15, r3
 800d156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d23c <HAL_RCC_GetSysClockFreq+0x2f0>
 800d15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d162:	4b2f      	ldr	r3, [pc, #188]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d16a:	ee07 3a90 	vmov	s15, r3
 800d16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d172:	ed97 6a02 	vldr	s12, [r7, #8]
 800d176:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d18e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d192:	e021      	b.n	800d1d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	ee07 3a90 	vmov	s15, r3
 800d19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d238 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ae:	ee07 3a90 	vmov	s15, r3
 800d1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d1ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d1d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d1d8:	4b11      	ldr	r3, [pc, #68]	@ (800d220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1dc:	0a5b      	lsrs	r3, r3, #9
 800d1de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	ee07 3a90 	vmov	s15, r3
 800d1ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d1f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1fc:	ee17 3a90 	vmov	r3, s15
 800d200:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d202:	e005      	b.n	800d210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d204:	2300      	movs	r3, #0
 800d206:	61bb      	str	r3, [r7, #24]
      break;
 800d208:	e002      	b.n	800d210 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d20a:	4b07      	ldr	r3, [pc, #28]	@ (800d228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d20c:	61bb      	str	r3, [r7, #24]
      break;
 800d20e:	bf00      	nop
  }

  return sysclockfreq;
 800d210:	69bb      	ldr	r3, [r7, #24]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3724      	adds	r7, #36	@ 0x24
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	58024400 	.word	0x58024400
 800d224:	03d09000 	.word	0x03d09000
 800d228:	003d0900 	.word	0x003d0900
 800d22c:	017d7840 	.word	0x017d7840
 800d230:	46000000 	.word	0x46000000
 800d234:	4c742400 	.word	0x4c742400
 800d238:	4a742400 	.word	0x4a742400
 800d23c:	4bbebc20 	.word	0x4bbebc20

0800d240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d246:	f7ff fe81 	bl	800cf4c <HAL_RCC_GetSysClockFreq>
 800d24a:	4602      	mov	r2, r0
 800d24c:	4b10      	ldr	r3, [pc, #64]	@ (800d290 <HAL_RCC_GetHCLKFreq+0x50>)
 800d24e:	699b      	ldr	r3, [r3, #24]
 800d250:	0a1b      	lsrs	r3, r3, #8
 800d252:	f003 030f 	and.w	r3, r3, #15
 800d256:	490f      	ldr	r1, [pc, #60]	@ (800d294 <HAL_RCC_GetHCLKFreq+0x54>)
 800d258:	5ccb      	ldrb	r3, [r1, r3]
 800d25a:	f003 031f 	and.w	r3, r3, #31
 800d25e:	fa22 f303 	lsr.w	r3, r2, r3
 800d262:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d264:	4b0a      	ldr	r3, [pc, #40]	@ (800d290 <HAL_RCC_GetHCLKFreq+0x50>)
 800d266:	699b      	ldr	r3, [r3, #24]
 800d268:	f003 030f 	and.w	r3, r3, #15
 800d26c:	4a09      	ldr	r2, [pc, #36]	@ (800d294 <HAL_RCC_GetHCLKFreq+0x54>)
 800d26e:	5cd3      	ldrb	r3, [r2, r3]
 800d270:	f003 031f 	and.w	r3, r3, #31
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	fa22 f303 	lsr.w	r3, r2, r3
 800d27a:	4a07      	ldr	r2, [pc, #28]	@ (800d298 <HAL_RCC_GetHCLKFreq+0x58>)
 800d27c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d27e:	4a07      	ldr	r2, [pc, #28]	@ (800d29c <HAL_RCC_GetHCLKFreq+0x5c>)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d284:	4b04      	ldr	r3, [pc, #16]	@ (800d298 <HAL_RCC_GetHCLKFreq+0x58>)
 800d286:	681b      	ldr	r3, [r3, #0]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	58024400 	.word	0x58024400
 800d294:	080167c8 	.word	0x080167c8
 800d298:	24000004 	.word	0x24000004
 800d29c:	24000000 	.word	0x24000000

0800d2a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d2a4:	f7ff ffcc 	bl	800d240 <HAL_RCC_GetHCLKFreq>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	4b06      	ldr	r3, [pc, #24]	@ (800d2c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d2ac:	69db      	ldr	r3, [r3, #28]
 800d2ae:	091b      	lsrs	r3, r3, #4
 800d2b0:	f003 0307 	and.w	r3, r3, #7
 800d2b4:	4904      	ldr	r1, [pc, #16]	@ (800d2c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d2b6:	5ccb      	ldrb	r3, [r1, r3]
 800d2b8:	f003 031f 	and.w	r3, r3, #31
 800d2bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	58024400 	.word	0x58024400
 800d2c8:	080167c8 	.word	0x080167c8

0800d2cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d2d0:	f7ff ffb6 	bl	800d240 <HAL_RCC_GetHCLKFreq>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	4b06      	ldr	r3, [pc, #24]	@ (800d2f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	0a1b      	lsrs	r3, r3, #8
 800d2dc:	f003 0307 	and.w	r3, r3, #7
 800d2e0:	4904      	ldr	r1, [pc, #16]	@ (800d2f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d2e2:	5ccb      	ldrb	r3, [r1, r3]
 800d2e4:	f003 031f 	and.w	r3, r3, #31
 800d2e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	58024400 	.word	0x58024400
 800d2f4:	080167c8 	.word	0x080167c8

0800d2f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d2f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2fc:	b0ca      	sub	sp, #296	@ 0x128
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d304:	2300      	movs	r3, #0
 800d306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d30a:	2300      	movs	r3, #0
 800d30c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d318:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d31c:	2500      	movs	r5, #0
 800d31e:	ea54 0305 	orrs.w	r3, r4, r5
 800d322:	d049      	beq.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d32a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d32e:	d02f      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d330:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d334:	d828      	bhi.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d336:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d33a:	d01a      	beq.n	800d372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d33c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d340:	d822      	bhi.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d342:	2b00      	cmp	r3, #0
 800d344:	d003      	beq.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d34a:	d007      	beq.n	800d35c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d34c:	e01c      	b.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d34e:	4bb8      	ldr	r3, [pc, #736]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d352:	4ab7      	ldr	r2, [pc, #732]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d35a:	e01a      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d360:	3308      	adds	r3, #8
 800d362:	2102      	movs	r1, #2
 800d364:	4618      	mov	r0, r3
 800d366:	f002 fb61 	bl	800fa2c <RCCEx_PLL2_Config>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d370:	e00f      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d376:	3328      	adds	r3, #40	@ 0x28
 800d378:	2102      	movs	r1, #2
 800d37a:	4618      	mov	r0, r3
 800d37c:	f002 fc08 	bl	800fb90 <RCCEx_PLL3_Config>
 800d380:	4603      	mov	r3, r0
 800d382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d386:	e004      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d388:	2301      	movs	r3, #1
 800d38a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d38e:	e000      	b.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d390:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10a      	bne.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d39a:	4ba5      	ldr	r3, [pc, #660]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d39c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d39e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3a8:	4aa1      	ldr	r2, [pc, #644]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3aa:	430b      	orrs	r3, r1
 800d3ac:	6513      	str	r3, [r2, #80]	@ 0x50
 800d3ae:	e003      	b.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d3c4:	f04f 0900 	mov.w	r9, #0
 800d3c8:	ea58 0309 	orrs.w	r3, r8, r9
 800d3cc:	d047      	beq.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3d4:	2b04      	cmp	r3, #4
 800d3d6:	d82a      	bhi.n	800d42e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d3d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3de:	bf00      	nop
 800d3e0:	0800d3f5 	.word	0x0800d3f5
 800d3e4:	0800d403 	.word	0x0800d403
 800d3e8:	0800d419 	.word	0x0800d419
 800d3ec:	0800d437 	.word	0x0800d437
 800d3f0:	0800d437 	.word	0x0800d437
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d3f4:	4b8e      	ldr	r3, [pc, #568]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f8:	4a8d      	ldr	r2, [pc, #564]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d3fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d3fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d400:	e01a      	b.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d406:	3308      	adds	r3, #8
 800d408:	2100      	movs	r1, #0
 800d40a:	4618      	mov	r0, r3
 800d40c:	f002 fb0e 	bl	800fa2c <RCCEx_PLL2_Config>
 800d410:	4603      	mov	r3, r0
 800d412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d416:	e00f      	b.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d41c:	3328      	adds	r3, #40	@ 0x28
 800d41e:	2100      	movs	r1, #0
 800d420:	4618      	mov	r0, r3
 800d422:	f002 fbb5 	bl	800fb90 <RCCEx_PLL3_Config>
 800d426:	4603      	mov	r3, r0
 800d428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d42c:	e004      	b.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d434:	e000      	b.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d436:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10a      	bne.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d440:	4b7b      	ldr	r3, [pc, #492]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d444:	f023 0107 	bic.w	r1, r3, #7
 800d448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d44e:	4a78      	ldr	r2, [pc, #480]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d450:	430b      	orrs	r3, r1
 800d452:	6513      	str	r3, [r2, #80]	@ 0x50
 800d454:	e003      	b.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d45a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800d46a:	f04f 0b00 	mov.w	fp, #0
 800d46e:	ea5a 030b 	orrs.w	r3, sl, fp
 800d472:	d04c      	beq.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d47a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d47e:	d030      	beq.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d484:	d829      	bhi.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d486:	2bc0      	cmp	r3, #192	@ 0xc0
 800d488:	d02d      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d48a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d48c:	d825      	bhi.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d48e:	2b80      	cmp	r3, #128	@ 0x80
 800d490:	d018      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d492:	2b80      	cmp	r3, #128	@ 0x80
 800d494:	d821      	bhi.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d49a:	2b40      	cmp	r3, #64	@ 0x40
 800d49c:	d007      	beq.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d49e:	e01c      	b.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4a0:	4b63      	ldr	r3, [pc, #396]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a4:	4a62      	ldr	r2, [pc, #392]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d4a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d4ac:	e01c      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4b2:	3308      	adds	r3, #8
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f002 fab8 	bl	800fa2c <RCCEx_PLL2_Config>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d4c2:	e011      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4c8:	3328      	adds	r3, #40	@ 0x28
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f002 fb5f 	bl	800fb90 <RCCEx_PLL3_Config>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d4d8:	e006      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d4e0:	e002      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d4e2:	bf00      	nop
 800d4e4:	e000      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d4e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d4f0:	4b4f      	ldr	r3, [pc, #316]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d4f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4f4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800d4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4fe:	4a4c      	ldr	r2, [pc, #304]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d500:	430b      	orrs	r3, r1
 800d502:	6513      	str	r3, [r2, #80]	@ 0x50
 800d504:	e003      	b.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d50a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800d51a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800d51e:	2300      	movs	r3, #0
 800d520:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800d524:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800d528:	460b      	mov	r3, r1
 800d52a:	4313      	orrs	r3, r2
 800d52c:	d053      	beq.n	800d5d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d536:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d53a:	d035      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d53c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d540:	d82e      	bhi.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d542:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d546:	d031      	beq.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d548:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d54c:	d828      	bhi.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d54e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d552:	d01a      	beq.n	800d58a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d558:	d822      	bhi.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d003      	beq.n	800d566 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d55e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d562:	d007      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d564:	e01c      	b.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d566:	4b32      	ldr	r3, [pc, #200]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56a:	4a31      	ldr	r2, [pc, #196]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d56c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d570:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d572:	e01c      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d578:	3308      	adds	r3, #8
 800d57a:	2100      	movs	r1, #0
 800d57c:	4618      	mov	r0, r3
 800d57e:	f002 fa55 	bl	800fa2c <RCCEx_PLL2_Config>
 800d582:	4603      	mov	r3, r0
 800d584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d588:	e011      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d58e:	3328      	adds	r3, #40	@ 0x28
 800d590:	2100      	movs	r1, #0
 800d592:	4618      	mov	r0, r3
 800d594:	f002 fafc 	bl	800fb90 <RCCEx_PLL3_Config>
 800d598:	4603      	mov	r3, r0
 800d59a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d59e:	e006      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d5a6:	e002      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d5a8:	bf00      	nop
 800d5aa:	e000      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d5ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10b      	bne.n	800d5ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d5b6:	4b1e      	ldr	r3, [pc, #120]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d5b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5ba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d5c6:	4a1a      	ldr	r2, [pc, #104]	@ (800d630 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d5c8:	430b      	orrs	r3, r1
 800d5ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800d5cc:	e003      	b.n	800d5d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5de:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d5e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d5ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	d056      	beq.n	800d6a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d5fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d602:	d038      	beq.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d608:	d831      	bhi.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d60a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d60e:	d034      	beq.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d610:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d614:	d82b      	bhi.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d61a:	d01d      	beq.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d61c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d620:	d825      	bhi.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d622:	2b00      	cmp	r3, #0
 800d624:	d006      	beq.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d62a:	d00a      	beq.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d62c:	e01f      	b.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d62e:	bf00      	nop
 800d630:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d634:	4ba2      	ldr	r3, [pc, #648]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d638:	4aa1      	ldr	r2, [pc, #644]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d63a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d63e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d640:	e01c      	b.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d646:	3308      	adds	r3, #8
 800d648:	2100      	movs	r1, #0
 800d64a:	4618      	mov	r0, r3
 800d64c:	f002 f9ee 	bl	800fa2c <RCCEx_PLL2_Config>
 800d650:	4603      	mov	r3, r0
 800d652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d656:	e011      	b.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d65c:	3328      	adds	r3, #40	@ 0x28
 800d65e:	2100      	movs	r1, #0
 800d660:	4618      	mov	r0, r3
 800d662:	f002 fa95 	bl	800fb90 <RCCEx_PLL3_Config>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d66c:	e006      	b.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d674:	e002      	b.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d676:	bf00      	nop
 800d678:	e000      	b.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d67a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d67c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10b      	bne.n	800d69c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d684:	4b8e      	ldr	r3, [pc, #568]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d688:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800d68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d690:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d694:	4a8a      	ldr	r2, [pc, #552]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d696:	430b      	orrs	r3, r1
 800d698:	6593      	str	r3, [r2, #88]	@ 0x58
 800d69a:	e003      	b.n	800d6a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d69c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800d6b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d6ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d6be:	460b      	mov	r3, r1
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	d03a      	beq.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800d6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6ca:	2b30      	cmp	r3, #48	@ 0x30
 800d6cc:	d01f      	beq.n	800d70e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d6ce:	2b30      	cmp	r3, #48	@ 0x30
 800d6d0:	d819      	bhi.n	800d706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d6d2:	2b20      	cmp	r3, #32
 800d6d4:	d00c      	beq.n	800d6f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d6d6:	2b20      	cmp	r3, #32
 800d6d8:	d815      	bhi.n	800d706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d019      	beq.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d6de:	2b10      	cmp	r3, #16
 800d6e0:	d111      	bne.n	800d706 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6e2:	4b77      	ldr	r3, [pc, #476]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6e6:	4a76      	ldr	r2, [pc, #472]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d6e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d6ee:	e011      	b.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	2102      	movs	r1, #2
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f002 f997 	bl	800fa2c <RCCEx_PLL2_Config>
 800d6fe:	4603      	mov	r3, r0
 800d700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d704:	e006      	b.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d70c:	e002      	b.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d70e:	bf00      	nop
 800d710:	e000      	b.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d712:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10a      	bne.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d71c:	4b68      	ldr	r3, [pc, #416]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d71e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d720:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d72a:	4a65      	ldr	r2, [pc, #404]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d72c:	430b      	orrs	r3, r1
 800d72e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d730:	e003      	b.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d742:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d746:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d74a:	2300      	movs	r3, #0
 800d74c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d750:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d754:	460b      	mov	r3, r1
 800d756:	4313      	orrs	r3, r2
 800d758:	d051      	beq.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d75e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d764:	d035      	beq.n	800d7d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d76a:	d82e      	bhi.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d76c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d770:	d031      	beq.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d772:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d776:	d828      	bhi.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d77c:	d01a      	beq.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d77e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d782:	d822      	bhi.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d784:	2b00      	cmp	r3, #0
 800d786:	d003      	beq.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d78c:	d007      	beq.n	800d79e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d78e:	e01c      	b.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d790:	4b4b      	ldr	r3, [pc, #300]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d794:	4a4a      	ldr	r2, [pc, #296]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d79a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d79c:	e01c      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f002 f940 	bl	800fa2c <RCCEx_PLL2_Config>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d7b2:	e011      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7b8:	3328      	adds	r3, #40	@ 0x28
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f002 f9e7 	bl	800fb90 <RCCEx_PLL3_Config>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d7c8:	e006      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d7d0:	e002      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d7d2:	bf00      	nop
 800d7d4:	e000      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d7d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10a      	bne.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d7e0:	4b37      	ldr	r3, [pc, #220]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d7e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7ee:	4a34      	ldr	r2, [pc, #208]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d7f0:	430b      	orrs	r3, r1
 800d7f2:	6513      	str	r3, [r2, #80]	@ 0x50
 800d7f4:	e003      	b.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d806:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d80a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d80e:	2300      	movs	r3, #0
 800d810:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d814:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d818:	460b      	mov	r3, r1
 800d81a:	4313      	orrs	r3, r2
 800d81c:	d056      	beq.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d81e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d828:	d033      	beq.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d82a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d82e:	d82c      	bhi.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d830:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d834:	d02f      	beq.n	800d896 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d836:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d83a:	d826      	bhi.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d83c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d840:	d02b      	beq.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d842:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d846:	d820      	bhi.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d84c:	d012      	beq.n	800d874 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d84e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d852:	d81a      	bhi.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d854:	2b00      	cmp	r3, #0
 800d856:	d022      	beq.n	800d89e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d85c:	d115      	bne.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d862:	3308      	adds	r3, #8
 800d864:	2101      	movs	r1, #1
 800d866:	4618      	mov	r0, r3
 800d868:	f002 f8e0 	bl	800fa2c <RCCEx_PLL2_Config>
 800d86c:	4603      	mov	r3, r0
 800d86e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d872:	e015      	b.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d878:	3328      	adds	r3, #40	@ 0x28
 800d87a:	2101      	movs	r1, #1
 800d87c:	4618      	mov	r0, r3
 800d87e:	f002 f987 	bl	800fb90 <RCCEx_PLL3_Config>
 800d882:	4603      	mov	r3, r0
 800d884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d888:	e00a      	b.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d890:	e006      	b.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d892:	bf00      	nop
 800d894:	e004      	b.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d896:	bf00      	nop
 800d898:	e002      	b.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d89a:	bf00      	nop
 800d89c:	e000      	b.n	800d8a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d89e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10d      	bne.n	800d8c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d8a8:	4b05      	ldr	r3, [pc, #20]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8b6:	4a02      	ldr	r2, [pc, #8]	@ (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d8b8:	430b      	orrs	r3, r1
 800d8ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800d8bc:	e006      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d8be:	bf00      	nop
 800d8c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d8d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	d055      	beq.n	800d998 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d8f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d8f8:	d033      	beq.n	800d962 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d8fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d8fe:	d82c      	bhi.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d904:	d02f      	beq.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d90a:	d826      	bhi.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d90c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d910:	d02b      	beq.n	800d96a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d912:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d916:	d820      	bhi.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d91c:	d012      	beq.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d91e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d922:	d81a      	bhi.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d924:	2b00      	cmp	r3, #0
 800d926:	d022      	beq.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d92c:	d115      	bne.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d932:	3308      	adds	r3, #8
 800d934:	2101      	movs	r1, #1
 800d936:	4618      	mov	r0, r3
 800d938:	f002 f878 	bl	800fa2c <RCCEx_PLL2_Config>
 800d93c:	4603      	mov	r3, r0
 800d93e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d942:	e015      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d948:	3328      	adds	r3, #40	@ 0x28
 800d94a:	2101      	movs	r1, #1
 800d94c:	4618      	mov	r0, r3
 800d94e:	f002 f91f 	bl	800fb90 <RCCEx_PLL3_Config>
 800d952:	4603      	mov	r3, r0
 800d954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d958:	e00a      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d960:	e006      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d962:	bf00      	nop
 800d964:	e004      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d966:	bf00      	nop
 800d968:	e002      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d96a:	bf00      	nop
 800d96c:	e000      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10b      	bne.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d978:	4ba3      	ldr	r3, [pc, #652]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d97a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d97c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d984:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d988:	4a9f      	ldr	r2, [pc, #636]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d98a:	430b      	orrs	r3, r1
 800d98c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d98e:	e003      	b.n	800d998 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d9a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d9ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	d037      	beq.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9c2:	d00e      	beq.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d9c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9c8:	d816      	bhi.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d018      	beq.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d9ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d9d2:	d111      	bne.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9d4:	4b8c      	ldr	r3, [pc, #560]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9d8:	4a8b      	ldr	r2, [pc, #556]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d9e0:	e00f      	b.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9e6:	3308      	adds	r3, #8
 800d9e8:	2101      	movs	r1, #1
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f002 f81e 	bl	800fa2c <RCCEx_PLL2_Config>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d9f6:	e004      	b.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9fe:	e000      	b.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800da00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10a      	bne.n	800da20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800da0a:	4b7f      	ldr	r3, [pc, #508]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800da12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da18:	4a7b      	ldr	r2, [pc, #492]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da1a:	430b      	orrs	r3, r1
 800da1c:	6513      	str	r3, [r2, #80]	@ 0x50
 800da1e:	e003      	b.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800da28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800da34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800da38:	2300      	movs	r3, #0
 800da3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800da3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800da42:	460b      	mov	r3, r1
 800da44:	4313      	orrs	r3, r2
 800da46:	d039      	beq.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800da48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da4e:	2b03      	cmp	r3, #3
 800da50:	d81c      	bhi.n	800da8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800da52:	a201      	add	r2, pc, #4	@ (adr r2, 800da58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800da54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da58:	0800da95 	.word	0x0800da95
 800da5c:	0800da69 	.word	0x0800da69
 800da60:	0800da77 	.word	0x0800da77
 800da64:	0800da95 	.word	0x0800da95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da68:	4b67      	ldr	r3, [pc, #412]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da6c:	4a66      	ldr	r2, [pc, #408]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800da6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800da74:	e00f      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800da76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da7a:	3308      	adds	r3, #8
 800da7c:	2102      	movs	r1, #2
 800da7e:	4618      	mov	r0, r3
 800da80:	f001 ffd4 	bl	800fa2c <RCCEx_PLL2_Config>
 800da84:	4603      	mov	r3, r0
 800da86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800da8a:	e004      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da92:	e000      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800da94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d10a      	bne.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800da9e:	4b5a      	ldr	r3, [pc, #360]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800daa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800daa2:	f023 0103 	bic.w	r1, r3, #3
 800daa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800daac:	4a56      	ldr	r2, [pc, #344]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800daae:	430b      	orrs	r3, r1
 800dab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dab2:	e003      	b.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800dac8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dacc:	2300      	movs	r3, #0
 800dace:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dad2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800dad6:	460b      	mov	r3, r1
 800dad8:	4313      	orrs	r3, r2
 800dada:	f000 809f 	beq.w	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dade:	4b4b      	ldr	r3, [pc, #300]	@ (800dc0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a4a      	ldr	r2, [pc, #296]	@ (800dc0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800dae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800daea:	f7f4 f94d 	bl	8001d88 <HAL_GetTick>
 800daee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800daf2:	e00b      	b.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800daf4:	f7f4 f948 	bl	8001d88 <HAL_GetTick>
 800daf8:	4602      	mov	r2, r0
 800dafa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	2b64      	cmp	r3, #100	@ 0x64
 800db02:	d903      	bls.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800db04:	2303      	movs	r3, #3
 800db06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db0a:	e005      	b.n	800db18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800db0c:	4b3f      	ldr	r3, [pc, #252]	@ (800dc0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db14:	2b00      	cmp	r3, #0
 800db16:	d0ed      	beq.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800db18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d179      	bne.n	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800db20:	4b39      	ldr	r3, [pc, #228]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800db24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800db2c:	4053      	eors	r3, r2
 800db2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db32:	2b00      	cmp	r3, #0
 800db34:	d015      	beq.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800db36:	4b34      	ldr	r3, [pc, #208]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800db42:	4b31      	ldr	r3, [pc, #196]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db46:	4a30      	ldr	r2, [pc, #192]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db4c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800db4e:	4b2e      	ldr	r3, [pc, #184]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db52:	4a2d      	ldr	r2, [pc, #180]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db58:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800db5a:	4a2b      	ldr	r2, [pc, #172]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db60:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800db62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800db6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db6e:	d118      	bne.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db70:	f7f4 f90a 	bl	8001d88 <HAL_GetTick>
 800db74:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800db78:	e00d      	b.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db7a:	f7f4 f905 	bl	8001d88 <HAL_GetTick>
 800db7e:	4602      	mov	r2, r0
 800db80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800db84:	1ad2      	subs	r2, r2, r3
 800db86:	f241 3388 	movw	r3, #5000	@ 0x1388
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d903      	bls.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800db8e:	2303      	movs	r3, #3
 800db90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800db94:	e005      	b.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800db96:	4b1c      	ldr	r3, [pc, #112]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800db98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db9a:	f003 0302 	and.w	r3, r3, #2
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d0eb      	beq.n	800db7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800dba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d129      	bne.n	800dbfe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dbb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dbb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dbba:	d10e      	bne.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800dbbc:	4b12      	ldr	r3, [pc, #72]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dbbe:	691b      	ldr	r3, [r3, #16]
 800dbc0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800dbc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dbcc:	091a      	lsrs	r2, r3, #4
 800dbce:	4b10      	ldr	r3, [pc, #64]	@ (800dc10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	4a0d      	ldr	r2, [pc, #52]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dbd4:	430b      	orrs	r3, r1
 800dbd6:	6113      	str	r3, [r2, #16]
 800dbd8:	e005      	b.n	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800dbda:	4b0b      	ldr	r3, [pc, #44]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dbdc:	691b      	ldr	r3, [r3, #16]
 800dbde:	4a0a      	ldr	r2, [pc, #40]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dbe0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dbe4:	6113      	str	r3, [r2, #16]
 800dbe6:	4b08      	ldr	r3, [pc, #32]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dbe8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800dbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dbf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbf6:	4a04      	ldr	r2, [pc, #16]	@ (800dc08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dbf8:	430b      	orrs	r3, r1
 800dbfa:	6713      	str	r3, [r2, #112]	@ 0x70
 800dbfc:	e00e      	b.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dbfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800dc06:	e009      	b.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800dc08:	58024400 	.word	0x58024400
 800dc0c:	58024800 	.word	0x58024800
 800dc10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800dc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc24:	f002 0301 	and.w	r3, r2, #1
 800dc28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dc32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800dc36:	460b      	mov	r3, r1
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	f000 8089 	beq.w	800dd50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800dc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc44:	2b28      	cmp	r3, #40	@ 0x28
 800dc46:	d86b      	bhi.n	800dd20 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800dc48:	a201      	add	r2, pc, #4	@ (adr r2, 800dc50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800dc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc4e:	bf00      	nop
 800dc50:	0800dd29 	.word	0x0800dd29
 800dc54:	0800dd21 	.word	0x0800dd21
 800dc58:	0800dd21 	.word	0x0800dd21
 800dc5c:	0800dd21 	.word	0x0800dd21
 800dc60:	0800dd21 	.word	0x0800dd21
 800dc64:	0800dd21 	.word	0x0800dd21
 800dc68:	0800dd21 	.word	0x0800dd21
 800dc6c:	0800dd21 	.word	0x0800dd21
 800dc70:	0800dcf5 	.word	0x0800dcf5
 800dc74:	0800dd21 	.word	0x0800dd21
 800dc78:	0800dd21 	.word	0x0800dd21
 800dc7c:	0800dd21 	.word	0x0800dd21
 800dc80:	0800dd21 	.word	0x0800dd21
 800dc84:	0800dd21 	.word	0x0800dd21
 800dc88:	0800dd21 	.word	0x0800dd21
 800dc8c:	0800dd21 	.word	0x0800dd21
 800dc90:	0800dd0b 	.word	0x0800dd0b
 800dc94:	0800dd21 	.word	0x0800dd21
 800dc98:	0800dd21 	.word	0x0800dd21
 800dc9c:	0800dd21 	.word	0x0800dd21
 800dca0:	0800dd21 	.word	0x0800dd21
 800dca4:	0800dd21 	.word	0x0800dd21
 800dca8:	0800dd21 	.word	0x0800dd21
 800dcac:	0800dd21 	.word	0x0800dd21
 800dcb0:	0800dd29 	.word	0x0800dd29
 800dcb4:	0800dd21 	.word	0x0800dd21
 800dcb8:	0800dd21 	.word	0x0800dd21
 800dcbc:	0800dd21 	.word	0x0800dd21
 800dcc0:	0800dd21 	.word	0x0800dd21
 800dcc4:	0800dd21 	.word	0x0800dd21
 800dcc8:	0800dd21 	.word	0x0800dd21
 800dccc:	0800dd21 	.word	0x0800dd21
 800dcd0:	0800dd29 	.word	0x0800dd29
 800dcd4:	0800dd21 	.word	0x0800dd21
 800dcd8:	0800dd21 	.word	0x0800dd21
 800dcdc:	0800dd21 	.word	0x0800dd21
 800dce0:	0800dd21 	.word	0x0800dd21
 800dce4:	0800dd21 	.word	0x0800dd21
 800dce8:	0800dd21 	.word	0x0800dd21
 800dcec:	0800dd21 	.word	0x0800dd21
 800dcf0:	0800dd29 	.word	0x0800dd29
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dcf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcf8:	3308      	adds	r3, #8
 800dcfa:	2101      	movs	r1, #1
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f001 fe95 	bl	800fa2c <RCCEx_PLL2_Config>
 800dd02:	4603      	mov	r3, r0
 800dd04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800dd08:	e00f      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd0e:	3328      	adds	r3, #40	@ 0x28
 800dd10:	2101      	movs	r1, #1
 800dd12:	4618      	mov	r0, r3
 800dd14:	f001 ff3c 	bl	800fb90 <RCCEx_PLL3_Config>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800dd1e:	e004      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd20:	2301      	movs	r3, #1
 800dd22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd26:	e000      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800dd28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10a      	bne.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800dd32:	4bbf      	ldr	r3, [pc, #764]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd36:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800dd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dd40:	4abb      	ldr	r2, [pc, #748]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd42:	430b      	orrs	r3, r1
 800dd44:	6553      	str	r3, [r2, #84]	@ 0x54
 800dd46:	e003      	b.n	800dd50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800dd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd58:	f002 0302 	and.w	r3, r2, #2
 800dd5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dd60:	2300      	movs	r3, #0
 800dd62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dd66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	d041      	beq.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800dd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dd76:	2b05      	cmp	r3, #5
 800dd78:	d824      	bhi.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800dd7a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd80 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800dd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd80:	0800ddcd 	.word	0x0800ddcd
 800dd84:	0800dd99 	.word	0x0800dd99
 800dd88:	0800ddaf 	.word	0x0800ddaf
 800dd8c:	0800ddcd 	.word	0x0800ddcd
 800dd90:	0800ddcd 	.word	0x0800ddcd
 800dd94:	0800ddcd 	.word	0x0800ddcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dd98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd9c:	3308      	adds	r3, #8
 800dd9e:	2101      	movs	r1, #1
 800dda0:	4618      	mov	r0, r3
 800dda2:	f001 fe43 	bl	800fa2c <RCCEx_PLL2_Config>
 800dda6:	4603      	mov	r3, r0
 800dda8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ddac:	e00f      	b.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ddae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddb2:	3328      	adds	r3, #40	@ 0x28
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f001 feea 	bl	800fb90 <RCCEx_PLL3_Config>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ddc2:	e004      	b.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ddca:	e000      	b.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ddcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10a      	bne.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ddd6:	4b96      	ldr	r3, [pc, #600]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ddd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddda:	f023 0107 	bic.w	r1, r3, #7
 800ddde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dde2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dde4:	4a92      	ldr	r2, [pc, #584]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dde6:	430b      	orrs	r3, r1
 800dde8:	6553      	str	r3, [r2, #84]	@ 0x54
 800ddea:	e003      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ddf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	f002 0304 	and.w	r3, r2, #4
 800de00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800de04:	2300      	movs	r3, #0
 800de06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800de0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800de0e:	460b      	mov	r3, r1
 800de10:	4313      	orrs	r3, r2
 800de12:	d044      	beq.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800de14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de1c:	2b05      	cmp	r3, #5
 800de1e:	d825      	bhi.n	800de6c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800de20:	a201      	add	r2, pc, #4	@ (adr r2, 800de28 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800de22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de26:	bf00      	nop
 800de28:	0800de75 	.word	0x0800de75
 800de2c:	0800de41 	.word	0x0800de41
 800de30:	0800de57 	.word	0x0800de57
 800de34:	0800de75 	.word	0x0800de75
 800de38:	0800de75 	.word	0x0800de75
 800de3c:	0800de75 	.word	0x0800de75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de44:	3308      	adds	r3, #8
 800de46:	2101      	movs	r1, #1
 800de48:	4618      	mov	r0, r3
 800de4a:	f001 fdef 	bl	800fa2c <RCCEx_PLL2_Config>
 800de4e:	4603      	mov	r3, r0
 800de50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800de54:	e00f      	b.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800de56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de5a:	3328      	adds	r3, #40	@ 0x28
 800de5c:	2101      	movs	r1, #1
 800de5e:	4618      	mov	r0, r3
 800de60:	f001 fe96 	bl	800fb90 <RCCEx_PLL3_Config>
 800de64:	4603      	mov	r3, r0
 800de66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800de6a:	e004      	b.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800de72:	e000      	b.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800de74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10b      	bne.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800de7e:	4b6c      	ldr	r3, [pc, #432]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800de80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de82:	f023 0107 	bic.w	r1, r3, #7
 800de86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de8e:	4a68      	ldr	r2, [pc, #416]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800de90:	430b      	orrs	r3, r1
 800de92:	6593      	str	r3, [r2, #88]	@ 0x58
 800de94:	e003      	b.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800de9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea6:	f002 0320 	and.w	r3, r2, #32
 800deaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800deae:	2300      	movs	r3, #0
 800deb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800deb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800deb8:	460b      	mov	r3, r1
 800deba:	4313      	orrs	r3, r2
 800debc:	d055      	beq.n	800df6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800debe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800deca:	d033      	beq.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800decc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ded0:	d82c      	bhi.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800ded2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ded6:	d02f      	beq.n	800df38 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800ded8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dedc:	d826      	bhi.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dede:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dee2:	d02b      	beq.n	800df3c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800dee4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dee8:	d820      	bhi.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800deea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800deee:	d012      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800def0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800def4:	d81a      	bhi.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800def6:	2b00      	cmp	r3, #0
 800def8:	d022      	beq.n	800df40 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800defa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800defe:	d115      	bne.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df04:	3308      	adds	r3, #8
 800df06:	2100      	movs	r1, #0
 800df08:	4618      	mov	r0, r3
 800df0a:	f001 fd8f 	bl	800fa2c <RCCEx_PLL2_Config>
 800df0e:	4603      	mov	r3, r0
 800df10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800df14:	e015      	b.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df1a:	3328      	adds	r3, #40	@ 0x28
 800df1c:	2102      	movs	r1, #2
 800df1e:	4618      	mov	r0, r3
 800df20:	f001 fe36 	bl	800fb90 <RCCEx_PLL3_Config>
 800df24:	4603      	mov	r3, r0
 800df26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800df2a:	e00a      	b.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df32:	e006      	b.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800df34:	bf00      	nop
 800df36:	e004      	b.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800df38:	bf00      	nop
 800df3a:	e002      	b.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800df3c:	bf00      	nop
 800df3e:	e000      	b.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800df40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df46:	2b00      	cmp	r3, #0
 800df48:	d10b      	bne.n	800df62 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800df4a:	4b39      	ldr	r3, [pc, #228]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800df4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800df52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df5a:	4a35      	ldr	r2, [pc, #212]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800df5c:	430b      	orrs	r3, r1
 800df5e:	6553      	str	r3, [r2, #84]	@ 0x54
 800df60:	e003      	b.n	800df6a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800df6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df72:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800df76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800df7a:	2300      	movs	r3, #0
 800df7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800df80:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800df84:	460b      	mov	r3, r1
 800df86:	4313      	orrs	r3, r2
 800df88:	d058      	beq.n	800e03c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800df8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800df92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800df96:	d033      	beq.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800df98:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800df9c:	d82c      	bhi.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800df9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfa2:	d02f      	beq.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800dfa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfa8:	d826      	bhi.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dfaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dfae:	d02b      	beq.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800dfb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dfb4:	d820      	bhi.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dfb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfba:	d012      	beq.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800dfbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfc0:	d81a      	bhi.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d022      	beq.n	800e00c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800dfc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dfca:	d115      	bne.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f001 fd29 	bl	800fa2c <RCCEx_PLL2_Config>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800dfe0:	e015      	b.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfe6:	3328      	adds	r3, #40	@ 0x28
 800dfe8:	2102      	movs	r1, #2
 800dfea:	4618      	mov	r0, r3
 800dfec:	f001 fdd0 	bl	800fb90 <RCCEx_PLL3_Config>
 800dff0:	4603      	mov	r3, r0
 800dff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800dff6:	e00a      	b.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dff8:	2301      	movs	r3, #1
 800dffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dffe:	e006      	b.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e000:	bf00      	nop
 800e002:	e004      	b.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e004:	bf00      	nop
 800e006:	e002      	b.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e008:	bf00      	nop
 800e00a:	e000      	b.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e00e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e012:	2b00      	cmp	r3, #0
 800e014:	d10e      	bne.n	800e034 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e016:	4b06      	ldr	r3, [pc, #24]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e01a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e022:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e026:	4a02      	ldr	r2, [pc, #8]	@ (800e030 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e028:	430b      	orrs	r3, r1
 800e02a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e02c:	e006      	b.n	800e03c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e02e:	bf00      	nop
 800e030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e038:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e04c:	2300      	movs	r3, #0
 800e04e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e052:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e056:	460b      	mov	r3, r1
 800e058:	4313      	orrs	r3, r2
 800e05a:	d055      	beq.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e060:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e064:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e068:	d033      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e06a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e06e:	d82c      	bhi.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e074:	d02f      	beq.n	800e0d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e07a:	d826      	bhi.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e07c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e080:	d02b      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e082:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e086:	d820      	bhi.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e088:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e08c:	d012      	beq.n	800e0b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e08e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e092:	d81a      	bhi.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e094:	2b00      	cmp	r3, #0
 800e096:	d022      	beq.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e09c:	d115      	bne.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0a2:	3308      	adds	r3, #8
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f001 fcc0 	bl	800fa2c <RCCEx_PLL2_Config>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e0b2:	e015      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0b8:	3328      	adds	r3, #40	@ 0x28
 800e0ba:	2102      	movs	r1, #2
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f001 fd67 	bl	800fb90 <RCCEx_PLL3_Config>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e0c8:	e00a      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e0d0:	e006      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e0d2:	bf00      	nop
 800e0d4:	e004      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e0d6:	bf00      	nop
 800e0d8:	e002      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e0da:	bf00      	nop
 800e0dc:	e000      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10b      	bne.n	800e100 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e0e8:	4ba1      	ldr	r3, [pc, #644]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e0ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e0f8:	4a9d      	ldr	r2, [pc, #628]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e0fa:	430b      	orrs	r3, r1
 800e0fc:	6593      	str	r3, [r2, #88]	@ 0x58
 800e0fe:	e003      	b.n	800e108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e110:	f002 0308 	and.w	r3, r2, #8
 800e114:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e118:	2300      	movs	r3, #0
 800e11a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e11e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e122:	460b      	mov	r3, r1
 800e124:	4313      	orrs	r3, r2
 800e126:	d01e      	beq.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e134:	d10c      	bne.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e13a:	3328      	adds	r3, #40	@ 0x28
 800e13c:	2102      	movs	r1, #2
 800e13e:	4618      	mov	r0, r3
 800e140:	f001 fd26 	bl	800fb90 <RCCEx_PLL3_Config>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e150:	4b87      	ldr	r3, [pc, #540]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e154:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e15c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e160:	4a83      	ldr	r2, [pc, #524]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e162:	430b      	orrs	r3, r1
 800e164:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16e:	f002 0310 	and.w	r3, r2, #16
 800e172:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e176:	2300      	movs	r3, #0
 800e178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e17c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e180:	460b      	mov	r3, r1
 800e182:	4313      	orrs	r3, r2
 800e184:	d01e      	beq.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e18a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e18e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e192:	d10c      	bne.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e198:	3328      	adds	r3, #40	@ 0x28
 800e19a:	2102      	movs	r1, #2
 800e19c:	4618      	mov	r0, r3
 800e19e:	f001 fcf7 	bl	800fb90 <RCCEx_PLL3_Config>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d002      	beq.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e1ae:	4b70      	ldr	r3, [pc, #448]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e1be:	4a6c      	ldr	r2, [pc, #432]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e1c0:	430b      	orrs	r3, r1
 800e1c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e1d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e1da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e1de:	460b      	mov	r3, r1
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	d03e      	beq.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e1ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1f0:	d022      	beq.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e1f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e1f6:	d81b      	bhi.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d003      	beq.n	800e204 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e1fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e200:	d00b      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e202:	e015      	b.n	800e230 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e208:	3308      	adds	r3, #8
 800e20a:	2100      	movs	r1, #0
 800e20c:	4618      	mov	r0, r3
 800e20e:	f001 fc0d 	bl	800fa2c <RCCEx_PLL2_Config>
 800e212:	4603      	mov	r3, r0
 800e214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e218:	e00f      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e21e:	3328      	adds	r3, #40	@ 0x28
 800e220:	2102      	movs	r1, #2
 800e222:	4618      	mov	r0, r3
 800e224:	f001 fcb4 	bl	800fb90 <RCCEx_PLL3_Config>
 800e228:	4603      	mov	r3, r0
 800e22a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e22e:	e004      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e230:	2301      	movs	r3, #1
 800e232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e236:	e000      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e23a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d10b      	bne.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e242:	4b4b      	ldr	r3, [pc, #300]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e246:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e24e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e252:	4a47      	ldr	r2, [pc, #284]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e254:	430b      	orrs	r3, r1
 800e256:	6593      	str	r3, [r2, #88]	@ 0x58
 800e258:	e003      	b.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e25a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e25e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e26e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e270:	2300      	movs	r3, #0
 800e272:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e274:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e278:	460b      	mov	r3, r1
 800e27a:	4313      	orrs	r3, r2
 800e27c:	d03b      	beq.n	800e2f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e286:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e28a:	d01f      	beq.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e28c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e290:	d818      	bhi.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e296:	d003      	beq.n	800e2a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e298:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e29c:	d007      	beq.n	800e2ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e29e:	e011      	b.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2a0:	4b33      	ldr	r3, [pc, #204]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a4:	4a32      	ldr	r2, [pc, #200]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e2a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e2ac:	e00f      	b.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2b2:	3328      	adds	r3, #40	@ 0x28
 800e2b4:	2101      	movs	r1, #1
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f001 fc6a 	bl	800fb90 <RCCEx_PLL3_Config>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e2c2:	e004      	b.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e2ca:	e000      	b.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e2cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10b      	bne.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e2d6:	4b26      	ldr	r3, [pc, #152]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2e6:	4a22      	ldr	r2, [pc, #136]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e2e8:	430b      	orrs	r3, r1
 800e2ea:	6553      	str	r3, [r2, #84]	@ 0x54
 800e2ec:	e003      	b.n	800e2f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e302:	673b      	str	r3, [r7, #112]	@ 0x70
 800e304:	2300      	movs	r3, #0
 800e306:	677b      	str	r3, [r7, #116]	@ 0x74
 800e308:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e30c:	460b      	mov	r3, r1
 800e30e:	4313      	orrs	r3, r2
 800e310:	d034      	beq.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e31c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e320:	d007      	beq.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e322:	e011      	b.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e324:	4b12      	ldr	r3, [pc, #72]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e328:	4a11      	ldr	r2, [pc, #68]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e32a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e32e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e330:	e00e      	b.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e336:	3308      	adds	r3, #8
 800e338:	2102      	movs	r1, #2
 800e33a:	4618      	mov	r0, r3
 800e33c:	f001 fb76 	bl	800fa2c <RCCEx_PLL2_Config>
 800e340:	4603      	mov	r3, r0
 800e342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e346:	e003      	b.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e34e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e354:	2b00      	cmp	r3, #0
 800e356:	d10d      	bne.n	800e374 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e358:	4b05      	ldr	r3, [pc, #20]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e35a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e35c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e366:	4a02      	ldr	r2, [pc, #8]	@ (800e370 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e368:	430b      	orrs	r3, r1
 800e36a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e36c:	e006      	b.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e36e:	bf00      	nop
 800e370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e378:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e384:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e38a:	2300      	movs	r3, #0
 800e38c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e38e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e392:	460b      	mov	r3, r1
 800e394:	4313      	orrs	r3, r2
 800e396:	d00c      	beq.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e39c:	3328      	adds	r3, #40	@ 0x28
 800e39e:	2102      	movs	r1, #2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f001 fbf5 	bl	800fb90 <RCCEx_PLL3_Config>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e3be:	663b      	str	r3, [r7, #96]	@ 0x60
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	667b      	str	r3, [r7, #100]	@ 0x64
 800e3c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	d038      	beq.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e3da:	d018      	beq.n	800e40e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e3dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e3e0:	d811      	bhi.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e3e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3e6:	d014      	beq.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e3e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3ec:	d80b      	bhi.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d011      	beq.n	800e416 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3f6:	d106      	bne.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3f8:	4bc3      	ldr	r3, [pc, #780]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fc:	4ac2      	ldr	r2, [pc, #776]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e3fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e404:	e008      	b.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e40c:	e004      	b.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e40e:	bf00      	nop
 800e410:	e002      	b.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e412:	bf00      	nop
 800e414:	e000      	b.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e416:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10b      	bne.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e420:	4bb9      	ldr	r3, [pc, #740]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e424:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e42c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e430:	4ab5      	ldr	r2, [pc, #724]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e432:	430b      	orrs	r3, r1
 800e434:	6553      	str	r3, [r2, #84]	@ 0x54
 800e436:	e003      	b.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e43c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e448:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e44c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e44e:	2300      	movs	r3, #0
 800e450:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e452:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e456:	460b      	mov	r3, r1
 800e458:	4313      	orrs	r3, r2
 800e45a:	d009      	beq.n	800e470 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e45c:	4baa      	ldr	r3, [pc, #680]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e460:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e46a:	4aa7      	ldr	r2, [pc, #668]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e46c:	430b      	orrs	r3, r1
 800e46e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800e47c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e47e:	2300      	movs	r3, #0
 800e480:	657b      	str	r3, [r7, #84]	@ 0x54
 800e482:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e486:	460b      	mov	r3, r1
 800e488:	4313      	orrs	r3, r2
 800e48a:	d00a      	beq.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e48c:	4b9e      	ldr	r3, [pc, #632]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800e494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e498:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e49c:	4a9a      	ldr	r2, [pc, #616]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e49e:	430b      	orrs	r3, r1
 800e4a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e4ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	d009      	beq.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e4be:	4b92      	ldr	r3, [pc, #584]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e4c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4c2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4cc:	4a8e      	ldr	r2, [pc, #568]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e4ce:	430b      	orrs	r3, r1
 800e4d0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4da:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e4de:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	d00e      	beq.n	800e50c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e4ee:	4b86      	ldr	r3, [pc, #536]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e4f0:	691b      	ldr	r3, [r3, #16]
 800e4f2:	4a85      	ldr	r2, [pc, #532]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e4f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e4f8:	6113      	str	r3, [r2, #16]
 800e4fa:	4b83      	ldr	r3, [pc, #524]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e4fc:	6919      	ldr	r1, [r3, #16]
 800e4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e506:	4a80      	ldr	r2, [pc, #512]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e508:	430b      	orrs	r3, r1
 800e50a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e514:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e518:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e51a:	2300      	movs	r3, #0
 800e51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e51e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e522:	460b      	mov	r3, r1
 800e524:	4313      	orrs	r3, r2
 800e526:	d009      	beq.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e528:	4b77      	ldr	r3, [pc, #476]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e52a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e52c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e536:	4a74      	ldr	r2, [pc, #464]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e538:	430b      	orrs	r3, r1
 800e53a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e548:	633b      	str	r3, [r7, #48]	@ 0x30
 800e54a:	2300      	movs	r3, #0
 800e54c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e54e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e552:	460b      	mov	r3, r1
 800e554:	4313      	orrs	r3, r2
 800e556:	d00a      	beq.n	800e56e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e558:	4b6b      	ldr	r3, [pc, #428]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e55a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e55c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e568:	4a67      	ldr	r2, [pc, #412]	@ (800e708 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e56a:	430b      	orrs	r3, r1
 800e56c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e576:	2100      	movs	r1, #0
 800e578:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e580:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e584:	460b      	mov	r3, r1
 800e586:	4313      	orrs	r3, r2
 800e588:	d011      	beq.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e58e:	3308      	adds	r3, #8
 800e590:	2100      	movs	r1, #0
 800e592:	4618      	mov	r0, r3
 800e594:	f001 fa4a 	bl	800fa2c <RCCEx_PLL2_Config>
 800e598:	4603      	mov	r3, r0
 800e59a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e59e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d003      	beq.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	6239      	str	r1, [r7, #32]
 800e5ba:	f003 0302 	and.w	r3, r3, #2
 800e5be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	d011      	beq.n	800e5ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5ce:	3308      	adds	r3, #8
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f001 fa2a 	bl	800fa2c <RCCEx_PLL2_Config>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e5de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d003      	beq.n	800e5ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	61b9      	str	r1, [r7, #24]
 800e5fa:	f003 0304 	and.w	r3, r3, #4
 800e5fe:	61fb      	str	r3, [r7, #28]
 800e600:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e604:	460b      	mov	r3, r1
 800e606:	4313      	orrs	r3, r2
 800e608:	d011      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e60e:	3308      	adds	r3, #8
 800e610:	2102      	movs	r1, #2
 800e612:	4618      	mov	r0, r3
 800e614:	f001 fa0a 	bl	800fa2c <RCCEx_PLL2_Config>
 800e618:	4603      	mov	r3, r0
 800e61a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e61e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e62a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e636:	2100      	movs	r1, #0
 800e638:	6139      	str	r1, [r7, #16]
 800e63a:	f003 0308 	and.w	r3, r3, #8
 800e63e:	617b      	str	r3, [r7, #20]
 800e640:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e644:	460b      	mov	r3, r1
 800e646:	4313      	orrs	r3, r2
 800e648:	d011      	beq.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e64e:	3328      	adds	r3, #40	@ 0x28
 800e650:	2100      	movs	r1, #0
 800e652:	4618      	mov	r0, r3
 800e654:	f001 fa9c 	bl	800fb90 <RCCEx_PLL3_Config>
 800e658:	4603      	mov	r3, r0
 800e65a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800e65e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e662:	2b00      	cmp	r3, #0
 800e664:	d003      	beq.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e66a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e676:	2100      	movs	r1, #0
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	f003 0310 	and.w	r3, r3, #16
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e684:	460b      	mov	r3, r1
 800e686:	4313      	orrs	r3, r2
 800e688:	d011      	beq.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e68e:	3328      	adds	r3, #40	@ 0x28
 800e690:	2101      	movs	r1, #1
 800e692:	4618      	mov	r0, r3
 800e694:	f001 fa7c 	bl	800fb90 <RCCEx_PLL3_Config>
 800e698:	4603      	mov	r3, r0
 800e69a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e69e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d003      	beq.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	6039      	str	r1, [r7, #0]
 800e6ba:	f003 0320 	and.w	r3, r3, #32
 800e6be:	607b      	str	r3, [r7, #4]
 800e6c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	d011      	beq.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6ce:	3328      	adds	r3, #40	@ 0x28
 800e6d0:	2102      	movs	r1, #2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 fa5c 	bl	800fb90 <RCCEx_PLL3_Config>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800e6de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d003      	beq.n	800e6ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e6ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800e6ee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d101      	bne.n	800e6fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	e000      	b.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800e702:	46bd      	mov	sp, r7
 800e704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e708:	58024400 	.word	0x58024400

0800e70c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b090      	sub	sp, #64	@ 0x40
 800e710:	af00      	add	r7, sp, #0
 800e712:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e71a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800e71e:	430b      	orrs	r3, r1
 800e720:	f040 8094 	bne.w	800e84c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e724:	4b9e      	ldr	r3, [pc, #632]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e728:	f003 0307 	and.w	r3, r3, #7
 800e72c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e730:	2b04      	cmp	r3, #4
 800e732:	f200 8087 	bhi.w	800e844 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e736:	a201      	add	r2, pc, #4	@ (adr r2, 800e73c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73c:	0800e751 	.word	0x0800e751
 800e740:	0800e779 	.word	0x0800e779
 800e744:	0800e7a1 	.word	0x0800e7a1
 800e748:	0800e83d 	.word	0x0800e83d
 800e74c:	0800e7c9 	.word	0x0800e7c9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e750:	4b93      	ldr	r3, [pc, #588]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e75c:	d108      	bne.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e75e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e762:	4618      	mov	r0, r3
 800e764:	f001 f810 	bl	800f788 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e76c:	f000 bd45 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e770:	2300      	movs	r3, #0
 800e772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e774:	f000 bd41 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e778:	4b89      	ldr	r3, [pc, #548]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e784:	d108      	bne.n	800e798 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e786:	f107 0318 	add.w	r3, r7, #24
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 fd54 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e794:	f000 bd31 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e79c:	f000 bd2d 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e7a0:	4b7f      	ldr	r3, [pc, #508]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7ac:	d108      	bne.n	800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7ae:	f107 030c 	add.w	r3, r7, #12
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f000 fe94 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7bc:	f000 bd1d 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e7c4:	f000 bd19 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e7c8:	4b75      	ldr	r3, [pc, #468]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e7ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e7d0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e7d2:	4b73      	ldr	r3, [pc, #460]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f003 0304 	and.w	r3, r3, #4
 800e7da:	2b04      	cmp	r3, #4
 800e7dc:	d10c      	bne.n	800e7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d109      	bne.n	800e7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7e4:	4b6e      	ldr	r3, [pc, #440]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	08db      	lsrs	r3, r3, #3
 800e7ea:	f003 0303 	and.w	r3, r3, #3
 800e7ee:	4a6d      	ldr	r2, [pc, #436]	@ (800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7f6:	e01f      	b.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e7f8:	4b69      	ldr	r3, [pc, #420]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e804:	d106      	bne.n	800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e80c:	d102      	bne.n	800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e80e:	4b66      	ldr	r3, [pc, #408]	@ (800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e812:	e011      	b.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e814:	4b62      	ldr	r3, [pc, #392]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e81c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e820:	d106      	bne.n	800e830 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e828:	d102      	bne.n	800e830 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e82a:	4b60      	ldr	r3, [pc, #384]	@ (800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e82e:	e003      	b.n	800e838 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e834:	f000 bce1 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e838:	f000 bcdf 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e83c:	4b5c      	ldr	r3, [pc, #368]	@ (800e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e840:	f000 bcdb 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e848:	f000 bcd7 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800e84c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e850:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800e854:	430b      	orrs	r3, r1
 800e856:	f040 80ad 	bne.w	800e9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800e85a:	4b51      	ldr	r3, [pc, #324]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e85c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e85e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800e862:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e86a:	d056      	beq.n	800e91a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800e86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e86e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e872:	f200 8090 	bhi.w	800e996 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e878:	2bc0      	cmp	r3, #192	@ 0xc0
 800e87a:	f000 8088 	beq.w	800e98e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800e87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e880:	2bc0      	cmp	r3, #192	@ 0xc0
 800e882:	f200 8088 	bhi.w	800e996 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e888:	2b80      	cmp	r3, #128	@ 0x80
 800e88a:	d032      	beq.n	800e8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e88e:	2b80      	cmp	r3, #128	@ 0x80
 800e890:	f200 8081 	bhi.w	800e996 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e896:	2b00      	cmp	r3, #0
 800e898:	d003      	beq.n	800e8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800e89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e89c:	2b40      	cmp	r3, #64	@ 0x40
 800e89e:	d014      	beq.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800e8a0:	e079      	b.n	800e996 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e8a2:	4b3f      	ldr	r3, [pc, #252]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e8aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e8ae:	d108      	bne.n	800e8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e8b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f000 ff67 	bl	800f788 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8be:	f000 bc9c 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8c6:	f000 bc98 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e8ca:	4b35      	ldr	r3, [pc, #212]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e8d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e8d6:	d108      	bne.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8d8:	f107 0318 	add.w	r3, r7, #24
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f000 fcab 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8e6:	f000 bc88 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8ee:	f000 bc84 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e8f2:	4b2b      	ldr	r3, [pc, #172]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e8fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8fe:	d108      	bne.n	800e912 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e900:	f107 030c 	add.w	r3, r7, #12
 800e904:	4618      	mov	r0, r3
 800e906:	f000 fdeb 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e90e:	f000 bc74 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e912:	2300      	movs	r3, #0
 800e914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e916:	f000 bc70 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e91a:	4b21      	ldr	r3, [pc, #132]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e91c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e91e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e922:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e924:	4b1e      	ldr	r3, [pc, #120]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f003 0304 	and.w	r3, r3, #4
 800e92c:	2b04      	cmp	r3, #4
 800e92e:	d10c      	bne.n	800e94a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800e930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e932:	2b00      	cmp	r3, #0
 800e934:	d109      	bne.n	800e94a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e936:	4b1a      	ldr	r3, [pc, #104]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	08db      	lsrs	r3, r3, #3
 800e93c:	f003 0303 	and.w	r3, r3, #3
 800e940:	4a18      	ldr	r2, [pc, #96]	@ (800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e942:	fa22 f303 	lsr.w	r3, r2, r3
 800e946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e948:	e01f      	b.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e94a:	4b15      	ldr	r3, [pc, #84]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e956:	d106      	bne.n	800e966 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e95a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e95e:	d102      	bne.n	800e966 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e960:	4b11      	ldr	r3, [pc, #68]	@ (800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e964:	e011      	b.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e966:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e96e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e972:	d106      	bne.n	800e982 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800e974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e97a:	d102      	bne.n	800e982 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e97c:	4b0b      	ldr	r3, [pc, #44]	@ (800e9ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e980:	e003      	b.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e982:	2300      	movs	r3, #0
 800e984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e986:	f000 bc38 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e98a:	f000 bc36 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e98e:	4b08      	ldr	r3, [pc, #32]	@ (800e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e992:	f000 bc32 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e996:	2300      	movs	r3, #0
 800e998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e99a:	f000 bc2e 	b.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e99e:	bf00      	nop
 800e9a0:	58024400 	.word	0x58024400
 800e9a4:	03d09000 	.word	0x03d09000
 800e9a8:	003d0900 	.word	0x003d0900
 800e9ac:	017d7840 	.word	0x017d7840
 800e9b0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e9b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9b8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e9bc:	430b      	orrs	r3, r1
 800e9be:	f040 809c 	bne.w	800eafa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e9c2:	4b9e      	ldr	r3, [pc, #632]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e9c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9c6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800e9ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e9d2:	d054      	beq.n	800ea7e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e9da:	f200 808b 	bhi.w	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e9e4:	f000 8083 	beq.w	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e9ee:	f200 8081 	bhi.w	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e9f8:	d02f      	beq.n	800ea5a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ea00:	d878      	bhi.n	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ea02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d004      	beq.n	800ea12 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ea08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ea0e:	d012      	beq.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ea10:	e070      	b.n	800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea12:	4b8a      	ldr	r3, [pc, #552]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea1e:	d107      	bne.n	800ea30 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 feaf 	bl	800f788 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea2e:	e3e4      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea34:	e3e1      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ea36:	4b81      	ldr	r3, [pc, #516]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea42:	d107      	bne.n	800ea54 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea44:	f107 0318 	add.w	r3, r7, #24
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f000 fbf5 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea52:	e3d2      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea54:	2300      	movs	r3, #0
 800ea56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea58:	e3cf      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ea5a:	4b78      	ldr	r3, [pc, #480]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea66:	d107      	bne.n	800ea78 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea68:	f107 030c 	add.w	r3, r7, #12
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 fd37 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea76:	e3c0      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea7c:	e3bd      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ea7e:	4b6f      	ldr	r3, [pc, #444]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ea80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ea86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ea88:	4b6c      	ldr	r3, [pc, #432]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f003 0304 	and.w	r3, r3, #4
 800ea90:	2b04      	cmp	r3, #4
 800ea92:	d10c      	bne.n	800eaae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ea94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d109      	bne.n	800eaae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea9a:	4b68      	ldr	r3, [pc, #416]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	08db      	lsrs	r3, r3, #3
 800eaa0:	f003 0303 	and.w	r3, r3, #3
 800eaa4:	4a66      	ldr	r2, [pc, #408]	@ (800ec40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800eaa6:	fa22 f303 	lsr.w	r3, r2, r3
 800eaaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eaac:	e01e      	b.n	800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eaae:	4b63      	ldr	r3, [pc, #396]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eaba:	d106      	bne.n	800eaca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800eabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eabe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eac2:	d102      	bne.n	800eaca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eac4:	4b5f      	ldr	r3, [pc, #380]	@ (800ec44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800eac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eac8:	e010      	b.n	800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eaca:	4b5c      	ldr	r3, [pc, #368]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ead2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ead6:	d106      	bne.n	800eae6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ead8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eada:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eade:	d102      	bne.n	800eae6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eae0:	4b59      	ldr	r3, [pc, #356]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800eae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eae4:	e002      	b.n	800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eae6:	2300      	movs	r3, #0
 800eae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800eaea:	e386      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eaec:	e385      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800eaee:	4b57      	ldr	r3, [pc, #348]	@ (800ec4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800eaf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eaf2:	e382      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eaf8:	e37f      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800eafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eafe:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800eb02:	430b      	orrs	r3, r1
 800eb04:	f040 80a7 	bne.w	800ec56 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800eb08:	4b4c      	ldr	r3, [pc, #304]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eb0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb0c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800eb10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800eb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eb18:	d055      	beq.n	800ebc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eb20:	f200 8096 	bhi.w	800ec50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800eb24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800eb2a:	f000 8084 	beq.w	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800eb34:	f200 808c 	bhi.w	800ec50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800eb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb3e:	d030      	beq.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800eb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb46:	f200 8083 	bhi.w	800ec50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d004      	beq.n	800eb5a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800eb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eb56:	d012      	beq.n	800eb7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800eb58:	e07a      	b.n	800ec50 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eb5a:	4b38      	ldr	r3, [pc, #224]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb66:	d107      	bne.n	800eb78 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f000 fe0b 	bl	800f788 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb76:	e340      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb7c:	e33d      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb7e:	4b2f      	ldr	r3, [pc, #188]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eb86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eb8a:	d107      	bne.n	800eb9c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb8c:	f107 0318 	add.w	r3, r7, #24
 800eb90:	4618      	mov	r0, r3
 800eb92:	f000 fb51 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb9a:	e32e      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eba0:	e32b      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eba2:	4b26      	ldr	r3, [pc, #152]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ebaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ebae:	d107      	bne.n	800ebc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebb0:	f107 030c 	add.w	r3, r7, #12
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f000 fc93 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ebbe:	e31c      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ebc4:	e319      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ebc6:	4b1d      	ldr	r3, [pc, #116]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ebc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ebce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ebd0:	4b1a      	ldr	r3, [pc, #104]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f003 0304 	and.w	r3, r3, #4
 800ebd8:	2b04      	cmp	r3, #4
 800ebda:	d10c      	bne.n	800ebf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ebdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d109      	bne.n	800ebf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ebe2:	4b16      	ldr	r3, [pc, #88]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	08db      	lsrs	r3, r3, #3
 800ebe8:	f003 0303 	and.w	r3, r3, #3
 800ebec:	4a14      	ldr	r2, [pc, #80]	@ (800ec40 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ebee:	fa22 f303 	lsr.w	r3, r2, r3
 800ebf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebf4:	e01e      	b.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ebf6:	4b11      	ldr	r3, [pc, #68]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec02:	d106      	bne.n	800ec12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ec04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec0a:	d102      	bne.n	800ec12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ec0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ec0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec10:	e010      	b.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ec12:	4b0a      	ldr	r3, [pc, #40]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec1e:	d106      	bne.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ec20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec26:	d102      	bne.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ec28:	4b07      	ldr	r3, [pc, #28]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ec2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec2c:	e002      	b.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ec32:	e2e2      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec34:	e2e1      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ec36:	4b05      	ldr	r3, [pc, #20]	@ (800ec4c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ec38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec3a:	e2de      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec3c:	58024400 	.word	0x58024400
 800ec40:	03d09000 	.word	0x03d09000
 800ec44:	003d0900 	.word	0x003d0900
 800ec48:	017d7840 	.word	0x017d7840
 800ec4c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ec50:	2300      	movs	r3, #0
 800ec52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec54:	e2d1      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ec56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec5a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ec5e:	430b      	orrs	r3, r1
 800ec60:	f040 809c 	bne.w	800ed9c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ec64:	4b93      	ldr	r3, [pc, #588]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ec66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec68:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ec6c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ec6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ec74:	d054      	beq.n	800ed20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ec76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ec7c:	f200 808b 	bhi.w	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ec80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ec86:	f000 8083 	beq.w	800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ec90:	f200 8081 	bhi.w	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ec94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec9a:	d02f      	beq.n	800ecfc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ec9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eca2:	d878      	bhi.n	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800eca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d004      	beq.n	800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ecaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ecb0:	d012      	beq.n	800ecd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ecb2:	e070      	b.n	800ed96 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ecb4:	4b7f      	ldr	r3, [pc, #508]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ecc0:	d107      	bne.n	800ecd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f000 fd5e 	bl	800f788 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecd0:	e293      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecd6:	e290      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ecd8:	4b76      	ldr	r3, [pc, #472]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ece0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ece4:	d107      	bne.n	800ecf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ece6:	f107 0318 	add.w	r3, r7, #24
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 faa4 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecf4:	e281      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecfa:	e27e      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ecfc:	4b6d      	ldr	r3, [pc, #436]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed08:	d107      	bne.n	800ed1a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed0a:	f107 030c 	add.w	r3, r7, #12
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f000 fbe6 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed18:	e26f      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed1e:	e26c      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ed20:	4b64      	ldr	r3, [pc, #400]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ed22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ed28:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed2a:	4b62      	ldr	r3, [pc, #392]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 0304 	and.w	r3, r3, #4
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	d10c      	bne.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ed36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d109      	bne.n	800ed50 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed3c:	4b5d      	ldr	r3, [pc, #372]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	08db      	lsrs	r3, r3, #3
 800ed42:	f003 0303 	and.w	r3, r3, #3
 800ed46:	4a5c      	ldr	r2, [pc, #368]	@ (800eeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ed48:	fa22 f303 	lsr.w	r3, r2, r3
 800ed4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed4e:	e01e      	b.n	800ed8e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed50:	4b58      	ldr	r3, [pc, #352]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed5c:	d106      	bne.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ed5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed64:	d102      	bne.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ed66:	4b55      	ldr	r3, [pc, #340]	@ (800eebc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ed68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed6a:	e010      	b.n	800ed8e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed6c:	4b51      	ldr	r3, [pc, #324]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed78:	d106      	bne.n	800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ed7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed80:	d102      	bne.n	800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ed82:	4b4f      	ldr	r3, [pc, #316]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ed84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed86:	e002      	b.n	800ed8e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ed8c:	e235      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ed8e:	e234      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ed90:	4b4c      	ldr	r3, [pc, #304]	@ (800eec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ed92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed94:	e231      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ed96:	2300      	movs	r3, #0
 800ed98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed9a:	e22e      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ed9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eda0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800eda4:	430b      	orrs	r3, r1
 800eda6:	f040 808f 	bne.w	800eec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800edaa:	4b42      	ldr	r3, [pc, #264]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800edac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edae:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800edb2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800edb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800edba:	d06b      	beq.n	800ee94 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800edbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800edc2:	d874      	bhi.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800edc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800edca:	d056      	beq.n	800ee7a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800edcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800edd2:	d86c      	bhi.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800edd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edd6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800edda:	d03b      	beq.n	800ee54 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800eddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ede2:	d864      	bhi.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ede4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ede6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800edea:	d021      	beq.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800edec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800edf2:	d85c      	bhi.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800edf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d004      	beq.n	800ee04 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800edfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee00:	d004      	beq.n	800ee0c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ee02:	e054      	b.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ee04:	f7fe fa4c 	bl	800d2a0 <HAL_RCC_GetPCLK1Freq>
 800ee08:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee0a:	e1f6      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee0c:	4b29      	ldr	r3, [pc, #164]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee18:	d107      	bne.n	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee1a:	f107 0318 	add.w	r3, r7, #24
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f000 fa0a 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee28:	e1e7      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee2e:	e1e4      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee30:	4b20      	ldr	r3, [pc, #128]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee3c:	d107      	bne.n	800ee4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee3e:	f107 030c 	add.w	r3, r7, #12
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 fb4c 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee4c:	e1d5      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee52:	e1d2      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ee54:	4b17      	ldr	r3, [pc, #92]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f003 0304 	and.w	r3, r3, #4
 800ee5c:	2b04      	cmp	r3, #4
 800ee5e:	d109      	bne.n	800ee74 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee60:	4b14      	ldr	r3, [pc, #80]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	08db      	lsrs	r3, r3, #3
 800ee66:	f003 0303 	and.w	r3, r3, #3
 800ee6a:	4a13      	ldr	r2, [pc, #76]	@ (800eeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ee6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ee70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee72:	e1c2      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee78:	e1bf      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ee7a:	4b0e      	ldr	r3, [pc, #56]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee86:	d102      	bne.n	800ee8e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ee88:	4b0c      	ldr	r3, [pc, #48]	@ (800eebc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ee8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee8c:	e1b5      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee92:	e1b2      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ee94:	4b07      	ldr	r3, [pc, #28]	@ (800eeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eea0:	d102      	bne.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800eea2:	4b07      	ldr	r3, [pc, #28]	@ (800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800eea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eea6:	e1a8      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eeac:	e1a5      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eeb2:	e1a2      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eeb4:	58024400 	.word	0x58024400
 800eeb8:	03d09000 	.word	0x03d09000
 800eebc:	003d0900 	.word	0x003d0900
 800eec0:	017d7840 	.word	0x017d7840
 800eec4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800eec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eecc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800eed0:	430b      	orrs	r3, r1
 800eed2:	d173      	bne.n	800efbc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800eed4:	4b9c      	ldr	r3, [pc, #624]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800eed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800eedc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800eede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eee4:	d02f      	beq.n	800ef46 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eeec:	d863      	bhi.n	800efb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800eeee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d004      	beq.n	800eefe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800eef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eefa:	d012      	beq.n	800ef22 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800eefc:	e05b      	b.n	800efb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eefe:	4b92      	ldr	r3, [pc, #584]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ef06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ef0a:	d107      	bne.n	800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef0c:	f107 0318 	add.w	r3, r7, #24
 800ef10:	4618      	mov	r0, r3
 800ef12:	f000 f991 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef1a:	e16e      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef20:	e16b      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ef22:	4b89      	ldr	r3, [pc, #548]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ef2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef2e:	d107      	bne.n	800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef30:	f107 030c 	add.w	r3, r7, #12
 800ef34:	4618      	mov	r0, r3
 800ef36:	f000 fad3 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef3e:	e15c      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef40:	2300      	movs	r3, #0
 800ef42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef44:	e159      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ef46:	4b80      	ldr	r3, [pc, #512]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ef48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ef4e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ef50:	4b7d      	ldr	r3, [pc, #500]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f003 0304 	and.w	r3, r3, #4
 800ef58:	2b04      	cmp	r3, #4
 800ef5a:	d10c      	bne.n	800ef76 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ef5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d109      	bne.n	800ef76 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ef62:	4b79      	ldr	r3, [pc, #484]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	08db      	lsrs	r3, r3, #3
 800ef68:	f003 0303 	and.w	r3, r3, #3
 800ef6c:	4a77      	ldr	r2, [pc, #476]	@ (800f14c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ef6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef74:	e01e      	b.n	800efb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ef76:	4b74      	ldr	r3, [pc, #464]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef82:	d106      	bne.n	800ef92 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ef84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef8a:	d102      	bne.n	800ef92 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ef8c:	4b70      	ldr	r3, [pc, #448]	@ (800f150 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ef8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef90:	e010      	b.n	800efb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ef92:	4b6d      	ldr	r3, [pc, #436]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef9e:	d106      	bne.n	800efae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800efa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efa6:	d102      	bne.n	800efae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800efa8:	4b6a      	ldr	r3, [pc, #424]	@ (800f154 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800efaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efac:	e002      	b.n	800efb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800efb2:	e122      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800efb4:	e121      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efba:	e11e      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800efbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efc0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800efc4:	430b      	orrs	r3, r1
 800efc6:	d133      	bne.n	800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800efc8:	4b5f      	ldr	r3, [pc, #380]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800efca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800efd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800efd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d004      	beq.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800efd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efde:	d012      	beq.n	800f006 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800efe0:	e023      	b.n	800f02a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800efe2:	4b59      	ldr	r3, [pc, #356]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efee:	d107      	bne.n	800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fbc7 	bl	800f788 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800effa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800effc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800effe:	e0fc      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f000:	2300      	movs	r3, #0
 800f002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f004:	e0f9      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f006:	4b50      	ldr	r3, [pc, #320]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f00e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f012:	d107      	bne.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f014:	f107 0318 	add.w	r3, r7, #24
 800f018:	4618      	mov	r0, r3
 800f01a:	f000 f90d 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f01e:	6a3b      	ldr	r3, [r7, #32]
 800f020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f022:	e0ea      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f028:	e0e7      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f02e:	e0e4      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f030:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f034:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f038:	430b      	orrs	r3, r1
 800f03a:	f040 808d 	bne.w	800f158 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f03e:	4b42      	ldr	r3, [pc, #264]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f042:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f046:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f04a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f04e:	d06b      	beq.n	800f128 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f056:	d874      	bhi.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f05e:	d056      	beq.n	800f10e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f066:	d86c      	bhi.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f06a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f06e:	d03b      	beq.n	800f0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f072:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f076:	d864      	bhi.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f07e:	d021      	beq.n	800f0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f086:	d85c      	bhi.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d004      	beq.n	800f098 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f090:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f094:	d004      	beq.n	800f0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f096:	e054      	b.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f098:	f000 f8b8 	bl	800f20c <HAL_RCCEx_GetD3PCLK1Freq>
 800f09c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f09e:	e0ac      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0a0:	4b29      	ldr	r3, [pc, #164]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f0a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f0ac:	d107      	bne.n	800f0be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0ae:	f107 0318 	add.w	r3, r7, #24
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f000 f8c0 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0bc:	e09d      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0c2:	e09a      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f0c4:	4b20      	ldr	r3, [pc, #128]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f0cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0d0:	d107      	bne.n	800f0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0d2:	f107 030c 	add.w	r3, r7, #12
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 fa02 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0e0:	e08b      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0e6:	e088      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f0e8:	4b17      	ldr	r3, [pc, #92]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f003 0304 	and.w	r3, r3, #4
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	d109      	bne.n	800f108 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f0f4:	4b14      	ldr	r3, [pc, #80]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	08db      	lsrs	r3, r3, #3
 800f0fa:	f003 0303 	and.w	r3, r3, #3
 800f0fe:	4a13      	ldr	r2, [pc, #76]	@ (800f14c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f100:	fa22 f303 	lsr.w	r3, r2, r3
 800f104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f106:	e078      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f108:	2300      	movs	r3, #0
 800f10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f10c:	e075      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f10e:	4b0e      	ldr	r3, [pc, #56]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f11a:	d102      	bne.n	800f122 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f11c:	4b0c      	ldr	r3, [pc, #48]	@ (800f150 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f120:	e06b      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f122:	2300      	movs	r3, #0
 800f124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f126:	e068      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f128:	4b07      	ldr	r3, [pc, #28]	@ (800f148 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f130:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f134:	d102      	bne.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f136:	4b07      	ldr	r3, [pc, #28]	@ (800f154 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f13a:	e05e      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f140:	e05b      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f142:	2300      	movs	r3, #0
 800f144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f146:	e058      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f148:	58024400 	.word	0x58024400
 800f14c:	03d09000 	.word	0x03d09000
 800f150:	003d0900 	.word	0x003d0900
 800f154:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f15c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f160:	430b      	orrs	r3, r1
 800f162:	d148      	bne.n	800f1f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f164:	4b27      	ldr	r3, [pc, #156]	@ (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f168:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f16c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f174:	d02a      	beq.n	800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f17c:	d838      	bhi.n	800f1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f180:	2b00      	cmp	r3, #0
 800f182:	d004      	beq.n	800f18e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f18a:	d00d      	beq.n	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f18c:	e030      	b.n	800f1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f18e:	4b1d      	ldr	r3, [pc, #116]	@ (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f196:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f19a:	d102      	bne.n	800f1a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f19c:	4b1a      	ldr	r3, [pc, #104]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f1a0:	e02b      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1a6:	e028      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f1a8:	4b16      	ldr	r3, [pc, #88]	@ (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f1b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f1b4:	d107      	bne.n	800f1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f1b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f000 fae4 	bl	800f788 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f1c4:	e019      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1ca:	e016      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f1d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f1d8:	d107      	bne.n	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1da:	f107 0318 	add.w	r3, r7, #24
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 f82a 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f1e8:	e007      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1ee:	e004      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1f4:	e001      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3740      	adds	r7, #64	@ 0x40
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	58024400 	.word	0x58024400
 800f208:	017d7840 	.word	0x017d7840

0800f20c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f210:	f7fe f816 	bl	800d240 <HAL_RCC_GetHCLKFreq>
 800f214:	4602      	mov	r2, r0
 800f216:	4b06      	ldr	r3, [pc, #24]	@ (800f230 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	091b      	lsrs	r3, r3, #4
 800f21c:	f003 0307 	and.w	r3, r3, #7
 800f220:	4904      	ldr	r1, [pc, #16]	@ (800f234 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f222:	5ccb      	ldrb	r3, [r1, r3]
 800f224:	f003 031f 	and.w	r3, r3, #31
 800f228:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	58024400 	.word	0x58024400
 800f234:	080167c8 	.word	0x080167c8

0800f238 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f238:	b480      	push	{r7}
 800f23a:	b089      	sub	sp, #36	@ 0x24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f240:	4ba1      	ldr	r3, [pc, #644]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f244:	f003 0303 	and.w	r3, r3, #3
 800f248:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f24a:	4b9f      	ldr	r3, [pc, #636]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f24e:	0b1b      	lsrs	r3, r3, #12
 800f250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f254:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f256:	4b9c      	ldr	r3, [pc, #624]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f25a:	091b      	lsrs	r3, r3, #4
 800f25c:	f003 0301 	and.w	r3, r3, #1
 800f260:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f262:	4b99      	ldr	r3, [pc, #612]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f266:	08db      	lsrs	r3, r3, #3
 800f268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f26c:	693a      	ldr	r2, [r7, #16]
 800f26e:	fb02 f303 	mul.w	r3, r2, r3
 800f272:	ee07 3a90 	vmov	s15, r3
 800f276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f27a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2b00      	cmp	r3, #0
 800f282:	f000 8111 	beq.w	800f4a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	2b02      	cmp	r3, #2
 800f28a:	f000 8083 	beq.w	800f394 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	2b02      	cmp	r3, #2
 800f292:	f200 80a1 	bhi.w	800f3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d003      	beq.n	800f2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d056      	beq.n	800f350 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f2a2:	e099      	b.n	800f3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2a4:	4b88      	ldr	r3, [pc, #544]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f003 0320 	and.w	r3, r3, #32
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d02d      	beq.n	800f30c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2b0:	4b85      	ldr	r3, [pc, #532]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	08db      	lsrs	r3, r3, #3
 800f2b6:	f003 0303 	and.w	r3, r3, #3
 800f2ba:	4a84      	ldr	r2, [pc, #528]	@ (800f4cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	ee07 3a90 	vmov	s15, r3
 800f2c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	ee07 3a90 	vmov	s15, r3
 800f2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2da:	4b7b      	ldr	r3, [pc, #492]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2e2:	ee07 3a90 	vmov	s15, r3
 800f2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f306:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f30a:	e087      	b.n	800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	ee07 3a90 	vmov	s15, r3
 800f312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f316:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f31e:	4b6a      	ldr	r3, [pc, #424]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f326:	ee07 3a90 	vmov	s15, r3
 800f32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f332:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f34a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f34e:	e065      	b.n	800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	ee07 3a90 	vmov	s15, r3
 800f356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f35a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f362:	4b59      	ldr	r3, [pc, #356]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f36a:	ee07 3a90 	vmov	s15, r3
 800f36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f372:	ed97 6a03 	vldr	s12, [r7, #12]
 800f376:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f38e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f392:	e043      	b.n	800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	ee07 3a90 	vmov	s15, r3
 800f39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f39e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f4dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3a6:	4b48      	ldr	r3, [pc, #288]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3ae:	ee07 3a90 	vmov	s15, r3
 800f3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3d6:	e021      	b.n	800f41c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	ee07 3a90 	vmov	s15, r3
 800f3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3ea:	4b37      	ldr	r3, [pc, #220]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3f2:	ee07 3a90 	vmov	s15, r3
 800f3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f40a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f41a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f41c:	4b2a      	ldr	r3, [pc, #168]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f420:	0a5b      	lsrs	r3, r3, #9
 800f422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f426:	ee07 3a90 	vmov	s15, r3
 800f42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f42e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f432:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f436:	edd7 6a07 	vldr	s13, [r7, #28]
 800f43a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f43e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f442:	ee17 2a90 	vmov	r2, s15
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f44a:	4b1f      	ldr	r3, [pc, #124]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f44e:	0c1b      	lsrs	r3, r3, #16
 800f450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f454:	ee07 3a90 	vmov	s15, r3
 800f458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f45c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f460:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f464:	edd7 6a07 	vldr	s13, [r7, #28]
 800f468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f46c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f470:	ee17 2a90 	vmov	r2, s15
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f478:	4b13      	ldr	r3, [pc, #76]	@ (800f4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f47a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f47c:	0e1b      	lsrs	r3, r3, #24
 800f47e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f482:	ee07 3a90 	vmov	s15, r3
 800f486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f48a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f48e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f492:	edd7 6a07 	vldr	s13, [r7, #28]
 800f496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f49e:	ee17 2a90 	vmov	r2, s15
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f4a6:	e008      	b.n	800f4ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	609a      	str	r2, [r3, #8]
}
 800f4ba:	bf00      	nop
 800f4bc:	3724      	adds	r7, #36	@ 0x24
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	58024400 	.word	0x58024400
 800f4cc:	03d09000 	.word	0x03d09000
 800f4d0:	46000000 	.word	0x46000000
 800f4d4:	4c742400 	.word	0x4c742400
 800f4d8:	4a742400 	.word	0x4a742400
 800f4dc:	4bbebc20 	.word	0x4bbebc20

0800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b089      	sub	sp, #36	@ 0x24
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f4e8:	4ba1      	ldr	r3, [pc, #644]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4ec:	f003 0303 	and.w	r3, r3, #3
 800f4f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f4f2:	4b9f      	ldr	r3, [pc, #636]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4f6:	0d1b      	lsrs	r3, r3, #20
 800f4f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f4fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f4fe:	4b9c      	ldr	r3, [pc, #624]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f502:	0a1b      	lsrs	r3, r3, #8
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f50a:	4b99      	ldr	r3, [pc, #612]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f50e:	08db      	lsrs	r3, r3, #3
 800f510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f514:	693a      	ldr	r2, [r7, #16]
 800f516:	fb02 f303 	mul.w	r3, r2, r3
 800f51a:	ee07 3a90 	vmov	s15, r3
 800f51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f522:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 8111 	beq.w	800f750 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	2b02      	cmp	r3, #2
 800f532:	f000 8083 	beq.w	800f63c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	2b02      	cmp	r3, #2
 800f53a:	f200 80a1 	bhi.w	800f680 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d003      	beq.n	800f54c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	2b01      	cmp	r3, #1
 800f548:	d056      	beq.n	800f5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f54a:	e099      	b.n	800f680 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f54c:	4b88      	ldr	r3, [pc, #544]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f003 0320 	and.w	r3, r3, #32
 800f554:	2b00      	cmp	r3, #0
 800f556:	d02d      	beq.n	800f5b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f558:	4b85      	ldr	r3, [pc, #532]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	08db      	lsrs	r3, r3, #3
 800f55e:	f003 0303 	and.w	r3, r3, #3
 800f562:	4a84      	ldr	r2, [pc, #528]	@ (800f774 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f564:	fa22 f303 	lsr.w	r3, r2, r3
 800f568:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	ee07 3a90 	vmov	s15, r3
 800f570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	ee07 3a90 	vmov	s15, r3
 800f57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f582:	4b7b      	ldr	r3, [pc, #492]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f58a:	ee07 3a90 	vmov	s15, r3
 800f58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f592:	ed97 6a03 	vldr	s12, [r7, #12]
 800f596:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f5b2:	e087      	b.n	800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	ee07 3a90 	vmov	s15, r3
 800f5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f77c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5c6:	4b6a      	ldr	r3, [pc, #424]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ce:	ee07 3a90 	vmov	s15, r3
 800f5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f5f6:	e065      	b.n	800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	ee07 3a90 	vmov	s15, r3
 800f5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f602:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f780 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f60a:	4b59      	ldr	r3, [pc, #356]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f612:	ee07 3a90 	vmov	s15, r3
 800f616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f61e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f62a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f63a:	e043      	b.n	800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	ee07 3a90 	vmov	s15, r3
 800f642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f646:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f784 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f64e:	4b48      	ldr	r3, [pc, #288]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f656:	ee07 3a90 	vmov	s15, r3
 800f65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f662:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f66e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f67a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f67e:	e021      	b.n	800f6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	ee07 3a90 	vmov	s15, r3
 800f686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f68a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f780 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f692:	4b37      	ldr	r3, [pc, #220]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f69a:	ee07 3a90 	vmov	s15, r3
 800f69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f778 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f6c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f6c4:	4b2a      	ldr	r3, [pc, #168]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f6c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6c8:	0a5b      	lsrs	r3, r3, #9
 800f6ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6ce:	ee07 3a90 	vmov	s15, r3
 800f6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f6da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f6de:	edd7 6a07 	vldr	s13, [r7, #28]
 800f6e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f6ea:	ee17 2a90 	vmov	r2, s15
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f6f2:	4b1f      	ldr	r3, [pc, #124]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6f6:	0c1b      	lsrs	r3, r3, #16
 800f6f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6fc:	ee07 3a90 	vmov	s15, r3
 800f700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f704:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f708:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f70c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f718:	ee17 2a90 	vmov	r2, s15
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f720:	4b13      	ldr	r3, [pc, #76]	@ (800f770 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f724:	0e1b      	lsrs	r3, r3, #24
 800f726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f72a:	ee07 3a90 	vmov	s15, r3
 800f72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f73a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f73e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f746:	ee17 2a90 	vmov	r2, s15
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f74e:	e008      	b.n	800f762 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2200      	movs	r2, #0
 800f754:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	609a      	str	r2, [r3, #8]
}
 800f762:	bf00      	nop
 800f764:	3724      	adds	r7, #36	@ 0x24
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	58024400 	.word	0x58024400
 800f774:	03d09000 	.word	0x03d09000
 800f778:	46000000 	.word	0x46000000
 800f77c:	4c742400 	.word	0x4c742400
 800f780:	4a742400 	.word	0x4a742400
 800f784:	4bbebc20 	.word	0x4bbebc20

0800f788 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f788:	b480      	push	{r7}
 800f78a:	b089      	sub	sp, #36	@ 0x24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f790:	4ba0      	ldr	r3, [pc, #640]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f794:	f003 0303 	and.w	r3, r3, #3
 800f798:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f79a:	4b9e      	ldr	r3, [pc, #632]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f79e:	091b      	lsrs	r3, r3, #4
 800f7a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f7a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f7a6:	4b9b      	ldr	r3, [pc, #620]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7aa:	f003 0301 	and.w	r3, r3, #1
 800f7ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f7b0:	4b98      	ldr	r3, [pc, #608]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7b4:	08db      	lsrs	r3, r3, #3
 800f7b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	fb02 f303 	mul.w	r3, r2, r3
 800f7c0:	ee07 3a90 	vmov	s15, r3
 800f7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 8111 	beq.w	800f9f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f7d4:	69bb      	ldr	r3, [r7, #24]
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	f000 8083 	beq.w	800f8e2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f7dc:	69bb      	ldr	r3, [r7, #24]
 800f7de:	2b02      	cmp	r3, #2
 800f7e0:	f200 80a1 	bhi.w	800f926 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d003      	beq.n	800f7f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d056      	beq.n	800f89e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f7f0:	e099      	b.n	800f926 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7f2:	4b88      	ldr	r3, [pc, #544]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f003 0320 	and.w	r3, r3, #32
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d02d      	beq.n	800f85a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f7fe:	4b85      	ldr	r3, [pc, #532]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	08db      	lsrs	r3, r3, #3
 800f804:	f003 0303 	and.w	r3, r3, #3
 800f808:	4a83      	ldr	r2, [pc, #524]	@ (800fa18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f80a:	fa22 f303 	lsr.w	r3, r2, r3
 800f80e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	ee07 3a90 	vmov	s15, r3
 800f816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	ee07 3a90 	vmov	s15, r3
 800f820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f828:	4b7a      	ldr	r3, [pc, #488]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f82a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f830:	ee07 3a90 	vmov	s15, r3
 800f834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f838:	ed97 6a03 	vldr	s12, [r7, #12]
 800f83c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800fa1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f848:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f84c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f850:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f854:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f858:	e087      	b.n	800f96a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	ee07 3a90 	vmov	s15, r3
 800f860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f864:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800fa20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f86c:	4b69      	ldr	r3, [pc, #420]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f874:	ee07 3a90 	vmov	s15, r3
 800f878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f87c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f880:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800fa1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f88c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f894:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f898:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f89c:	e065      	b.n	800f96a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	ee07 3a90 	vmov	s15, r3
 800f8a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8a8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800fa24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f8ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8b0:	4b58      	ldr	r3, [pc, #352]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8b8:	ee07 3a90 	vmov	s15, r3
 800f8bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8c4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800fa1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f8c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8e0:	e043      	b.n	800f96a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	ee07 3a90 	vmov	s15, r3
 800f8e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8ec:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800fa28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f8f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8f4:	4b47      	ldr	r3, [pc, #284]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8fc:	ee07 3a90 	vmov	s15, r3
 800f900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f904:	ed97 6a03 	vldr	s12, [r7, #12]
 800f908:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800fa1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f90c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f914:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f91c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f920:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f924:	e021      	b.n	800f96a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	ee07 3a90 	vmov	s15, r3
 800f92c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f930:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fa20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f938:	4b36      	ldr	r3, [pc, #216]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f940:	ee07 3a90 	vmov	s15, r3
 800f944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f948:	ed97 6a03 	vldr	s12, [r7, #12]
 800f94c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fa1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f958:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f95c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f960:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f964:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f968:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f96a:	4b2a      	ldr	r3, [pc, #168]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f96c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f96e:	0a5b      	lsrs	r3, r3, #9
 800f970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f974:	ee07 3a90 	vmov	s15, r3
 800f978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f97c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f980:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f984:	edd7 6a07 	vldr	s13, [r7, #28]
 800f988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f98c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f990:	ee17 2a90 	vmov	r2, s15
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f998:	4b1e      	ldr	r3, [pc, #120]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f99a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f99c:	0c1b      	lsrs	r3, r3, #16
 800f99e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9a2:	ee07 3a90 	vmov	s15, r3
 800f9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9be:	ee17 2a90 	vmov	r2, s15
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f9c6:	4b13      	ldr	r3, [pc, #76]	@ (800fa14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9ca:	0e1b      	lsrs	r3, r3, #24
 800f9cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9d0:	ee07 3a90 	vmov	s15, r3
 800f9d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9ec:	ee17 2a90 	vmov	r2, s15
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f9f4:	e008      	b.n	800fa08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	609a      	str	r2, [r3, #8]
}
 800fa08:	bf00      	nop
 800fa0a:	3724      	adds	r7, #36	@ 0x24
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	58024400 	.word	0x58024400
 800fa18:	03d09000 	.word	0x03d09000
 800fa1c:	46000000 	.word	0x46000000
 800fa20:	4c742400 	.word	0x4c742400
 800fa24:	4a742400 	.word	0x4a742400
 800fa28:	4bbebc20 	.word	0x4bbebc20

0800fa2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fa36:	2300      	movs	r3, #0
 800fa38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fa3a:	4b53      	ldr	r3, [pc, #332]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fa3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa3e:	f003 0303 	and.w	r3, r3, #3
 800fa42:	2b03      	cmp	r3, #3
 800fa44:	d101      	bne.n	800fa4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fa46:	2301      	movs	r3, #1
 800fa48:	e099      	b.n	800fb7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fa4a:	4b4f      	ldr	r3, [pc, #316]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	4a4e      	ldr	r2, [pc, #312]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fa50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fa54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fa56:	f7f2 f997 	bl	8001d88 <HAL_GetTick>
 800fa5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fa5c:	e008      	b.n	800fa70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fa5e:	f7f2 f993 	bl	8001d88 <HAL_GetTick>
 800fa62:	4602      	mov	r2, r0
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	2b02      	cmp	r3, #2
 800fa6a:	d901      	bls.n	800fa70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fa6c:	2303      	movs	r3, #3
 800fa6e:	e086      	b.n	800fb7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fa70:	4b45      	ldr	r3, [pc, #276]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1f0      	bne.n	800fa5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fa7c:	4b42      	ldr	r3, [pc, #264]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fa7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa80:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	031b      	lsls	r3, r3, #12
 800fa8a:	493f      	ldr	r1, [pc, #252]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	628b      	str	r3, [r1, #40]	@ 0x28
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	3b01      	subs	r3, #1
 800fa96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	025b      	lsls	r3, r3, #9
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	431a      	orrs	r2, r3
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	3b01      	subs	r3, #1
 800faac:	041b      	lsls	r3, r3, #16
 800faae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fab2:	431a      	orrs	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	691b      	ldr	r3, [r3, #16]
 800fab8:	3b01      	subs	r3, #1
 800faba:	061b      	lsls	r3, r3, #24
 800fabc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fac0:	4931      	ldr	r1, [pc, #196]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fac2:	4313      	orrs	r3, r2
 800fac4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fac6:	4b30      	ldr	r3, [pc, #192]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	695b      	ldr	r3, [r3, #20]
 800fad2:	492d      	ldr	r1, [pc, #180]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fad4:	4313      	orrs	r3, r2
 800fad6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fad8:	4b2b      	ldr	r3, [pc, #172]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fadc:	f023 0220 	bic.w	r2, r3, #32
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	699b      	ldr	r3, [r3, #24]
 800fae4:	4928      	ldr	r1, [pc, #160]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fae6:	4313      	orrs	r3, r2
 800fae8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800faea:	4b27      	ldr	r3, [pc, #156]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800faec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faee:	4a26      	ldr	r2, [pc, #152]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800faf0:	f023 0310 	bic.w	r3, r3, #16
 800faf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800faf6:	4b24      	ldr	r3, [pc, #144]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800faf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fafa:	4b24      	ldr	r3, [pc, #144]	@ (800fb8c <RCCEx_PLL2_Config+0x160>)
 800fafc:	4013      	ands	r3, r2
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	69d2      	ldr	r2, [r2, #28]
 800fb02:	00d2      	lsls	r2, r2, #3
 800fb04:	4920      	ldr	r1, [pc, #128]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb06:	4313      	orrs	r3, r2
 800fb08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fb0a:	4b1f      	ldr	r3, [pc, #124]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb0e:	4a1e      	ldr	r2, [pc, #120]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb10:	f043 0310 	orr.w	r3, r3, #16
 800fb14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d106      	bne.n	800fb2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fb1c:	4b1a      	ldr	r3, [pc, #104]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb20:	4a19      	ldr	r2, [pc, #100]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fb26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fb28:	e00f      	b.n	800fb4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d106      	bne.n	800fb3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fb30:	4b15      	ldr	r3, [pc, #84]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb34:	4a14      	ldr	r2, [pc, #80]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fb3c:	e005      	b.n	800fb4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fb3e:	4b12      	ldr	r3, [pc, #72]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb42:	4a11      	ldr	r2, [pc, #68]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fb48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fb4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a0e      	ldr	r2, [pc, #56]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fb54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb56:	f7f2 f917 	bl	8001d88 <HAL_GetTick>
 800fb5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fb5c:	e008      	b.n	800fb70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fb5e:	f7f2 f913 	bl	8001d88 <HAL_GetTick>
 800fb62:	4602      	mov	r2, r0
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d901      	bls.n	800fb70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fb6c:	2303      	movs	r3, #3
 800fb6e:	e006      	b.n	800fb7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fb70:	4b05      	ldr	r3, [pc, #20]	@ (800fb88 <RCCEx_PLL2_Config+0x15c>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0f0      	beq.n	800fb5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	58024400 	.word	0x58024400
 800fb8c:	ffff0007 	.word	0xffff0007

0800fb90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fb9e:	4b53      	ldr	r3, [pc, #332]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fba2:	f003 0303 	and.w	r3, r3, #3
 800fba6:	2b03      	cmp	r3, #3
 800fba8:	d101      	bne.n	800fbae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fbaa:	2301      	movs	r3, #1
 800fbac:	e099      	b.n	800fce2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fbae:	4b4f      	ldr	r3, [pc, #316]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a4e      	ldr	r2, [pc, #312]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fbb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fbb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fbba:	f7f2 f8e5 	bl	8001d88 <HAL_GetTick>
 800fbbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fbc0:	e008      	b.n	800fbd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fbc2:	f7f2 f8e1 	bl	8001d88 <HAL_GetTick>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	d901      	bls.n	800fbd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fbd0:	2303      	movs	r3, #3
 800fbd2:	e086      	b.n	800fce2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fbd4:	4b45      	ldr	r3, [pc, #276]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1f0      	bne.n	800fbc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fbe0:	4b42      	ldr	r3, [pc, #264]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbe4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	051b      	lsls	r3, r3, #20
 800fbee:	493f      	ldr	r1, [pc, #252]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	628b      	str	r3, [r1, #40]	@ 0x28
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	3b01      	subs	r3, #1
 800fc04:	025b      	lsls	r3, r3, #9
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	431a      	orrs	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	68db      	ldr	r3, [r3, #12]
 800fc0e:	3b01      	subs	r3, #1
 800fc10:	041b      	lsls	r3, r3, #16
 800fc12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fc16:	431a      	orrs	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	691b      	ldr	r3, [r3, #16]
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	061b      	lsls	r3, r3, #24
 800fc20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fc24:	4931      	ldr	r1, [pc, #196]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc26:	4313      	orrs	r3, r2
 800fc28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fc2a:	4b30      	ldr	r3, [pc, #192]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	695b      	ldr	r3, [r3, #20]
 800fc36:	492d      	ldr	r1, [pc, #180]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fc3c:	4b2b      	ldr	r3, [pc, #172]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	699b      	ldr	r3, [r3, #24]
 800fc48:	4928      	ldr	r1, [pc, #160]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fc4e:	4b27      	ldr	r3, [pc, #156]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc52:	4a26      	ldr	r2, [pc, #152]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fc5a:	4b24      	ldr	r3, [pc, #144]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fc5e:	4b24      	ldr	r3, [pc, #144]	@ (800fcf0 <RCCEx_PLL3_Config+0x160>)
 800fc60:	4013      	ands	r3, r2
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	69d2      	ldr	r2, [r2, #28]
 800fc66:	00d2      	lsls	r2, r2, #3
 800fc68:	4920      	ldr	r1, [pc, #128]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fc6e:	4b1f      	ldr	r3, [pc, #124]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc72:	4a1e      	ldr	r2, [pc, #120]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fc78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d106      	bne.n	800fc8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fc80:	4b1a      	ldr	r3, [pc, #104]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc84:	4a19      	ldr	r2, [pc, #100]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800fc8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fc8c:	e00f      	b.n	800fcae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d106      	bne.n	800fca2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fc94:	4b15      	ldr	r3, [pc, #84]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc98:	4a14      	ldr	r2, [pc, #80]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fc9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fc9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fca0:	e005      	b.n	800fcae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fca2:	4b12      	ldr	r3, [pc, #72]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca6:	4a11      	ldr	r2, [pc, #68]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fca8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fcac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fcae:	4b0f      	ldr	r3, [pc, #60]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a0e      	ldr	r2, [pc, #56]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fcb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fcb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fcba:	f7f2 f865 	bl	8001d88 <HAL_GetTick>
 800fcbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fcc0:	e008      	b.n	800fcd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fcc2:	f7f2 f861 	bl	8001d88 <HAL_GetTick>
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	2b02      	cmp	r3, #2
 800fcce:	d901      	bls.n	800fcd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fcd0:	2303      	movs	r3, #3
 800fcd2:	e006      	b.n	800fce2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fcd4:	4b05      	ldr	r3, [pc, #20]	@ (800fcec <RCCEx_PLL3_Config+0x15c>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d0f0      	beq.n	800fcc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	58024400 	.word	0x58024400
 800fcf0:	ffff0007 	.word	0xffff0007

0800fcf4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d101      	bne.n	800fd06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fd02:	2301      	movs	r3, #1
 800fd04:	e10f      	b.n	800ff26 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a87      	ldr	r2, [pc, #540]	@ (800ff30 <HAL_SPI_Init+0x23c>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d00f      	beq.n	800fd36 <HAL_SPI_Init+0x42>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4a86      	ldr	r2, [pc, #536]	@ (800ff34 <HAL_SPI_Init+0x240>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d00a      	beq.n	800fd36 <HAL_SPI_Init+0x42>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	4a84      	ldr	r2, [pc, #528]	@ (800ff38 <HAL_SPI_Init+0x244>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d005      	beq.n	800fd36 <HAL_SPI_Init+0x42>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	2b0f      	cmp	r3, #15
 800fd30:	d901      	bls.n	800fd36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fd32:	2301      	movs	r3, #1
 800fd34:	e0f7      	b.n	800ff26 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f900 	bl	800ff3c <SPI_GetPacketSize>
 800fd3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a7b      	ldr	r2, [pc, #492]	@ (800ff30 <HAL_SPI_Init+0x23c>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d00c      	beq.n	800fd62 <HAL_SPI_Init+0x6e>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a79      	ldr	r2, [pc, #484]	@ (800ff34 <HAL_SPI_Init+0x240>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d007      	beq.n	800fd62 <HAL_SPI_Init+0x6e>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4a78      	ldr	r2, [pc, #480]	@ (800ff38 <HAL_SPI_Init+0x244>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d002      	beq.n	800fd62 <HAL_SPI_Init+0x6e>
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2b08      	cmp	r3, #8
 800fd60:	d811      	bhi.n	800fd86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fd66:	4a72      	ldr	r2, [pc, #456]	@ (800ff30 <HAL_SPI_Init+0x23c>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d009      	beq.n	800fd80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a70      	ldr	r2, [pc, #448]	@ (800ff34 <HAL_SPI_Init+0x240>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d004      	beq.n	800fd80 <HAL_SPI_Init+0x8c>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a6f      	ldr	r2, [pc, #444]	@ (800ff38 <HAL_SPI_Init+0x244>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d104      	bne.n	800fd8a <HAL_SPI_Init+0x96>
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2b10      	cmp	r3, #16
 800fd84:	d901      	bls.n	800fd8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	e0cd      	b.n	800ff26 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d106      	bne.n	800fda4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7f1 fbd6 	bl	8001550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2202      	movs	r2, #2
 800fda8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	f022 0201 	bic.w	r2, r2, #1
 800fdba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	689b      	ldr	r3, [r3, #8]
 800fdc2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800fdc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	699b      	ldr	r3, [r3, #24]
 800fdcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fdd0:	d119      	bne.n	800fe06 <HAL_SPI_Init+0x112>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fdda:	d103      	bne.n	800fde4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d008      	beq.n	800fdf6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10c      	bne.n	800fe06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fdf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fdf4:	d107      	bne.n	800fe06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800fe04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d00f      	beq.n	800fe32 <HAL_SPI_Init+0x13e>
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	68db      	ldr	r3, [r3, #12]
 800fe16:	2b06      	cmp	r3, #6
 800fe18:	d90b      	bls.n	800fe32 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	430a      	orrs	r2, r1
 800fe2e:	601a      	str	r2, [r3, #0]
 800fe30:	e007      	b.n	800fe42 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fe40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	69da      	ldr	r2, [r3, #28]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe4a:	431a      	orrs	r2, r3
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	431a      	orrs	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe54:	ea42 0103 	orr.w	r1, r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	68da      	ldr	r2, [r3, #12]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	430a      	orrs	r2, r1
 800fe62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe6c:	431a      	orrs	r2, r3
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe72:	431a      	orrs	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	699b      	ldr	r3, [r3, #24]
 800fe78:	431a      	orrs	r2, r3
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	431a      	orrs	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	695b      	ldr	r3, [r3, #20]
 800fe84:	431a      	orrs	r2, r3
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a1b      	ldr	r3, [r3, #32]
 800fe8a:	431a      	orrs	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	431a      	orrs	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe96:	431a      	orrs	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	431a      	orrs	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fea2:	ea42 0103 	orr.w	r1, r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	430a      	orrs	r2, r1
 800feb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d113      	bne.n	800fee2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	689b      	ldr	r3, [r3, #8]
 800fec0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fecc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fee0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f022 0201 	bic.w	r2, r2, #1
 800fef0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00a      	beq.n	800ff14 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	430a      	orrs	r2, r1
 800ff12:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2201      	movs	r2, #1
 800ff20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ff24:	2300      	movs	r3, #0
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3710      	adds	r7, #16
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	40013000 	.word	0x40013000
 800ff34:	40003800 	.word	0x40003800
 800ff38:	40003c00 	.word	0x40003c00

0800ff3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff48:	095b      	lsrs	r3, r3, #5
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	3301      	adds	r3, #1
 800ff54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	3307      	adds	r3, #7
 800ff5a:	08db      	lsrs	r3, r3, #3
 800ff5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	fb02 f303 	mul.w	r3, r2, r3
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3714      	adds	r7, #20
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr

0800ff72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff72:	b580      	push	{r7, lr}
 800ff74:	b082      	sub	sp, #8
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d101      	bne.n	800ff84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff80:	2301      	movs	r3, #1
 800ff82:	e042      	b.n	801000a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d106      	bne.n	800ff9c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7f1 fb42 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2224      	movs	r2, #36	@ 0x24
 800ffa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f022 0201 	bic.w	r2, r2, #1
 800ffb2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d002      	beq.n	800ffc2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f001 fadd 	bl	801157c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 fd72 	bl	8010aac <UART_SetConfig>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d101      	bne.n	800ffd2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	e01b      	b.n	801000a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	685a      	ldr	r2, [r3, #4]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ffe0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	689a      	ldr	r2, [r3, #8]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fff0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f042 0201 	orr.w	r2, r2, #1
 8010000:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f001 fb5c 	bl	80116c0 <UART_CheckIdleState>
 8010008:	4603      	mov	r3, r0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010012:	b580      	push	{r7, lr}
 8010014:	b08a      	sub	sp, #40	@ 0x28
 8010016:	af02      	add	r7, sp, #8
 8010018:	60f8      	str	r0, [r7, #12]
 801001a:	60b9      	str	r1, [r7, #8]
 801001c:	603b      	str	r3, [r7, #0]
 801001e:	4613      	mov	r3, r2
 8010020:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010028:	2b20      	cmp	r3, #32
 801002a:	d17b      	bne.n	8010124 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d002      	beq.n	8010038 <HAL_UART_Transmit+0x26>
 8010032:	88fb      	ldrh	r3, [r7, #6]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d101      	bne.n	801003c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010038:	2301      	movs	r3, #1
 801003a:	e074      	b.n	8010126 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2200      	movs	r2, #0
 8010040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2221      	movs	r2, #33	@ 0x21
 8010048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801004c:	f7f1 fe9c 	bl	8001d88 <HAL_GetTick>
 8010050:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	88fa      	ldrh	r2, [r7, #6]
 8010056:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	88fa      	ldrh	r2, [r7, #6]
 801005e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	689b      	ldr	r3, [r3, #8]
 8010066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801006a:	d108      	bne.n	801007e <HAL_UART_Transmit+0x6c>
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	691b      	ldr	r3, [r3, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d104      	bne.n	801007e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010074:	2300      	movs	r3, #0
 8010076:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	61bb      	str	r3, [r7, #24]
 801007c:	e003      	b.n	8010086 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010082:	2300      	movs	r3, #0
 8010084:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010086:	e030      	b.n	80100ea <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	2200      	movs	r2, #0
 8010090:	2180      	movs	r1, #128	@ 0x80
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f001 fbbe 	bl	8011814 <UART_WaitOnFlagUntilTimeout>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d005      	beq.n	80100aa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2220      	movs	r2, #32
 80100a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80100a6:	2303      	movs	r3, #3
 80100a8:	e03d      	b.n	8010126 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80100aa:	69fb      	ldr	r3, [r7, #28]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d10b      	bne.n	80100c8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	461a      	mov	r2, r3
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80100be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	3302      	adds	r3, #2
 80100c4:	61bb      	str	r3, [r7, #24]
 80100c6:	e007      	b.n	80100d8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	781a      	ldrb	r2, [r3, #0]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	3301      	adds	r3, #1
 80100d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80100de:	b29b      	uxth	r3, r3
 80100e0:	3b01      	subs	r3, #1
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1c8      	bne.n	8010088 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	2200      	movs	r2, #0
 80100fe:	2140      	movs	r1, #64	@ 0x40
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f001 fb87 	bl	8011814 <UART_WaitOnFlagUntilTimeout>
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d005      	beq.n	8010118 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2220      	movs	r2, #32
 8010110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010114:	2303      	movs	r3, #3
 8010116:	e006      	b.n	8010126 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2220      	movs	r2, #32
 801011c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010120:	2300      	movs	r3, #0
 8010122:	e000      	b.n	8010126 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010124:	2302      	movs	r3, #2
  }
}
 8010126:	4618      	mov	r0, r3
 8010128:	3720      	adds	r7, #32
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b08a      	sub	sp, #40	@ 0x28
 8010132:	af02      	add	r7, sp, #8
 8010134:	60f8      	str	r0, [r7, #12]
 8010136:	60b9      	str	r1, [r7, #8]
 8010138:	603b      	str	r3, [r7, #0]
 801013a:	4613      	mov	r3, r2
 801013c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010144:	2b20      	cmp	r3, #32
 8010146:	f040 80b5 	bne.w	80102b4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <HAL_UART_Receive+0x28>
 8010150:	88fb      	ldrh	r3, [r7, #6]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d101      	bne.n	801015a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010156:	2301      	movs	r3, #1
 8010158:	e0ad      	b.n	80102b6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2200      	movs	r2, #0
 801015e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2222      	movs	r2, #34	@ 0x22
 8010166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2200      	movs	r2, #0
 801016e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010170:	f7f1 fe0a 	bl	8001d88 <HAL_GetTick>
 8010174:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	88fa      	ldrh	r2, [r7, #6]
 801017a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	88fa      	ldrh	r2, [r7, #6]
 8010182:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	689b      	ldr	r3, [r3, #8]
 801018a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801018e:	d10e      	bne.n	80101ae <HAL_UART_Receive+0x80>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	691b      	ldr	r3, [r3, #16]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d105      	bne.n	80101a4 <HAL_UART_Receive+0x76>
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801019e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80101a2:	e02d      	b.n	8010200 <HAL_UART_Receive+0xd2>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	22ff      	movs	r2, #255	@ 0xff
 80101a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80101ac:	e028      	b.n	8010200 <HAL_UART_Receive+0xd2>
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	689b      	ldr	r3, [r3, #8]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d10d      	bne.n	80101d2 <HAL_UART_Receive+0xa4>
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	691b      	ldr	r3, [r3, #16]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d104      	bne.n	80101c8 <HAL_UART_Receive+0x9a>
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	22ff      	movs	r2, #255	@ 0xff
 80101c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80101c6:	e01b      	b.n	8010200 <HAL_UART_Receive+0xd2>
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	227f      	movs	r2, #127	@ 0x7f
 80101cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80101d0:	e016      	b.n	8010200 <HAL_UART_Receive+0xd2>
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80101da:	d10d      	bne.n	80101f8 <HAL_UART_Receive+0xca>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d104      	bne.n	80101ee <HAL_UART_Receive+0xc0>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	227f      	movs	r2, #127	@ 0x7f
 80101e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80101ec:	e008      	b.n	8010200 <HAL_UART_Receive+0xd2>
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	223f      	movs	r2, #63	@ 0x3f
 80101f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80101f6:	e003      	b.n	8010200 <HAL_UART_Receive+0xd2>
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010206:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	689b      	ldr	r3, [r3, #8]
 801020c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010210:	d108      	bne.n	8010224 <HAL_UART_Receive+0xf6>
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	691b      	ldr	r3, [r3, #16]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d104      	bne.n	8010224 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801021a:	2300      	movs	r3, #0
 801021c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	61bb      	str	r3, [r7, #24]
 8010222:	e003      	b.n	801022c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010228:	2300      	movs	r3, #0
 801022a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801022c:	e036      	b.n	801029c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	9300      	str	r3, [sp, #0]
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	2200      	movs	r2, #0
 8010236:	2120      	movs	r1, #32
 8010238:	68f8      	ldr	r0, [r7, #12]
 801023a:	f001 faeb 	bl	8011814 <UART_WaitOnFlagUntilTimeout>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d005      	beq.n	8010250 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2220      	movs	r2, #32
 8010248:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 801024c:	2303      	movs	r3, #3
 801024e:	e032      	b.n	80102b6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10c      	bne.n	8010270 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801025c:	b29a      	uxth	r2, r3
 801025e:	8a7b      	ldrh	r3, [r7, #18]
 8010260:	4013      	ands	r3, r2
 8010262:	b29a      	uxth	r2, r3
 8010264:	69bb      	ldr	r3, [r7, #24]
 8010266:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	3302      	adds	r3, #2
 801026c:	61bb      	str	r3, [r7, #24]
 801026e:	e00c      	b.n	801028a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010276:	b2da      	uxtb	r2, r3
 8010278:	8a7b      	ldrh	r3, [r7, #18]
 801027a:	b2db      	uxtb	r3, r3
 801027c:	4013      	ands	r3, r2
 801027e:	b2da      	uxtb	r2, r3
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	3301      	adds	r3, #1
 8010288:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010290:	b29b      	uxth	r3, r3
 8010292:	3b01      	subs	r3, #1
 8010294:	b29a      	uxth	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d1c2      	bne.n	801022e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2220      	movs	r2, #32
 80102ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80102b0:	2300      	movs	r3, #0
 80102b2:	e000      	b.n	80102b6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80102b4:	2302      	movs	r3, #2
  }
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3720      	adds	r7, #32
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
	...

080102c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b0ba      	sub	sp, #232	@ 0xe8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	69db      	ldr	r3, [r3, #28]
 80102ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80102e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80102ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80102ee:	4013      	ands	r3, r2
 80102f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80102f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d11b      	bne.n	8010334 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80102fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010300:	f003 0320 	and.w	r3, r3, #32
 8010304:	2b00      	cmp	r3, #0
 8010306:	d015      	beq.n	8010334 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801030c:	f003 0320 	and.w	r3, r3, #32
 8010310:	2b00      	cmp	r3, #0
 8010312:	d105      	bne.n	8010320 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801031c:	2b00      	cmp	r3, #0
 801031e:	d009      	beq.n	8010334 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010324:	2b00      	cmp	r3, #0
 8010326:	f000 8393 	beq.w	8010a50 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	4798      	blx	r3
      }
      return;
 8010332:	e38d      	b.n	8010a50 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010338:	2b00      	cmp	r3, #0
 801033a:	f000 8123 	beq.w	8010584 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801033e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010342:	4b8d      	ldr	r3, [pc, #564]	@ (8010578 <HAL_UART_IRQHandler+0x2b8>)
 8010344:	4013      	ands	r3, r2
 8010346:	2b00      	cmp	r3, #0
 8010348:	d106      	bne.n	8010358 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801034a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801034e:	4b8b      	ldr	r3, [pc, #556]	@ (801057c <HAL_UART_IRQHandler+0x2bc>)
 8010350:	4013      	ands	r3, r2
 8010352:	2b00      	cmp	r3, #0
 8010354:	f000 8116 	beq.w	8010584 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801035c:	f003 0301 	and.w	r3, r3, #1
 8010360:	2b00      	cmp	r3, #0
 8010362:	d011      	beq.n	8010388 <HAL_UART_IRQHandler+0xc8>
 8010364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00b      	beq.n	8010388 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2201      	movs	r2, #1
 8010376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801037e:	f043 0201 	orr.w	r2, r3, #1
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801038c:	f003 0302 	and.w	r3, r3, #2
 8010390:	2b00      	cmp	r3, #0
 8010392:	d011      	beq.n	80103b8 <HAL_UART_IRQHandler+0xf8>
 8010394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010398:	f003 0301 	and.w	r3, r3, #1
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00b      	beq.n	80103b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2202      	movs	r2, #2
 80103a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103ae:	f043 0204 	orr.w	r2, r3, #4
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80103b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103bc:	f003 0304 	and.w	r3, r3, #4
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d011      	beq.n	80103e8 <HAL_UART_IRQHandler+0x128>
 80103c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80103c8:	f003 0301 	and.w	r3, r3, #1
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00b      	beq.n	80103e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	2204      	movs	r2, #4
 80103d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103de:	f043 0202 	orr.w	r2, r3, #2
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80103e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103ec:	f003 0308 	and.w	r3, r3, #8
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d017      	beq.n	8010424 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80103f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103f8:	f003 0320 	and.w	r3, r3, #32
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d105      	bne.n	801040c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010400:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010404:	4b5c      	ldr	r3, [pc, #368]	@ (8010578 <HAL_UART_IRQHandler+0x2b8>)
 8010406:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010408:	2b00      	cmp	r3, #0
 801040a:	d00b      	beq.n	8010424 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2208      	movs	r2, #8
 8010412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801041a:	f043 0208 	orr.w	r2, r3, #8
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801042c:	2b00      	cmp	r3, #0
 801042e:	d012      	beq.n	8010456 <HAL_UART_IRQHandler+0x196>
 8010430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010434:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010438:	2b00      	cmp	r3, #0
 801043a:	d00c      	beq.n	8010456 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801044c:	f043 0220 	orr.w	r2, r3, #32
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801045c:	2b00      	cmp	r3, #0
 801045e:	f000 82f9 	beq.w	8010a54 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010466:	f003 0320 	and.w	r3, r3, #32
 801046a:	2b00      	cmp	r3, #0
 801046c:	d013      	beq.n	8010496 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801046e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010472:	f003 0320 	and.w	r3, r3, #32
 8010476:	2b00      	cmp	r3, #0
 8010478:	d105      	bne.n	8010486 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801047a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801047e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010482:	2b00      	cmp	r3, #0
 8010484:	d007      	beq.n	8010496 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801048a:	2b00      	cmp	r3, #0
 801048c:	d003      	beq.n	8010496 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801049c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104aa:	2b40      	cmp	r3, #64	@ 0x40
 80104ac:	d005      	beq.n	80104ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80104ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80104b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d054      	beq.n	8010564 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f001 fa18 	bl	80118f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	689b      	ldr	r3, [r3, #8]
 80104c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104ca:	2b40      	cmp	r3, #64	@ 0x40
 80104cc:	d146      	bne.n	801055c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	3308      	adds	r3, #8
 80104d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80104dc:	e853 3f00 	ldrex	r3, [r3]
 80104e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80104e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80104e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	3308      	adds	r3, #8
 80104f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80104fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80104fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801050a:	e841 2300 	strex	r3, r2, [r1]
 801050e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1d9      	bne.n	80104ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010520:	2b00      	cmp	r3, #0
 8010522:	d017      	beq.n	8010554 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801052a:	4a15      	ldr	r2, [pc, #84]	@ (8010580 <HAL_UART_IRQHandler+0x2c0>)
 801052c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010534:	4618      	mov	r0, r3
 8010536:	f7f4 f981 	bl	800483c <HAL_DMA_Abort_IT>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d019      	beq.n	8010574 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010548:	687a      	ldr	r2, [r7, #4]
 801054a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801054e:	4610      	mov	r0, r2
 8010550:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010552:	e00f      	b.n	8010574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 fa93 	bl	8010a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801055a:	e00b      	b.n	8010574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f000 fa8f 	bl	8010a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010562:	e007      	b.n	8010574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 fa8b 	bl	8010a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2200      	movs	r2, #0
 801056e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010572:	e26f      	b.n	8010a54 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010574:	bf00      	nop
    return;
 8010576:	e26d      	b.n	8010a54 <HAL_UART_IRQHandler+0x794>
 8010578:	10000001 	.word	0x10000001
 801057c:	04000120 	.word	0x04000120
 8010580:	080119bd 	.word	0x080119bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010588:	2b01      	cmp	r3, #1
 801058a:	f040 8203 	bne.w	8010994 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801058e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010592:	f003 0310 	and.w	r3, r3, #16
 8010596:	2b00      	cmp	r3, #0
 8010598:	f000 81fc 	beq.w	8010994 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801059c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105a0:	f003 0310 	and.w	r3, r3, #16
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 81f5 	beq.w	8010994 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2210      	movs	r2, #16
 80105b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105bc:	2b40      	cmp	r3, #64	@ 0x40
 80105be:	f040 816d 	bne.w	801089c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4aa4      	ldr	r2, [pc, #656]	@ (801085c <HAL_UART_IRQHandler+0x59c>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d068      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4aa1      	ldr	r2, [pc, #644]	@ (8010860 <HAL_UART_IRQHandler+0x5a0>)
 80105da:	4293      	cmp	r3, r2
 80105dc:	d061      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4a9f      	ldr	r2, [pc, #636]	@ (8010864 <HAL_UART_IRQHandler+0x5a4>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d05a      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4a9c      	ldr	r2, [pc, #624]	@ (8010868 <HAL_UART_IRQHandler+0x5a8>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d053      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4a9a      	ldr	r2, [pc, #616]	@ (801086c <HAL_UART_IRQHandler+0x5ac>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d04c      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a97      	ldr	r2, [pc, #604]	@ (8010870 <HAL_UART_IRQHandler+0x5b0>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d045      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	4a95      	ldr	r2, [pc, #596]	@ (8010874 <HAL_UART_IRQHandler+0x5b4>)
 8010620:	4293      	cmp	r3, r2
 8010622:	d03e      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a92      	ldr	r2, [pc, #584]	@ (8010878 <HAL_UART_IRQHandler+0x5b8>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d037      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4a90      	ldr	r2, [pc, #576]	@ (801087c <HAL_UART_IRQHandler+0x5bc>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d030      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4a8d      	ldr	r2, [pc, #564]	@ (8010880 <HAL_UART_IRQHandler+0x5c0>)
 801064a:	4293      	cmp	r3, r2
 801064c:	d029      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a8b      	ldr	r2, [pc, #556]	@ (8010884 <HAL_UART_IRQHandler+0x5c4>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d022      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a88      	ldr	r2, [pc, #544]	@ (8010888 <HAL_UART_IRQHandler+0x5c8>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d01b      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4a86      	ldr	r2, [pc, #536]	@ (801088c <HAL_UART_IRQHandler+0x5cc>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d014      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	4a83      	ldr	r2, [pc, #524]	@ (8010890 <HAL_UART_IRQHandler+0x5d0>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d00d      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a81      	ldr	r2, [pc, #516]	@ (8010894 <HAL_UART_IRQHandler+0x5d4>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d006      	beq.n	80106a2 <HAL_UART_IRQHandler+0x3e2>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a7e      	ldr	r2, [pc, #504]	@ (8010898 <HAL_UART_IRQHandler+0x5d8>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d106      	bne.n	80106b0 <HAL_UART_IRQHandler+0x3f0>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	e005      	b.n	80106bc <HAL_UART_IRQHandler+0x3fc>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80106c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f000 80ad 	beq.w	8010824 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80106d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80106d4:	429a      	cmp	r2, r3
 80106d6:	f080 80a5 	bcs.w	8010824 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80106e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106ea:	69db      	ldr	r3, [r3, #28]
 80106ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106f0:	f000 8087 	beq.w	8010802 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010700:	e853 3f00 	ldrex	r3, [r3]
 8010704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801070c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	461a      	mov	r2, r3
 801071a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801071e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010722:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010726:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801072a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801072e:	e841 2300 	strex	r3, r2, [r1]
 8010732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1da      	bne.n	80106f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	3308      	adds	r3, #8
 8010744:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010748:	e853 3f00 	ldrex	r3, [r3]
 801074c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801074e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010750:	f023 0301 	bic.w	r3, r3, #1
 8010754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	3308      	adds	r3, #8
 801075e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010762:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010766:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010768:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801076a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801076e:	e841 2300 	strex	r3, r2, [r1]
 8010772:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1e1      	bne.n	801073e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	3308      	adds	r3, #8
 8010780:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010784:	e853 3f00 	ldrex	r3, [r3]
 8010788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801078a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801078c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	3308      	adds	r3, #8
 801079a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801079e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80107a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80107a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80107a6:	e841 2300 	strex	r3, r2, [r1]
 80107aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80107ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1e3      	bne.n	801077a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2220      	movs	r2, #32
 80107b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2200      	movs	r2, #0
 80107be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107c8:	e853 3f00 	ldrex	r3, [r3]
 80107cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80107ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107d0:	f023 0310 	bic.w	r3, r3, #16
 80107d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	461a      	mov	r2, r3
 80107de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80107e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80107e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80107ea:	e841 2300 	strex	r3, r2, [r1]
 80107ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80107f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d1e4      	bne.n	80107c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7f3 fcff 	bl	8004200 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2202      	movs	r2, #2
 8010806:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010814:	b29b      	uxth	r3, r3
 8010816:	1ad3      	subs	r3, r2, r3
 8010818:	b29b      	uxth	r3, r3
 801081a:	4619      	mov	r1, r3
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 f939 	bl	8010a94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010822:	e119      	b.n	8010a58 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801082a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801082e:	429a      	cmp	r2, r3
 8010830:	f040 8112 	bne.w	8010a58 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801083a:	69db      	ldr	r3, [r3, #28]
 801083c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010840:	f040 810a 	bne.w	8010a58 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2202      	movs	r2, #2
 8010848:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010850:	4619      	mov	r1, r3
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f91e 	bl	8010a94 <HAL_UARTEx_RxEventCallback>
      return;
 8010858:	e0fe      	b.n	8010a58 <HAL_UART_IRQHandler+0x798>
 801085a:	bf00      	nop
 801085c:	40020010 	.word	0x40020010
 8010860:	40020028 	.word	0x40020028
 8010864:	40020040 	.word	0x40020040
 8010868:	40020058 	.word	0x40020058
 801086c:	40020070 	.word	0x40020070
 8010870:	40020088 	.word	0x40020088
 8010874:	400200a0 	.word	0x400200a0
 8010878:	400200b8 	.word	0x400200b8
 801087c:	40020410 	.word	0x40020410
 8010880:	40020428 	.word	0x40020428
 8010884:	40020440 	.word	0x40020440
 8010888:	40020458 	.word	0x40020458
 801088c:	40020470 	.word	0x40020470
 8010890:	40020488 	.word	0x40020488
 8010894:	400204a0 	.word	0x400204a0
 8010898:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f000 80cf 	beq.w	8010a5c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80108be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f000 80ca 	beq.w	8010a5c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108d0:	e853 3f00 	ldrex	r3, [r3]
 80108d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80108d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	461a      	mov	r2, r3
 80108e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80108ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80108ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80108f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80108f2:	e841 2300 	strex	r3, r2, [r1]
 80108f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80108f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d1e4      	bne.n	80108c8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3308      	adds	r3, #8
 8010904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010908:	e853 3f00 	ldrex	r3, [r3]
 801090c:	623b      	str	r3, [r7, #32]
   return(result);
 801090e:	6a3a      	ldr	r2, [r7, #32]
 8010910:	4b55      	ldr	r3, [pc, #340]	@ (8010a68 <HAL_UART_IRQHandler+0x7a8>)
 8010912:	4013      	ands	r3, r2
 8010914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	3308      	adds	r3, #8
 801091e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010922:	633a      	str	r2, [r7, #48]	@ 0x30
 8010924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801092a:	e841 2300 	strex	r3, r2, [r1]
 801092e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010932:	2b00      	cmp	r3, #0
 8010934:	d1e3      	bne.n	80108fe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2220      	movs	r2, #32
 801093a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2200      	movs	r2, #0
 8010942:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	e853 3f00 	ldrex	r3, [r3]
 8010956:	60fb      	str	r3, [r7, #12]
   return(result);
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f023 0310 	bic.w	r3, r3, #16
 801095e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	461a      	mov	r2, r3
 8010968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801096c:	61fb      	str	r3, [r7, #28]
 801096e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010970:	69b9      	ldr	r1, [r7, #24]
 8010972:	69fa      	ldr	r2, [r7, #28]
 8010974:	e841 2300 	strex	r3, r2, [r1]
 8010978:	617b      	str	r3, [r7, #20]
   return(result);
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d1e4      	bne.n	801094a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2202      	movs	r2, #2
 8010984:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801098a:	4619      	mov	r1, r3
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 f881 	bl	8010a94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010992:	e063      	b.n	8010a5c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801099c:	2b00      	cmp	r3, #0
 801099e:	d00e      	beq.n	80109be <HAL_UART_IRQHandler+0x6fe>
 80109a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d008      	beq.n	80109be <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80109b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f001 f83d 	bl	8011a36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80109bc:	e051      	b.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80109be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d014      	beq.n	80109f4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80109ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d105      	bne.n	80109e2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80109d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80109da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d008      	beq.n	80109f4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d03a      	beq.n	8010a60 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	4798      	blx	r3
    }
    return;
 80109f2:	e035      	b.n	8010a60 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80109f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80109f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d009      	beq.n	8010a14 <HAL_UART_IRQHandler+0x754>
 8010a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d003      	beq.n	8010a14 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f000 ffe7 	bl	80119e0 <UART_EndTransmit_IT>
    return;
 8010a12:	e026      	b.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d009      	beq.n	8010a34 <HAL_UART_IRQHandler+0x774>
 8010a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d003      	beq.n	8010a34 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f001 f816 	bl	8011a5e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010a32:	e016      	b.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d010      	beq.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
 8010a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	da0c      	bge.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 fffe 	bl	8011a4a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010a4e:	e008      	b.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8010a50:	bf00      	nop
 8010a52:	e006      	b.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
    return;
 8010a54:	bf00      	nop
 8010a56:	e004      	b.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8010a58:	bf00      	nop
 8010a5a:	e002      	b.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8010a5c:	bf00      	nop
 8010a5e:	e000      	b.n	8010a62 <HAL_UART_IRQHandler+0x7a2>
    return;
 8010a60:	bf00      	nop
  }
}
 8010a62:	37e8      	adds	r7, #232	@ 0xe8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	effffffe 	.word	0xeffffffe

08010a6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b083      	sub	sp, #12
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010a74:	bf00      	nop
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010a80:	b480      	push	{r7}
 8010a82:	b083      	sub	sp, #12
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010a88:	bf00      	nop
 8010a8a:	370c      	adds	r7, #12
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ab0:	b092      	sub	sp, #72	@ 0x48
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	689a      	ldr	r2, [r3, #8]
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	691b      	ldr	r3, [r3, #16]
 8010ac4:	431a      	orrs	r2, r3
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	695b      	ldr	r3, [r3, #20]
 8010aca:	431a      	orrs	r2, r3
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	69db      	ldr	r3, [r3, #28]
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	681a      	ldr	r2, [r3, #0]
 8010ada:	4bbe      	ldr	r3, [pc, #760]	@ (8010dd4 <UART_SetConfig+0x328>)
 8010adc:	4013      	ands	r3, r2
 8010ade:	697a      	ldr	r2, [r7, #20]
 8010ae0:	6812      	ldr	r2, [r2, #0]
 8010ae2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010ae4:	430b      	orrs	r3, r1
 8010ae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	68da      	ldr	r2, [r3, #12]
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	430a      	orrs	r2, r1
 8010afc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	699b      	ldr	r3, [r3, #24]
 8010b02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4ab3      	ldr	r2, [pc, #716]	@ (8010dd8 <UART_SetConfig+0x32c>)
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d004      	beq.n	8010b18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	6a1b      	ldr	r3, [r3, #32]
 8010b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010b14:	4313      	orrs	r3, r2
 8010b16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	689a      	ldr	r2, [r3, #8]
 8010b1e:	4baf      	ldr	r3, [pc, #700]	@ (8010ddc <UART_SetConfig+0x330>)
 8010b20:	4013      	ands	r3, r2
 8010b22:	697a      	ldr	r2, [r7, #20]
 8010b24:	6812      	ldr	r2, [r2, #0]
 8010b26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010b28:	430b      	orrs	r3, r1
 8010b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b32:	f023 010f 	bic.w	r1, r3, #15
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	430a      	orrs	r2, r1
 8010b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4aa6      	ldr	r2, [pc, #664]	@ (8010de0 <UART_SetConfig+0x334>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d177      	bne.n	8010c3c <UART_SetConfig+0x190>
 8010b4c:	4ba5      	ldr	r3, [pc, #660]	@ (8010de4 <UART_SetConfig+0x338>)
 8010b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b54:	2b28      	cmp	r3, #40	@ 0x28
 8010b56:	d86d      	bhi.n	8010c34 <UART_SetConfig+0x188>
 8010b58:	a201      	add	r2, pc, #4	@ (adr r2, 8010b60 <UART_SetConfig+0xb4>)
 8010b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b5e:	bf00      	nop
 8010b60:	08010c05 	.word	0x08010c05
 8010b64:	08010c35 	.word	0x08010c35
 8010b68:	08010c35 	.word	0x08010c35
 8010b6c:	08010c35 	.word	0x08010c35
 8010b70:	08010c35 	.word	0x08010c35
 8010b74:	08010c35 	.word	0x08010c35
 8010b78:	08010c35 	.word	0x08010c35
 8010b7c:	08010c35 	.word	0x08010c35
 8010b80:	08010c0d 	.word	0x08010c0d
 8010b84:	08010c35 	.word	0x08010c35
 8010b88:	08010c35 	.word	0x08010c35
 8010b8c:	08010c35 	.word	0x08010c35
 8010b90:	08010c35 	.word	0x08010c35
 8010b94:	08010c35 	.word	0x08010c35
 8010b98:	08010c35 	.word	0x08010c35
 8010b9c:	08010c35 	.word	0x08010c35
 8010ba0:	08010c15 	.word	0x08010c15
 8010ba4:	08010c35 	.word	0x08010c35
 8010ba8:	08010c35 	.word	0x08010c35
 8010bac:	08010c35 	.word	0x08010c35
 8010bb0:	08010c35 	.word	0x08010c35
 8010bb4:	08010c35 	.word	0x08010c35
 8010bb8:	08010c35 	.word	0x08010c35
 8010bbc:	08010c35 	.word	0x08010c35
 8010bc0:	08010c1d 	.word	0x08010c1d
 8010bc4:	08010c35 	.word	0x08010c35
 8010bc8:	08010c35 	.word	0x08010c35
 8010bcc:	08010c35 	.word	0x08010c35
 8010bd0:	08010c35 	.word	0x08010c35
 8010bd4:	08010c35 	.word	0x08010c35
 8010bd8:	08010c35 	.word	0x08010c35
 8010bdc:	08010c35 	.word	0x08010c35
 8010be0:	08010c25 	.word	0x08010c25
 8010be4:	08010c35 	.word	0x08010c35
 8010be8:	08010c35 	.word	0x08010c35
 8010bec:	08010c35 	.word	0x08010c35
 8010bf0:	08010c35 	.word	0x08010c35
 8010bf4:	08010c35 	.word	0x08010c35
 8010bf8:	08010c35 	.word	0x08010c35
 8010bfc:	08010c35 	.word	0x08010c35
 8010c00:	08010c2d 	.word	0x08010c2d
 8010c04:	2301      	movs	r3, #1
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c0a:	e222      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c0c:	2304      	movs	r3, #4
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c12:	e21e      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c14:	2308      	movs	r3, #8
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1a:	e21a      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c1c:	2310      	movs	r3, #16
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c22:	e216      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c24:	2320      	movs	r3, #32
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c2a:	e212      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c2c:	2340      	movs	r3, #64	@ 0x40
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c32:	e20e      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c34:	2380      	movs	r3, #128	@ 0x80
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c3a:	e20a      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4a69      	ldr	r2, [pc, #420]	@ (8010de8 <UART_SetConfig+0x33c>)
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d130      	bne.n	8010ca8 <UART_SetConfig+0x1fc>
 8010c46:	4b67      	ldr	r3, [pc, #412]	@ (8010de4 <UART_SetConfig+0x338>)
 8010c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c4a:	f003 0307 	and.w	r3, r3, #7
 8010c4e:	2b05      	cmp	r3, #5
 8010c50:	d826      	bhi.n	8010ca0 <UART_SetConfig+0x1f4>
 8010c52:	a201      	add	r2, pc, #4	@ (adr r2, 8010c58 <UART_SetConfig+0x1ac>)
 8010c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c58:	08010c71 	.word	0x08010c71
 8010c5c:	08010c79 	.word	0x08010c79
 8010c60:	08010c81 	.word	0x08010c81
 8010c64:	08010c89 	.word	0x08010c89
 8010c68:	08010c91 	.word	0x08010c91
 8010c6c:	08010c99 	.word	0x08010c99
 8010c70:	2300      	movs	r3, #0
 8010c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c76:	e1ec      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c78:	2304      	movs	r3, #4
 8010c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c7e:	e1e8      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c80:	2308      	movs	r3, #8
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c86:	e1e4      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c88:	2310      	movs	r3, #16
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c8e:	e1e0      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c90:	2320      	movs	r3, #32
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c96:	e1dc      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010c98:	2340      	movs	r3, #64	@ 0x40
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c9e:	e1d8      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010ca0:	2380      	movs	r3, #128	@ 0x80
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ca6:	e1d4      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a4f      	ldr	r2, [pc, #316]	@ (8010dec <UART_SetConfig+0x340>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d130      	bne.n	8010d14 <UART_SetConfig+0x268>
 8010cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8010de4 <UART_SetConfig+0x338>)
 8010cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cb6:	f003 0307 	and.w	r3, r3, #7
 8010cba:	2b05      	cmp	r3, #5
 8010cbc:	d826      	bhi.n	8010d0c <UART_SetConfig+0x260>
 8010cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8010cc4 <UART_SetConfig+0x218>)
 8010cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc4:	08010cdd 	.word	0x08010cdd
 8010cc8:	08010ce5 	.word	0x08010ce5
 8010ccc:	08010ced 	.word	0x08010ced
 8010cd0:	08010cf5 	.word	0x08010cf5
 8010cd4:	08010cfd 	.word	0x08010cfd
 8010cd8:	08010d05 	.word	0x08010d05
 8010cdc:	2300      	movs	r3, #0
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ce2:	e1b6      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010ce4:	2304      	movs	r3, #4
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cea:	e1b2      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010cec:	2308      	movs	r3, #8
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cf2:	e1ae      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010cf4:	2310      	movs	r3, #16
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cfa:	e1aa      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010cfc:	2320      	movs	r3, #32
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d02:	e1a6      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d04:	2340      	movs	r3, #64	@ 0x40
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d0a:	e1a2      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d0c:	2380      	movs	r3, #128	@ 0x80
 8010d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d12:	e19e      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4a35      	ldr	r2, [pc, #212]	@ (8010df0 <UART_SetConfig+0x344>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d130      	bne.n	8010d80 <UART_SetConfig+0x2d4>
 8010d1e:	4b31      	ldr	r3, [pc, #196]	@ (8010de4 <UART_SetConfig+0x338>)
 8010d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d22:	f003 0307 	and.w	r3, r3, #7
 8010d26:	2b05      	cmp	r3, #5
 8010d28:	d826      	bhi.n	8010d78 <UART_SetConfig+0x2cc>
 8010d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8010d30 <UART_SetConfig+0x284>)
 8010d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d30:	08010d49 	.word	0x08010d49
 8010d34:	08010d51 	.word	0x08010d51
 8010d38:	08010d59 	.word	0x08010d59
 8010d3c:	08010d61 	.word	0x08010d61
 8010d40:	08010d69 	.word	0x08010d69
 8010d44:	08010d71 	.word	0x08010d71
 8010d48:	2300      	movs	r3, #0
 8010d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d4e:	e180      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d50:	2304      	movs	r3, #4
 8010d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d56:	e17c      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d58:	2308      	movs	r3, #8
 8010d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d5e:	e178      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d60:	2310      	movs	r3, #16
 8010d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d66:	e174      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d68:	2320      	movs	r3, #32
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d6e:	e170      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d70:	2340      	movs	r3, #64	@ 0x40
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d76:	e16c      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d78:	2380      	movs	r3, #128	@ 0x80
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d7e:	e168      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4a1b      	ldr	r2, [pc, #108]	@ (8010df4 <UART_SetConfig+0x348>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d142      	bne.n	8010e10 <UART_SetConfig+0x364>
 8010d8a:	4b16      	ldr	r3, [pc, #88]	@ (8010de4 <UART_SetConfig+0x338>)
 8010d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d8e:	f003 0307 	and.w	r3, r3, #7
 8010d92:	2b05      	cmp	r3, #5
 8010d94:	d838      	bhi.n	8010e08 <UART_SetConfig+0x35c>
 8010d96:	a201      	add	r2, pc, #4	@ (adr r2, 8010d9c <UART_SetConfig+0x2f0>)
 8010d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d9c:	08010db5 	.word	0x08010db5
 8010da0:	08010dbd 	.word	0x08010dbd
 8010da4:	08010dc5 	.word	0x08010dc5
 8010da8:	08010dcd 	.word	0x08010dcd
 8010dac:	08010df9 	.word	0x08010df9
 8010db0:	08010e01 	.word	0x08010e01
 8010db4:	2300      	movs	r3, #0
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dba:	e14a      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010dbc:	2304      	movs	r3, #4
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dc2:	e146      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010dc4:	2308      	movs	r3, #8
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dca:	e142      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010dcc:	2310      	movs	r3, #16
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dd2:	e13e      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010dd4:	cfff69f3 	.word	0xcfff69f3
 8010dd8:	58000c00 	.word	0x58000c00
 8010ddc:	11fff4ff 	.word	0x11fff4ff
 8010de0:	40011000 	.word	0x40011000
 8010de4:	58024400 	.word	0x58024400
 8010de8:	40004400 	.word	0x40004400
 8010dec:	40004800 	.word	0x40004800
 8010df0:	40004c00 	.word	0x40004c00
 8010df4:	40005000 	.word	0x40005000
 8010df8:	2320      	movs	r3, #32
 8010dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dfe:	e128      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010e00:	2340      	movs	r3, #64	@ 0x40
 8010e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e06:	e124      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010e08:	2380      	movs	r3, #128	@ 0x80
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e0e:	e120      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	4acb      	ldr	r2, [pc, #812]	@ (8011144 <UART_SetConfig+0x698>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d176      	bne.n	8010f08 <UART_SetConfig+0x45c>
 8010e1a:	4bcb      	ldr	r3, [pc, #812]	@ (8011148 <UART_SetConfig+0x69c>)
 8010e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e22:	2b28      	cmp	r3, #40	@ 0x28
 8010e24:	d86c      	bhi.n	8010f00 <UART_SetConfig+0x454>
 8010e26:	a201      	add	r2, pc, #4	@ (adr r2, 8010e2c <UART_SetConfig+0x380>)
 8010e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e2c:	08010ed1 	.word	0x08010ed1
 8010e30:	08010f01 	.word	0x08010f01
 8010e34:	08010f01 	.word	0x08010f01
 8010e38:	08010f01 	.word	0x08010f01
 8010e3c:	08010f01 	.word	0x08010f01
 8010e40:	08010f01 	.word	0x08010f01
 8010e44:	08010f01 	.word	0x08010f01
 8010e48:	08010f01 	.word	0x08010f01
 8010e4c:	08010ed9 	.word	0x08010ed9
 8010e50:	08010f01 	.word	0x08010f01
 8010e54:	08010f01 	.word	0x08010f01
 8010e58:	08010f01 	.word	0x08010f01
 8010e5c:	08010f01 	.word	0x08010f01
 8010e60:	08010f01 	.word	0x08010f01
 8010e64:	08010f01 	.word	0x08010f01
 8010e68:	08010f01 	.word	0x08010f01
 8010e6c:	08010ee1 	.word	0x08010ee1
 8010e70:	08010f01 	.word	0x08010f01
 8010e74:	08010f01 	.word	0x08010f01
 8010e78:	08010f01 	.word	0x08010f01
 8010e7c:	08010f01 	.word	0x08010f01
 8010e80:	08010f01 	.word	0x08010f01
 8010e84:	08010f01 	.word	0x08010f01
 8010e88:	08010f01 	.word	0x08010f01
 8010e8c:	08010ee9 	.word	0x08010ee9
 8010e90:	08010f01 	.word	0x08010f01
 8010e94:	08010f01 	.word	0x08010f01
 8010e98:	08010f01 	.word	0x08010f01
 8010e9c:	08010f01 	.word	0x08010f01
 8010ea0:	08010f01 	.word	0x08010f01
 8010ea4:	08010f01 	.word	0x08010f01
 8010ea8:	08010f01 	.word	0x08010f01
 8010eac:	08010ef1 	.word	0x08010ef1
 8010eb0:	08010f01 	.word	0x08010f01
 8010eb4:	08010f01 	.word	0x08010f01
 8010eb8:	08010f01 	.word	0x08010f01
 8010ebc:	08010f01 	.word	0x08010f01
 8010ec0:	08010f01 	.word	0x08010f01
 8010ec4:	08010f01 	.word	0x08010f01
 8010ec8:	08010f01 	.word	0x08010f01
 8010ecc:	08010ef9 	.word	0x08010ef9
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ed6:	e0bc      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010ed8:	2304      	movs	r3, #4
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ede:	e0b8      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010ee0:	2308      	movs	r3, #8
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ee6:	e0b4      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010ee8:	2310      	movs	r3, #16
 8010eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eee:	e0b0      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010ef0:	2320      	movs	r3, #32
 8010ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ef6:	e0ac      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010ef8:	2340      	movs	r3, #64	@ 0x40
 8010efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010efe:	e0a8      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f00:	2380      	movs	r3, #128	@ 0x80
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f06:	e0a4      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a8f      	ldr	r2, [pc, #572]	@ (801114c <UART_SetConfig+0x6a0>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d130      	bne.n	8010f74 <UART_SetConfig+0x4c8>
 8010f12:	4b8d      	ldr	r3, [pc, #564]	@ (8011148 <UART_SetConfig+0x69c>)
 8010f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f16:	f003 0307 	and.w	r3, r3, #7
 8010f1a:	2b05      	cmp	r3, #5
 8010f1c:	d826      	bhi.n	8010f6c <UART_SetConfig+0x4c0>
 8010f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8010f24 <UART_SetConfig+0x478>)
 8010f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f24:	08010f3d 	.word	0x08010f3d
 8010f28:	08010f45 	.word	0x08010f45
 8010f2c:	08010f4d 	.word	0x08010f4d
 8010f30:	08010f55 	.word	0x08010f55
 8010f34:	08010f5d 	.word	0x08010f5d
 8010f38:	08010f65 	.word	0x08010f65
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f42:	e086      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f44:	2304      	movs	r3, #4
 8010f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f4a:	e082      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f4c:	2308      	movs	r3, #8
 8010f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f52:	e07e      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f54:	2310      	movs	r3, #16
 8010f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f5a:	e07a      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f5c:	2320      	movs	r3, #32
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f62:	e076      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f64:	2340      	movs	r3, #64	@ 0x40
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f6a:	e072      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f6c:	2380      	movs	r3, #128	@ 0x80
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f72:	e06e      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4a75      	ldr	r2, [pc, #468]	@ (8011150 <UART_SetConfig+0x6a4>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d130      	bne.n	8010fe0 <UART_SetConfig+0x534>
 8010f7e:	4b72      	ldr	r3, [pc, #456]	@ (8011148 <UART_SetConfig+0x69c>)
 8010f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f82:	f003 0307 	and.w	r3, r3, #7
 8010f86:	2b05      	cmp	r3, #5
 8010f88:	d826      	bhi.n	8010fd8 <UART_SetConfig+0x52c>
 8010f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f90 <UART_SetConfig+0x4e4>)
 8010f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f90:	08010fa9 	.word	0x08010fa9
 8010f94:	08010fb1 	.word	0x08010fb1
 8010f98:	08010fb9 	.word	0x08010fb9
 8010f9c:	08010fc1 	.word	0x08010fc1
 8010fa0:	08010fc9 	.word	0x08010fc9
 8010fa4:	08010fd1 	.word	0x08010fd1
 8010fa8:	2300      	movs	r3, #0
 8010faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fae:	e050      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010fb0:	2304      	movs	r3, #4
 8010fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fb6:	e04c      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010fb8:	2308      	movs	r3, #8
 8010fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fbe:	e048      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010fc0:	2310      	movs	r3, #16
 8010fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fc6:	e044      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010fc8:	2320      	movs	r3, #32
 8010fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fce:	e040      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010fd0:	2340      	movs	r3, #64	@ 0x40
 8010fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fd6:	e03c      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010fd8:	2380      	movs	r3, #128	@ 0x80
 8010fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010fde:	e038      	b.n	8011052 <UART_SetConfig+0x5a6>
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4a5b      	ldr	r2, [pc, #364]	@ (8011154 <UART_SetConfig+0x6a8>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d130      	bne.n	801104c <UART_SetConfig+0x5a0>
 8010fea:	4b57      	ldr	r3, [pc, #348]	@ (8011148 <UART_SetConfig+0x69c>)
 8010fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010fee:	f003 0307 	and.w	r3, r3, #7
 8010ff2:	2b05      	cmp	r3, #5
 8010ff4:	d826      	bhi.n	8011044 <UART_SetConfig+0x598>
 8010ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8010ffc <UART_SetConfig+0x550>)
 8010ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ffc:	08011015 	.word	0x08011015
 8011000:	0801101d 	.word	0x0801101d
 8011004:	08011025 	.word	0x08011025
 8011008:	0801102d 	.word	0x0801102d
 801100c:	08011035 	.word	0x08011035
 8011010:	0801103d 	.word	0x0801103d
 8011014:	2302      	movs	r3, #2
 8011016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801101a:	e01a      	b.n	8011052 <UART_SetConfig+0x5a6>
 801101c:	2304      	movs	r3, #4
 801101e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011022:	e016      	b.n	8011052 <UART_SetConfig+0x5a6>
 8011024:	2308      	movs	r3, #8
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801102a:	e012      	b.n	8011052 <UART_SetConfig+0x5a6>
 801102c:	2310      	movs	r3, #16
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011032:	e00e      	b.n	8011052 <UART_SetConfig+0x5a6>
 8011034:	2320      	movs	r3, #32
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801103a:	e00a      	b.n	8011052 <UART_SetConfig+0x5a6>
 801103c:	2340      	movs	r3, #64	@ 0x40
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011042:	e006      	b.n	8011052 <UART_SetConfig+0x5a6>
 8011044:	2380      	movs	r3, #128	@ 0x80
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801104a:	e002      	b.n	8011052 <UART_SetConfig+0x5a6>
 801104c:	2380      	movs	r3, #128	@ 0x80
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4a3f      	ldr	r2, [pc, #252]	@ (8011154 <UART_SetConfig+0x6a8>)
 8011058:	4293      	cmp	r3, r2
 801105a:	f040 80f8 	bne.w	801124e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801105e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011062:	2b20      	cmp	r3, #32
 8011064:	dc46      	bgt.n	80110f4 <UART_SetConfig+0x648>
 8011066:	2b02      	cmp	r3, #2
 8011068:	f2c0 8082 	blt.w	8011170 <UART_SetConfig+0x6c4>
 801106c:	3b02      	subs	r3, #2
 801106e:	2b1e      	cmp	r3, #30
 8011070:	d87e      	bhi.n	8011170 <UART_SetConfig+0x6c4>
 8011072:	a201      	add	r2, pc, #4	@ (adr r2, 8011078 <UART_SetConfig+0x5cc>)
 8011074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011078:	080110fb 	.word	0x080110fb
 801107c:	08011171 	.word	0x08011171
 8011080:	08011103 	.word	0x08011103
 8011084:	08011171 	.word	0x08011171
 8011088:	08011171 	.word	0x08011171
 801108c:	08011171 	.word	0x08011171
 8011090:	08011113 	.word	0x08011113
 8011094:	08011171 	.word	0x08011171
 8011098:	08011171 	.word	0x08011171
 801109c:	08011171 	.word	0x08011171
 80110a0:	08011171 	.word	0x08011171
 80110a4:	08011171 	.word	0x08011171
 80110a8:	08011171 	.word	0x08011171
 80110ac:	08011171 	.word	0x08011171
 80110b0:	08011123 	.word	0x08011123
 80110b4:	08011171 	.word	0x08011171
 80110b8:	08011171 	.word	0x08011171
 80110bc:	08011171 	.word	0x08011171
 80110c0:	08011171 	.word	0x08011171
 80110c4:	08011171 	.word	0x08011171
 80110c8:	08011171 	.word	0x08011171
 80110cc:	08011171 	.word	0x08011171
 80110d0:	08011171 	.word	0x08011171
 80110d4:	08011171 	.word	0x08011171
 80110d8:	08011171 	.word	0x08011171
 80110dc:	08011171 	.word	0x08011171
 80110e0:	08011171 	.word	0x08011171
 80110e4:	08011171 	.word	0x08011171
 80110e8:	08011171 	.word	0x08011171
 80110ec:	08011171 	.word	0x08011171
 80110f0:	08011163 	.word	0x08011163
 80110f4:	2b40      	cmp	r3, #64	@ 0x40
 80110f6:	d037      	beq.n	8011168 <UART_SetConfig+0x6bc>
 80110f8:	e03a      	b.n	8011170 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80110fa:	f7fe f887 	bl	800f20c <HAL_RCCEx_GetD3PCLK1Freq>
 80110fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011100:	e03c      	b.n	801117c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011106:	4618      	mov	r0, r3
 8011108:	f7fe f896 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801110c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011110:	e034      	b.n	801117c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011112:	f107 0318 	add.w	r3, r7, #24
 8011116:	4618      	mov	r0, r3
 8011118:	f7fe f9e2 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011120:	e02c      	b.n	801117c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011122:	4b09      	ldr	r3, [pc, #36]	@ (8011148 <UART_SetConfig+0x69c>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f003 0320 	and.w	r3, r3, #32
 801112a:	2b00      	cmp	r3, #0
 801112c:	d016      	beq.n	801115c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801112e:	4b06      	ldr	r3, [pc, #24]	@ (8011148 <UART_SetConfig+0x69c>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	08db      	lsrs	r3, r3, #3
 8011134:	f003 0303 	and.w	r3, r3, #3
 8011138:	4a07      	ldr	r2, [pc, #28]	@ (8011158 <UART_SetConfig+0x6ac>)
 801113a:	fa22 f303 	lsr.w	r3, r2, r3
 801113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011140:	e01c      	b.n	801117c <UART_SetConfig+0x6d0>
 8011142:	bf00      	nop
 8011144:	40011400 	.word	0x40011400
 8011148:	58024400 	.word	0x58024400
 801114c:	40007800 	.word	0x40007800
 8011150:	40007c00 	.word	0x40007c00
 8011154:	58000c00 	.word	0x58000c00
 8011158:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801115c:	4b9d      	ldr	r3, [pc, #628]	@ (80113d4 <UART_SetConfig+0x928>)
 801115e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011160:	e00c      	b.n	801117c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011162:	4b9d      	ldr	r3, [pc, #628]	@ (80113d8 <UART_SetConfig+0x92c>)
 8011164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011166:	e009      	b.n	801117c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801116c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801116e:	e005      	b.n	801117c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011170:	2300      	movs	r3, #0
 8011172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011174:	2301      	movs	r3, #1
 8011176:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801117a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801117c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801117e:	2b00      	cmp	r3, #0
 8011180:	f000 81de 	beq.w	8011540 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011188:	4a94      	ldr	r2, [pc, #592]	@ (80113dc <UART_SetConfig+0x930>)
 801118a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801118e:	461a      	mov	r2, r3
 8011190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011192:	fbb3 f3f2 	udiv	r3, r3, r2
 8011196:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	685a      	ldr	r2, [r3, #4]
 801119c:	4613      	mov	r3, r2
 801119e:	005b      	lsls	r3, r3, #1
 80111a0:	4413      	add	r3, r2
 80111a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d305      	bcc.n	80111b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80111a8:	697b      	ldr	r3, [r7, #20]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80111ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d903      	bls.n	80111bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80111b4:	2301      	movs	r3, #1
 80111b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80111ba:	e1c1      	b.n	8011540 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111be:	2200      	movs	r2, #0
 80111c0:	60bb      	str	r3, [r7, #8]
 80111c2:	60fa      	str	r2, [r7, #12]
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111c8:	4a84      	ldr	r2, [pc, #528]	@ (80113dc <UART_SetConfig+0x930>)
 80111ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	2200      	movs	r2, #0
 80111d2:	603b      	str	r3, [r7, #0]
 80111d4:	607a      	str	r2, [r7, #4]
 80111d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80111de:	f7ef f8d7 	bl	8000390 <__aeabi_uldivmod>
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	4610      	mov	r0, r2
 80111e8:	4619      	mov	r1, r3
 80111ea:	f04f 0200 	mov.w	r2, #0
 80111ee:	f04f 0300 	mov.w	r3, #0
 80111f2:	020b      	lsls	r3, r1, #8
 80111f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80111f8:	0202      	lsls	r2, r0, #8
 80111fa:	6979      	ldr	r1, [r7, #20]
 80111fc:	6849      	ldr	r1, [r1, #4]
 80111fe:	0849      	lsrs	r1, r1, #1
 8011200:	2000      	movs	r0, #0
 8011202:	460c      	mov	r4, r1
 8011204:	4605      	mov	r5, r0
 8011206:	eb12 0804 	adds.w	r8, r2, r4
 801120a:	eb43 0905 	adc.w	r9, r3, r5
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	469a      	mov	sl, r3
 8011216:	4693      	mov	fp, r2
 8011218:	4652      	mov	r2, sl
 801121a:	465b      	mov	r3, fp
 801121c:	4640      	mov	r0, r8
 801121e:	4649      	mov	r1, r9
 8011220:	f7ef f8b6 	bl	8000390 <__aeabi_uldivmod>
 8011224:	4602      	mov	r2, r0
 8011226:	460b      	mov	r3, r1
 8011228:	4613      	mov	r3, r2
 801122a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801122c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801122e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011232:	d308      	bcc.n	8011246 <UART_SetConfig+0x79a>
 8011234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801123a:	d204      	bcs.n	8011246 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011242:	60da      	str	r2, [r3, #12]
 8011244:	e17c      	b.n	8011540 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011246:	2301      	movs	r3, #1
 8011248:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801124c:	e178      	b.n	8011540 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	69db      	ldr	r3, [r3, #28]
 8011252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011256:	f040 80c5 	bne.w	80113e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801125a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801125e:	2b20      	cmp	r3, #32
 8011260:	dc48      	bgt.n	80112f4 <UART_SetConfig+0x848>
 8011262:	2b00      	cmp	r3, #0
 8011264:	db7b      	blt.n	801135e <UART_SetConfig+0x8b2>
 8011266:	2b20      	cmp	r3, #32
 8011268:	d879      	bhi.n	801135e <UART_SetConfig+0x8b2>
 801126a:	a201      	add	r2, pc, #4	@ (adr r2, 8011270 <UART_SetConfig+0x7c4>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	080112fb 	.word	0x080112fb
 8011274:	08011303 	.word	0x08011303
 8011278:	0801135f 	.word	0x0801135f
 801127c:	0801135f 	.word	0x0801135f
 8011280:	0801130b 	.word	0x0801130b
 8011284:	0801135f 	.word	0x0801135f
 8011288:	0801135f 	.word	0x0801135f
 801128c:	0801135f 	.word	0x0801135f
 8011290:	0801131b 	.word	0x0801131b
 8011294:	0801135f 	.word	0x0801135f
 8011298:	0801135f 	.word	0x0801135f
 801129c:	0801135f 	.word	0x0801135f
 80112a0:	0801135f 	.word	0x0801135f
 80112a4:	0801135f 	.word	0x0801135f
 80112a8:	0801135f 	.word	0x0801135f
 80112ac:	0801135f 	.word	0x0801135f
 80112b0:	0801132b 	.word	0x0801132b
 80112b4:	0801135f 	.word	0x0801135f
 80112b8:	0801135f 	.word	0x0801135f
 80112bc:	0801135f 	.word	0x0801135f
 80112c0:	0801135f 	.word	0x0801135f
 80112c4:	0801135f 	.word	0x0801135f
 80112c8:	0801135f 	.word	0x0801135f
 80112cc:	0801135f 	.word	0x0801135f
 80112d0:	0801135f 	.word	0x0801135f
 80112d4:	0801135f 	.word	0x0801135f
 80112d8:	0801135f 	.word	0x0801135f
 80112dc:	0801135f 	.word	0x0801135f
 80112e0:	0801135f 	.word	0x0801135f
 80112e4:	0801135f 	.word	0x0801135f
 80112e8:	0801135f 	.word	0x0801135f
 80112ec:	0801135f 	.word	0x0801135f
 80112f0:	08011351 	.word	0x08011351
 80112f4:	2b40      	cmp	r3, #64	@ 0x40
 80112f6:	d02e      	beq.n	8011356 <UART_SetConfig+0x8aa>
 80112f8:	e031      	b.n	801135e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112fa:	f7fb ffd1 	bl	800d2a0 <HAL_RCC_GetPCLK1Freq>
 80112fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011300:	e033      	b.n	801136a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011302:	f7fb ffe3 	bl	800d2cc <HAL_RCC_GetPCLK2Freq>
 8011306:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011308:	e02f      	b.n	801136a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801130a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801130e:	4618      	mov	r0, r3
 8011310:	f7fd ff92 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011318:	e027      	b.n	801136a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801131a:	f107 0318 	add.w	r3, r7, #24
 801131e:	4618      	mov	r0, r3
 8011320:	f7fe f8de 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011328:	e01f      	b.n	801136a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801132a:	4b2d      	ldr	r3, [pc, #180]	@ (80113e0 <UART_SetConfig+0x934>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f003 0320 	and.w	r3, r3, #32
 8011332:	2b00      	cmp	r3, #0
 8011334:	d009      	beq.n	801134a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011336:	4b2a      	ldr	r3, [pc, #168]	@ (80113e0 <UART_SetConfig+0x934>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	08db      	lsrs	r3, r3, #3
 801133c:	f003 0303 	and.w	r3, r3, #3
 8011340:	4a24      	ldr	r2, [pc, #144]	@ (80113d4 <UART_SetConfig+0x928>)
 8011342:	fa22 f303 	lsr.w	r3, r2, r3
 8011346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011348:	e00f      	b.n	801136a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801134a:	4b22      	ldr	r3, [pc, #136]	@ (80113d4 <UART_SetConfig+0x928>)
 801134c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801134e:	e00c      	b.n	801136a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011350:	4b21      	ldr	r3, [pc, #132]	@ (80113d8 <UART_SetConfig+0x92c>)
 8011352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011354:	e009      	b.n	801136a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801135c:	e005      	b.n	801136a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801135e:	2300      	movs	r3, #0
 8011360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011362:	2301      	movs	r3, #1
 8011364:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801136a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801136c:	2b00      	cmp	r3, #0
 801136e:	f000 80e7 	beq.w	8011540 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011376:	4a19      	ldr	r2, [pc, #100]	@ (80113dc <UART_SetConfig+0x930>)
 8011378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801137c:	461a      	mov	r2, r3
 801137e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011380:	fbb3 f3f2 	udiv	r3, r3, r2
 8011384:	005a      	lsls	r2, r3, #1
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	085b      	lsrs	r3, r3, #1
 801138c:	441a      	add	r2, r3
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	fbb2 f3f3 	udiv	r3, r2, r3
 8011396:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801139a:	2b0f      	cmp	r3, #15
 801139c:	d916      	bls.n	80113cc <UART_SetConfig+0x920>
 801139e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80113a4:	d212      	bcs.n	80113cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80113a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	f023 030f 	bic.w	r3, r3, #15
 80113ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80113b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113b2:	085b      	lsrs	r3, r3, #1
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	f003 0307 	and.w	r3, r3, #7
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80113be:	4313      	orrs	r3, r2
 80113c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80113c8:	60da      	str	r2, [r3, #12]
 80113ca:	e0b9      	b.n	8011540 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80113cc:	2301      	movs	r3, #1
 80113ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80113d2:	e0b5      	b.n	8011540 <UART_SetConfig+0xa94>
 80113d4:	03d09000 	.word	0x03d09000
 80113d8:	003d0900 	.word	0x003d0900
 80113dc:	08016c9c 	.word	0x08016c9c
 80113e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80113e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80113e8:	2b20      	cmp	r3, #32
 80113ea:	dc49      	bgt.n	8011480 <UART_SetConfig+0x9d4>
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	db7c      	blt.n	80114ea <UART_SetConfig+0xa3e>
 80113f0:	2b20      	cmp	r3, #32
 80113f2:	d87a      	bhi.n	80114ea <UART_SetConfig+0xa3e>
 80113f4:	a201      	add	r2, pc, #4	@ (adr r2, 80113fc <UART_SetConfig+0x950>)
 80113f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113fa:	bf00      	nop
 80113fc:	08011487 	.word	0x08011487
 8011400:	0801148f 	.word	0x0801148f
 8011404:	080114eb 	.word	0x080114eb
 8011408:	080114eb 	.word	0x080114eb
 801140c:	08011497 	.word	0x08011497
 8011410:	080114eb 	.word	0x080114eb
 8011414:	080114eb 	.word	0x080114eb
 8011418:	080114eb 	.word	0x080114eb
 801141c:	080114a7 	.word	0x080114a7
 8011420:	080114eb 	.word	0x080114eb
 8011424:	080114eb 	.word	0x080114eb
 8011428:	080114eb 	.word	0x080114eb
 801142c:	080114eb 	.word	0x080114eb
 8011430:	080114eb 	.word	0x080114eb
 8011434:	080114eb 	.word	0x080114eb
 8011438:	080114eb 	.word	0x080114eb
 801143c:	080114b7 	.word	0x080114b7
 8011440:	080114eb 	.word	0x080114eb
 8011444:	080114eb 	.word	0x080114eb
 8011448:	080114eb 	.word	0x080114eb
 801144c:	080114eb 	.word	0x080114eb
 8011450:	080114eb 	.word	0x080114eb
 8011454:	080114eb 	.word	0x080114eb
 8011458:	080114eb 	.word	0x080114eb
 801145c:	080114eb 	.word	0x080114eb
 8011460:	080114eb 	.word	0x080114eb
 8011464:	080114eb 	.word	0x080114eb
 8011468:	080114eb 	.word	0x080114eb
 801146c:	080114eb 	.word	0x080114eb
 8011470:	080114eb 	.word	0x080114eb
 8011474:	080114eb 	.word	0x080114eb
 8011478:	080114eb 	.word	0x080114eb
 801147c:	080114dd 	.word	0x080114dd
 8011480:	2b40      	cmp	r3, #64	@ 0x40
 8011482:	d02e      	beq.n	80114e2 <UART_SetConfig+0xa36>
 8011484:	e031      	b.n	80114ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011486:	f7fb ff0b 	bl	800d2a0 <HAL_RCC_GetPCLK1Freq>
 801148a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801148c:	e033      	b.n	80114f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801148e:	f7fb ff1d 	bl	800d2cc <HAL_RCC_GetPCLK2Freq>
 8011492:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011494:	e02f      	b.n	80114f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801149a:	4618      	mov	r0, r3
 801149c:	f7fd fecc 	bl	800f238 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114a4:	e027      	b.n	80114f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114a6:	f107 0318 	add.w	r3, r7, #24
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fe f818 	bl	800f4e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114b4:	e01f      	b.n	80114f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114b6:	4b2d      	ldr	r3, [pc, #180]	@ (801156c <UART_SetConfig+0xac0>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f003 0320 	and.w	r3, r3, #32
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d009      	beq.n	80114d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114c2:	4b2a      	ldr	r3, [pc, #168]	@ (801156c <UART_SetConfig+0xac0>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	08db      	lsrs	r3, r3, #3
 80114c8:	f003 0303 	and.w	r3, r3, #3
 80114cc:	4a28      	ldr	r2, [pc, #160]	@ (8011570 <UART_SetConfig+0xac4>)
 80114ce:	fa22 f303 	lsr.w	r3, r2, r3
 80114d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114d4:	e00f      	b.n	80114f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80114d6:	4b26      	ldr	r3, [pc, #152]	@ (8011570 <UART_SetConfig+0xac4>)
 80114d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114da:	e00c      	b.n	80114f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114dc:	4b25      	ldr	r3, [pc, #148]	@ (8011574 <UART_SetConfig+0xac8>)
 80114de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114e0:	e009      	b.n	80114f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80114e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114e8:	e005      	b.n	80114f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80114ea:	2300      	movs	r3, #0
 80114ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80114ee:	2301      	movs	r3, #1
 80114f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80114f4:	bf00      	nop
    }

    if (pclk != 0U)
 80114f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d021      	beq.n	8011540 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011500:	4a1d      	ldr	r2, [pc, #116]	@ (8011578 <UART_SetConfig+0xacc>)
 8011502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011506:	461a      	mov	r2, r3
 8011508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801150a:	fbb3 f2f2 	udiv	r2, r3, r2
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	085b      	lsrs	r3, r3, #1
 8011514:	441a      	add	r2, r3
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	fbb2 f3f3 	udiv	r3, r2, r3
 801151e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011522:	2b0f      	cmp	r3, #15
 8011524:	d909      	bls.n	801153a <UART_SetConfig+0xa8e>
 8011526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801152c:	d205      	bcs.n	801153a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801152e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011530:	b29a      	uxth	r2, r3
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	60da      	str	r2, [r3, #12]
 8011538:	e002      	b.n	8011540 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801153a:	2301      	movs	r3, #1
 801153c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011540:	697b      	ldr	r3, [r7, #20]
 8011542:	2201      	movs	r2, #1
 8011544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2201      	movs	r2, #1
 801154c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	2200      	movs	r2, #0
 8011554:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	2200      	movs	r2, #0
 801155a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801155c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8011560:	4618      	mov	r0, r3
 8011562:	3748      	adds	r7, #72	@ 0x48
 8011564:	46bd      	mov	sp, r7
 8011566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801156a:	bf00      	nop
 801156c:	58024400 	.word	0x58024400
 8011570:	03d09000 	.word	0x03d09000
 8011574:	003d0900 	.word	0x003d0900
 8011578:	08016c9c 	.word	0x08016c9c

0801157c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011588:	f003 0308 	and.w	r3, r3, #8
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00a      	beq.n	80115a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	430a      	orrs	r2, r1
 80115a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115aa:	f003 0301 	and.w	r3, r3, #1
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00a      	beq.n	80115c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	430a      	orrs	r2, r1
 80115c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115cc:	f003 0302 	and.w	r3, r3, #2
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00a      	beq.n	80115ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	430a      	orrs	r2, r1
 80115e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115ee:	f003 0304 	and.w	r3, r3, #4
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d00a      	beq.n	801160c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	430a      	orrs	r2, r1
 801160a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011610:	f003 0310 	and.w	r3, r3, #16
 8011614:	2b00      	cmp	r3, #0
 8011616:	d00a      	beq.n	801162e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	689b      	ldr	r3, [r3, #8]
 801161e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	430a      	orrs	r2, r1
 801162c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011632:	f003 0320 	and.w	r3, r3, #32
 8011636:	2b00      	cmp	r3, #0
 8011638:	d00a      	beq.n	8011650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	689b      	ldr	r3, [r3, #8]
 8011640:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	430a      	orrs	r2, r1
 801164e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011658:	2b00      	cmp	r3, #0
 801165a:	d01a      	beq.n	8011692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	430a      	orrs	r2, r1
 8011670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801167a:	d10a      	bne.n	8011692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	430a      	orrs	r2, r1
 8011690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00a      	beq.n	80116b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	430a      	orrs	r2, r1
 80116b2:	605a      	str	r2, [r3, #4]
  }
}
 80116b4:	bf00      	nop
 80116b6:	370c      	adds	r7, #12
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b098      	sub	sp, #96	@ 0x60
 80116c4:	af02      	add	r7, sp, #8
 80116c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80116d0:	f7f0 fb5a 	bl	8001d88 <HAL_GetTick>
 80116d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f003 0308 	and.w	r3, r3, #8
 80116e0:	2b08      	cmp	r3, #8
 80116e2:	d12f      	bne.n	8011744 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80116e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80116e8:	9300      	str	r3, [sp, #0]
 80116ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116ec:	2200      	movs	r2, #0
 80116ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 f88e 	bl	8011814 <UART_WaitOnFlagUntilTimeout>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d022      	beq.n	8011744 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011706:	e853 3f00 	ldrex	r3, [r3]
 801170a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801170c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801170e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011712:	653b      	str	r3, [r7, #80]	@ 0x50
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	461a      	mov	r2, r3
 801171a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801171c:	647b      	str	r3, [r7, #68]	@ 0x44
 801171e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011720:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011724:	e841 2300 	strex	r3, r2, [r1]
 8011728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801172a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1e6      	bne.n	80116fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2220      	movs	r2, #32
 8011734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2200      	movs	r2, #0
 801173c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011740:	2303      	movs	r3, #3
 8011742:	e063      	b.n	801180c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f003 0304 	and.w	r3, r3, #4
 801174e:	2b04      	cmp	r3, #4
 8011750:	d149      	bne.n	80117e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011752:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011756:	9300      	str	r3, [sp, #0]
 8011758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801175a:	2200      	movs	r2, #0
 801175c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 f857 	bl	8011814 <UART_WaitOnFlagUntilTimeout>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d03c      	beq.n	80117e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011774:	e853 3f00 	ldrex	r3, [r3]
 8011778:	623b      	str	r3, [r7, #32]
   return(result);
 801177a:	6a3b      	ldr	r3, [r7, #32]
 801177c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	461a      	mov	r2, r3
 8011788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801178a:	633b      	str	r3, [r7, #48]	@ 0x30
 801178c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801178e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011792:	e841 2300 	strex	r3, r2, [r1]
 8011796:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801179a:	2b00      	cmp	r3, #0
 801179c:	d1e6      	bne.n	801176c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3308      	adds	r3, #8
 80117a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	e853 3f00 	ldrex	r3, [r3]
 80117ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f023 0301 	bic.w	r3, r3, #1
 80117b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	3308      	adds	r3, #8
 80117bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117be:	61fa      	str	r2, [r7, #28]
 80117c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117c2:	69b9      	ldr	r1, [r7, #24]
 80117c4:	69fa      	ldr	r2, [r7, #28]
 80117c6:	e841 2300 	strex	r3, r2, [r1]
 80117ca:	617b      	str	r3, [r7, #20]
   return(result);
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1e5      	bne.n	801179e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2220      	movs	r2, #32
 80117d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80117e2:	2303      	movs	r3, #3
 80117e4:	e012      	b.n	801180c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2220      	movs	r2, #32
 80117ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2220      	movs	r2, #32
 80117f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801180a:	2300      	movs	r3, #0
}
 801180c:	4618      	mov	r0, r3
 801180e:	3758      	adds	r7, #88	@ 0x58
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	603b      	str	r3, [r7, #0]
 8011820:	4613      	mov	r3, r2
 8011822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011824:	e04f      	b.n	80118c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182c:	d04b      	beq.n	80118c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801182e:	f7f0 faab 	bl	8001d88 <HAL_GetTick>
 8011832:	4602      	mov	r2, r0
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	69ba      	ldr	r2, [r7, #24]
 801183a:	429a      	cmp	r2, r3
 801183c:	d302      	bcc.n	8011844 <UART_WaitOnFlagUntilTimeout+0x30>
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d101      	bne.n	8011848 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011844:	2303      	movs	r3, #3
 8011846:	e04e      	b.n	80118e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f003 0304 	and.w	r3, r3, #4
 8011852:	2b00      	cmp	r3, #0
 8011854:	d037      	beq.n	80118c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	2b80      	cmp	r3, #128	@ 0x80
 801185a:	d034      	beq.n	80118c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	2b40      	cmp	r3, #64	@ 0x40
 8011860:	d031      	beq.n	80118c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	69db      	ldr	r3, [r3, #28]
 8011868:	f003 0308 	and.w	r3, r3, #8
 801186c:	2b08      	cmp	r3, #8
 801186e:	d110      	bne.n	8011892 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2208      	movs	r2, #8
 8011876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f000 f839 	bl	80118f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2208      	movs	r2, #8
 8011882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	2200      	movs	r2, #0
 801188a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801188e:	2301      	movs	r3, #1
 8011890:	e029      	b.n	80118e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	69db      	ldr	r3, [r3, #28]
 8011898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801189c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80118a0:	d111      	bne.n	80118c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80118aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f000 f81f 	bl	80118f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	2220      	movs	r2, #32
 80118b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2200      	movs	r2, #0
 80118be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80118c2:	2303      	movs	r3, #3
 80118c4:	e00f      	b.n	80118e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	69da      	ldr	r2, [r3, #28]
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	4013      	ands	r3, r2
 80118d0:	68ba      	ldr	r2, [r7, #8]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	bf0c      	ite	eq
 80118d6:	2301      	moveq	r3, #1
 80118d8:	2300      	movne	r3, #0
 80118da:	b2db      	uxtb	r3, r3
 80118dc:	461a      	mov	r2, r3
 80118de:	79fb      	ldrb	r3, [r7, #7]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d0a0      	beq.n	8011826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80118e4:	2300      	movs	r3, #0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3710      	adds	r7, #16
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
	...

080118f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80118f0:	b480      	push	{r7}
 80118f2:	b095      	sub	sp, #84	@ 0x54
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011900:	e853 3f00 	ldrex	r3, [r3]
 8011904:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801190c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	461a      	mov	r2, r3
 8011914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011916:	643b      	str	r3, [r7, #64]	@ 0x40
 8011918:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801191c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801191e:	e841 2300 	strex	r3, r2, [r1]
 8011922:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011926:	2b00      	cmp	r3, #0
 8011928:	d1e6      	bne.n	80118f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	3308      	adds	r3, #8
 8011930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011932:	6a3b      	ldr	r3, [r7, #32]
 8011934:	e853 3f00 	ldrex	r3, [r3]
 8011938:	61fb      	str	r3, [r7, #28]
   return(result);
 801193a:	69fa      	ldr	r2, [r7, #28]
 801193c:	4b1e      	ldr	r3, [pc, #120]	@ (80119b8 <UART_EndRxTransfer+0xc8>)
 801193e:	4013      	ands	r3, r2
 8011940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	3308      	adds	r3, #8
 8011948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801194a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801194c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801194e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011952:	e841 2300 	strex	r3, r2, [r1]
 8011956:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801195a:	2b00      	cmp	r3, #0
 801195c:	d1e5      	bne.n	801192a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011962:	2b01      	cmp	r3, #1
 8011964:	d118      	bne.n	8011998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	e853 3f00 	ldrex	r3, [r3]
 8011972:	60bb      	str	r3, [r7, #8]
   return(result);
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	f023 0310 	bic.w	r3, r3, #16
 801197a:	647b      	str	r3, [r7, #68]	@ 0x44
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	461a      	mov	r2, r3
 8011982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011984:	61bb      	str	r3, [r7, #24]
 8011986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011988:	6979      	ldr	r1, [r7, #20]
 801198a:	69ba      	ldr	r2, [r7, #24]
 801198c:	e841 2300 	strex	r3, r2, [r1]
 8011990:	613b      	str	r3, [r7, #16]
   return(result);
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d1e6      	bne.n	8011966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2220      	movs	r2, #32
 801199c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80119ac:	bf00      	nop
 80119ae:	3754      	adds	r7, #84	@ 0x54
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr
 80119b8:	effffffe 	.word	0xeffffffe

080119bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2200      	movs	r2, #0
 80119ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80119d2:	68f8      	ldr	r0, [r7, #12]
 80119d4:	f7ff f854 	bl	8010a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80119d8:	bf00      	nop
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b088      	sub	sp, #32
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	e853 3f00 	ldrex	r3, [r3]
 80119f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80119fc:	61fb      	str	r3, [r7, #28]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	461a      	mov	r2, r3
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	61bb      	str	r3, [r7, #24]
 8011a08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a0a:	6979      	ldr	r1, [r7, #20]
 8011a0c:	69ba      	ldr	r2, [r7, #24]
 8011a0e:	e841 2300 	strex	r3, r2, [r1]
 8011a12:	613b      	str	r3, [r7, #16]
   return(result);
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d1e6      	bne.n	80119e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2220      	movs	r2, #32
 8011a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2200      	movs	r2, #0
 8011a26:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7ff f81f 	bl	8010a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a2e:	bf00      	nop
 8011a30:	3720      	adds	r7, #32
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011a36:	b480      	push	{r7}
 8011a38:	b083      	sub	sp, #12
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011a3e:	bf00      	nop
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011a52:	bf00      	nop
 8011a54:	370c      	adds	r7, #12
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr

08011a5e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011a5e:	b480      	push	{r7}
 8011a60:	b083      	sub	sp, #12
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011a66:	bf00      	nop
 8011a68:	370c      	adds	r7, #12
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a70:	4770      	bx	lr

08011a72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011a72:	b480      	push	{r7}
 8011a74:	b085      	sub	sp, #20
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	d101      	bne.n	8011a88 <HAL_UARTEx_DisableFifoMode+0x16>
 8011a84:	2302      	movs	r3, #2
 8011a86:	e027      	b.n	8011ad8 <HAL_UARTEx_DisableFifoMode+0x66>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2201      	movs	r2, #1
 8011a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2224      	movs	r2, #36	@ 0x24
 8011a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f022 0201 	bic.w	r2, r2, #1
 8011aae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011ab6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2200      	movs	r2, #0
 8011abc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	68fa      	ldr	r2, [r7, #12]
 8011ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2220      	movs	r2, #32
 8011aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011ad6:	2300      	movs	r3, #0
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3714      	adds	r7, #20
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr

08011ae4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d101      	bne.n	8011afc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011af8:	2302      	movs	r3, #2
 8011afa:	e02d      	b.n	8011b58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2201      	movs	r2, #1
 8011b00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2224      	movs	r2, #36	@ 0x24
 8011b08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	f022 0201 	bic.w	r2, r2, #1
 8011b22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	683a      	ldr	r2, [r7, #0]
 8011b34:	430a      	orrs	r2, r1
 8011b36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f000 f84f 	bl	8011bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	68fa      	ldr	r2, [r7, #12]
 8011b44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2220      	movs	r2, #32
 8011b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2200      	movs	r2, #0
 8011b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011b56:	2300      	movs	r3, #0
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3710      	adds	r7, #16
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}

08011b60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011b70:	2b01      	cmp	r3, #1
 8011b72:	d101      	bne.n	8011b78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011b74:	2302      	movs	r3, #2
 8011b76:	e02d      	b.n	8011bd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2224      	movs	r2, #36	@ 0x24
 8011b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	681a      	ldr	r2, [r3, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f022 0201 	bic.w	r2, r2, #1
 8011b9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	683a      	ldr	r2, [r7, #0]
 8011bb0:	430a      	orrs	r2, r1
 8011bb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f000 f811 	bl	8011bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	68fa      	ldr	r2, [r7, #12]
 8011bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2220      	movs	r2, #32
 8011bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011bd2:	2300      	movs	r3, #0
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3710      	adds	r7, #16
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d108      	bne.n	8011bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2201      	movs	r2, #1
 8011bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011bfc:	e031      	b.n	8011c62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011bfe:	2310      	movs	r3, #16
 8011c00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011c02:	2310      	movs	r3, #16
 8011c04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	689b      	ldr	r3, [r3, #8]
 8011c0c:	0e5b      	lsrs	r3, r3, #25
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	f003 0307 	and.w	r3, r3, #7
 8011c14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	689b      	ldr	r3, [r3, #8]
 8011c1c:	0f5b      	lsrs	r3, r3, #29
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	f003 0307 	and.w	r3, r3, #7
 8011c24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011c26:	7bbb      	ldrb	r3, [r7, #14]
 8011c28:	7b3a      	ldrb	r2, [r7, #12]
 8011c2a:	4911      	ldr	r1, [pc, #68]	@ (8011c70 <UARTEx_SetNbDataToProcess+0x94>)
 8011c2c:	5c8a      	ldrb	r2, [r1, r2]
 8011c2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011c32:	7b3a      	ldrb	r2, [r7, #12]
 8011c34:	490f      	ldr	r1, [pc, #60]	@ (8011c74 <UARTEx_SetNbDataToProcess+0x98>)
 8011c36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011c38:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c3c:	b29a      	uxth	r2, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011c44:	7bfb      	ldrb	r3, [r7, #15]
 8011c46:	7b7a      	ldrb	r2, [r7, #13]
 8011c48:	4909      	ldr	r1, [pc, #36]	@ (8011c70 <UARTEx_SetNbDataToProcess+0x94>)
 8011c4a:	5c8a      	ldrb	r2, [r1, r2]
 8011c4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011c50:	7b7a      	ldrb	r2, [r7, #13]
 8011c52:	4908      	ldr	r1, [pc, #32]	@ (8011c74 <UARTEx_SetNbDataToProcess+0x98>)
 8011c54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c5a:	b29a      	uxth	r2, r3
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011c62:	bf00      	nop
 8011c64:	3714      	adds	r7, #20
 8011c66:	46bd      	mov	sp, r7
 8011c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6c:	4770      	bx	lr
 8011c6e:	bf00      	nop
 8011c70:	08016cb4 	.word	0x08016cb4
 8011c74:	08016cbc 	.word	0x08016cbc

08011c78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c78:	b084      	sub	sp, #16
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b084      	sub	sp, #16
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
 8011c82:	f107 001c 	add.w	r0, r7, #28
 8011c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011c8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d121      	bne.n	8011cd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	68da      	ldr	r2, [r3, #12]
 8011ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8011d54 <USB_CoreInit+0xdc>)
 8011ca4:	4013      	ands	r3, r2
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d105      	bne.n	8011cca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f001 fafa 	bl	80132c4 <USB_CoreReset>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	73fb      	strb	r3, [r7, #15]
 8011cd4:	e01b      	b.n	8011d0e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	68db      	ldr	r3, [r3, #12]
 8011cda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f001 faee 	bl	80132c4 <USB_CoreReset>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011cec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d106      	bne.n	8011d02 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cf8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8011d00:	e005      	b.n	8011d0e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011d0e:	7fbb      	ldrb	r3, [r7, #30]
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d116      	bne.n	8011d42 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011d22:	4b0d      	ldr	r3, [pc, #52]	@ (8011d58 <USB_CoreInit+0xe0>)
 8011d24:	4313      	orrs	r3, r2
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	689b      	ldr	r3, [r3, #8]
 8011d2e:	f043 0206 	orr.w	r2, r3, #6
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	689b      	ldr	r3, [r3, #8]
 8011d3a:	f043 0220 	orr.w	r2, r3, #32
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3710      	adds	r7, #16
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011d4e:	b004      	add	sp, #16
 8011d50:	4770      	bx	lr
 8011d52:	bf00      	nop
 8011d54:	ffbdffbf 	.word	0xffbdffbf
 8011d58:	03ee0000 	.word	0x03ee0000

08011d5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b087      	sub	sp, #28
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	60f8      	str	r0, [r7, #12]
 8011d64:	60b9      	str	r1, [r7, #8]
 8011d66:	4613      	mov	r3, r2
 8011d68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011d6a:	79fb      	ldrb	r3, [r7, #7]
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	d165      	bne.n	8011e3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	4a41      	ldr	r2, [pc, #260]	@ (8011e78 <USB_SetTurnaroundTime+0x11c>)
 8011d74:	4293      	cmp	r3, r2
 8011d76:	d906      	bls.n	8011d86 <USB_SetTurnaroundTime+0x2a>
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	4a40      	ldr	r2, [pc, #256]	@ (8011e7c <USB_SetTurnaroundTime+0x120>)
 8011d7c:	4293      	cmp	r3, r2
 8011d7e:	d202      	bcs.n	8011d86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011d80:	230f      	movs	r3, #15
 8011d82:	617b      	str	r3, [r7, #20]
 8011d84:	e062      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	4a3c      	ldr	r2, [pc, #240]	@ (8011e7c <USB_SetTurnaroundTime+0x120>)
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d306      	bcc.n	8011d9c <USB_SetTurnaroundTime+0x40>
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	4a3b      	ldr	r2, [pc, #236]	@ (8011e80 <USB_SetTurnaroundTime+0x124>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d202      	bcs.n	8011d9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011d96:	230e      	movs	r3, #14
 8011d98:	617b      	str	r3, [r7, #20]
 8011d9a:	e057      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	4a38      	ldr	r2, [pc, #224]	@ (8011e80 <USB_SetTurnaroundTime+0x124>)
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d306      	bcc.n	8011db2 <USB_SetTurnaroundTime+0x56>
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	4a37      	ldr	r2, [pc, #220]	@ (8011e84 <USB_SetTurnaroundTime+0x128>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d202      	bcs.n	8011db2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011dac:	230d      	movs	r3, #13
 8011dae:	617b      	str	r3, [r7, #20]
 8011db0:	e04c      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	4a33      	ldr	r2, [pc, #204]	@ (8011e84 <USB_SetTurnaroundTime+0x128>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d306      	bcc.n	8011dc8 <USB_SetTurnaroundTime+0x6c>
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	4a32      	ldr	r2, [pc, #200]	@ (8011e88 <USB_SetTurnaroundTime+0x12c>)
 8011dbe:	4293      	cmp	r3, r2
 8011dc0:	d802      	bhi.n	8011dc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011dc2:	230c      	movs	r3, #12
 8011dc4:	617b      	str	r3, [r7, #20]
 8011dc6:	e041      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	4a2f      	ldr	r2, [pc, #188]	@ (8011e88 <USB_SetTurnaroundTime+0x12c>)
 8011dcc:	4293      	cmp	r3, r2
 8011dce:	d906      	bls.n	8011dde <USB_SetTurnaroundTime+0x82>
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8011e8c <USB_SetTurnaroundTime+0x130>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d802      	bhi.n	8011dde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011dd8:	230b      	movs	r3, #11
 8011dda:	617b      	str	r3, [r7, #20]
 8011ddc:	e036      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	4a2a      	ldr	r2, [pc, #168]	@ (8011e8c <USB_SetTurnaroundTime+0x130>)
 8011de2:	4293      	cmp	r3, r2
 8011de4:	d906      	bls.n	8011df4 <USB_SetTurnaroundTime+0x98>
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	4a29      	ldr	r2, [pc, #164]	@ (8011e90 <USB_SetTurnaroundTime+0x134>)
 8011dea:	4293      	cmp	r3, r2
 8011dec:	d802      	bhi.n	8011df4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011dee:	230a      	movs	r3, #10
 8011df0:	617b      	str	r3, [r7, #20]
 8011df2:	e02b      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	4a26      	ldr	r2, [pc, #152]	@ (8011e90 <USB_SetTurnaroundTime+0x134>)
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	d906      	bls.n	8011e0a <USB_SetTurnaroundTime+0xae>
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	4a25      	ldr	r2, [pc, #148]	@ (8011e94 <USB_SetTurnaroundTime+0x138>)
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d202      	bcs.n	8011e0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011e04:	2309      	movs	r3, #9
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e020      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	4a21      	ldr	r2, [pc, #132]	@ (8011e94 <USB_SetTurnaroundTime+0x138>)
 8011e0e:	4293      	cmp	r3, r2
 8011e10:	d306      	bcc.n	8011e20 <USB_SetTurnaroundTime+0xc4>
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	4a20      	ldr	r2, [pc, #128]	@ (8011e98 <USB_SetTurnaroundTime+0x13c>)
 8011e16:	4293      	cmp	r3, r2
 8011e18:	d802      	bhi.n	8011e20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011e1a:	2308      	movs	r3, #8
 8011e1c:	617b      	str	r3, [r7, #20]
 8011e1e:	e015      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	4a1d      	ldr	r2, [pc, #116]	@ (8011e98 <USB_SetTurnaroundTime+0x13c>)
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d906      	bls.n	8011e36 <USB_SetTurnaroundTime+0xda>
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8011e9c <USB_SetTurnaroundTime+0x140>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d202      	bcs.n	8011e36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011e30:	2307      	movs	r3, #7
 8011e32:	617b      	str	r3, [r7, #20]
 8011e34:	e00a      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011e36:	2306      	movs	r3, #6
 8011e38:	617b      	str	r3, [r7, #20]
 8011e3a:	e007      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011e3c:	79fb      	ldrb	r3, [r7, #7]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d102      	bne.n	8011e48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011e42:	2309      	movs	r3, #9
 8011e44:	617b      	str	r3, [r7, #20]
 8011e46:	e001      	b.n	8011e4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011e48:	2309      	movs	r3, #9
 8011e4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	68da      	ldr	r2, [r3, #12]
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	029b      	lsls	r3, r3, #10
 8011e60:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8011e64:	431a      	orrs	r2, r3
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e6a:	2300      	movs	r3, #0
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	371c      	adds	r7, #28
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr
 8011e78:	00d8acbf 	.word	0x00d8acbf
 8011e7c:	00e4e1c0 	.word	0x00e4e1c0
 8011e80:	00f42400 	.word	0x00f42400
 8011e84:	01067380 	.word	0x01067380
 8011e88:	011a499f 	.word	0x011a499f
 8011e8c:	01312cff 	.word	0x01312cff
 8011e90:	014ca43f 	.word	0x014ca43f
 8011e94:	016e3600 	.word	0x016e3600
 8011e98:	01a6ab1f 	.word	0x01a6ab1f
 8011e9c:	01e84800 	.word	0x01e84800

08011ea0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	689b      	ldr	r3, [r3, #8]
 8011eac:	f043 0201 	orr.w	r2, r3, #1
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011eb4:	2300      	movs	r3, #0
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	370c      	adds	r7, #12
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec0:	4770      	bx	lr

08011ec2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011ec2:	b480      	push	{r7}
 8011ec4:	b083      	sub	sp, #12
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	f023 0201 	bic.w	r2, r3, #1
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011ed6:	2300      	movs	r3, #0
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	370c      	adds	r7, #12
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr

08011ee4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	460b      	mov	r3, r1
 8011eee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011f00:	78fb      	ldrb	r3, [r7, #3]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d115      	bne.n	8011f32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	68db      	ldr	r3, [r3, #12]
 8011f0a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011f12:	200a      	movs	r0, #10
 8011f14:	f7ef ff44 	bl	8001da0 <HAL_Delay>
      ms += 10U;
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	330a      	adds	r3, #10
 8011f1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f001 f93f 	bl	80131a2 <USB_GetMode>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d01e      	beq.n	8011f68 <USB_SetCurrentMode+0x84>
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2bc7      	cmp	r3, #199	@ 0xc7
 8011f2e:	d9f0      	bls.n	8011f12 <USB_SetCurrentMode+0x2e>
 8011f30:	e01a      	b.n	8011f68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011f32:	78fb      	ldrb	r3, [r7, #3]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d115      	bne.n	8011f64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8011f44:	200a      	movs	r0, #10
 8011f46:	f7ef ff2b 	bl	8001da0 <HAL_Delay>
      ms += 10U;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	330a      	adds	r3, #10
 8011f4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f001 f926 	bl	80131a2 <USB_GetMode>
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d005      	beq.n	8011f68 <USB_SetCurrentMode+0x84>
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	2bc7      	cmp	r3, #199	@ 0xc7
 8011f60:	d9f0      	bls.n	8011f44 <USB_SetCurrentMode+0x60>
 8011f62:	e001      	b.n	8011f68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011f64:	2301      	movs	r3, #1
 8011f66:	e005      	b.n	8011f74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2bc8      	cmp	r3, #200	@ 0xc8
 8011f6c:	d101      	bne.n	8011f72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011f6e:	2301      	movs	r3, #1
 8011f70:	e000      	b.n	8011f74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011f72:	2300      	movs	r3, #0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3710      	adds	r7, #16
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011f7c:	b084      	sub	sp, #16
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b086      	sub	sp, #24
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011f96:	2300      	movs	r3, #0
 8011f98:	613b      	str	r3, [r7, #16]
 8011f9a:	e009      	b.n	8011fb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	3340      	adds	r3, #64	@ 0x40
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	4413      	add	r3, r2
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	3301      	adds	r3, #1
 8011fae:	613b      	str	r3, [r7, #16]
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	2b0e      	cmp	r3, #14
 8011fb4:	d9f2      	bls.n	8011f9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011fb6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d11c      	bne.n	8011ff8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011fcc:	f043 0302 	orr.w	r3, r3, #2
 8011fd0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fd6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	601a      	str	r2, [r3, #0]
 8011ff6:	e005      	b.n	8012004 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ffc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801200a:	461a      	mov	r2, r3
 801200c:	2300      	movs	r3, #0
 801200e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012010:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8012014:	2b01      	cmp	r3, #1
 8012016:	d10d      	bne.n	8012034 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801201c:	2b00      	cmp	r3, #0
 801201e:	d104      	bne.n	801202a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012020:	2100      	movs	r1, #0
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 f968 	bl	80122f8 <USB_SetDevSpeed>
 8012028:	e008      	b.n	801203c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801202a:	2101      	movs	r1, #1
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 f963 	bl	80122f8 <USB_SetDevSpeed>
 8012032:	e003      	b.n	801203c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012034:	2103      	movs	r1, #3
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f000 f95e 	bl	80122f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801203c:	2110      	movs	r1, #16
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f000 f8fa 	bl	8012238 <USB_FlushTxFifo>
 8012044:	4603      	mov	r3, r0
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801204a:	2301      	movs	r3, #1
 801204c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f924 	bl	801229c <USB_FlushRxFifo>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	d001      	beq.n	801205e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801205a:	2301      	movs	r3, #1
 801205c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012064:	461a      	mov	r2, r3
 8012066:	2300      	movs	r3, #0
 8012068:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012070:	461a      	mov	r2, r3
 8012072:	2300      	movs	r3, #0
 8012074:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801207c:	461a      	mov	r2, r3
 801207e:	2300      	movs	r3, #0
 8012080:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012082:	2300      	movs	r3, #0
 8012084:	613b      	str	r3, [r7, #16]
 8012086:	e043      	b.n	8012110 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	015a      	lsls	r2, r3, #5
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4413      	add	r3, r2
 8012090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801209a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801209e:	d118      	bne.n	80120d2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d10a      	bne.n	80120bc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	015a      	lsls	r2, r3, #5
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	4413      	add	r3, r2
 80120ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120b2:	461a      	mov	r2, r3
 80120b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80120b8:	6013      	str	r3, [r2, #0]
 80120ba:	e013      	b.n	80120e4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	015a      	lsls	r2, r3, #5
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	4413      	add	r3, r2
 80120c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120c8:	461a      	mov	r2, r3
 80120ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80120ce:	6013      	str	r3, [r2, #0]
 80120d0:	e008      	b.n	80120e4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	015a      	lsls	r2, r3, #5
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	4413      	add	r3, r2
 80120da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120de:	461a      	mov	r2, r3
 80120e0:	2300      	movs	r3, #0
 80120e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	015a      	lsls	r2, r3, #5
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	4413      	add	r3, r2
 80120ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80120f0:	461a      	mov	r2, r3
 80120f2:	2300      	movs	r3, #0
 80120f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	015a      	lsls	r2, r3, #5
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	4413      	add	r3, r2
 80120fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012102:	461a      	mov	r2, r3
 8012104:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8012108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	3301      	adds	r3, #1
 801210e:	613b      	str	r3, [r7, #16]
 8012110:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012114:	461a      	mov	r2, r3
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	4293      	cmp	r3, r2
 801211a:	d3b5      	bcc.n	8012088 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801211c:	2300      	movs	r3, #0
 801211e:	613b      	str	r3, [r7, #16]
 8012120:	e043      	b.n	80121aa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	015a      	lsls	r2, r3, #5
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	4413      	add	r3, r2
 801212a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012138:	d118      	bne.n	801216c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10a      	bne.n	8012156 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	015a      	lsls	r2, r3, #5
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	4413      	add	r3, r2
 8012148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801214c:	461a      	mov	r2, r3
 801214e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8012152:	6013      	str	r3, [r2, #0]
 8012154:	e013      	b.n	801217e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	015a      	lsls	r2, r3, #5
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	4413      	add	r3, r2
 801215e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012162:	461a      	mov	r2, r3
 8012164:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8012168:	6013      	str	r3, [r2, #0]
 801216a:	e008      	b.n	801217e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	015a      	lsls	r2, r3, #5
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	4413      	add	r3, r2
 8012174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012178:	461a      	mov	r2, r3
 801217a:	2300      	movs	r3, #0
 801217c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	015a      	lsls	r2, r3, #5
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	4413      	add	r3, r2
 8012186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801218a:	461a      	mov	r2, r3
 801218c:	2300      	movs	r3, #0
 801218e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	015a      	lsls	r2, r3, #5
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	4413      	add	r3, r2
 8012198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801219c:	461a      	mov	r2, r3
 801219e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80121a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	3301      	adds	r3, #1
 80121a8:	613b      	str	r3, [r7, #16]
 80121aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80121ae:	461a      	mov	r2, r3
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	4293      	cmp	r3, r2
 80121b4:	d3b5      	bcc.n	8012122 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80121bc:	691b      	ldr	r3, [r3, #16]
 80121be:	68fa      	ldr	r2, [r7, #12]
 80121c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80121c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80121c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80121d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80121d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d105      	bne.n	80121ec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	699b      	ldr	r3, [r3, #24]
 80121e4:	f043 0210 	orr.w	r2, r3, #16
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	699a      	ldr	r2, [r3, #24]
 80121f0:	4b0f      	ldr	r3, [pc, #60]	@ (8012230 <USB_DevInit+0x2b4>)
 80121f2:	4313      	orrs	r3, r2
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80121f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d005      	beq.n	801220c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	699b      	ldr	r3, [r3, #24]
 8012204:	f043 0208 	orr.w	r2, r3, #8
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801220c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012210:	2b01      	cmp	r3, #1
 8012212:	d105      	bne.n	8012220 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	699a      	ldr	r2, [r3, #24]
 8012218:	4b06      	ldr	r3, [pc, #24]	@ (8012234 <USB_DevInit+0x2b8>)
 801221a:	4313      	orrs	r3, r2
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012220:	7dfb      	ldrb	r3, [r7, #23]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3718      	adds	r7, #24
 8012226:	46bd      	mov	sp, r7
 8012228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801222c:	b004      	add	sp, #16
 801222e:	4770      	bx	lr
 8012230:	803c3800 	.word	0x803c3800
 8012234:	40000004 	.word	0x40000004

08012238 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012238:	b480      	push	{r7}
 801223a:	b085      	sub	sp, #20
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012242:	2300      	movs	r3, #0
 8012244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	3301      	adds	r3, #1
 801224a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012252:	d901      	bls.n	8012258 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012254:	2303      	movs	r3, #3
 8012256:	e01b      	b.n	8012290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	691b      	ldr	r3, [r3, #16]
 801225c:	2b00      	cmp	r3, #0
 801225e:	daf2      	bge.n	8012246 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012260:	2300      	movs	r3, #0
 8012262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	019b      	lsls	r3, r3, #6
 8012268:	f043 0220 	orr.w	r2, r3, #32
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	3301      	adds	r3, #1
 8012274:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801227c:	d901      	bls.n	8012282 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801227e:	2303      	movs	r3, #3
 8012280:	e006      	b.n	8012290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	691b      	ldr	r3, [r3, #16]
 8012286:	f003 0320 	and.w	r3, r3, #32
 801228a:	2b20      	cmp	r3, #32
 801228c:	d0f0      	beq.n	8012270 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801228e:	2300      	movs	r3, #0
}
 8012290:	4618      	mov	r0, r3
 8012292:	3714      	adds	r7, #20
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801229c:	b480      	push	{r7}
 801229e:	b085      	sub	sp, #20
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80122a4:	2300      	movs	r3, #0
 80122a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	3301      	adds	r3, #1
 80122ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80122b4:	d901      	bls.n	80122ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80122b6:	2303      	movs	r3, #3
 80122b8:	e018      	b.n	80122ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	691b      	ldr	r3, [r3, #16]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	daf2      	bge.n	80122a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80122c2:	2300      	movs	r3, #0
 80122c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2210      	movs	r2, #16
 80122ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	3301      	adds	r3, #1
 80122d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80122d8:	d901      	bls.n	80122de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80122da:	2303      	movs	r3, #3
 80122dc:	e006      	b.n	80122ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	691b      	ldr	r3, [r3, #16]
 80122e2:	f003 0310 	and.w	r3, r3, #16
 80122e6:	2b10      	cmp	r3, #16
 80122e8:	d0f0      	beq.n	80122cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80122ea:	2300      	movs	r3, #0
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3714      	adds	r7, #20
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr

080122f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b085      	sub	sp, #20
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	460b      	mov	r3, r1
 8012302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	78fb      	ldrb	r3, [r7, #3]
 8012312:	68f9      	ldr	r1, [r7, #12]
 8012314:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012318:	4313      	orrs	r3, r2
 801231a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801231c:	2300      	movs	r3, #0
}
 801231e:	4618      	mov	r0, r3
 8012320:	3714      	adds	r7, #20
 8012322:	46bd      	mov	sp, r7
 8012324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012328:	4770      	bx	lr

0801232a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801232a:	b480      	push	{r7}
 801232c:	b087      	sub	sp, #28
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801233c:	689b      	ldr	r3, [r3, #8]
 801233e:	f003 0306 	and.w	r3, r3, #6
 8012342:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d102      	bne.n	8012350 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801234a:	2300      	movs	r3, #0
 801234c:	75fb      	strb	r3, [r7, #23]
 801234e:	e00a      	b.n	8012366 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2b02      	cmp	r3, #2
 8012354:	d002      	beq.n	801235c <USB_GetDevSpeed+0x32>
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	2b06      	cmp	r3, #6
 801235a:	d102      	bne.n	8012362 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801235c:	2302      	movs	r3, #2
 801235e:	75fb      	strb	r3, [r7, #23]
 8012360:	e001      	b.n	8012366 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012362:	230f      	movs	r3, #15
 8012364:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012366:	7dfb      	ldrb	r3, [r7, #23]
}
 8012368:	4618      	mov	r0, r3
 801236a:	371c      	adds	r7, #28
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	785b      	ldrb	r3, [r3, #1]
 801238c:	2b01      	cmp	r3, #1
 801238e:	d139      	bne.n	8012404 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012396:	69da      	ldr	r2, [r3, #28]
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	f003 030f 	and.w	r3, r3, #15
 80123a0:	2101      	movs	r1, #1
 80123a2:	fa01 f303 	lsl.w	r3, r1, r3
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	68f9      	ldr	r1, [r7, #12]
 80123aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80123ae:	4313      	orrs	r3, r2
 80123b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	015a      	lsls	r2, r3, #5
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	4413      	add	r3, r2
 80123ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d153      	bne.n	8012470 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	015a      	lsls	r2, r3, #5
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	4413      	add	r3, r2
 80123d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123d4:	681a      	ldr	r2, [r3, #0]
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	791b      	ldrb	r3, [r3, #4]
 80123e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80123e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	059b      	lsls	r3, r3, #22
 80123ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80123ec:	431a      	orrs	r2, r3
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	0159      	lsls	r1, r3, #5
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	440b      	add	r3, r1
 80123f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80123fa:	4619      	mov	r1, r3
 80123fc:	4b20      	ldr	r3, [pc, #128]	@ (8012480 <USB_ActivateEndpoint+0x10c>)
 80123fe:	4313      	orrs	r3, r2
 8012400:	600b      	str	r3, [r1, #0]
 8012402:	e035      	b.n	8012470 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801240a:	69da      	ldr	r2, [r3, #28]
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	f003 030f 	and.w	r3, r3, #15
 8012414:	2101      	movs	r1, #1
 8012416:	fa01 f303 	lsl.w	r3, r1, r3
 801241a:	041b      	lsls	r3, r3, #16
 801241c:	68f9      	ldr	r1, [r7, #12]
 801241e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012422:	4313      	orrs	r3, r2
 8012424:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	015a      	lsls	r2, r3, #5
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	4413      	add	r3, r2
 801242e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012438:	2b00      	cmp	r3, #0
 801243a:	d119      	bne.n	8012470 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	015a      	lsls	r2, r3, #5
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	4413      	add	r3, r2
 8012444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012448:	681a      	ldr	r2, [r3, #0]
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	689b      	ldr	r3, [r3, #8]
 801244e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	791b      	ldrb	r3, [r3, #4]
 8012456:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012458:	430b      	orrs	r3, r1
 801245a:	431a      	orrs	r2, r3
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	0159      	lsls	r1, r3, #5
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	440b      	add	r3, r1
 8012464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012468:	4619      	mov	r1, r3
 801246a:	4b05      	ldr	r3, [pc, #20]	@ (8012480 <USB_ActivateEndpoint+0x10c>)
 801246c:	4313      	orrs	r3, r2
 801246e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012470:	2300      	movs	r3, #0
}
 8012472:	4618      	mov	r0, r3
 8012474:	3714      	adds	r7, #20
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop
 8012480:	10008000 	.word	0x10008000

08012484 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012484:	b480      	push	{r7}
 8012486:	b085      	sub	sp, #20
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	785b      	ldrb	r3, [r3, #1]
 801249c:	2b01      	cmp	r3, #1
 801249e:	d161      	bne.n	8012564 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	015a      	lsls	r2, r3, #5
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	4413      	add	r3, r2
 80124a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80124b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80124b6:	d11f      	bne.n	80124f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	015a      	lsls	r2, r3, #5
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	4413      	add	r3, r2
 80124c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	0151      	lsls	r1, r2, #5
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	440a      	add	r2, r1
 80124ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80124d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80124d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	015a      	lsls	r2, r3, #5
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	4413      	add	r3, r2
 80124e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	68ba      	ldr	r2, [r7, #8]
 80124e8:	0151      	lsls	r1, r2, #5
 80124ea:	68fa      	ldr	r2, [r7, #12]
 80124ec:	440a      	add	r2, r1
 80124ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80124f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80124f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	f003 030f 	and.w	r3, r3, #15
 8012508:	2101      	movs	r1, #1
 801250a:	fa01 f303 	lsl.w	r3, r1, r3
 801250e:	b29b      	uxth	r3, r3
 8012510:	43db      	mvns	r3, r3
 8012512:	68f9      	ldr	r1, [r7, #12]
 8012514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012518:	4013      	ands	r3, r2
 801251a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012522:	69da      	ldr	r2, [r3, #28]
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	f003 030f 	and.w	r3, r3, #15
 801252c:	2101      	movs	r1, #1
 801252e:	fa01 f303 	lsl.w	r3, r1, r3
 8012532:	b29b      	uxth	r3, r3
 8012534:	43db      	mvns	r3, r3
 8012536:	68f9      	ldr	r1, [r7, #12]
 8012538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801253c:	4013      	ands	r3, r2
 801253e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	015a      	lsls	r2, r3, #5
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	4413      	add	r3, r2
 8012548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801254c:	681a      	ldr	r2, [r3, #0]
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	0159      	lsls	r1, r3, #5
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	440b      	add	r3, r1
 8012556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801255a:	4619      	mov	r1, r3
 801255c:	4b35      	ldr	r3, [pc, #212]	@ (8012634 <USB_DeactivateEndpoint+0x1b0>)
 801255e:	4013      	ands	r3, r2
 8012560:	600b      	str	r3, [r1, #0]
 8012562:	e060      	b.n	8012626 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	015a      	lsls	r2, r3, #5
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	4413      	add	r3, r2
 801256c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801257a:	d11f      	bne.n	80125bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	015a      	lsls	r2, r3, #5
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	4413      	add	r3, r2
 8012584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	68ba      	ldr	r2, [r7, #8]
 801258c:	0151      	lsls	r1, r2, #5
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	440a      	add	r2, r1
 8012592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012596:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801259a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	015a      	lsls	r2, r3, #5
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	4413      	add	r3, r2
 80125a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	68ba      	ldr	r2, [r7, #8]
 80125ac:	0151      	lsls	r1, r2, #5
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	440a      	add	r2, r1
 80125b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80125b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80125ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80125c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	f003 030f 	and.w	r3, r3, #15
 80125cc:	2101      	movs	r1, #1
 80125ce:	fa01 f303 	lsl.w	r3, r1, r3
 80125d2:	041b      	lsls	r3, r3, #16
 80125d4:	43db      	mvns	r3, r3
 80125d6:	68f9      	ldr	r1, [r7, #12]
 80125d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80125dc:	4013      	ands	r3, r2
 80125de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80125e6:	69da      	ldr	r2, [r3, #28]
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	f003 030f 	and.w	r3, r3, #15
 80125f0:	2101      	movs	r1, #1
 80125f2:	fa01 f303 	lsl.w	r3, r1, r3
 80125f6:	041b      	lsls	r3, r3, #16
 80125f8:	43db      	mvns	r3, r3
 80125fa:	68f9      	ldr	r1, [r7, #12]
 80125fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012600:	4013      	ands	r3, r2
 8012602:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	015a      	lsls	r2, r3, #5
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	4413      	add	r3, r2
 801260c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	0159      	lsls	r1, r3, #5
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	440b      	add	r3, r1
 801261a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801261e:	4619      	mov	r1, r3
 8012620:	4b05      	ldr	r3, [pc, #20]	@ (8012638 <USB_DeactivateEndpoint+0x1b4>)
 8012622:	4013      	ands	r3, r2
 8012624:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012626:	2300      	movs	r3, #0
}
 8012628:	4618      	mov	r0, r3
 801262a:	3714      	adds	r7, #20
 801262c:	46bd      	mov	sp, r7
 801262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012632:	4770      	bx	lr
 8012634:	ec337800 	.word	0xec337800
 8012638:	eff37800 	.word	0xeff37800

0801263c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b08a      	sub	sp, #40	@ 0x28
 8012640:	af02      	add	r7, sp, #8
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	4613      	mov	r3, r2
 8012648:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	785b      	ldrb	r3, [r3, #1]
 8012658:	2b01      	cmp	r3, #1
 801265a:	f040 8185 	bne.w	8012968 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	691b      	ldr	r3, [r3, #16]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d132      	bne.n	80126cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	015a      	lsls	r2, r3, #5
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	4413      	add	r3, r2
 801266e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012672:	691a      	ldr	r2, [r3, #16]
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	0159      	lsls	r1, r3, #5
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	440b      	add	r3, r1
 801267c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012680:	4619      	mov	r1, r3
 8012682:	4ba7      	ldr	r3, [pc, #668]	@ (8012920 <USB_EPStartXfer+0x2e4>)
 8012684:	4013      	ands	r3, r2
 8012686:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	015a      	lsls	r2, r3, #5
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	4413      	add	r3, r2
 8012690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012694:	691b      	ldr	r3, [r3, #16]
 8012696:	69ba      	ldr	r2, [r7, #24]
 8012698:	0151      	lsls	r1, r2, #5
 801269a:	69fa      	ldr	r2, [r7, #28]
 801269c:	440a      	add	r2, r1
 801269e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80126a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80126a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80126a8:	69bb      	ldr	r3, [r7, #24]
 80126aa:	015a      	lsls	r2, r3, #5
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	4413      	add	r3, r2
 80126b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126b4:	691a      	ldr	r2, [r3, #16]
 80126b6:	69bb      	ldr	r3, [r7, #24]
 80126b8:	0159      	lsls	r1, r3, #5
 80126ba:	69fb      	ldr	r3, [r7, #28]
 80126bc:	440b      	add	r3, r1
 80126be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126c2:	4619      	mov	r1, r3
 80126c4:	4b97      	ldr	r3, [pc, #604]	@ (8012924 <USB_EPStartXfer+0x2e8>)
 80126c6:	4013      	ands	r3, r2
 80126c8:	610b      	str	r3, [r1, #16]
 80126ca:	e097      	b.n	80127fc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	015a      	lsls	r2, r3, #5
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	4413      	add	r3, r2
 80126d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126d8:	691a      	ldr	r2, [r3, #16]
 80126da:	69bb      	ldr	r3, [r7, #24]
 80126dc:	0159      	lsls	r1, r3, #5
 80126de:	69fb      	ldr	r3, [r7, #28]
 80126e0:	440b      	add	r3, r1
 80126e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126e6:	4619      	mov	r1, r3
 80126e8:	4b8e      	ldr	r3, [pc, #568]	@ (8012924 <USB_EPStartXfer+0x2e8>)
 80126ea:	4013      	ands	r3, r2
 80126ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80126ee:	69bb      	ldr	r3, [r7, #24]
 80126f0:	015a      	lsls	r2, r3, #5
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	4413      	add	r3, r2
 80126f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80126fa:	691a      	ldr	r2, [r3, #16]
 80126fc:	69bb      	ldr	r3, [r7, #24]
 80126fe:	0159      	lsls	r1, r3, #5
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	440b      	add	r3, r1
 8012704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012708:	4619      	mov	r1, r3
 801270a:	4b85      	ldr	r3, [pc, #532]	@ (8012920 <USB_EPStartXfer+0x2e4>)
 801270c:	4013      	ands	r3, r2
 801270e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d11a      	bne.n	801274c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	691a      	ldr	r2, [r3, #16]
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	689b      	ldr	r3, [r3, #8]
 801271e:	429a      	cmp	r2, r3
 8012720:	d903      	bls.n	801272a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	689a      	ldr	r2, [r3, #8]
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801272a:	69bb      	ldr	r3, [r7, #24]
 801272c:	015a      	lsls	r2, r3, #5
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	4413      	add	r3, r2
 8012732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012736:	691b      	ldr	r3, [r3, #16]
 8012738:	69ba      	ldr	r2, [r7, #24]
 801273a:	0151      	lsls	r1, r2, #5
 801273c:	69fa      	ldr	r2, [r7, #28]
 801273e:	440a      	add	r2, r1
 8012740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012748:	6113      	str	r3, [r2, #16]
 801274a:	e044      	b.n	80127d6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	691a      	ldr	r2, [r3, #16]
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	4413      	add	r3, r2
 8012756:	1e5a      	subs	r2, r3, #1
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	689b      	ldr	r3, [r3, #8]
 801275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012760:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	015a      	lsls	r2, r3, #5
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	4413      	add	r3, r2
 801276a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801276e:	691a      	ldr	r2, [r3, #16]
 8012770:	8afb      	ldrh	r3, [r7, #22]
 8012772:	04d9      	lsls	r1, r3, #19
 8012774:	4b6c      	ldr	r3, [pc, #432]	@ (8012928 <USB_EPStartXfer+0x2ec>)
 8012776:	400b      	ands	r3, r1
 8012778:	69b9      	ldr	r1, [r7, #24]
 801277a:	0148      	lsls	r0, r1, #5
 801277c:	69f9      	ldr	r1, [r7, #28]
 801277e:	4401      	add	r1, r0
 8012780:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8012784:	4313      	orrs	r3, r2
 8012786:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	791b      	ldrb	r3, [r3, #4]
 801278c:	2b01      	cmp	r3, #1
 801278e:	d122      	bne.n	80127d6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	015a      	lsls	r2, r3, #5
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	4413      	add	r3, r2
 8012798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801279c:	691b      	ldr	r3, [r3, #16]
 801279e:	69ba      	ldr	r2, [r7, #24]
 80127a0:	0151      	lsls	r1, r2, #5
 80127a2:	69fa      	ldr	r2, [r7, #28]
 80127a4:	440a      	add	r2, r1
 80127a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80127aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80127ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80127b0:	69bb      	ldr	r3, [r7, #24]
 80127b2:	015a      	lsls	r2, r3, #5
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	4413      	add	r3, r2
 80127b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127bc:	691a      	ldr	r2, [r3, #16]
 80127be:	8afb      	ldrh	r3, [r7, #22]
 80127c0:	075b      	lsls	r3, r3, #29
 80127c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80127c6:	69b9      	ldr	r1, [r7, #24]
 80127c8:	0148      	lsls	r0, r1, #5
 80127ca:	69f9      	ldr	r1, [r7, #28]
 80127cc:	4401      	add	r1, r0
 80127ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80127d2:	4313      	orrs	r3, r2
 80127d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80127d6:	69bb      	ldr	r3, [r7, #24]
 80127d8:	015a      	lsls	r2, r3, #5
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	4413      	add	r3, r2
 80127de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80127e2:	691a      	ldr	r2, [r3, #16]
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	691b      	ldr	r3, [r3, #16]
 80127e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127ec:	69b9      	ldr	r1, [r7, #24]
 80127ee:	0148      	lsls	r0, r1, #5
 80127f0:	69f9      	ldr	r1, [r7, #28]
 80127f2:	4401      	add	r1, r0
 80127f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80127f8:	4313      	orrs	r3, r2
 80127fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80127fc:	79fb      	ldrb	r3, [r7, #7]
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d14b      	bne.n	801289a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	69db      	ldr	r3, [r3, #28]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d009      	beq.n	801281e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	015a      	lsls	r2, r3, #5
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	4413      	add	r3, r2
 8012812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012816:	461a      	mov	r2, r3
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	69db      	ldr	r3, [r3, #28]
 801281c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	791b      	ldrb	r3, [r3, #4]
 8012822:	2b01      	cmp	r3, #1
 8012824:	d128      	bne.n	8012878 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801282c:	689b      	ldr	r3, [r3, #8]
 801282e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012832:	2b00      	cmp	r3, #0
 8012834:	d110      	bne.n	8012858 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	015a      	lsls	r2, r3, #5
 801283a:	69fb      	ldr	r3, [r7, #28]
 801283c:	4413      	add	r3, r2
 801283e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	69ba      	ldr	r2, [r7, #24]
 8012846:	0151      	lsls	r1, r2, #5
 8012848:	69fa      	ldr	r2, [r7, #28]
 801284a:	440a      	add	r2, r1
 801284c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012850:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012854:	6013      	str	r3, [r2, #0]
 8012856:	e00f      	b.n	8012878 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	015a      	lsls	r2, r3, #5
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	4413      	add	r3, r2
 8012860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	69ba      	ldr	r2, [r7, #24]
 8012868:	0151      	lsls	r1, r2, #5
 801286a:	69fa      	ldr	r2, [r7, #28]
 801286c:	440a      	add	r2, r1
 801286e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012876:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	015a      	lsls	r2, r3, #5
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	4413      	add	r3, r2
 8012880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	69ba      	ldr	r2, [r7, #24]
 8012888:	0151      	lsls	r1, r2, #5
 801288a:	69fa      	ldr	r2, [r7, #28]
 801288c:	440a      	add	r2, r1
 801288e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012892:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012896:	6013      	str	r3, [r2, #0]
 8012898:	e169      	b.n	8012b6e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	015a      	lsls	r2, r3, #5
 801289e:	69fb      	ldr	r3, [r7, #28]
 80128a0:	4413      	add	r3, r2
 80128a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	69ba      	ldr	r2, [r7, #24]
 80128aa:	0151      	lsls	r1, r2, #5
 80128ac:	69fa      	ldr	r2, [r7, #28]
 80128ae:	440a      	add	r2, r1
 80128b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80128b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80128b8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	791b      	ldrb	r3, [r3, #4]
 80128be:	2b01      	cmp	r3, #1
 80128c0:	d015      	beq.n	80128ee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	691b      	ldr	r3, [r3, #16]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f000 8151 	beq.w	8012b6e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	f003 030f 	and.w	r3, r3, #15
 80128dc:	2101      	movs	r1, #1
 80128de:	fa01 f303 	lsl.w	r3, r1, r3
 80128e2:	69f9      	ldr	r1, [r7, #28]
 80128e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80128e8:	4313      	orrs	r3, r2
 80128ea:	634b      	str	r3, [r1, #52]	@ 0x34
 80128ec:	e13f      	b.n	8012b6e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80128f4:	689b      	ldr	r3, [r3, #8]
 80128f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d116      	bne.n	801292c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	015a      	lsls	r2, r3, #5
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	4413      	add	r3, r2
 8012906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	69ba      	ldr	r2, [r7, #24]
 801290e:	0151      	lsls	r1, r2, #5
 8012910:	69fa      	ldr	r2, [r7, #28]
 8012912:	440a      	add	r2, r1
 8012914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801291c:	6013      	str	r3, [r2, #0]
 801291e:	e015      	b.n	801294c <USB_EPStartXfer+0x310>
 8012920:	e007ffff 	.word	0xe007ffff
 8012924:	fff80000 	.word	0xfff80000
 8012928:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801292c:	69bb      	ldr	r3, [r7, #24]
 801292e:	015a      	lsls	r2, r3, #5
 8012930:	69fb      	ldr	r3, [r7, #28]
 8012932:	4413      	add	r3, r2
 8012934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	69ba      	ldr	r2, [r7, #24]
 801293c:	0151      	lsls	r1, r2, #5
 801293e:	69fa      	ldr	r2, [r7, #28]
 8012940:	440a      	add	r2, r1
 8012942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801294a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	68d9      	ldr	r1, [r3, #12]
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	781a      	ldrb	r2, [r3, #0]
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	691b      	ldr	r3, [r3, #16]
 8012958:	b298      	uxth	r0, r3
 801295a:	79fb      	ldrb	r3, [r7, #7]
 801295c:	9300      	str	r3, [sp, #0]
 801295e:	4603      	mov	r3, r0
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f000 f9b9 	bl	8012cd8 <USB_WritePacket>
 8012966:	e102      	b.n	8012b6e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012968:	69bb      	ldr	r3, [r7, #24]
 801296a:	015a      	lsls	r2, r3, #5
 801296c:	69fb      	ldr	r3, [r7, #28]
 801296e:	4413      	add	r3, r2
 8012970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012974:	691a      	ldr	r2, [r3, #16]
 8012976:	69bb      	ldr	r3, [r7, #24]
 8012978:	0159      	lsls	r1, r3, #5
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	440b      	add	r3, r1
 801297e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012982:	4619      	mov	r1, r3
 8012984:	4b7c      	ldr	r3, [pc, #496]	@ (8012b78 <USB_EPStartXfer+0x53c>)
 8012986:	4013      	ands	r3, r2
 8012988:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801298a:	69bb      	ldr	r3, [r7, #24]
 801298c:	015a      	lsls	r2, r3, #5
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	4413      	add	r3, r2
 8012992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012996:	691a      	ldr	r2, [r3, #16]
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	0159      	lsls	r1, r3, #5
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	440b      	add	r3, r1
 80129a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129a4:	4619      	mov	r1, r3
 80129a6:	4b75      	ldr	r3, [pc, #468]	@ (8012b7c <USB_EPStartXfer+0x540>)
 80129a8:	4013      	ands	r3, r2
 80129aa:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80129ac:	69bb      	ldr	r3, [r7, #24]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d12f      	bne.n	8012a12 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	691b      	ldr	r3, [r3, #16]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d003      	beq.n	80129c2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	689a      	ldr	r2, [r3, #8]
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	689a      	ldr	r2, [r3, #8]
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	015a      	lsls	r2, r3, #5
 80129ce:	69fb      	ldr	r3, [r7, #28]
 80129d0:	4413      	add	r3, r2
 80129d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129d6:	691a      	ldr	r2, [r3, #16]
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	6a1b      	ldr	r3, [r3, #32]
 80129dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80129e0:	69b9      	ldr	r1, [r7, #24]
 80129e2:	0148      	lsls	r0, r1, #5
 80129e4:	69f9      	ldr	r1, [r7, #28]
 80129e6:	4401      	add	r1, r0
 80129e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80129ec:	4313      	orrs	r3, r2
 80129ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	015a      	lsls	r2, r3, #5
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	4413      	add	r3, r2
 80129f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80129fc:	691b      	ldr	r3, [r3, #16]
 80129fe:	69ba      	ldr	r2, [r7, #24]
 8012a00:	0151      	lsls	r1, r2, #5
 8012a02:	69fa      	ldr	r2, [r7, #28]
 8012a04:	440a      	add	r2, r1
 8012a06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012a0e:	6113      	str	r3, [r2, #16]
 8012a10:	e05f      	b.n	8012ad2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	691b      	ldr	r3, [r3, #16]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d123      	bne.n	8012a62 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012a1a:	69bb      	ldr	r3, [r7, #24]
 8012a1c:	015a      	lsls	r2, r3, #5
 8012a1e:	69fb      	ldr	r3, [r7, #28]
 8012a20:	4413      	add	r3, r2
 8012a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a26:	691a      	ldr	r2, [r3, #16]
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	689b      	ldr	r3, [r3, #8]
 8012a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a30:	69b9      	ldr	r1, [r7, #24]
 8012a32:	0148      	lsls	r0, r1, #5
 8012a34:	69f9      	ldr	r1, [r7, #28]
 8012a36:	4401      	add	r1, r0
 8012a38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	015a      	lsls	r2, r3, #5
 8012a44:	69fb      	ldr	r3, [r7, #28]
 8012a46:	4413      	add	r3, r2
 8012a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a4c:	691b      	ldr	r3, [r3, #16]
 8012a4e:	69ba      	ldr	r2, [r7, #24]
 8012a50:	0151      	lsls	r1, r2, #5
 8012a52:	69fa      	ldr	r2, [r7, #28]
 8012a54:	440a      	add	r2, r1
 8012a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012a5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012a5e:	6113      	str	r3, [r2, #16]
 8012a60:	e037      	b.n	8012ad2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	691a      	ldr	r2, [r3, #16]
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	4413      	add	r3, r2
 8012a6c:	1e5a      	subs	r2, r3, #1
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	689b      	ldr	r3, [r3, #8]
 8012a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a76:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	689b      	ldr	r3, [r3, #8]
 8012a7c:	8afa      	ldrh	r2, [r7, #22]
 8012a7e:	fb03 f202 	mul.w	r2, r3, r2
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	015a      	lsls	r2, r3, #5
 8012a8a:	69fb      	ldr	r3, [r7, #28]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012a92:	691a      	ldr	r2, [r3, #16]
 8012a94:	8afb      	ldrh	r3, [r7, #22]
 8012a96:	04d9      	lsls	r1, r3, #19
 8012a98:	4b39      	ldr	r3, [pc, #228]	@ (8012b80 <USB_EPStartXfer+0x544>)
 8012a9a:	400b      	ands	r3, r1
 8012a9c:	69b9      	ldr	r1, [r7, #24]
 8012a9e:	0148      	lsls	r0, r1, #5
 8012aa0:	69f9      	ldr	r1, [r7, #28]
 8012aa2:	4401      	add	r1, r0
 8012aa4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	015a      	lsls	r2, r3, #5
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ab8:	691a      	ldr	r2, [r3, #16]
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	6a1b      	ldr	r3, [r3, #32]
 8012abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ac2:	69b9      	ldr	r1, [r7, #24]
 8012ac4:	0148      	lsls	r0, r1, #5
 8012ac6:	69f9      	ldr	r1, [r7, #28]
 8012ac8:	4401      	add	r1, r0
 8012aca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8012ace:	4313      	orrs	r3, r2
 8012ad0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012ad2:	79fb      	ldrb	r3, [r7, #7]
 8012ad4:	2b01      	cmp	r3, #1
 8012ad6:	d10d      	bne.n	8012af4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d009      	beq.n	8012af4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	68d9      	ldr	r1, [r3, #12]
 8012ae4:	69bb      	ldr	r3, [r7, #24]
 8012ae6:	015a      	lsls	r2, r3, #5
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	4413      	add	r3, r2
 8012aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012af0:	460a      	mov	r2, r1
 8012af2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	791b      	ldrb	r3, [r3, #4]
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d128      	bne.n	8012b4e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012afc:	69fb      	ldr	r3, [r7, #28]
 8012afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012b02:	689b      	ldr	r3, [r3, #8]
 8012b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d110      	bne.n	8012b2e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	015a      	lsls	r2, r3, #5
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	4413      	add	r3, r2
 8012b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	69ba      	ldr	r2, [r7, #24]
 8012b1c:	0151      	lsls	r1, r2, #5
 8012b1e:	69fa      	ldr	r2, [r7, #28]
 8012b20:	440a      	add	r2, r1
 8012b22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012b26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012b2a:	6013      	str	r3, [r2, #0]
 8012b2c:	e00f      	b.n	8012b4e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	015a      	lsls	r2, r3, #5
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	4413      	add	r3, r2
 8012b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	69ba      	ldr	r2, [r7, #24]
 8012b3e:	0151      	lsls	r1, r2, #5
 8012b40:	69fa      	ldr	r2, [r7, #28]
 8012b42:	440a      	add	r2, r1
 8012b44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012b4c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	015a      	lsls	r2, r3, #5
 8012b52:	69fb      	ldr	r3, [r7, #28]
 8012b54:	4413      	add	r3, r2
 8012b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	69ba      	ldr	r2, [r7, #24]
 8012b5e:	0151      	lsls	r1, r2, #5
 8012b60:	69fa      	ldr	r2, [r7, #28]
 8012b62:	440a      	add	r2, r1
 8012b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012b68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8012b6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012b6e:	2300      	movs	r3, #0
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3720      	adds	r7, #32
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	fff80000 	.word	0xfff80000
 8012b7c:	e007ffff 	.word	0xe007ffff
 8012b80:	1ff80000 	.word	0x1ff80000

08012b84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012b84:	b480      	push	{r7}
 8012b86:	b087      	sub	sp, #28
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012b92:	2300      	movs	r3, #0
 8012b94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	785b      	ldrb	r3, [r3, #1]
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	d14a      	bne.n	8012c38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	015a      	lsls	r2, r3, #5
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	4413      	add	r3, r2
 8012bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012bba:	f040 8086 	bne.w	8012cca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	015a      	lsls	r2, r3, #5
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	4413      	add	r3, r2
 8012bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	683a      	ldr	r2, [r7, #0]
 8012bd0:	7812      	ldrb	r2, [r2, #0]
 8012bd2:	0151      	lsls	r1, r2, #5
 8012bd4:	693a      	ldr	r2, [r7, #16]
 8012bd6:	440a      	add	r2, r1
 8012bd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012bdc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012be0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	015a      	lsls	r2, r3, #5
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	4413      	add	r3, r2
 8012bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	683a      	ldr	r2, [r7, #0]
 8012bf4:	7812      	ldrb	r2, [r2, #0]
 8012bf6:	0151      	lsls	r1, r2, #5
 8012bf8:	693a      	ldr	r2, [r7, #16]
 8012bfa:	440a      	add	r2, r1
 8012bfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012c00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012c04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d902      	bls.n	8012c1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012c16:	2301      	movs	r3, #1
 8012c18:	75fb      	strb	r3, [r7, #23]
          break;
 8012c1a:	e056      	b.n	8012cca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	015a      	lsls	r2, r3, #5
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	4413      	add	r3, r2
 8012c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012c30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012c34:	d0e7      	beq.n	8012c06 <USB_EPStopXfer+0x82>
 8012c36:	e048      	b.n	8012cca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	015a      	lsls	r2, r3, #5
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	4413      	add	r3, r2
 8012c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012c50:	d13b      	bne.n	8012cca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	015a      	lsls	r2, r3, #5
 8012c58:	693b      	ldr	r3, [r7, #16]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	683a      	ldr	r2, [r7, #0]
 8012c64:	7812      	ldrb	r2, [r2, #0]
 8012c66:	0151      	lsls	r1, r2, #5
 8012c68:	693a      	ldr	r2, [r7, #16]
 8012c6a:	440a      	add	r2, r1
 8012c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012c70:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8012c74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	015a      	lsls	r2, r3, #5
 8012c7c:	693b      	ldr	r3, [r7, #16]
 8012c7e:	4413      	add	r3, r2
 8012c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	7812      	ldrb	r2, [r2, #0]
 8012c8a:	0151      	lsls	r1, r2, #5
 8012c8c:	693a      	ldr	r2, [r7, #16]
 8012c8e:	440a      	add	r2, r1
 8012c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012c94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012c98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d902      	bls.n	8012cb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012caa:	2301      	movs	r3, #1
 8012cac:	75fb      	strb	r3, [r7, #23]
          break;
 8012cae:	e00c      	b.n	8012cca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	015a      	lsls	r2, r3, #5
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	4413      	add	r3, r2
 8012cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8012cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012cc8:	d0e7      	beq.n	8012c9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	371c      	adds	r7, #28
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr

08012cd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b089      	sub	sp, #36	@ 0x24
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	4611      	mov	r1, r2
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	460b      	mov	r3, r1
 8012ce8:	71fb      	strb	r3, [r7, #7]
 8012cea:	4613      	mov	r3, r2
 8012cec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d123      	bne.n	8012d46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012cfe:	88bb      	ldrh	r3, [r7, #4]
 8012d00:	3303      	adds	r3, #3
 8012d02:	089b      	lsrs	r3, r3, #2
 8012d04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012d06:	2300      	movs	r3, #0
 8012d08:	61bb      	str	r3, [r7, #24]
 8012d0a:	e018      	b.n	8012d3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012d0c:	79fb      	ldrb	r3, [r7, #7]
 8012d0e:	031a      	lsls	r2, r3, #12
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	4413      	add	r3, r2
 8012d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012d18:	461a      	mov	r2, r3
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	3301      	adds	r3, #1
 8012d24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	3301      	adds	r3, #1
 8012d2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	3301      	adds	r3, #1
 8012d30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	3301      	adds	r3, #1
 8012d36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012d38:	69bb      	ldr	r3, [r7, #24]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	61bb      	str	r3, [r7, #24]
 8012d3e:	69ba      	ldr	r2, [r7, #24]
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	429a      	cmp	r2, r3
 8012d44:	d3e2      	bcc.n	8012d0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012d46:	2300      	movs	r3, #0
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3724      	adds	r7, #36	@ 0x24
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr

08012d54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012d54:	b480      	push	{r7}
 8012d56:	b08b      	sub	sp, #44	@ 0x2c
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60f8      	str	r0, [r7, #12]
 8012d5c:	60b9      	str	r1, [r7, #8]
 8012d5e:	4613      	mov	r3, r2
 8012d60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012d66:	68bb      	ldr	r3, [r7, #8]
 8012d68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012d6a:	88fb      	ldrh	r3, [r7, #6]
 8012d6c:	089b      	lsrs	r3, r3, #2
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012d72:	88fb      	ldrh	r3, [r7, #6]
 8012d74:	f003 0303 	and.w	r3, r3, #3
 8012d78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	623b      	str	r3, [r7, #32]
 8012d7e:	e014      	b.n	8012daa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012d86:	681a      	ldr	r2, [r3, #0]
 8012d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8012d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d8e:	3301      	adds	r3, #1
 8012d90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d94:	3301      	adds	r3, #1
 8012d96:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da0:	3301      	adds	r3, #1
 8012da2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8012da4:	6a3b      	ldr	r3, [r7, #32]
 8012da6:	3301      	adds	r3, #1
 8012da8:	623b      	str	r3, [r7, #32]
 8012daa:	6a3a      	ldr	r2, [r7, #32]
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d3e6      	bcc.n	8012d80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012db2:	8bfb      	ldrh	r3, [r7, #30]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d01e      	beq.n	8012df6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012db8:	2300      	movs	r3, #0
 8012dba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	f107 0310 	add.w	r3, r7, #16
 8012dc8:	6812      	ldr	r2, [r2, #0]
 8012dca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012dcc:	693a      	ldr	r2, [r7, #16]
 8012dce:	6a3b      	ldr	r3, [r7, #32]
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	00db      	lsls	r3, r3, #3
 8012dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8012dd8:	b2da      	uxtb	r2, r3
 8012dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ddc:	701a      	strb	r2, [r3, #0]
      i++;
 8012dde:	6a3b      	ldr	r3, [r7, #32]
 8012de0:	3301      	adds	r3, #1
 8012de2:	623b      	str	r3, [r7, #32]
      pDest++;
 8012de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de6:	3301      	adds	r3, #1
 8012de8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8012dea:	8bfb      	ldrh	r3, [r7, #30]
 8012dec:	3b01      	subs	r3, #1
 8012dee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012df0:	8bfb      	ldrh	r3, [r7, #30]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d1ea      	bne.n	8012dcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	372c      	adds	r7, #44	@ 0x2c
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	785b      	ldrb	r3, [r3, #1]
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d12c      	bne.n	8012e7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	015a      	lsls	r2, r3, #5
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	4413      	add	r3, r2
 8012e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	db12      	blt.n	8012e58 <USB_EPSetStall+0x54>
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d00f      	beq.n	8012e58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	015a      	lsls	r2, r3, #5
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	4413      	add	r3, r2
 8012e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	68ba      	ldr	r2, [r7, #8]
 8012e48:	0151      	lsls	r1, r2, #5
 8012e4a:	68fa      	ldr	r2, [r7, #12]
 8012e4c:	440a      	add	r2, r1
 8012e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012e52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012e56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	015a      	lsls	r2, r3, #5
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	4413      	add	r3, r2
 8012e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	68ba      	ldr	r2, [r7, #8]
 8012e68:	0151      	lsls	r1, r2, #5
 8012e6a:	68fa      	ldr	r2, [r7, #12]
 8012e6c:	440a      	add	r2, r1
 8012e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012e72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012e76:	6013      	str	r3, [r2, #0]
 8012e78:	e02b      	b.n	8012ed2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	015a      	lsls	r2, r3, #5
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	4413      	add	r3, r2
 8012e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	db12      	blt.n	8012eb2 <USB_EPSetStall+0xae>
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d00f      	beq.n	8012eb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	015a      	lsls	r2, r3, #5
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	4413      	add	r3, r2
 8012e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	68ba      	ldr	r2, [r7, #8]
 8012ea2:	0151      	lsls	r1, r2, #5
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	440a      	add	r2, r1
 8012ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012eac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012eb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	015a      	lsls	r2, r3, #5
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	4413      	add	r3, r2
 8012eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	68ba      	ldr	r2, [r7, #8]
 8012ec2:	0151      	lsls	r1, r2, #5
 8012ec4:	68fa      	ldr	r2, [r7, #12]
 8012ec6:	440a      	add	r2, r1
 8012ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012ecc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012ed0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012ed2:	2300      	movs	r3, #0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3714      	adds	r7, #20
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b085      	sub	sp, #20
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	785b      	ldrb	r3, [r3, #1]
 8012ef8:	2b01      	cmp	r3, #1
 8012efa:	d128      	bne.n	8012f4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	015a      	lsls	r2, r3, #5
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	4413      	add	r3, r2
 8012f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	68ba      	ldr	r2, [r7, #8]
 8012f0c:	0151      	lsls	r1, r2, #5
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	440a      	add	r2, r1
 8012f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012f16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012f1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	791b      	ldrb	r3, [r3, #4]
 8012f20:	2b03      	cmp	r3, #3
 8012f22:	d003      	beq.n	8012f2c <USB_EPClearStall+0x4c>
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	791b      	ldrb	r3, [r3, #4]
 8012f28:	2b02      	cmp	r3, #2
 8012f2a:	d138      	bne.n	8012f9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	015a      	lsls	r2, r3, #5
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	4413      	add	r3, r2
 8012f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	68ba      	ldr	r2, [r7, #8]
 8012f3c:	0151      	lsls	r1, r2, #5
 8012f3e:	68fa      	ldr	r2, [r7, #12]
 8012f40:	440a      	add	r2, r1
 8012f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012f4a:	6013      	str	r3, [r2, #0]
 8012f4c:	e027      	b.n	8012f9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	015a      	lsls	r2, r3, #5
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	4413      	add	r3, r2
 8012f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	68ba      	ldr	r2, [r7, #8]
 8012f5e:	0151      	lsls	r1, r2, #5
 8012f60:	68fa      	ldr	r2, [r7, #12]
 8012f62:	440a      	add	r2, r1
 8012f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012f68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012f6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	791b      	ldrb	r3, [r3, #4]
 8012f72:	2b03      	cmp	r3, #3
 8012f74:	d003      	beq.n	8012f7e <USB_EPClearStall+0x9e>
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	791b      	ldrb	r3, [r3, #4]
 8012f7a:	2b02      	cmp	r3, #2
 8012f7c:	d10f      	bne.n	8012f9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	015a      	lsls	r2, r3, #5
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	4413      	add	r3, r2
 8012f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	68ba      	ldr	r2, [r7, #8]
 8012f8e:	0151      	lsls	r1, r2, #5
 8012f90:	68fa      	ldr	r2, [r7, #12]
 8012f92:	440a      	add	r2, r1
 8012f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012f9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012f9e:	2300      	movs	r3, #0
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3714      	adds	r7, #20
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr

08012fac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b085      	sub	sp, #20
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012fca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012fce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012fd6:	681a      	ldr	r2, [r3, #0]
 8012fd8:	78fb      	ldrb	r3, [r7, #3]
 8012fda:	011b      	lsls	r3, r3, #4
 8012fdc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012fe0:	68f9      	ldr	r1, [r7, #12]
 8012fe2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012fea:	2300      	movs	r3, #0
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	3714      	adds	r7, #20
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff6:	4770      	bx	lr

08012ff8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8012ff8:	b480      	push	{r7}
 8012ffa:	b085      	sub	sp, #20
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	68fa      	ldr	r2, [r7, #12]
 801300e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013012:	f023 0303 	bic.w	r3, r3, #3
 8013016:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013026:	f023 0302 	bic.w	r3, r3, #2
 801302a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801302c:	2300      	movs	r3, #0
}
 801302e:	4618      	mov	r0, r3
 8013030:	3714      	adds	r7, #20
 8013032:	46bd      	mov	sp, r7
 8013034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013038:	4770      	bx	lr

0801303a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801303a:	b480      	push	{r7}
 801303c:	b085      	sub	sp, #20
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	68fa      	ldr	r2, [r7, #12]
 8013050:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013054:	f023 0303 	bic.w	r3, r3, #3
 8013058:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8013068:	f043 0302 	orr.w	r3, r3, #2
 801306c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801306e:	2300      	movs	r3, #0
}
 8013070:	4618      	mov	r0, r3
 8013072:	3714      	adds	r7, #20
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801307c:	b480      	push	{r7}
 801307e:	b085      	sub	sp, #20
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	695b      	ldr	r3, [r3, #20]
 8013088:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	699b      	ldr	r3, [r3, #24]
 801308e:	68fa      	ldr	r2, [r7, #12]
 8013090:	4013      	ands	r3, r2
 8013092:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013094:	68fb      	ldr	r3, [r7, #12]
}
 8013096:	4618      	mov	r0, r3
 8013098:	3714      	adds	r7, #20
 801309a:	46bd      	mov	sp, r7
 801309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a0:	4770      	bx	lr

080130a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80130a2:	b480      	push	{r7}
 80130a4:	b085      	sub	sp, #20
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130b4:	699b      	ldr	r3, [r3, #24]
 80130b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130be:	69db      	ldr	r3, [r3, #28]
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	4013      	ands	r3, r2
 80130c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	0c1b      	lsrs	r3, r3, #16
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3714      	adds	r7, #20
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr

080130d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80130d6:	b480      	push	{r7}
 80130d8:	b085      	sub	sp, #20
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130e8:	699b      	ldr	r3, [r3, #24]
 80130ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80130f2:	69db      	ldr	r3, [r3, #28]
 80130f4:	68ba      	ldr	r2, [r7, #8]
 80130f6:	4013      	ands	r3, r2
 80130f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	b29b      	uxth	r3, r3
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3714      	adds	r7, #20
 8013102:	46bd      	mov	sp, r7
 8013104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013108:	4770      	bx	lr

0801310a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801310a:	b480      	push	{r7}
 801310c:	b085      	sub	sp, #20
 801310e:	af00      	add	r7, sp, #0
 8013110:	6078      	str	r0, [r7, #4]
 8013112:	460b      	mov	r3, r1
 8013114:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801311a:	78fb      	ldrb	r3, [r7, #3]
 801311c:	015a      	lsls	r2, r3, #5
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	4413      	add	r3, r2
 8013122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013126:	689b      	ldr	r3, [r3, #8]
 8013128:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013130:	695b      	ldr	r3, [r3, #20]
 8013132:	68ba      	ldr	r2, [r7, #8]
 8013134:	4013      	ands	r3, r2
 8013136:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013138:	68bb      	ldr	r3, [r7, #8]
}
 801313a:	4618      	mov	r0, r3
 801313c:	3714      	adds	r7, #20
 801313e:	46bd      	mov	sp, r7
 8013140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013144:	4770      	bx	lr

08013146 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013146:	b480      	push	{r7}
 8013148:	b087      	sub	sp, #28
 801314a:	af00      	add	r7, sp, #0
 801314c:	6078      	str	r0, [r7, #4]
 801314e:	460b      	mov	r3, r1
 8013150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801315c:	691b      	ldr	r3, [r3, #16]
 801315e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8013166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013168:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801316a:	78fb      	ldrb	r3, [r7, #3]
 801316c:	f003 030f 	and.w	r3, r3, #15
 8013170:	68fa      	ldr	r2, [r7, #12]
 8013172:	fa22 f303 	lsr.w	r3, r2, r3
 8013176:	01db      	lsls	r3, r3, #7
 8013178:	b2db      	uxtb	r3, r3
 801317a:	693a      	ldr	r2, [r7, #16]
 801317c:	4313      	orrs	r3, r2
 801317e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013180:	78fb      	ldrb	r3, [r7, #3]
 8013182:	015a      	lsls	r2, r3, #5
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	4413      	add	r3, r2
 8013188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801318c:	689b      	ldr	r3, [r3, #8]
 801318e:	693a      	ldr	r2, [r7, #16]
 8013190:	4013      	ands	r3, r2
 8013192:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013194:	68bb      	ldr	r3, [r7, #8]
}
 8013196:	4618      	mov	r0, r3
 8013198:	371c      	adds	r7, #28
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr

080131a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80131a2:	b480      	push	{r7}
 80131a4:	b083      	sub	sp, #12
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	695b      	ldr	r3, [r3, #20]
 80131ae:	f003 0301 	and.w	r3, r3, #1
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	370c      	adds	r7, #12
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr
	...

080131c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b085      	sub	sp, #20
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131d2:	681a      	ldr	r2, [r3, #0]
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80131da:	4619      	mov	r1, r3
 80131dc:	4b09      	ldr	r3, [pc, #36]	@ (8013204 <USB_ActivateSetup+0x44>)
 80131de:	4013      	ands	r3, r2
 80131e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	68fa      	ldr	r2, [r7, #12]
 80131ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80131f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80131f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80131f6:	2300      	movs	r3, #0
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3714      	adds	r7, #20
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr
 8013204:	fffff800 	.word	0xfffff800

08013208 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8013208:	b480      	push	{r7}
 801320a:	b087      	sub	sp, #28
 801320c:	af00      	add	r7, sp, #0
 801320e:	60f8      	str	r0, [r7, #12]
 8013210:	460b      	mov	r3, r1
 8013212:	607a      	str	r2, [r7, #4]
 8013214:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	333c      	adds	r3, #60	@ 0x3c
 801321e:	3304      	adds	r3, #4
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	4a26      	ldr	r2, [pc, #152]	@ (80132c0 <USB_EP0_OutStart+0xb8>)
 8013228:	4293      	cmp	r3, r2
 801322a:	d90a      	bls.n	8013242 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8013238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801323c:	d101      	bne.n	8013242 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801323e:	2300      	movs	r3, #0
 8013240:	e037      	b.n	80132b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013248:	461a      	mov	r2, r3
 801324a:	2300      	movs	r3, #0
 801324c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013254:	691b      	ldr	r3, [r3, #16]
 8013256:	697a      	ldr	r2, [r7, #20]
 8013258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801325c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013268:	691b      	ldr	r3, [r3, #16]
 801326a:	697a      	ldr	r2, [r7, #20]
 801326c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013270:	f043 0318 	orr.w	r3, r3, #24
 8013274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801327c:	691b      	ldr	r3, [r3, #16]
 801327e:	697a      	ldr	r2, [r7, #20]
 8013280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8013284:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8013288:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801328a:	7afb      	ldrb	r3, [r7, #11]
 801328c:	2b01      	cmp	r3, #1
 801328e:	d10f      	bne.n	80132b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8013296:	461a      	mov	r2, r3
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	697a      	ldr	r2, [r7, #20]
 80132a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80132aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80132ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	371c      	adds	r7, #28
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	4f54300a 	.word	0x4f54300a

080132c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b085      	sub	sp, #20
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80132cc:	2300      	movs	r3, #0
 80132ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	3301      	adds	r3, #1
 80132d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80132dc:	d901      	bls.n	80132e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80132de:	2303      	movs	r3, #3
 80132e0:	e01b      	b.n	801331a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	691b      	ldr	r3, [r3, #16]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	daf2      	bge.n	80132d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80132ea:	2300      	movs	r3, #0
 80132ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	691b      	ldr	r3, [r3, #16]
 80132f2:	f043 0201 	orr.w	r2, r3, #1
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	3301      	adds	r3, #1
 80132fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8013306:	d901      	bls.n	801330c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013308:	2303      	movs	r3, #3
 801330a:	e006      	b.n	801331a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	691b      	ldr	r3, [r3, #16]
 8013310:	f003 0301 	and.w	r3, r3, #1
 8013314:	2b01      	cmp	r3, #1
 8013316:	d0f0      	beq.n	80132fa <USB_CoreReset+0x36>

  return HAL_OK;
 8013318:	2300      	movs	r3, #0
}
 801331a:	4618      	mov	r0, r3
 801331c:	3714      	adds	r7, #20
 801331e:	46bd      	mov	sp, r7
 8013320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013324:	4770      	bx	lr
	...

08013328 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b084      	sub	sp, #16
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
 8013330:	460b      	mov	r3, r1
 8013332:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013334:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8013338:	f002 fcfe 	bl	8015d38 <USBD_static_malloc>
 801333c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d109      	bne.n	8013358 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	32b0      	adds	r2, #176	@ 0xb0
 801334e:	2100      	movs	r1, #0
 8013350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013354:	2302      	movs	r3, #2
 8013356:	e0d4      	b.n	8013502 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013358:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801335c:	2100      	movs	r1, #0
 801335e:	68f8      	ldr	r0, [r7, #12]
 8013360:	f002 fd50 	bl	8015e04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	32b0      	adds	r2, #176	@ 0xb0
 801336e:	68f9      	ldr	r1, [r7, #12]
 8013370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	32b0      	adds	r2, #176	@ 0xb0
 801337e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	7c1b      	ldrb	r3, [r3, #16]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d138      	bne.n	8013402 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013390:	4b5e      	ldr	r3, [pc, #376]	@ (801350c <USBD_CDC_Init+0x1e4>)
 8013392:	7819      	ldrb	r1, [r3, #0]
 8013394:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013398:	2202      	movs	r2, #2
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f002 fba9 	bl	8015af2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80133a0:	4b5a      	ldr	r3, [pc, #360]	@ (801350c <USBD_CDC_Init+0x1e4>)
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	f003 020f 	and.w	r2, r3, #15
 80133a8:	6879      	ldr	r1, [r7, #4]
 80133aa:	4613      	mov	r3, r2
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	4413      	add	r3, r2
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	440b      	add	r3, r1
 80133b4:	3324      	adds	r3, #36	@ 0x24
 80133b6:	2201      	movs	r2, #1
 80133b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80133ba:	4b55      	ldr	r3, [pc, #340]	@ (8013510 <USBD_CDC_Init+0x1e8>)
 80133bc:	7819      	ldrb	r1, [r3, #0]
 80133be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80133c2:	2202      	movs	r2, #2
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f002 fb94 	bl	8015af2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80133ca:	4b51      	ldr	r3, [pc, #324]	@ (8013510 <USBD_CDC_Init+0x1e8>)
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	f003 020f 	and.w	r2, r3, #15
 80133d2:	6879      	ldr	r1, [r7, #4]
 80133d4:	4613      	mov	r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	4413      	add	r3, r2
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	440b      	add	r3, r1
 80133de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80133e2:	2201      	movs	r2, #1
 80133e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80133e6:	4b4b      	ldr	r3, [pc, #300]	@ (8013514 <USBD_CDC_Init+0x1ec>)
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	f003 020f 	and.w	r2, r3, #15
 80133ee:	6879      	ldr	r1, [r7, #4]
 80133f0:	4613      	mov	r3, r2
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	4413      	add	r3, r2
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	440b      	add	r3, r1
 80133fa:	3326      	adds	r3, #38	@ 0x26
 80133fc:	2210      	movs	r2, #16
 80133fe:	801a      	strh	r2, [r3, #0]
 8013400:	e035      	b.n	801346e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013402:	4b42      	ldr	r3, [pc, #264]	@ (801350c <USBD_CDC_Init+0x1e4>)
 8013404:	7819      	ldrb	r1, [r3, #0]
 8013406:	2340      	movs	r3, #64	@ 0x40
 8013408:	2202      	movs	r2, #2
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f002 fb71 	bl	8015af2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013410:	4b3e      	ldr	r3, [pc, #248]	@ (801350c <USBD_CDC_Init+0x1e4>)
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	f003 020f 	and.w	r2, r3, #15
 8013418:	6879      	ldr	r1, [r7, #4]
 801341a:	4613      	mov	r3, r2
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	4413      	add	r3, r2
 8013420:	009b      	lsls	r3, r3, #2
 8013422:	440b      	add	r3, r1
 8013424:	3324      	adds	r3, #36	@ 0x24
 8013426:	2201      	movs	r2, #1
 8013428:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801342a:	4b39      	ldr	r3, [pc, #228]	@ (8013510 <USBD_CDC_Init+0x1e8>)
 801342c:	7819      	ldrb	r1, [r3, #0]
 801342e:	2340      	movs	r3, #64	@ 0x40
 8013430:	2202      	movs	r2, #2
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f002 fb5d 	bl	8015af2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013438:	4b35      	ldr	r3, [pc, #212]	@ (8013510 <USBD_CDC_Init+0x1e8>)
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	f003 020f 	and.w	r2, r3, #15
 8013440:	6879      	ldr	r1, [r7, #4]
 8013442:	4613      	mov	r3, r2
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	4413      	add	r3, r2
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	440b      	add	r3, r1
 801344c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013450:	2201      	movs	r2, #1
 8013452:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013454:	4b2f      	ldr	r3, [pc, #188]	@ (8013514 <USBD_CDC_Init+0x1ec>)
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	f003 020f 	and.w	r2, r3, #15
 801345c:	6879      	ldr	r1, [r7, #4]
 801345e:	4613      	mov	r3, r2
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	4413      	add	r3, r2
 8013464:	009b      	lsls	r3, r3, #2
 8013466:	440b      	add	r3, r1
 8013468:	3326      	adds	r3, #38	@ 0x26
 801346a:	2210      	movs	r2, #16
 801346c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801346e:	4b29      	ldr	r3, [pc, #164]	@ (8013514 <USBD_CDC_Init+0x1ec>)
 8013470:	7819      	ldrb	r1, [r3, #0]
 8013472:	2308      	movs	r3, #8
 8013474:	2203      	movs	r2, #3
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f002 fb3b 	bl	8015af2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801347c:	4b25      	ldr	r3, [pc, #148]	@ (8013514 <USBD_CDC_Init+0x1ec>)
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	f003 020f 	and.w	r2, r3, #15
 8013484:	6879      	ldr	r1, [r7, #4]
 8013486:	4613      	mov	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	4413      	add	r3, r2
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	440b      	add	r3, r1
 8013490:	3324      	adds	r3, #36	@ 0x24
 8013492:	2201      	movs	r2, #1
 8013494:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2200      	movs	r2, #0
 801349a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	33b0      	adds	r3, #176	@ 0xb0
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	4413      	add	r3, r2
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	2200      	movs	r2, #0
 80134b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2200      	movs	r2, #0
 80134be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d101      	bne.n	80134d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80134cc:	2302      	movs	r3, #2
 80134ce:	e018      	b.n	8013502 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	7c1b      	ldrb	r3, [r3, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d10a      	bne.n	80134ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80134d8:	4b0d      	ldr	r3, [pc, #52]	@ (8013510 <USBD_CDC_Init+0x1e8>)
 80134da:	7819      	ldrb	r1, [r3, #0]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80134e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f002 fbf2 	bl	8015cd0 <USBD_LL_PrepareReceive>
 80134ec:	e008      	b.n	8013500 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80134ee:	4b08      	ldr	r3, [pc, #32]	@ (8013510 <USBD_CDC_Init+0x1e8>)
 80134f0:	7819      	ldrb	r1, [r3, #0]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80134f8:	2340      	movs	r3, #64	@ 0x40
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f002 fbe8 	bl	8015cd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013500:	2300      	movs	r3, #0
}
 8013502:	4618      	mov	r0, r3
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	24000097 	.word	0x24000097
 8013510:	24000098 	.word	0x24000098
 8013514:	24000099 	.word	0x24000099

08013518 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b082      	sub	sp, #8
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	460b      	mov	r3, r1
 8013522:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013524:	4b3a      	ldr	r3, [pc, #232]	@ (8013610 <USBD_CDC_DeInit+0xf8>)
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	4619      	mov	r1, r3
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f002 fb07 	bl	8015b3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013530:	4b37      	ldr	r3, [pc, #220]	@ (8013610 <USBD_CDC_DeInit+0xf8>)
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	f003 020f 	and.w	r2, r3, #15
 8013538:	6879      	ldr	r1, [r7, #4]
 801353a:	4613      	mov	r3, r2
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	4413      	add	r3, r2
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	440b      	add	r3, r1
 8013544:	3324      	adds	r3, #36	@ 0x24
 8013546:	2200      	movs	r2, #0
 8013548:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801354a:	4b32      	ldr	r3, [pc, #200]	@ (8013614 <USBD_CDC_DeInit+0xfc>)
 801354c:	781b      	ldrb	r3, [r3, #0]
 801354e:	4619      	mov	r1, r3
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f002 faf4 	bl	8015b3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013556:	4b2f      	ldr	r3, [pc, #188]	@ (8013614 <USBD_CDC_DeInit+0xfc>)
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	f003 020f 	and.w	r2, r3, #15
 801355e:	6879      	ldr	r1, [r7, #4]
 8013560:	4613      	mov	r3, r2
 8013562:	009b      	lsls	r3, r3, #2
 8013564:	4413      	add	r3, r2
 8013566:	009b      	lsls	r3, r3, #2
 8013568:	440b      	add	r3, r1
 801356a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801356e:	2200      	movs	r2, #0
 8013570:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013572:	4b29      	ldr	r3, [pc, #164]	@ (8013618 <USBD_CDC_DeInit+0x100>)
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	4619      	mov	r1, r3
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f002 fae0 	bl	8015b3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801357e:	4b26      	ldr	r3, [pc, #152]	@ (8013618 <USBD_CDC_DeInit+0x100>)
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	f003 020f 	and.w	r2, r3, #15
 8013586:	6879      	ldr	r1, [r7, #4]
 8013588:	4613      	mov	r3, r2
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	4413      	add	r3, r2
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	440b      	add	r3, r1
 8013592:	3324      	adds	r3, #36	@ 0x24
 8013594:	2200      	movs	r2, #0
 8013596:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013598:	4b1f      	ldr	r3, [pc, #124]	@ (8013618 <USBD_CDC_DeInit+0x100>)
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	f003 020f 	and.w	r2, r3, #15
 80135a0:	6879      	ldr	r1, [r7, #4]
 80135a2:	4613      	mov	r3, r2
 80135a4:	009b      	lsls	r3, r3, #2
 80135a6:	4413      	add	r3, r2
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	440b      	add	r3, r1
 80135ac:	3326      	adds	r3, #38	@ 0x26
 80135ae:	2200      	movs	r2, #0
 80135b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	32b0      	adds	r2, #176	@ 0xb0
 80135bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d01f      	beq.n	8013604 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135ca:	687a      	ldr	r2, [r7, #4]
 80135cc:	33b0      	adds	r3, #176	@ 0xb0
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	4413      	add	r3, r2
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	32b0      	adds	r2, #176	@ 0xb0
 80135e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135e6:	4618      	mov	r0, r3
 80135e8:	f002 fbb4 	bl	8015d54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	32b0      	adds	r2, #176	@ 0xb0
 80135f6:	2100      	movs	r1, #0
 80135f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2200      	movs	r2, #0
 8013600:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013604:	2300      	movs	r3, #0
}
 8013606:	4618      	mov	r0, r3
 8013608:	3708      	adds	r7, #8
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	24000097 	.word	0x24000097
 8013614:	24000098 	.word	0x24000098
 8013618:	24000099 	.word	0x24000099

0801361c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b086      	sub	sp, #24
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	32b0      	adds	r2, #176	@ 0xb0
 8013630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013634:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013636:	2300      	movs	r3, #0
 8013638:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801363a:	2300      	movs	r3, #0
 801363c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801363e:	2300      	movs	r3, #0
 8013640:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d101      	bne.n	801364c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013648:	2303      	movs	r3, #3
 801364a:	e0bf      	b.n	80137cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013654:	2b00      	cmp	r3, #0
 8013656:	d050      	beq.n	80136fa <USBD_CDC_Setup+0xde>
 8013658:	2b20      	cmp	r3, #32
 801365a:	f040 80af 	bne.w	80137bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	88db      	ldrh	r3, [r3, #6]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d03a      	beq.n	80136dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	b25b      	sxtb	r3, r3
 801366c:	2b00      	cmp	r3, #0
 801366e:	da1b      	bge.n	80136a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	33b0      	adds	r3, #176	@ 0xb0
 801367a:	009b      	lsls	r3, r3, #2
 801367c:	4413      	add	r3, r2
 801367e:	685b      	ldr	r3, [r3, #4]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	683a      	ldr	r2, [r7, #0]
 8013684:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013686:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013688:	683a      	ldr	r2, [r7, #0]
 801368a:	88d2      	ldrh	r2, [r2, #6]
 801368c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	88db      	ldrh	r3, [r3, #6]
 8013692:	2b07      	cmp	r3, #7
 8013694:	bf28      	it	cs
 8013696:	2307      	movcs	r3, #7
 8013698:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	89fa      	ldrh	r2, [r7, #14]
 801369e:	4619      	mov	r1, r3
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f001 fdbd 	bl	8015220 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80136a6:	e090      	b.n	80137ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	785a      	ldrb	r2, [r3, #1]
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	88db      	ldrh	r3, [r3, #6]
 80136b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80136b8:	d803      	bhi.n	80136c2 <USBD_CDC_Setup+0xa6>
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	88db      	ldrh	r3, [r3, #6]
 80136be:	b2da      	uxtb	r2, r3
 80136c0:	e000      	b.n	80136c4 <USBD_CDC_Setup+0xa8>
 80136c2:	2240      	movs	r2, #64	@ 0x40
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80136ca:	6939      	ldr	r1, [r7, #16]
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80136d2:	461a      	mov	r2, r3
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f001 fdcf 	bl	8015278 <USBD_CtlPrepareRx>
      break;
 80136da:	e076      	b.n	80137ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	33b0      	adds	r3, #176	@ 0xb0
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	4413      	add	r3, r2
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	689b      	ldr	r3, [r3, #8]
 80136ee:	683a      	ldr	r2, [r7, #0]
 80136f0:	7850      	ldrb	r0, [r2, #1]
 80136f2:	2200      	movs	r2, #0
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	4798      	blx	r3
      break;
 80136f8:	e067      	b.n	80137ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	785b      	ldrb	r3, [r3, #1]
 80136fe:	2b0b      	cmp	r3, #11
 8013700:	d851      	bhi.n	80137a6 <USBD_CDC_Setup+0x18a>
 8013702:	a201      	add	r2, pc, #4	@ (adr r2, 8013708 <USBD_CDC_Setup+0xec>)
 8013704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013708:	08013739 	.word	0x08013739
 801370c:	080137b5 	.word	0x080137b5
 8013710:	080137a7 	.word	0x080137a7
 8013714:	080137a7 	.word	0x080137a7
 8013718:	080137a7 	.word	0x080137a7
 801371c:	080137a7 	.word	0x080137a7
 8013720:	080137a7 	.word	0x080137a7
 8013724:	080137a7 	.word	0x080137a7
 8013728:	080137a7 	.word	0x080137a7
 801372c:	080137a7 	.word	0x080137a7
 8013730:	08013763 	.word	0x08013763
 8013734:	0801378d 	.word	0x0801378d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801373e:	b2db      	uxtb	r3, r3
 8013740:	2b03      	cmp	r3, #3
 8013742:	d107      	bne.n	8013754 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013744:	f107 030a 	add.w	r3, r7, #10
 8013748:	2202      	movs	r2, #2
 801374a:	4619      	mov	r1, r3
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f001 fd67 	bl	8015220 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013752:	e032      	b.n	80137ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013754:	6839      	ldr	r1, [r7, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f001 fce5 	bl	8015126 <USBD_CtlError>
            ret = USBD_FAIL;
 801375c:	2303      	movs	r3, #3
 801375e:	75fb      	strb	r3, [r7, #23]
          break;
 8013760:	e02b      	b.n	80137ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013768:	b2db      	uxtb	r3, r3
 801376a:	2b03      	cmp	r3, #3
 801376c:	d107      	bne.n	801377e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801376e:	f107 030d 	add.w	r3, r7, #13
 8013772:	2201      	movs	r2, #1
 8013774:	4619      	mov	r1, r3
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f001 fd52 	bl	8015220 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801377c:	e01d      	b.n	80137ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801377e:	6839      	ldr	r1, [r7, #0]
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f001 fcd0 	bl	8015126 <USBD_CtlError>
            ret = USBD_FAIL;
 8013786:	2303      	movs	r3, #3
 8013788:	75fb      	strb	r3, [r7, #23]
          break;
 801378a:	e016      	b.n	80137ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013792:	b2db      	uxtb	r3, r3
 8013794:	2b03      	cmp	r3, #3
 8013796:	d00f      	beq.n	80137b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013798:	6839      	ldr	r1, [r7, #0]
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f001 fcc3 	bl	8015126 <USBD_CtlError>
            ret = USBD_FAIL;
 80137a0:	2303      	movs	r3, #3
 80137a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80137a4:	e008      	b.n	80137b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80137a6:	6839      	ldr	r1, [r7, #0]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f001 fcbc 	bl	8015126 <USBD_CtlError>
          ret = USBD_FAIL;
 80137ae:	2303      	movs	r3, #3
 80137b0:	75fb      	strb	r3, [r7, #23]
          break;
 80137b2:	e002      	b.n	80137ba <USBD_CDC_Setup+0x19e>
          break;
 80137b4:	bf00      	nop
 80137b6:	e008      	b.n	80137ca <USBD_CDC_Setup+0x1ae>
          break;
 80137b8:	bf00      	nop
      }
      break;
 80137ba:	e006      	b.n	80137ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80137bc:	6839      	ldr	r1, [r7, #0]
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f001 fcb1 	bl	8015126 <USBD_CtlError>
      ret = USBD_FAIL;
 80137c4:	2303      	movs	r3, #3
 80137c6:	75fb      	strb	r3, [r7, #23]
      break;
 80137c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80137ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3718      	adds	r7, #24
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	460b      	mov	r3, r1
 80137de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80137e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	32b0      	adds	r2, #176	@ 0xb0
 80137f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d101      	bne.n	80137fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80137fa:	2303      	movs	r3, #3
 80137fc:	e065      	b.n	80138ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	32b0      	adds	r2, #176	@ 0xb0
 8013808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801380c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801380e:	78fb      	ldrb	r3, [r7, #3]
 8013810:	f003 020f 	and.w	r2, r3, #15
 8013814:	6879      	ldr	r1, [r7, #4]
 8013816:	4613      	mov	r3, r2
 8013818:	009b      	lsls	r3, r3, #2
 801381a:	4413      	add	r3, r2
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	440b      	add	r3, r1
 8013820:	3318      	adds	r3, #24
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d02f      	beq.n	8013888 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013828:	78fb      	ldrb	r3, [r7, #3]
 801382a:	f003 020f 	and.w	r2, r3, #15
 801382e:	6879      	ldr	r1, [r7, #4]
 8013830:	4613      	mov	r3, r2
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	4413      	add	r3, r2
 8013836:	009b      	lsls	r3, r3, #2
 8013838:	440b      	add	r3, r1
 801383a:	3318      	adds	r3, #24
 801383c:	681a      	ldr	r2, [r3, #0]
 801383e:	78fb      	ldrb	r3, [r7, #3]
 8013840:	f003 010f 	and.w	r1, r3, #15
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	460b      	mov	r3, r1
 8013848:	00db      	lsls	r3, r3, #3
 801384a:	440b      	add	r3, r1
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	4403      	add	r3, r0
 8013850:	331c      	adds	r3, #28
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	fbb2 f1f3 	udiv	r1, r2, r3
 8013858:	fb01 f303 	mul.w	r3, r1, r3
 801385c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801385e:	2b00      	cmp	r3, #0
 8013860:	d112      	bne.n	8013888 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013862:	78fb      	ldrb	r3, [r7, #3]
 8013864:	f003 020f 	and.w	r2, r3, #15
 8013868:	6879      	ldr	r1, [r7, #4]
 801386a:	4613      	mov	r3, r2
 801386c:	009b      	lsls	r3, r3, #2
 801386e:	4413      	add	r3, r2
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	440b      	add	r3, r1
 8013874:	3318      	adds	r3, #24
 8013876:	2200      	movs	r2, #0
 8013878:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801387a:	78f9      	ldrb	r1, [r7, #3]
 801387c:	2300      	movs	r3, #0
 801387e:	2200      	movs	r2, #0
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f002 fa04 	bl	8015c8e <USBD_LL_Transmit>
 8013886:	e01f      	b.n	80138c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	2200      	movs	r2, #0
 801388c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	33b0      	adds	r3, #176	@ 0xb0
 801389a:	009b      	lsls	r3, r3, #2
 801389c:	4413      	add	r3, r2
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	691b      	ldr	r3, [r3, #16]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d010      	beq.n	80138c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	33b0      	adds	r3, #176	@ 0xb0
 80138b0:	009b      	lsls	r3, r3, #2
 80138b2:	4413      	add	r3, r2
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	691b      	ldr	r3, [r3, #16]
 80138b8:	68ba      	ldr	r2, [r7, #8]
 80138ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80138be:	68ba      	ldr	r2, [r7, #8]
 80138c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80138c4:	78fa      	ldrb	r2, [r7, #3]
 80138c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80138c8:	2300      	movs	r3, #0
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3710      	adds	r7, #16
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}

080138d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80138d2:	b580      	push	{r7, lr}
 80138d4:	b084      	sub	sp, #16
 80138d6:	af00      	add	r7, sp, #0
 80138d8:	6078      	str	r0, [r7, #4]
 80138da:	460b      	mov	r3, r1
 80138dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	32b0      	adds	r2, #176	@ 0xb0
 80138e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	32b0      	adds	r2, #176	@ 0xb0
 80138f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d101      	bne.n	8013904 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013900:	2303      	movs	r3, #3
 8013902:	e01a      	b.n	801393a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013904:	78fb      	ldrb	r3, [r7, #3]
 8013906:	4619      	mov	r1, r3
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f002 fa02 	bl	8015d12 <USBD_LL_GetRxDataSize>
 801390e:	4602      	mov	r2, r0
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801391c:	687a      	ldr	r2, [r7, #4]
 801391e:	33b0      	adds	r3, #176	@ 0xb0
 8013920:	009b      	lsls	r3, r3, #2
 8013922:	4413      	add	r3, r2
 8013924:	685b      	ldr	r3, [r3, #4]
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	68fa      	ldr	r2, [r7, #12]
 801392a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801392e:	68fa      	ldr	r2, [r7, #12]
 8013930:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013934:	4611      	mov	r1, r2
 8013936:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013938:	2300      	movs	r3, #0
}
 801393a:	4618      	mov	r0, r3
 801393c:	3710      	adds	r7, #16
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}

08013942 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013942:	b580      	push	{r7, lr}
 8013944:	b084      	sub	sp, #16
 8013946:	af00      	add	r7, sp, #0
 8013948:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	32b0      	adds	r2, #176	@ 0xb0
 8013954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013958:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d101      	bne.n	8013964 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013960:	2303      	movs	r3, #3
 8013962:	e024      	b.n	80139ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	33b0      	adds	r3, #176	@ 0xb0
 801396e:	009b      	lsls	r3, r3, #2
 8013970:	4413      	add	r3, r2
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d019      	beq.n	80139ac <USBD_CDC_EP0_RxReady+0x6a>
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801397e:	2bff      	cmp	r3, #255	@ 0xff
 8013980:	d014      	beq.n	80139ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	33b0      	adds	r3, #176	@ 0xb0
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	4413      	add	r3, r2
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	689b      	ldr	r3, [r3, #8]
 8013994:	68fa      	ldr	r2, [r7, #12]
 8013996:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801399a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801399c:	68fa      	ldr	r2, [r7, #12]
 801399e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80139a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	22ff      	movs	r2, #255	@ 0xff
 80139a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80139ac:	2300      	movs	r3, #0
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3710      	adds	r7, #16
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
	...

080139b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b086      	sub	sp, #24
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80139c0:	2182      	movs	r1, #130	@ 0x82
 80139c2:	4818      	ldr	r0, [pc, #96]	@ (8013a24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80139c4:	f000 fd4f 	bl	8014466 <USBD_GetEpDesc>
 80139c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80139ca:	2101      	movs	r1, #1
 80139cc:	4815      	ldr	r0, [pc, #84]	@ (8013a24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80139ce:	f000 fd4a 	bl	8014466 <USBD_GetEpDesc>
 80139d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80139d4:	2181      	movs	r1, #129	@ 0x81
 80139d6:	4813      	ldr	r0, [pc, #76]	@ (8013a24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80139d8:	f000 fd45 	bl	8014466 <USBD_GetEpDesc>
 80139dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d002      	beq.n	80139ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	2210      	movs	r2, #16
 80139e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d006      	beq.n	80139fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	2200      	movs	r2, #0
 80139f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80139f8:	711a      	strb	r2, [r3, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d006      	beq.n	8013a12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2200      	movs	r2, #0
 8013a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013a0c:	711a      	strb	r2, [r3, #4]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	2243      	movs	r2, #67	@ 0x43
 8013a16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013a18:	4b02      	ldr	r3, [pc, #8]	@ (8013a24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3718      	adds	r7, #24
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	bf00      	nop
 8013a24:	24000054 	.word	0x24000054

08013a28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b086      	sub	sp, #24
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013a30:	2182      	movs	r1, #130	@ 0x82
 8013a32:	4818      	ldr	r0, [pc, #96]	@ (8013a94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013a34:	f000 fd17 	bl	8014466 <USBD_GetEpDesc>
 8013a38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013a3a:	2101      	movs	r1, #1
 8013a3c:	4815      	ldr	r0, [pc, #84]	@ (8013a94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013a3e:	f000 fd12 	bl	8014466 <USBD_GetEpDesc>
 8013a42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013a44:	2181      	movs	r1, #129	@ 0x81
 8013a46:	4813      	ldr	r0, [pc, #76]	@ (8013a94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013a48:	f000 fd0d 	bl	8014466 <USBD_GetEpDesc>
 8013a4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d002      	beq.n	8013a5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	2210      	movs	r2, #16
 8013a58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d006      	beq.n	8013a6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	2200      	movs	r2, #0
 8013a64:	711a      	strb	r2, [r3, #4]
 8013a66:	2200      	movs	r2, #0
 8013a68:	f042 0202 	orr.w	r2, r2, #2
 8013a6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d006      	beq.n	8013a82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	2200      	movs	r2, #0
 8013a78:	711a      	strb	r2, [r3, #4]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	f042 0202 	orr.w	r2, r2, #2
 8013a80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2243      	movs	r2, #67	@ 0x43
 8013a86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013a88:	4b02      	ldr	r3, [pc, #8]	@ (8013a94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3718      	adds	r7, #24
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	24000054 	.word	0x24000054

08013a98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013aa0:	2182      	movs	r1, #130	@ 0x82
 8013aa2:	4818      	ldr	r0, [pc, #96]	@ (8013b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013aa4:	f000 fcdf 	bl	8014466 <USBD_GetEpDesc>
 8013aa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013aaa:	2101      	movs	r1, #1
 8013aac:	4815      	ldr	r0, [pc, #84]	@ (8013b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013aae:	f000 fcda 	bl	8014466 <USBD_GetEpDesc>
 8013ab2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013ab4:	2181      	movs	r1, #129	@ 0x81
 8013ab6:	4813      	ldr	r0, [pc, #76]	@ (8013b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013ab8:	f000 fcd5 	bl	8014466 <USBD_GetEpDesc>
 8013abc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d002      	beq.n	8013aca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	2210      	movs	r2, #16
 8013ac8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d006      	beq.n	8013ade <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013ad8:	711a      	strb	r2, [r3, #4]
 8013ada:	2200      	movs	r2, #0
 8013adc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d006      	beq.n	8013af2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013aec:	711a      	strb	r2, [r3, #4]
 8013aee:	2200      	movs	r2, #0
 8013af0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2243      	movs	r2, #67	@ 0x43
 8013af6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013af8:	4b02      	ldr	r3, [pc, #8]	@ (8013b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3718      	adds	r7, #24
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	24000054 	.word	0x24000054

08013b08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	220a      	movs	r2, #10
 8013b14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013b16:	4b03      	ldr	r3, [pc, #12]	@ (8013b24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	370c      	adds	r7, #12
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b22:	4770      	bx	lr
 8013b24:	24000010 	.word	0x24000010

08013b28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013b38:	2303      	movs	r3, #3
 8013b3a:	e009      	b.n	8013b50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013b42:	687a      	ldr	r2, [r7, #4]
 8013b44:	33b0      	adds	r3, #176	@ 0xb0
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	4413      	add	r3, r2
 8013b4a:	683a      	ldr	r2, [r7, #0]
 8013b4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013b4e:	2300      	movs	r3, #0
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	370c      	adds	r7, #12
 8013b54:	46bd      	mov	sp, r7
 8013b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5a:	4770      	bx	lr

08013b5c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b087      	sub	sp, #28
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	32b0      	adds	r2, #176	@ 0xb0
 8013b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b76:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d101      	bne.n	8013b82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013b7e:	2303      	movs	r3, #3
 8013b80:	e008      	b.n	8013b94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	68ba      	ldr	r2, [r7, #8]
 8013b86:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013b92:	2300      	movs	r3, #0
}
 8013b94:	4618      	mov	r0, r3
 8013b96:	371c      	adds	r7, #28
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr

08013ba0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013ba0:	b480      	push	{r7}
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	32b0      	adds	r2, #176	@ 0xb0
 8013bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d101      	bne.n	8013bc4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013bc0:	2303      	movs	r3, #3
 8013bc2:	e004      	b.n	8013bce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	683a      	ldr	r2, [r7, #0]
 8013bc8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013bcc:	2300      	movs	r3, #0
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3714      	adds	r7, #20
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr
	...

08013bdc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b084      	sub	sp, #16
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	32b0      	adds	r2, #176	@ 0xb0
 8013bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bf2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d101      	bne.n	8013c02 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013bfe:	2303      	movs	r3, #3
 8013c00:	e025      	b.n	8013c4e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d11f      	bne.n	8013c4c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	2201      	movs	r2, #1
 8013c10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013c14:	4b10      	ldr	r3, [pc, #64]	@ (8013c58 <USBD_CDC_TransmitPacket+0x7c>)
 8013c16:	781b      	ldrb	r3, [r3, #0]
 8013c18:	f003 020f 	and.w	r2, r3, #15
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	4613      	mov	r3, r2
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	4413      	add	r3, r2
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	4403      	add	r3, r0
 8013c2e:	3318      	adds	r3, #24
 8013c30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013c32:	4b09      	ldr	r3, [pc, #36]	@ (8013c58 <USBD_CDC_TransmitPacket+0x7c>)
 8013c34:	7819      	ldrb	r1, [r3, #0]
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f002 f823 	bl	8015c8e <USBD_LL_Transmit>

    ret = USBD_OK;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3710      	adds	r7, #16
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	bf00      	nop
 8013c58:	24000097 	.word	0x24000097

08013c5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	32b0      	adds	r2, #176	@ 0xb0
 8013c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	32b0      	adds	r2, #176	@ 0xb0
 8013c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d101      	bne.n	8013c8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013c86:	2303      	movs	r3, #3
 8013c88:	e018      	b.n	8013cbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	7c1b      	ldrb	r3, [r3, #16]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d10a      	bne.n	8013ca8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013c92:	4b0c      	ldr	r3, [pc, #48]	@ (8013cc4 <USBD_CDC_ReceivePacket+0x68>)
 8013c94:	7819      	ldrb	r1, [r3, #0]
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f002 f815 	bl	8015cd0 <USBD_LL_PrepareReceive>
 8013ca6:	e008      	b.n	8013cba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013ca8:	4b06      	ldr	r3, [pc, #24]	@ (8013cc4 <USBD_CDC_ReceivePacket+0x68>)
 8013caa:	7819      	ldrb	r1, [r3, #0]
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013cb2:	2340      	movs	r3, #64	@ 0x40
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f002 f80b 	bl	8015cd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013cba:	2300      	movs	r3, #0
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3710      	adds	r7, #16
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	24000098 	.word	0x24000098

08013cc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b086      	sub	sp, #24
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d101      	bne.n	8013ce0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013cdc:	2303      	movs	r3, #3
 8013cde:	e01f      	b.n	8013d20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2200      	movs	r2, #0
 8013cec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d003      	beq.n	8013d06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	79fa      	ldrb	r2, [r7, #7]
 8013d12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013d14:	68f8      	ldr	r0, [r7, #12]
 8013d16:	f001 fe81 	bl	8015a1c <USBD_LL_Init>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3718      	adds	r7, #24
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013d32:	2300      	movs	r3, #0
 8013d34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d101      	bne.n	8013d40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013d3c:	2303      	movs	r3, #3
 8013d3e:	e025      	b.n	8013d8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	683a      	ldr	r2, [r7, #0]
 8013d44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	32ae      	adds	r2, #174	@ 0xae
 8013d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d00f      	beq.n	8013d7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	32ae      	adds	r2, #174	@ 0xae
 8013d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d6c:	f107 020e 	add.w	r2, r7, #14
 8013d70:	4610      	mov	r0, r2
 8013d72:	4798      	blx	r3
 8013d74:	4602      	mov	r2, r0
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013d82:	1c5a      	adds	r2, r3, #1
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8013d8a:	2300      	movs	r3, #0
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3710      	adds	r7, #16
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f001 fe8d 	bl	8015abc <USBD_LL_Start>
 8013da2:	4603      	mov	r3, r0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3708      	adds	r7, #8
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b083      	sub	sp, #12
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013db4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	370c      	adds	r7, #12
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc0:	4770      	bx	lr

08013dc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013dc2:	b580      	push	{r7, lr}
 8013dc4:	b084      	sub	sp, #16
 8013dc6:	af00      	add	r7, sp, #0
 8013dc8:	6078      	str	r0, [r7, #4]
 8013dca:	460b      	mov	r3, r1
 8013dcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d009      	beq.n	8013df0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	78fa      	ldrb	r2, [r7, #3]
 8013de6:	4611      	mov	r1, r2
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	4798      	blx	r3
 8013dec:	4603      	mov	r3, r0
 8013dee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3710      	adds	r7, #16
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b084      	sub	sp, #16
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
 8013e02:	460b      	mov	r3, r1
 8013e04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e06:	2300      	movs	r3, #0
 8013e08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	78fa      	ldrb	r2, [r7, #3]
 8013e14:	4611      	mov	r1, r2
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	4798      	blx	r3
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d001      	beq.n	8013e24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013e20:	2303      	movs	r3, #3
 8013e22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3710      	adds	r7, #16
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013e2e:	b580      	push	{r7, lr}
 8013e30:	b084      	sub	sp, #16
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
 8013e36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013e3e:	6839      	ldr	r1, [r7, #0]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f001 f936 	bl	80150b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2201      	movs	r2, #1
 8013e4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8013e54:	461a      	mov	r2, r3
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013e62:	f003 031f 	and.w	r3, r3, #31
 8013e66:	2b02      	cmp	r3, #2
 8013e68:	d01a      	beq.n	8013ea0 <USBD_LL_SetupStage+0x72>
 8013e6a:	2b02      	cmp	r3, #2
 8013e6c:	d822      	bhi.n	8013eb4 <USBD_LL_SetupStage+0x86>
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d002      	beq.n	8013e78 <USBD_LL_SetupStage+0x4a>
 8013e72:	2b01      	cmp	r3, #1
 8013e74:	d00a      	beq.n	8013e8c <USBD_LL_SetupStage+0x5e>
 8013e76:	e01d      	b.n	8013eb4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013e7e:	4619      	mov	r1, r3
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f000 fb63 	bl	801454c <USBD_StdDevReq>
 8013e86:	4603      	mov	r3, r0
 8013e88:	73fb      	strb	r3, [r7, #15]
      break;
 8013e8a:	e020      	b.n	8013ece <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013e92:	4619      	mov	r1, r3
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f000 fbcb 	bl	8014630 <USBD_StdItfReq>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8013e9e:	e016      	b.n	8013ece <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 fc2d 	bl	8014708 <USBD_StdEPReq>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8013eb2:	e00c      	b.n	8013ece <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013eba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013ebe:	b2db      	uxtb	r3, r3
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f001 fe5a 	bl	8015b7c <USBD_LL_StallEP>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	73fb      	strb	r3, [r7, #15]
      break;
 8013ecc:	bf00      	nop
  }

  return ret;
 8013ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3710      	adds	r7, #16
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b086      	sub	sp, #24
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	60f8      	str	r0, [r7, #12]
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	607a      	str	r2, [r7, #4]
 8013ee4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013eea:	7afb      	ldrb	r3, [r7, #11]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d16e      	bne.n	8013fce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013ef6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013efe:	2b03      	cmp	r3, #3
 8013f00:	f040 8098 	bne.w	8014034 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	689a      	ldr	r2, [r3, #8]
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d913      	bls.n	8013f38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	689a      	ldr	r2, [r3, #8]
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	1ad2      	subs	r2, r2, r3
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	68da      	ldr	r2, [r3, #12]
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	689b      	ldr	r3, [r3, #8]
 8013f26:	4293      	cmp	r3, r2
 8013f28:	bf28      	it	cs
 8013f2a:	4613      	movcs	r3, r2
 8013f2c:	461a      	mov	r2, r3
 8013f2e:	6879      	ldr	r1, [r7, #4]
 8013f30:	68f8      	ldr	r0, [r7, #12]
 8013f32:	f001 f9be 	bl	80152b2 <USBD_CtlContinueRx>
 8013f36:	e07d      	b.n	8014034 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013f3e:	f003 031f 	and.w	r3, r3, #31
 8013f42:	2b02      	cmp	r3, #2
 8013f44:	d014      	beq.n	8013f70 <USBD_LL_DataOutStage+0x98>
 8013f46:	2b02      	cmp	r3, #2
 8013f48:	d81d      	bhi.n	8013f86 <USBD_LL_DataOutStage+0xae>
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d002      	beq.n	8013f54 <USBD_LL_DataOutStage+0x7c>
 8013f4e:	2b01      	cmp	r3, #1
 8013f50:	d003      	beq.n	8013f5a <USBD_LL_DataOutStage+0x82>
 8013f52:	e018      	b.n	8013f86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013f54:	2300      	movs	r3, #0
 8013f56:	75bb      	strb	r3, [r7, #22]
            break;
 8013f58:	e018      	b.n	8013f8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013f60:	b2db      	uxtb	r3, r3
 8013f62:	4619      	mov	r1, r3
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f000 fa64 	bl	8014432 <USBD_CoreFindIF>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	75bb      	strb	r3, [r7, #22]
            break;
 8013f6e:	e00d      	b.n	8013f8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013f76:	b2db      	uxtb	r3, r3
 8013f78:	4619      	mov	r1, r3
 8013f7a:	68f8      	ldr	r0, [r7, #12]
 8013f7c:	f000 fa66 	bl	801444c <USBD_CoreFindEP>
 8013f80:	4603      	mov	r3, r0
 8013f82:	75bb      	strb	r3, [r7, #22]
            break;
 8013f84:	e002      	b.n	8013f8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013f86:	2300      	movs	r3, #0
 8013f88:	75bb      	strb	r3, [r7, #22]
            break;
 8013f8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013f8c:	7dbb      	ldrb	r3, [r7, #22]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d119      	bne.n	8013fc6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f98:	b2db      	uxtb	r3, r3
 8013f9a:	2b03      	cmp	r3, #3
 8013f9c:	d113      	bne.n	8013fc6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013f9e:	7dba      	ldrb	r2, [r7, #22]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	32ae      	adds	r2, #174	@ 0xae
 8013fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fa8:	691b      	ldr	r3, [r3, #16]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00b      	beq.n	8013fc6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013fae:	7dba      	ldrb	r2, [r7, #22]
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013fb6:	7dba      	ldrb	r2, [r7, #22]
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	32ae      	adds	r2, #174	@ 0xae
 8013fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fc0:	691b      	ldr	r3, [r3, #16]
 8013fc2:	68f8      	ldr	r0, [r7, #12]
 8013fc4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013fc6:	68f8      	ldr	r0, [r7, #12]
 8013fc8:	f001 f984 	bl	80152d4 <USBD_CtlSendStatus>
 8013fcc:	e032      	b.n	8014034 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013fce:	7afb      	ldrb	r3, [r7, #11]
 8013fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fd4:	b2db      	uxtb	r3, r3
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	68f8      	ldr	r0, [r7, #12]
 8013fda:	f000 fa37 	bl	801444c <USBD_CoreFindEP>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013fe2:	7dbb      	ldrb	r3, [r7, #22]
 8013fe4:	2bff      	cmp	r3, #255	@ 0xff
 8013fe6:	d025      	beq.n	8014034 <USBD_LL_DataOutStage+0x15c>
 8013fe8:	7dbb      	ldrb	r3, [r7, #22]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d122      	bne.n	8014034 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	2b03      	cmp	r3, #3
 8013ff8:	d117      	bne.n	801402a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013ffa:	7dba      	ldrb	r2, [r7, #22]
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	32ae      	adds	r2, #174	@ 0xae
 8014000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014004:	699b      	ldr	r3, [r3, #24]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d00f      	beq.n	801402a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801400a:	7dba      	ldrb	r2, [r7, #22]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014012:	7dba      	ldrb	r2, [r7, #22]
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	32ae      	adds	r2, #174	@ 0xae
 8014018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	7afa      	ldrb	r2, [r7, #11]
 8014020:	4611      	mov	r1, r2
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	4798      	blx	r3
 8014026:	4603      	mov	r3, r0
 8014028:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801402a:	7dfb      	ldrb	r3, [r7, #23]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d001      	beq.n	8014034 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014030:	7dfb      	ldrb	r3, [r7, #23]
 8014032:	e000      	b.n	8014036 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014034:	2300      	movs	r3, #0
}
 8014036:	4618      	mov	r0, r3
 8014038:	3718      	adds	r7, #24
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}

0801403e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801403e:	b580      	push	{r7, lr}
 8014040:	b086      	sub	sp, #24
 8014042:	af00      	add	r7, sp, #0
 8014044:	60f8      	str	r0, [r7, #12]
 8014046:	460b      	mov	r3, r1
 8014048:	607a      	str	r2, [r7, #4]
 801404a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801404c:	7afb      	ldrb	r3, [r7, #11]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d16f      	bne.n	8014132 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	3314      	adds	r3, #20
 8014056:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801405e:	2b02      	cmp	r3, #2
 8014060:	d15a      	bne.n	8014118 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014062:	693b      	ldr	r3, [r7, #16]
 8014064:	689a      	ldr	r2, [r3, #8]
 8014066:	693b      	ldr	r3, [r7, #16]
 8014068:	68db      	ldr	r3, [r3, #12]
 801406a:	429a      	cmp	r2, r3
 801406c:	d914      	bls.n	8014098 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	689a      	ldr	r2, [r3, #8]
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	68db      	ldr	r3, [r3, #12]
 8014076:	1ad2      	subs	r2, r2, r3
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	689b      	ldr	r3, [r3, #8]
 8014080:	461a      	mov	r2, r3
 8014082:	6879      	ldr	r1, [r7, #4]
 8014084:	68f8      	ldr	r0, [r7, #12]
 8014086:	f001 f8e6 	bl	8015256 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801408a:	2300      	movs	r3, #0
 801408c:	2200      	movs	r2, #0
 801408e:	2100      	movs	r1, #0
 8014090:	68f8      	ldr	r0, [r7, #12]
 8014092:	f001 fe1d 	bl	8015cd0 <USBD_LL_PrepareReceive>
 8014096:	e03f      	b.n	8014118 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	68da      	ldr	r2, [r3, #12]
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	689b      	ldr	r3, [r3, #8]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d11c      	bne.n	80140de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	685a      	ldr	r2, [r3, #4]
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d316      	bcc.n	80140de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	685a      	ldr	r2, [r3, #4]
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d20f      	bcs.n	80140de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80140be:	2200      	movs	r2, #0
 80140c0:	2100      	movs	r1, #0
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f001 f8c7 	bl	8015256 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	2200      	movs	r2, #0
 80140cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80140d0:	2300      	movs	r3, #0
 80140d2:	2200      	movs	r2, #0
 80140d4:	2100      	movs	r1, #0
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f001 fdfa 	bl	8015cd0 <USBD_LL_PrepareReceive>
 80140dc:	e01c      	b.n	8014118 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	2b03      	cmp	r3, #3
 80140e8:	d10f      	bne.n	801410a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80140f0:	68db      	ldr	r3, [r3, #12]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d009      	beq.n	801410a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2200      	movs	r2, #0
 80140fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014104:	68db      	ldr	r3, [r3, #12]
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801410a:	2180      	movs	r1, #128	@ 0x80
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f001 fd35 	bl	8015b7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f001 f8f1 	bl	80152fa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801411e:	2b00      	cmp	r3, #0
 8014120:	d03a      	beq.n	8014198 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014122:	68f8      	ldr	r0, [r7, #12]
 8014124:	f7ff fe42 	bl	8013dac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	2200      	movs	r2, #0
 801412c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8014130:	e032      	b.n	8014198 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014132:	7afb      	ldrb	r3, [r7, #11]
 8014134:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014138:	b2db      	uxtb	r3, r3
 801413a:	4619      	mov	r1, r3
 801413c:	68f8      	ldr	r0, [r7, #12]
 801413e:	f000 f985 	bl	801444c <USBD_CoreFindEP>
 8014142:	4603      	mov	r3, r0
 8014144:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014146:	7dfb      	ldrb	r3, [r7, #23]
 8014148:	2bff      	cmp	r3, #255	@ 0xff
 801414a:	d025      	beq.n	8014198 <USBD_LL_DataInStage+0x15a>
 801414c:	7dfb      	ldrb	r3, [r7, #23]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d122      	bne.n	8014198 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014158:	b2db      	uxtb	r3, r3
 801415a:	2b03      	cmp	r3, #3
 801415c:	d11c      	bne.n	8014198 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801415e:	7dfa      	ldrb	r2, [r7, #23]
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	32ae      	adds	r2, #174	@ 0xae
 8014164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014168:	695b      	ldr	r3, [r3, #20]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d014      	beq.n	8014198 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801416e:	7dfa      	ldrb	r2, [r7, #23]
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014176:	7dfa      	ldrb	r2, [r7, #23]
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	32ae      	adds	r2, #174	@ 0xae
 801417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014180:	695b      	ldr	r3, [r3, #20]
 8014182:	7afa      	ldrb	r2, [r7, #11]
 8014184:	4611      	mov	r1, r2
 8014186:	68f8      	ldr	r0, [r7, #12]
 8014188:	4798      	blx	r3
 801418a:	4603      	mov	r3, r0
 801418c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801418e:	7dbb      	ldrb	r3, [r7, #22]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d001      	beq.n	8014198 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014194:	7dbb      	ldrb	r3, [r7, #22]
 8014196:	e000      	b.n	801419a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014198:	2300      	movs	r3, #0
}
 801419a:	4618      	mov	r0, r3
 801419c:	3718      	adds	r7, #24
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}

080141a2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b084      	sub	sp, #16
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80141aa:	2300      	movs	r3, #0
 80141ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2201      	movs	r2, #1
 80141b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2200      	movs	r2, #0
 80141ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2200      	movs	r2, #0
 80141c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2200      	movs	r2, #0
 80141c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2200      	movs	r2, #0
 80141d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d014      	beq.n	8014208 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141e4:	685b      	ldr	r3, [r3, #4]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d00e      	beq.n	8014208 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	6852      	ldr	r2, [r2, #4]
 80141f6:	b2d2      	uxtb	r2, r2
 80141f8:	4611      	mov	r1, r2
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	4798      	blx	r3
 80141fe:	4603      	mov	r3, r0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d001      	beq.n	8014208 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014204:	2303      	movs	r3, #3
 8014206:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014208:	2340      	movs	r3, #64	@ 0x40
 801420a:	2200      	movs	r2, #0
 801420c:	2100      	movs	r1, #0
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f001 fc6f 	bl	8015af2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2201      	movs	r2, #1
 8014218:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2240      	movs	r2, #64	@ 0x40
 8014220:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014224:	2340      	movs	r3, #64	@ 0x40
 8014226:	2200      	movs	r2, #0
 8014228:	2180      	movs	r1, #128	@ 0x80
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f001 fc61 	bl	8015af2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2201      	movs	r2, #1
 8014234:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2240      	movs	r2, #64	@ 0x40
 801423a:	621a      	str	r2, [r3, #32]

  return ret;
 801423c:	7bfb      	ldrb	r3, [r7, #15]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3710      	adds	r7, #16
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}

08014246 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014246:	b480      	push	{r7}
 8014248:	b083      	sub	sp, #12
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
 801424e:	460b      	mov	r3, r1
 8014250:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	78fa      	ldrb	r2, [r7, #3]
 8014256:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014258:	2300      	movs	r3, #0
}
 801425a:	4618      	mov	r0, r3
 801425c:	370c      	adds	r7, #12
 801425e:	46bd      	mov	sp, r7
 8014260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014264:	4770      	bx	lr

08014266 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014266:	b480      	push	{r7}
 8014268:	b083      	sub	sp, #12
 801426a:	af00      	add	r7, sp, #0
 801426c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014274:	b2db      	uxtb	r3, r3
 8014276:	2b04      	cmp	r3, #4
 8014278:	d006      	beq.n	8014288 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014280:	b2da      	uxtb	r2, r3
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2204      	movs	r2, #4
 801428c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8014290:	2300      	movs	r3, #0
}
 8014292:	4618      	mov	r0, r3
 8014294:	370c      	adds	r7, #12
 8014296:	46bd      	mov	sp, r7
 8014298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429c:	4770      	bx	lr

0801429e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801429e:	b480      	push	{r7}
 80142a0:	b083      	sub	sp, #12
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	2b04      	cmp	r3, #4
 80142b0:	d106      	bne.n	80142c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80142b8:	b2da      	uxtb	r2, r3
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80142c0:	2300      	movs	r3, #0
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	370c      	adds	r7, #12
 80142c6:	46bd      	mov	sp, r7
 80142c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142cc:	4770      	bx	lr

080142ce <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b082      	sub	sp, #8
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142dc:	b2db      	uxtb	r3, r3
 80142de:	2b03      	cmp	r3, #3
 80142e0:	d110      	bne.n	8014304 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d00b      	beq.n	8014304 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80142f2:	69db      	ldr	r3, [r3, #28]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d005      	beq.n	8014304 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80142fe:	69db      	ldr	r3, [r3, #28]
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	3708      	adds	r7, #8
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}

0801430e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801430e:	b580      	push	{r7, lr}
 8014310:	b082      	sub	sp, #8
 8014312:	af00      	add	r7, sp, #0
 8014314:	6078      	str	r0, [r7, #4]
 8014316:	460b      	mov	r3, r1
 8014318:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	32ae      	adds	r2, #174	@ 0xae
 8014324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d101      	bne.n	8014330 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801432c:	2303      	movs	r3, #3
 801432e:	e01c      	b.n	801436a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014336:	b2db      	uxtb	r3, r3
 8014338:	2b03      	cmp	r3, #3
 801433a:	d115      	bne.n	8014368 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	32ae      	adds	r2, #174	@ 0xae
 8014346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801434a:	6a1b      	ldr	r3, [r3, #32]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d00b      	beq.n	8014368 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	32ae      	adds	r2, #174	@ 0xae
 801435a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801435e:	6a1b      	ldr	r3, [r3, #32]
 8014360:	78fa      	ldrb	r2, [r7, #3]
 8014362:	4611      	mov	r1, r2
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014368:	2300      	movs	r3, #0
}
 801436a:	4618      	mov	r0, r3
 801436c:	3708      	adds	r7, #8
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}

08014372 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b082      	sub	sp, #8
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
 801437a:	460b      	mov	r3, r1
 801437c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	32ae      	adds	r2, #174	@ 0xae
 8014388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d101      	bne.n	8014394 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014390:	2303      	movs	r3, #3
 8014392:	e01c      	b.n	80143ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801439a:	b2db      	uxtb	r3, r3
 801439c:	2b03      	cmp	r3, #3
 801439e:	d115      	bne.n	80143cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	32ae      	adds	r2, #174	@ 0xae
 80143aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d00b      	beq.n	80143cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	32ae      	adds	r2, #174	@ 0xae
 80143be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143c4:	78fa      	ldrb	r2, [r7, #3]
 80143c6:	4611      	mov	r1, r2
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80143cc:	2300      	movs	r3, #0
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3708      	adds	r7, #8
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80143d6:	b480      	push	{r7}
 80143d8:	b083      	sub	sp, #12
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80143de:	2300      	movs	r3, #0
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	370c      	adds	r7, #12
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr

080143ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b084      	sub	sp, #16
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80143f4:	2300      	movs	r3, #0
 80143f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2201      	movs	r2, #1
 80143fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014406:	2b00      	cmp	r3, #0
 8014408:	d00e      	beq.n	8014428 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	6852      	ldr	r2, [r2, #4]
 8014416:	b2d2      	uxtb	r2, r2
 8014418:	4611      	mov	r1, r2
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	4798      	blx	r3
 801441e:	4603      	mov	r3, r0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d001      	beq.n	8014428 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014424:	2303      	movs	r3, #3
 8014426:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014428:	7bfb      	ldrb	r3, [r7, #15]
}
 801442a:	4618      	mov	r0, r3
 801442c:	3710      	adds	r7, #16
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}

08014432 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014432:	b480      	push	{r7}
 8014434:	b083      	sub	sp, #12
 8014436:	af00      	add	r7, sp, #0
 8014438:	6078      	str	r0, [r7, #4]
 801443a:	460b      	mov	r3, r1
 801443c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801443e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014440:	4618      	mov	r0, r3
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr

0801444c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801444c:	b480      	push	{r7}
 801444e:	b083      	sub	sp, #12
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	460b      	mov	r3, r1
 8014456:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014458:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801445a:	4618      	mov	r0, r3
 801445c:	370c      	adds	r7, #12
 801445e:	46bd      	mov	sp, r7
 8014460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014464:	4770      	bx	lr

08014466 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b086      	sub	sp, #24
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
 801446e:	460b      	mov	r3, r1
 8014470:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801447a:	2300      	movs	r3, #0
 801447c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	885b      	ldrh	r3, [r3, #2]
 8014482:	b29b      	uxth	r3, r3
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	7812      	ldrb	r2, [r2, #0]
 8014488:	4293      	cmp	r3, r2
 801448a:	d91f      	bls.n	80144cc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014492:	e013      	b.n	80144bc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014494:	f107 030a 	add.w	r3, r7, #10
 8014498:	4619      	mov	r1, r3
 801449a:	6978      	ldr	r0, [r7, #20]
 801449c:	f000 f81b 	bl	80144d6 <USBD_GetNextDesc>
 80144a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	785b      	ldrb	r3, [r3, #1]
 80144a6:	2b05      	cmp	r3, #5
 80144a8:	d108      	bne.n	80144bc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	789b      	ldrb	r3, [r3, #2]
 80144b2:	78fa      	ldrb	r2, [r7, #3]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d008      	beq.n	80144ca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80144b8:	2300      	movs	r3, #0
 80144ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	885b      	ldrh	r3, [r3, #2]
 80144c0:	b29a      	uxth	r2, r3
 80144c2:	897b      	ldrh	r3, [r7, #10]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d8e5      	bhi.n	8014494 <USBD_GetEpDesc+0x2e>
 80144c8:	e000      	b.n	80144cc <USBD_GetEpDesc+0x66>
          break;
 80144ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80144cc:	693b      	ldr	r3, [r7, #16]
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3718      	adds	r7, #24
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}

080144d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80144d6:	b480      	push	{r7}
 80144d8:	b085      	sub	sp, #20
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
 80144de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	881b      	ldrh	r3, [r3, #0]
 80144e8:	68fa      	ldr	r2, [r7, #12]
 80144ea:	7812      	ldrb	r2, [r2, #0]
 80144ec:	4413      	add	r3, r2
 80144ee:	b29a      	uxth	r2, r3
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	461a      	mov	r2, r3
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	4413      	add	r3, r2
 80144fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014500:	68fb      	ldr	r3, [r7, #12]
}
 8014502:	4618      	mov	r0, r3
 8014504:	3714      	adds	r7, #20
 8014506:	46bd      	mov	sp, r7
 8014508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450c:	4770      	bx	lr

0801450e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801450e:	b480      	push	{r7}
 8014510:	b087      	sub	sp, #28
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014520:	697b      	ldr	r3, [r7, #20]
 8014522:	3301      	adds	r3, #1
 8014524:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801452c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8014530:	021b      	lsls	r3, r3, #8
 8014532:	b21a      	sxth	r2, r3
 8014534:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014538:	4313      	orrs	r3, r2
 801453a:	b21b      	sxth	r3, r3
 801453c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801453e:	89fb      	ldrh	r3, [r7, #14]
}
 8014540:	4618      	mov	r0, r3
 8014542:	371c      	adds	r7, #28
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr

0801454c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014556:	2300      	movs	r3, #0
 8014558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014562:	2b40      	cmp	r3, #64	@ 0x40
 8014564:	d005      	beq.n	8014572 <USBD_StdDevReq+0x26>
 8014566:	2b40      	cmp	r3, #64	@ 0x40
 8014568:	d857      	bhi.n	801461a <USBD_StdDevReq+0xce>
 801456a:	2b00      	cmp	r3, #0
 801456c:	d00f      	beq.n	801458e <USBD_StdDevReq+0x42>
 801456e:	2b20      	cmp	r3, #32
 8014570:	d153      	bne.n	801461a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	32ae      	adds	r2, #174	@ 0xae
 801457c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014580:	689b      	ldr	r3, [r3, #8]
 8014582:	6839      	ldr	r1, [r7, #0]
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	4798      	blx	r3
 8014588:	4603      	mov	r3, r0
 801458a:	73fb      	strb	r3, [r7, #15]
      break;
 801458c:	e04a      	b.n	8014624 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	785b      	ldrb	r3, [r3, #1]
 8014592:	2b09      	cmp	r3, #9
 8014594:	d83b      	bhi.n	801460e <USBD_StdDevReq+0xc2>
 8014596:	a201      	add	r2, pc, #4	@ (adr r2, 801459c <USBD_StdDevReq+0x50>)
 8014598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801459c:	080145f1 	.word	0x080145f1
 80145a0:	08014605 	.word	0x08014605
 80145a4:	0801460f 	.word	0x0801460f
 80145a8:	080145fb 	.word	0x080145fb
 80145ac:	0801460f 	.word	0x0801460f
 80145b0:	080145cf 	.word	0x080145cf
 80145b4:	080145c5 	.word	0x080145c5
 80145b8:	0801460f 	.word	0x0801460f
 80145bc:	080145e7 	.word	0x080145e7
 80145c0:	080145d9 	.word	0x080145d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80145c4:	6839      	ldr	r1, [r7, #0]
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f000 fa3c 	bl	8014a44 <USBD_GetDescriptor>
          break;
 80145cc:	e024      	b.n	8014618 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80145ce:	6839      	ldr	r1, [r7, #0]
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f000 fbcb 	bl	8014d6c <USBD_SetAddress>
          break;
 80145d6:	e01f      	b.n	8014618 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80145d8:	6839      	ldr	r1, [r7, #0]
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f000 fc0a 	bl	8014df4 <USBD_SetConfig>
 80145e0:	4603      	mov	r3, r0
 80145e2:	73fb      	strb	r3, [r7, #15]
          break;
 80145e4:	e018      	b.n	8014618 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80145e6:	6839      	ldr	r1, [r7, #0]
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 fcad 	bl	8014f48 <USBD_GetConfig>
          break;
 80145ee:	e013      	b.n	8014618 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80145f0:	6839      	ldr	r1, [r7, #0]
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 fcde 	bl	8014fb4 <USBD_GetStatus>
          break;
 80145f8:	e00e      	b.n	8014618 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80145fa:	6839      	ldr	r1, [r7, #0]
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f000 fd0d 	bl	801501c <USBD_SetFeature>
          break;
 8014602:	e009      	b.n	8014618 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014604:	6839      	ldr	r1, [r7, #0]
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f000 fd31 	bl	801506e <USBD_ClrFeature>
          break;
 801460c:	e004      	b.n	8014618 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801460e:	6839      	ldr	r1, [r7, #0]
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f000 fd88 	bl	8015126 <USBD_CtlError>
          break;
 8014616:	bf00      	nop
      }
      break;
 8014618:	e004      	b.n	8014624 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f000 fd82 	bl	8015126 <USBD_CtlError>
      break;
 8014622:	bf00      	nop
  }

  return ret;
 8014624:	7bfb      	ldrb	r3, [r7, #15]
}
 8014626:	4618      	mov	r0, r3
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop

08014630 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801463a:	2300      	movs	r3, #0
 801463c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014646:	2b40      	cmp	r3, #64	@ 0x40
 8014648:	d005      	beq.n	8014656 <USBD_StdItfReq+0x26>
 801464a:	2b40      	cmp	r3, #64	@ 0x40
 801464c:	d852      	bhi.n	80146f4 <USBD_StdItfReq+0xc4>
 801464e:	2b00      	cmp	r3, #0
 8014650:	d001      	beq.n	8014656 <USBD_StdItfReq+0x26>
 8014652:	2b20      	cmp	r3, #32
 8014654:	d14e      	bne.n	80146f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801465c:	b2db      	uxtb	r3, r3
 801465e:	3b01      	subs	r3, #1
 8014660:	2b02      	cmp	r3, #2
 8014662:	d840      	bhi.n	80146e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	889b      	ldrh	r3, [r3, #4]
 8014668:	b2db      	uxtb	r3, r3
 801466a:	2b01      	cmp	r3, #1
 801466c:	d836      	bhi.n	80146dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	889b      	ldrh	r3, [r3, #4]
 8014672:	b2db      	uxtb	r3, r3
 8014674:	4619      	mov	r1, r3
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7ff fedb 	bl	8014432 <USBD_CoreFindIF>
 801467c:	4603      	mov	r3, r0
 801467e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014680:	7bbb      	ldrb	r3, [r7, #14]
 8014682:	2bff      	cmp	r3, #255	@ 0xff
 8014684:	d01d      	beq.n	80146c2 <USBD_StdItfReq+0x92>
 8014686:	7bbb      	ldrb	r3, [r7, #14]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d11a      	bne.n	80146c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801468c:	7bba      	ldrb	r2, [r7, #14]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	32ae      	adds	r2, #174	@ 0xae
 8014692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014696:	689b      	ldr	r3, [r3, #8]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d00f      	beq.n	80146bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801469c:	7bba      	ldrb	r2, [r7, #14]
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80146a4:	7bba      	ldrb	r2, [r7, #14]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	32ae      	adds	r2, #174	@ 0xae
 80146aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146ae:	689b      	ldr	r3, [r3, #8]
 80146b0:	6839      	ldr	r1, [r7, #0]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	4798      	blx	r3
 80146b6:	4603      	mov	r3, r0
 80146b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80146ba:	e004      	b.n	80146c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80146bc:	2303      	movs	r3, #3
 80146be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80146c0:	e001      	b.n	80146c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80146c2:	2303      	movs	r3, #3
 80146c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	88db      	ldrh	r3, [r3, #6]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d110      	bne.n	80146f0 <USBD_StdItfReq+0xc0>
 80146ce:	7bfb      	ldrb	r3, [r7, #15]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d10d      	bne.n	80146f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f000 fdfd 	bl	80152d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80146da:	e009      	b.n	80146f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80146dc:	6839      	ldr	r1, [r7, #0]
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f000 fd21 	bl	8015126 <USBD_CtlError>
          break;
 80146e4:	e004      	b.n	80146f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80146e6:	6839      	ldr	r1, [r7, #0]
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 fd1c 	bl	8015126 <USBD_CtlError>
          break;
 80146ee:	e000      	b.n	80146f2 <USBD_StdItfReq+0xc2>
          break;
 80146f0:	bf00      	nop
      }
      break;
 80146f2:	e004      	b.n	80146fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80146f4:	6839      	ldr	r1, [r7, #0]
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f000 fd15 	bl	8015126 <USBD_CtlError>
      break;
 80146fc:	bf00      	nop
  }

  return ret;
 80146fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014700:	4618      	mov	r0, r3
 8014702:	3710      	adds	r7, #16
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b084      	sub	sp, #16
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014712:	2300      	movs	r3, #0
 8014714:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	889b      	ldrh	r3, [r3, #4]
 801471a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014724:	2b40      	cmp	r3, #64	@ 0x40
 8014726:	d007      	beq.n	8014738 <USBD_StdEPReq+0x30>
 8014728:	2b40      	cmp	r3, #64	@ 0x40
 801472a:	f200 817f 	bhi.w	8014a2c <USBD_StdEPReq+0x324>
 801472e:	2b00      	cmp	r3, #0
 8014730:	d02a      	beq.n	8014788 <USBD_StdEPReq+0x80>
 8014732:	2b20      	cmp	r3, #32
 8014734:	f040 817a 	bne.w	8014a2c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014738:	7bbb      	ldrb	r3, [r7, #14]
 801473a:	4619      	mov	r1, r3
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f7ff fe85 	bl	801444c <USBD_CoreFindEP>
 8014742:	4603      	mov	r3, r0
 8014744:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014746:	7b7b      	ldrb	r3, [r7, #13]
 8014748:	2bff      	cmp	r3, #255	@ 0xff
 801474a:	f000 8174 	beq.w	8014a36 <USBD_StdEPReq+0x32e>
 801474e:	7b7b      	ldrb	r3, [r7, #13]
 8014750:	2b00      	cmp	r3, #0
 8014752:	f040 8170 	bne.w	8014a36 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014756:	7b7a      	ldrb	r2, [r7, #13]
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801475e:	7b7a      	ldrb	r2, [r7, #13]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	32ae      	adds	r2, #174	@ 0xae
 8014764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014768:	689b      	ldr	r3, [r3, #8]
 801476a:	2b00      	cmp	r3, #0
 801476c:	f000 8163 	beq.w	8014a36 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014770:	7b7a      	ldrb	r2, [r7, #13]
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	32ae      	adds	r2, #174	@ 0xae
 8014776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801477a:	689b      	ldr	r3, [r3, #8]
 801477c:	6839      	ldr	r1, [r7, #0]
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	4798      	blx	r3
 8014782:	4603      	mov	r3, r0
 8014784:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014786:	e156      	b.n	8014a36 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	785b      	ldrb	r3, [r3, #1]
 801478c:	2b03      	cmp	r3, #3
 801478e:	d008      	beq.n	80147a2 <USBD_StdEPReq+0x9a>
 8014790:	2b03      	cmp	r3, #3
 8014792:	f300 8145 	bgt.w	8014a20 <USBD_StdEPReq+0x318>
 8014796:	2b00      	cmp	r3, #0
 8014798:	f000 809b 	beq.w	80148d2 <USBD_StdEPReq+0x1ca>
 801479c:	2b01      	cmp	r3, #1
 801479e:	d03c      	beq.n	801481a <USBD_StdEPReq+0x112>
 80147a0:	e13e      	b.n	8014a20 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147a8:	b2db      	uxtb	r3, r3
 80147aa:	2b02      	cmp	r3, #2
 80147ac:	d002      	beq.n	80147b4 <USBD_StdEPReq+0xac>
 80147ae:	2b03      	cmp	r3, #3
 80147b0:	d016      	beq.n	80147e0 <USBD_StdEPReq+0xd8>
 80147b2:	e02c      	b.n	801480e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147b4:	7bbb      	ldrb	r3, [r7, #14]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d00d      	beq.n	80147d6 <USBD_StdEPReq+0xce>
 80147ba:	7bbb      	ldrb	r3, [r7, #14]
 80147bc:	2b80      	cmp	r3, #128	@ 0x80
 80147be:	d00a      	beq.n	80147d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80147c0:	7bbb      	ldrb	r3, [r7, #14]
 80147c2:	4619      	mov	r1, r3
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f001 f9d9 	bl	8015b7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80147ca:	2180      	movs	r1, #128	@ 0x80
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f001 f9d5 	bl	8015b7c <USBD_LL_StallEP>
 80147d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80147d4:	e020      	b.n	8014818 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80147d6:	6839      	ldr	r1, [r7, #0]
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f000 fca4 	bl	8015126 <USBD_CtlError>
              break;
 80147de:	e01b      	b.n	8014818 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	885b      	ldrh	r3, [r3, #2]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d10e      	bne.n	8014806 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80147e8:	7bbb      	ldrb	r3, [r7, #14]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d00b      	beq.n	8014806 <USBD_StdEPReq+0xfe>
 80147ee:	7bbb      	ldrb	r3, [r7, #14]
 80147f0:	2b80      	cmp	r3, #128	@ 0x80
 80147f2:	d008      	beq.n	8014806 <USBD_StdEPReq+0xfe>
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	88db      	ldrh	r3, [r3, #6]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d104      	bne.n	8014806 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80147fc:	7bbb      	ldrb	r3, [r7, #14]
 80147fe:	4619      	mov	r1, r3
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f001 f9bb 	bl	8015b7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 fd64 	bl	80152d4 <USBD_CtlSendStatus>

              break;
 801480c:	e004      	b.n	8014818 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801480e:	6839      	ldr	r1, [r7, #0]
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f000 fc88 	bl	8015126 <USBD_CtlError>
              break;
 8014816:	bf00      	nop
          }
          break;
 8014818:	e107      	b.n	8014a2a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014820:	b2db      	uxtb	r3, r3
 8014822:	2b02      	cmp	r3, #2
 8014824:	d002      	beq.n	801482c <USBD_StdEPReq+0x124>
 8014826:	2b03      	cmp	r3, #3
 8014828:	d016      	beq.n	8014858 <USBD_StdEPReq+0x150>
 801482a:	e04b      	b.n	80148c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801482c:	7bbb      	ldrb	r3, [r7, #14]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00d      	beq.n	801484e <USBD_StdEPReq+0x146>
 8014832:	7bbb      	ldrb	r3, [r7, #14]
 8014834:	2b80      	cmp	r3, #128	@ 0x80
 8014836:	d00a      	beq.n	801484e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014838:	7bbb      	ldrb	r3, [r7, #14]
 801483a:	4619      	mov	r1, r3
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f001 f99d 	bl	8015b7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014842:	2180      	movs	r1, #128	@ 0x80
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f001 f999 	bl	8015b7c <USBD_LL_StallEP>
 801484a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801484c:	e040      	b.n	80148d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801484e:	6839      	ldr	r1, [r7, #0]
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 fc68 	bl	8015126 <USBD_CtlError>
              break;
 8014856:	e03b      	b.n	80148d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	885b      	ldrh	r3, [r3, #2]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d136      	bne.n	80148ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014860:	7bbb      	ldrb	r3, [r7, #14]
 8014862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014866:	2b00      	cmp	r3, #0
 8014868:	d004      	beq.n	8014874 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801486a:	7bbb      	ldrb	r3, [r7, #14]
 801486c:	4619      	mov	r1, r3
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f001 f9a3 	bl	8015bba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f000 fd2d 	bl	80152d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801487a:	7bbb      	ldrb	r3, [r7, #14]
 801487c:	4619      	mov	r1, r3
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f7ff fde4 	bl	801444c <USBD_CoreFindEP>
 8014884:	4603      	mov	r3, r0
 8014886:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014888:	7b7b      	ldrb	r3, [r7, #13]
 801488a:	2bff      	cmp	r3, #255	@ 0xff
 801488c:	d01f      	beq.n	80148ce <USBD_StdEPReq+0x1c6>
 801488e:	7b7b      	ldrb	r3, [r7, #13]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d11c      	bne.n	80148ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014894:	7b7a      	ldrb	r2, [r7, #13]
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801489c:	7b7a      	ldrb	r2, [r7, #13]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	32ae      	adds	r2, #174	@ 0xae
 80148a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148a6:	689b      	ldr	r3, [r3, #8]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d010      	beq.n	80148ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80148ac:	7b7a      	ldrb	r2, [r7, #13]
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	32ae      	adds	r2, #174	@ 0xae
 80148b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b6:	689b      	ldr	r3, [r3, #8]
 80148b8:	6839      	ldr	r1, [r7, #0]
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	4798      	blx	r3
 80148be:	4603      	mov	r3, r0
 80148c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80148c2:	e004      	b.n	80148ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80148c4:	6839      	ldr	r1, [r7, #0]
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 fc2d 	bl	8015126 <USBD_CtlError>
              break;
 80148cc:	e000      	b.n	80148d0 <USBD_StdEPReq+0x1c8>
              break;
 80148ce:	bf00      	nop
          }
          break;
 80148d0:	e0ab      	b.n	8014a2a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148d8:	b2db      	uxtb	r3, r3
 80148da:	2b02      	cmp	r3, #2
 80148dc:	d002      	beq.n	80148e4 <USBD_StdEPReq+0x1dc>
 80148de:	2b03      	cmp	r3, #3
 80148e0:	d032      	beq.n	8014948 <USBD_StdEPReq+0x240>
 80148e2:	e097      	b.n	8014a14 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80148e4:	7bbb      	ldrb	r3, [r7, #14]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d007      	beq.n	80148fa <USBD_StdEPReq+0x1f2>
 80148ea:	7bbb      	ldrb	r3, [r7, #14]
 80148ec:	2b80      	cmp	r3, #128	@ 0x80
 80148ee:	d004      	beq.n	80148fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80148f0:	6839      	ldr	r1, [r7, #0]
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f000 fc17 	bl	8015126 <USBD_CtlError>
                break;
 80148f8:	e091      	b.n	8014a1e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80148fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	da0b      	bge.n	801491a <USBD_StdEPReq+0x212>
 8014902:	7bbb      	ldrb	r3, [r7, #14]
 8014904:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014908:	4613      	mov	r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	4413      	add	r3, r2
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	3310      	adds	r3, #16
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	4413      	add	r3, r2
 8014916:	3304      	adds	r3, #4
 8014918:	e00b      	b.n	8014932 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801491a:	7bbb      	ldrb	r3, [r7, #14]
 801491c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014920:	4613      	mov	r3, r2
 8014922:	009b      	lsls	r3, r3, #2
 8014924:	4413      	add	r3, r2
 8014926:	009b      	lsls	r3, r3, #2
 8014928:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	4413      	add	r3, r2
 8014930:	3304      	adds	r3, #4
 8014932:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	2200      	movs	r2, #0
 8014938:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	2202      	movs	r2, #2
 801493e:	4619      	mov	r1, r3
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f000 fc6d 	bl	8015220 <USBD_CtlSendData>
              break;
 8014946:	e06a      	b.n	8014a1e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801494c:	2b00      	cmp	r3, #0
 801494e:	da11      	bge.n	8014974 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014950:	7bbb      	ldrb	r3, [r7, #14]
 8014952:	f003 020f 	and.w	r2, r3, #15
 8014956:	6879      	ldr	r1, [r7, #4]
 8014958:	4613      	mov	r3, r2
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	4413      	add	r3, r2
 801495e:	009b      	lsls	r3, r3, #2
 8014960:	440b      	add	r3, r1
 8014962:	3324      	adds	r3, #36	@ 0x24
 8014964:	881b      	ldrh	r3, [r3, #0]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d117      	bne.n	801499a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801496a:	6839      	ldr	r1, [r7, #0]
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f000 fbda 	bl	8015126 <USBD_CtlError>
                  break;
 8014972:	e054      	b.n	8014a1e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014974:	7bbb      	ldrb	r3, [r7, #14]
 8014976:	f003 020f 	and.w	r2, r3, #15
 801497a:	6879      	ldr	r1, [r7, #4]
 801497c:	4613      	mov	r3, r2
 801497e:	009b      	lsls	r3, r3, #2
 8014980:	4413      	add	r3, r2
 8014982:	009b      	lsls	r3, r3, #2
 8014984:	440b      	add	r3, r1
 8014986:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801498a:	881b      	ldrh	r3, [r3, #0]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d104      	bne.n	801499a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014990:	6839      	ldr	r1, [r7, #0]
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f000 fbc7 	bl	8015126 <USBD_CtlError>
                  break;
 8014998:	e041      	b.n	8014a1e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801499a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	da0b      	bge.n	80149ba <USBD_StdEPReq+0x2b2>
 80149a2:	7bbb      	ldrb	r3, [r7, #14]
 80149a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80149a8:	4613      	mov	r3, r2
 80149aa:	009b      	lsls	r3, r3, #2
 80149ac:	4413      	add	r3, r2
 80149ae:	009b      	lsls	r3, r3, #2
 80149b0:	3310      	adds	r3, #16
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	4413      	add	r3, r2
 80149b6:	3304      	adds	r3, #4
 80149b8:	e00b      	b.n	80149d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149ba:	7bbb      	ldrb	r3, [r7, #14]
 80149bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149c0:	4613      	mov	r3, r2
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	4413      	add	r3, r2
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	4413      	add	r3, r2
 80149d0:	3304      	adds	r3, #4
 80149d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80149d4:	7bbb      	ldrb	r3, [r7, #14]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d002      	beq.n	80149e0 <USBD_StdEPReq+0x2d8>
 80149da:	7bbb      	ldrb	r3, [r7, #14]
 80149dc:	2b80      	cmp	r3, #128	@ 0x80
 80149de:	d103      	bne.n	80149e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	2200      	movs	r2, #0
 80149e4:	601a      	str	r2, [r3, #0]
 80149e6:	e00e      	b.n	8014a06 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80149e8:	7bbb      	ldrb	r3, [r7, #14]
 80149ea:	4619      	mov	r1, r3
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f001 f903 	bl	8015bf8 <USBD_LL_IsStallEP>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d003      	beq.n	8014a00 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	2201      	movs	r2, #1
 80149fc:	601a      	str	r2, [r3, #0]
 80149fe:	e002      	b.n	8014a06 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	2200      	movs	r2, #0
 8014a04:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	2202      	movs	r2, #2
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f000 fc07 	bl	8015220 <USBD_CtlSendData>
              break;
 8014a12:	e004      	b.n	8014a1e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014a14:	6839      	ldr	r1, [r7, #0]
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f000 fb85 	bl	8015126 <USBD_CtlError>
              break;
 8014a1c:	bf00      	nop
          }
          break;
 8014a1e:	e004      	b.n	8014a2a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014a20:	6839      	ldr	r1, [r7, #0]
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f000 fb7f 	bl	8015126 <USBD_CtlError>
          break;
 8014a28:	bf00      	nop
      }
      break;
 8014a2a:	e005      	b.n	8014a38 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014a2c:	6839      	ldr	r1, [r7, #0]
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f000 fb79 	bl	8015126 <USBD_CtlError>
      break;
 8014a34:	e000      	b.n	8014a38 <USBD_StdEPReq+0x330>
      break;
 8014a36:	bf00      	nop
  }

  return ret;
 8014a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3710      	adds	r7, #16
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
	...

08014a44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b084      	sub	sp, #16
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014a52:	2300      	movs	r3, #0
 8014a54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014a56:	2300      	movs	r3, #0
 8014a58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	885b      	ldrh	r3, [r3, #2]
 8014a5e:	0a1b      	lsrs	r3, r3, #8
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	3b01      	subs	r3, #1
 8014a64:	2b0e      	cmp	r3, #14
 8014a66:	f200 8152 	bhi.w	8014d0e <USBD_GetDescriptor+0x2ca>
 8014a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8014a70 <USBD_GetDescriptor+0x2c>)
 8014a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a70:	08014ae1 	.word	0x08014ae1
 8014a74:	08014af9 	.word	0x08014af9
 8014a78:	08014b39 	.word	0x08014b39
 8014a7c:	08014d0f 	.word	0x08014d0f
 8014a80:	08014d0f 	.word	0x08014d0f
 8014a84:	08014caf 	.word	0x08014caf
 8014a88:	08014cdb 	.word	0x08014cdb
 8014a8c:	08014d0f 	.word	0x08014d0f
 8014a90:	08014d0f 	.word	0x08014d0f
 8014a94:	08014d0f 	.word	0x08014d0f
 8014a98:	08014d0f 	.word	0x08014d0f
 8014a9c:	08014d0f 	.word	0x08014d0f
 8014aa0:	08014d0f 	.word	0x08014d0f
 8014aa4:	08014d0f 	.word	0x08014d0f
 8014aa8:	08014aad 	.word	0x08014aad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ab2:	69db      	ldr	r3, [r3, #28]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d00b      	beq.n	8014ad0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014abe:	69db      	ldr	r3, [r3, #28]
 8014ac0:	687a      	ldr	r2, [r7, #4]
 8014ac2:	7c12      	ldrb	r2, [r2, #16]
 8014ac4:	f107 0108 	add.w	r1, r7, #8
 8014ac8:	4610      	mov	r0, r2
 8014aca:	4798      	blx	r3
 8014acc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ace:	e126      	b.n	8014d1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014ad0:	6839      	ldr	r1, [r7, #0]
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f000 fb27 	bl	8015126 <USBD_CtlError>
        err++;
 8014ad8:	7afb      	ldrb	r3, [r7, #11]
 8014ada:	3301      	adds	r3, #1
 8014adc:	72fb      	strb	r3, [r7, #11]
      break;
 8014ade:	e11e      	b.n	8014d1e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	7c12      	ldrb	r2, [r2, #16]
 8014aec:	f107 0108 	add.w	r1, r7, #8
 8014af0:	4610      	mov	r0, r2
 8014af2:	4798      	blx	r3
 8014af4:	60f8      	str	r0, [r7, #12]
      break;
 8014af6:	e112      	b.n	8014d1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	7c1b      	ldrb	r3, [r3, #16]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d10d      	bne.n	8014b1c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b08:	f107 0208 	add.w	r2, r7, #8
 8014b0c:	4610      	mov	r0, r2
 8014b0e:	4798      	blx	r3
 8014b10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	3301      	adds	r3, #1
 8014b16:	2202      	movs	r2, #2
 8014b18:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014b1a:	e100      	b.n	8014d1e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b24:	f107 0208 	add.w	r2, r7, #8
 8014b28:	4610      	mov	r0, r2
 8014b2a:	4798      	blx	r3
 8014b2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	3301      	adds	r3, #1
 8014b32:	2202      	movs	r2, #2
 8014b34:	701a      	strb	r2, [r3, #0]
      break;
 8014b36:	e0f2      	b.n	8014d1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	885b      	ldrh	r3, [r3, #2]
 8014b3c:	b2db      	uxtb	r3, r3
 8014b3e:	2b05      	cmp	r3, #5
 8014b40:	f200 80ac 	bhi.w	8014c9c <USBD_GetDescriptor+0x258>
 8014b44:	a201      	add	r2, pc, #4	@ (adr r2, 8014b4c <USBD_GetDescriptor+0x108>)
 8014b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b4a:	bf00      	nop
 8014b4c:	08014b65 	.word	0x08014b65
 8014b50:	08014b99 	.word	0x08014b99
 8014b54:	08014bcd 	.word	0x08014bcd
 8014b58:	08014c01 	.word	0x08014c01
 8014b5c:	08014c35 	.word	0x08014c35
 8014b60:	08014c69 	.word	0x08014c69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b6a:	685b      	ldr	r3, [r3, #4]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d00b      	beq.n	8014b88 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	7c12      	ldrb	r2, [r2, #16]
 8014b7c:	f107 0108 	add.w	r1, r7, #8
 8014b80:	4610      	mov	r0, r2
 8014b82:	4798      	blx	r3
 8014b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b86:	e091      	b.n	8014cac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014b88:	6839      	ldr	r1, [r7, #0]
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 facb 	bl	8015126 <USBD_CtlError>
            err++;
 8014b90:	7afb      	ldrb	r3, [r7, #11]
 8014b92:	3301      	adds	r3, #1
 8014b94:	72fb      	strb	r3, [r7, #11]
          break;
 8014b96:	e089      	b.n	8014cac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014b9e:	689b      	ldr	r3, [r3, #8]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d00b      	beq.n	8014bbc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014baa:	689b      	ldr	r3, [r3, #8]
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	7c12      	ldrb	r2, [r2, #16]
 8014bb0:	f107 0108 	add.w	r1, r7, #8
 8014bb4:	4610      	mov	r0, r2
 8014bb6:	4798      	blx	r3
 8014bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bba:	e077      	b.n	8014cac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014bbc:	6839      	ldr	r1, [r7, #0]
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f000 fab1 	bl	8015126 <USBD_CtlError>
            err++;
 8014bc4:	7afb      	ldrb	r3, [r7, #11]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8014bca:	e06f      	b.n	8014cac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d00b      	beq.n	8014bf0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	687a      	ldr	r2, [r7, #4]
 8014be2:	7c12      	ldrb	r2, [r2, #16]
 8014be4:	f107 0108 	add.w	r1, r7, #8
 8014be8:	4610      	mov	r0, r2
 8014bea:	4798      	blx	r3
 8014bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bee:	e05d      	b.n	8014cac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014bf0:	6839      	ldr	r1, [r7, #0]
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f000 fa97 	bl	8015126 <USBD_CtlError>
            err++;
 8014bf8:	7afb      	ldrb	r3, [r7, #11]
 8014bfa:	3301      	adds	r3, #1
 8014bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8014bfe:	e055      	b.n	8014cac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c06:	691b      	ldr	r3, [r3, #16]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d00b      	beq.n	8014c24 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c12:	691b      	ldr	r3, [r3, #16]
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	7c12      	ldrb	r2, [r2, #16]
 8014c18:	f107 0108 	add.w	r1, r7, #8
 8014c1c:	4610      	mov	r0, r2
 8014c1e:	4798      	blx	r3
 8014c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c22:	e043      	b.n	8014cac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c24:	6839      	ldr	r1, [r7, #0]
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f000 fa7d 	bl	8015126 <USBD_CtlError>
            err++;
 8014c2c:	7afb      	ldrb	r3, [r7, #11]
 8014c2e:	3301      	adds	r3, #1
 8014c30:	72fb      	strb	r3, [r7, #11]
          break;
 8014c32:	e03b      	b.n	8014cac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c3a:	695b      	ldr	r3, [r3, #20]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d00b      	beq.n	8014c58 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c46:	695b      	ldr	r3, [r3, #20]
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	7c12      	ldrb	r2, [r2, #16]
 8014c4c:	f107 0108 	add.w	r1, r7, #8
 8014c50:	4610      	mov	r0, r2
 8014c52:	4798      	blx	r3
 8014c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c56:	e029      	b.n	8014cac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c58:	6839      	ldr	r1, [r7, #0]
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f000 fa63 	bl	8015126 <USBD_CtlError>
            err++;
 8014c60:	7afb      	ldrb	r3, [r7, #11]
 8014c62:	3301      	adds	r3, #1
 8014c64:	72fb      	strb	r3, [r7, #11]
          break;
 8014c66:	e021      	b.n	8014cac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c6e:	699b      	ldr	r3, [r3, #24]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00b      	beq.n	8014c8c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014c7a:	699b      	ldr	r3, [r3, #24]
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	7c12      	ldrb	r2, [r2, #16]
 8014c80:	f107 0108 	add.w	r1, r7, #8
 8014c84:	4610      	mov	r0, r2
 8014c86:	4798      	blx	r3
 8014c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c8a:	e00f      	b.n	8014cac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f000 fa49 	bl	8015126 <USBD_CtlError>
            err++;
 8014c94:	7afb      	ldrb	r3, [r7, #11]
 8014c96:	3301      	adds	r3, #1
 8014c98:	72fb      	strb	r3, [r7, #11]
          break;
 8014c9a:	e007      	b.n	8014cac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014c9c:	6839      	ldr	r1, [r7, #0]
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f000 fa41 	bl	8015126 <USBD_CtlError>
          err++;
 8014ca4:	7afb      	ldrb	r3, [r7, #11]
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014caa:	bf00      	nop
      }
      break;
 8014cac:	e037      	b.n	8014d1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	7c1b      	ldrb	r3, [r3, #16]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d109      	bne.n	8014cca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014cbe:	f107 0208 	add.w	r2, r7, #8
 8014cc2:	4610      	mov	r0, r2
 8014cc4:	4798      	blx	r3
 8014cc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014cc8:	e029      	b.n	8014d1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014cca:	6839      	ldr	r1, [r7, #0]
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f000 fa2a 	bl	8015126 <USBD_CtlError>
        err++;
 8014cd2:	7afb      	ldrb	r3, [r7, #11]
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8014cd8:	e021      	b.n	8014d1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	7c1b      	ldrb	r3, [r3, #16]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d10d      	bne.n	8014cfe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014cea:	f107 0208 	add.w	r2, r7, #8
 8014cee:	4610      	mov	r0, r2
 8014cf0:	4798      	blx	r3
 8014cf2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	3301      	adds	r3, #1
 8014cf8:	2207      	movs	r2, #7
 8014cfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014cfc:	e00f      	b.n	8014d1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014cfe:	6839      	ldr	r1, [r7, #0]
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f000 fa10 	bl	8015126 <USBD_CtlError>
        err++;
 8014d06:	7afb      	ldrb	r3, [r7, #11]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8014d0c:	e007      	b.n	8014d1e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014d0e:	6839      	ldr	r1, [r7, #0]
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f000 fa08 	bl	8015126 <USBD_CtlError>
      err++;
 8014d16:	7afb      	ldrb	r3, [r7, #11]
 8014d18:	3301      	adds	r3, #1
 8014d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8014d1c:	bf00      	nop
  }

  if (err != 0U)
 8014d1e:	7afb      	ldrb	r3, [r7, #11]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d11e      	bne.n	8014d62 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	88db      	ldrh	r3, [r3, #6]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d016      	beq.n	8014d5a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014d2c:	893b      	ldrh	r3, [r7, #8]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d00e      	beq.n	8014d50 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	88da      	ldrh	r2, [r3, #6]
 8014d36:	893b      	ldrh	r3, [r7, #8]
 8014d38:	4293      	cmp	r3, r2
 8014d3a:	bf28      	it	cs
 8014d3c:	4613      	movcs	r3, r2
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014d42:	893b      	ldrh	r3, [r7, #8]
 8014d44:	461a      	mov	r2, r3
 8014d46:	68f9      	ldr	r1, [r7, #12]
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f000 fa69 	bl	8015220 <USBD_CtlSendData>
 8014d4e:	e009      	b.n	8014d64 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014d50:	6839      	ldr	r1, [r7, #0]
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f000 f9e7 	bl	8015126 <USBD_CtlError>
 8014d58:	e004      	b.n	8014d64 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f000 faba 	bl	80152d4 <USBD_CtlSendStatus>
 8014d60:	e000      	b.n	8014d64 <USBD_GetDescriptor+0x320>
    return;
 8014d62:	bf00      	nop
  }
}
 8014d64:	3710      	adds	r7, #16
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}
 8014d6a:	bf00      	nop

08014d6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	889b      	ldrh	r3, [r3, #4]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d131      	bne.n	8014de2 <USBD_SetAddress+0x76>
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	88db      	ldrh	r3, [r3, #6]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d12d      	bne.n	8014de2 <USBD_SetAddress+0x76>
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	885b      	ldrh	r3, [r3, #2]
 8014d8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d8c:	d829      	bhi.n	8014de2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	885b      	ldrh	r3, [r3, #2]
 8014d92:	b2db      	uxtb	r3, r3
 8014d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014d98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014da0:	b2db      	uxtb	r3, r3
 8014da2:	2b03      	cmp	r3, #3
 8014da4:	d104      	bne.n	8014db0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014da6:	6839      	ldr	r1, [r7, #0]
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f000 f9bc 	bl	8015126 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dae:	e01d      	b.n	8014dec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	7bfa      	ldrb	r2, [r7, #15]
 8014db4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014db8:	7bfb      	ldrb	r3, [r7, #15]
 8014dba:	4619      	mov	r1, r3
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f000 ff47 	bl	8015c50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f000 fa86 	bl	80152d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014dc8:	7bfb      	ldrb	r3, [r7, #15]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d004      	beq.n	8014dd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2202      	movs	r2, #2
 8014dd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dd6:	e009      	b.n	8014dec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2201      	movs	r2, #1
 8014ddc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014de0:	e004      	b.n	8014dec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014de2:	6839      	ldr	r1, [r7, #0]
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f000 f99e 	bl	8015126 <USBD_CtlError>
  }
}
 8014dea:	bf00      	nop
 8014dec:	bf00      	nop
 8014dee:	3710      	adds	r7, #16
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	885b      	ldrh	r3, [r3, #2]
 8014e06:	b2da      	uxtb	r2, r3
 8014e08:	4b4e      	ldr	r3, [pc, #312]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014e0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	2b01      	cmp	r3, #1
 8014e12:	d905      	bls.n	8014e20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014e14:	6839      	ldr	r1, [r7, #0]
 8014e16:	6878      	ldr	r0, [r7, #4]
 8014e18:	f000 f985 	bl	8015126 <USBD_CtlError>
    return USBD_FAIL;
 8014e1c:	2303      	movs	r3, #3
 8014e1e:	e08c      	b.n	8014f3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	2b02      	cmp	r3, #2
 8014e2a:	d002      	beq.n	8014e32 <USBD_SetConfig+0x3e>
 8014e2c:	2b03      	cmp	r3, #3
 8014e2e:	d029      	beq.n	8014e84 <USBD_SetConfig+0x90>
 8014e30:	e075      	b.n	8014f1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014e32:	4b44      	ldr	r3, [pc, #272]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d020      	beq.n	8014e7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014e3a:	4b42      	ldr	r3, [pc, #264]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	461a      	mov	r2, r3
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014e44:	4b3f      	ldr	r3, [pc, #252]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014e46:	781b      	ldrb	r3, [r3, #0]
 8014e48:	4619      	mov	r1, r3
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f7fe ffb9 	bl	8013dc2 <USBD_SetClassConfig>
 8014e50:	4603      	mov	r3, r0
 8014e52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014e54:	7bfb      	ldrb	r3, [r7, #15]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d008      	beq.n	8014e6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014e5a:	6839      	ldr	r1, [r7, #0]
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f000 f962 	bl	8015126 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2202      	movs	r2, #2
 8014e66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014e6a:	e065      	b.n	8014f38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f000 fa31 	bl	80152d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2203      	movs	r2, #3
 8014e76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014e7a:	e05d      	b.n	8014f38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f000 fa29 	bl	80152d4 <USBD_CtlSendStatus>
      break;
 8014e82:	e059      	b.n	8014f38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014e84:	4b2f      	ldr	r3, [pc, #188]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014e86:	781b      	ldrb	r3, [r3, #0]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d112      	bne.n	8014eb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2202      	movs	r2, #2
 8014e90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014e94:	4b2b      	ldr	r3, [pc, #172]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	461a      	mov	r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014e9e:	4b29      	ldr	r3, [pc, #164]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	4619      	mov	r1, r3
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f7fe ffa8 	bl	8013dfa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 fa12 	bl	80152d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014eb0:	e042      	b.n	8014f38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014eb2:	4b24      	ldr	r3, [pc, #144]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	461a      	mov	r2, r3
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d02a      	beq.n	8014f16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f7fe ff96 	bl	8013dfa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014ece:	4b1d      	ldr	r3, [pc, #116]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	4619      	mov	r1, r3
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f7fe ff6f 	bl	8013dc2 <USBD_SetClassConfig>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014ee8:	7bfb      	ldrb	r3, [r7, #15]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d00f      	beq.n	8014f0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014eee:	6839      	ldr	r1, [r7, #0]
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f000 f918 	bl	8015126 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	685b      	ldr	r3, [r3, #4]
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	4619      	mov	r1, r3
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f7fe ff7b 	bl	8013dfa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2202      	movs	r2, #2
 8014f08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014f0c:	e014      	b.n	8014f38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 f9e0 	bl	80152d4 <USBD_CtlSendStatus>
      break;
 8014f14:	e010      	b.n	8014f38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f000 f9dc 	bl	80152d4 <USBD_CtlSendStatus>
      break;
 8014f1c:	e00c      	b.n	8014f38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014f1e:	6839      	ldr	r1, [r7, #0]
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f000 f900 	bl	8015126 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014f26:	4b07      	ldr	r3, [pc, #28]	@ (8014f44 <USBD_SetConfig+0x150>)
 8014f28:	781b      	ldrb	r3, [r3, #0]
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f7fe ff64 	bl	8013dfa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014f32:	2303      	movs	r3, #3
 8014f34:	73fb      	strb	r3, [r7, #15]
      break;
 8014f36:	bf00      	nop
  }

  return ret;
 8014f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3710      	adds	r7, #16
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	24000f50 	.word	0x24000f50

08014f48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	88db      	ldrh	r3, [r3, #6]
 8014f56:	2b01      	cmp	r3, #1
 8014f58:	d004      	beq.n	8014f64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014f5a:	6839      	ldr	r1, [r7, #0]
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f000 f8e2 	bl	8015126 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014f62:	e023      	b.n	8014fac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	2b02      	cmp	r3, #2
 8014f6e:	dc02      	bgt.n	8014f76 <USBD_GetConfig+0x2e>
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	dc03      	bgt.n	8014f7c <USBD_GetConfig+0x34>
 8014f74:	e015      	b.n	8014fa2 <USBD_GetConfig+0x5a>
 8014f76:	2b03      	cmp	r3, #3
 8014f78:	d00b      	beq.n	8014f92 <USBD_GetConfig+0x4a>
 8014f7a:	e012      	b.n	8014fa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	3308      	adds	r3, #8
 8014f86:	2201      	movs	r2, #1
 8014f88:	4619      	mov	r1, r3
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f000 f948 	bl	8015220 <USBD_CtlSendData>
        break;
 8014f90:	e00c      	b.n	8014fac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	3304      	adds	r3, #4
 8014f96:	2201      	movs	r2, #1
 8014f98:	4619      	mov	r1, r3
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f000 f940 	bl	8015220 <USBD_CtlSendData>
        break;
 8014fa0:	e004      	b.n	8014fac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014fa2:	6839      	ldr	r1, [r7, #0]
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f000 f8be 	bl	8015126 <USBD_CtlError>
        break;
 8014faa:	bf00      	nop
}
 8014fac:	bf00      	nop
 8014fae:	3708      	adds	r7, #8
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b082      	sub	sp, #8
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	3b01      	subs	r3, #1
 8014fc8:	2b02      	cmp	r3, #2
 8014fca:	d81e      	bhi.n	801500a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014fcc:	683b      	ldr	r3, [r7, #0]
 8014fce:	88db      	ldrh	r3, [r3, #6]
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d004      	beq.n	8014fde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014fd4:	6839      	ldr	r1, [r7, #0]
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f000 f8a5 	bl	8015126 <USBD_CtlError>
        break;
 8014fdc:	e01a      	b.n	8015014 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d005      	beq.n	8014ffa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	68db      	ldr	r3, [r3, #12]
 8014ff2:	f043 0202 	orr.w	r2, r3, #2
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	330c      	adds	r3, #12
 8014ffe:	2202      	movs	r2, #2
 8015000:	4619      	mov	r1, r3
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f000 f90c 	bl	8015220 <USBD_CtlSendData>
      break;
 8015008:	e004      	b.n	8015014 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801500a:	6839      	ldr	r1, [r7, #0]
 801500c:	6878      	ldr	r0, [r7, #4]
 801500e:	f000 f88a 	bl	8015126 <USBD_CtlError>
      break;
 8015012:	bf00      	nop
  }
}
 8015014:	bf00      	nop
 8015016:	3708      	adds	r7, #8
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}

0801501c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	885b      	ldrh	r3, [r3, #2]
 801502a:	2b01      	cmp	r3, #1
 801502c:	d107      	bne.n	801503e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2201      	movs	r2, #1
 8015032:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015036:	6878      	ldr	r0, [r7, #4]
 8015038:	f000 f94c 	bl	80152d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801503c:	e013      	b.n	8015066 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	885b      	ldrh	r3, [r3, #2]
 8015042:	2b02      	cmp	r3, #2
 8015044:	d10b      	bne.n	801505e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	889b      	ldrh	r3, [r3, #4]
 801504a:	0a1b      	lsrs	r3, r3, #8
 801504c:	b29b      	uxth	r3, r3
 801504e:	b2da      	uxtb	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f000 f93c 	bl	80152d4 <USBD_CtlSendStatus>
}
 801505c:	e003      	b.n	8015066 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801505e:	6839      	ldr	r1, [r7, #0]
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f000 f860 	bl	8015126 <USBD_CtlError>
}
 8015066:	bf00      	nop
 8015068:	3708      	adds	r7, #8
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}

0801506e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801506e:	b580      	push	{r7, lr}
 8015070:	b082      	sub	sp, #8
 8015072:	af00      	add	r7, sp, #0
 8015074:	6078      	str	r0, [r7, #4]
 8015076:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801507e:	b2db      	uxtb	r3, r3
 8015080:	3b01      	subs	r3, #1
 8015082:	2b02      	cmp	r3, #2
 8015084:	d80b      	bhi.n	801509e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	885b      	ldrh	r3, [r3, #2]
 801508a:	2b01      	cmp	r3, #1
 801508c:	d10c      	bne.n	80150a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2200      	movs	r2, #0
 8015092:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f000 f91c 	bl	80152d4 <USBD_CtlSendStatus>
      }
      break;
 801509c:	e004      	b.n	80150a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801509e:	6839      	ldr	r1, [r7, #0]
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f000 f840 	bl	8015126 <USBD_CtlError>
      break;
 80150a6:	e000      	b.n	80150aa <USBD_ClrFeature+0x3c>
      break;
 80150a8:	bf00      	nop
  }
}
 80150aa:	bf00      	nop
 80150ac:	3708      	adds	r7, #8
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b084      	sub	sp, #16
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
 80150ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	781a      	ldrb	r2, [r3, #0]
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	3301      	adds	r3, #1
 80150cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	781a      	ldrb	r2, [r3, #0]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	3301      	adds	r3, #1
 80150da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	f7ff fa16 	bl	801450e <SWAPBYTE>
 80150e2:	4603      	mov	r3, r0
 80150e4:	461a      	mov	r2, r3
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	3301      	adds	r3, #1
 80150ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	3301      	adds	r3, #1
 80150f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80150f6:	68f8      	ldr	r0, [r7, #12]
 80150f8:	f7ff fa09 	bl	801450e <SWAPBYTE>
 80150fc:	4603      	mov	r3, r0
 80150fe:	461a      	mov	r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	3301      	adds	r3, #1
 8015108:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	3301      	adds	r3, #1
 801510e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015110:	68f8      	ldr	r0, [r7, #12]
 8015112:	f7ff f9fc 	bl	801450e <SWAPBYTE>
 8015116:	4603      	mov	r3, r0
 8015118:	461a      	mov	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	80da      	strh	r2, [r3, #6]
}
 801511e:	bf00      	nop
 8015120:	3710      	adds	r7, #16
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}

08015126 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b082      	sub	sp, #8
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
 801512e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015130:	2180      	movs	r1, #128	@ 0x80
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f000 fd22 	bl	8015b7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015138:	2100      	movs	r1, #0
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f000 fd1e 	bl	8015b7c <USBD_LL_StallEP>
}
 8015140:	bf00      	nop
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b086      	sub	sp, #24
 801514c:	af00      	add	r7, sp, #0
 801514e:	60f8      	str	r0, [r7, #12]
 8015150:	60b9      	str	r1, [r7, #8]
 8015152:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015154:	2300      	movs	r3, #0
 8015156:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d042      	beq.n	80151e4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8015162:	6938      	ldr	r0, [r7, #16]
 8015164:	f000 f842 	bl	80151ec <USBD_GetLen>
 8015168:	4603      	mov	r3, r0
 801516a:	3301      	adds	r3, #1
 801516c:	005b      	lsls	r3, r3, #1
 801516e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015172:	d808      	bhi.n	8015186 <USBD_GetString+0x3e>
 8015174:	6938      	ldr	r0, [r7, #16]
 8015176:	f000 f839 	bl	80151ec <USBD_GetLen>
 801517a:	4603      	mov	r3, r0
 801517c:	3301      	adds	r3, #1
 801517e:	b29b      	uxth	r3, r3
 8015180:	005b      	lsls	r3, r3, #1
 8015182:	b29a      	uxth	r2, r3
 8015184:	e001      	b.n	801518a <USBD_GetString+0x42>
 8015186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801518e:	7dfb      	ldrb	r3, [r7, #23]
 8015190:	68ba      	ldr	r2, [r7, #8]
 8015192:	4413      	add	r3, r2
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	7812      	ldrb	r2, [r2, #0]
 8015198:	701a      	strb	r2, [r3, #0]
  idx++;
 801519a:	7dfb      	ldrb	r3, [r7, #23]
 801519c:	3301      	adds	r3, #1
 801519e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80151a0:	7dfb      	ldrb	r3, [r7, #23]
 80151a2:	68ba      	ldr	r2, [r7, #8]
 80151a4:	4413      	add	r3, r2
 80151a6:	2203      	movs	r2, #3
 80151a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80151aa:	7dfb      	ldrb	r3, [r7, #23]
 80151ac:	3301      	adds	r3, #1
 80151ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80151b0:	e013      	b.n	80151da <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80151b2:	7dfb      	ldrb	r3, [r7, #23]
 80151b4:	68ba      	ldr	r2, [r7, #8]
 80151b6:	4413      	add	r3, r2
 80151b8:	693a      	ldr	r2, [r7, #16]
 80151ba:	7812      	ldrb	r2, [r2, #0]
 80151bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	3301      	adds	r3, #1
 80151c2:	613b      	str	r3, [r7, #16]
    idx++;
 80151c4:	7dfb      	ldrb	r3, [r7, #23]
 80151c6:	3301      	adds	r3, #1
 80151c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80151ca:	7dfb      	ldrb	r3, [r7, #23]
 80151cc:	68ba      	ldr	r2, [r7, #8]
 80151ce:	4413      	add	r3, r2
 80151d0:	2200      	movs	r2, #0
 80151d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80151d4:	7dfb      	ldrb	r3, [r7, #23]
 80151d6:	3301      	adds	r3, #1
 80151d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	781b      	ldrb	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1e7      	bne.n	80151b2 <USBD_GetString+0x6a>
 80151e2:	e000      	b.n	80151e6 <USBD_GetString+0x9e>
    return;
 80151e4:	bf00      	nop
  }
}
 80151e6:	3718      	adds	r7, #24
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}

080151ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80151ec:	b480      	push	{r7}
 80151ee:	b085      	sub	sp, #20
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80151f4:	2300      	movs	r3, #0
 80151f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80151fc:	e005      	b.n	801520a <USBD_GetLen+0x1e>
  {
    len++;
 80151fe:	7bfb      	ldrb	r3, [r7, #15]
 8015200:	3301      	adds	r3, #1
 8015202:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	3301      	adds	r3, #1
 8015208:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d1f5      	bne.n	80151fe <USBD_GetLen+0x12>
  }

  return len;
 8015212:	7bfb      	ldrb	r3, [r7, #15]
}
 8015214:	4618      	mov	r0, r3
 8015216:	3714      	adds	r7, #20
 8015218:	46bd      	mov	sp, r7
 801521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521e:	4770      	bx	lr

08015220 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b084      	sub	sp, #16
 8015224:	af00      	add	r7, sp, #0
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	60b9      	str	r1, [r7, #8]
 801522a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	2202      	movs	r2, #2
 8015230:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	687a      	ldr	r2, [r7, #4]
 8015238:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	687a      	ldr	r2, [r7, #4]
 801523e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	68ba      	ldr	r2, [r7, #8]
 8015244:	2100      	movs	r1, #0
 8015246:	68f8      	ldr	r0, [r7, #12]
 8015248:	f000 fd21 	bl	8015c8e <USBD_LL_Transmit>

  return USBD_OK;
 801524c:	2300      	movs	r3, #0
}
 801524e:	4618      	mov	r0, r3
 8015250:	3710      	adds	r7, #16
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}

08015256 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015256:	b580      	push	{r7, lr}
 8015258:	b084      	sub	sp, #16
 801525a:	af00      	add	r7, sp, #0
 801525c:	60f8      	str	r0, [r7, #12]
 801525e:	60b9      	str	r1, [r7, #8]
 8015260:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	68ba      	ldr	r2, [r7, #8]
 8015266:	2100      	movs	r1, #0
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	f000 fd10 	bl	8015c8e <USBD_LL_Transmit>

  return USBD_OK;
 801526e:	2300      	movs	r3, #0
}
 8015270:	4618      	mov	r0, r3
 8015272:	3710      	adds	r7, #16
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}

08015278 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b084      	sub	sp, #16
 801527c:	af00      	add	r7, sp, #0
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	60b9      	str	r1, [r7, #8]
 8015282:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	2203      	movs	r2, #3
 8015288:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	68ba      	ldr	r2, [r7, #8]
 80152a0:	2100      	movs	r1, #0
 80152a2:	68f8      	ldr	r0, [r7, #12]
 80152a4:	f000 fd14 	bl	8015cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80152a8:	2300      	movs	r3, #0
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3710      	adds	r7, #16
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}

080152b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80152b2:	b580      	push	{r7, lr}
 80152b4:	b084      	sub	sp, #16
 80152b6:	af00      	add	r7, sp, #0
 80152b8:	60f8      	str	r0, [r7, #12]
 80152ba:	60b9      	str	r1, [r7, #8]
 80152bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	68ba      	ldr	r2, [r7, #8]
 80152c2:	2100      	movs	r1, #0
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	f000 fd03 	bl	8015cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80152ca:	2300      	movs	r3, #0
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3710      	adds	r7, #16
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}

080152d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2204      	movs	r2, #4
 80152e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80152e4:	2300      	movs	r3, #0
 80152e6:	2200      	movs	r2, #0
 80152e8:	2100      	movs	r1, #0
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	f000 fccf 	bl	8015c8e <USBD_LL_Transmit>

  return USBD_OK;
 80152f0:	2300      	movs	r3, #0
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3708      	adds	r7, #8
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}

080152fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80152fa:	b580      	push	{r7, lr}
 80152fc:	b082      	sub	sp, #8
 80152fe:	af00      	add	r7, sp, #0
 8015300:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2205      	movs	r2, #5
 8015306:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801530a:	2300      	movs	r3, #0
 801530c:	2200      	movs	r2, #0
 801530e:	2100      	movs	r1, #0
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f000 fcdd 	bl	8015cd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015316:	2300      	movs	r3, #0
}
 8015318:	4618      	mov	r0, r3
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015324:	2200      	movs	r2, #0
 8015326:	4918      	ldr	r1, [pc, #96]	@ (8015388 <MX_USB_DEVICE_Init+0x68>)
 8015328:	4818      	ldr	r0, [pc, #96]	@ (801538c <MX_USB_DEVICE_Init+0x6c>)
 801532a:	f7fe fccd 	bl	8013cc8 <USBD_Init>
 801532e:	4603      	mov	r3, r0
 8015330:	2b00      	cmp	r3, #0
 8015332:	d001      	beq.n	8015338 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015334:	f7eb fe60 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015338:	4915      	ldr	r1, [pc, #84]	@ (8015390 <MX_USB_DEVICE_Init+0x70>)
 801533a:	4814      	ldr	r0, [pc, #80]	@ (801538c <MX_USB_DEVICE_Init+0x6c>)
 801533c:	f7fe fcf4 	bl	8013d28 <USBD_RegisterClass>
 8015340:	4603      	mov	r3, r0
 8015342:	2b00      	cmp	r3, #0
 8015344:	d001      	beq.n	801534a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015346:	f7eb fe57 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801534a:	4912      	ldr	r1, [pc, #72]	@ (8015394 <MX_USB_DEVICE_Init+0x74>)
 801534c:	480f      	ldr	r0, [pc, #60]	@ (801538c <MX_USB_DEVICE_Init+0x6c>)
 801534e:	f7fe fbeb 	bl	8013b28 <USBD_CDC_RegisterInterface>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d001      	beq.n	801535c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015358:	f7eb fe4e 	bl	8000ff8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801535c:	480b      	ldr	r0, [pc, #44]	@ (801538c <MX_USB_DEVICE_Init+0x6c>)
 801535e:	f7fe fd19 	bl	8013d94 <USBD_Start>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d001      	beq.n	801536c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015368:	f7eb fe46 	bl	8000ff8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801536c:	f7f6 ffce 	bl	800c30c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8015370:	4b06      	ldr	r3, [pc, #24]	@ (801538c <MX_USB_DEVICE_Init+0x6c>)
 8015372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015376:	4a05      	ldr	r2, [pc, #20]	@ (801538c <MX_USB_DEVICE_Init+0x6c>)
 8015378:	33b0      	adds	r3, #176	@ 0xb0
 801537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801537e:	4a06      	ldr	r2, [pc, #24]	@ (8015398 <MX_USB_DEVICE_Init+0x78>)
 8015380:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015382:	bf00      	nop
 8015384:	bd80      	pop	{r7, pc}
 8015386:	bf00      	nop
 8015388:	240000b0 	.word	0x240000b0
 801538c:	24000f54 	.word	0x24000f54
 8015390:	2400001c 	.word	0x2400001c
 8015394:	2400009c 	.word	0x2400009c
 8015398:	24001230 	.word	0x24001230

0801539c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80153a0:	2200      	movs	r2, #0
 80153a2:	4905      	ldr	r1, [pc, #20]	@ (80153b8 <CDC_Init_FS+0x1c>)
 80153a4:	4805      	ldr	r0, [pc, #20]	@ (80153bc <CDC_Init_FS+0x20>)
 80153a6:	f7fe fbd9 	bl	8013b5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80153aa:	4905      	ldr	r1, [pc, #20]	@ (80153c0 <CDC_Init_FS+0x24>)
 80153ac:	4803      	ldr	r0, [pc, #12]	@ (80153bc <CDC_Init_FS+0x20>)
 80153ae:	f7fe fbf7 	bl	8013ba0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80153b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	bd80      	pop	{r7, pc}
 80153b8:	24001a34 	.word	0x24001a34
 80153bc:	24000f54 	.word	0x24000f54
 80153c0:	24001234 	.word	0x24001234

080153c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80153c4:	b480      	push	{r7}
 80153c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80153c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr

080153d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80153d4:	b480      	push	{r7}
 80153d6:	b083      	sub	sp, #12
 80153d8:	af00      	add	r7, sp, #0
 80153da:	4603      	mov	r3, r0
 80153dc:	6039      	str	r1, [r7, #0]
 80153de:	71fb      	strb	r3, [r7, #7]
 80153e0:	4613      	mov	r3, r2
 80153e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80153e4:	79fb      	ldrb	r3, [r7, #7]
 80153e6:	2b23      	cmp	r3, #35	@ 0x23
 80153e8:	d84a      	bhi.n	8015480 <CDC_Control_FS+0xac>
 80153ea:	a201      	add	r2, pc, #4	@ (adr r2, 80153f0 <CDC_Control_FS+0x1c>)
 80153ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153f0:	08015481 	.word	0x08015481
 80153f4:	08015481 	.word	0x08015481
 80153f8:	08015481 	.word	0x08015481
 80153fc:	08015481 	.word	0x08015481
 8015400:	08015481 	.word	0x08015481
 8015404:	08015481 	.word	0x08015481
 8015408:	08015481 	.word	0x08015481
 801540c:	08015481 	.word	0x08015481
 8015410:	08015481 	.word	0x08015481
 8015414:	08015481 	.word	0x08015481
 8015418:	08015481 	.word	0x08015481
 801541c:	08015481 	.word	0x08015481
 8015420:	08015481 	.word	0x08015481
 8015424:	08015481 	.word	0x08015481
 8015428:	08015481 	.word	0x08015481
 801542c:	08015481 	.word	0x08015481
 8015430:	08015481 	.word	0x08015481
 8015434:	08015481 	.word	0x08015481
 8015438:	08015481 	.word	0x08015481
 801543c:	08015481 	.word	0x08015481
 8015440:	08015481 	.word	0x08015481
 8015444:	08015481 	.word	0x08015481
 8015448:	08015481 	.word	0x08015481
 801544c:	08015481 	.word	0x08015481
 8015450:	08015481 	.word	0x08015481
 8015454:	08015481 	.word	0x08015481
 8015458:	08015481 	.word	0x08015481
 801545c:	08015481 	.word	0x08015481
 8015460:	08015481 	.word	0x08015481
 8015464:	08015481 	.word	0x08015481
 8015468:	08015481 	.word	0x08015481
 801546c:	08015481 	.word	0x08015481
 8015470:	08015481 	.word	0x08015481
 8015474:	08015481 	.word	0x08015481
 8015478:	08015481 	.word	0x08015481
 801547c:	08015481 	.word	0x08015481
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015480:	bf00      	nop
  }

  return (USBD_OK);
 8015482:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015484:	4618      	mov	r0, r3
 8015486:	370c      	adds	r7, #12
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr

08015490 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801549a:	6879      	ldr	r1, [r7, #4]
 801549c:	4806      	ldr	r0, [pc, #24]	@ (80154b8 <CDC_Receive_FS+0x28>)
 801549e:	f7fe fb7f 	bl	8013ba0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80154a2:	4805      	ldr	r0, [pc, #20]	@ (80154b8 <CDC_Receive_FS+0x28>)
 80154a4:	f7fe fbda 	bl	8013c5c <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 80154a8:	4b04      	ldr	r3, [pc, #16]	@ (80154bc <CDC_Receive_FS+0x2c>)
 80154aa:	2201      	movs	r2, #1
 80154ac:	701a      	strb	r2, [r3, #0]
	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 80154ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	3708      	adds	r7, #8
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	24000f54 	.word	0x24000f54
 80154bc:	24000f44 	.word	0x24000f44

080154c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	460b      	mov	r3, r1
 80154ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80154cc:	2300      	movs	r3, #0
 80154ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80154d0:	4b0d      	ldr	r3, [pc, #52]	@ (8015508 <CDC_Transmit_FS+0x48>)
 80154d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80154d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d001      	beq.n	80154e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80154e2:	2301      	movs	r3, #1
 80154e4:	e00b      	b.n	80154fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80154e6:	887b      	ldrh	r3, [r7, #2]
 80154e8:	461a      	mov	r2, r3
 80154ea:	6879      	ldr	r1, [r7, #4]
 80154ec:	4806      	ldr	r0, [pc, #24]	@ (8015508 <CDC_Transmit_FS+0x48>)
 80154ee:	f7fe fb35 	bl	8013b5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80154f2:	4805      	ldr	r0, [pc, #20]	@ (8015508 <CDC_Transmit_FS+0x48>)
 80154f4:	f7fe fb72 	bl	8013bdc <USBD_CDC_TransmitPacket>
 80154f8:	4603      	mov	r3, r0
 80154fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80154fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80154fe:	4618      	mov	r0, r3
 8015500:	3710      	adds	r7, #16
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
 8015506:	bf00      	nop
 8015508:	24000f54 	.word	0x24000f54

0801550c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801550c:	b480      	push	{r7}
 801550e:	b087      	sub	sp, #28
 8015510:	af00      	add	r7, sp, #0
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	4613      	mov	r3, r2
 8015518:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801551a:	2300      	movs	r3, #0
 801551c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801551e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015522:	4618      	mov	r0, r3
 8015524:	371c      	adds	r7, #28
 8015526:	46bd      	mov	sp, r7
 8015528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552c:	4770      	bx	lr
	...

08015530 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015530:	b480      	push	{r7}
 8015532:	b083      	sub	sp, #12
 8015534:	af00      	add	r7, sp, #0
 8015536:	4603      	mov	r3, r0
 8015538:	6039      	str	r1, [r7, #0]
 801553a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	2212      	movs	r2, #18
 8015540:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015542:	4b03      	ldr	r3, [pc, #12]	@ (8015550 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015544:	4618      	mov	r0, r3
 8015546:	370c      	adds	r7, #12
 8015548:	46bd      	mov	sp, r7
 801554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554e:	4770      	bx	lr
 8015550:	240000d0 	.word	0x240000d0

08015554 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015554:	b480      	push	{r7}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
 801555a:	4603      	mov	r3, r0
 801555c:	6039      	str	r1, [r7, #0]
 801555e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2204      	movs	r2, #4
 8015564:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015566:	4b03      	ldr	r3, [pc, #12]	@ (8015574 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015568:	4618      	mov	r0, r3
 801556a:	370c      	adds	r7, #12
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr
 8015574:	240000e4 	.word	0x240000e4

08015578 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	4603      	mov	r3, r0
 8015580:	6039      	str	r1, [r7, #0]
 8015582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015584:	79fb      	ldrb	r3, [r7, #7]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d105      	bne.n	8015596 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801558a:	683a      	ldr	r2, [r7, #0]
 801558c:	4907      	ldr	r1, [pc, #28]	@ (80155ac <USBD_FS_ProductStrDescriptor+0x34>)
 801558e:	4808      	ldr	r0, [pc, #32]	@ (80155b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8015590:	f7ff fdda 	bl	8015148 <USBD_GetString>
 8015594:	e004      	b.n	80155a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015596:	683a      	ldr	r2, [r7, #0]
 8015598:	4904      	ldr	r1, [pc, #16]	@ (80155ac <USBD_FS_ProductStrDescriptor+0x34>)
 801559a:	4805      	ldr	r0, [pc, #20]	@ (80155b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801559c:	f7ff fdd4 	bl	8015148 <USBD_GetString>
  }
  return USBD_StrDesc;
 80155a0:	4b02      	ldr	r3, [pc, #8]	@ (80155ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3708      	adds	r7, #8
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}
 80155aa:	bf00      	nop
 80155ac:	24002234 	.word	0x24002234
 80155b0:	08016780 	.word	0x08016780

080155b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	4603      	mov	r3, r0
 80155bc:	6039      	str	r1, [r7, #0]
 80155be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80155c0:	683a      	ldr	r2, [r7, #0]
 80155c2:	4904      	ldr	r1, [pc, #16]	@ (80155d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80155c4:	4804      	ldr	r0, [pc, #16]	@ (80155d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80155c6:	f7ff fdbf 	bl	8015148 <USBD_GetString>
  return USBD_StrDesc;
 80155ca:	4b02      	ldr	r3, [pc, #8]	@ (80155d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3708      	adds	r7, #8
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	24002234 	.word	0x24002234
 80155d8:	08016798 	.word	0x08016798

080155dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b082      	sub	sp, #8
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	4603      	mov	r3, r0
 80155e4:	6039      	str	r1, [r7, #0]
 80155e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	221a      	movs	r2, #26
 80155ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80155ee:	f000 f843 	bl	8015678 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80155f2:	4b02      	ldr	r3, [pc, #8]	@ (80155fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80155f4:	4618      	mov	r0, r3
 80155f6:	3708      	adds	r7, #8
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}
 80155fc:	240000e8 	.word	0x240000e8

08015600 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b082      	sub	sp, #8
 8015604:	af00      	add	r7, sp, #0
 8015606:	4603      	mov	r3, r0
 8015608:	6039      	str	r1, [r7, #0]
 801560a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801560c:	79fb      	ldrb	r3, [r7, #7]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d105      	bne.n	801561e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015612:	683a      	ldr	r2, [r7, #0]
 8015614:	4907      	ldr	r1, [pc, #28]	@ (8015634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015616:	4808      	ldr	r0, [pc, #32]	@ (8015638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015618:	f7ff fd96 	bl	8015148 <USBD_GetString>
 801561c:	e004      	b.n	8015628 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801561e:	683a      	ldr	r2, [r7, #0]
 8015620:	4904      	ldr	r1, [pc, #16]	@ (8015634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015622:	4805      	ldr	r0, [pc, #20]	@ (8015638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015624:	f7ff fd90 	bl	8015148 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015628:	4b02      	ldr	r3, [pc, #8]	@ (8015634 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801562a:	4618      	mov	r0, r3
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	24002234 	.word	0x24002234
 8015638:	080167ac 	.word	0x080167ac

0801563c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b082      	sub	sp, #8
 8015640:	af00      	add	r7, sp, #0
 8015642:	4603      	mov	r3, r0
 8015644:	6039      	str	r1, [r7, #0]
 8015646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015648:	79fb      	ldrb	r3, [r7, #7]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d105      	bne.n	801565a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801564e:	683a      	ldr	r2, [r7, #0]
 8015650:	4907      	ldr	r1, [pc, #28]	@ (8015670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015652:	4808      	ldr	r0, [pc, #32]	@ (8015674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015654:	f7ff fd78 	bl	8015148 <USBD_GetString>
 8015658:	e004      	b.n	8015664 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801565a:	683a      	ldr	r2, [r7, #0]
 801565c:	4904      	ldr	r1, [pc, #16]	@ (8015670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801565e:	4805      	ldr	r0, [pc, #20]	@ (8015674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015660:	f7ff fd72 	bl	8015148 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015664:	4b02      	ldr	r3, [pc, #8]	@ (8015670 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015666:	4618      	mov	r0, r3
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
 801566e:	bf00      	nop
 8015670:	24002234 	.word	0x24002234
 8015674:	080167b8 	.word	0x080167b8

08015678 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801567e:	4b0f      	ldr	r3, [pc, #60]	@ (80156bc <Get_SerialNum+0x44>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015684:	4b0e      	ldr	r3, [pc, #56]	@ (80156c0 <Get_SerialNum+0x48>)
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801568a:	4b0e      	ldr	r3, [pc, #56]	@ (80156c4 <Get_SerialNum+0x4c>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015690:	68fa      	ldr	r2, [r7, #12]
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	4413      	add	r3, r2
 8015696:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d009      	beq.n	80156b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801569e:	2208      	movs	r2, #8
 80156a0:	4909      	ldr	r1, [pc, #36]	@ (80156c8 <Get_SerialNum+0x50>)
 80156a2:	68f8      	ldr	r0, [r7, #12]
 80156a4:	f000 f814 	bl	80156d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80156a8:	2204      	movs	r2, #4
 80156aa:	4908      	ldr	r1, [pc, #32]	@ (80156cc <Get_SerialNum+0x54>)
 80156ac:	68b8      	ldr	r0, [r7, #8]
 80156ae:	f000 f80f 	bl	80156d0 <IntToUnicode>
  }
}
 80156b2:	bf00      	nop
 80156b4:	3710      	adds	r7, #16
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
 80156ba:	bf00      	nop
 80156bc:	1ff1e800 	.word	0x1ff1e800
 80156c0:	1ff1e804 	.word	0x1ff1e804
 80156c4:	1ff1e808 	.word	0x1ff1e808
 80156c8:	240000ea 	.word	0x240000ea
 80156cc:	240000fa 	.word	0x240000fa

080156d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b087      	sub	sp, #28
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	60f8      	str	r0, [r7, #12]
 80156d8:	60b9      	str	r1, [r7, #8]
 80156da:	4613      	mov	r3, r2
 80156dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80156de:	2300      	movs	r3, #0
 80156e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80156e2:	2300      	movs	r3, #0
 80156e4:	75fb      	strb	r3, [r7, #23]
 80156e6:	e027      	b.n	8015738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	0f1b      	lsrs	r3, r3, #28
 80156ec:	2b09      	cmp	r3, #9
 80156ee:	d80b      	bhi.n	8015708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	0f1b      	lsrs	r3, r3, #28
 80156f4:	b2da      	uxtb	r2, r3
 80156f6:	7dfb      	ldrb	r3, [r7, #23]
 80156f8:	005b      	lsls	r3, r3, #1
 80156fa:	4619      	mov	r1, r3
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	440b      	add	r3, r1
 8015700:	3230      	adds	r2, #48	@ 0x30
 8015702:	b2d2      	uxtb	r2, r2
 8015704:	701a      	strb	r2, [r3, #0]
 8015706:	e00a      	b.n	801571e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	0f1b      	lsrs	r3, r3, #28
 801570c:	b2da      	uxtb	r2, r3
 801570e:	7dfb      	ldrb	r3, [r7, #23]
 8015710:	005b      	lsls	r3, r3, #1
 8015712:	4619      	mov	r1, r3
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	440b      	add	r3, r1
 8015718:	3237      	adds	r2, #55	@ 0x37
 801571a:	b2d2      	uxtb	r2, r2
 801571c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	011b      	lsls	r3, r3, #4
 8015722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015724:	7dfb      	ldrb	r3, [r7, #23]
 8015726:	005b      	lsls	r3, r3, #1
 8015728:	3301      	adds	r3, #1
 801572a:	68ba      	ldr	r2, [r7, #8]
 801572c:	4413      	add	r3, r2
 801572e:	2200      	movs	r2, #0
 8015730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015732:	7dfb      	ldrb	r3, [r7, #23]
 8015734:	3301      	adds	r3, #1
 8015736:	75fb      	strb	r3, [r7, #23]
 8015738:	7dfa      	ldrb	r2, [r7, #23]
 801573a:	79fb      	ldrb	r3, [r7, #7]
 801573c:	429a      	cmp	r2, r3
 801573e:	d3d3      	bcc.n	80156e8 <IntToUnicode+0x18>
  }
}
 8015740:	bf00      	nop
 8015742:	bf00      	nop
 8015744:	371c      	adds	r7, #28
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr
	...

08015750 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b0ba      	sub	sp, #232	@ 0xe8
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015758:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801575c:	2200      	movs	r2, #0
 801575e:	601a      	str	r2, [r3, #0]
 8015760:	605a      	str	r2, [r3, #4]
 8015762:	609a      	str	r2, [r3, #8]
 8015764:	60da      	str	r2, [r3, #12]
 8015766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015768:	f107 0310 	add.w	r3, r7, #16
 801576c:	22c0      	movs	r2, #192	@ 0xc0
 801576e:	2100      	movs	r1, #0
 8015770:	4618      	mov	r0, r3
 8015772:	f000 fb47 	bl	8015e04 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	4a2c      	ldr	r2, [pc, #176]	@ (801582c <HAL_PCD_MspInit+0xdc>)
 801577c:	4293      	cmp	r3, r2
 801577e:	d151      	bne.n	8015824 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015780:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8015784:	f04f 0300 	mov.w	r3, #0
 8015788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801578c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8015790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015794:	f107 0310 	add.w	r3, r7, #16
 8015798:	4618      	mov	r0, r3
 801579a:	f7f7 fdad 	bl	800d2f8 <HAL_RCCEx_PeriphCLKConfig>
 801579e:	4603      	mov	r3, r0
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d001      	beq.n	80157a8 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80157a4:	f7eb fc28 	bl	8000ff8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80157a8:	f7f6 fdb0 	bl	800c30c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80157ac:	4b20      	ldr	r3, [pc, #128]	@ (8015830 <HAL_PCD_MspInit+0xe0>)
 80157ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80157b2:	4a1f      	ldr	r2, [pc, #124]	@ (8015830 <HAL_PCD_MspInit+0xe0>)
 80157b4:	f043 0301 	orr.w	r3, r3, #1
 80157b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80157bc:	4b1c      	ldr	r3, [pc, #112]	@ (8015830 <HAL_PCD_MspInit+0xe0>)
 80157be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80157c2:	f003 0301 	and.w	r3, r3, #1
 80157c6:	60fb      	str	r3, [r7, #12]
 80157c8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80157ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80157ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80157d2:	2302      	movs	r3, #2
 80157d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157d8:	2300      	movs	r3, #0
 80157da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80157de:	2300      	movs	r3, #0
 80157e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80157e4:	230a      	movs	r3, #10
 80157e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80157ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80157ee:	4619      	mov	r1, r3
 80157f0:	4810      	ldr	r0, [pc, #64]	@ (8015834 <HAL_PCD_MspInit+0xe4>)
 80157f2:	f7f0 fd95 	bl	8006320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80157f6:	4b0e      	ldr	r3, [pc, #56]	@ (8015830 <HAL_PCD_MspInit+0xe0>)
 80157f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80157fc:	4a0c      	ldr	r2, [pc, #48]	@ (8015830 <HAL_PCD_MspInit+0xe0>)
 80157fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015802:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8015806:	4b0a      	ldr	r3, [pc, #40]	@ (8015830 <HAL_PCD_MspInit+0xe0>)
 8015808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801580c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015810:	60bb      	str	r3, [r7, #8]
 8015812:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015814:	2200      	movs	r2, #0
 8015816:	2100      	movs	r1, #0
 8015818:	2065      	movs	r0, #101	@ 0x65
 801581a:	f7ed fe7e 	bl	800351a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801581e:	2065      	movs	r0, #101	@ 0x65
 8015820:	f7ed fe95 	bl	800354e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015824:	bf00      	nop
 8015826:	37e8      	adds	r7, #232	@ 0xe8
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	40080000 	.word	0x40080000
 8015830:	58024400 	.word	0x58024400
 8015834:	58020000 	.word	0x58020000

08015838 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801584c:	4619      	mov	r1, r3
 801584e:	4610      	mov	r0, r2
 8015850:	f7fe faed 	bl	8013e2e <USBD_LL_SetupStage>
}
 8015854:	bf00      	nop
 8015856:	3708      	adds	r7, #8
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}

0801585c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b082      	sub	sp, #8
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	460b      	mov	r3, r1
 8015866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801586e:	78fa      	ldrb	r2, [r7, #3]
 8015870:	6879      	ldr	r1, [r7, #4]
 8015872:	4613      	mov	r3, r2
 8015874:	00db      	lsls	r3, r3, #3
 8015876:	4413      	add	r3, r2
 8015878:	009b      	lsls	r3, r3, #2
 801587a:	440b      	add	r3, r1
 801587c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015880:	681a      	ldr	r2, [r3, #0]
 8015882:	78fb      	ldrb	r3, [r7, #3]
 8015884:	4619      	mov	r1, r3
 8015886:	f7fe fb27 	bl	8013ed8 <USBD_LL_DataOutStage>
}
 801588a:	bf00      	nop
 801588c:	3708      	adds	r7, #8
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015892:	b580      	push	{r7, lr}
 8015894:	b082      	sub	sp, #8
 8015896:	af00      	add	r7, sp, #0
 8015898:	6078      	str	r0, [r7, #4]
 801589a:	460b      	mov	r3, r1
 801589c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80158a4:	78fa      	ldrb	r2, [r7, #3]
 80158a6:	6879      	ldr	r1, [r7, #4]
 80158a8:	4613      	mov	r3, r2
 80158aa:	00db      	lsls	r3, r3, #3
 80158ac:	4413      	add	r3, r2
 80158ae:	009b      	lsls	r3, r3, #2
 80158b0:	440b      	add	r3, r1
 80158b2:	3320      	adds	r3, #32
 80158b4:	681a      	ldr	r2, [r3, #0]
 80158b6:	78fb      	ldrb	r3, [r7, #3]
 80158b8:	4619      	mov	r1, r3
 80158ba:	f7fe fbc0 	bl	801403e <USBD_LL_DataInStage>
}
 80158be:	bf00      	nop
 80158c0:	3708      	adds	r7, #8
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}

080158c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158c6:	b580      	push	{r7, lr}
 80158c8:	b082      	sub	sp, #8
 80158ca:	af00      	add	r7, sp, #0
 80158cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7fe fcfa 	bl	80142ce <USBD_LL_SOF>
}
 80158da:	bf00      	nop
 80158dc:	3708      	adds	r7, #8
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}

080158e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158e2:	b580      	push	{r7, lr}
 80158e4:	b084      	sub	sp, #16
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80158ea:	2301      	movs	r3, #1
 80158ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	79db      	ldrb	r3, [r3, #7]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d102      	bne.n	80158fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80158f6:	2300      	movs	r3, #0
 80158f8:	73fb      	strb	r3, [r7, #15]
 80158fa:	e008      	b.n	801590e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	79db      	ldrb	r3, [r3, #7]
 8015900:	2b02      	cmp	r3, #2
 8015902:	d102      	bne.n	801590a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015904:	2301      	movs	r3, #1
 8015906:	73fb      	strb	r3, [r7, #15]
 8015908:	e001      	b.n	801590e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801590a:	f7eb fb75 	bl	8000ff8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015914:	7bfa      	ldrb	r2, [r7, #15]
 8015916:	4611      	mov	r1, r2
 8015918:	4618      	mov	r0, r3
 801591a:	f7fe fc94 	bl	8014246 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015924:	4618      	mov	r0, r3
 8015926:	f7fe fc3c 	bl	80141a2 <USBD_LL_Reset>
}
 801592a:	bf00      	nop
 801592c:	3710      	adds	r7, #16
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}
	...

08015934 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015942:	4618      	mov	r0, r3
 8015944:	f7fe fc8f 	bl	8014266 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	6812      	ldr	r2, [r2, #0]
 8015956:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801595a:	f043 0301 	orr.w	r3, r3, #1
 801595e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	7adb      	ldrb	r3, [r3, #11]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d005      	beq.n	8015974 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015968:	4b04      	ldr	r3, [pc, #16]	@ (801597c <HAL_PCD_SuspendCallback+0x48>)
 801596a:	691b      	ldr	r3, [r3, #16]
 801596c:	4a03      	ldr	r2, [pc, #12]	@ (801597c <HAL_PCD_SuspendCallback+0x48>)
 801596e:	f043 0306 	orr.w	r3, r3, #6
 8015972:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015974:	bf00      	nop
 8015976:	3708      	adds	r7, #8
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}
 801597c:	e000ed00 	.word	0xe000ed00

08015980 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801598e:	4618      	mov	r0, r3
 8015990:	f7fe fc85 	bl	801429e <USBD_LL_Resume>
}
 8015994:	bf00      	nop
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	460b      	mov	r3, r1
 80159a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80159ae:	78fa      	ldrb	r2, [r7, #3]
 80159b0:	4611      	mov	r1, r2
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7fe fcdd 	bl	8014372 <USBD_LL_IsoOUTIncomplete>
}
 80159b8:	bf00      	nop
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
 80159c8:	460b      	mov	r3, r1
 80159ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80159d2:	78fa      	ldrb	r2, [r7, #3]
 80159d4:	4611      	mov	r1, r2
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7fe fc99 	bl	801430e <USBD_LL_IsoINIncomplete>
}
 80159dc:	bf00      	nop
 80159de:	3708      	adds	r7, #8
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}

080159e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b082      	sub	sp, #8
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80159f2:	4618      	mov	r0, r3
 80159f4:	f7fe fcef 	bl	80143d6 <USBD_LL_DevConnected>
}
 80159f8:	bf00      	nop
 80159fa:	3708      	adds	r7, #8
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7fe fcec 	bl	80143ec <USBD_LL_DevDisconnected>
}
 8015a14:	bf00      	nop
 8015a16:	3708      	adds	r7, #8
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d13e      	bne.n	8015aaa <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015a2c:	4a21      	ldr	r2, [pc, #132]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	4a1f      	ldr	r2, [pc, #124]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a38:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8015ab8 <USBD_LL_Init+0x9c>)
 8015a40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015a42:	4b1c      	ldr	r3, [pc, #112]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a44:	2209      	movs	r2, #9
 8015a46:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015a48:	4b1a      	ldr	r3, [pc, #104]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a4a:	2202      	movs	r2, #2
 8015a4c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015a4e:	4b19      	ldr	r3, [pc, #100]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a50:	2200      	movs	r2, #0
 8015a52:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015a54:	4b17      	ldr	r3, [pc, #92]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a56:	2202      	movs	r2, #2
 8015a58:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015a5a:	4b16      	ldr	r3, [pc, #88]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015a60:	4b14      	ldr	r3, [pc, #80]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a62:	2200      	movs	r2, #0
 8015a64:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015a66:	4b13      	ldr	r3, [pc, #76]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a68:	2200      	movs	r2, #0
 8015a6a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015a6c:	4b11      	ldr	r3, [pc, #68]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a6e:	2200      	movs	r2, #0
 8015a70:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015a72:	4b10      	ldr	r3, [pc, #64]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a74:	2200      	movs	r2, #0
 8015a76:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015a78:	4b0e      	ldr	r3, [pc, #56]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015a7e:	480d      	ldr	r0, [pc, #52]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a80:	f7f5 f96a 	bl	800ad58 <HAL_PCD_Init>
 8015a84:	4603      	mov	r3, r0
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d001      	beq.n	8015a8e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015a8a:	f7eb fab5 	bl	8000ff8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015a8e:	2180      	movs	r1, #128	@ 0x80
 8015a90:	4808      	ldr	r0, [pc, #32]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a92:	f7f6 fbc0 	bl	800c216 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015a96:	2240      	movs	r2, #64	@ 0x40
 8015a98:	2100      	movs	r1, #0
 8015a9a:	4806      	ldr	r0, [pc, #24]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015a9c:	f7f6 fb74 	bl	800c188 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015aa0:	2280      	movs	r2, #128	@ 0x80
 8015aa2:	2101      	movs	r1, #1
 8015aa4:	4803      	ldr	r0, [pc, #12]	@ (8015ab4 <USBD_LL_Init+0x98>)
 8015aa6:	f7f6 fb6f 	bl	800c188 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8015aaa:	2300      	movs	r3, #0
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	24002434 	.word	0x24002434
 8015ab8:	40080000 	.word	0x40080000

08015abc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7f5 fa4c 	bl	800af70 <HAL_PCD_Start>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015adc:	7bfb      	ldrb	r3, [r7, #15]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 f942 	bl	8015d68 <USBD_Get_USB_Status>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3710      	adds	r7, #16
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}

08015af2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015af2:	b580      	push	{r7, lr}
 8015af4:	b084      	sub	sp, #16
 8015af6:	af00      	add	r7, sp, #0
 8015af8:	6078      	str	r0, [r7, #4]
 8015afa:	4608      	mov	r0, r1
 8015afc:	4611      	mov	r1, r2
 8015afe:	461a      	mov	r2, r3
 8015b00:	4603      	mov	r3, r0
 8015b02:	70fb      	strb	r3, [r7, #3]
 8015b04:	460b      	mov	r3, r1
 8015b06:	70bb      	strb	r3, [r7, #2]
 8015b08:	4613      	mov	r3, r2
 8015b0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b10:	2300      	movs	r3, #0
 8015b12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015b1a:	78bb      	ldrb	r3, [r7, #2]
 8015b1c:	883a      	ldrh	r2, [r7, #0]
 8015b1e:	78f9      	ldrb	r1, [r7, #3]
 8015b20:	f7f5 ff4d 	bl	800b9be <HAL_PCD_EP_Open>
 8015b24:	4603      	mov	r3, r0
 8015b26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b28:	7bfb      	ldrb	r3, [r7, #15]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f000 f91c 	bl	8015d68 <USBD_Get_USB_Status>
 8015b30:	4603      	mov	r3, r0
 8015b32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3710      	adds	r7, #16
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}

08015b3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b3e:	b580      	push	{r7, lr}
 8015b40:	b084      	sub	sp, #16
 8015b42:	af00      	add	r7, sp, #0
 8015b44:	6078      	str	r0, [r7, #4]
 8015b46:	460b      	mov	r3, r1
 8015b48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b58:	78fa      	ldrb	r2, [r7, #3]
 8015b5a:	4611      	mov	r1, r2
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7f5 ff98 	bl	800ba92 <HAL_PCD_EP_Close>
 8015b62:	4603      	mov	r3, r0
 8015b64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b66:	7bfb      	ldrb	r3, [r7, #15]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f000 f8fd 	bl	8015d68 <USBD_Get_USB_Status>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3710      	adds	r7, #16
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}

08015b7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b084      	sub	sp, #16
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
 8015b84:	460b      	mov	r3, r1
 8015b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b96:	78fa      	ldrb	r2, [r7, #3]
 8015b98:	4611      	mov	r1, r2
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7f6 f850 	bl	800bc40 <HAL_PCD_EP_SetStall>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ba4:	7bfb      	ldrb	r3, [r7, #15]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f000 f8de 	bl	8015d68 <USBD_Get_USB_Status>
 8015bac:	4603      	mov	r3, r0
 8015bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3710      	adds	r7, #16
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd80      	pop	{r7, pc}

08015bba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b084      	sub	sp, #16
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015bd4:	78fa      	ldrb	r2, [r7, #3]
 8015bd6:	4611      	mov	r1, r2
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7f6 f894 	bl	800bd06 <HAL_PCD_EP_ClrStall>
 8015bde:	4603      	mov	r3, r0
 8015be0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015be2:	7bfb      	ldrb	r3, [r7, #15]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f000 f8bf 	bl	8015d68 <USBD_Get_USB_Status>
 8015bea:	4603      	mov	r3, r0
 8015bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3710      	adds	r7, #16
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}

08015bf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b085      	sub	sp, #20
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	460b      	mov	r3, r1
 8015c02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	da0b      	bge.n	8015c2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015c14:	78fb      	ldrb	r3, [r7, #3]
 8015c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015c1a:	68f9      	ldr	r1, [r7, #12]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	00db      	lsls	r3, r3, #3
 8015c20:	4413      	add	r3, r2
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	440b      	add	r3, r1
 8015c26:	3316      	adds	r3, #22
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	e00b      	b.n	8015c44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015c2c:	78fb      	ldrb	r3, [r7, #3]
 8015c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015c32:	68f9      	ldr	r1, [r7, #12]
 8015c34:	4613      	mov	r3, r2
 8015c36:	00db      	lsls	r3, r3, #3
 8015c38:	4413      	add	r3, r2
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	440b      	add	r3, r1
 8015c3e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015c42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3714      	adds	r7, #20
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4e:	4770      	bx	lr

08015c50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c60:	2300      	movs	r3, #0
 8015c62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c6a:	78fa      	ldrb	r2, [r7, #3]
 8015c6c:	4611      	mov	r1, r2
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7f5 fe81 	bl	800b976 <HAL_PCD_SetAddress>
 8015c74:	4603      	mov	r3, r0
 8015c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c78:	7bfb      	ldrb	r3, [r7, #15]
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f000 f874 	bl	8015d68 <USBD_Get_USB_Status>
 8015c80:	4603      	mov	r3, r0
 8015c82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}

08015c8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c8e:	b580      	push	{r7, lr}
 8015c90:	b086      	sub	sp, #24
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	60f8      	str	r0, [r7, #12]
 8015c96:	607a      	str	r2, [r7, #4]
 8015c98:	603b      	str	r3, [r7, #0]
 8015c9a:	460b      	mov	r3, r1
 8015c9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015cac:	7af9      	ldrb	r1, [r7, #11]
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	f7f5 ff8b 	bl	800bbcc <HAL_PCD_EP_Transmit>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cba:	7dfb      	ldrb	r3, [r7, #23]
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f000 f853 	bl	8015d68 <USBD_Get_USB_Status>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015cc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3718      	adds	r7, #24
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b086      	sub	sp, #24
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	607a      	str	r2, [r7, #4]
 8015cda:	603b      	str	r3, [r7, #0]
 8015cdc:	460b      	mov	r3, r1
 8015cde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015cee:	7af9      	ldrb	r1, [r7, #11]
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	687a      	ldr	r2, [r7, #4]
 8015cf4:	f7f5 ff17 	bl	800bb26 <HAL_PCD_EP_Receive>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cfc:	7dfb      	ldrb	r3, [r7, #23]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f000 f832 	bl	8015d68 <USBD_Get_USB_Status>
 8015d04:	4603      	mov	r3, r0
 8015d06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015d08:	7dbb      	ldrb	r3, [r7, #22]
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3718      	adds	r7, #24
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}

08015d12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d12:	b580      	push	{r7, lr}
 8015d14:	b082      	sub	sp, #8
 8015d16:	af00      	add	r7, sp, #0
 8015d18:	6078      	str	r0, [r7, #4]
 8015d1a:	460b      	mov	r3, r1
 8015d1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015d24:	78fa      	ldrb	r2, [r7, #3]
 8015d26:	4611      	mov	r1, r2
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7f5 ff37 	bl	800bb9c <HAL_PCD_EP_GetRxCount>
 8015d2e:	4603      	mov	r3, r0
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3708      	adds	r7, #8
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015d38:	b480      	push	{r7}
 8015d3a:	b083      	sub	sp, #12
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015d40:	4b03      	ldr	r3, [pc, #12]	@ (8015d50 <USBD_static_malloc+0x18>)
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	370c      	adds	r7, #12
 8015d46:	46bd      	mov	sp, r7
 8015d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4c:	4770      	bx	lr
 8015d4e:	bf00      	nop
 8015d50:	24002918 	.word	0x24002918

08015d54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015d54:	b480      	push	{r7}
 8015d56:	b083      	sub	sp, #12
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015d5c:	bf00      	nop
 8015d5e:	370c      	adds	r7, #12
 8015d60:	46bd      	mov	sp, r7
 8015d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d66:	4770      	bx	lr

08015d68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d68:	b480      	push	{r7}
 8015d6a:	b085      	sub	sp, #20
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	4603      	mov	r3, r0
 8015d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d72:	2300      	movs	r3, #0
 8015d74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015d76:	79fb      	ldrb	r3, [r7, #7]
 8015d78:	2b03      	cmp	r3, #3
 8015d7a:	d817      	bhi.n	8015dac <USBD_Get_USB_Status+0x44>
 8015d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8015d84 <USBD_Get_USB_Status+0x1c>)
 8015d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d82:	bf00      	nop
 8015d84:	08015d95 	.word	0x08015d95
 8015d88:	08015d9b 	.word	0x08015d9b
 8015d8c:	08015da1 	.word	0x08015da1
 8015d90:	08015da7 	.word	0x08015da7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015d94:	2300      	movs	r3, #0
 8015d96:	73fb      	strb	r3, [r7, #15]
    break;
 8015d98:	e00b      	b.n	8015db2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015d9a:	2303      	movs	r3, #3
 8015d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8015d9e:	e008      	b.n	8015db2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015da0:	2301      	movs	r3, #1
 8015da2:	73fb      	strb	r3, [r7, #15]
    break;
 8015da4:	e005      	b.n	8015db2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015da6:	2303      	movs	r3, #3
 8015da8:	73fb      	strb	r3, [r7, #15]
    break;
 8015daa:	e002      	b.n	8015db2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015dac:	2303      	movs	r3, #3
 8015dae:	73fb      	strb	r3, [r7, #15]
    break;
 8015db0:	bf00      	nop
  }
  return usb_status;
 8015db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3714      	adds	r7, #20
 8015db8:	46bd      	mov	sp, r7
 8015dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dbe:	4770      	bx	lr

08015dc0 <siprintf>:
 8015dc0:	b40e      	push	{r1, r2, r3}
 8015dc2:	b510      	push	{r4, lr}
 8015dc4:	b09d      	sub	sp, #116	@ 0x74
 8015dc6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015dc8:	9002      	str	r0, [sp, #8]
 8015dca:	9006      	str	r0, [sp, #24]
 8015dcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015dd0:	480a      	ldr	r0, [pc, #40]	@ (8015dfc <siprintf+0x3c>)
 8015dd2:	9107      	str	r1, [sp, #28]
 8015dd4:	9104      	str	r1, [sp, #16]
 8015dd6:	490a      	ldr	r1, [pc, #40]	@ (8015e00 <siprintf+0x40>)
 8015dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ddc:	9105      	str	r1, [sp, #20]
 8015dde:	2400      	movs	r4, #0
 8015de0:	a902      	add	r1, sp, #8
 8015de2:	6800      	ldr	r0, [r0, #0]
 8015de4:	9301      	str	r3, [sp, #4]
 8015de6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015de8:	f000 f9a2 	bl	8016130 <_svfiprintf_r>
 8015dec:	9b02      	ldr	r3, [sp, #8]
 8015dee:	701c      	strb	r4, [r3, #0]
 8015df0:	b01d      	add	sp, #116	@ 0x74
 8015df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015df6:	b003      	add	sp, #12
 8015df8:	4770      	bx	lr
 8015dfa:	bf00      	nop
 8015dfc:	24000104 	.word	0x24000104
 8015e00:	ffff0208 	.word	0xffff0208

08015e04 <memset>:
 8015e04:	4402      	add	r2, r0
 8015e06:	4603      	mov	r3, r0
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	d100      	bne.n	8015e0e <memset+0xa>
 8015e0c:	4770      	bx	lr
 8015e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8015e12:	e7f9      	b.n	8015e08 <memset+0x4>

08015e14 <__errno>:
 8015e14:	4b01      	ldr	r3, [pc, #4]	@ (8015e1c <__errno+0x8>)
 8015e16:	6818      	ldr	r0, [r3, #0]
 8015e18:	4770      	bx	lr
 8015e1a:	bf00      	nop
 8015e1c:	24000104 	.word	0x24000104

08015e20 <__libc_init_array>:
 8015e20:	b570      	push	{r4, r5, r6, lr}
 8015e22:	4d0d      	ldr	r5, [pc, #52]	@ (8015e58 <__libc_init_array+0x38>)
 8015e24:	4c0d      	ldr	r4, [pc, #52]	@ (8015e5c <__libc_init_array+0x3c>)
 8015e26:	1b64      	subs	r4, r4, r5
 8015e28:	10a4      	asrs	r4, r4, #2
 8015e2a:	2600      	movs	r6, #0
 8015e2c:	42a6      	cmp	r6, r4
 8015e2e:	d109      	bne.n	8015e44 <__libc_init_array+0x24>
 8015e30:	4d0b      	ldr	r5, [pc, #44]	@ (8015e60 <__libc_init_array+0x40>)
 8015e32:	4c0c      	ldr	r4, [pc, #48]	@ (8015e64 <__libc_init_array+0x44>)
 8015e34:	f000 fc64 	bl	8016700 <_init>
 8015e38:	1b64      	subs	r4, r4, r5
 8015e3a:	10a4      	asrs	r4, r4, #2
 8015e3c:	2600      	movs	r6, #0
 8015e3e:	42a6      	cmp	r6, r4
 8015e40:	d105      	bne.n	8015e4e <__libc_init_array+0x2e>
 8015e42:	bd70      	pop	{r4, r5, r6, pc}
 8015e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e48:	4798      	blx	r3
 8015e4a:	3601      	adds	r6, #1
 8015e4c:	e7ee      	b.n	8015e2c <__libc_init_array+0xc>
 8015e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e52:	4798      	blx	r3
 8015e54:	3601      	adds	r6, #1
 8015e56:	e7f2      	b.n	8015e3e <__libc_init_array+0x1e>
 8015e58:	08016d00 	.word	0x08016d00
 8015e5c:	08016d00 	.word	0x08016d00
 8015e60:	08016d00 	.word	0x08016d00
 8015e64:	08016d04 	.word	0x08016d04

08015e68 <__retarget_lock_acquire_recursive>:
 8015e68:	4770      	bx	lr

08015e6a <__retarget_lock_release_recursive>:
 8015e6a:	4770      	bx	lr

08015e6c <memcpy>:
 8015e6c:	440a      	add	r2, r1
 8015e6e:	4291      	cmp	r1, r2
 8015e70:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e74:	d100      	bne.n	8015e78 <memcpy+0xc>
 8015e76:	4770      	bx	lr
 8015e78:	b510      	push	{r4, lr}
 8015e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e82:	4291      	cmp	r1, r2
 8015e84:	d1f9      	bne.n	8015e7a <memcpy+0xe>
 8015e86:	bd10      	pop	{r4, pc}

08015e88 <_free_r>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	4605      	mov	r5, r0
 8015e8c:	2900      	cmp	r1, #0
 8015e8e:	d041      	beq.n	8015f14 <_free_r+0x8c>
 8015e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e94:	1f0c      	subs	r4, r1, #4
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	bfb8      	it	lt
 8015e9a:	18e4      	addlt	r4, r4, r3
 8015e9c:	f000 f8e0 	bl	8016060 <__malloc_lock>
 8015ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8015f18 <_free_r+0x90>)
 8015ea2:	6813      	ldr	r3, [r2, #0]
 8015ea4:	b933      	cbnz	r3, 8015eb4 <_free_r+0x2c>
 8015ea6:	6063      	str	r3, [r4, #4]
 8015ea8:	6014      	str	r4, [r2, #0]
 8015eaa:	4628      	mov	r0, r5
 8015eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015eb0:	f000 b8dc 	b.w	801606c <__malloc_unlock>
 8015eb4:	42a3      	cmp	r3, r4
 8015eb6:	d908      	bls.n	8015eca <_free_r+0x42>
 8015eb8:	6820      	ldr	r0, [r4, #0]
 8015eba:	1821      	adds	r1, r4, r0
 8015ebc:	428b      	cmp	r3, r1
 8015ebe:	bf01      	itttt	eq
 8015ec0:	6819      	ldreq	r1, [r3, #0]
 8015ec2:	685b      	ldreq	r3, [r3, #4]
 8015ec4:	1809      	addeq	r1, r1, r0
 8015ec6:	6021      	streq	r1, [r4, #0]
 8015ec8:	e7ed      	b.n	8015ea6 <_free_r+0x1e>
 8015eca:	461a      	mov	r2, r3
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	b10b      	cbz	r3, 8015ed4 <_free_r+0x4c>
 8015ed0:	42a3      	cmp	r3, r4
 8015ed2:	d9fa      	bls.n	8015eca <_free_r+0x42>
 8015ed4:	6811      	ldr	r1, [r2, #0]
 8015ed6:	1850      	adds	r0, r2, r1
 8015ed8:	42a0      	cmp	r0, r4
 8015eda:	d10b      	bne.n	8015ef4 <_free_r+0x6c>
 8015edc:	6820      	ldr	r0, [r4, #0]
 8015ede:	4401      	add	r1, r0
 8015ee0:	1850      	adds	r0, r2, r1
 8015ee2:	4283      	cmp	r3, r0
 8015ee4:	6011      	str	r1, [r2, #0]
 8015ee6:	d1e0      	bne.n	8015eaa <_free_r+0x22>
 8015ee8:	6818      	ldr	r0, [r3, #0]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	6053      	str	r3, [r2, #4]
 8015eee:	4408      	add	r0, r1
 8015ef0:	6010      	str	r0, [r2, #0]
 8015ef2:	e7da      	b.n	8015eaa <_free_r+0x22>
 8015ef4:	d902      	bls.n	8015efc <_free_r+0x74>
 8015ef6:	230c      	movs	r3, #12
 8015ef8:	602b      	str	r3, [r5, #0]
 8015efa:	e7d6      	b.n	8015eaa <_free_r+0x22>
 8015efc:	6820      	ldr	r0, [r4, #0]
 8015efe:	1821      	adds	r1, r4, r0
 8015f00:	428b      	cmp	r3, r1
 8015f02:	bf04      	itt	eq
 8015f04:	6819      	ldreq	r1, [r3, #0]
 8015f06:	685b      	ldreq	r3, [r3, #4]
 8015f08:	6063      	str	r3, [r4, #4]
 8015f0a:	bf04      	itt	eq
 8015f0c:	1809      	addeq	r1, r1, r0
 8015f0e:	6021      	streq	r1, [r4, #0]
 8015f10:	6054      	str	r4, [r2, #4]
 8015f12:	e7ca      	b.n	8015eaa <_free_r+0x22>
 8015f14:	bd38      	pop	{r3, r4, r5, pc}
 8015f16:	bf00      	nop
 8015f18:	24002c7c 	.word	0x24002c7c

08015f1c <sbrk_aligned>:
 8015f1c:	b570      	push	{r4, r5, r6, lr}
 8015f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8015f5c <sbrk_aligned+0x40>)
 8015f20:	460c      	mov	r4, r1
 8015f22:	6831      	ldr	r1, [r6, #0]
 8015f24:	4605      	mov	r5, r0
 8015f26:	b911      	cbnz	r1, 8015f2e <sbrk_aligned+0x12>
 8015f28:	f000 fba4 	bl	8016674 <_sbrk_r>
 8015f2c:	6030      	str	r0, [r6, #0]
 8015f2e:	4621      	mov	r1, r4
 8015f30:	4628      	mov	r0, r5
 8015f32:	f000 fb9f 	bl	8016674 <_sbrk_r>
 8015f36:	1c43      	adds	r3, r0, #1
 8015f38:	d103      	bne.n	8015f42 <sbrk_aligned+0x26>
 8015f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8015f3e:	4620      	mov	r0, r4
 8015f40:	bd70      	pop	{r4, r5, r6, pc}
 8015f42:	1cc4      	adds	r4, r0, #3
 8015f44:	f024 0403 	bic.w	r4, r4, #3
 8015f48:	42a0      	cmp	r0, r4
 8015f4a:	d0f8      	beq.n	8015f3e <sbrk_aligned+0x22>
 8015f4c:	1a21      	subs	r1, r4, r0
 8015f4e:	4628      	mov	r0, r5
 8015f50:	f000 fb90 	bl	8016674 <_sbrk_r>
 8015f54:	3001      	adds	r0, #1
 8015f56:	d1f2      	bne.n	8015f3e <sbrk_aligned+0x22>
 8015f58:	e7ef      	b.n	8015f3a <sbrk_aligned+0x1e>
 8015f5a:	bf00      	nop
 8015f5c:	24002c78 	.word	0x24002c78

08015f60 <_malloc_r>:
 8015f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f64:	1ccd      	adds	r5, r1, #3
 8015f66:	f025 0503 	bic.w	r5, r5, #3
 8015f6a:	3508      	adds	r5, #8
 8015f6c:	2d0c      	cmp	r5, #12
 8015f6e:	bf38      	it	cc
 8015f70:	250c      	movcc	r5, #12
 8015f72:	2d00      	cmp	r5, #0
 8015f74:	4606      	mov	r6, r0
 8015f76:	db01      	blt.n	8015f7c <_malloc_r+0x1c>
 8015f78:	42a9      	cmp	r1, r5
 8015f7a:	d904      	bls.n	8015f86 <_malloc_r+0x26>
 8015f7c:	230c      	movs	r3, #12
 8015f7e:	6033      	str	r3, [r6, #0]
 8015f80:	2000      	movs	r0, #0
 8015f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801605c <_malloc_r+0xfc>
 8015f8a:	f000 f869 	bl	8016060 <__malloc_lock>
 8015f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8015f92:	461c      	mov	r4, r3
 8015f94:	bb44      	cbnz	r4, 8015fe8 <_malloc_r+0x88>
 8015f96:	4629      	mov	r1, r5
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f7ff ffbf 	bl	8015f1c <sbrk_aligned>
 8015f9e:	1c43      	adds	r3, r0, #1
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	d158      	bne.n	8016056 <_malloc_r+0xf6>
 8015fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8015fa8:	4627      	mov	r7, r4
 8015faa:	2f00      	cmp	r7, #0
 8015fac:	d143      	bne.n	8016036 <_malloc_r+0xd6>
 8015fae:	2c00      	cmp	r4, #0
 8015fb0:	d04b      	beq.n	801604a <_malloc_r+0xea>
 8015fb2:	6823      	ldr	r3, [r4, #0]
 8015fb4:	4639      	mov	r1, r7
 8015fb6:	4630      	mov	r0, r6
 8015fb8:	eb04 0903 	add.w	r9, r4, r3
 8015fbc:	f000 fb5a 	bl	8016674 <_sbrk_r>
 8015fc0:	4581      	cmp	r9, r0
 8015fc2:	d142      	bne.n	801604a <_malloc_r+0xea>
 8015fc4:	6821      	ldr	r1, [r4, #0]
 8015fc6:	1a6d      	subs	r5, r5, r1
 8015fc8:	4629      	mov	r1, r5
 8015fca:	4630      	mov	r0, r6
 8015fcc:	f7ff ffa6 	bl	8015f1c <sbrk_aligned>
 8015fd0:	3001      	adds	r0, #1
 8015fd2:	d03a      	beq.n	801604a <_malloc_r+0xea>
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	442b      	add	r3, r5
 8015fd8:	6023      	str	r3, [r4, #0]
 8015fda:	f8d8 3000 	ldr.w	r3, [r8]
 8015fde:	685a      	ldr	r2, [r3, #4]
 8015fe0:	bb62      	cbnz	r2, 801603c <_malloc_r+0xdc>
 8015fe2:	f8c8 7000 	str.w	r7, [r8]
 8015fe6:	e00f      	b.n	8016008 <_malloc_r+0xa8>
 8015fe8:	6822      	ldr	r2, [r4, #0]
 8015fea:	1b52      	subs	r2, r2, r5
 8015fec:	d420      	bmi.n	8016030 <_malloc_r+0xd0>
 8015fee:	2a0b      	cmp	r2, #11
 8015ff0:	d917      	bls.n	8016022 <_malloc_r+0xc2>
 8015ff2:	1961      	adds	r1, r4, r5
 8015ff4:	42a3      	cmp	r3, r4
 8015ff6:	6025      	str	r5, [r4, #0]
 8015ff8:	bf18      	it	ne
 8015ffa:	6059      	strne	r1, [r3, #4]
 8015ffc:	6863      	ldr	r3, [r4, #4]
 8015ffe:	bf08      	it	eq
 8016000:	f8c8 1000 	streq.w	r1, [r8]
 8016004:	5162      	str	r2, [r4, r5]
 8016006:	604b      	str	r3, [r1, #4]
 8016008:	4630      	mov	r0, r6
 801600a:	f000 f82f 	bl	801606c <__malloc_unlock>
 801600e:	f104 000b 	add.w	r0, r4, #11
 8016012:	1d23      	adds	r3, r4, #4
 8016014:	f020 0007 	bic.w	r0, r0, #7
 8016018:	1ac2      	subs	r2, r0, r3
 801601a:	bf1c      	itt	ne
 801601c:	1a1b      	subne	r3, r3, r0
 801601e:	50a3      	strne	r3, [r4, r2]
 8016020:	e7af      	b.n	8015f82 <_malloc_r+0x22>
 8016022:	6862      	ldr	r2, [r4, #4]
 8016024:	42a3      	cmp	r3, r4
 8016026:	bf0c      	ite	eq
 8016028:	f8c8 2000 	streq.w	r2, [r8]
 801602c:	605a      	strne	r2, [r3, #4]
 801602e:	e7eb      	b.n	8016008 <_malloc_r+0xa8>
 8016030:	4623      	mov	r3, r4
 8016032:	6864      	ldr	r4, [r4, #4]
 8016034:	e7ae      	b.n	8015f94 <_malloc_r+0x34>
 8016036:	463c      	mov	r4, r7
 8016038:	687f      	ldr	r7, [r7, #4]
 801603a:	e7b6      	b.n	8015faa <_malloc_r+0x4a>
 801603c:	461a      	mov	r2, r3
 801603e:	685b      	ldr	r3, [r3, #4]
 8016040:	42a3      	cmp	r3, r4
 8016042:	d1fb      	bne.n	801603c <_malloc_r+0xdc>
 8016044:	2300      	movs	r3, #0
 8016046:	6053      	str	r3, [r2, #4]
 8016048:	e7de      	b.n	8016008 <_malloc_r+0xa8>
 801604a:	230c      	movs	r3, #12
 801604c:	6033      	str	r3, [r6, #0]
 801604e:	4630      	mov	r0, r6
 8016050:	f000 f80c 	bl	801606c <__malloc_unlock>
 8016054:	e794      	b.n	8015f80 <_malloc_r+0x20>
 8016056:	6005      	str	r5, [r0, #0]
 8016058:	e7d6      	b.n	8016008 <_malloc_r+0xa8>
 801605a:	bf00      	nop
 801605c:	24002c7c 	.word	0x24002c7c

08016060 <__malloc_lock>:
 8016060:	4801      	ldr	r0, [pc, #4]	@ (8016068 <__malloc_lock+0x8>)
 8016062:	f7ff bf01 	b.w	8015e68 <__retarget_lock_acquire_recursive>
 8016066:	bf00      	nop
 8016068:	24002c74 	.word	0x24002c74

0801606c <__malloc_unlock>:
 801606c:	4801      	ldr	r0, [pc, #4]	@ (8016074 <__malloc_unlock+0x8>)
 801606e:	f7ff befc 	b.w	8015e6a <__retarget_lock_release_recursive>
 8016072:	bf00      	nop
 8016074:	24002c74 	.word	0x24002c74

08016078 <__ssputs_r>:
 8016078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801607c:	688e      	ldr	r6, [r1, #8]
 801607e:	461f      	mov	r7, r3
 8016080:	42be      	cmp	r6, r7
 8016082:	680b      	ldr	r3, [r1, #0]
 8016084:	4682      	mov	sl, r0
 8016086:	460c      	mov	r4, r1
 8016088:	4690      	mov	r8, r2
 801608a:	d82d      	bhi.n	80160e8 <__ssputs_r+0x70>
 801608c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016090:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016094:	d026      	beq.n	80160e4 <__ssputs_r+0x6c>
 8016096:	6965      	ldr	r5, [r4, #20]
 8016098:	6909      	ldr	r1, [r1, #16]
 801609a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801609e:	eba3 0901 	sub.w	r9, r3, r1
 80160a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80160a6:	1c7b      	adds	r3, r7, #1
 80160a8:	444b      	add	r3, r9
 80160aa:	106d      	asrs	r5, r5, #1
 80160ac:	429d      	cmp	r5, r3
 80160ae:	bf38      	it	cc
 80160b0:	461d      	movcc	r5, r3
 80160b2:	0553      	lsls	r3, r2, #21
 80160b4:	d527      	bpl.n	8016106 <__ssputs_r+0x8e>
 80160b6:	4629      	mov	r1, r5
 80160b8:	f7ff ff52 	bl	8015f60 <_malloc_r>
 80160bc:	4606      	mov	r6, r0
 80160be:	b360      	cbz	r0, 801611a <__ssputs_r+0xa2>
 80160c0:	6921      	ldr	r1, [r4, #16]
 80160c2:	464a      	mov	r2, r9
 80160c4:	f7ff fed2 	bl	8015e6c <memcpy>
 80160c8:	89a3      	ldrh	r3, [r4, #12]
 80160ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80160ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80160d2:	81a3      	strh	r3, [r4, #12]
 80160d4:	6126      	str	r6, [r4, #16]
 80160d6:	6165      	str	r5, [r4, #20]
 80160d8:	444e      	add	r6, r9
 80160da:	eba5 0509 	sub.w	r5, r5, r9
 80160de:	6026      	str	r6, [r4, #0]
 80160e0:	60a5      	str	r5, [r4, #8]
 80160e2:	463e      	mov	r6, r7
 80160e4:	42be      	cmp	r6, r7
 80160e6:	d900      	bls.n	80160ea <__ssputs_r+0x72>
 80160e8:	463e      	mov	r6, r7
 80160ea:	6820      	ldr	r0, [r4, #0]
 80160ec:	4632      	mov	r2, r6
 80160ee:	4641      	mov	r1, r8
 80160f0:	f000 faa6 	bl	8016640 <memmove>
 80160f4:	68a3      	ldr	r3, [r4, #8]
 80160f6:	1b9b      	subs	r3, r3, r6
 80160f8:	60a3      	str	r3, [r4, #8]
 80160fa:	6823      	ldr	r3, [r4, #0]
 80160fc:	4433      	add	r3, r6
 80160fe:	6023      	str	r3, [r4, #0]
 8016100:	2000      	movs	r0, #0
 8016102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016106:	462a      	mov	r2, r5
 8016108:	f000 fac4 	bl	8016694 <_realloc_r>
 801610c:	4606      	mov	r6, r0
 801610e:	2800      	cmp	r0, #0
 8016110:	d1e0      	bne.n	80160d4 <__ssputs_r+0x5c>
 8016112:	6921      	ldr	r1, [r4, #16]
 8016114:	4650      	mov	r0, sl
 8016116:	f7ff feb7 	bl	8015e88 <_free_r>
 801611a:	230c      	movs	r3, #12
 801611c:	f8ca 3000 	str.w	r3, [sl]
 8016120:	89a3      	ldrh	r3, [r4, #12]
 8016122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016126:	81a3      	strh	r3, [r4, #12]
 8016128:	f04f 30ff 	mov.w	r0, #4294967295
 801612c:	e7e9      	b.n	8016102 <__ssputs_r+0x8a>
	...

08016130 <_svfiprintf_r>:
 8016130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016134:	4698      	mov	r8, r3
 8016136:	898b      	ldrh	r3, [r1, #12]
 8016138:	061b      	lsls	r3, r3, #24
 801613a:	b09d      	sub	sp, #116	@ 0x74
 801613c:	4607      	mov	r7, r0
 801613e:	460d      	mov	r5, r1
 8016140:	4614      	mov	r4, r2
 8016142:	d510      	bpl.n	8016166 <_svfiprintf_r+0x36>
 8016144:	690b      	ldr	r3, [r1, #16]
 8016146:	b973      	cbnz	r3, 8016166 <_svfiprintf_r+0x36>
 8016148:	2140      	movs	r1, #64	@ 0x40
 801614a:	f7ff ff09 	bl	8015f60 <_malloc_r>
 801614e:	6028      	str	r0, [r5, #0]
 8016150:	6128      	str	r0, [r5, #16]
 8016152:	b930      	cbnz	r0, 8016162 <_svfiprintf_r+0x32>
 8016154:	230c      	movs	r3, #12
 8016156:	603b      	str	r3, [r7, #0]
 8016158:	f04f 30ff 	mov.w	r0, #4294967295
 801615c:	b01d      	add	sp, #116	@ 0x74
 801615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016162:	2340      	movs	r3, #64	@ 0x40
 8016164:	616b      	str	r3, [r5, #20]
 8016166:	2300      	movs	r3, #0
 8016168:	9309      	str	r3, [sp, #36]	@ 0x24
 801616a:	2320      	movs	r3, #32
 801616c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016170:	f8cd 800c 	str.w	r8, [sp, #12]
 8016174:	2330      	movs	r3, #48	@ 0x30
 8016176:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016314 <_svfiprintf_r+0x1e4>
 801617a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801617e:	f04f 0901 	mov.w	r9, #1
 8016182:	4623      	mov	r3, r4
 8016184:	469a      	mov	sl, r3
 8016186:	f813 2b01 	ldrb.w	r2, [r3], #1
 801618a:	b10a      	cbz	r2, 8016190 <_svfiprintf_r+0x60>
 801618c:	2a25      	cmp	r2, #37	@ 0x25
 801618e:	d1f9      	bne.n	8016184 <_svfiprintf_r+0x54>
 8016190:	ebba 0b04 	subs.w	fp, sl, r4
 8016194:	d00b      	beq.n	80161ae <_svfiprintf_r+0x7e>
 8016196:	465b      	mov	r3, fp
 8016198:	4622      	mov	r2, r4
 801619a:	4629      	mov	r1, r5
 801619c:	4638      	mov	r0, r7
 801619e:	f7ff ff6b 	bl	8016078 <__ssputs_r>
 80161a2:	3001      	adds	r0, #1
 80161a4:	f000 80a7 	beq.w	80162f6 <_svfiprintf_r+0x1c6>
 80161a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80161aa:	445a      	add	r2, fp
 80161ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80161ae:	f89a 3000 	ldrb.w	r3, [sl]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	f000 809f 	beq.w	80162f6 <_svfiprintf_r+0x1c6>
 80161b8:	2300      	movs	r3, #0
 80161ba:	f04f 32ff 	mov.w	r2, #4294967295
 80161be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161c2:	f10a 0a01 	add.w	sl, sl, #1
 80161c6:	9304      	str	r3, [sp, #16]
 80161c8:	9307      	str	r3, [sp, #28]
 80161ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80161ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80161d0:	4654      	mov	r4, sl
 80161d2:	2205      	movs	r2, #5
 80161d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161d8:	484e      	ldr	r0, [pc, #312]	@ (8016314 <_svfiprintf_r+0x1e4>)
 80161da:	f7ea f889 	bl	80002f0 <memchr>
 80161de:	9a04      	ldr	r2, [sp, #16]
 80161e0:	b9d8      	cbnz	r0, 801621a <_svfiprintf_r+0xea>
 80161e2:	06d0      	lsls	r0, r2, #27
 80161e4:	bf44      	itt	mi
 80161e6:	2320      	movmi	r3, #32
 80161e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161ec:	0711      	lsls	r1, r2, #28
 80161ee:	bf44      	itt	mi
 80161f0:	232b      	movmi	r3, #43	@ 0x2b
 80161f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161f6:	f89a 3000 	ldrb.w	r3, [sl]
 80161fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80161fc:	d015      	beq.n	801622a <_svfiprintf_r+0xfa>
 80161fe:	9a07      	ldr	r2, [sp, #28]
 8016200:	4654      	mov	r4, sl
 8016202:	2000      	movs	r0, #0
 8016204:	f04f 0c0a 	mov.w	ip, #10
 8016208:	4621      	mov	r1, r4
 801620a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801620e:	3b30      	subs	r3, #48	@ 0x30
 8016210:	2b09      	cmp	r3, #9
 8016212:	d94b      	bls.n	80162ac <_svfiprintf_r+0x17c>
 8016214:	b1b0      	cbz	r0, 8016244 <_svfiprintf_r+0x114>
 8016216:	9207      	str	r2, [sp, #28]
 8016218:	e014      	b.n	8016244 <_svfiprintf_r+0x114>
 801621a:	eba0 0308 	sub.w	r3, r0, r8
 801621e:	fa09 f303 	lsl.w	r3, r9, r3
 8016222:	4313      	orrs	r3, r2
 8016224:	9304      	str	r3, [sp, #16]
 8016226:	46a2      	mov	sl, r4
 8016228:	e7d2      	b.n	80161d0 <_svfiprintf_r+0xa0>
 801622a:	9b03      	ldr	r3, [sp, #12]
 801622c:	1d19      	adds	r1, r3, #4
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	9103      	str	r1, [sp, #12]
 8016232:	2b00      	cmp	r3, #0
 8016234:	bfbb      	ittet	lt
 8016236:	425b      	neglt	r3, r3
 8016238:	f042 0202 	orrlt.w	r2, r2, #2
 801623c:	9307      	strge	r3, [sp, #28]
 801623e:	9307      	strlt	r3, [sp, #28]
 8016240:	bfb8      	it	lt
 8016242:	9204      	strlt	r2, [sp, #16]
 8016244:	7823      	ldrb	r3, [r4, #0]
 8016246:	2b2e      	cmp	r3, #46	@ 0x2e
 8016248:	d10a      	bne.n	8016260 <_svfiprintf_r+0x130>
 801624a:	7863      	ldrb	r3, [r4, #1]
 801624c:	2b2a      	cmp	r3, #42	@ 0x2a
 801624e:	d132      	bne.n	80162b6 <_svfiprintf_r+0x186>
 8016250:	9b03      	ldr	r3, [sp, #12]
 8016252:	1d1a      	adds	r2, r3, #4
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	9203      	str	r2, [sp, #12]
 8016258:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801625c:	3402      	adds	r4, #2
 801625e:	9305      	str	r3, [sp, #20]
 8016260:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016324 <_svfiprintf_r+0x1f4>
 8016264:	7821      	ldrb	r1, [r4, #0]
 8016266:	2203      	movs	r2, #3
 8016268:	4650      	mov	r0, sl
 801626a:	f7ea f841 	bl	80002f0 <memchr>
 801626e:	b138      	cbz	r0, 8016280 <_svfiprintf_r+0x150>
 8016270:	9b04      	ldr	r3, [sp, #16]
 8016272:	eba0 000a 	sub.w	r0, r0, sl
 8016276:	2240      	movs	r2, #64	@ 0x40
 8016278:	4082      	lsls	r2, r0
 801627a:	4313      	orrs	r3, r2
 801627c:	3401      	adds	r4, #1
 801627e:	9304      	str	r3, [sp, #16]
 8016280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016284:	4824      	ldr	r0, [pc, #144]	@ (8016318 <_svfiprintf_r+0x1e8>)
 8016286:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801628a:	2206      	movs	r2, #6
 801628c:	f7ea f830 	bl	80002f0 <memchr>
 8016290:	2800      	cmp	r0, #0
 8016292:	d036      	beq.n	8016302 <_svfiprintf_r+0x1d2>
 8016294:	4b21      	ldr	r3, [pc, #132]	@ (801631c <_svfiprintf_r+0x1ec>)
 8016296:	bb1b      	cbnz	r3, 80162e0 <_svfiprintf_r+0x1b0>
 8016298:	9b03      	ldr	r3, [sp, #12]
 801629a:	3307      	adds	r3, #7
 801629c:	f023 0307 	bic.w	r3, r3, #7
 80162a0:	3308      	adds	r3, #8
 80162a2:	9303      	str	r3, [sp, #12]
 80162a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162a6:	4433      	add	r3, r6
 80162a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80162aa:	e76a      	b.n	8016182 <_svfiprintf_r+0x52>
 80162ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80162b0:	460c      	mov	r4, r1
 80162b2:	2001      	movs	r0, #1
 80162b4:	e7a8      	b.n	8016208 <_svfiprintf_r+0xd8>
 80162b6:	2300      	movs	r3, #0
 80162b8:	3401      	adds	r4, #1
 80162ba:	9305      	str	r3, [sp, #20]
 80162bc:	4619      	mov	r1, r3
 80162be:	f04f 0c0a 	mov.w	ip, #10
 80162c2:	4620      	mov	r0, r4
 80162c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162c8:	3a30      	subs	r2, #48	@ 0x30
 80162ca:	2a09      	cmp	r2, #9
 80162cc:	d903      	bls.n	80162d6 <_svfiprintf_r+0x1a6>
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d0c6      	beq.n	8016260 <_svfiprintf_r+0x130>
 80162d2:	9105      	str	r1, [sp, #20]
 80162d4:	e7c4      	b.n	8016260 <_svfiprintf_r+0x130>
 80162d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80162da:	4604      	mov	r4, r0
 80162dc:	2301      	movs	r3, #1
 80162de:	e7f0      	b.n	80162c2 <_svfiprintf_r+0x192>
 80162e0:	ab03      	add	r3, sp, #12
 80162e2:	9300      	str	r3, [sp, #0]
 80162e4:	462a      	mov	r2, r5
 80162e6:	4b0e      	ldr	r3, [pc, #56]	@ (8016320 <_svfiprintf_r+0x1f0>)
 80162e8:	a904      	add	r1, sp, #16
 80162ea:	4638      	mov	r0, r7
 80162ec:	f3af 8000 	nop.w
 80162f0:	1c42      	adds	r2, r0, #1
 80162f2:	4606      	mov	r6, r0
 80162f4:	d1d6      	bne.n	80162a4 <_svfiprintf_r+0x174>
 80162f6:	89ab      	ldrh	r3, [r5, #12]
 80162f8:	065b      	lsls	r3, r3, #25
 80162fa:	f53f af2d 	bmi.w	8016158 <_svfiprintf_r+0x28>
 80162fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016300:	e72c      	b.n	801615c <_svfiprintf_r+0x2c>
 8016302:	ab03      	add	r3, sp, #12
 8016304:	9300      	str	r3, [sp, #0]
 8016306:	462a      	mov	r2, r5
 8016308:	4b05      	ldr	r3, [pc, #20]	@ (8016320 <_svfiprintf_r+0x1f0>)
 801630a:	a904      	add	r1, sp, #16
 801630c:	4638      	mov	r0, r7
 801630e:	f000 f879 	bl	8016404 <_printf_i>
 8016312:	e7ed      	b.n	80162f0 <_svfiprintf_r+0x1c0>
 8016314:	08016cc4 	.word	0x08016cc4
 8016318:	08016cce 	.word	0x08016cce
 801631c:	00000000 	.word	0x00000000
 8016320:	08016079 	.word	0x08016079
 8016324:	08016cca 	.word	0x08016cca

08016328 <_printf_common>:
 8016328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801632c:	4616      	mov	r6, r2
 801632e:	4698      	mov	r8, r3
 8016330:	688a      	ldr	r2, [r1, #8]
 8016332:	690b      	ldr	r3, [r1, #16]
 8016334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016338:	4293      	cmp	r3, r2
 801633a:	bfb8      	it	lt
 801633c:	4613      	movlt	r3, r2
 801633e:	6033      	str	r3, [r6, #0]
 8016340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016344:	4607      	mov	r7, r0
 8016346:	460c      	mov	r4, r1
 8016348:	b10a      	cbz	r2, 801634e <_printf_common+0x26>
 801634a:	3301      	adds	r3, #1
 801634c:	6033      	str	r3, [r6, #0]
 801634e:	6823      	ldr	r3, [r4, #0]
 8016350:	0699      	lsls	r1, r3, #26
 8016352:	bf42      	ittt	mi
 8016354:	6833      	ldrmi	r3, [r6, #0]
 8016356:	3302      	addmi	r3, #2
 8016358:	6033      	strmi	r3, [r6, #0]
 801635a:	6825      	ldr	r5, [r4, #0]
 801635c:	f015 0506 	ands.w	r5, r5, #6
 8016360:	d106      	bne.n	8016370 <_printf_common+0x48>
 8016362:	f104 0a19 	add.w	sl, r4, #25
 8016366:	68e3      	ldr	r3, [r4, #12]
 8016368:	6832      	ldr	r2, [r6, #0]
 801636a:	1a9b      	subs	r3, r3, r2
 801636c:	42ab      	cmp	r3, r5
 801636e:	dc26      	bgt.n	80163be <_printf_common+0x96>
 8016370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016374:	6822      	ldr	r2, [r4, #0]
 8016376:	3b00      	subs	r3, #0
 8016378:	bf18      	it	ne
 801637a:	2301      	movne	r3, #1
 801637c:	0692      	lsls	r2, r2, #26
 801637e:	d42b      	bmi.n	80163d8 <_printf_common+0xb0>
 8016380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016384:	4641      	mov	r1, r8
 8016386:	4638      	mov	r0, r7
 8016388:	47c8      	blx	r9
 801638a:	3001      	adds	r0, #1
 801638c:	d01e      	beq.n	80163cc <_printf_common+0xa4>
 801638e:	6823      	ldr	r3, [r4, #0]
 8016390:	6922      	ldr	r2, [r4, #16]
 8016392:	f003 0306 	and.w	r3, r3, #6
 8016396:	2b04      	cmp	r3, #4
 8016398:	bf02      	ittt	eq
 801639a:	68e5      	ldreq	r5, [r4, #12]
 801639c:	6833      	ldreq	r3, [r6, #0]
 801639e:	1aed      	subeq	r5, r5, r3
 80163a0:	68a3      	ldr	r3, [r4, #8]
 80163a2:	bf0c      	ite	eq
 80163a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80163a8:	2500      	movne	r5, #0
 80163aa:	4293      	cmp	r3, r2
 80163ac:	bfc4      	itt	gt
 80163ae:	1a9b      	subgt	r3, r3, r2
 80163b0:	18ed      	addgt	r5, r5, r3
 80163b2:	2600      	movs	r6, #0
 80163b4:	341a      	adds	r4, #26
 80163b6:	42b5      	cmp	r5, r6
 80163b8:	d11a      	bne.n	80163f0 <_printf_common+0xc8>
 80163ba:	2000      	movs	r0, #0
 80163bc:	e008      	b.n	80163d0 <_printf_common+0xa8>
 80163be:	2301      	movs	r3, #1
 80163c0:	4652      	mov	r2, sl
 80163c2:	4641      	mov	r1, r8
 80163c4:	4638      	mov	r0, r7
 80163c6:	47c8      	blx	r9
 80163c8:	3001      	adds	r0, #1
 80163ca:	d103      	bne.n	80163d4 <_printf_common+0xac>
 80163cc:	f04f 30ff 	mov.w	r0, #4294967295
 80163d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163d4:	3501      	adds	r5, #1
 80163d6:	e7c6      	b.n	8016366 <_printf_common+0x3e>
 80163d8:	18e1      	adds	r1, r4, r3
 80163da:	1c5a      	adds	r2, r3, #1
 80163dc:	2030      	movs	r0, #48	@ 0x30
 80163de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80163e2:	4422      	add	r2, r4
 80163e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80163e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80163ec:	3302      	adds	r3, #2
 80163ee:	e7c7      	b.n	8016380 <_printf_common+0x58>
 80163f0:	2301      	movs	r3, #1
 80163f2:	4622      	mov	r2, r4
 80163f4:	4641      	mov	r1, r8
 80163f6:	4638      	mov	r0, r7
 80163f8:	47c8      	blx	r9
 80163fa:	3001      	adds	r0, #1
 80163fc:	d0e6      	beq.n	80163cc <_printf_common+0xa4>
 80163fe:	3601      	adds	r6, #1
 8016400:	e7d9      	b.n	80163b6 <_printf_common+0x8e>
	...

08016404 <_printf_i>:
 8016404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016408:	7e0f      	ldrb	r7, [r1, #24]
 801640a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801640c:	2f78      	cmp	r7, #120	@ 0x78
 801640e:	4691      	mov	r9, r2
 8016410:	4680      	mov	r8, r0
 8016412:	460c      	mov	r4, r1
 8016414:	469a      	mov	sl, r3
 8016416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801641a:	d807      	bhi.n	801642c <_printf_i+0x28>
 801641c:	2f62      	cmp	r7, #98	@ 0x62
 801641e:	d80a      	bhi.n	8016436 <_printf_i+0x32>
 8016420:	2f00      	cmp	r7, #0
 8016422:	f000 80d1 	beq.w	80165c8 <_printf_i+0x1c4>
 8016426:	2f58      	cmp	r7, #88	@ 0x58
 8016428:	f000 80b8 	beq.w	801659c <_printf_i+0x198>
 801642c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016434:	e03a      	b.n	80164ac <_printf_i+0xa8>
 8016436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801643a:	2b15      	cmp	r3, #21
 801643c:	d8f6      	bhi.n	801642c <_printf_i+0x28>
 801643e:	a101      	add	r1, pc, #4	@ (adr r1, 8016444 <_printf_i+0x40>)
 8016440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016444:	0801649d 	.word	0x0801649d
 8016448:	080164b1 	.word	0x080164b1
 801644c:	0801642d 	.word	0x0801642d
 8016450:	0801642d 	.word	0x0801642d
 8016454:	0801642d 	.word	0x0801642d
 8016458:	0801642d 	.word	0x0801642d
 801645c:	080164b1 	.word	0x080164b1
 8016460:	0801642d 	.word	0x0801642d
 8016464:	0801642d 	.word	0x0801642d
 8016468:	0801642d 	.word	0x0801642d
 801646c:	0801642d 	.word	0x0801642d
 8016470:	080165af 	.word	0x080165af
 8016474:	080164db 	.word	0x080164db
 8016478:	08016569 	.word	0x08016569
 801647c:	0801642d 	.word	0x0801642d
 8016480:	0801642d 	.word	0x0801642d
 8016484:	080165d1 	.word	0x080165d1
 8016488:	0801642d 	.word	0x0801642d
 801648c:	080164db 	.word	0x080164db
 8016490:	0801642d 	.word	0x0801642d
 8016494:	0801642d 	.word	0x0801642d
 8016498:	08016571 	.word	0x08016571
 801649c:	6833      	ldr	r3, [r6, #0]
 801649e:	1d1a      	adds	r2, r3, #4
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	6032      	str	r2, [r6, #0]
 80164a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80164a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80164ac:	2301      	movs	r3, #1
 80164ae:	e09c      	b.n	80165ea <_printf_i+0x1e6>
 80164b0:	6833      	ldr	r3, [r6, #0]
 80164b2:	6820      	ldr	r0, [r4, #0]
 80164b4:	1d19      	adds	r1, r3, #4
 80164b6:	6031      	str	r1, [r6, #0]
 80164b8:	0606      	lsls	r6, r0, #24
 80164ba:	d501      	bpl.n	80164c0 <_printf_i+0xbc>
 80164bc:	681d      	ldr	r5, [r3, #0]
 80164be:	e003      	b.n	80164c8 <_printf_i+0xc4>
 80164c0:	0645      	lsls	r5, r0, #25
 80164c2:	d5fb      	bpl.n	80164bc <_printf_i+0xb8>
 80164c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80164c8:	2d00      	cmp	r5, #0
 80164ca:	da03      	bge.n	80164d4 <_printf_i+0xd0>
 80164cc:	232d      	movs	r3, #45	@ 0x2d
 80164ce:	426d      	negs	r5, r5
 80164d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80164d4:	4858      	ldr	r0, [pc, #352]	@ (8016638 <_printf_i+0x234>)
 80164d6:	230a      	movs	r3, #10
 80164d8:	e011      	b.n	80164fe <_printf_i+0xfa>
 80164da:	6821      	ldr	r1, [r4, #0]
 80164dc:	6833      	ldr	r3, [r6, #0]
 80164de:	0608      	lsls	r0, r1, #24
 80164e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80164e4:	d402      	bmi.n	80164ec <_printf_i+0xe8>
 80164e6:	0649      	lsls	r1, r1, #25
 80164e8:	bf48      	it	mi
 80164ea:	b2ad      	uxthmi	r5, r5
 80164ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80164ee:	4852      	ldr	r0, [pc, #328]	@ (8016638 <_printf_i+0x234>)
 80164f0:	6033      	str	r3, [r6, #0]
 80164f2:	bf14      	ite	ne
 80164f4:	230a      	movne	r3, #10
 80164f6:	2308      	moveq	r3, #8
 80164f8:	2100      	movs	r1, #0
 80164fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80164fe:	6866      	ldr	r6, [r4, #4]
 8016500:	60a6      	str	r6, [r4, #8]
 8016502:	2e00      	cmp	r6, #0
 8016504:	db05      	blt.n	8016512 <_printf_i+0x10e>
 8016506:	6821      	ldr	r1, [r4, #0]
 8016508:	432e      	orrs	r6, r5
 801650a:	f021 0104 	bic.w	r1, r1, #4
 801650e:	6021      	str	r1, [r4, #0]
 8016510:	d04b      	beq.n	80165aa <_printf_i+0x1a6>
 8016512:	4616      	mov	r6, r2
 8016514:	fbb5 f1f3 	udiv	r1, r5, r3
 8016518:	fb03 5711 	mls	r7, r3, r1, r5
 801651c:	5dc7      	ldrb	r7, [r0, r7]
 801651e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016522:	462f      	mov	r7, r5
 8016524:	42bb      	cmp	r3, r7
 8016526:	460d      	mov	r5, r1
 8016528:	d9f4      	bls.n	8016514 <_printf_i+0x110>
 801652a:	2b08      	cmp	r3, #8
 801652c:	d10b      	bne.n	8016546 <_printf_i+0x142>
 801652e:	6823      	ldr	r3, [r4, #0]
 8016530:	07df      	lsls	r7, r3, #31
 8016532:	d508      	bpl.n	8016546 <_printf_i+0x142>
 8016534:	6923      	ldr	r3, [r4, #16]
 8016536:	6861      	ldr	r1, [r4, #4]
 8016538:	4299      	cmp	r1, r3
 801653a:	bfde      	ittt	le
 801653c:	2330      	movle	r3, #48	@ 0x30
 801653e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016542:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016546:	1b92      	subs	r2, r2, r6
 8016548:	6122      	str	r2, [r4, #16]
 801654a:	f8cd a000 	str.w	sl, [sp]
 801654e:	464b      	mov	r3, r9
 8016550:	aa03      	add	r2, sp, #12
 8016552:	4621      	mov	r1, r4
 8016554:	4640      	mov	r0, r8
 8016556:	f7ff fee7 	bl	8016328 <_printf_common>
 801655a:	3001      	adds	r0, #1
 801655c:	d14a      	bne.n	80165f4 <_printf_i+0x1f0>
 801655e:	f04f 30ff 	mov.w	r0, #4294967295
 8016562:	b004      	add	sp, #16
 8016564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016568:	6823      	ldr	r3, [r4, #0]
 801656a:	f043 0320 	orr.w	r3, r3, #32
 801656e:	6023      	str	r3, [r4, #0]
 8016570:	4832      	ldr	r0, [pc, #200]	@ (801663c <_printf_i+0x238>)
 8016572:	2778      	movs	r7, #120	@ 0x78
 8016574:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016578:	6823      	ldr	r3, [r4, #0]
 801657a:	6831      	ldr	r1, [r6, #0]
 801657c:	061f      	lsls	r7, r3, #24
 801657e:	f851 5b04 	ldr.w	r5, [r1], #4
 8016582:	d402      	bmi.n	801658a <_printf_i+0x186>
 8016584:	065f      	lsls	r7, r3, #25
 8016586:	bf48      	it	mi
 8016588:	b2ad      	uxthmi	r5, r5
 801658a:	6031      	str	r1, [r6, #0]
 801658c:	07d9      	lsls	r1, r3, #31
 801658e:	bf44      	itt	mi
 8016590:	f043 0320 	orrmi.w	r3, r3, #32
 8016594:	6023      	strmi	r3, [r4, #0]
 8016596:	b11d      	cbz	r5, 80165a0 <_printf_i+0x19c>
 8016598:	2310      	movs	r3, #16
 801659a:	e7ad      	b.n	80164f8 <_printf_i+0xf4>
 801659c:	4826      	ldr	r0, [pc, #152]	@ (8016638 <_printf_i+0x234>)
 801659e:	e7e9      	b.n	8016574 <_printf_i+0x170>
 80165a0:	6823      	ldr	r3, [r4, #0]
 80165a2:	f023 0320 	bic.w	r3, r3, #32
 80165a6:	6023      	str	r3, [r4, #0]
 80165a8:	e7f6      	b.n	8016598 <_printf_i+0x194>
 80165aa:	4616      	mov	r6, r2
 80165ac:	e7bd      	b.n	801652a <_printf_i+0x126>
 80165ae:	6833      	ldr	r3, [r6, #0]
 80165b0:	6825      	ldr	r5, [r4, #0]
 80165b2:	6961      	ldr	r1, [r4, #20]
 80165b4:	1d18      	adds	r0, r3, #4
 80165b6:	6030      	str	r0, [r6, #0]
 80165b8:	062e      	lsls	r6, r5, #24
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	d501      	bpl.n	80165c2 <_printf_i+0x1be>
 80165be:	6019      	str	r1, [r3, #0]
 80165c0:	e002      	b.n	80165c8 <_printf_i+0x1c4>
 80165c2:	0668      	lsls	r0, r5, #25
 80165c4:	d5fb      	bpl.n	80165be <_printf_i+0x1ba>
 80165c6:	8019      	strh	r1, [r3, #0]
 80165c8:	2300      	movs	r3, #0
 80165ca:	6123      	str	r3, [r4, #16]
 80165cc:	4616      	mov	r6, r2
 80165ce:	e7bc      	b.n	801654a <_printf_i+0x146>
 80165d0:	6833      	ldr	r3, [r6, #0]
 80165d2:	1d1a      	adds	r2, r3, #4
 80165d4:	6032      	str	r2, [r6, #0]
 80165d6:	681e      	ldr	r6, [r3, #0]
 80165d8:	6862      	ldr	r2, [r4, #4]
 80165da:	2100      	movs	r1, #0
 80165dc:	4630      	mov	r0, r6
 80165de:	f7e9 fe87 	bl	80002f0 <memchr>
 80165e2:	b108      	cbz	r0, 80165e8 <_printf_i+0x1e4>
 80165e4:	1b80      	subs	r0, r0, r6
 80165e6:	6060      	str	r0, [r4, #4]
 80165e8:	6863      	ldr	r3, [r4, #4]
 80165ea:	6123      	str	r3, [r4, #16]
 80165ec:	2300      	movs	r3, #0
 80165ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80165f2:	e7aa      	b.n	801654a <_printf_i+0x146>
 80165f4:	6923      	ldr	r3, [r4, #16]
 80165f6:	4632      	mov	r2, r6
 80165f8:	4649      	mov	r1, r9
 80165fa:	4640      	mov	r0, r8
 80165fc:	47d0      	blx	sl
 80165fe:	3001      	adds	r0, #1
 8016600:	d0ad      	beq.n	801655e <_printf_i+0x15a>
 8016602:	6823      	ldr	r3, [r4, #0]
 8016604:	079b      	lsls	r3, r3, #30
 8016606:	d413      	bmi.n	8016630 <_printf_i+0x22c>
 8016608:	68e0      	ldr	r0, [r4, #12]
 801660a:	9b03      	ldr	r3, [sp, #12]
 801660c:	4298      	cmp	r0, r3
 801660e:	bfb8      	it	lt
 8016610:	4618      	movlt	r0, r3
 8016612:	e7a6      	b.n	8016562 <_printf_i+0x15e>
 8016614:	2301      	movs	r3, #1
 8016616:	4632      	mov	r2, r6
 8016618:	4649      	mov	r1, r9
 801661a:	4640      	mov	r0, r8
 801661c:	47d0      	blx	sl
 801661e:	3001      	adds	r0, #1
 8016620:	d09d      	beq.n	801655e <_printf_i+0x15a>
 8016622:	3501      	adds	r5, #1
 8016624:	68e3      	ldr	r3, [r4, #12]
 8016626:	9903      	ldr	r1, [sp, #12]
 8016628:	1a5b      	subs	r3, r3, r1
 801662a:	42ab      	cmp	r3, r5
 801662c:	dcf2      	bgt.n	8016614 <_printf_i+0x210>
 801662e:	e7eb      	b.n	8016608 <_printf_i+0x204>
 8016630:	2500      	movs	r5, #0
 8016632:	f104 0619 	add.w	r6, r4, #25
 8016636:	e7f5      	b.n	8016624 <_printf_i+0x220>
 8016638:	08016cd5 	.word	0x08016cd5
 801663c:	08016ce6 	.word	0x08016ce6

08016640 <memmove>:
 8016640:	4288      	cmp	r0, r1
 8016642:	b510      	push	{r4, lr}
 8016644:	eb01 0402 	add.w	r4, r1, r2
 8016648:	d902      	bls.n	8016650 <memmove+0x10>
 801664a:	4284      	cmp	r4, r0
 801664c:	4623      	mov	r3, r4
 801664e:	d807      	bhi.n	8016660 <memmove+0x20>
 8016650:	1e43      	subs	r3, r0, #1
 8016652:	42a1      	cmp	r1, r4
 8016654:	d008      	beq.n	8016668 <memmove+0x28>
 8016656:	f811 2b01 	ldrb.w	r2, [r1], #1
 801665a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801665e:	e7f8      	b.n	8016652 <memmove+0x12>
 8016660:	4402      	add	r2, r0
 8016662:	4601      	mov	r1, r0
 8016664:	428a      	cmp	r2, r1
 8016666:	d100      	bne.n	801666a <memmove+0x2a>
 8016668:	bd10      	pop	{r4, pc}
 801666a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801666e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016672:	e7f7      	b.n	8016664 <memmove+0x24>

08016674 <_sbrk_r>:
 8016674:	b538      	push	{r3, r4, r5, lr}
 8016676:	4d06      	ldr	r5, [pc, #24]	@ (8016690 <_sbrk_r+0x1c>)
 8016678:	2300      	movs	r3, #0
 801667a:	4604      	mov	r4, r0
 801667c:	4608      	mov	r0, r1
 801667e:	602b      	str	r3, [r5, #0]
 8016680:	f7eb f8e2 	bl	8001848 <_sbrk>
 8016684:	1c43      	adds	r3, r0, #1
 8016686:	d102      	bne.n	801668e <_sbrk_r+0x1a>
 8016688:	682b      	ldr	r3, [r5, #0]
 801668a:	b103      	cbz	r3, 801668e <_sbrk_r+0x1a>
 801668c:	6023      	str	r3, [r4, #0]
 801668e:	bd38      	pop	{r3, r4, r5, pc}
 8016690:	24002c70 	.word	0x24002c70

08016694 <_realloc_r>:
 8016694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016698:	4607      	mov	r7, r0
 801669a:	4614      	mov	r4, r2
 801669c:	460d      	mov	r5, r1
 801669e:	b921      	cbnz	r1, 80166aa <_realloc_r+0x16>
 80166a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166a4:	4611      	mov	r1, r2
 80166a6:	f7ff bc5b 	b.w	8015f60 <_malloc_r>
 80166aa:	b92a      	cbnz	r2, 80166b8 <_realloc_r+0x24>
 80166ac:	f7ff fbec 	bl	8015e88 <_free_r>
 80166b0:	4625      	mov	r5, r4
 80166b2:	4628      	mov	r0, r5
 80166b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166b8:	f000 f81a 	bl	80166f0 <_malloc_usable_size_r>
 80166bc:	4284      	cmp	r4, r0
 80166be:	4606      	mov	r6, r0
 80166c0:	d802      	bhi.n	80166c8 <_realloc_r+0x34>
 80166c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80166c6:	d8f4      	bhi.n	80166b2 <_realloc_r+0x1e>
 80166c8:	4621      	mov	r1, r4
 80166ca:	4638      	mov	r0, r7
 80166cc:	f7ff fc48 	bl	8015f60 <_malloc_r>
 80166d0:	4680      	mov	r8, r0
 80166d2:	b908      	cbnz	r0, 80166d8 <_realloc_r+0x44>
 80166d4:	4645      	mov	r5, r8
 80166d6:	e7ec      	b.n	80166b2 <_realloc_r+0x1e>
 80166d8:	42b4      	cmp	r4, r6
 80166da:	4622      	mov	r2, r4
 80166dc:	4629      	mov	r1, r5
 80166de:	bf28      	it	cs
 80166e0:	4632      	movcs	r2, r6
 80166e2:	f7ff fbc3 	bl	8015e6c <memcpy>
 80166e6:	4629      	mov	r1, r5
 80166e8:	4638      	mov	r0, r7
 80166ea:	f7ff fbcd 	bl	8015e88 <_free_r>
 80166ee:	e7f1      	b.n	80166d4 <_realloc_r+0x40>

080166f0 <_malloc_usable_size_r>:
 80166f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166f4:	1f18      	subs	r0, r3, #4
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	bfbc      	itt	lt
 80166fa:	580b      	ldrlt	r3, [r1, r0]
 80166fc:	18c0      	addlt	r0, r0, r3
 80166fe:	4770      	bx	lr

08016700 <_init>:
 8016700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016702:	bf00      	nop
 8016704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016706:	bc08      	pop	{r3}
 8016708:	469e      	mov	lr, r3
 801670a:	4770      	bx	lr

0801670c <_fini>:
 801670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801670e:	bf00      	nop
 8016710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016712:	bc08      	pop	{r3}
 8016714:	469e      	mov	lr, r3
 8016716:	4770      	bx	lr
